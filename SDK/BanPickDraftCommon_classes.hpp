#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BanPickDraftCommon

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "BanPickDraftCommon_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class BanPickDraftCommon.DraftActorInterface
// 0x0000 (0x0000 - 0x0000)
class IDraftActorInterface final
{
public:
	class ADraftReplicatedActor* GetDraftActor(const class FName& InDraftName) const;
	bool IsUIRelevantOrSpectator() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DraftActorInterface">();
	}
	static class IDraftActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDraftActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IDraftActorInterface) == 0x000001, "Wrong alignment on IDraftActorInterface");
static_assert(sizeof(IDraftActorInterface) == 0x000001, "Wrong size on IDraftActorInterface");

// Class BanPickDraftCommon.DraftAuthority
// 0x0908 (0x0BA0 - 0x0298)
class ADraftAuthority : public AInfo
{
public:
	uint8                                         Pad_298[0x80];                                     // 0x0298(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DraftName;                                         // 0x0318(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowUnownedChoices;                              // 0x0320(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UObject*>                          AllowUnownedSpecificChoices;                       // 0x0328(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UDraftRules>                DraftRules;                                        // 0x0378(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDraftChoice>                   Choices;                                           // 0x0380(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FDraftTaskList                         CompletedDraftTasks;                               // 0x0390(0x0130)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDraftTaskList                         ActiveDraftTasks;                                  // 0x04C0(0x0130)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDraftTaskList                         PendingDraftTasks;                                 // 0x05F0(0x0130)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FDraftTaskList                         DelayedDraftTasks;                                 // 0x0720(0x0130)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FDraftPlayerIdHandle>             ParticipatingPlayers;                              // 0x0850(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FDraftPlayerIdHandle>             ProxyOnlyPlayers;                                  // 0x08A0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FDraftPlayerIdHandle>             RemainingPlayers;                                  // 0x08F0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FDraftPlayerIdHandle, class ADraftReplicatedActor*> ActiveDraftReplicatedActors;     // 0x0940(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FDraftPlayerIdHandle>             KnownDisconnectPlayers;                            // 0x0990(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDraftPlayerIdHandle>           AvailableProxies;                                  // 0x09E0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TSet<struct FDraftPlayerIdHandle>             AIPlayers;                                         // 0x09F0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasStarted;                                       // 0x0A40(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasCompletedInitialDraft;                         // 0x0A41(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A42[0x2];                                      // 0x0A42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesStarted;                                      // 0x0A44(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPGame_ReplicatedTimerManager          TimerManager;                                      // 0x0A48(0x0140)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B88[0x18];                                     // 0x0B88(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DraftAuthority">();
	}
	static class ADraftAuthority* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADraftAuthority>();
	}
};
static_assert(alignof(ADraftAuthority) == 0x000008, "Wrong alignment on ADraftAuthority");
static_assert(sizeof(ADraftAuthority) == 0x000BA0, "Wrong size on ADraftAuthority");
static_assert(offsetof(ADraftAuthority, DraftName) == 0x000318, "Member 'ADraftAuthority::DraftName' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, bAllowUnownedChoices) == 0x000320, "Member 'ADraftAuthority::bAllowUnownedChoices' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, AllowUnownedSpecificChoices) == 0x000328, "Member 'ADraftAuthority::AllowUnownedSpecificChoices' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, DraftRules) == 0x000378, "Member 'ADraftAuthority::DraftRules' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, Choices) == 0x000380, "Member 'ADraftAuthority::Choices' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, CompletedDraftTasks) == 0x000390, "Member 'ADraftAuthority::CompletedDraftTasks' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, ActiveDraftTasks) == 0x0004C0, "Member 'ADraftAuthority::ActiveDraftTasks' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, PendingDraftTasks) == 0x0005F0, "Member 'ADraftAuthority::PendingDraftTasks' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, DelayedDraftTasks) == 0x000720, "Member 'ADraftAuthority::DelayedDraftTasks' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, ParticipatingPlayers) == 0x000850, "Member 'ADraftAuthority::ParticipatingPlayers' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, ProxyOnlyPlayers) == 0x0008A0, "Member 'ADraftAuthority::ProxyOnlyPlayers' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, RemainingPlayers) == 0x0008F0, "Member 'ADraftAuthority::RemainingPlayers' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, ActiveDraftReplicatedActors) == 0x000940, "Member 'ADraftAuthority::ActiveDraftReplicatedActors' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, KnownDisconnectPlayers) == 0x000990, "Member 'ADraftAuthority::KnownDisconnectPlayers' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, AvailableProxies) == 0x0009E0, "Member 'ADraftAuthority::AvailableProxies' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, AIPlayers) == 0x0009F0, "Member 'ADraftAuthority::AIPlayers' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, bHasStarted) == 0x000A40, "Member 'ADraftAuthority::bHasStarted' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, bHasCompletedInitialDraft) == 0x000A41, "Member 'ADraftAuthority::bHasCompletedInitialDraft' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, TimesStarted) == 0x000A44, "Member 'ADraftAuthority::TimesStarted' has a wrong offset!");
static_assert(offsetof(ADraftAuthority, TimerManager) == 0x000A48, "Member 'ADraftAuthority::TimerManager' has a wrong offset!");

// Class BanPickDraftCommon.DraftReplicatedActor
// 0x07B0 (0x0A48 - 0x0298)
class ADraftReplicatedActor : public AInfo
{
public:
	class FName                                   DraftName;                                         // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDraftRules>                DraftRules;                                        // 0x02A0(0x0008)(Net, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDraftTask                             PersonalActiveTask;                                // 0x02A8(0x0048)(Net, RepNotify, NativeAccessSpecifierPublic)
	struct FDraftTask                             LocalPersonalActiveTask;                           // 0x02F0(0x0048)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bLocalPersonalTaskPendingComplete;                 // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDraftChoice>                   Choices;                                           // 0x0340(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	struct FDraftTaskList                         CompletedTasks;                                    // 0x0350(0x0130)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	struct FDraftTaskList                         ActiveTasks;                                       // 0x0480(0x0130)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	struct FDraftTaskList                         PendingTasks;                                      // 0x05B0(0x0130)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	bool                                          bAllPersonalTasksAreComplete;                      // 0x06E0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalAllPersonalTasksAreComplete;                 // 0x06E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraftHasEnded;                                    // 0x06E2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E3[0x5];                                      // 0x06E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnRequestSelectSuccessful;                         // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestSelectFailed;                             // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestCompleteSuccessful;                       // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRequestCompleteFailed;                           // 0x0718(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const TArray<class UObject*>& RemovedChoices, const TArray<class UObject*>& AddedOrUpdatedChoices)> OnDraftChoicesChanged; // 0x0728(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTasksChanged;                                    // 0x0738(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPendingTasksChanged;                             // 0x0748(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDraftTask& CompletedTask)> OnTaskCompleted;          // 0x0758(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPersonalActiveTaskChanged;                       // 0x0768(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAllPersonalTasksCompleted;                       // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndDraft;                                        // 0x0788(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ADraftAuthority>         DraftAuthority;                                    // 0x0798(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PostDraftLifeSpan;                                 // 0x07A0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DraftActorId;                                      // 0x07A4(0x0004)(Net, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDraftPlayerIdHandle                   CachedDraftPlayerId;                               // 0x07A8(0x0010)(Net, Transient, DuplicateTransient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPGame_ReplicatedTimerManagerSlave     TimerManager;                                      // 0x07B8(0x0170)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_928[0x10];                                     // 0x0928(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bChoicesAreDirty;                                  // 0x0938(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTasksAreDirty;                                    // 0x0939(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPendingTasksAreDirty;                             // 0x093A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPersonalTaskIsDirty;                              // 0x093B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllPersonTasksCompleteIsDirty;                    // 0x093C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOwnerIsDirty;                                     // 0x093D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_93E[0x2];                                      // 0x093E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FDraftTaskId>                     BroadcastedTasks;                                  // 0x0940(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class UObject*, int32>                   ObjectToChoiceIndexMap;                            // 0x0990(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9E0[0x50];                                     // 0x09E0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      OwningPlayerController;                            // 0x0A30(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 PrevLocalSelectedChoice;                           // 0x0A38(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 PrevLockedChoiceForLocalPlayer;                    // 0x0A40(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static struct FDraftTask EmptyDraftTask();
	static bool IsTaskIdsEqual(const struct FDraftTaskId& A, const struct FDraftTaskId& B);
	static bool IsTaskIdValid(const struct FDraftTaskId& InTaskId);
	static bool IsTaskValid(const struct FDraftTask& InTask);
	static bool TasksEqual(const struct FDraftTask& A, const struct FDraftTask& B);

	void ClientAcknowledgeComplete(const struct FDraftTaskId& TaskId, bool bSuccess);
	void ClientAcknowledgeSelect(const struct FDraftTaskId& TaskId, bool bSuccess);
	struct FDraftChoice FindChoiceByUObject(class UObject* ChoiceObject);
	void OnPlayerOwnerLogout(class AActor* InActor);
	void OnRep_AllPersonalTasksAreComplete();
	void OnRep_Choices();
	void OnRep_DraftName();
	void OnRep_PersonalActiveTask();
	ECanCompleteDraftTaskResult RequestCompleteTask(class UObject* ChoiceObject);
	ECanCompleteDraftTaskResult RequestSelect(class UObject* ChoiceObject);
	void ServerRequestComplete(const struct FDraftTaskId& TaskId, class UObject* ChoiceObject);
	void ServerRequestSelect(const struct FDraftTaskId& TaskId, class UObject* ChoiceObject);

	struct FDraftTask GetActiveTaskForPlayer(const struct FDraftPlayerIdHandle& InPlayerId, bool* bPendingComplete) const;
	TArray<struct FDraftTask> GetCompletedTasksForPlayer(const struct FDraftPlayerIdHandle& InPlayerId) const;
	class APlayerController* GetOwningPlayerController() const;
	float GetTimeRemainingByTaskId(const struct FDraftTaskId& TaskId) const;
	float GetTimeRemainingByTimerId(const struct FPGame_ReplicatedTimerId& TimerId) const;
	EPGame_ReplicateTimerState GetTimerStateByTaskId(const struct FDraftTaskId& TaskId) const;
	EPGame_ReplicateTimerState GetTimerStateByTimerId(const struct FPGame_ReplicatedTimerId& TimerId) const;
	float GetTimeUntilLastActiveTaskExpires() const;
	float GetTimeUntilNextActiveTaskExpires() const;
	ECanCompleteDraftTaskResult IsValidChoiceForPersonalActiveTask(class UObject* ChoiceObject) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DraftReplicatedActor">();
	}
	static class ADraftReplicatedActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADraftReplicatedActor>();
	}
};
static_assert(alignof(ADraftReplicatedActor) == 0x000008, "Wrong alignment on ADraftReplicatedActor");
static_assert(sizeof(ADraftReplicatedActor) == 0x000A48, "Wrong size on ADraftReplicatedActor");
static_assert(offsetof(ADraftReplicatedActor, DraftName) == 0x000298, "Member 'ADraftReplicatedActor::DraftName' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, DraftRules) == 0x0002A0, "Member 'ADraftReplicatedActor::DraftRules' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, PersonalActiveTask) == 0x0002A8, "Member 'ADraftReplicatedActor::PersonalActiveTask' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, LocalPersonalActiveTask) == 0x0002F0, "Member 'ADraftReplicatedActor::LocalPersonalActiveTask' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bLocalPersonalTaskPendingComplete) == 0x000338, "Member 'ADraftReplicatedActor::bLocalPersonalTaskPendingComplete' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, Choices) == 0x000340, "Member 'ADraftReplicatedActor::Choices' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, CompletedTasks) == 0x000350, "Member 'ADraftReplicatedActor::CompletedTasks' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, ActiveTasks) == 0x000480, "Member 'ADraftReplicatedActor::ActiveTasks' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, PendingTasks) == 0x0005B0, "Member 'ADraftReplicatedActor::PendingTasks' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bAllPersonalTasksAreComplete) == 0x0006E0, "Member 'ADraftReplicatedActor::bAllPersonalTasksAreComplete' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bLocalAllPersonalTasksAreComplete) == 0x0006E1, "Member 'ADraftReplicatedActor::bLocalAllPersonalTasksAreComplete' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bDraftHasEnded) == 0x0006E2, "Member 'ADraftReplicatedActor::bDraftHasEnded' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnRequestSelectSuccessful) == 0x0006E8, "Member 'ADraftReplicatedActor::OnRequestSelectSuccessful' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnRequestSelectFailed) == 0x0006F8, "Member 'ADraftReplicatedActor::OnRequestSelectFailed' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnRequestCompleteSuccessful) == 0x000708, "Member 'ADraftReplicatedActor::OnRequestCompleteSuccessful' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnRequestCompleteFailed) == 0x000718, "Member 'ADraftReplicatedActor::OnRequestCompleteFailed' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnDraftChoicesChanged) == 0x000728, "Member 'ADraftReplicatedActor::OnDraftChoicesChanged' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnTasksChanged) == 0x000738, "Member 'ADraftReplicatedActor::OnTasksChanged' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnPendingTasksChanged) == 0x000748, "Member 'ADraftReplicatedActor::OnPendingTasksChanged' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnTaskCompleted) == 0x000758, "Member 'ADraftReplicatedActor::OnTaskCompleted' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnPersonalActiveTaskChanged) == 0x000768, "Member 'ADraftReplicatedActor::OnPersonalActiveTaskChanged' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnAllPersonalTasksCompleted) == 0x000778, "Member 'ADraftReplicatedActor::OnAllPersonalTasksCompleted' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OnEndDraft) == 0x000788, "Member 'ADraftReplicatedActor::OnEndDraft' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, DraftAuthority) == 0x000798, "Member 'ADraftReplicatedActor::DraftAuthority' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, PostDraftLifeSpan) == 0x0007A0, "Member 'ADraftReplicatedActor::PostDraftLifeSpan' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, DraftActorId) == 0x0007A4, "Member 'ADraftReplicatedActor::DraftActorId' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, CachedDraftPlayerId) == 0x0007A8, "Member 'ADraftReplicatedActor::CachedDraftPlayerId' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, TimerManager) == 0x0007B8, "Member 'ADraftReplicatedActor::TimerManager' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bChoicesAreDirty) == 0x000938, "Member 'ADraftReplicatedActor::bChoicesAreDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bTasksAreDirty) == 0x000939, "Member 'ADraftReplicatedActor::bTasksAreDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bPendingTasksAreDirty) == 0x00093A, "Member 'ADraftReplicatedActor::bPendingTasksAreDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bPersonalTaskIsDirty) == 0x00093B, "Member 'ADraftReplicatedActor::bPersonalTaskIsDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bAllPersonTasksCompleteIsDirty) == 0x00093C, "Member 'ADraftReplicatedActor::bAllPersonTasksCompleteIsDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, bOwnerIsDirty) == 0x00093D, "Member 'ADraftReplicatedActor::bOwnerIsDirty' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, BroadcastedTasks) == 0x000940, "Member 'ADraftReplicatedActor::BroadcastedTasks' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, ObjectToChoiceIndexMap) == 0x000990, "Member 'ADraftReplicatedActor::ObjectToChoiceIndexMap' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, OwningPlayerController) == 0x000A30, "Member 'ADraftReplicatedActor::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, PrevLocalSelectedChoice) == 0x000A38, "Member 'ADraftReplicatedActor::PrevLocalSelectedChoice' has a wrong offset!");
static_assert(offsetof(ADraftReplicatedActor, PrevLockedChoiceForLocalPlayer) == 0x000A40, "Member 'ADraftReplicatedActor::PrevLockedChoiceForLocalPlayer' has a wrong offset!");

// Class BanPickDraftCommon.DraftRules
// 0x0070 (0x0098 - 0x0028)
class UDraftRules : public UObject
{
public:
	EDraftPickExclusivity                         PickExclusivity;                                   // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDraftSelectProxyRules                        PickProxyRules;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyAlwaysCompletesPicks;                        // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanAbstainFromBan;                                // 0x002B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDraftBanEffects                              BanEffects;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDraftSelectProxyRules                        BanProxyRules;                                     // 0x002D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyAlwaysCompletesBans;                         // 0x002E(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDraftSelectProxyRules                        LockProxyRules;                                    // 0x002F(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxyAlwaysCompletesLocks;                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReselectTime;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSelectInvalidChoice;                           // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSelectNullChoice;                              // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireChoiceOwnership;                           // 0x003A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUnavailableChoicesOnUI;                       // 0x003B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AIDraftQuery;                                      // 0x0040(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ADraftReplicatedActor>      DraftReplicatedActorClass;                         // 0x0088(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryCompleteAITasksOnCleanup;                      // 0x0090(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKillTimersEvenIfActiveTasks;                      // 0x0091(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetOverallStatusTextAndTimer(const class ADraftReplicatedActor* InDraftActor, struct FPGame_ReplicatedTimerId* OutActiveTimerId, struct FDraftTask* PrimaryTask) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DraftRules">();
	}
	static class UDraftRules* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDraftRules>();
	}
};
static_assert(alignof(UDraftRules) == 0x000008, "Wrong alignment on UDraftRules");
static_assert(sizeof(UDraftRules) == 0x000098, "Wrong size on UDraftRules");
static_assert(offsetof(UDraftRules, PickExclusivity) == 0x000028, "Member 'UDraftRules::PickExclusivity' has a wrong offset!");
static_assert(offsetof(UDraftRules, PickProxyRules) == 0x000029, "Member 'UDraftRules::PickProxyRules' has a wrong offset!");
static_assert(offsetof(UDraftRules, bProxyAlwaysCompletesPicks) == 0x00002A, "Member 'UDraftRules::bProxyAlwaysCompletesPicks' has a wrong offset!");
static_assert(offsetof(UDraftRules, bCanAbstainFromBan) == 0x00002B, "Member 'UDraftRules::bCanAbstainFromBan' has a wrong offset!");
static_assert(offsetof(UDraftRules, BanEffects) == 0x00002C, "Member 'UDraftRules::BanEffects' has a wrong offset!");
static_assert(offsetof(UDraftRules, BanProxyRules) == 0x00002D, "Member 'UDraftRules::BanProxyRules' has a wrong offset!");
static_assert(offsetof(UDraftRules, bProxyAlwaysCompletesBans) == 0x00002E, "Member 'UDraftRules::bProxyAlwaysCompletesBans' has a wrong offset!");
static_assert(offsetof(UDraftRules, LockProxyRules) == 0x00002F, "Member 'UDraftRules::LockProxyRules' has a wrong offset!");
static_assert(offsetof(UDraftRules, bProxyAlwaysCompletesLocks) == 0x000030, "Member 'UDraftRules::bProxyAlwaysCompletesLocks' has a wrong offset!");
static_assert(offsetof(UDraftRules, ReselectTime) == 0x000034, "Member 'UDraftRules::ReselectTime' has a wrong offset!");
static_assert(offsetof(UDraftRules, bCanSelectInvalidChoice) == 0x000038, "Member 'UDraftRules::bCanSelectInvalidChoice' has a wrong offset!");
static_assert(offsetof(UDraftRules, bCanSelectNullChoice) == 0x000039, "Member 'UDraftRules::bCanSelectNullChoice' has a wrong offset!");
static_assert(offsetof(UDraftRules, bRequireChoiceOwnership) == 0x00003A, "Member 'UDraftRules::bRequireChoiceOwnership' has a wrong offset!");
static_assert(offsetof(UDraftRules, bShowUnavailableChoicesOnUI) == 0x00003B, "Member 'UDraftRules::bShowUnavailableChoicesOnUI' has a wrong offset!");
static_assert(offsetof(UDraftRules, AIDraftQuery) == 0x000040, "Member 'UDraftRules::AIDraftQuery' has a wrong offset!");
static_assert(offsetof(UDraftRules, DraftReplicatedActorClass) == 0x000088, "Member 'UDraftRules::DraftReplicatedActorClass' has a wrong offset!");
static_assert(offsetof(UDraftRules, bTryCompleteAITasksOnCleanup) == 0x000090, "Member 'UDraftRules::bTryCompleteAITasksOnCleanup' has a wrong offset!");
static_assert(offsetof(UDraftRules, bKillTimersEvenIfActiveTasks) == 0x000091, "Member 'UDraftRules::bKillTimersEvenIfActiveTasks' has a wrong offset!");

}

