#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HiRezAutomation

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct HiRezAutomation.PerfMapRow
// 0x0050 (0x0058 - 0x0008)
struct FPerfMapRow final : public FTableRowBase
{
public:
	TMap<class FString, TSoftObjectPtr<class UWorld>> LightingMap;                                   // 0x0008(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerfMapRow) == 0x000008, "Wrong alignment on FPerfMapRow");
static_assert(sizeof(FPerfMapRow) == 0x000058, "Wrong size on FPerfMapRow");
static_assert(offsetof(FPerfMapRow, LightingMap) == 0x000008, "Member 'FPerfMapRow::LightingMap' has a wrong offset!");

// ScriptStruct HiRezAutomation.PGame_PerformanceCaptureProfile
// 0x001C (0x001C - 0x0000)
struct FPGame_PerformanceCaptureProfile final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScalabilityBucket;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionX;                                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResolutionY;                                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VsyncInterval;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullScreen;                                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_PerformanceCaptureProfile) == 0x000004, "Wrong alignment on FPGame_PerformanceCaptureProfile");
static_assert(sizeof(FPGame_PerformanceCaptureProfile) == 0x00001C, "Wrong size on FPGame_PerformanceCaptureProfile");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, ProfileName) == 0x000000, "Member 'FPGame_PerformanceCaptureProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, ScalabilityBucket) == 0x000008, "Member 'FPGame_PerformanceCaptureProfile::ScalabilityBucket' has a wrong offset!");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, ResolutionX) == 0x00000C, "Member 'FPGame_PerformanceCaptureProfile::ResolutionX' has a wrong offset!");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, ResolutionY) == 0x000010, "Member 'FPGame_PerformanceCaptureProfile::ResolutionY' has a wrong offset!");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, VsyncInterval) == 0x000014, "Member 'FPGame_PerformanceCaptureProfile::VsyncInterval' has a wrong offset!");
static_assert(offsetof(FPGame_PerformanceCaptureProfile, bFullScreen) == 0x000018, "Member 'FPGame_PerformanceCaptureProfile::bFullScreen' has a wrong offset!");

}

