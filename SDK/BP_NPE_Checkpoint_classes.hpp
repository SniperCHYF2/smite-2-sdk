#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_Checkpoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_Checkpoint.BP_NPE_Checkpoint_C
// 0x0030 (0x02C8 - 0x0298)
class ABP_NPE_Checkpoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ABP_NPE_Waypoint_C>> Waypoints;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible)
	TArray<ECharacterRole>                        AssociatedRoles;                                   // 0x02B8(0x0010)(Edit, BlueprintVisible)

public:
	void DisableCheckpoint();
	void EnableCheckpoint();
	void ExecuteUbergraph_BP_NPE_Checkpoint(int32 EntryPoint);
	void GetActiveNPEStage(struct FGameplayTag* ActiveStageTag);
	void GetAssociatedRoles(TArray<ECharacterRole>* Roles);
	void GetNPEAIDirectives(struct FGameplayTagContainer* AIDirectives);
	void GetNPEGuide(class ABP_NPE_Guide_C** GuideActor);
	void GetNPEStages(TArray<class ABP_NPE_Stage_C*>* Stages);
	void GetObjectiveTimeRemaining(double* TimeRemaining);
	void NPEGuideStageActivation();
	void SetActiveNPEStage(const struct FGameplayTag& ActiveStage);
	void SetNPEAIDirectives(const struct FGameplayTag& NewAIDirective, bool ClearPreviousDirectives);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_Checkpoint_C">();
	}
	static class ABP_NPE_Checkpoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPE_Checkpoint_C>();
	}
};
static_assert(alignof(ABP_NPE_Checkpoint_C) == 0x000008, "Wrong alignment on ABP_NPE_Checkpoint_C");
static_assert(sizeof(ABP_NPE_Checkpoint_C) == 0x0002C8, "Wrong size on ABP_NPE_Checkpoint_C");
static_assert(offsetof(ABP_NPE_Checkpoint_C, UberGraphFrame) == 0x000298, "Member 'ABP_NPE_Checkpoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Checkpoint_C, Box) == 0x0002A0, "Member 'ABP_NPE_Checkpoint_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Checkpoint_C, Waypoints) == 0x0002A8, "Member 'ABP_NPE_Checkpoint_C::Waypoints' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Checkpoint_C, AssociatedRoles) == 0x0002B8, "Member 'ABP_NPE_Checkpoint_C::AssociatedRoles' has a wrong offset!");

}

