#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_ListenForNearbyFriendly

#include "Basic.hpp"

#include "BTS_ListenForNearbyFriendly_classes.hpp"
#include "BTS_ListenForNearbyFriendly_parameters.hpp"


namespace SDK
{

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckForTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool*                                   TargetsFound                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::CheckForTargets(TArray<struct FHitResult>* OutHits, bool* TargetsFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "CheckForTargets");

	Params::BTS_ListenForNearbyFriendly_C_CheckForTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (TargetsFound != nullptr)
		*TargetsFound = Parms.TargetsFound;
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetAliveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::CheckTargetAliveState(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "CheckTargetAliveState");

	Params::BTS_ListenForNearbyFriendly_C_CheckTargetAliveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetDistance
// (Public, BlueprintCallable, BlueprintEvent)

void UBTS_ListenForNearbyFriendly_C::CheckTargetDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "CheckTargetDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::CheckTargetTeam(bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "CheckTargetTeam");

	Params::BTS_ListenForNearbyFriendly_C_CheckTargetTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ExecuteUbergraph_BTS_ListenForNearbyFriendly
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::ExecuteUbergraph_BTS_ListenForNearbyFriendly(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "ExecuteUbergraph_BTS_ListenForNearbyFriendly");

	Params::BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.FilterTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>&              InHits                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FHitResult>*              OutHits                                                (Parm, OutParm, ContainsInstancedReference)
// bool*                                   ArrayValid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::FilterTargets(TArray<struct FHitResult>& InHits, TArray<struct FHitResult>* OutHits, bool* ArrayValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "FilterTargets");

	Params::BTS_ListenForNearbyFriendly_C_FilterTargets Parms{};

	Parms.InHits = std::move(InHits);

	UObject::ProcessEvent(Func, &Parms);

	InHits = std::move(Parms.InHits);

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	if (ArrayValid != nullptr)
		*ArrayValid = Parms.ArrayValid;
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ReceiveActivationAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "ReceiveActivationAI");

	Params::BTS_ListenForNearbyFriendly_C_ReceiveActivationAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn_0 = ControlledPawn_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn_0, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "ReceiveTickAI");

	Params::BTS_ListenForNearbyFriendly_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn_0 = ControlledPawn_0;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.SelectTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>&              InHits                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class AActor**                          OutActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTS_ListenForNearbyFriendly_C::SelectTarget(TArray<struct FHitResult>& InHits, class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_ListenForNearbyFriendly_C", "SelectTarget");

	Params::BTS_ListenForNearbyFriendly_C_SelectTarget Parms{};

	Parms.InHits = std::move(InHits);

	UObject::ProcessEvent(Func, &Parms);

	InHits = std::move(Parms.InHits);

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}

}

