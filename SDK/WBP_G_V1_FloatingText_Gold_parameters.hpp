#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V1_FloatingText_Gold

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V1_FloatingText_Gold.WBP_G_V1_FloatingText_Gold_C.AnimateNumber
// 0x0178 (0x0178 - 0x0000)
struct WBP_G_V1_FloatingText_Gold_C_AnimateNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class AActor*                                 OwnerActor;                                        // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00E8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0100(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0160(0x0018)()
};
static_assert(alignof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber) == 0x000008, "Wrong alignment on WBP_G_V1_FloatingText_Gold_C_AnimateNumber");
static_assert(sizeof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber) == 0x000178, "Wrong size on WBP_G_V1_FloatingText_Gold_C_AnimateNumber");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, Number) == 0x000000, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::Number' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, Parameters) == 0x000008, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::Parameters' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, OwnerActor) == 0x0000E0, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::OwnerActor' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, CallFunc_Conv_IntToText_ReturnValue) == 0x0000E8, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, K2Node_MakeStruct_FormatArgumentData) == 0x000100, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, K2Node_MakeArray_Array) == 0x000150, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_AnimateNumber, CallFunc_Format_ReturnValue) == 0x000160, "Member 'WBP_G_V1_FloatingText_Gold_C_AnimateNumber::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_FloatingText_Gold.WBP_G_V1_FloatingText_Gold_C.ApplyFontSize
// 0x0030 (0x0030 - 0x0000)
struct WBP_G_V1_FloatingText_Gold_C_ApplyFontSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_SetFieldsInStruct_Size_ImplicitCast;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_SetFieldsInStruct_Size_ImplicitCast_1;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize) == 0x000008, "Wrong alignment on WBP_G_V1_FloatingText_Gold_C_ApplyFontSize");
static_assert(sizeof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize) == 0x000030, "Wrong size on WBP_G_V1_FloatingText_Gold_C_ApplyFontSize");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, Size) == 0x000000, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::Size' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000010, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, K2Node_SetFieldsInStruct_Size_ImplicitCast) == 0x000028, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::K2Node_SetFieldsInStruct_Size_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_ApplyFontSize, K2Node_SetFieldsInStruct_Size_ImplicitCast_1) == 0x00002C, "Member 'WBP_G_V1_FloatingText_Gold_C_ApplyFontSize::K2Node_SetFieldsInStruct_Size_ImplicitCast_1' has a wrong offset!");

// Function WBP_G_V1_FloatingText_Gold.WBP_G_V1_FloatingText_Gold_C.OnShown
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V1_FloatingText_Gold_C_OnShown final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_FloatingText_Gold_C_OnShown) == 0x000008, "Wrong alignment on WBP_G_V1_FloatingText_Gold_C_OnShown");
static_assert(sizeof(WBP_G_V1_FloatingText_Gold_C_OnShown) == 0x000010, "Wrong size on WBP_G_V1_FloatingText_Gold_C_OnShown");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_OnShown, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_G_V1_FloatingText_Gold_C_OnShown::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_FloatingText_Gold_C_OnShown, CallFunc_GetEndTime_ReturnValue) == 0x000008, "Member 'WBP_G_V1_FloatingText_Gold_C_OnShown::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");

}

