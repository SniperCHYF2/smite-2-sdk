#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CustomGameBrowser_Entry

#include "Basic.hpp"

#include "RallyHereStart_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C
// 0x0058 (0x0618 - 0x05C0)
class UWBP_CustomGameBrowser_Entry_C final : public URHCustomBrowserEntry
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       FocusedAnim;                                       // 0x05C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHWTextBlock*                           GameName;                                          // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               HoverStroke;                                       // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_S_StandardButton_C*                JoinButton;                                        // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWWidgetSwitcher*                      JoinSwitcher;                                      // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           LeaderName;                                        // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           MapName;                                           // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           PlayerCount;                                       // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           Region;                                            // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_S_StandardButton_C*                RHHitTarget;                                       // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void AssessJoinability(bool* bJoinable);
	void BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature(class UHWWidget* Button_Widget);
	void BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature(bool bHovered);
	void ExecuteUbergraph_WBP_CustomGameBrowser_Entry(int32 EntryPoint);
	class URHWidget* GetJoinButton();
	void InitializeWidget();
	void OnCustomMatchJoined();
	void OnCustomMatchSessionJoinResult(bool bSuccess, const class URH_SessionView* SessionToJoin);
	void SetGameLeaderNameDisplay(const class FString& LeaderName_0);
	void SetGameLobbyNameDisplay(const class FString& LobbyName);
	void SetGamePlayerCountDisplay(const int32 PlayerCount_0, const int32 MaxPlayerCount);
	void SetGameStarted(const bool bGameStarted);
	void SetMapInfo(const class FName MapRowName, const struct FRHMapDetails& MapDetails);
	void SetRegionDisplay(const class FText& RegionAsText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CustomGameBrowser_Entry_C">();
	}
	static class UWBP_CustomGameBrowser_Entry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CustomGameBrowser_Entry_C>();
	}
};
static_assert(alignof(UWBP_CustomGameBrowser_Entry_C) == 0x000008, "Wrong alignment on UWBP_CustomGameBrowser_Entry_C");
static_assert(sizeof(UWBP_CustomGameBrowser_Entry_C) == 0x000618, "Wrong size on UWBP_CustomGameBrowser_Entry_C");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, UberGraphFrame) == 0x0005C0, "Member 'UWBP_CustomGameBrowser_Entry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, FocusedAnim) == 0x0005C8, "Member 'UWBP_CustomGameBrowser_Entry_C::FocusedAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, GameName) == 0x0005D0, "Member 'UWBP_CustomGameBrowser_Entry_C::GameName' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, HoverStroke) == 0x0005D8, "Member 'UWBP_CustomGameBrowser_Entry_C::HoverStroke' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, JoinButton) == 0x0005E0, "Member 'UWBP_CustomGameBrowser_Entry_C::JoinButton' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, JoinSwitcher) == 0x0005E8, "Member 'UWBP_CustomGameBrowser_Entry_C::JoinSwitcher' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, LeaderName) == 0x0005F0, "Member 'UWBP_CustomGameBrowser_Entry_C::LeaderName' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, MapName) == 0x0005F8, "Member 'UWBP_CustomGameBrowser_Entry_C::MapName' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, PlayerCount) == 0x000600, "Member 'UWBP_CustomGameBrowser_Entry_C::PlayerCount' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, Region) == 0x000608, "Member 'UWBP_CustomGameBrowser_Entry_C::Region' has a wrong offset!");
static_assert(offsetof(UWBP_CustomGameBrowser_Entry_C, RHHitTarget) == 0x000610, "Member 'UWBP_CustomGameBrowser_Entry_C::RHHitTarget' has a wrong offset!");

}

