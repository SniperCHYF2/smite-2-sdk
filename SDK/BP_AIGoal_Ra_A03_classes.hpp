#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_Ra_A03

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_Ra_A03.BP_AIGoal_Ra_A03_C
// 0x0030 (0x0118 - 0x00E8)
class UBP_AIGoal_Ra_A03_C final : public UHWAIGoal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class UHWEquipmentItem>        Equipment;                                         // 0x00F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	bool CheckDistanceToThreat(class AController* MyController, class AActor* CurrentThreat, double Distance);
	bool CheckPreconditionsBP(class AHWAIController* InController);
	void CountEnemyMinionThreatsAroundCurrentThreat(class AHWAIController* InController, class AHWCharacter_Base* CurrentThreat, double MaxDistance, int32* EnemyMinionCount);
	void EndGoalBP();
	void ExecuteUbergraph_BP_AIGoal_Ra_A03(int32 EntryPoint);
	void HasMana(class AHWCharacter_Base* Character, double MinMana, bool* HasMana_0);
	void HasManaToFireAbility(class AHWCharacter_Base* Character, const TSoftObjectPtr<class UHWEquipmentItem> EquipmentItem, bool* IsLevelled);
	void IsHealthy(class AHWCharacter_Base* Character, double MinHealthPct, bool* IsHealthy_0);
	void IsInventorySlotLeveled(class AHWCharacter_Base* Character, const TSoftObjectPtr<class UHWEquipmentItem> EquipmentItem, bool* IsLevelled);
	void StartGoalBP();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_Ra_A03_C">();
	}
	static class UBP_AIGoal_Ra_A03_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_Ra_A03_C>();
	}
};
static_assert(alignof(UBP_AIGoal_Ra_A03_C) == 0x000008, "Wrong alignment on UBP_AIGoal_Ra_A03_C");
static_assert(sizeof(UBP_AIGoal_Ra_A03_C) == 0x000118, "Wrong size on UBP_AIGoal_Ra_A03_C");
static_assert(offsetof(UBP_AIGoal_Ra_A03_C, UberGraphFrame) == 0x0000E8, "Member 'UBP_AIGoal_Ra_A03_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Ra_A03_C, Equipment) == 0x0000F0, "Member 'UBP_AIGoal_Ra_A03_C::Equipment' has a wrong offset!");

}

