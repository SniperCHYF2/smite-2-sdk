#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JoustGameState

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BP_JoustGameState.BP_JoustGameState_C.ApplyDuelMapBossModifier
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_ApplyDuelMapBossModifier final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_ApplyDuelMapBossModifier) == 0x000008, "Wrong alignment on BP_JoustGameState_C_ApplyDuelMapBossModifier");
static_assert(sizeof(BP_JoustGameState_C_ApplyDuelMapBossModifier) == 0x000028, "Wrong size on BP_JoustGameState_C_ApplyDuelMapBossModifier");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMapBossModifier, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_ApplyDuelMapBossModifier::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMapBossModifier, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_JoustGameState_C_ApplyDuelMapBossModifier::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMapBossModifier, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_JoustGameState_C_ApplyDuelMapBossModifier::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMapBossModifier, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_ApplyDuelMapBossModifier::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.ApplyDuelMinionModifier
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_ApplyDuelMinionModifier final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_ApplyDuelMinionModifier) == 0x000008, "Wrong alignment on BP_JoustGameState_C_ApplyDuelMinionModifier");
static_assert(sizeof(BP_JoustGameState_C_ApplyDuelMinionModifier) == 0x000028, "Wrong size on BP_JoustGameState_C_ApplyDuelMinionModifier");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMinionModifier, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_ApplyDuelMinionModifier::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMinionModifier, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_JoustGameState_C_ApplyDuelMinionModifier::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMinionModifier, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_JoustGameState_C_ApplyDuelMinionModifier::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelMinionModifier, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_ApplyDuelMinionModifier::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.ApplyDuelTitanModifier
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_ApplyDuelTitanModifier final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_ApplyDuelTitanModifier) == 0x000008, "Wrong alignment on BP_JoustGameState_C_ApplyDuelTitanModifier");
static_assert(sizeof(BP_JoustGameState_C_ApplyDuelTitanModifier) == 0x000028, "Wrong size on BP_JoustGameState_C_ApplyDuelTitanModifier");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelTitanModifier, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_ApplyDuelTitanModifier::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelTitanModifier, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_JoustGameState_C_ApplyDuelTitanModifier::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelTitanModifier, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_JoustGameState_C_ApplyDuelTitanModifier::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ApplyDuelTitanModifier, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_ApplyDuelTitanModifier::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.AwardTeam
// 0x00A8 (0x00A8 - 0x0000)
struct BP_JoustGameState_C_AwardTeam final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         LocalPlayerState;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0014(0x0001)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_GetTeam_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0068(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0080(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_AwardTeam) == 0x000008, "Wrong alignment on BP_JoustGameState_C_AwardTeam");
static_assert(sizeof(BP_JoustGameState_C_AwardTeam) == 0x0000A8, "Wrong size on BP_JoustGameState_C_AwardTeam");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, Team) == 0x000000, "Member 'BP_JoustGameState_C_AwardTeam::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, LocalPlayerState) == 0x000008, "Member 'BP_JoustGameState_C_AwardTeam::LocalPlayerState' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_JoustGameState_C_AwardTeam::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, K2Node_MakeStruct_GenericTeamId) == 0x000014, "Member 'BP_JoustGameState_C_AwardTeam::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_GetTeam_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Greater_IntInt_ReturnValue) == 0x000035, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_JoustGameState_C_AwardTeam::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000060, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000068, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_IsValid_ReturnValue_2) == 0x000078, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000080, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x000090, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTeam, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast) == 0x0000A0, "Member 'BP_JoustGameState_C_AwardTeam::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.AwardTopDamageTeam
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_AwardTopDamageTeam final
{
public:
	class AHWPlayerState*                         LocalPlayerState;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_3;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_4;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_5;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetTeamWithHighestDamage_NewParam;        // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_AwardTopDamageTeam) == 0x000008, "Wrong alignment on BP_JoustGameState_C_AwardTopDamageTeam");
static_assert(sizeof(BP_JoustGameState_C_AwardTopDamageTeam) == 0x000018, "Wrong size on BP_JoustGameState_C_AwardTopDamageTeam");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, LocalPlayerState) == 0x000000, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::LocalPlayerState' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable) == 0x000008, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable_1) == 0x000009, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable_2) == 0x00000A, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable_3) == 0x00000B, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable_4) == 0x00000C, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, Temp_byte_Variable_5) == 0x00000D, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, CallFunc_GetTeamWithHighestDamage_NewParam) == 0x00000E, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::CallFunc_GetTeamWithHighestDamage_NewParam' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, K2Node_Select_Default) == 0x00000F, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_AwardTopDamageTeam, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'BP_JoustGameState_C_AwardTopDamageTeam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BallistaHitClosestLaneObjective
// 0x0108 (0x0108 - 0x0000)
struct BP_JoustGameState_C_BallistaHitClosestLaneObjective final
{
public:
	EHWSmiteTeamId                                TeamToDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   JoustGameMode;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AHWBotFactory*>                  CachedLaneFactories;                               // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AHWCharacter_Base*                      SelectedBot;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          SelectedFactory;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              LocalInstigatorASC;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ImmunityTags;                                      // 0x0040(0x0020)(Edit, BlueprintVisible)
	class UHWAbilitySystemComponent*              LocalTargetASC;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWBotFactory*                          CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameMode*                            CallFunc_GetHWGameMode_ReturnValue;                // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   K2Node_DynamicCast_AsBP_Game_Mode_Joust;           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BallistaHitClosestLaneObjective) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BallistaHitClosestLaneObjective");
static_assert(sizeof(BP_JoustGameState_C_BallistaHitClosestLaneObjective) == 0x000108, "Wrong size on BP_JoustGameState_C_BallistaHitClosestLaneObjective");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, TeamToDamage) == 0x000000, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::TeamToDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, JoustGameMode) == 0x000010, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::JoustGameMode' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CachedLaneFactories) == 0x000018, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CachedLaneFactories' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, SelectedBot) == 0x000028, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::SelectedBot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, SelectedFactory) == 0x000030, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::SelectedFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, LocalInstigatorASC) == 0x000038, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::LocalInstigatorASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, ImmunityTags) == 0x000040, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::ImmunityTags' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, LocalTargetASC) == 0x000060, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::LocalTargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Variable) == 0x000068, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Variable_1) == 0x00006C, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Variable_2) == 0x000070, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Variable_3) == 0x000074, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Variable_4) == 0x000078, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_byte_Variable) == 0x00007C, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, K2Node_Select_Default) == 0x000084, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Array_Length_ReturnValue_1) == 0x00009C, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Loop_Counter_Variable) == 0x0000A4, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Array_Index_Variable_1) == 0x0000B0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x0000C0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000C8, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000D0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000E0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Not_PreBool_ReturnValue) == 0x0000E1, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_GetHWGameMode_ReturnValue) == 0x0000E8, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_GetHWGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, K2Node_DynamicCast_AsBP_Game_Mode_Joust) == 0x0000F0, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::K2Node_DynamicCast_AsBP_Game_Mode_Joust' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, Temp_int_Loop_Counter_Variable_1) == 0x0000FC, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Less_IntInt_ReturnValue_1) == 0x000100, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitClosestLaneObjective, CallFunc_Add_IntInt_ReturnValue_1) == 0x000104, "Member 'BP_JoustGameState_C_BallistaHitClosestLaneObjective::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BallistaHitObjective
// 0x0118 (0x0118 - 0x0000)
struct BP_JoustGameState_C_BallistaHitObjective final
{
public:
	class UHWAbilitySystemComponent*              TargetASC;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   JoustGameMode;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              LocalInstigatorASC;                                // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ImmunityTags;                                      // 0x0020(0x0020)(Edit, BlueprintVisible)
	class UHWAbilitySystemComponent*              LocalTargetASC;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0050(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue_1;           // 0x0060(0x0010)()
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue_2;           // 0x0078(0x0010)()
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0090(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_1; // 0x00A0(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x00B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue_1; // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute; // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_2; // 0x00E8(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue; // 0x00F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_1; // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_2; // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BallistaHitObjective) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BallistaHitObjective");
static_assert(sizeof(BP_JoustGameState_C_BallistaHitObjective) == 0x000118, "Wrong size on BP_JoustGameState_C_BallistaHitObjective");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, TargetASC) == 0x000000, "Member 'BP_JoustGameState_C_BallistaHitObjective::TargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_BallistaHitObjective::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, JoustGameMode) == 0x000010, "Member 'BP_JoustGameState_C_BallistaHitObjective::JoustGameMode' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, LocalInstigatorASC) == 0x000018, "Member 'BP_JoustGameState_C_BallistaHitObjective::LocalInstigatorASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, ImmunityTags) == 0x000020, "Member 'BP_JoustGameState_C_BallistaHitObjective::ImmunityTags' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, LocalTargetASC) == 0x000040, "Member 'BP_JoustGameState_C_BallistaHitObjective::LocalTargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, Temp_bool_Variable) == 0x000048, "Member 'BP_JoustGameState_C_BallistaHitObjective::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_MakeOutgoingSpec_ReturnValue_1) == 0x000060, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_MakeOutgoingSpec_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_IsValidClass_ReturnValue) == 0x000070, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_MakeOutgoingSpec_ReturnValue_2) == 0x000078, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_MakeOutgoingSpec_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000090, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_1) == 0x0000A0, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x0000B0, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x0000B8, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000C0, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue_1) == 0x0000C8, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute) == 0x0000D1, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue) == 0x0000D4, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, K2Node_Select_Default) == 0x0000D8, "Member 'BP_JoustGameState_C_BallistaHitObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000E0, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_2) == 0x0000E8, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue) == 0x0000F8, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_BP_ApplyGameplayEffectSpecToTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast) == 0x000100, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_1) == 0x000104, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaHitObjective, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_2) == 0x000110, "Member 'BP_JoustGameState_C_BallistaHitObjective::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast_2' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BallistaMarkClosestLaneObjective
// 0x0110 (0x0110 - 0x0000)
struct BP_JoustGameState_C_BallistaMarkClosestLaneObjective final
{
public:
	EHWSmiteTeamId                                TeamToDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   JoustGameMode;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AHWBotFactory*>                  CachedLaneFactories;                               // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AHWCharacter_Base*                      SelectedBot;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          SelectedFactory;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              LocalInstigatorASC;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ImmunityTags;                                      // 0x0040(0x0020)(Edit, BlueprintVisible)
	class UHWAbilitySystemComponent*              LocalTargetASC;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWBotFactory*                          CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item_1;                         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWDisplayInfoComponent*                CallFunc_GetDisplayInfoComponent_ReturnValue;      // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHWGameMode*                            CallFunc_GetHWGameMode_ReturnValue;                // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   K2Node_DynamicCast_AsBP_Game_Mode_Joust;           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x2];                                      // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BallistaMarkClosestLaneObjective");
static_assert(sizeof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective) == 0x000110, "Wrong size on BP_JoustGameState_C_BallistaMarkClosestLaneObjective");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, TeamToDamage) == 0x000000, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::TeamToDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, JoustGameMode) == 0x000010, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::JoustGameMode' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CachedLaneFactories) == 0x000018, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CachedLaneFactories' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, SelectedBot) == 0x000028, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::SelectedBot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, SelectedFactory) == 0x000030, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::SelectedFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, LocalInstigatorASC) == 0x000038, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::LocalInstigatorASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, ImmunityTags) == 0x000040, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::ImmunityTags' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, LocalTargetASC) == 0x000060, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::LocalTargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Variable) == 0x000068, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Variable_1) == 0x00006C, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Variable_2) == 0x000070, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Variable_3) == 0x000074, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Variable_4) == 0x000078, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_byte_Variable) == 0x00007C, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, K2Node_Select_Default) == 0x000084, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Array_Index_Variable) == 0x000088, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Array_Get_Item) == 0x000090, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Array_Length_ReturnValue_1) == 0x00009C, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Loop_Counter_Variable) == 0x0000A4, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Add_IntInt_ReturnValue) == 0x0000AC, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Array_Index_Variable_1) == 0x0000B0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Array_Get_Item_1) == 0x0000B8, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_GetDisplayInfoComponent_ReturnValue) == 0x0000C0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_GetDisplayInfoComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x0000C8, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000D0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_GetHWGameMode_ReturnValue) == 0x0000D8, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_GetHWGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, K2Node_DynamicCast_AsBP_Game_Mode_Joust) == 0x0000E0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::K2Node_DynamicCast_AsBP_Game_Mode_Joust' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, K2Node_DynamicCast_bSuccess) == 0x0000E8, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000F0, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000100, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Not_PreBool_ReturnValue) == 0x000101, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, Temp_int_Loop_Counter_Variable_1) == 0x000104, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Less_IntInt_ReturnValue_1) == 0x000108, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BallistaMarkClosestLaneObjective, CallFunc_Add_IntInt_ReturnValue_1) == 0x00010C, "Member 'BP_JoustGameState_C_BallistaMarkClosestLaneObjective::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BindBattleStandardEvents
// 0x0060 (0x0060 - 0x0000)
struct BP_JoustGameState_C_BindBattleStandardEvents final
{
public:
	TArray<class AHWBotFactory*>                  CachedLaneFactories;                               // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EHWSmiteTeamId Team)>          K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleStandard_Pickup_C*            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EHWSmiteTeamId Team, class AActor* InstigatorActor)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_BattleStandard_Pickup_C*>    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_JoustGameState_C_BindBattleStandardEvents) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BindBattleStandardEvents");
static_assert(sizeof(BP_JoustGameState_C_BindBattleStandardEvents) == 0x000060, "Wrong size on BP_JoustGameState_C_BindBattleStandardEvents");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CachedLaneFactories) == 0x000000, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CachedLaneFactories' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000040, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindBattleStandardEvents, CallFunc_GetAllActorsOfClass_OutActors) == 0x000050, "Member 'BP_JoustGameState_C_BindBattleStandardEvents::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BindDamageEvents
// 0x0098 (0x0098 - 0x0000)
struct BP_JoustGameState_C_BindDamageEvents final
{
public:
	bool                                          Unbind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FDamageEventData& KillEventData)> K2Node_CreateDelegate_OutputDelegate; // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FDamageEventData& DamageEventData)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWTeamState*>                   CallFunc_GetTeams_ReturnValue;                     // 0x0040(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWPlayerState*>                 CallFunc_GetTeamMembers_ReturnValue;               // 0x0068(0x0010)(ReferenceParm)
	class AHWPlayerState*                         CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BindDamageEvents) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BindDamageEvents");
static_assert(sizeof(BP_JoustGameState_C_BindDamageEvents) == 0x000098, "Wrong size on BP_JoustGameState_C_BindDamageEvents");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, Unbind) == 0x000000, "Member 'BP_JoustGameState_C_BindDamageEvents::Unbind' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_JoustGameState_C_BindDamageEvents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_JoustGameState_C_BindDamageEvents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'BP_JoustGameState_C_BindDamageEvents::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_JoustGameState_C_BindDamageEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_JoustGameState_C_BindDamageEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'BP_JoustGameState_C_BindDamageEvents::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_GetTeams_ReturnValue) == 0x000040, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_GetTeams_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_GetTeamMembers_ReturnValue) == 0x000068, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000084, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000088, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindDamageEvents, CallFunc_Less_IntInt_ReturnValue_1) == 0x000090, "Member 'BP_JoustGameState_C_BindDamageEvents::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BindGodKillEvents
// 0x0088 (0x0088 - 0x0000)
struct BP_JoustGameState_C_BindGodKillEvents final
{
public:
	bool                                          Unbind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWPlayerState* PlayerState, int32 OldStat, int32 NewStat)> K2Node_CreateDelegate_OutputDelegate; // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWTeamState*>                   CallFunc_GetTeams_ReturnValue;                     // 0x0030(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWPlayerState*>                 CallFunc_GetTeamMembers_ReturnValue;               // 0x0058(0x0010)(ReferenceParm)
	class AHWPlayerState*                         CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerStatsTracker*                  CallFunc_GetPlayerStatsTracker_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BindGodKillEvents) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BindGodKillEvents");
static_assert(sizeof(BP_JoustGameState_C_BindGodKillEvents) == 0x000088, "Wrong size on BP_JoustGameState_C_BindGodKillEvents");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, Unbind) == 0x000000, "Member 'BP_JoustGameState_C_BindGodKillEvents::Unbind' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_JoustGameState_C_BindGodKillEvents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_JoustGameState_C_BindGodKillEvents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'BP_JoustGameState_C_BindGodKillEvents::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_JoustGameState_C_BindGodKillEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'BP_JoustGameState_C_BindGodKillEvents::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_GetTeams_ReturnValue) == 0x000030, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_GetTeams_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_GetTeamMembers_ReturnValue) == 0x000058, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_GetTeamMembers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_GetPlayerStatsTracker_ReturnValue) == 0x000078, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_GetPlayerStatsTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_BindGodKillEvents, CallFunc_Less_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_JoustGameState_C_BindGodKillEvents::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.BroadcastTrackedDamage
// 0x0008 (0x0008 - 0x0000)
struct BP_JoustGameState_C_BroadcastTrackedDamage final
{
public:
	double                                        CallFunc_GetDamagePercent_DamagePercent;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_BroadcastTrackedDamage) == 0x000008, "Wrong alignment on BP_JoustGameState_C_BroadcastTrackedDamage");
static_assert(sizeof(BP_JoustGameState_C_BroadcastTrackedDamage) == 0x000008, "Wrong size on BP_JoustGameState_C_BroadcastTrackedDamage");
static_assert(offsetof(BP_JoustGameState_C_BroadcastTrackedDamage, CallFunc_GetDamagePercent_DamagePercent) == 0x000000, "Member 'BP_JoustGameState_C_BroadcastTrackedDamage::CallFunc_GetDamagePercent_DamagePercent' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.EndRound
// 0x0010 (0x0010 - 0x0000)
struct BP_JoustGameState_C_EndRound final
{
public:
	class AHWGameStatsTracker*                    CallFunc_GetGameStatsTracker_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAnnouncementComponent*               CallFunc_GetAnnouncementComponent_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_EndRound) == 0x000008, "Wrong alignment on BP_JoustGameState_C_EndRound");
static_assert(sizeof(BP_JoustGameState_C_EndRound) == 0x000010, "Wrong size on BP_JoustGameState_C_EndRound");
static_assert(offsetof(BP_JoustGameState_C_EndRound, CallFunc_GetGameStatsTracker_ReturnValue) == 0x000000, "Member 'BP_JoustGameState_C_EndRound::CallFunc_GetGameStatsTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_EndRound, CallFunc_GetAnnouncementComponent_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_EndRound::CallFunc_GetAnnouncementComponent_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.ExecuteUbergraph_BP_JoustGameState
// 0x00F0 (0x00F0 - 0x0000)
struct BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot, class AActor* Killer)> K2Node_CreateDelegate_OutputDelegate; // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_OrderDamage;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_ChaosDamage;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_CustomEvent_NewParam;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGameplayTag& NewPhase)> K2Node_CreateDelegate_OutputDelegate_1;     // 0x003C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_CustomEvent_Team;                           // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_TargetActor;                    // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetAssetTags_ReturnValue;                 // 0x0068(0x0020)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWBotFactory*                          K2Node_CustomEvent_BotFactory;                     // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_CustomEvent_Bot;                            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Killer;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameMode*                            CallFunc_GetHWGameMode_ReturnValue;                // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   K2Node_DynamicCast_AsBP_Game_Mode_Joust;           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetJoustGameModeVariables_BallistaDamageEffect; // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            CallFunc_GetJoustGameModeVariables_BallistaStunEffect; // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         CallFunc_GetJoustGameModeVariables_BallistaStunDuration; // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetJoustGameModeVariables_BallistaMaxHealthDamage; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetJoustGameModeVariables_IsDuel;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InitGameStateVariables_BallistaStunDuration_ImplicitCast; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState) == 0x000008, "Wrong alignment on BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState");
static_assert(sizeof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState) == 0x0000F0, "Wrong size on BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, EntryPoint) == 0x000000, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_OrderDamage) == 0x000028, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_OrderDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_ChaosDamage) == 0x000030, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_ChaosDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_NewParam) == 0x000038, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_NewParam' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CreateDelegate_OutputDelegate_1) == 0x00003C, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_IsDedicatedServer_ReturnValue) == 0x00004C, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_Team) == 0x00004D, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_TargetActor) == 0x000050, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetAssetTags_ReturnValue) == 0x000068, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetAssetTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_HasTag_ReturnValue) == 0x000089, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_BotFactory) == 0x000090, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_Bot) == 0x000098, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_CustomEvent_Killer) == 0x0000A0, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_CustomEvent_Killer' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetHWGameMode_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetHWGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_DynamicCast_AsBP_Game_Mode_Joust) == 0x0000B0, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_DynamicCast_AsBP_Game_Mode_Joust' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, K2Node_DynamicCast_bSuccess) == 0x0000B8, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetJoustGameModeVariables_BallistaDamageEffect) == 0x0000C0, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetJoustGameModeVariables_BallistaDamageEffect' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetJoustGameModeVariables_BallistaStunEffect) == 0x0000C8, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetJoustGameModeVariables_BallistaStunEffect' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetJoustGameModeVariables_BallistaStunDuration) == 0x0000D0, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetJoustGameModeVariables_BallistaStunDuration' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetJoustGameModeVariables_BallistaMaxHealthDamage) == 0x0000D8, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetJoustGameModeVariables_BallistaMaxHealthDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_GetJoustGameModeVariables_IsDuel) == 0x0000E0, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_GetJoustGameModeVariables_IsDuel' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState, CallFunc_InitGameStateVariables_BallistaStunDuration_ImplicitCast) == 0x0000E8, "Member 'BP_JoustGameState_C_ExecuteUbergraph_BP_JoustGameState::CallFunc_InitGameStateVariables_BallistaStunDuration_ImplicitCast' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.FireBallista
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_FireBallista final
{
public:
	EHWSmiteTeamId                                TeamToDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              TargetASC;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_3;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_4;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_5;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_Select_Default;                             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetAvatarActor_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_FireBallista) == 0x000008, "Wrong alignment on BP_JoustGameState_C_FireBallista");
static_assert(sizeof(BP_JoustGameState_C_FireBallista) == 0x000028, "Wrong size on BP_JoustGameState_C_FireBallista");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, TeamToDamage) == 0x000000, "Member 'BP_JoustGameState_C_FireBallista::TeamToDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_FireBallista::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, TargetASC) == 0x000010, "Member 'BP_JoustGameState_C_FireBallista::TargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable) == 0x000018, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable_1) == 0x000019, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable_2) == 0x00001A, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable_3) == 0x00001B, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable_4) == 0x00001C, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, Temp_byte_Variable_5) == 0x00001D, "Member 'BP_JoustGameState_C_FireBallista::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, K2Node_Select_Default) == 0x00001E, "Member 'BP_JoustGameState_C_FireBallista::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallista, CallFunc_GetAvatarActor_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_FireBallista::CallFunc_GetAvatarActor_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.FireBallistaAtClosestLaneObjective
// 0x0058 (0x0058 - 0x0000)
struct BP_JoustGameState_C_FireBallistaAtClosestLaneObjective final
{
public:
	class AActor*                                 DamageInstigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_2;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_3;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_4;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_5;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_Select_Default;                             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetClosestEnemyLaneObjective_TargetActor; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetClosestEnemyLaneObjective_TargetASC;   // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective) == 0x000008, "Wrong alignment on BP_JoustGameState_C_FireBallistaAtClosestLaneObjective");
static_assert(sizeof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective) == 0x000058, "Wrong size on BP_JoustGameState_C_FireBallistaAtClosestLaneObjective");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, DamageInstigator) == 0x000000, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable) == 0x000008, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_GetActorGameTeam_ReturnValue) == 0x000009, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable_1) == 0x00000A, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable_2) == 0x00000B, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable_3) == 0x00000C, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable_4) == 0x00000D, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_Array_Add_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, Temp_byte_Variable_5) == 0x000030, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, K2Node_Select_Default) == 0x000031, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_GetClosestEnemyLaneObjective_TargetActor) == 0x000038, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_GetClosestEnemyLaneObjective_TargetActor' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_GetClosestEnemyLaneObjective_TargetASC) == 0x000040, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_GetClosestEnemyLaneObjective_TargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_Array_Contains_ReturnValue) == 0x000048, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_Array_Add_ReturnValue_1) == 0x00004C, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_FireBallistaAtClosestLaneObjective, CallFunc_Not_PreBool_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_FireBallistaAtClosestLaneObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.GetClosestEnemyLaneObjective
// 0x0120 (0x0120 - 0x0000)
struct BP_JoustGameState_C_GetClosestEnemyLaneObjective final
{
public:
	EHWSmiteTeamId                                TeamToDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              TargetASC;                                         // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_GameMode_Joust_C*                   JoustGameMode;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AHWBotFactory*>                  CachedLaneFactories;                               // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class AHWCharacter_Base*                      SelectedBot;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          SelectedFactory;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              LocalInstigatorASC;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ImmunityTags;                                      // 0x0050(0x0020)(Edit, BlueprintVisible)
	class UHWAbilitySystemComponent*              LocalTargetASC;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWBotFactory*                          CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameMode*                            CallFunc_GetHWGameMode_ReturnValue;                // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameMode_Joust_C*                   K2Node_DynamicCast_AsBP_Game_Mode_Joust;           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_GetClosestEnemyLaneObjective) == 0x000008, "Wrong alignment on BP_JoustGameState_C_GetClosestEnemyLaneObjective");
static_assert(sizeof(BP_JoustGameState_C_GetClosestEnemyLaneObjective) == 0x000120, "Wrong size on BP_JoustGameState_C_GetClosestEnemyLaneObjective");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, TeamToDamage) == 0x000000, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::TeamToDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, TargetActor) == 0x000010, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::TargetActor' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, TargetASC) == 0x000018, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::TargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, JoustGameMode) == 0x000020, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::JoustGameMode' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CachedLaneFactories) == 0x000028, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CachedLaneFactories' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, SelectedBot) == 0x000038, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::SelectedBot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, SelectedFactory) == 0x000040, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::SelectedFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, LocalInstigatorASC) == 0x000048, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::LocalInstigatorASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, ImmunityTags) == 0x000050, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::ImmunityTags' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, LocalTargetASC) == 0x000070, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::LocalTargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_byte_Variable) == 0x000078, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Variable) == 0x00007C, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Variable_1) == 0x000080, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Variable_2) == 0x000084, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Variable_3) == 0x000088, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Variable_4) == 0x00008C, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, K2Node_Select_Default) == 0x000090, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Array_Index_Variable) == 0x000094, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Array_Length_ReturnValue_1) == 0x0000AC, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Loop_Counter_Variable) == 0x0000B4, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Array_Index_Variable_1) == 0x0000C0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x0000D0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000D8, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000E0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000F0, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_GetHWGameMode_ReturnValue) == 0x0000F8, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_GetHWGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Not_PreBool_ReturnValue) == 0x000100, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, K2Node_DynamicCast_AsBP_Game_Mode_Joust) == 0x000108, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::K2Node_DynamicCast_AsBP_Game_Mode_Joust' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, Temp_int_Loop_Counter_Variable_1) == 0x000114, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Less_IntInt_ReturnValue_1) == 0x000118, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetClosestEnemyLaneObjective, CallFunc_Add_IntInt_ReturnValue_1) == 0x00011C, "Member 'BP_JoustGameState_C_GetClosestEnemyLaneObjective::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.GetDamagePercent
// 0x0038 (0x0038 - 0x0000)
struct BP_JoustGameState_C_GetDamagePercent final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamagePercent;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalDamage;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_GetDamagePercent) == 0x000008, "Wrong alignment on BP_JoustGameState_C_GetDamagePercent");
static_assert(sizeof(BP_JoustGameState_C_GetDamagePercent) == 0x000038, "Wrong size on BP_JoustGameState_C_GetDamagePercent");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, Team) == 0x000000, "Member 'BP_JoustGameState_C_GetDamagePercent::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, DamagePercent) == 0x000008, "Member 'BP_JoustGameState_C_GetDamagePercent::DamagePercent' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, TotalDamage) == 0x000010, "Member 'BP_JoustGameState_C_GetDamagePercent::TotalDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_JoustGameState_C_GetDamagePercent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000019, "Member 'BP_JoustGameState_C_GetDamagePercent::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, CallFunc_SafeDivide_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_GetDamagePercent::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, CallFunc_SafeDivide_ReturnValue_1) == 0x000028, "Member 'BP_JoustGameState_C_GetDamagePercent::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercent, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_JoustGameState_C_GetDamagePercent::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.GetDamagePercentOfGoal
// 0x0030 (0x0030 - 0x0000)
struct BP_JoustGameState_C_GetDamagePercentOfGoal final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamagePercent;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalDamage;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_GetDamagePercentOfGoal) == 0x000008, "Wrong alignment on BP_JoustGameState_C_GetDamagePercentOfGoal");
static_assert(sizeof(BP_JoustGameState_C_GetDamagePercentOfGoal) == 0x000030, "Wrong size on BP_JoustGameState_C_GetDamagePercentOfGoal");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, Team) == 0x000000, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, DamagePercent) == 0x000008, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::DamagePercent' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, TotalDamage) == 0x000010, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::TotalDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000019, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, CallFunc_SafeDivide_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetDamagePercentOfGoal, CallFunc_SafeDivide_ReturnValue_1) == 0x000028, "Member 'BP_JoustGameState_C_GetDamagePercentOfGoal::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.GetJoustCurrentRoundReward
// 0x0020 (0x0020 - 0x0000)
struct BP_JoustGameState_C_GetJoustCurrentRoundReward final
{
public:
	double                                        Reward;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_GetJoustCurrentRoundReward) == 0x000008, "Wrong alignment on BP_JoustGameState_C_GetJoustCurrentRoundReward");
static_assert(sizeof(BP_JoustGameState_C_GetJoustCurrentRoundReward) == 0x000020, "Wrong size on BP_JoustGameState_C_GetJoustCurrentRoundReward");
static_assert(offsetof(BP_JoustGameState_C_GetJoustCurrentRoundReward, Reward) == 0x000000, "Member 'BP_JoustGameState_C_GetJoustCurrentRoundReward::Reward' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetJoustCurrentRoundReward, CallFunc_Array_LastIndex_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_GetJoustCurrentRoundReward::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetJoustCurrentRoundReward, CallFunc_Array_IsValidIndex_ReturnValue) == 0x00000C, "Member 'BP_JoustGameState_C_GetJoustCurrentRoundReward::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetJoustCurrentRoundReward, CallFunc_SelectInt_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_GetJoustCurrentRoundReward::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetJoustCurrentRoundReward, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_JoustGameState_C_GetJoustCurrentRoundReward::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.GetTeamWithHighestDamage
// 0x0007 (0x0007 - 0x0000)
struct BP_JoustGameState_C_GetTeamWithHighestDamage final
{
public:
	EHWSmiteTeamId                                NewParam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_GetTeamWithHighestDamage) == 0x000001, "Wrong alignment on BP_JoustGameState_C_GetTeamWithHighestDamage");
static_assert(sizeof(BP_JoustGameState_C_GetTeamWithHighestDamage) == 0x000007, "Wrong size on BP_JoustGameState_C_GetTeamWithHighestDamage");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, NewParam) == 0x000000, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::NewParam' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, Temp_bool_Variable) == 0x000001, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, Temp_byte_Variable) == 0x000002, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, Temp_byte_Variable_1) == 0x000003, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000004, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000005, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_GetTeamWithHighestDamage, K2Node_Select_Default) == 0x000006, "Member 'BP_JoustGameState_C_GetTeamWithHighestDamage::K2Node_Select_Default' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.HandleGodKill
// 0x00A8 (0x00A8 - 0x0000)
struct BP_JoustGameState_C_HandleGodKill final
{
public:
	class AHWCharacter_Base*                      Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Smite_God*                 K2Node_DynamicCast_AsHWCharacter_Smite_God;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0014(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x001C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0024(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x002C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0034(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetJoustCurrentRoundReward_Reward;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWGameStatsTracker*                    CallFunc_GetGameStatsTracker_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAnnouncementComponent*               CallFunc_GetAnnouncementComponent_ReturnValue;     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0064(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0078(0x0010)()
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0088(0x0010)()
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_HandleGodKill) == 0x000008, "Wrong alignment on BP_JoustGameState_C_HandleGodKill");
static_assert(sizeof(BP_JoustGameState_C_HandleGodKill) == 0x0000A8, "Wrong size on BP_JoustGameState_C_HandleGodKill");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Killer) == 0x000000, "Member 'BP_JoustGameState_C_HandleGodKill::Killer' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, K2Node_DynamicCast_AsHWCharacter_Smite_God) == 0x000008, "Member 'BP_JoustGameState_C_HandleGodKill::K2Node_DynamicCast_AsHWCharacter_Smite_God' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_JoustGameState_C_HandleGodKill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_struct_Variable) == 0x000014, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_struct_Variable_1) == 0x00001C, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_struct_Variable_2) == 0x000024, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_struct_Variable_3) == 0x00002C, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_struct_Variable_4) == 0x000034, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_GetActorGameTeam_ReturnValue) == 0x00003C, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_GetJoustCurrentRoundReward_Reward) == 0x000040, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_GetJoustCurrentRoundReward_Reward' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_GetGameStatsTracker_ReturnValue) == 0x000048, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_GetGameStatsTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_GetAnnouncementComponent_ReturnValue) == 0x000058, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_GetAnnouncementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, Temp_byte_Variable) == 0x000060, "Member 'BP_JoustGameState_C_HandleGodKill::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000061, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, K2Node_Select_Default) == 0x000064, "Member 'BP_JoustGameState_C_HandleGodKill::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_IsValid_ReturnValue) == 0x00006C, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x00006D, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000070, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000078, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000088, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_Not_PreBool_ReturnValue) == 0x0000A0, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_BooleanAND_ReturnValue) == 0x0000A1, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_HandleGodKill, CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast) == 0x0000A4, "Member 'BP_JoustGameState_C_HandleGodKill::CallFunc_AssignTagSetByCallerMagnitude_Magnitude_ImplicitCast' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.IncreaseTeamDamageScore
// 0x0030 (0x0030 - 0x0000)
struct BP_JoustGameState_C_IncreaseTeamDamageScore final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Points;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_IncreaseTeamDamageScore) == 0x000008, "Wrong alignment on BP_JoustGameState_C_IncreaseTeamDamageScore");
static_assert(sizeof(BP_JoustGameState_C_IncreaseTeamDamageScore) == 0x000030, "Wrong size on BP_JoustGameState_C_IncreaseTeamDamageScore");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, Team) == 0x000000, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, Points) == 0x000008, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::Points' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Not_PreBool_ReturnValue) == 0x000012, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000014, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Not_PreBool_ReturnValue_1) == 0x000015, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_BooleanOR_ReturnValue_1) == 0x000016, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000017, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_IncreaseTeamDamageScore, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'BP_JoustGameState_C_IncreaseTeamDamageScore::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.InitGameStateVariables
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_InitGameStateVariables final
{
public:
	class UClass*                                 BallistaDamageEffect_0;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BallistaStunEffect_0;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        BallistaStunDuration;                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BallistaMaxHealthDamage_0;                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDuel;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_InitGameStateVariables) == 0x000008, "Wrong alignment on BP_JoustGameState_C_InitGameStateVariables");
static_assert(sizeof(BP_JoustGameState_C_InitGameStateVariables) == 0x000028, "Wrong size on BP_JoustGameState_C_InitGameStateVariables");
static_assert(offsetof(BP_JoustGameState_C_InitGameStateVariables, BallistaDamageEffect_0) == 0x000000, "Member 'BP_JoustGameState_C_InitGameStateVariables::BallistaDamageEffect_0' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_InitGameStateVariables, BallistaStunEffect_0) == 0x000008, "Member 'BP_JoustGameState_C_InitGameStateVariables::BallistaStunEffect_0' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_InitGameStateVariables, BallistaStunDuration) == 0x000010, "Member 'BP_JoustGameState_C_InitGameStateVariables::BallistaStunDuration' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_InitGameStateVariables, BallistaMaxHealthDamage_0) == 0x000018, "Member 'BP_JoustGameState_C_InitGameStateVariables::BallistaMaxHealthDamage_0' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_InitGameStateVariables, IsDuel) == 0x000020, "Member 'BP_JoustGameState_C_InitGameStateVariables::IsDuel' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.Multicast_BroadcastTeamDamageTotals
// 0x0010 (0x0010 - 0x0000)
struct BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals final
{
public:
	double                                        OrderDamage_0;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChaosDamage_0;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals) == 0x000008, "Wrong alignment on BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals");
static_assert(sizeof(BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals) == 0x000010, "Wrong size on BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals");
static_assert(offsetof(BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals, OrderDamage_0) == 0x000000, "Member 'BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals::OrderDamage_0' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals, ChaosDamage_0) == 0x000008, "Member 'BP_JoustGameState_C_Multicast_BroadcastTeamDamageTotals::ChaosDamage_0' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.Multicast_BroadcastTeamFiredBallista
// 0x0010 (0x0010 - 0x0000)
struct BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista) == 0x000008, "Wrong alignment on BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista");
static_assert(sizeof(BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista) == 0x000010, "Wrong size on BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista");
static_assert(offsetof(BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista, Team) == 0x000000, "Member 'BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista, TargetActor) == 0x000008, "Member 'BP_JoustGameState_C_Multicast_BroadcastTeamFiredBallista::TargetActor' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.Multicast_BroadcastTeamReachedDamageGoal
// 0x0001 (0x0001 - 0x0000)
struct BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal final
{
public:
	EHWSmiteTeamId                                NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal) == 0x000001, "Wrong alignment on BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal");
static_assert(sizeof(BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal) == 0x000001, "Wrong size on BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal");
static_assert(offsetof(BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal, NewParam) == 0x000000, "Member 'BP_JoustGameState_C_Multicast_BroadcastTeamReachedDamageGoal::NewParam' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnBallistaTargetingComplete
// 0x0020 (0x0020 - 0x0000)
struct BP_JoustGameState_C_OnBallistaTargetingComplete final
{
public:
	class UHWAbilitySystemComponent*              TargetASC;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                InstigatorTeam;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                BallistaTeam;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_4;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_5;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_Select_Default;                             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnBallistaTargetingComplete) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnBallistaTargetingComplete");
static_assert(sizeof(BP_JoustGameState_C_OnBallistaTargetingComplete) == 0x000020, "Wrong size on BP_JoustGameState_C_OnBallistaTargetingComplete");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, TargetASC) == 0x000000, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::TargetASC' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, InstigatorTeam) == 0x000008, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::InstigatorTeam' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, DamageInstigator) == 0x000010, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::DamageInstigator' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, BallistaTeam) == 0x000018, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::BallistaTeam' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable) == 0x000019, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable_1) == 0x00001A, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable_2) == 0x00001B, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable_3) == 0x00001C, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable_4) == 0x00001D, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, Temp_byte_Variable_5) == 0x00001E, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTargetingComplete, K2Node_Select_Default) == 0x00001F, "Member 'BP_JoustGameState_C_OnBallistaTargetingComplete::K2Node_Select_Default' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnBallistaTimeToHitTimerFinished
// 0x00D0 (0x00D0 - 0x0000)
struct BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished final
{
public:
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0000(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0008(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0010(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x0018(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0020(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable_5;                            // 0x002C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_6;                            // 0x0034(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_7;                            // 0x003C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_8;                            // 0x0044(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_9;                            // 0x004C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameStatsTracker*                    CallFunc_GetGameStatsTracker_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAnnouncementComponent*               CallFunc_GetAnnouncementComponent_ReturnValue;     // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x009C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x00A4(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default_2;                           // 0x00C4(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished");
static_assert(sizeof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished) == 0x0000D0, "Wrong size on BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable) == 0x000000, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_1) == 0x000008, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_2) == 0x000010, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_3) == 0x000018, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_4) == 0x000020, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_bool_Variable) == 0x000028, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_byte_Variable) == 0x000029, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_5) == 0x00002C, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_6) == 0x000034, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_7) == 0x00003C, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_8) == 0x000044, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_struct_Variable_9) == 0x00004C, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_GetGameStatsTracker_ReturnValue) == 0x000058, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_GetGameStatsTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_GetAnnouncementComponent_ReturnValue) == 0x000060, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_GetAnnouncementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, Temp_byte_Variable_1) == 0x000068, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_GetActorGameTeam_ReturnValue) == 0x000080, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000088, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000098, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, K2Node_Select_Default) == 0x00009C, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, K2Node_Select_Default_1) == 0x0000A4, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0000B0, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000C0, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, CallFunc_BooleanOR_ReturnValue) == 0x0000C1, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished, K2Node_Select_Default_2) == 0x0000C4, "Member 'BP_JoustGameState_C_OnBallistaTimeToHitTimerFinished::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnBattleStandardExpired
// 0x0001 (0x0001 - 0x0000)
struct BP_JoustGameState_C_OnBattleStandardExpired final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnBattleStandardExpired) == 0x000001, "Wrong alignment on BP_JoustGameState_C_OnBattleStandardExpired");
static_assert(sizeof(BP_JoustGameState_C_OnBattleStandardExpired) == 0x000001, "Wrong size on BP_JoustGameState_C_OnBattleStandardExpired");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardExpired, Team) == 0x000000, "Member 'BP_JoustGameState_C_OnBattleStandardExpired::Team' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnBattleStandardPickedUp
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_OnBattleStandardPickedUp final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InstigatorActor;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable_5;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                K2Node_Select_Default;                             // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnBattleStandardPickedUp) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnBattleStandardPickedUp");
static_assert(sizeof(BP_JoustGameState_C_OnBattleStandardPickedUp) == 0x000018, "Wrong size on BP_JoustGameState_C_OnBattleStandardPickedUp");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Team) == 0x000000, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, InstigatorActor) == 0x000008, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::InstigatorActor' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable) == 0x000010, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, CallFunc_GetActorGameTeam_ReturnValue) == 0x000011, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable_1) == 0x000012, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable_2) == 0x000013, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable_3) == 0x000014, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable_4) == 0x000015, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, Temp_byte_Variable_5) == 0x000016, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnBattleStandardPickedUp, K2Node_Select_Default) == 0x000017, "Member 'BP_JoustGameState_C_OnBattleStandardPickedUp::K2Node_Select_Default' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnDealtDamage
// 0x0130 (0x0130 - 0x0000)
struct BP_JoustGameState_C_OnDealtDamage final
{
public:
	struct FDamageEventData                       DamageEventData;                                   // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        NonGodDamageMultiplier;                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ValidNonGodTargets;                                // 0x0080(0x0020)(Edit, BlueprintVisible)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_B_ImplicitCast;               // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_B_ImplicitCast;    // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Damage_ImplicitCast;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_IncreaseTeamDamageScore_Points_ImplicitCast; // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Damage_ImplicitCast_1;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnDealtDamage) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnDealtDamage");
static_assert(sizeof(BP_JoustGameState_C_OnDealtDamage) == 0x000130, "Wrong size on BP_JoustGameState_C_OnDealtDamage");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, DamageEventData) == 0x000000, "Member 'BP_JoustGameState_C_OnDealtDamage::DamageEventData' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, NonGodDamageMultiplier) == 0x000070, "Member 'BP_JoustGameState_C_OnDealtDamage::NonGodDamageMultiplier' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, Damage) == 0x000078, "Member 'BP_JoustGameState_C_OnDealtDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, ValidNonGodTargets) == 0x000080, "Member 'BP_JoustGameState_C_OnDealtDamage::ValidNonGodTargets' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x0000A1, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_SelectFloat_ReturnValue) == 0x0000B0, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000B8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000C8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_GetActorGameTeam_ReturnValue) == 0x0000C9, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000D8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000E8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_SelectFloat_A_ImplicitCast) == 0x0000F0, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x0000F8, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_SelectFloat_B_ImplicitCast) == 0x000100, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_SelectFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_LessEqual_DoubleDouble_B_ImplicitCast) == 0x000108, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_LessEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, K2Node_VariableSet_Damage_ImplicitCast) == 0x000110, "Member 'BP_JoustGameState_C_OnDealtDamage::K2Node_VariableSet_Damage_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_IncreaseTeamDamageScore_Points_ImplicitCast) == 0x000118, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_IncreaseTeamDamageScore_Points_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000120, "Member 'BP_JoustGameState_C_OnDealtDamage::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDealtDamage, K2Node_VariableSet_Damage_ImplicitCast_1) == 0x000128, "Member 'BP_JoustGameState_C_OnDealtDamage::K2Node_VariableSet_Damage_ImplicitCast_1' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnDuelMapBossSpawned
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_OnDuelMapBossSpawned final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnDuelMapBossSpawned) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnDuelMapBossSpawned");
static_assert(sizeof(BP_JoustGameState_C_OnDuelMapBossSpawned) == 0x000028, "Wrong size on BP_JoustGameState_C_OnDuelMapBossSpawned");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMapBossSpawned, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_OnDuelMapBossSpawned::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMapBossSpawned, Bot) == 0x000008, "Member 'BP_JoustGameState_C_OnDuelMapBossSpawned::Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMapBossSpawned, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_OnDuelMapBossSpawned::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMapBossSpawned, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_OnDuelMapBossSpawned::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMapBossSpawned, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_OnDuelMapBossSpawned::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnDuelMinionSpawned
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_OnDuelMinionSpawned final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnDuelMinionSpawned) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnDuelMinionSpawned");
static_assert(sizeof(BP_JoustGameState_C_OnDuelMinionSpawned) == 0x000028, "Wrong size on BP_JoustGameState_C_OnDuelMinionSpawned");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMinionSpawned, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_OnDuelMinionSpawned::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMinionSpawned, Bot) == 0x000008, "Member 'BP_JoustGameState_C_OnDuelMinionSpawned::Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMinionSpawned, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_OnDuelMinionSpawned::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMinionSpawned, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_OnDuelMinionSpawned::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelMinionSpawned, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_OnDuelMinionSpawned::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnDuelTitanSpawned
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_OnDuelTitanSpawned final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue; // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnDuelTitanSpawned) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnDuelTitanSpawned");
static_assert(sizeof(BP_JoustGameState_C_OnDuelTitanSpawned) == 0x000028, "Wrong size on BP_JoustGameState_C_OnDuelTitanSpawned");
static_assert(offsetof(BP_JoustGameState_C_OnDuelTitanSpawned, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_OnDuelTitanSpawned::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelTitanSpawned, Bot) == 0x000008, "Member 'BP_JoustGameState_C_OnDuelTitanSpawned::Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelTitanSpawned, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_OnDuelTitanSpawned::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelTitanSpawned, CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_OnDuelTitanSpawned::CallFunc_BP_ApplyGameplayEffectToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnDuelTitanSpawned, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_OnDuelTitanSpawned::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnGodScoredKill
// 0x0038 (0x0038 - 0x0000)
struct BP_JoustGameState_C_OnGodScoredKill final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OldStat;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewStat;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPawn_ReturnValue;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnGodScoredKill) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnGodScoredKill");
static_assert(sizeof(BP_JoustGameState_C_OnGodScoredKill) == 0x000038, "Wrong size on BP_JoustGameState_C_OnGodScoredKill");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, PlayerState) == 0x000000, "Member 'BP_JoustGameState_C_OnGodScoredKill::PlayerState' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, OldStat) == 0x000008, "Member 'BP_JoustGameState_C_OnGodScoredKill::OldStat' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, NewStat) == 0x00000C, "Member 'BP_JoustGameState_C_OnGodScoredKill::NewStat' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, CallFunc_GetPawn_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_OnGodScoredKill::CallFunc_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000018, "Member 'BP_JoustGameState_C_OnGodScoredKill::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_JoustGameState_C_OnGodScoredKill::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000028, "Member 'BP_JoustGameState_C_OnGodScoredKill::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGodScoredKill, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_JoustGameState_C_OnGodScoredKill::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnGoldFuryDied
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_OnGoldFuryDied final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Killer;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnGoldFuryDied) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnGoldFuryDied");
static_assert(sizeof(BP_JoustGameState_C_OnGoldFuryDied) == 0x000018, "Wrong size on BP_JoustGameState_C_OnGoldFuryDied");
static_assert(offsetof(BP_JoustGameState_C_OnGoldFuryDied, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_OnGoldFuryDied::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGoldFuryDied, Bot) == 0x000008, "Member 'BP_JoustGameState_C_OnGoldFuryDied::Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnGoldFuryDied, Killer) == 0x000010, "Member 'BP_JoustGameState_C_OnGoldFuryDied::Killer' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnKillCommitted
// 0x00C8 (0x00C8 - 0x0000)
struct BP_JoustGameState_C_OnKillCommitted final
{
public:
	struct FDamageEventData                       KillEventData;                                     // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	double                                        DamageModifier;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  ValidKillTags;                                     // 0x0078(0x0020)(Edit, BlueprintVisible)
	float                                         Damage;                                            // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                CallFunc_GetActorGameTeam_ReturnValue;             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnKillCommitted) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnKillCommitted");
static_assert(sizeof(BP_JoustGameState_C_OnKillCommitted) == 0x0000C8, "Wrong size on BP_JoustGameState_C_OnKillCommitted");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, KillEventData) == 0x000000, "Member 'BP_JoustGameState_C_OnKillCommitted::KillEventData' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, DamageModifier) == 0x000070, "Member 'BP_JoustGameState_C_OnKillCommitted::DamageModifier' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, ValidKillTags) == 0x000078, "Member 'BP_JoustGameState_C_OnKillCommitted::ValidKillTags' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, Damage) == 0x000098, "Member 'BP_JoustGameState_C_OnKillCommitted::Damage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x00009C, "Member 'BP_JoustGameState_C_OnKillCommitted::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x0000A0, "Member 'BP_JoustGameState_C_OnKillCommitted::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, CallFunc_GetActorGameTeam_ReturnValue) == 0x0000A8, "Member 'BP_JoustGameState_C_OnKillCommitted::CallFunc_GetActorGameTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000B0, "Member 'BP_JoustGameState_C_OnKillCommitted::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnKillCommitted, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000C0, "Member 'BP_JoustGameState_C_OnKillCommitted::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnMapBossKilled
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_OnMapBossKilled final
{
public:
	class AHWBotFactory*                          BotFactory;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Killer;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnMapBossKilled) == 0x000008, "Wrong alignment on BP_JoustGameState_C_OnMapBossKilled");
static_assert(sizeof(BP_JoustGameState_C_OnMapBossKilled) == 0x000018, "Wrong size on BP_JoustGameState_C_OnMapBossKilled");
static_assert(offsetof(BP_JoustGameState_C_OnMapBossKilled, BotFactory) == 0x000000, "Member 'BP_JoustGameState_C_OnMapBossKilled::BotFactory' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnMapBossKilled, Bot) == 0x000008, "Member 'BP_JoustGameState_C_OnMapBossKilled::Bot' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnMapBossKilled, Killer) == 0x000010, "Member 'BP_JoustGameState_C_OnMapBossKilled::Killer' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.OnMatchPhaseStarted
// 0x000C (0x000C - 0x0000)
struct BP_JoustGameState_C_OnMatchPhaseStarted final
{
public:
	struct FGameplayTag                           NewPhase;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_OnMatchPhaseStarted) == 0x000004, "Wrong alignment on BP_JoustGameState_C_OnMatchPhaseStarted");
static_assert(sizeof(BP_JoustGameState_C_OnMatchPhaseStarted) == 0x00000C, "Wrong size on BP_JoustGameState_C_OnMatchPhaseStarted");
static_assert(offsetof(BP_JoustGameState_C_OnMatchPhaseStarted, NewPhase) == 0x000000, "Member 'BP_JoustGameState_C_OnMatchPhaseStarted::NewPhase' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_OnMatchPhaseStarted, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000008, "Member 'BP_JoustGameState_C_OnMatchPhaseStarted::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.ResetTeamDamageScore
// 0x0002 (0x0002 - 0x0000)
struct BP_JoustGameState_C_ResetTeamDamageScore final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_ResetTeamDamageScore) == 0x000001, "Wrong alignment on BP_JoustGameState_C_ResetTeamDamageScore");
static_assert(sizeof(BP_JoustGameState_C_ResetTeamDamageScore) == 0x000002, "Wrong size on BP_JoustGameState_C_ResetTeamDamageScore");
static_assert(offsetof(BP_JoustGameState_C_ResetTeamDamageScore, Team) == 0x000000, "Member 'BP_JoustGameState_C_ResetTeamDamageScore::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_ResetTeamDamageScore, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_JoustGameState_C_ResetTeamDamageScore::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.RevokeTopDamageBuff
// 0x0060 (0x0060 - 0x0000)
struct BP_JoustGameState_C_RevokeTopDamageBuff final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         LocalPlayerState;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         K2Node_MakeStruct_GenericTeamId;                   // 0x0014(0x0001)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           CallFunc_GetTeam_ReturnValue;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_RevokeTopDamageBuff) == 0x000008, "Wrong alignment on BP_JoustGameState_C_RevokeTopDamageBuff");
static_assert(sizeof(BP_JoustGameState_C_RevokeTopDamageBuff) == 0x000060, "Wrong size on BP_JoustGameState_C_RevokeTopDamageBuff");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, Team) == 0x000000, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, LocalPlayerState) == 0x000008, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::LocalPlayerState' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, K2Node_MakeStruct_GenericTeamId) == 0x000014, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::K2Node_MakeStruct_GenericTeamId' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_GetTeam_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_GetTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Greater_IntInt_ReturnValue) == 0x000035, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_Array_Get_Item) == 0x000040, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000048, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_IsValid_ReturnValue_1) == 0x000050, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue) == 0x000054, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_RemoveActiveEffectsWithGrantedTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_RevokeTopDamageBuff, CallFunc_IsValid_ReturnValue_2) == 0x000058, "Member 'BP_JoustGameState_C_RevokeTopDamageBuff::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.Setup Duel Game Modifiers
// 0x0048 (0x0048 - 0x0000)
struct BP_JoustGameState_C_Setup_Duel_Game_Modifiers final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetAssetTags_ReturnValue;                 // 0x0020(0x0020)()
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_2;                     // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers) == 0x000008, "Wrong alignment on BP_JoustGameState_C_Setup_Duel_Game_Modifiers");
static_assert(sizeof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers) == 0x000048, "Wrong size on BP_JoustGameState_C_Setup_Duel_Game_Modifiers");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_GetAssetTags_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_GetAssetTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_HasTag_ReturnValue) == 0x000040, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_HasTag_ReturnValue_1) == 0x000041, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_Setup_Duel_Game_Modifiers, CallFunc_HasTag_ReturnValue_2) == 0x000042, "Member 'BP_JoustGameState_C_Setup_Duel_Game_Modifiers::CallFunc_HasTag_ReturnValue_2' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.SpawnBattleStandard
// 0x0028 (0x0028 - 0x0000)
struct BP_JoustGameState_C_SpawnBattleStandard final
{
public:
	EHWSmiteTeamId                                Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleStandard_Pickup_C*            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_SpawnBattleStandard) == 0x000008, "Wrong alignment on BP_JoustGameState_C_SpawnBattleStandard");
static_assert(sizeof(BP_JoustGameState_C_SpawnBattleStandard) == 0x000028, "Wrong size on BP_JoustGameState_C_SpawnBattleStandard");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, Team) == 0x000000, "Member 'BP_JoustGameState_C_SpawnBattleStandard::Team' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_JoustGameState_C_SpawnBattleStandard::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_JoustGameState_C_SpawnBattleStandard::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_JoustGameState_C_SpawnBattleStandard::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_SpawnBattleStandard::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_JoustGameState_C_SpawnBattleStandard::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_JoustGameState_C_SpawnBattleStandard::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_SpawnBattleStandard, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'BP_JoustGameState_C_SpawnBattleStandard::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.StartBroadcastDamageTimer
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_StartBroadcastDamageTimer final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_StartBroadcastDamageTimer) == 0x000008, "Wrong alignment on BP_JoustGameState_C_StartBroadcastDamageTimer");
static_assert(sizeof(BP_JoustGameState_C_StartBroadcastDamageTimer) == 0x000018, "Wrong size on BP_JoustGameState_C_StartBroadcastDamageTimer");
static_assert(offsetof(BP_JoustGameState_C_StartBroadcastDamageTimer, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_JoustGameState_C_StartBroadcastDamageTimer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartBroadcastDamageTimer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_StartBroadcastDamageTimer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.StartNewRound
// 0x0018 (0x0018 - 0x0000)
struct BP_JoustGameState_C_StartNewRound final
{
public:
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameStatsTracker*                    CallFunc_GetGameStatsTracker_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWAnnouncementComponent*               CallFunc_GetAnnouncementComponent_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_StartNewRound) == 0x000008, "Wrong alignment on BP_JoustGameState_C_StartNewRound");
static_assert(sizeof(BP_JoustGameState_C_StartNewRound) == 0x000018, "Wrong size on BP_JoustGameState_C_StartNewRound");
static_assert(offsetof(BP_JoustGameState_C_StartNewRound, CallFunc_Add_IntInt_ReturnValue) == 0x000000, "Member 'BP_JoustGameState_C_StartNewRound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartNewRound, CallFunc_GetGameStatsTracker_ReturnValue) == 0x000008, "Member 'BP_JoustGameState_C_StartNewRound::CallFunc_GetGameStatsTracker_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartNewRound, CallFunc_GetAnnouncementComponent_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_StartNewRound::CallFunc_GetAnnouncementComponent_ReturnValue' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.StartRoundCooldown
// 0x0020 (0x0020 - 0x0000)
struct BP_JoustGameState_C_StartRoundCooldown final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_StartRoundCooldown) == 0x000008, "Wrong alignment on BP_JoustGameState_C_StartRoundCooldown");
static_assert(sizeof(BP_JoustGameState_C_StartRoundCooldown) == 0x000020, "Wrong size on BP_JoustGameState_C_StartRoundCooldown");
static_assert(offsetof(BP_JoustGameState_C_StartRoundCooldown, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_JoustGameState_C_StartRoundCooldown::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartRoundCooldown, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000010, "Member 'BP_JoustGameState_C_StartRoundCooldown::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartRoundCooldown, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_JoustGameState_C_StartRoundCooldown::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartRoundCooldown, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x00001C, "Member 'BP_JoustGameState_C_StartRoundCooldown::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.StartTargetingBallista
// 0x0010 (0x0010 - 0x0000)
struct BP_JoustGameState_C_StartTargetingBallista final
{
public:
	EHWSmiteTeamId                                TeamToDamage;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DamageInstigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_StartTargetingBallista) == 0x000008, "Wrong alignment on BP_JoustGameState_C_StartTargetingBallista");
static_assert(sizeof(BP_JoustGameState_C_StartTargetingBallista) == 0x000010, "Wrong size on BP_JoustGameState_C_StartTargetingBallista");
static_assert(offsetof(BP_JoustGameState_C_StartTargetingBallista, TeamToDamage) == 0x000000, "Member 'BP_JoustGameState_C_StartTargetingBallista::TeamToDamage' has a wrong offset!");
static_assert(offsetof(BP_JoustGameState_C_StartTargetingBallista, DamageInstigator) == 0x000008, "Member 'BP_JoustGameState_C_StartTargetingBallista::DamageInstigator' has a wrong offset!");

// Function BP_JoustGameState.BP_JoustGameState_C.StopTrackingDamage
// 0x0001 (0x0001 - 0x0000)
struct BP_JoustGameState_C_StopTrackingDamage final
{
public:
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_JoustGameState_C_StopTrackingDamage) == 0x000001, "Wrong alignment on BP_JoustGameState_C_StopTrackingDamage");
static_assert(sizeof(BP_JoustGameState_C_StopTrackingDamage) == 0x000001, "Wrong size on BP_JoustGameState_C_StopTrackingDamage");
static_assert(offsetof(BP_JoustGameState_C_StopTrackingDamage, CallFunc_BooleanAND_ReturnValue) == 0x000000, "Member 'BP_JoustGameState_C_StopTrackingDamage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

