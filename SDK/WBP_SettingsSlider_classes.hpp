#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SettingsSlider

#include "Basic.hpp"

#include "RallyHereStart_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_SettingsSlider.WBP_SettingsSlider_C
// 0x0060 (0x0668 - 0x0608)
class WBP_SettingsSlider::UWBP_SettingsSlider_C final : public URHSettingsWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0608(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       MobileLayout;                                      // 0x0610(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             DisplayText;                                       // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                HoverButton;                                       // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USlider*                                SettingsSlider;                                    // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           SliderBar;                                         // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIsHovered;                                        // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentAcceleration;                               // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxAcceleration;                                   // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinAcceleration;                                   // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LinearAccelerationCoeff;                           // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Value_To_Slider(double* Slider_Value);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Step_Right();
	void Step_Left();
	void Step(double Multiplier);
	void Slider_To_Value(double* Value);
	void Set_Display_Text();
	void Set_Desired_Value();
	void ResetCurrentAcceleration();
	void Position_Slider_To_Value();
	void OnWidgetSettingsInfoSet();
	void OnSettingsInfoValueChanged(bool bChangedExternally);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void NavigateRightFailure();
	void NavigateLeftFailure();
	void IsSliderKey(const struct FKey& InKey, bool* IsKey);
	void IncreaseCurrentAcceleration();
	void GetMinSliderValue(double* Min_Value);
	void GetMaxSliderValue(double* Max_Value);
	void Get_Dirty_Value(double* Value);
	void GamepadUnhover();
	void GamepadHover();
	void ExecuteUbergraph_WBP_SettingsSlider(int32 EntryPoint);
	void Construct();
	void BndEvt__SettingsSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WidgetBlueprintGeneratedClass WBP_SettingsSlider.WBP_SettingsSlider_C", true, "WBP_SettingsSlider_C">();
	}
	static class WBP_SettingsSlider::UWBP_SettingsSlider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<WBP_SettingsSlider::UWBP_SettingsSlider_C>();
	}
};
static_assert(alignof(WBP_SettingsSlider::UWBP_SettingsSlider_C) == 0x000008, "Wrong alignment on WBP_SettingsSlider::UWBP_SettingsSlider_C");
static_assert(sizeof(WBP_SettingsSlider::UWBP_SettingsSlider_C) == 0x000668, "Wrong size on WBP_SettingsSlider::UWBP_SettingsSlider_C");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, UberGraphFrame) == 0x000608, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, MobileLayout) == 0x000610, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::MobileLayout' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, Hover) == 0x000618, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::Hover' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, DisplayText) == 0x000620, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::DisplayText' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, HoverButton) == 0x000628, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::HoverButton' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, SettingsSlider) == 0x000630, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::SettingsSlider' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, SliderBar) == 0x000638, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::SliderBar' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, bIsHovered) == 0x000640, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::bIsHovered' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, CurrentAcceleration) == 0x000648, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::CurrentAcceleration' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, MaxAcceleration) == 0x000650, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, MinAcceleration) == 0x000658, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::MinAcceleration' has a wrong offset!");
static_assert(offsetof(WBP_SettingsSlider::UWBP_SettingsSlider_C, LinearAccelerationCoeff) == 0x000660, "Member 'WBP_SettingsSlider::UWBP_SettingsSlider_C::LinearAccelerationCoeff' has a wrong offset!");

}

