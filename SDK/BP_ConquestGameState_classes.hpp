#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConquestGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EJungleTribes_structs.hpp"
#include "S_TribeRenown_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ConquestGameState.BP_ConquestGameState_C
// 0x0098 (0x0910 - 0x0878)
class ABP_ConquestGameState_C : public AHWGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0878(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         OrderGoldFuryKills;                                // 0x0888(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChaosGoldFuryKills;                                // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 TeamId, EJungleTribes Tribe, double CurrentRenown, int32 TribeLevel)> RenownUpdated; // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FS_TribeRenown>                 OrderRenown;                                       // 0x08A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<struct FS_TribeRenown>                 ChaosRenown;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TMulticastInlineDelegate<void(EJungleTribes Tribe, int32 TeamId, int32 NewLevel, const struct FGameplayTagContainer& Tags)> RenownLevelUpdated; // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         FireGiantKills;                                    // 0x08D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 TotalKills)> FireGiantKillsUpdated;                          // 0x08D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class AHWBotFactory*>                  HWBotFactories;                                    // 0x08E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        MGL;                                               // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AHWPlayerState*>                 PlayerStateList;                                   // 0x0900(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void CheckRenownLevelUp(TArray<struct FS_TribeRenown>& Array, EJungleTribes TribeToFind, int32 KillingTeamID, double IncomingRenown, bool* Return);
	void CheckTeamArrayForTribe(const TArray<struct FS_TribeRenown>& TargetArray, EJungleTribes Tribe, TArray<struct FS_TribeRenown>* RenownArray, bool* Return);
	void DoesArrayHaveTribe(TArray<struct FS_TribeRenown>& RenownArray, EJungleTribes TribeToCheck, bool* ArrayHasTribe);
	void ExecuteUbergraph_BP_ConquestGameState(int32 EntryPoint);
	void FindTribeIndexInArray(TArray<struct FS_TribeRenown>& TribeArray, EJungleTribes TribeToFind, int32* ArrayIndex);
	void GeneratePlayerStateList(TArray<class AHWPlayerState*>* PlayerStates);
	void GetMedianGodLevel(double* MedianLevel);
	void GetTeamInfamy(int32 TeamId, EJungleTribes Tribe, struct FS_TribeRenown* Infamy);
	void GetTeamRenown(int32 TeamId, EJungleTribes Tribe, struct FS_TribeRenown* Renown);
	void IncreaseAllTeamRenownLevel(int32 Team_Id);
	void IncreaseTeamRenownLevel(int32 Team_Id, EJungleTribes Tribe);
	void IncrementFireGiantKills();
	void MulticastRenownLevelChanged(EJungleTribes Tribe, int32 TeamId, int32 NewLevel, const struct FGameplayTagContainer& Tags_0);
	void MulticastRenownUpdated(int32 TeamId, EJungleTribes Tribe, double CurrentRenown, int32 TribeLevel);
	void OnGodLevelUp(class UHWAbilitySystemComponent* ASC);
	void OnPlayerRespawned(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor);
	void OnRep_FireGiantKills();
	void OnTeamMemberAdded(class AHWPlayerState* NewMember);
	void OnTeamMemberRemoved(class AHWPlayerState* OldMember);
	void OnTeamMembersUpdated();
	void ReceiveBeginPlay();
	void SetMedianGodLevel();
	void SetupCharacterListeners();
	void SetupTeamListeners(const struct FGameplayTag& NewPhase);
	void UpdateFactoryLevel(EJungleTribes Tribe, int32 Level, int32 TeamId, bool* Return);
	void UpdateRenownArray(TArray<struct FS_TribeRenown>& TribeRenownArray, EJungleTribes TribeToUpdate, double RenownAward, int32 KillingTeamID, double* NewRenownAmount, int32* NewTribeLevel);
	void UpdateTeamRenown(int32 KillingTeamID, double RenownAmount, EJungleTribes TribeThatWasSlain);

	void CalculateMedianGodLevel(TArray<class AHWPlayerState*>& PlayerStates, double* MedianLevel) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ConquestGameState_C">();
	}
	static class ABP_ConquestGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ConquestGameState_C>();
	}
};
static_assert(alignof(ABP_ConquestGameState_C) == 0x000008, "Wrong alignment on ABP_ConquestGameState_C");
static_assert(sizeof(ABP_ConquestGameState_C) == 0x000910, "Wrong size on ABP_ConquestGameState_C");
static_assert(offsetof(ABP_ConquestGameState_C, UberGraphFrame) == 0x000878, "Member 'ABP_ConquestGameState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, DefaultSceneRoot) == 0x000880, "Member 'ABP_ConquestGameState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, OrderGoldFuryKills) == 0x000888, "Member 'ABP_ConquestGameState_C::OrderGoldFuryKills' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, ChaosGoldFuryKills) == 0x00088C, "Member 'ABP_ConquestGameState_C::ChaosGoldFuryKills' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, RenownUpdated) == 0x000890, "Member 'ABP_ConquestGameState_C::RenownUpdated' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, OrderRenown) == 0x0008A0, "Member 'ABP_ConquestGameState_C::OrderRenown' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, ChaosRenown) == 0x0008B0, "Member 'ABP_ConquestGameState_C::ChaosRenown' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, RenownLevelUpdated) == 0x0008C0, "Member 'ABP_ConquestGameState_C::RenownLevelUpdated' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, FireGiantKills) == 0x0008D0, "Member 'ABP_ConquestGameState_C::FireGiantKills' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, FireGiantKillsUpdated) == 0x0008D8, "Member 'ABP_ConquestGameState_C::FireGiantKillsUpdated' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, HWBotFactories) == 0x0008E8, "Member 'ABP_ConquestGameState_C::HWBotFactories' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, MGL) == 0x0008F8, "Member 'ABP_ConquestGameState_C::MGL' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_C, PlayerStateList) == 0x000900, "Member 'ABP_ConquestGameState_C::PlayerStateList' has a wrong offset!");

}

