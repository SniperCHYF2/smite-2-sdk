#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AutoAttackCurrentTarget

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK::Params
{

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.CanFireAbility
// 0x0040 (0x0040 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_CanFireAbility final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFire;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      Character;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTargetInAbilityRange_IsInRange;         // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_CanFireAbility) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_CanFireAbility");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_CanFireAbility) == 0x000040, "Wrong size on BTS_AutoAttackCurrentTarget_C_CanFireAbility");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, CanFire) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::CanFire' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, Character) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::Character' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_CanFireAbility, CallFunc_IsTargetInAbilityRange_IsInRange) == 0x000039, "Member 'BTS_AutoAttackCurrentTarget_C_CanFireAbility::CallFunc_IsTargetInAbilityRange_IsInRange' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.ExecuteUbergraph_BTS_AutoAttackCurrentTarget
// 0x0030 (0x0030 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanFireAbility_CanFire;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldFireAbility_ShoudFire;              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget) == 0x000030, "Wrong size on BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, EntryPoint) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, K2Node_Event_OwnerController) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, K2Node_Event_OwnerController_1) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, K2Node_Event_ControlledPawn_1) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, CallFunc_CanFireAbility_CanFire) == 0x00002C, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::CallFunc_CanFireAbility_CanFire' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, CallFunc_ShouldFireAbility_ShoudFire) == 0x00002D, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::CallFunc_ShouldFireAbility_ShoudFire' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget, CallFunc_BooleanAND_ReturnValue) == 0x00002E, "Member 'BTS_AutoAttackCurrentTarget_C_ExecuteUbergraph_BTS_AutoAttackCurrentTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.IsFiring
// 0x0038 (0x0038 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_IsFiring final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Firing;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_IsFiring) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_IsFiring");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_IsFiring) == 0x000038, "Wrong size on BTS_AutoAttackCurrentTarget_C_IsFiring");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, Firing) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::Firing' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsFiring, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_IsFiring::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.IsTargetInAbilityRange
// 0x0080 (0x0080 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange final
{
public:
	class APawn*                                  ControlledPawn;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInRange;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetRadius;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Effect_Radius;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Range;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Desired_Range;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Distance;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetHorizontalDistanceTo_ReturnValue;      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCapsuleRadius_ReturnValue;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGodBotInhandRange_ReturnValue;         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LessEqual_DoubleDouble_A_ImplicitCast;    // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange) == 0x000080, "Wrong size on BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, ControlledPawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, TargetActor) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::TargetActor' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, IsInRange) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::IsInRange' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, TargetRadius) == 0x000014, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::TargetRadius' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, Effect_Radius) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::Effect_Radius' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, Min_Range) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::Min_Range' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, Desired_Range) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::Desired_Range' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, Target_Distance) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::Target_Distance' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_GetHorizontalDistanceTo_ReturnValue) == 0x000034, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_GetHorizontalDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000038, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_GetCapsuleRadius_ReturnValue) == 0x000044, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_GetCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000048, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_GetGodBotInhandRange_ReturnValue) == 0x000054, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_GetGodBotInhandRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000058, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000060, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000068, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange, CallFunc_LessEqual_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'BTS_AutoAttackCurrentTarget_C_IsTargetInAbilityRange::CallFunc_LessEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.PressFireButton
// 0x0030 (0x0030 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_PressFireButton final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_PlayableCharacter*         K2Node_DynamicCast_AsHWCharacter_Playable_Character; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_PressFireButton) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_PressFireButton");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_PressFireButton) == 0x000030, "Wrong size on BTS_AutoAttackCurrentTarget_C_PressFireButton");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, K2Node_DynamicCast_AsHWCharacter_Playable_Character) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::K2Node_DynamicCast_AsHWCharacter_Playable_Character' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_PressFireButton, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BTS_AutoAttackCurrentTarget_C_PressFireButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.ReceiveDeactivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI) == 0x000010, "Wrong size on BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI, OwnerController) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI, ControlledPawn) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_ReceiveDeactivationAI::ControlledPawn' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_ReceiveTickAI");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_AutoAttackCurrentTarget_C_ReceiveTickAI");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.ReleaseFireButton
// 0x0030 (0x0030 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_ReleaseFireButton final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_PlayableCharacter*         K2Node_DynamicCast_AsHWCharacter_Playable_Character; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_GetHWAbilitySystemComponent_ReturnValue;  // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_ReleaseFireButton");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton) == 0x000030, "Wrong size on BTS_AutoAttackCurrentTarget_C_ReleaseFireButton");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, K2Node_DynamicCast_AsHWCharacter_Playable_Character) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::K2Node_DynamicCast_AsHWCharacter_Playable_Character' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, CallFunc_GetHWAbilitySystemComponent_ReturnValue) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::CallFunc_GetHWAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ReleaseFireButton, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_ReleaseFireButton::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.RetrieveEquipmentFromTag
// 0x0050 (0x0050 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag final
{
public:
	class AHWCharacter_Base*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EquipSlot;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotId;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             GrantedAbilityHandle;                              // 0x0018(0x0004)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacterAbilitySystemActor*         CallFunc_GetCharacterAbilitySystemActor_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHWInventorySlot                       K2Node_MakeStruct_HWInventorySlot;                 // 0x0028(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWInventoryManagerComponent*           CallFunc_GetInventoryManager_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHWEquipmentInstance*                   CallFunc_RetrieveEquipment_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag) == 0x000050, "Wrong size on BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, Character) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::Character' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, EquipSlot) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::EquipSlot' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, SlotId) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::SlotId' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, ReturnValue) == 0x000014, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, GrantedAbilityHandle) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::GrantedAbilityHandle' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, CallFunc_GetCharacterAbilitySystemActor_ReturnValue) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::CallFunc_GetCharacterAbilitySystemActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, K2Node_MakeStruct_HWInventorySlot) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::K2Node_MakeStruct_HWInventorySlot' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, CallFunc_GetInventoryManager_ReturnValue) == 0x000038, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::CallFunc_GetInventoryManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, CallFunc_RetrieveEquipment_ReturnValue) == 0x000040, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::CallFunc_RetrieveEquipment_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BTS_AutoAttackCurrentTarget_C_RetrieveEquipmentFromTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.ShouldFireAbility
// 0x0058 (0x0058 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_ShouldFireAbility final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShoudFire;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      Target;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Source;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDamageCountFromSource_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetBlackboardValueAsName_ReturnValue;     // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDamageCountFromSource_MaxTimeRange_ImplicitCast; // 0x0054(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_ShouldFireAbility");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility) == 0x000058, "Wrong size on BTS_AutoAttackCurrentTarget_C_ShouldFireAbility");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, ShoudFire) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::ShoudFire' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, Target) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::Target' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, Source) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::Source' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_GetDamageCountFromSource_ReturnValue) == 0x00002C, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_GetDamageCountFromSource_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_Greater_IntInt_ReturnValue) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_GetBlackboardValueAsName_ReturnValue) == 0x000034, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_GetBlackboardValueAsName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00003C, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x00003D, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000040, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000048, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_ShouldFireAbility, CallFunc_GetDamageCountFromSource_MaxTimeRange_ImplicitCast) == 0x000054, "Member 'BTS_AutoAttackCurrentTarget_C_ShouldFireAbility::CallFunc_GetDamageCountFromSource_MaxTimeRange_ImplicitCast' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.StartFire
// 0x0018 (0x0018 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_StartFire final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFiring_Firing;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryFireAbility_Success;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_StartFire) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_StartFire");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_StartFire) == 0x000018, "Wrong size on BTS_AutoAttackCurrentTarget_C_StartFire");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_StartFire, Controller) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_StartFire::Controller' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_StartFire, Pawn) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_StartFire::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_StartFire, CallFunc_IsFiring_Firing) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_StartFire::CallFunc_IsFiring_Firing' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_StartFire, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BTS_AutoAttackCurrentTarget_C_StartFire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_StartFire, CallFunc_TryFireAbility_Success) == 0x000012, "Member 'BTS_AutoAttackCurrentTarget_C_StartFire::CallFunc_TryFireAbility_Success' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.TryFireAbility
// 0x0040 (0x0040 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_TryFireAbility final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              AbilitySysComp;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RetrieveEquipmentFromTag_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecHandle             CallFunc_RetrieveEquipmentFromTag_GrantedAbilityHandle; // 0x0024(0x0004)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryActivateAbility_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_TryFireAbility) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_TryFireAbility");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_TryFireAbility) == 0x000040, "Wrong size on BTS_AutoAttackCurrentTarget_C_TryFireAbility");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, Pawn) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, Success) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::Success' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, AbilitySysComp) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::AbilitySysComp' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, CallFunc_RetrieveEquipmentFromTag_ReturnValue) == 0x000021, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::CallFunc_RetrieveEquipmentFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, CallFunc_RetrieveEquipmentFromTag_GrantedAbilityHandle) == 0x000024, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::CallFunc_RetrieveEquipmentFromTag_GrantedAbilityHandle' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_TryFireAbility, CallFunc_TryActivateAbility_ReturnValue) == 0x000038, "Member 'BTS_AutoAttackCurrentTarget_C_TryFireAbility::CallFunc_TryActivateAbility_ReturnValue' has a wrong offset!");

// Function BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C.UpdateAim
// 0x0068 (0x0068 - 0x0000)
struct BTS_AutoAttackCurrentTarget_C_UpdateAim final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Pawn;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base_1;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalculateAimPointWithPrediction_outAimFromPoint; // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateAimPointWithPrediction_outAimToPoint; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_AutoAttackCurrentTarget_C_UpdateAim) == 0x000008, "Wrong alignment on BTS_AutoAttackCurrentTarget_C_UpdateAim");
static_assert(sizeof(BTS_AutoAttackCurrentTarget_C_UpdateAim) == 0x000068, "Wrong size on BTS_AutoAttackCurrentTarget_C_UpdateAim");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, Controller) == 0x000000, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::Controller' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, Pawn) == 0x000008, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::Pawn' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000010, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000020, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, K2Node_DynamicCast_AsHWCharacter_Base_1) == 0x000028, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::K2Node_DynamicCast_AsHWCharacter_Base_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, CallFunc_CalculateAimPointWithPrediction_outAimFromPoint) == 0x000038, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::CallFunc_CalculateAimPointWithPrediction_outAimFromPoint' has a wrong offset!");
static_assert(offsetof(BTS_AutoAttackCurrentTarget_C_UpdateAim, CallFunc_CalculateAimPointWithPrediction_outAimToPoint) == 0x000050, "Member 'BTS_AutoAttackCurrentTarget_C_UpdateAim::CallFunc_CalculateAimPointWithPrediction_outAimToPoint' has a wrong offset!");

}

