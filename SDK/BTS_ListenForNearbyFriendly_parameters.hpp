#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_ListenForNearbyFriendly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckForTargets
// 0x0068 (0x0068 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_CheckForTargets final
{
public:
	TArray<struct FHitResult>                     OutHits;                                           // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	bool                                          TargetsFound;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_CapsuleTraceMultiForObjects_OutHits;      // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceMultiForObjects_ReturnValue;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_CheckForTargets) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_CheckForTargets");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_CheckForTargets) == 0x000068, "Wrong size on BTS_ListenForNearbyFriendly_C_CheckForTargets");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, OutHits) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::OutHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, TargetsFound) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::TargetsFound' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, K2Node_MakeArray_Array) == 0x000018, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000028, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, K2Node_MakeArray_Array_1) == 0x000040, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, CallFunc_CapsuleTraceMultiForObjects_OutHits) == 0x000050, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::CallFunc_CapsuleTraceMultiForObjects_OutHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckForTargets, CallFunc_CapsuleTraceMultiForObjects_ReturnValue) == 0x000060, "Member 'BTS_ListenForNearbyFriendly_C_CheckForTargets::CallFunc_CapsuleTraceMultiForObjects_ReturnValue' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetAliveState
// 0x0020 (0x0020 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_CheckTargetAliveState final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_CheckTargetAliveState");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState) == 0x000020, "Wrong size on BTS_ListenForNearbyFriendly_C_CheckTargetAliveState");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState, Return) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetAliveState::Return' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetAliveState::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetAliveState::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetAliveState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetAliveState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetDistance
// 0x0028 (0x0028 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_CheckTargetDistance final
{
public:
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_CheckTargetDistance");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance) == 0x000028, "Wrong size on BTS_ListenForNearbyFriendly_C_CheckTargetDistance");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000014, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast) == 0x000018, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_MultiplyMultiply_FloatFloat_Base_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetDistance, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetDistance::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.CheckTargetTeam
// 0x0018 (0x0018 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_CheckTargetTeam final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTeams_IsOnSameTeam;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_CheckTargetTeam) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_CheckTargetTeam");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_CheckTargetTeam) == 0x000018, "Wrong size on BTS_ListenForNearbyFriendly_C_CheckTargetTeam");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetTeam, Return) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetTeam::Return' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetTeam, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetTeam::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_CheckTargetTeam, CallFunc_CheckTeams_IsOnSameTeam) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_CheckTargetTeam::CallFunc_CheckTeams_IsOnSameTeam' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ExecuteUbergraph_BTS_ListenForNearbyFriendly
// 0x0088 (0x0088 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTargetAliveState_Return;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_CheckForTargets_OutHits;                  // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_CheckForTargets_TargetsFound;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     CallFunc_FilterTargets_OutHits;                    // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_FilterTargets_ArrayValid;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_SelectTarget_OutActor;                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly) == 0x000088, "Wrong size on BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, EntryPoint) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_CheckTargetAliveState_Return) == 0x000004, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_CheckTargetAliveState_Return' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, K2Node_Event_OwnerController_1) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, K2Node_Event_ControlledPawn_1) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, K2Node_Event_OwnerController) == 0x000020, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, K2Node_Event_ControlledPawn) == 0x000028, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000038, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_CheckForTargets_OutHits) == 0x000048, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_CheckForTargets_OutHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_CheckForTargets_TargetsFound) == 0x000058, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_CheckForTargets_TargetsFound' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_FilterTargets_OutHits) == 0x000060, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_FilterTargets_OutHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_FilterTargets_ArrayValid) == 0x000070, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_FilterTargets_ArrayValid' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_SelectTarget_OutActor) == 0x000078, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_SelectTarget_OutActor' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly, CallFunc_IsValid_ReturnValue_3) == 0x000080, "Member 'BTS_ListenForNearbyFriendly_C_ExecuteUbergraph_BTS_ListenForNearbyFriendly::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.FilterTargets
// 0x0238 (0x0238 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_FilterTargets final
{
public:
	TArray<struct FHitResult>                     InHits;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	TArray<struct FHitResult>                     OutHits;                                           // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	bool                                          ArrayValid;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     LocalArray;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0208(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTeams_IsOnSameTeam;                  // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0236(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_FilterTargets) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_FilterTargets");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_FilterTargets) == 0x000238, "Wrong size on BTS_ListenForNearbyFriendly_C_FilterTargets");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, InHits) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::InHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, OutHits) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::OutHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, ArrayValid) == 0x000020, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::ArrayValid' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, LocalArray) == 0x000028, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::LocalArray' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, Temp_int_Array_Index_Variable) == 0x000038, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Array_Get_Item) == 0x000040, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_bBlockingHit) == 0x000128, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_bInitialOverlap) == 0x000129, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_Time) == 0x00012C, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_Distance) == 0x000130, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_Location) == 0x000138, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_ImpactPoint) == 0x000150, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_Normal) == 0x000168, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_ImpactNormal) == 0x000180, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_PhysMat) == 0x000198, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_HitActor) == 0x0001A0, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_HitComponent) == 0x0001A8, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_HitBoneName) == 0x0001B0, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_BoneName) == 0x0001B8, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_HitItem) == 0x0001C0, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_ElementIndex) == 0x0001C4, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_FaceIndex) == 0x0001C8, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_TraceStart) == 0x0001D0, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BreakHitResult_TraceEnd) == 0x0001E8, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, Temp_int_Loop_Counter_Variable) == 0x000200, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000204, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000208, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Less_IntInt_ReturnValue) == 0x000210, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Add_IntInt_ReturnValue) == 0x000214, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000218, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000228, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Array_Length_ReturnValue_1) == 0x00022C, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Array_Add_ReturnValue) == 0x000230, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_Greater_IntInt_ReturnValue) == 0x000234, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_CheckTeams_IsOnSameTeam) == 0x000235, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_CheckTeams_IsOnSameTeam' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_FilterTargets, CallFunc_BooleanAND_ReturnValue) == 0x000236, "Member 'BTS_ListenForNearbyFriendly_C_FilterTargets::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ReceiveActivationAI
// 0x0010 (0x0010 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_ReceiveActivationAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_ReceiveActivationAI) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_ReceiveActivationAI");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_ReceiveActivationAI) == 0x000010, "Wrong size on BTS_ListenForNearbyFriendly_C_ReceiveActivationAI");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ReceiveActivationAI, OwnerController) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_ReceiveActivationAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ReceiveActivationAI, ControlledPawn_0) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_ReceiveActivationAI::ControlledPawn_0' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn_0;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_ReceiveTickAI");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_ListenForNearbyFriendly_C_ReceiveTickAI");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ReceiveTickAI, ControlledPawn_0) == 0x000008, "Member 'BTS_ListenForNearbyFriendly_C_ReceiveTickAI::ControlledPawn_0' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C.SelectTarget
// 0x0268 (0x0268 - 0x0000)
struct BTS_ListenForNearbyFriendly_C_SelectTarget final
{
public:
	TArray<struct FHitResult>                     InHits;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class AActor*                                 OutActor;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HighestHealth;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LocalHitActor;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LocalTarget;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        ClosestDistance;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0048(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0218(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute; // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue; // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1; // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1; // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x023B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_B_ImplicitCast;                // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_A_ImplicitCast;                // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ClosestDistance_ImplicitCast;   // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_ListenForNearbyFriendly_C_SelectTarget) == 0x000008, "Wrong alignment on BTS_ListenForNearbyFriendly_C_SelectTarget");
static_assert(sizeof(BTS_ListenForNearbyFriendly_C_SelectTarget) == 0x000268, "Wrong size on BTS_ListenForNearbyFriendly_C_SelectTarget");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, InHits) == 0x000000, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::InHits' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, OutActor) == 0x000010, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::OutActor' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, HighestHealth) == 0x000018, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::HighestHealth' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, LocalHitActor) == 0x000020, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::LocalHitActor' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, LocalTarget) == 0x000028, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::LocalTarget' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, ClosestDistance) == 0x000030, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::ClosestDistance' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Array_Get_Item) == 0x000048, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x000130, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x000131, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_Time) == 0x000134, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_Distance) == 0x000138, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_Location) == 0x000140, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x000158, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_Normal) == 0x000170, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x000188, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_PhysMat) == 0x0001A0, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_HitActor) == 0x0001A8, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_HitComponent) == 0x0001B0, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_HitBoneName) == 0x0001B8, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_BoneName) == 0x0001C0, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_HitItem) == 0x0001C8, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_ElementIndex) == 0x0001CC, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_FaceIndex) == 0x0001D0, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_TraceStart) == 0x0001D8, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BreakHitResult_TraceEnd) == 0x0001F0, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Less_IntInt_ReturnValue) == 0x000208, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Add_IntInt_ReturnValue) == 0x00020C, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000210, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000211, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000218, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute) == 0x000220, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue) == 0x000224, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1) == 0x000228, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_GetFloatAttributeFromAbilitySystemComponent_bSuccessfullyFoundAttribute_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1) == 0x00022C, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_GetFloatAttributeFromAbilitySystemComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_SafeDivide_ReturnValue) == 0x000230, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000238, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BooleanOR_ReturnValue) == 0x000239, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BooleanAND_ReturnValue) == 0x00023A, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_IsValid_ReturnValue) == 0x00023B, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x00023C, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue) == 0x000240, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_GetSquaredHorizontalDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000244, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_BooleanOR_ReturnValue_1) == 0x000245, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_SafeDivide_B_ImplicitCast) == 0x000248, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_SafeDivide_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_SafeDivide_A_ImplicitCast) == 0x000250, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_SafeDivide_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, K2Node_VariableSet_ClosestDistance_ImplicitCast) == 0x000258, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::K2Node_VariableSet_ClosestDistance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_ListenForNearbyFriendly_C_SelectTarget, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000260, "Member 'BTS_ListenForNearbyFriendly_C_SelectTarget::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

}

