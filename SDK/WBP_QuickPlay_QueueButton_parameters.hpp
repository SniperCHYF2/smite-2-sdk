#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_QuickPlay_QueueButton

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature) == 0x000001, "Wrong size on WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature, IsGamepad) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature::IsGamepad' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.CheckItemOwnershipRequirement
// 0x0030 (0x0030 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement final
{
public:
	TDelegate<void(const class FString& QueueId, const bool bItemOwned)> K2Node_CreateDelegate_OutputDelegate; // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWQueueDataFactory*                    CallFunc_GetQueueDataFactory_QueueDataFactory;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetQueueId_ReturnValue;                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_AssessQueueItemOwnershipRequirement_ReturnValue; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement) == 0x000030, "Wrong size on WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement, CallFunc_GetQueueDataFactory_QueueDataFactory) == 0x000010, "Member 'WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement::CallFunc_GetQueueDataFactory_QueueDataFactory' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement, CallFunc_GetQueueId_ReturnValue) == 0x000018, "Member 'WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement::CallFunc_GetQueueId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement, CallFunc_AssessQueueItemOwnershipRequirement_ReturnValue) == 0x000028, "Member 'WBP_QuickPlay_QueueButton_C_CheckItemOwnershipRequirement::CallFunc_AssessQueueItemOwnershipRequirement_ReturnValue' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.ExecuteUbergraph_WBP_QuickPlay_QueueButton
// 0x0018 (0x0018 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_IsGamepad;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsActive;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetQueueId_ReturnValue;                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton) == 0x000018, "Wrong size on WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton, EntryPoint) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton, K2Node_ComponentBoundEvent_IsGamepad) == 0x000004, "Member 'WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton::K2Node_ComponentBoundEvent_IsGamepad' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton, K2Node_CustomEvent_bIsActive) == 0x000005, "Member 'WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton::K2Node_CustomEvent_bIsActive' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton, K2Node_Event_IsDesignTime) == 0x000006, "Member 'WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton, CallFunc_GetQueueId_ReturnValue) == 0x000008, "Member 'WBP_QuickPlay_QueueButton_C_ExecuteUbergraph_WBP_QuickPlay_QueueButton::CallFunc_GetQueueId_ReturnValue' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.GetQueueDataFactory
// 0x0028 (0x0028 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_GetQueueDataFactory final
{
public:
	class UHWQueueDataFactory*                    QueueDataFactory;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARHHUDCommon*                           CallFunc_GetHUDCommon_HUD_Common;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URHQueueDataFactory*                    CallFunc_GetQueueDataFactory_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWQueueDataFactory*                    K2Node_DynamicCast_AsHWQueue_Data_Factory;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_GetQueueDataFactory");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory) == 0x000028, "Wrong size on WBP_QuickPlay_QueueButton_C_GetQueueDataFactory");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory, QueueDataFactory) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_GetQueueDataFactory::QueueDataFactory' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory, CallFunc_GetHUDCommon_HUD_Common) == 0x000008, "Member 'WBP_QuickPlay_QueueButton_C_GetQueueDataFactory::CallFunc_GetHUDCommon_HUD_Common' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory, CallFunc_GetQueueDataFactory_ReturnValue) == 0x000010, "Member 'WBP_QuickPlay_QueueButton_C_GetQueueDataFactory::CallFunc_GetQueueDataFactory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory, K2Node_DynamicCast_AsHWQueue_Data_Factory) == 0x000018, "Member 'WBP_QuickPlay_QueueButton_C_GetQueueDataFactory::K2Node_DynamicCast_AsHWQueue_Data_Factory' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_GetQueueDataFactory, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_QuickPlay_QueueButton_C_GetQueueDataFactory::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_IsDisabled final
{
public:
	bool                                          bDisabled_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_IsDisabled) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_IsDisabled");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_IsDisabled) == 0x000001, "Wrong size on WBP_QuickPlay_QueueButton_C_IsDisabled");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_IsDisabled, bDisabled_0) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_IsDisabled::bDisabled_0' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.ItemOwnershipCheckCompleted
// 0x0018 (0x0018 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bItemOwned;                                        // 0x0010(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted) == 0x000018, "Wrong size on WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, QueueId) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::QueueId' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, bItemOwned) == 0x000010, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::bItemOwned' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, Temp_bool_Variable) == 0x000011, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, Temp_byte_Variable) == 0x000012, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, Temp_byte_Variable_1) == 0x000013, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted, K2Node_Select_Default) == 0x000014, "Member 'WBP_QuickPlay_QueueButton_C_ItemOwnershipCheckCompleted::K2Node_Select_Default' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.NavigateConfirm
// 0x0001 (0x0001 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_NavigateConfirm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_NavigateConfirm) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_NavigateConfirm");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_NavigateConfirm) == 0x000001, "Wrong size on WBP_QuickPlay_QueueButton_C_NavigateConfirm");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_NavigateConfirm, ReturnValue) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_NavigateConfirm::ReturnValue' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_PreConstruct");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_PreConstruct) == 0x000001, "Wrong size on WBP_QuickPlay_QueueButton_C_PreConstruct");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.SetButtonActive
// 0x0001 (0x0001 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_SetButtonActive final
{
public:
	bool                                          bIsActive_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_SetButtonActive) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_SetButtonActive");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_SetButtonActive) == 0x000001, "Wrong size on WBP_QuickPlay_QueueButton_C_SetButtonActive");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetButtonActive, bIsActive_0) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_SetButtonActive::bIsActive_0' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.SetDisabled
// 0x0005 (0x0005 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_SetDisabled final
{
public:
	bool                                          bDisabled_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_SetDisabled) == 0x000001, "Wrong alignment on WBP_QuickPlay_QueueButton_C_SetDisabled");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_SetDisabled) == 0x000005, "Wrong size on WBP_QuickPlay_QueueButton_C_SetDisabled");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetDisabled, bDisabled_0) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_SetDisabled::bDisabled_0' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetDisabled, Temp_bool_Variable) == 0x000001, "Member 'WBP_QuickPlay_QueueButton_C_SetDisabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetDisabled, Temp_byte_Variable) == 0x000002, "Member 'WBP_QuickPlay_QueueButton_C_SetDisabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetDisabled, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_QuickPlay_QueueButton_C_SetDisabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetDisabled, K2Node_Select_Default) == 0x000004, "Member 'WBP_QuickPlay_QueueButton_C_SetDisabled::K2Node_Select_Default' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.SetQueueInfo
// 0x02E8 (0x02E8 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_SetQueueInfo final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0040(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0058(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0070(0x0018)()
	ERHQueueType                                  Temp_byte_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue_1;             // 0x00B8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_C_QueueSelect_TagDescription_C*    K2Node_DynamicCast_AsWBP_C_Queue_Select_Tag_Description; // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWQueueDataFactory*                    CallFunc_GetQueueDataFactory_QueueDataFactory;     // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRHQueueDetails                        CallFunc_GetQueueDetailsByQueue_QueueDetails;      // 0x00F0(0x0198)()
	bool                                          CallFunc_GetQueueDetailsByQueue_ReturnValue;       // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetQueueId_ReturnValue;                   // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x02B0(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x02D0(0x0018)()
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_SetQueueInfo) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_SetQueueInfo");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_SetQueueInfo) == 0x0002E8, "Wrong size on WBP_QuickPlay_QueueButton_C_SetQueueInfo");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_text_Variable) == 0x000010, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_text_Variable_1) == 0x000028, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_text_Variable_2) == 0x000040, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_text_Variable_3) == 0x000058, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_text_Variable_4) == 0x000070, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_byte_Variable) == 0x000088, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, Temp_int_Loop_Counter_Variable_1) == 0x00008C, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetAllChildren_ReturnValue) == 0x000090, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetAllChildren_ReturnValue_1) == 0x0000B8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetAllChildren_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Array_Length_ReturnValue_1) == 0x0000D0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, K2Node_DynamicCast_AsWBP_C_Queue_Select_Tag_Description) == 0x0000D8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::K2Node_DynamicCast_AsWBP_C_Queue_Select_Tag_Description' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E1, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetQueueDataFactory_QueueDataFactory) == 0x0000E8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetQueueDataFactory_QueueDataFactory' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetQueueDetailsByQueue_QueueDetails) == 0x0000F0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetQueueDetailsByQueue_QueueDetails' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetQueueDetailsByQueue_ReturnValue) == 0x000288, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetQueueDetailsByQueue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_GetQueueId_ReturnValue) == 0x000290, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_GetQueueId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Concat_StrStr_ReturnValue) == 0x0002A0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x0002B0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0002C8, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetQueueInfo, K2Node_Select_Default) == 0x0002D0, "Member 'WBP_QuickPlay_QueueButton_C_SetQueueInfo::K2Node_Select_Default' has a wrong offset!");

// Function WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C.SetUpTagWidgets
// 0x0038 (0x0038 - 0x0000)
struct WBP_QuickPlay_QueueButton_C_SetUpTagWidgets final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_C_QueueSelect_TagDescription_C*    CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets) == 0x000008, "Wrong alignment on WBP_QuickPlay_QueueButton_C_SetUpTagWidgets");
static_assert(sizeof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets) == 0x000038, "Wrong size on WBP_QuickPlay_QueueButton_C_SetUpTagWidgets");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, Temp_int_Variable) == 0x000000, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, CallFunc_Create_ReturnValue) == 0x000018, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, K2Node_MakeStruct_Margin) == 0x000020, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_QuickPlay_QueueButton_C_SetUpTagWidgets, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000030, "Member 'WBP_QuickPlay_QueueButton_C_SetUpTagWidgets::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

}

