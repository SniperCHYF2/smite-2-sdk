#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_JoustGameState

#include "Basic.hpp"

#include "BP_ConquestGameState_classes.hpp"
#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_JoustGameState.BP_JoustGameState_C
// 0x0198 (0x0AA8 - 0x0910)
class ABP_JoustGameState_C final : public ABP_ConquestGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_JoustGameState_C;                // 0x0910(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         CurrentRound;                                      // 0x0918(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RoundTime;                                         // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RoundCooldownTime;                                 // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RoundInitialStartDelay;                            // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 RoundNum)> OnJoustRoundStarted;                              // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<double>                                RoundChampionRewards;                              // 0x0948(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasChampionBeenCrowned;                            // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RoundTimer;                                        // 0x0960(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRoundInProgress;                                 // 0x0968(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_969[0x7];                                      // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnJoustRoundEnded;                                 // 0x0970(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AHWCharacter_Base*                      RoundChampion;                                     // 0x0980(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class AHWCharacter_Base* NewChampion)> OnJoustChampion;            // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnableDamageTracking;                              // 0x0998(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetDamageOnNewRound;                             // 0x0999(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99A[0x6];                                      // 0x099A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OrderDamage;                                       // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChaosDamage;                                       // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TopDamageBroadcastTimer;                           // 0x09B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        OrderDamagePercent;                                // 0x09B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 RoundWinEffect;                                    // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RoundWinRewardMagnitude;                           // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(EHWSmiteTeamId Team)> OnJoustTeamReachedGoal;                      // 0x09D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CapDamageScore;                                    // 0x09E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x7];                                      // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamageGoal;                                        // 0x09E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrantRewardForReachingGoal;                        // 0x09F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            TopDamageEffect;                                   // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FRandomStream                          RNG;                                               // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	int32                                         RNGSeed;                                           // 0x0A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A0C[0x4];                                      // 0x0A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BattleStandard_Pickup_C*>    BattleStandards;                                   // 0x0A10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(EHWSmiteTeamId Team, class AActor* TargetActor)> OnJoustTeamFiredBallista; // 0x0A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        BallistaEffectDuration;                            // 0x0A30(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BallistaMaxHealthDamage;                           // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            BallistaDamageEffect;                              // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            BallistaStunEffect;                                // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Is_Duel;                                           // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A51[0x7];                                      // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            BallistaTitanDebuffEffect;                         // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BallistaTimeToHit;                                 // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A64[0x4];                                      // 0x0A64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWAbilitySystemComponent*>      CachedBallistaTargetASCs;                          // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class AActor*>                         CachedBallistaDamageInstigators;                   // 0x0A78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TSubclassOf<class UGameplayEffect>            DuelMapBossModifier;                               // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            DuelTitanModifier;                                 // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            DuelOnPlayerKillBuff;                              // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 DuelMinionModifier;                                // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyDuelMapBossModifier(class AHWBotFactory* BotFactory);
	void ApplyDuelMinionModifier(class AHWBotFactory* BotFactory);
	void ApplyDuelTitanModifier(class AHWBotFactory* BotFactory);
	void AwardTeam(uint8 Team);
	void AwardTopDamageTeam();
	void BallistaHitClosestLaneObjective(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator);
	void BallistaHitObjective(class UHWAbilitySystemComponent* TargetASC, class AActor* DamageInstigator);
	void BallistaMarkClosestLaneObjective(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator);
	void BindBattleStandardEvents();
	void BindDamageEvents(bool Unbind);
	void BindGodKillEvents(bool Unbind);
	void BroadcastTrackedDamage();
	void EndRound();
	void ExecuteUbergraph_BP_JoustGameState(int32 EntryPoint);
	void FireBallista(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator, class UHWAbilitySystemComponent* TargetASC);
	void FireBallistaAtClosestLaneObjective(class AActor* DamageInstigator);
	void GetClosestEnemyLaneObjective(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator, class AActor** TargetActor, class UHWAbilitySystemComponent** TargetASC);
	void GetDamagePercent(EHWSmiteTeamId Team, double* DamagePercent);
	void GetDamagePercentOfGoal(EHWSmiteTeamId Team, double* DamagePercent);
	void GetJoustCurrentRoundReward(double* Reward);
	void GetTeamWithHighestDamage(EHWSmiteTeamId* NewParam);
	void HandleGodKill(class AHWCharacter_Base* Killer);
	void IncreaseTeamDamageScore(EHWSmiteTeamId Team, double Points);
	void InitGameStateVariables(class UClass* BallistaDamageEffect_0, class UClass* BallistaStunEffect_0, double BallistaStunDuration, double BallistaMaxHealthDamage_0, bool IsDuel);
	void Multicast_BroadcastTeamDamageTotals(double OrderDamage_0, double ChaosDamage_0);
	void Multicast_BroadcastTeamFiredBallista(EHWSmiteTeamId Team, class AActor* TargetActor);
	void Multicast_BroadcastTeamReachedDamageGoal(EHWSmiteTeamId NewParam);
	void OnBallistaTargetingComplete(class UHWAbilitySystemComponent* TargetASC, EHWSmiteTeamId InstigatorTeam, class AActor* DamageInstigator, EHWSmiteTeamId BallistaTeam);
	void OnBallistaTimeToHitTimerFinished();
	void OnBattleStandardExpired(EHWSmiteTeamId Team);
	void OnBattleStandardPickedUp(EHWSmiteTeamId Team, class AActor* InstigatorActor);
	void OnDealtDamage(const struct FDamageEventData& DamageEventData);
	void OnDuelMapBossSpawned(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot);
	void OnDuelMinionSpawned(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot);
	void OnDuelTitanSpawned(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot);
	void OnGodScoredKill(class AHWPlayerState* PlayerState, int32 OldStat, int32 NewStat);
	void OnGoldFuryDied(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot, class AActor* Killer);
	void OnKillCommitted(const struct FDamageEventData& KillEventData);
	void OnMapBossKilled(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot, class AActor* Killer);
	void OnMatchPhaseStarted(const struct FGameplayTag& NewPhase);
	void OnRep_CurrentRound();
	void OnRep_IsRoundInProgress();
	void OnRep_RoundChampion();
	void ReceiveBeginPlay();
	void ResetRounds();
	void ResetTeamDamageScore(EHWSmiteTeamId Team);
	void RevokeTopDamageBuff(EHWSmiteTeamId Team);
	void Setup_Duel_Game_Modifiers();
	void SpawnBattleStandard(EHWSmiteTeamId Team);
	void StartBroadcastDamageTimer();
	void StartNewRound();
	void StartRoundCooldown();
	void StartTargetingBallista(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator);
	void StartTrackingDamage();
	void StopTrackingDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_JoustGameState_C">();
	}
	static class ABP_JoustGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_JoustGameState_C>();
	}
};
static_assert(alignof(ABP_JoustGameState_C) == 0x000008, "Wrong alignment on ABP_JoustGameState_C");
static_assert(sizeof(ABP_JoustGameState_C) == 0x000AA8, "Wrong size on ABP_JoustGameState_C");
static_assert(offsetof(ABP_JoustGameState_C, UberGraphFrame_BP_JoustGameState_C) == 0x000910, "Member 'ABP_JoustGameState_C::UberGraphFrame_BP_JoustGameState_C' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, CurrentRound) == 0x000918, "Member 'ABP_JoustGameState_C::CurrentRound' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundTime) == 0x000920, "Member 'ABP_JoustGameState_C::RoundTime' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundCooldownTime) == 0x000928, "Member 'ABP_JoustGameState_C::RoundCooldownTime' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundInitialStartDelay) == 0x000930, "Member 'ABP_JoustGameState_C::RoundInitialStartDelay' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OnJoustRoundStarted) == 0x000938, "Member 'ABP_JoustGameState_C::OnJoustRoundStarted' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundChampionRewards) == 0x000948, "Member 'ABP_JoustGameState_C::RoundChampionRewards' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, HasChampionBeenCrowned) == 0x000958, "Member 'ABP_JoustGameState_C::HasChampionBeenCrowned' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundTimer) == 0x000960, "Member 'ABP_JoustGameState_C::RoundTimer' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, IsRoundInProgress) == 0x000968, "Member 'ABP_JoustGameState_C::IsRoundInProgress' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OnJoustRoundEnded) == 0x000970, "Member 'ABP_JoustGameState_C::OnJoustRoundEnded' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundChampion) == 0x000980, "Member 'ABP_JoustGameState_C::RoundChampion' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OnJoustChampion) == 0x000988, "Member 'ABP_JoustGameState_C::OnJoustChampion' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, EnableDamageTracking) == 0x000998, "Member 'ABP_JoustGameState_C::EnableDamageTracking' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, ResetDamageOnNewRound) == 0x000999, "Member 'ABP_JoustGameState_C::ResetDamageOnNewRound' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OrderDamage) == 0x0009A0, "Member 'ABP_JoustGameState_C::OrderDamage' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, ChaosDamage) == 0x0009A8, "Member 'ABP_JoustGameState_C::ChaosDamage' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, TopDamageBroadcastTimer) == 0x0009B0, "Member 'ABP_JoustGameState_C::TopDamageBroadcastTimer' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OrderDamagePercent) == 0x0009B8, "Member 'ABP_JoustGameState_C::OrderDamagePercent' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundWinEffect) == 0x0009C0, "Member 'ABP_JoustGameState_C::RoundWinEffect' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RoundWinRewardMagnitude) == 0x0009C8, "Member 'ABP_JoustGameState_C::RoundWinRewardMagnitude' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OnJoustTeamReachedGoal) == 0x0009D0, "Member 'ABP_JoustGameState_C::OnJoustTeamReachedGoal' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, CapDamageScore) == 0x0009E0, "Member 'ABP_JoustGameState_C::CapDamageScore' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, DamageGoal) == 0x0009E8, "Member 'ABP_JoustGameState_C::DamageGoal' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, GrantRewardForReachingGoal) == 0x0009F0, "Member 'ABP_JoustGameState_C::GrantRewardForReachingGoal' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, TopDamageEffect) == 0x0009F8, "Member 'ABP_JoustGameState_C::TopDamageEffect' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RNG) == 0x000A00, "Member 'ABP_JoustGameState_C::RNG' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, RNGSeed) == 0x000A08, "Member 'ABP_JoustGameState_C::RNGSeed' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BattleStandards) == 0x000A10, "Member 'ABP_JoustGameState_C::BattleStandards' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, OnJoustTeamFiredBallista) == 0x000A20, "Member 'ABP_JoustGameState_C::OnJoustTeamFiredBallista' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaEffectDuration) == 0x000A30, "Member 'ABP_JoustGameState_C::BallistaEffectDuration' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaMaxHealthDamage) == 0x000A38, "Member 'ABP_JoustGameState_C::BallistaMaxHealthDamage' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaDamageEffect) == 0x000A40, "Member 'ABP_JoustGameState_C::BallistaDamageEffect' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaStunEffect) == 0x000A48, "Member 'ABP_JoustGameState_C::BallistaStunEffect' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, Is_Duel) == 0x000A50, "Member 'ABP_JoustGameState_C::Is_Duel' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaTitanDebuffEffect) == 0x000A58, "Member 'ABP_JoustGameState_C::BallistaTitanDebuffEffect' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, BallistaTimeToHit) == 0x000A60, "Member 'ABP_JoustGameState_C::BallistaTimeToHit' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, CachedBallistaTargetASCs) == 0x000A68, "Member 'ABP_JoustGameState_C::CachedBallistaTargetASCs' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, CachedBallistaDamageInstigators) == 0x000A78, "Member 'ABP_JoustGameState_C::CachedBallistaDamageInstigators' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, DuelMapBossModifier) == 0x000A88, "Member 'ABP_JoustGameState_C::DuelMapBossModifier' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, DuelTitanModifier) == 0x000A90, "Member 'ABP_JoustGameState_C::DuelTitanModifier' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, DuelOnPlayerKillBuff) == 0x000A98, "Member 'ABP_JoustGameState_C::DuelOnPlayerKillBuff' has a wrong offset!");
static_assert(offsetof(ABP_JoustGameState_C, DuelMinionModifier) == 0x000AA0, "Member 'ABP_JoustGameState_C::DuelMinionModifier' has a wrong offset!");

}

