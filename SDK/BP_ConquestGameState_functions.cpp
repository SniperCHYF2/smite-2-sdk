#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConquestGameState

#include "Basic.hpp"

#include "BP_ConquestGameState_classes.hpp"
#include "BP_ConquestGameState_parameters.hpp"


namespace SDK
{

// Function BP_ConquestGameState.BP_ConquestGameState_C.CheckRenownLevelUp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_TribeRenown>&          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EJungleTribes                           TribeToFind                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   KillingTeamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  IncomingRenown                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::CheckRenownLevelUp(TArray<struct FS_TribeRenown>& Array, EJungleTribes TribeToFind, int32 KillingTeamID, double IncomingRenown, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "CheckRenownLevelUp");

	Params::BP_ConquestGameState_C_CheckRenownLevelUp Parms{};

	Parms.Array = std::move(Array);
	Parms.TribeToFind = TribeToFind;
	Parms.KillingTeamID = KillingTeamID;
	Parms.IncomingRenown = IncomingRenown;

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.CheckTeamArrayForTribe
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FS_TribeRenown>&    TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_TribeRenown>*          RenownArray                                            (ConstParm, Parm, OutParm)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::CheckTeamArrayForTribe(const TArray<struct FS_TribeRenown>& TargetArray, EJungleTribes Tribe, TArray<struct FS_TribeRenown>* RenownArray, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "CheckTeamArrayForTribe");

	Params::BP_ConquestGameState_C_CheckTeamArrayForTribe Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.Tribe = Tribe;

	UObject::ProcessEvent(Func, &Parms);

	if (RenownArray != nullptr)
		*RenownArray = std::move(Parms.RenownArray);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.DoesArrayHaveTribe
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_TribeRenown>&          RenownArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EJungleTribes                           TribeToCheck                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   ArrayHasTribe                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::DoesArrayHaveTribe(TArray<struct FS_TribeRenown>& RenownArray, EJungleTribes TribeToCheck, bool* ArrayHasTribe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "DoesArrayHaveTribe");

	Params::BP_ConquestGameState_C_DoesArrayHaveTribe Parms{};

	Parms.RenownArray = std::move(RenownArray);
	Parms.TribeToCheck = TribeToCheck;

	UObject::ProcessEvent(Func, &Parms);

	RenownArray = std::move(Parms.RenownArray);

	if (ArrayHasTribe != nullptr)
		*ArrayHasTribe = Parms.ArrayHasTribe;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.ExecuteUbergraph_BP_ConquestGameState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::ExecuteUbergraph_BP_ConquestGameState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "ExecuteUbergraph_BP_ConquestGameState");

	Params::BP_ConquestGameState_C_ExecuteUbergraph_BP_ConquestGameState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.FindTribeIndexInArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_TribeRenown>&          TribeArray                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EJungleTribes                           TribeToFind                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ArrayIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::FindTribeIndexInArray(TArray<struct FS_TribeRenown>& TribeArray, EJungleTribes TribeToFind, int32* ArrayIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "FindTribeIndexInArray");

	Params::BP_ConquestGameState_C_FindTribeIndexInArray Parms{};

	Parms.TribeArray = std::move(TribeArray);
	Parms.TribeToFind = TribeToFind;

	UObject::ProcessEvent(Func, &Parms);

	TribeArray = std::move(Parms.TribeArray);

	if (ArrayIndex != nullptr)
		*ArrayIndex = Parms.ArrayIndex;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.GeneratePlayerStateList
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AHWPlayerState*>*          PlayerStates                                           (Parm, OutParm)

void ABP_ConquestGameState_C::GeneratePlayerStateList(TArray<class AHWPlayerState*>* PlayerStates)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "GeneratePlayerStateList");

	Params::BP_ConquestGameState_C_GeneratePlayerStateList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerStates != nullptr)
		*PlayerStates = std::move(Parms.PlayerStates);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.GetMedianGodLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 MedianLevel                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::GetMedianGodLevel(double* MedianLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "GetMedianGodLevel");

	Params::BP_ConquestGameState_C_GetMedianGodLevel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MedianLevel != nullptr)
		*MedianLevel = Parms.MedianLevel;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.GetTeamInfamy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_TribeRenown*                  Infamy                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::GetTeamInfamy(int32 TeamId, EJungleTribes Tribe, struct FS_TribeRenown* Infamy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "GetTeamInfamy");

	Params::BP_ConquestGameState_C_GetTeamInfamy Parms{};

	Parms.TeamId = TeamId;
	Parms.Tribe = Tribe;

	UObject::ProcessEvent(Func, &Parms);

	if (Infamy != nullptr)
		*Infamy = std::move(Parms.Infamy);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.GetTeamRenown
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_TribeRenown*                  Renown                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::GetTeamRenown(int32 TeamId, EJungleTribes Tribe, struct FS_TribeRenown* Renown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "GetTeamRenown");

	Params::BP_ConquestGameState_C_GetTeamRenown Parms{};

	Parms.TeamId = TeamId;
	Parms.Tribe = Tribe;

	UObject::ProcessEvent(Func, &Parms);

	if (Renown != nullptr)
		*Renown = std::move(Parms.Renown);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.IncreaseAllTeamRenownLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team_Id                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::IncreaseAllTeamRenownLevel(int32 Team_Id)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "IncreaseAllTeamRenownLevel");

	Params::BP_ConquestGameState_C_IncreaseAllTeamRenownLevel Parms{};

	Parms.Team_Id = Team_Id;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.IncreaseTeamRenownLevel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team_Id                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::IncreaseTeamRenownLevel(int32 Team_Id, EJungleTribes Tribe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "IncreaseTeamRenownLevel");

	Params::BP_ConquestGameState_C_IncreaseTeamRenownLevel Parms{};

	Parms.Team_Id = Team_Id;
	Parms.Tribe = Tribe;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.IncrementFireGiantKills
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ConquestGameState_C::IncrementFireGiantKills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "IncrementFireGiantKills");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.MulticastRenownLevelChanged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewLevel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagContainer&     Tags_0                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_ConquestGameState_C::MulticastRenownLevelChanged(EJungleTribes Tribe, int32 TeamId, int32 NewLevel, const struct FGameplayTagContainer& Tags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "MulticastRenownLevelChanged");

	Params::BP_ConquestGameState_C_MulticastRenownLevelChanged Parms{};

	Parms.Tribe = Tribe;
	Parms.TeamId = TeamId;
	Parms.NewLevel = NewLevel;
	Parms.Tags_0 = std::move(Tags_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.MulticastRenownUpdated
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CurrentRenown                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TribeLevel                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::MulticastRenownUpdated(int32 TeamId, EJungleTribes Tribe, double CurrentRenown, int32 TribeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "MulticastRenownUpdated");

	Params::BP_ConquestGameState_C_MulticastRenownUpdated Parms{};

	Parms.TeamId = TeamId;
	Parms.Tribe = Tribe;
	Parms.CurrentRenown = CurrentRenown;
	Parms.TribeLevel = TribeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnGodLevelUp
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHWAbilitySystemComponent*        ASC                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::OnGodLevelUp(class UHWAbilitySystemComponent* ASC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnGodLevelUp");

	Params::BP_ConquestGameState_C_OnGodLevelUp Parms{};

	Parms.ASC = ASC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnPlayerRespawned
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHWCharacterAbilitySystemActor*   CharacterAbilitySystemActor                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::OnPlayerRespawned(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnPlayerRespawned");

	Params::BP_ConquestGameState_C_OnPlayerRespawned Parms{};

	Parms.CharacterAbilitySystemActor = CharacterAbilitySystemActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnRep_FireGiantKills
// (BlueprintCallable, BlueprintEvent)

void ABP_ConquestGameState_C::OnRep_FireGiantKills()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnRep_FireGiantKills");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnTeamMemberAdded
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHWPlayerState*                   NewMember                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::OnTeamMemberAdded(class AHWPlayerState* NewMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnTeamMemberAdded");

	Params::BP_ConquestGameState_C_OnTeamMemberAdded Parms{};

	Parms.NewMember = NewMember;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnTeamMemberRemoved
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHWPlayerState*                   OldMember                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::OnTeamMemberRemoved(class AHWPlayerState* OldMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnTeamMemberRemoved");

	Params::BP_ConquestGameState_C_OnTeamMemberRemoved Parms{};

	Parms.OldMember = OldMember;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.OnTeamMembersUpdated
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ConquestGameState_C::OnTeamMembersUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "OnTeamMembersUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ConquestGameState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.SetMedianGodLevel
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_ConquestGameState_C::SetMedianGodLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "SetMedianGodLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.SetupCharacterListeners
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ConquestGameState_C::SetupCharacterListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "SetupCharacterListeners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.SetupTeamListeners
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewPhase                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::SetupTeamListeners(const struct FGameplayTag& NewPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "SetupTeamListeners");

	Params::BP_ConquestGameState_C_SetupTeamListeners Parms{};

	Parms.NewPhase = std::move(NewPhase);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.UpdateFactoryLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EJungleTribes                           Tribe                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::UpdateFactoryLevel(EJungleTribes Tribe, int32 Level, int32 TeamId, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "UpdateFactoryLevel");

	Params::BP_ConquestGameState_C_UpdateFactoryLevel Parms{};

	Parms.Tribe = Tribe;
	Parms.Level = Level;
	Parms.TeamId = TeamId;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.UpdateRenownArray
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_TribeRenown>&          TribeRenownArray                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EJungleTribes                           TribeToUpdate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RenownAward                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   KillingTeamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 NewRenownAmount                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  NewTribeLevel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::UpdateRenownArray(TArray<struct FS_TribeRenown>& TribeRenownArray, EJungleTribes TribeToUpdate, double RenownAward, int32 KillingTeamID, double* NewRenownAmount, int32* NewTribeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "UpdateRenownArray");

	Params::BP_ConquestGameState_C_UpdateRenownArray Parms{};

	Parms.TribeRenownArray = std::move(TribeRenownArray);
	Parms.TribeToUpdate = TribeToUpdate;
	Parms.RenownAward = RenownAward;
	Parms.KillingTeamID = KillingTeamID;

	UObject::ProcessEvent(Func, &Parms);

	TribeRenownArray = std::move(Parms.TribeRenownArray);

	if (NewRenownAmount != nullptr)
		*NewRenownAmount = Parms.NewRenownAmount;

	if (NewTribeLevel != nullptr)
		*NewTribeLevel = Parms.NewTribeLevel;
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.UpdateTeamRenown
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KillingTeamID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RenownAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EJungleTribes                           TribeThatWasSlain                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::UpdateTeamRenown(int32 KillingTeamID, double RenownAmount, EJungleTribes TribeThatWasSlain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "UpdateTeamRenown");

	Params::BP_ConquestGameState_C_UpdateTeamRenown Parms{};

	Parms.KillingTeamID = KillingTeamID;
	Parms.RenownAmount = RenownAmount;
	Parms.TribeThatWasSlain = TribeThatWasSlain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConquestGameState.BP_ConquestGameState_C.CalculateMedianGodLevel
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class AHWPlayerState*>&          PlayerStates                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double*                                 MedianLevel                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConquestGameState_C::CalculateMedianGodLevel(TArray<class AHWPlayerState*>& PlayerStates, double* MedianLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConquestGameState_C", "CalculateMedianGodLevel");

	Params::BP_ConquestGameState_C_CalculateMedianGodLevel Parms{};

	Parms.PlayerStates = std::move(PlayerStates);

	UObject::ProcessEvent(Func, &Parms);

	PlayerStates = std::move(Parms.PlayerStates);

	if (MedianLevel != nullptr)
		*MedianLevel = Parms.MedianLevel;
}

}

