#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Items_SunBeamBow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Hemingway_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Items_SunBeamBow.GA_Items_SunBeamBow_C
// 0x0038 (0x0F10 - 0x0ED8)
class UGA_Items_SunBeamBow_C final : public UHWAbility_PassiveItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0ED8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        InHandDamagePercent;                               // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInhandProjectile_;                              // 0x0EE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE9[0x7];                                      // 0x0EE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InHandDamageFlatBonus;                             // 0x0EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectileScale;                                   // 0x0EF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbilityFiredCallbacks_Event(const struct FGameplayAbilitySpecHandle& AbilityHandle, const struct FGameplayTagContainer& AbilityTags_0, const struct FHWAbilityFiringInstanceId& FiringInstanceId);
	void ExecuteUbergraph_GA_Items_SunBeamBow(int32 EntryPoint);
	struct FRotator Get_Avatar_Actor_Rotation();
	const class UHWAbilityAttackSettings* GetInhandAttackSetting();
	struct FVector GetProjectileSpawnLocation(float RightVector);
	void OnAbilityPhaseChangeStarted(const EAbilityFlowPhase PrevPhase, const EAbilityFlowPhase NextPhase);
	void OnBeginSpawningDel_1CDDFC3F43F25BB7294768948553C27D(class AHWProjectile* SpawnedProjectile);
	void OnBeginSpawningDel_44E9CB3F47B9D7CBB1433FB622D524F9(class AHWProjectile* SpawnedProjectile);
	void OnSpawnedDel_1CDDFC3F43F25BB7294768948553C27D(class AHWProjectile* SpawnedProjectile);
	void OnSpawnedDel_44E9CB3F47B9D7CBB1433FB622D524F9(class AHWProjectile* SpawnedProjectile);
	void OverrideDamageDealt(const struct FGameplayTagContainer& EffectTags, const struct FDamageCalcInfo& DamageCalcInfo, const float DamageAmount, float* OutDamageAmount);
	void Refire(class UHWEquipmentComponent_Refireable* RefireComponent, const struct FHWAbilityRefireInfo& RefireInfo, const float ElapsedRefireTime);
	void SetupListeners();

	bool CanRefire(const class UHWEquipmentComponent_Refireable* RefireComponent, const struct FHWAbilityRefireInfo& RefireInfo, const class UHWAbilitySystemComponent* AbilitySystem, const struct FGameplayTagContainer& SourceTags, const struct FGameplayTagContainer& TargetTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Items_SunBeamBow_C">();
	}
	static class UGA_Items_SunBeamBow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Items_SunBeamBow_C>();
	}
};
static_assert(alignof(UGA_Items_SunBeamBow_C) == 0x000008, "Wrong alignment on UGA_Items_SunBeamBow_C");
static_assert(sizeof(UGA_Items_SunBeamBow_C) == 0x000F10, "Wrong size on UGA_Items_SunBeamBow_C");
static_assert(offsetof(UGA_Items_SunBeamBow_C, UberGraphFrame) == 0x000ED8, "Member 'UGA_Items_SunBeamBow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Items_SunBeamBow_C, InHandDamagePercent) == 0x000EE0, "Member 'UGA_Items_SunBeamBow_C::InHandDamagePercent' has a wrong offset!");
static_assert(offsetof(UGA_Items_SunBeamBow_C, bIsInhandProjectile_) == 0x000EE8, "Member 'UGA_Items_SunBeamBow_C::bIsInhandProjectile_' has a wrong offset!");
static_assert(offsetof(UGA_Items_SunBeamBow_C, InHandDamageFlatBonus) == 0x000EF0, "Member 'UGA_Items_SunBeamBow_C::InHandDamageFlatBonus' has a wrong offset!");
static_assert(offsetof(UGA_Items_SunBeamBow_C, ProjectileScale) == 0x000EF8, "Member 'UGA_Items_SunBeamBow_C::ProjectileScale' has a wrong offset!");

}

