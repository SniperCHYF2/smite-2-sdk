#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_Stage

#include "Basic.hpp"

#include "S_NPE_WaypointConfig_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "S_NPE_Trigger_Event_structs.hpp"
#include "Hemingway_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "S_NPE_Trigger_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_Stage.BP_NPE_Stage_C
// 0x01A8 (0x0440 - 0x0298)
class ABP_NPE_Stage_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HelpTipComponent_C*                 BP_HelpTipComponent;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NPE_Waypoint_C*>             ActiveWaypoints;                                   // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FGameplayTag                           StageTag;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ABP_NPE_Waypoint_C>> StaticWaypoints;                                // 0x02D8(0x0010)(Edit, BlueprintVisible)
	ECharacterRole                                PlayerRole;                                        // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool WasFailure, const struct FGameplayTag& NewTract, class ABP_NPE_Stage_C* Instigator, int32 StageDepth)> OnNPEStageEnded; // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InProgress;                                        // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_NPE_Waypoint_Objective_C*>   ActiveObjectiveWaypoints;                          // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_NPE_Trigger_C*>              SpawnedEndTriggers;                                // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_NPE_Trigger_C*>              SpawnedFailTriggers;                               // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<TSoftObjectPtr<class AActor>, struct FS_NPE_WaypointConfig> ObjectiveWaypoints;             // 0x0338(0x0050)(Edit, BlueprintVisible)
	bool                                          Was_Failure;                                       // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         EffectsToApplyDuringStage;                         // 0x0390(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_NPE_Trigger_C*>              SpawnedCustomTriggers;                             // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<struct FActiveGameplayEffectHandle>    ActiveStageEffects;                                // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(bool bShow, const struct FGameplayTagContainer& HUDElementTags)> OnNPEHUDEvent; // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FGameplayTag& CustomTag, TArray<struct FS_NPE_Trigger_Event>& Events)> OnNPECustomTrigger; // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           RestartDelayTimer;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Stage_Depth;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EndTickTimer;                                      // 0x03F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_NPE_Trigger>                 CustomTriggers;                                    // 0x03F8(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(const struct FGameplayTag& StageTag)> OnNPEStageStarted;           // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Clear_Previous_Directives;                         // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x3];                                      // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           New_AIDirective;                                   // 0x041C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_NPE_StageComponent_C*>       StageComponents;                                   // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          DisplayHelpTipAtStart;                             // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlomoTimeDilation;                                 // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AbortNPEStage();
	void ApplyStageEffects();
	void Callback();
	void CheckIsGod(class AActor* Actor, bool* IsGod);
	void CheckIsLocalPlayer(class AActor* Actor, bool* IsPlayer);
	void CheckTeams(int32 Team, bool* TeamsMatch);
	void CheckTeamsActor(class AActor* Actor, bool* TeamsMatch);
	void Cleanup();
	void DoCustomTriggerLogicForEvent(const struct FS_NPE_Trigger_Event& TriggerEvent);
	void EnableWaypoints();
	void EndNPEStage(bool WasFailure);
	void ExecuteUbergraph_BP_NPE_Stage(int32 EntryPoint);
	void LogDebug(const class FString& AppendString, bool IsError, bool SuppressThis);
	void OnCustomTrigger(const struct FGameplayTag& CustomTag, class ABP_NPE_Trigger_C* InstigatorTrigger, int32 ID);
	void ReceiveBeginPlay();
	void RemoveStageEffects();
	void RestartNPEStage(double Delay, int32 StageDepth);
	void SpawnAndBindTriggers();
	void StartNPEStage();
	void Test();
	void UnbindCustomTriggerEvents();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_Stage_C">();
	}
	static class ABP_NPE_Stage_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPE_Stage_C>();
	}
};
static_assert(alignof(ABP_NPE_Stage_C) == 0x000008, "Wrong alignment on ABP_NPE_Stage_C");
static_assert(sizeof(ABP_NPE_Stage_C) == 0x000440, "Wrong size on ABP_NPE_Stage_C");
static_assert(offsetof(ABP_NPE_Stage_C, UberGraphFrame) == 0x000298, "Member 'ABP_NPE_Stage_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, TextRender) == 0x0002A0, "Member 'ABP_NPE_Stage_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, Billboard) == 0x0002A8, "Member 'ABP_NPE_Stage_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, BP_HelpTipComponent) == 0x0002B0, "Member 'ABP_NPE_Stage_C::BP_HelpTipComponent' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, ActiveWaypoints) == 0x0002B8, "Member 'ABP_NPE_Stage_C::ActiveWaypoints' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, StageTag) == 0x0002C8, "Member 'ABP_NPE_Stage_C::StageTag' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, Debug) == 0x0002D0, "Member 'ABP_NPE_Stage_C::Debug' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, StaticWaypoints) == 0x0002D8, "Member 'ABP_NPE_Stage_C::StaticWaypoints' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, PlayerRole) == 0x0002E8, "Member 'ABP_NPE_Stage_C::PlayerRole' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, OnNPEStageEnded) == 0x0002F0, "Member 'ABP_NPE_Stage_C::OnNPEStageEnded' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, InProgress) == 0x000300, "Member 'ABP_NPE_Stage_C::InProgress' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, ActiveObjectiveWaypoints) == 0x000308, "Member 'ABP_NPE_Stage_C::ActiveObjectiveWaypoints' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, SpawnedEndTriggers) == 0x000318, "Member 'ABP_NPE_Stage_C::SpawnedEndTriggers' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, SpawnedFailTriggers) == 0x000328, "Member 'ABP_NPE_Stage_C::SpawnedFailTriggers' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, ObjectiveWaypoints) == 0x000338, "Member 'ABP_NPE_Stage_C::ObjectiveWaypoints' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, Was_Failure) == 0x000388, "Member 'ABP_NPE_Stage_C::Was_Failure' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, EffectsToApplyDuringStage) == 0x000390, "Member 'ABP_NPE_Stage_C::EffectsToApplyDuringStage' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, SpawnedCustomTriggers) == 0x0003A0, "Member 'ABP_NPE_Stage_C::SpawnedCustomTriggers' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, ActiveStageEffects) == 0x0003B0, "Member 'ABP_NPE_Stage_C::ActiveStageEffects' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, OnNPEHUDEvent) == 0x0003C0, "Member 'ABP_NPE_Stage_C::OnNPEHUDEvent' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, OnNPECustomTrigger) == 0x0003D0, "Member 'ABP_NPE_Stage_C::OnNPECustomTrigger' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, RestartDelayTimer) == 0x0003E0, "Member 'ABP_NPE_Stage_C::RestartDelayTimer' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, Stage_Depth) == 0x0003E8, "Member 'ABP_NPE_Stage_C::Stage_Depth' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, EndTickTimer) == 0x0003F0, "Member 'ABP_NPE_Stage_C::EndTickTimer' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, CustomTriggers) == 0x0003F8, "Member 'ABP_NPE_Stage_C::CustomTriggers' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, OnNPEStageStarted) == 0x000408, "Member 'ABP_NPE_Stage_C::OnNPEStageStarted' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, Clear_Previous_Directives) == 0x000418, "Member 'ABP_NPE_Stage_C::Clear_Previous_Directives' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, New_AIDirective) == 0x00041C, "Member 'ABP_NPE_Stage_C::New_AIDirective' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, StageComponents) == 0x000428, "Member 'ABP_NPE_Stage_C::StageComponents' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, DisplayHelpTipAtStart) == 0x000438, "Member 'ABP_NPE_Stage_C::DisplayHelpTipAtStart' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Stage_C, SlomoTimeDilation) == 0x00043C, "Member 'ABP_NPE_Stage_C::SlomoTimeDilation' has a wrong offset!");

}

