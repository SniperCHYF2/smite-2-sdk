#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Aladdin_ArenaManagerSingleton

#include "Basic.hpp"

#include "BP_Aladdin_ArenaManagerSingleton_classes.hpp"
#include "BP_Aladdin_ArenaManagerSingleton_parameters.hpp"


namespace SDK
{

// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.AddNewActorToBeTracked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToAdd                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ArenaLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   ReturnLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  LampRotation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FRotator&                  ReturnRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   SendLampPosition                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::AddNewActorToBeTracked(class AActor* ActorToAdd, const struct FVector& ArenaLocation, const struct FVector& ReturnLocation, const struct FRotator& LampRotation, const struct FRotator& ReturnRotation, const struct FVector& SendLampPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "AddNewActorToBeTracked");

	Params::BP_Aladdin_ArenaManagerSingleton_C_AddNewActorToBeTracked Parms{};

	Parms.ActorToAdd = ActorToAdd;
	Parms.ArenaLocation = std::move(ArenaLocation);
	Parms.ReturnLocation = std::move(ReturnLocation);
	Parms.LampRotation = std::move(LampRotation);
	Parms.ReturnRotation = std::move(ReturnRotation);
	Parms.SendLampPosition = std::move(SendLampPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.ApplyDebuffThatTracksRemainingFightTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::ApplyDebuffThatTracksRemainingFightTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "ApplyDebuffThatTracksRemainingFightTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.AreEitherFightersValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bBothValid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::AreEitherFightersValid(bool* bBothValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "AreEitherFightersValid");

	Params::BP_Aladdin_ArenaManagerSingleton_C_AreEitherFightersValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bBothValid != nullptr)
		*bBothValid = Parms.bBothValid;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.BindDeathEventOfActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::BindDeathEventOfActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "BindDeathEventOfActor");

	Params::BP_Aladdin_ArenaManagerSingleton_C_BindDeathEventOfActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.BndEvt__BP_Aladdin_ArenaManagerSingleton_BP_InteractableComponent_K2Node_ComponentBoundEvent_2_OnInteractionEventDel__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UHWInteractableComponent*         Interactable                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InteractInstigator                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::BndEvt__BP_Aladdin_ArenaManagerSingleton_BP_InteractableComponent_K2Node_ComponentBoundEvent_2_OnInteractionEventDel__DelegateSignature(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "BndEvt__BP_Aladdin_ArenaManagerSingleton_BP_InteractableComponent_K2Node_ComponentBoundEvent_2_OnInteractionEventDel__DelegateSignature");

	Params::BP_Aladdin_ArenaManagerSingleton_C_BndEvt__BP_Aladdin_ArenaManagerSingleton_BP_InteractableComponent_K2Node_ComponentBoundEvent_2_OnInteractionEventDel__DelegateSignature Parms{};

	Parms.Interactable = Interactable;
	Parms.InteractInstigator = InteractInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.CacheSendLampLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SendLampLocation_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::CacheSendLampLocation(const struct FVector& SendLampLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "CacheSendLampLocation");

	Params::BP_Aladdin_ArenaManagerSingleton_C_CacheSendLampLocation Parms{};

	Parms.SendLampLocation_0 = std::move(SendLampLocation_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.CleanupOldFightOnNewFightStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::CleanupOldFightOnNewFightStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "CleanupOldFightOnNewFightStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.DeathOccured
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DeathEventData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Aladdin_ArenaManagerSingleton_C::DeathOccured(const struct FDamageEventData& DeathEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "DeathOccured");

	Params::BP_Aladdin_ArenaManagerSingleton_C_DeathOccured Parms{};

	Parms.DeathEventData = std::move(DeathEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.DisableEscape
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::DisableEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "DisableEscape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.EnableEscape
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::EnableEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "EnableEscape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.EndTheFight
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::EndTheFight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "EndTheFight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.Escape Audio
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::Escape_Audio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "Escape Audio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.ExecuteUbergraph_BP_Aladdin_ArenaManagerSingleton
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::ExecuteUbergraph_BP_Aladdin_ArenaManagerSingleton(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "ExecuteUbergraph_BP_Aladdin_ArenaManagerSingleton");

	Params::BP_Aladdin_ArenaManagerSingleton_C_ExecuteUbergraph_BP_Aladdin_ArenaManagerSingleton Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.Fight Start Audio and Timer
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::Fight_Start_Audio_and_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "Fight Start Audio and Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.GetFamiliarInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Is_Familiar_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Is_Possessed_                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHWCharacter_Base**               Character_Owner                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::GetFamiliarInfo(class AActor* Actor, bool* Is_Familiar_, bool* Is_Possessed_, class AHWCharacter_Base** Character_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "GetFamiliarInfo");

	Params::BP_Aladdin_ArenaManagerSingleton_C_GetFamiliarInfo Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Familiar_ != nullptr)
		*Is_Familiar_ = Parms.Is_Familiar_;

	if (Is_Possessed_ != nullptr)
		*Is_Possessed_ = Parms.Is_Possessed_;

	if (Character_Owner != nullptr)
		*Character_Owner = Parms.Character_Owner;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.GetRemainingTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::GetRemainingTime(double* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "GetRemainingTime");

	Params::BP_Aladdin_ArenaManagerSingleton_C_GetRemainingTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.IsActorInStructArray?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToCheck                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Check_familiar_ownership_                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bFound                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Index_Found                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::IsActorInStructArray_(class AActor* ActorToCheck, bool Check_familiar_ownership_, bool* bFound, int32* Index_Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "IsActorInStructArray?");

	Params::BP_Aladdin_ArenaManagerSingleton_C_IsActorInStructArray_ Parms{};

	Parms.ActorToCheck = ActorToCheck;
	Parms.Check_familiar_ownership_ = Check_familiar_ownership_;

	UObject::ProcessEvent(Func, &Parms);

	if (bFound != nullptr)
		*bFound = Parms.bFound;

	if (Index_Found != nullptr)
		*Index_Found = Parms.Index_Found;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.IsFightActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::IsFightActive(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "IsFightActive");

	Params::BP_Aladdin_ArenaManagerSingleton_C_IsFightActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.Multicast_SpawnVisualEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSTRUCT_AladdinArenaManager_ActorVariables&ActorInfoForVFX_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::Multicast_SpawnVisualEffects(const struct FSTRUCT_AladdinArenaManager_ActorVariables& ActorInfoForVFX_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "Multicast_SpawnVisualEffects");

	Params::BP_Aladdin_ArenaManagerSingleton_C_Multicast_SpawnVisualEffects Parms{};

	Parms.ActorInfoForVFX_0 = std::move(ActorInfoForVFX_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.New Fight Visuals and Audio
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::New_Fight_Visuals_and_Audio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "New Fight Visuals and Audio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnDeployableDestroyed
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHWDeployable*                    DeployableDestroyed                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::OnDeployableDestroyed(class AHWDeployable* DeployableDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnDeployableDestroyed");

	Params::BP_Aladdin_ArenaManagerSingleton_C_OnDeployableDestroyed Parms{};

	Parms.DeployableDestroyed = DeployableDestroyed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnDeployableSpawned
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHWDeployable*                    DeployableSpawned                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::OnDeployableSpawned(class AHWDeployable* DeployableSpawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnDeployableSpawned");

	Params::BP_Aladdin_ArenaManagerSingleton_C_OnDeployableSpawned Parms{};

	Parms.DeployableSpawned = DeployableSpawned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnFamiliarDestroyed
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHWActiveFamiliarInfo&     FamiliarDestroyed                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::OnFamiliarDestroyed(const struct FHWActiveFamiliarInfo& FamiliarDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnFamiliarDestroyed");

	Params::BP_Aladdin_ArenaManagerSingleton_C_OnFamiliarDestroyed Parms{};

	Parms.FamiliarDestroyed = std::move(FamiliarDestroyed);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnFamiliarSpawned
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FHWActiveFamiliarInfo&     FamiliarSpawned                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::OnFamiliarSpawned(const struct FHWActiveFamiliarInfo& FamiliarSpawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnFamiliarSpawned");

	Params::BP_Aladdin_ArenaManagerSingleton_C_OnFamiliarSpawned Parms{};

	Parms.FamiliarSpawned = std::move(FamiliarSpawned);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_ActorInfoStructArray
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_ActorInfoStructArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_ActorInfoStructArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_CurrentAladdin
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_CurrentAladdin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_CurrentAladdin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_CurrentFightTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_CurrentFightTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_CurrentFightTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_CurrentTeleportTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_CurrentTeleportTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_CurrentTeleportTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_FightIndex
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_FightIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_FightIndex");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.OnRep_isEscapeActive
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::OnRep_isEscapeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "OnRep_isEscapeActive");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.ReceiveTick
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "ReceiveTick");

	Params::BP_Aladdin_ArenaManagerSingleton_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.Remove Actor and Clean Them Up From Death
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorBeingCleanedUp                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::Remove_Actor_and_Clean_Them_Up_From_Death(class AActor* ActorBeingCleanedUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "Remove Actor and Clean Them Up From Death");

	Params::BP_Aladdin_ArenaManagerSingleton_C_Remove_Actor_and_Clean_Them_Up_From_Death Parms{};

	Parms.ActorBeingCleanedUp = ActorBeingCleanedUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.RemoveActorFromTracking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorToRemove                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Remove_familiar_owner                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::RemoveActorFromTracking(class AActor* ActorToRemove, bool Remove_familiar_owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "RemoveActorFromTracking");

	Params::BP_Aladdin_ArenaManagerSingleton_C_RemoveActorFromTracking Parms{};

	Parms.ActorToRemove = ActorToRemove;
	Parms.Remove_familiar_owner = Remove_familiar_owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.RemoveAllRemainingActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::RemoveAllRemainingActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "RemoveAllRemainingActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.StartAFight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Aladdin_Who_Started_a_Fight                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor_Aladdin_Pulled_Into_Fight                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::StartAFight(class AActor* Aladdin_Who_Started_a_Fight, class AActor* Actor_Aladdin_Pulled_Into_Fight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "StartAFight");

	Params::BP_Aladdin_ArenaManagerSingleton_C_StartAFight Parms{};

	Parms.Aladdin_Who_Started_a_Fight = Aladdin_Who_Started_a_Fight;
	Parms.Actor_Aladdin_Pulled_Into_Fight = Actor_Aladdin_Pulled_Into_Fight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.StartFightEndOrEscapeIfConditionsMet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor_Triggering_Check                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::StartFightEndOrEscapeIfConditionsMet(class AActor* Actor_Triggering_Check)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "StartFightEndOrEscapeIfConditionsMet");

	Params::BP_Aladdin_ArenaManagerSingleton_C_StartFightEndOrEscapeIfConditionsMet Parms{};

	Parms.Actor_Triggering_Check = Actor_Triggering_Check;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.StartFightTimers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::StartFightTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "StartFightTimers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.TeleportActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor_To_Teleport                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Sending_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::TeleportActor(class AActor* Actor_To_Teleport, bool Sending_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "TeleportActor");

	Params::BP_Aladdin_ArenaManagerSingleton_C_TeleportActor Parms{};

	Parms.Actor_To_Teleport = Actor_To_Teleport;
	Parms.Sending_ = Sending_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.Test Character Equality
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Char_A                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Char_B                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Equality                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::Test_Character_Equality(class AActor* Char_A, class AActor* Char_B, bool* Equality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "Test Character Equality");

	Params::BP_Aladdin_ArenaManagerSingleton_C_Test_Character_Equality Parms{};

	Parms.Char_A = Char_A;
	Parms.Char_B = Char_B;

	UObject::ProcessEvent(Func, &Parms);

	if (Equality != nullptr)
		*Equality = Parms.Equality;
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.TriggerEscape
// (BlueprintCallable, BlueprintEvent)

void ABP_Aladdin_ArenaManagerSingleton_C::TriggerEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "TriggerEscape");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.TriggerPlayerTeleportWarningFX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   IndexInStructForInfo                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSending                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::TriggerPlayerTeleportWarningFX(int32 IndexInStructForInfo, bool bSending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "TriggerPlayerTeleportWarningFX");

	Params::BP_Aladdin_ArenaManagerSingleton_C_TriggerPlayerTeleportWarningFX Parms{};

	Parms.IndexInStructForInfo = IndexInStructForInfo;
	Parms.bSending = bSending;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Aladdin_ArenaManagerSingleton.BP_Aladdin_ArenaManagerSingleton_C.UnbindDeathEventOfActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Aladdin_ArenaManagerSingleton_C::UnbindDeathEventOfActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Aladdin_ArenaManagerSingleton_C", "UnbindDeathEventOfActor");

	Params::BP_Aladdin_ArenaManagerSingleton_C_UnbindDeathEventOfActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}

}

