#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkinnableAnimGraphRuntime

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_AimOffsetSkinned
// 0x0028 (0x0148 - 0x0120)
struct FAnimNode_AimOffsetSkinned final : public FAnimNode_RotationOffsetBlendSpace
{
public:
	class FName                                   SkinKeyword;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            TargetBlendSpace;                                  // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            DefaultBlendSpace;                                 // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_138[0x10];                                     // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_AimOffsetSkinned) == 0x000008, "Wrong alignment on FAnimNode_AimOffsetSkinned");
static_assert(sizeof(FAnimNode_AimOffsetSkinned) == 0x000148, "Wrong size on FAnimNode_AimOffsetSkinned");
static_assert(offsetof(FAnimNode_AimOffsetSkinned, SkinKeyword) == 0x000120, "Member 'FAnimNode_AimOffsetSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetSkinned, TargetBlendSpace) == 0x000128, "Member 'FAnimNode_AimOffsetSkinned::TargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_AimOffsetSkinned, DefaultBlendSpace) == 0x000130, "Member 'FAnimNode_AimOffsetSkinned::DefaultBlendSpace' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_BlendPoseNodeSkinned
// 0x0030 (0x0108 - 0x00D8)
struct FAnimNode_BlendPoseNodeSkinned final : public FAnimNode_PoseBlendNode
{
public:
	class FName                                   SkinKeyword;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPoseAsset*                             TargetPose;                                        // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsePoseAssetPinAsFallback;                        // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPoseAsset*                             FallbackPose;                                      // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendPoseNodeSkinned) == 0x000008, "Wrong alignment on FAnimNode_BlendPoseNodeSkinned");
static_assert(sizeof(FAnimNode_BlendPoseNodeSkinned) == 0x000108, "Wrong size on FAnimNode_BlendPoseNodeSkinned");
static_assert(offsetof(FAnimNode_BlendPoseNodeSkinned, SkinKeyword) == 0x0000D8, "Member 'FAnimNode_BlendPoseNodeSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendPoseNodeSkinned, TargetPose) == 0x0000E0, "Member 'FAnimNode_BlendPoseNodeSkinned::TargetPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendPoseNodeSkinned, bUsePoseAssetPinAsFallback) == 0x0000E8, "Member 'FAnimNode_BlendPoseNodeSkinned::bUsePoseAssetPinAsFallback' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendPoseNodeSkinned, FallbackPose) == 0x0000F0, "Member 'FAnimNode_BlendPoseNodeSkinned::FallbackPose' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_BlendSpacePlayerSkinned
// 0x0130 (0x01A8 - 0x0078)
struct FAnimNode_BlendSpacePlayerSkinned final : public FAnimNode_BlendSpacePlayer
{
public:
	struct FPoseLink                              Source;                                            // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SkinKeyword;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendFromSourceTime;                               // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendToSourceTime;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x00A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendFromSource;                                   // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendToSource;                                     // 0x00E0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                            TargetBlendSpace;                                  // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            LastTargetBlendSpace;                              // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLastHadTargetBlendSpace;                          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceBlendWeight;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingBlendTime;                                // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSampleData                       PerBoneSampleData;                                 // 0x0130(0x0060)(Protected, NativeAccessSpecifierProtected)
	bool                                          bResetSourceOnActivation;                          // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_191[0x17];                                     // 0x0191(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BlendSpacePlayerSkinned) == 0x000008, "Wrong alignment on FAnimNode_BlendSpacePlayerSkinned");
static_assert(sizeof(FAnimNode_BlendSpacePlayerSkinned) == 0x0001A8, "Wrong size on FAnimNode_BlendSpacePlayerSkinned");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, Source) == 0x000078, "Member 'FAnimNode_BlendSpacePlayerSkinned::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, SkinKeyword) == 0x000088, "Member 'FAnimNode_BlendSpacePlayerSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendFromSourceTime) == 0x000090, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendFromSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendToSourceTime) == 0x000094, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendToSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendType) == 0x000098, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, CustomBlendCurve) == 0x0000A0, "Member 'FAnimNode_BlendSpacePlayerSkinned::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendProfile) == 0x0000A8, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendFromSource) == 0x0000B0, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendFromSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, BlendToSource) == 0x0000E0, "Member 'FAnimNode_BlendSpacePlayerSkinned::BlendToSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, TargetBlendSpace) == 0x000110, "Member 'FAnimNode_BlendSpacePlayerSkinned::TargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, LastTargetBlendSpace) == 0x000118, "Member 'FAnimNode_BlendSpacePlayerSkinned::LastTargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, bLastHadTargetBlendSpace) == 0x000120, "Member 'FAnimNode_BlendSpacePlayerSkinned::bLastHadTargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, SourceBlendWeight) == 0x000124, "Member 'FAnimNode_BlendSpacePlayerSkinned::SourceBlendWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, RemainingBlendTime) == 0x000128, "Member 'FAnimNode_BlendSpacePlayerSkinned::RemainingBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, PerBoneSampleData) == 0x000130, "Member 'FAnimNode_BlendSpacePlayerSkinned::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_BlendSpacePlayerSkinned, bResetSourceOnActivation) == 0x000190, "Member 'FAnimNode_BlendSpacePlayerSkinned::bResetSourceOnActivation' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_BSpaceEvalSkinned
// 0x0130 (0x01B0 - 0x0080)
struct FAnimNode_BSpaceEvalSkinned final : public FAnimNode_BlendSpaceEvaluator
{
public:
	struct FPoseLink                              Source;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SkinKeyword;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendFromSourceTime;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendToSourceTime;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x00B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendFromSource;                                   // 0x00B8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendToSource;                                     // 0x00E8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                            TargetBlendSpace;                                  // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            LastTargetBlendSpace;                              // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLastHadTargetBlendSpace;                          // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceBlendWeight;                                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingBlendTime;                                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSampleData                       PerBoneSampleData;                                 // 0x0138(0x0060)(Protected, NativeAccessSpecifierProtected)
	bool                                          bResetSourceOnActivation;                          // 0x0198(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x17];                                     // 0x0199(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_BSpaceEvalSkinned) == 0x000008, "Wrong alignment on FAnimNode_BSpaceEvalSkinned");
static_assert(sizeof(FAnimNode_BSpaceEvalSkinned) == 0x0001B0, "Wrong size on FAnimNode_BSpaceEvalSkinned");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, Source) == 0x000080, "Member 'FAnimNode_BSpaceEvalSkinned::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, SkinKeyword) == 0x000090, "Member 'FAnimNode_BSpaceEvalSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendFromSourceTime) == 0x000098, "Member 'FAnimNode_BSpaceEvalSkinned::BlendFromSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendToSourceTime) == 0x00009C, "Member 'FAnimNode_BSpaceEvalSkinned::BlendToSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendType) == 0x0000A0, "Member 'FAnimNode_BSpaceEvalSkinned::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, CustomBlendCurve) == 0x0000A8, "Member 'FAnimNode_BSpaceEvalSkinned::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendProfile) == 0x0000B0, "Member 'FAnimNode_BSpaceEvalSkinned::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendFromSource) == 0x0000B8, "Member 'FAnimNode_BSpaceEvalSkinned::BlendFromSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, BlendToSource) == 0x0000E8, "Member 'FAnimNode_BSpaceEvalSkinned::BlendToSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, TargetBlendSpace) == 0x000118, "Member 'FAnimNode_BSpaceEvalSkinned::TargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, LastTargetBlendSpace) == 0x000120, "Member 'FAnimNode_BSpaceEvalSkinned::LastTargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, bLastHadTargetBlendSpace) == 0x000128, "Member 'FAnimNode_BSpaceEvalSkinned::bLastHadTargetBlendSpace' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, SourceBlendWeight) == 0x00012C, "Member 'FAnimNode_BSpaceEvalSkinned::SourceBlendWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, RemainingBlendTime) == 0x000130, "Member 'FAnimNode_BSpaceEvalSkinned::RemainingBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, PerBoneSampleData) == 0x000138, "Member 'FAnimNode_BSpaceEvalSkinned::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_BSpaceEvalSkinned, bResetSourceOnActivation) == 0x000198, "Member 'FAnimNode_BSpaceEvalSkinned::bResetSourceOnActivation' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_SeqEvalSkinned
// 0x0138 (0x0180 - 0x0048)
struct FAnimNode_SeqEvalSkinned : public FAnimNode_SequenceEvaluator
{
public:
	struct FPoseLink                              Source;                                            // 0x0048(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SkinKeyword;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendFromSourceTime;                               // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendToSourceTime;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x0070(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendFromSource;                                   // 0x0080(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendToSource;                                     // 0x00B0(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TargetSequence;                                    // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequenceBase*                      LastTargetSequence;                                // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSequencePinAsFallback;                         // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLastHadTargetSequence;                            // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceBlendWeight;                                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingBlendTime;                                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSampleData                       PerBoneSampleData;                                 // 0x0100(0x0060)(Protected, NativeAccessSpecifierProtected)
	bool                                          bResetSourceOnActivation;                          // 0x0160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      FallbackSequence;                                  // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SeqEvalSkinned) == 0x000008, "Wrong alignment on FAnimNode_SeqEvalSkinned");
static_assert(sizeof(FAnimNode_SeqEvalSkinned) == 0x000180, "Wrong size on FAnimNode_SeqEvalSkinned");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, Source) == 0x000048, "Member 'FAnimNode_SeqEvalSkinned::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, SkinKeyword) == 0x000058, "Member 'FAnimNode_SeqEvalSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendFromSourceTime) == 0x000060, "Member 'FAnimNode_SeqEvalSkinned::BlendFromSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendToSourceTime) == 0x000064, "Member 'FAnimNode_SeqEvalSkinned::BlendToSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendType) == 0x000068, "Member 'FAnimNode_SeqEvalSkinned::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, CustomBlendCurve) == 0x000070, "Member 'FAnimNode_SeqEvalSkinned::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendProfile) == 0x000078, "Member 'FAnimNode_SeqEvalSkinned::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendFromSource) == 0x000080, "Member 'FAnimNode_SeqEvalSkinned::BlendFromSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, BlendToSource) == 0x0000B0, "Member 'FAnimNode_SeqEvalSkinned::BlendToSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, TargetSequence) == 0x0000E0, "Member 'FAnimNode_SeqEvalSkinned::TargetSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, LastTargetSequence) == 0x0000E8, "Member 'FAnimNode_SeqEvalSkinned::LastTargetSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, bUseSequencePinAsFallback) == 0x0000F0, "Member 'FAnimNode_SeqEvalSkinned::bUseSequencePinAsFallback' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, bLastHadTargetSequence) == 0x0000F1, "Member 'FAnimNode_SeqEvalSkinned::bLastHadTargetSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, SourceBlendWeight) == 0x0000F4, "Member 'FAnimNode_SeqEvalSkinned::SourceBlendWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, RemainingBlendTime) == 0x0000F8, "Member 'FAnimNode_SeqEvalSkinned::RemainingBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, PerBoneSampleData) == 0x000100, "Member 'FAnimNode_SeqEvalSkinned::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, bResetSourceOnActivation) == 0x000160, "Member 'FAnimNode_SeqEvalSkinned::bResetSourceOnActivation' has a wrong offset!");
static_assert(offsetof(FAnimNode_SeqEvalSkinned, FallbackSequence) == 0x000168, "Member 'FAnimNode_SeqEvalSkinned::FallbackSequence' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_SeqCurveEvalSkinned
// 0x0010 (0x0190 - 0x0180)
struct FAnimNode_SeqCurveEvalSkinned final : public FAnimNode_SeqEvalSkinned
{
public:
	class FName                                   CurveName;                                         // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SeqCurveEvalSkinned) == 0x000008, "Wrong alignment on FAnimNode_SeqCurveEvalSkinned");
static_assert(sizeof(FAnimNode_SeqCurveEvalSkinned) == 0x000190, "Wrong size on FAnimNode_SeqCurveEvalSkinned");
static_assert(offsetof(FAnimNode_SeqCurveEvalSkinned, CurveName) == 0x000180, "Member 'FAnimNode_SeqCurveEvalSkinned::CurveName' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_SequenceSkinned
// 0x0140 (0x0180 - 0x0040)
struct FAnimNode_SequenceSkinned : public FAnimNode_AssetPlayerBase
{
public:
	struct FPoseLink                              Source;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SkinKeyword;                                       // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritSourceNodeProperties;                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateBasis;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPosition;                                     // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendFromSourceTime;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendToSourceTime;                                 // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             BlendType;                                         // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CustomBlendCurve;                                  // 0x0078(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendProfile*                          BlendProfile;                                      // 0x0080(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendFromSource;                                   // 0x0088(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FAlphaBlend                            BlendToSource;                                     // 0x00B8(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      CurrentSequence;                                   // 0x00E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequenceBase*                      LastSequence;                                      // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLastHadSequence;                                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SourceBlendWeight;                                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingBlendTime;                                // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlendSampleData                       PerBoneSampleData;                                 // 0x0108(0x0060)(Protected, NativeAccessSpecifierProtected)
	bool                                          bResetSourceOnActivation;                          // 0x0168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0x17];                                     // 0x0169(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimNode_SequenceSkinned) == 0x000008, "Wrong alignment on FAnimNode_SequenceSkinned");
static_assert(sizeof(FAnimNode_SequenceSkinned) == 0x000180, "Wrong size on FAnimNode_SequenceSkinned");
static_assert(offsetof(FAnimNode_SequenceSkinned, Source) == 0x000040, "Member 'FAnimNode_SequenceSkinned::Source' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, SkinKeyword) == 0x000050, "Member 'FAnimNode_SequenceSkinned::SkinKeyword' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, bInheritSourceNodeProperties) == 0x000058, "Member 'FAnimNode_SequenceSkinned::bInheritSourceNodeProperties' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, bLoopAnimation) == 0x000059, "Member 'FAnimNode_SequenceSkinned::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, PlayRate) == 0x00005C, "Member 'FAnimNode_SequenceSkinned::PlayRate' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, PlayRateBasis) == 0x000060, "Member 'FAnimNode_SequenceSkinned::PlayRateBasis' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, StartPosition) == 0x000064, "Member 'FAnimNode_SequenceSkinned::StartPosition' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendFromSourceTime) == 0x000068, "Member 'FAnimNode_SequenceSkinned::BlendFromSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendToSourceTime) == 0x00006C, "Member 'FAnimNode_SequenceSkinned::BlendToSourceTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendType) == 0x000070, "Member 'FAnimNode_SequenceSkinned::BlendType' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, CustomBlendCurve) == 0x000078, "Member 'FAnimNode_SequenceSkinned::CustomBlendCurve' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendProfile) == 0x000080, "Member 'FAnimNode_SequenceSkinned::BlendProfile' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendFromSource) == 0x000088, "Member 'FAnimNode_SequenceSkinned::BlendFromSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, BlendToSource) == 0x0000B8, "Member 'FAnimNode_SequenceSkinned::BlendToSource' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, CurrentSequence) == 0x0000E8, "Member 'FAnimNode_SequenceSkinned::CurrentSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, LastSequence) == 0x0000F0, "Member 'FAnimNode_SequenceSkinned::LastSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, bLastHadSequence) == 0x0000F8, "Member 'FAnimNode_SequenceSkinned::bLastHadSequence' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, SourceBlendWeight) == 0x0000FC, "Member 'FAnimNode_SequenceSkinned::SourceBlendWeight' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, RemainingBlendTime) == 0x000100, "Member 'FAnimNode_SequenceSkinned::RemainingBlendTime' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, PerBoneSampleData) == 0x000108, "Member 'FAnimNode_SequenceSkinned::PerBoneSampleData' has a wrong offset!");
static_assert(offsetof(FAnimNode_SequenceSkinned, bResetSourceOnActivation) == 0x000168, "Member 'FAnimNode_SequenceSkinned::bResetSourceOnActivation' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.AnimNode_SequenceSkinnedCurvePlay
// 0x0008 (0x0188 - 0x0180)
struct FAnimNode_SequenceSkinnedCurvePlay final : public FAnimNode_SequenceSkinned
{
public:
	class FName                                   CurveName;                                         // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_SequenceSkinnedCurvePlay) == 0x000008, "Wrong alignment on FAnimNode_SequenceSkinnedCurvePlay");
static_assert(sizeof(FAnimNode_SequenceSkinnedCurvePlay) == 0x000188, "Wrong size on FAnimNode_SequenceSkinnedCurvePlay");
static_assert(offsetof(FAnimNode_SequenceSkinnedCurvePlay, CurveName) == 0x000180, "Member 'FAnimNode_SequenceSkinnedCurvePlay::CurveName' has a wrong offset!");

// ScriptStruct SkinnableAnimGraphRuntime.SkinnedAnimInstanceProxy
// 0x0050 (0x0750 - 0x0700)
struct FSkinnedAnimInstanceProxy final : public FAnimInstanceProxy
{
public:
	uint8                                         Pad_700[0x50];                                     // 0x0700(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkinnedAnimInstanceProxy) == 0x000010, "Wrong alignment on FSkinnedAnimInstanceProxy");
static_assert(sizeof(FSkinnedAnimInstanceProxy) == 0x000750, "Wrong size on FSkinnedAnimInstanceProxy");

}

