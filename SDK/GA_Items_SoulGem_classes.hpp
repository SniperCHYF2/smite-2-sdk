#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Items_SoulGem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"
#include "Hemingway_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Items_SoulGem.GA_Items_SoulGem_C
// 0x0058 (0x0F30 - 0x0ED8)
class UGA_Items_SoulGem_C final : public UHWAbility_PassiveItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0ED8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AActor*                                 Damage_Event_Data_Target;                          // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UHWEquipmentComponent_FiringInstanceTracker* FiringInstanceTrackerComponent;               // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHWAbilityFiringInstanceId             OffhandInstanceID;                                 // 0x0EF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FGameplayEffectContextHandle           IncomingEffectContext;                             // 0x0EF8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         StacksRequiredForProc;                             // 0x0F10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F14[0x4];                                      // 0x0F14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEquipmentComponent_Stacks*           StacksComponent;                                   // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHWAbilityFiringInstanceId>     OffhandInstanceForStackAdded;                      // 0x0F20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ApplySoulGemEffects(double DamageDone);
	void ExecuteUbergraph_GA_Items_SoulGem(int32 EntryPoint);
	void OnOwnerDealtDamage(const struct FDamageEventData& DamageEventData);
	void SetupListeners();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Items_SoulGem_C">();
	}
	static class UGA_Items_SoulGem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Items_SoulGem_C>();
	}
};
static_assert(alignof(UGA_Items_SoulGem_C) == 0x000008, "Wrong alignment on UGA_Items_SoulGem_C");
static_assert(sizeof(UGA_Items_SoulGem_C) == 0x000F30, "Wrong size on UGA_Items_SoulGem_C");
static_assert(offsetof(UGA_Items_SoulGem_C, UberGraphFrame) == 0x000ED8, "Member 'UGA_Items_SoulGem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, Damage_Event_Data_Target) == 0x000EE0, "Member 'UGA_Items_SoulGem_C::Damage_Event_Data_Target' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, FiringInstanceTrackerComponent) == 0x000EE8, "Member 'UGA_Items_SoulGem_C::FiringInstanceTrackerComponent' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, OffhandInstanceID) == 0x000EF0, "Member 'UGA_Items_SoulGem_C::OffhandInstanceID' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, IncomingEffectContext) == 0x000EF8, "Member 'UGA_Items_SoulGem_C::IncomingEffectContext' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, StacksRequiredForProc) == 0x000F10, "Member 'UGA_Items_SoulGem_C::StacksRequiredForProc' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, StacksComponent) == 0x000F18, "Member 'UGA_Items_SoulGem_C::StacksComponent' has a wrong offset!");
static_assert(offsetof(UGA_Items_SoulGem_C, OffhandInstanceForStackAdded) == 0x000F20, "Member 'UGA_Items_SoulGem_C::OffhandInstanceForStackAdded' has a wrong offset!");

}

