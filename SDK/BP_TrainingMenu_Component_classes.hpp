#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrainingMenu_Component

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "E_TrainingMenu_EffectTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_TrainingMenu_Effect_structs.hpp"
#include "S_TrainingMenu_BotConfig_structs.hpp"
#include "E_TargetDummyModifiers_structs.hpp"
#include "E_TrainingMenu_CheatTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrainingMenu_Component.BP_TrainingMenu_Component_C
// 0x00D0 (0x0170 - 0x00A0)
class UBP_TrainingMenu_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class UClass*, struct FActiveGameplayEffectHandle> ActiveEffectHandles;                     // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_TrainingMenu_EffectTypes, struct FS_TrainingMenu_Effect> EffectsMap;                      // 0x00F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_BotFactory_TargetDummy_C*>   TrackedTargetDummyFactories;                       // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxTargetDummies;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumTargetDummies;                                  // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TrainingMenu_BotConfig              CachedBotConfig;                                   // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyEffect(class UClass* Effect, int32 Magnitude, const struct FGameplayTag& MagnitudeDataTag);
	void ApplySettingsToBot(class AHWCharacter_Base* GodBot, int32 Team, bool GiveItems, int32 Level, int32 Protections);
	void ChangeGodBotTeam(class AHWCharacter_Base* Character, int32 Team);
	void ClearItemInventory(class UHWInventoryManagerComponent* Inventory);
	void CopyInventoryToGodBot(class AActor* Source, class AHWCharacter_Base* TargetCharacter);
	void ExecuteUbergraph_BP_TrainingMenu_Component(int32 EntryPoint);
	void GatherAndTrackTargetDummyFactories();
	void Get_Practice_Menu_Component_Owner(class AActor** OwnerControlledActor, class UHWAbilitySystemComponent** OwnerASC);
	void GetItemsFromInventory(class UHWInventoryManagerComponent* Inventory, TMap<struct FHWInventorySlot, class UHWEquipmentItem*>* Items);
	void GetValidLocationForBotSpawn(const struct FVector& StartLocation, const struct FVector& EndLocation, struct FVector* Location, bool* IsValid);
	void GiveItemsToInventory(const TMap<struct FHWInventorySlot, class UHWEquipmentItem*>& Items, class UHWInventoryManagerComponent* Inventory);
	void HandleApplyEffect(E_TrainingMenu_EffectTypes EffectType, int32 Magnitude);
	void HandleCheatCommand(E_TrainingMenu_CheatTypes Cheat, class UObject* Instigator);
	void HandleToggleEffect(E_TrainingMenu_EffectTypes EffectType, bool EnableEffect);
	void LineTraceForGodBot(class AHWCharacter_Base** GodBot);
	void ModifyGodBot(class AHWCharacter_Base* Character, E_TargetDummyModifiers Modifier, int32 Magnitude);
	void ModifyGodBotLevel(class AHWCharacter_Base* Character, int32 SetLevel);
	void ModifyGodBotProtections(class AHWCharacter_Base* Character, int32 AddProtections);
	void OnTargetDummySpawned(class AHWBotFactory* BotFactory, class AHWCharacter_Base* Bot);
	void ReceiveBeginPlay();
	void ServerRequestCheatCommand(E_TrainingMenu_CheatTypes Cheat, class AActor* Instigator);
	void ServerTrainingMenu_RequestApplyEffect(E_TrainingMenu_EffectTypes EffectType);
	void ServerTrainingMenu_RequestApplyEffectWithMagnitude(E_TrainingMenu_EffectTypes EffectType, int32 Magnitude);
	void ServerTrainingMenu_RequestApplySettingsToBot(int32 Team, bool GiveItems, int32 Level, int32 Protections);
	void ServerTrainingMenu_RequestRemoveTargetDummies();
	void ServerTrainingMenu_RequestSpawnTargetDummy(int32 BotIndex, int32 Team, bool GiveItems, int32 DesiredLevel, int32 DesiredProtections);
	void ServerTrainingMenu_RequestToggleEffect(E_TrainingMenu_EffectTypes EffectType, bool EnableEffect);
	void SpawnTargetDummy(int32 BotIndex);
	void ToggleEffect(class UClass* Effect, bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrainingMenu_Component_C">();
	}
	static class UBP_TrainingMenu_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TrainingMenu_Component_C>();
	}
};
static_assert(alignof(UBP_TrainingMenu_Component_C) == 0x000008, "Wrong alignment on UBP_TrainingMenu_Component_C");
static_assert(sizeof(UBP_TrainingMenu_Component_C) == 0x000170, "Wrong size on UBP_TrainingMenu_Component_C");
static_assert(offsetof(UBP_TrainingMenu_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_TrainingMenu_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, ActiveEffectHandles) == 0x0000A8, "Member 'UBP_TrainingMenu_Component_C::ActiveEffectHandles' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, EffectsMap) == 0x0000F8, "Member 'UBP_TrainingMenu_Component_C::EffectsMap' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, TrackedTargetDummyFactories) == 0x000148, "Member 'UBP_TrainingMenu_Component_C::TrackedTargetDummyFactories' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, MaxTargetDummies) == 0x000158, "Member 'UBP_TrainingMenu_Component_C::MaxTargetDummies' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, NumTargetDummies) == 0x00015C, "Member 'UBP_TrainingMenu_Component_C::NumTargetDummies' has a wrong offset!");
static_assert(offsetof(UBP_TrainingMenu_Component_C, CachedBotConfig) == 0x000160, "Member 'UBP_TrainingMenu_Component_C::CachedBotConfig' has a wrong offset!");

}

