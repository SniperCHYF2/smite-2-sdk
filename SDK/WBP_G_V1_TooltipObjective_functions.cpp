#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V1_TooltipObjective

#include "Basic.hpp"

#include "WBP_G_V1_TooltipObjective_classes.hpp"
#include "WBP_G_V1_TooltipObjective_parameters.hpp"


namespace SDK
{

// Function WBP_G_V1_TooltipObjective.WBP_G_V1_TooltipObjective_C.DisplayText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              TextList                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const int32                             SelectedIndex                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipObjective_C::DisplayText(const TArray<class FText>& TextList, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipObjective_C", "DisplayText");

	Params::WBP_G_V1_TooltipObjective_C_DisplayText Parms{};

	Parms.TextList = std::move(TextList);
	Parms.SelectedIndex = SelectedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipObjective.WBP_G_V1_TooltipObjective_C.ExecuteUbergraph_WBP_G_V1_TooltipObjective
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipObjective_C::ExecuteUbergraph_WBP_G_V1_TooltipObjective(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipObjective_C", "ExecuteUbergraph_WBP_G_V1_TooltipObjective");

	Params::WBP_G_V1_TooltipObjective_C_ExecuteUbergraph_WBP_G_V1_TooltipObjective Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

