#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_BackToBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_BackToBase.BP_AIGoal_BackToBase_C
// 0x0058 (0x0140 - 0x00E8)
class UBP_AIGoal_BackToBase_C final : public UHWAIGoal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        healthThreshold;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        manaThreshold;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GoldThreshold;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        healthWeight;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        manaWeight;                                        // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GoldWeight;                                        // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InProgressHealthThreshold;                         // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InProgressManaThreshold;                           // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ObjectiveWaypointUpdateTimer;                      // 0x0130(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ObjectiveWaypointUpdateFrequency;                  // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	float CalculateWeight(class AHWAIController* InController);
	bool CheckPreconditionsBP(class AHWAIController* InController);
	void ComputeGodBackToBaseWeightGold(class AHWAIController* InController, class AHWCharacter_Base* Source, double GoldWeight_0, double* Weight);
	void EndGoalBP();
	void ExecuteUbergraph_BP_AIGoal_BackToBase(int32 EntryPoint);
	bool ShouldGodBackToBaseGold(class AHWAIController* InController, class AHWCharacter_Base* Source, double GoldThreshold_0);
	void StartGoalBP();
	void TickGoalBP();
	void Update();
	void UpdateObjectiveWaypoint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_BackToBase_C">();
	}
	static class UBP_AIGoal_BackToBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_BackToBase_C>();
	}
};
static_assert(alignof(UBP_AIGoal_BackToBase_C) == 0x000008, "Wrong alignment on UBP_AIGoal_BackToBase_C");
static_assert(sizeof(UBP_AIGoal_BackToBase_C) == 0x000140, "Wrong size on UBP_AIGoal_BackToBase_C");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, UberGraphFrame) == 0x0000E8, "Member 'UBP_AIGoal_BackToBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, healthThreshold) == 0x0000F0, "Member 'UBP_AIGoal_BackToBase_C::healthThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, manaThreshold) == 0x0000F8, "Member 'UBP_AIGoal_BackToBase_C::manaThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, GoldThreshold) == 0x000100, "Member 'UBP_AIGoal_BackToBase_C::GoldThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, healthWeight) == 0x000108, "Member 'UBP_AIGoal_BackToBase_C::healthWeight' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, manaWeight) == 0x000110, "Member 'UBP_AIGoal_BackToBase_C::manaWeight' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, GoldWeight) == 0x000118, "Member 'UBP_AIGoal_BackToBase_C::GoldWeight' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, InProgressHealthThreshold) == 0x000120, "Member 'UBP_AIGoal_BackToBase_C::InProgressHealthThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, InProgressManaThreshold) == 0x000128, "Member 'UBP_AIGoal_BackToBase_C::InProgressManaThreshold' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, ObjectiveWaypointUpdateTimer) == 0x000130, "Member 'UBP_AIGoal_BackToBase_C::ObjectiveWaypointUpdateTimer' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_BackToBase_C, ObjectiveWaypointUpdateFrequency) == 0x000138, "Member 'UBP_AIGoal_BackToBase_C::ObjectiveWaypointUpdateFrequency' has a wrong offset!");

}

