#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V1_Minimap

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonInput_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.DisplayMapTexture
// 0x0030 (0x0030 - 0x0000)
struct WBP_G_V1_Minimap_C_DisplayMapTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              MapTexture;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_DisplayMapTexture) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_DisplayMapTexture");
static_assert(sizeof(WBP_G_V1_Minimap_C_DisplayMapTexture) == 0x000030, "Wrong size on WBP_G_V1_Minimap_C_DisplayMapTexture");
static_assert(offsetof(WBP_G_V1_Minimap_C_DisplayMapTexture, MapTexture) == 0x000000, "Member 'WBP_G_V1_Minimap_C_DisplayMapTexture::MapTexture' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_DisplayMapTexture, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000028, "Member 'WBP_G_V1_Minimap_C_DisplayMapTexture::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.ExecuteUbergraph_WBP_G_V1_Minimap
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap");
static_assert(sizeof(WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap) == 0x000010, "Wrong size on WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap");
static_assert(offsetof(WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap, EntryPoint) == 0x000000, "Member 'WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000008, "Member 'WBP_G_V1_Minimap_C_ExecuteUbergraph_WBP_G_V1_Minimap::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.GetCustomModifierValue
// 0x0014 (0x0014 - 0x0000)
struct WBP_G_V1_Minimap_C_GetCustomModifierValue final
{
public:
	class FName                                   InCustomModifierName;                              // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRenderOpacity_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_GetCustomModifierValue) == 0x000004, "Wrong alignment on WBP_G_V1_Minimap_C_GetCustomModifierValue");
static_assert(sizeof(WBP_G_V1_Minimap_C_GetCustomModifierValue) == 0x000014, "Wrong size on WBP_G_V1_Minimap_C_GetCustomModifierValue");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetCustomModifierValue, InCustomModifierName) == 0x000000, "Member 'WBP_G_V1_Minimap_C_GetCustomModifierValue::InCustomModifierName' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetCustomModifierValue, ReturnValue) == 0x000008, "Member 'WBP_G_V1_Minimap_C_GetCustomModifierValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetCustomModifierValue, K2Node_SwitchName_CmpSuccess) == 0x00000C, "Member 'WBP_G_V1_Minimap_C_GetCustomModifierValue::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetCustomModifierValue, CallFunc_GetRenderOpacity_ReturnValue) == 0x000010, "Member 'WBP_G_V1_Minimap_C_GetCustomModifierValue::CallFunc_GetRenderOpacity_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.GetPingBounds
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_G_V1_Minimap_C_GetPingBounds final
{
public:
	struct FVector2D                              PingBounds;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0010(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue_1;          // 0x0048(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue_1;               // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_GetPingBounds) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_GetPingBounds");
static_assert(sizeof(WBP_G_V1_Minimap_C_GetPingBounds) == 0x0000F0, "Wrong size on WBP_G_V1_Minimap_C_GetPingBounds");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, PingBounds) == 0x000000, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::PingBounds' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_GetCachedGeometry_ReturnValue) == 0x000010, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_GetCachedGeometry_ReturnValue_1) == 0x000048, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_GetCachedGeometry_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_GetLocalSize_ReturnValue) == 0x000080, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_GetLocalSize_ReturnValue_1) == 0x000090, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_GetLocalSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_BreakVector2D_X) == 0x0000A0, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_BreakVector2D_Y) == 0x0000A8, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_BreakVector2D_X_1) == 0x0000B0, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_BreakVector2D_Y_1) == 0x0000B8, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000D8, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetPingBounds, CallFunc_MakeVector2D_ReturnValue) == 0x0000E0, "Member 'WBP_G_V1_Minimap_C_GetPingBounds::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.HandleActiveInputModeChanged
// 0x0009 (0x0009 - 0x0000)
struct WBP_G_V1_Minimap_C_HandleActiveInputModeChanged final
{
public:
	ECommonInputMode                              InputMode;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged) == 0x000001, "Wrong alignment on WBP_G_V1_Minimap_C_HandleActiveInputModeChanged");
static_assert(sizeof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged) == 0x000009, "Wrong size on WBP_G_V1_Minimap_C_HandleActiveInputModeChanged");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, InputMode) == 0x000000, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::InputMode' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, Temp_byte_Variable) == 0x000001, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, Temp_bool_Variable) == 0x000004, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, CallFunc_GetCurrentInputState_ReturnValue) == 0x000005, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleActiveInputModeChanged, K2Node_Select_Default) == 0x000008, "Member 'WBP_G_V1_Minimap_C_HandleActiveInputModeChanged::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.HandleCurrentInputStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged) == 0x000001, "Wrong alignment on WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged");
static_assert(sizeof(WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged) == 0x000002, "Wrong size on WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged, InputState) == 0x000000, "Member 'WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged::InputState' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_G_V1_Minimap_C_HandleCurrentInputStateChanged::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.HandleCustomModifierUpdated
// 0x0070 (0x0070 - 0x0000)
struct WBP_G_V1_Minimap_C_HandleCustomModifierUpdated final
{
public:
	struct FHWUIStyleLocalCustomModifier          InCustomModifier;                                  // 0x0000(0x0068)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_HandleCustomModifierUpdated) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_HandleCustomModifierUpdated");
static_assert(sizeof(WBP_G_V1_Minimap_C_HandleCustomModifierUpdated) == 0x000070, "Wrong size on WBP_G_V1_Minimap_C_HandleCustomModifierUpdated");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleCustomModifierUpdated, InCustomModifier) == 0x000000, "Member 'WBP_G_V1_Minimap_C_HandleCustomModifierUpdated::InCustomModifier' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleCustomModifierUpdated, K2Node_SwitchName_CmpSuccess) == 0x000068, "Member 'WBP_G_V1_Minimap_C_HandleCustomModifierUpdated::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.HandleTogglePingCursor
// 0x0018 (0x0018 - 0x0000)
struct WBP_G_V1_Minimap_C_HandleTogglePingCursor final
{
public:
	bool                                          bIsPingCursorActive;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       K2Node_DynamicCast_AsCanvas_Panel_Slot;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_HandleTogglePingCursor) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_HandleTogglePingCursor");
static_assert(sizeof(WBP_G_V1_Minimap_C_HandleTogglePingCursor) == 0x000018, "Wrong size on WBP_G_V1_Minimap_C_HandleTogglePingCursor");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, bIsPingCursorActive) == 0x000000, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::bIsPingCursorActive' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, Temp_byte_Variable) == 0x000002, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, K2Node_Select_Default) == 0x000004, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, K2Node_DynamicCast_AsCanvas_Panel_Slot) == 0x000008, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::K2Node_DynamicCast_AsCanvas_Panel_Slot' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_HandleTogglePingCursor, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_G_V1_Minimap_C_HandleTogglePingCursor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.InitializeWidget
// 0x0038 (0x0038 - 0x0000)
struct WBP_G_V1_Minimap_C_InitializeWidget final
{
public:
	class AHWGameHUD*                             CallFunc_GetLocalHUDAsGame_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERH_INPUT_STATE InputState)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ECommonInputMode InputMode)>   K2Node_CreateDelegate_OutputDelegate_1;            // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameHUD*                             CallFunc_GetLocalHUDAsGame_ReturnValue_1;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECommonInputMode                              CallFunc_GetActiveInputMode_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_InitializeWidget");
static_assert(sizeof(WBP_G_V1_Minimap_C_InitializeWidget) == 0x000038, "Wrong size on WBP_G_V1_Minimap_C_InitializeWidget");
static_assert(offsetof(WBP_G_V1_Minimap_C_InitializeWidget, CallFunc_GetLocalHUDAsGame_ReturnValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_InitializeWidget::CallFunc_GetLocalHUDAsGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_G_V1_Minimap_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'WBP_G_V1_Minimap_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_InitializeWidget, CallFunc_GetLocalHUDAsGame_ReturnValue_1) == 0x000028, "Member 'WBP_G_V1_Minimap_C_InitializeWidget::CallFunc_GetLocalHUDAsGame_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_InitializeWidget, CallFunc_GetActiveInputMode_ReturnValue) == 0x000030, "Member 'WBP_G_V1_Minimap_C_InitializeWidget::CallFunc_GetActiveInputMode_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.Input_MovePing
// 0x0148 (0x0148 - 0x0000)
struct WBP_G_V1_Minimap_C_Input_MovePing final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	double                                        CursorSpeed;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirectionMultiplier;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakInputActionValue_X;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakInputActionValue_Y;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakInputActionValue_Z;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInputActionValueType                         CallFunc_BreakInputActionValue_Type;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPingBounds_PingBounds;                 // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMin_ReturnValue_1;                       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_1;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_Input_MovePing) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_Input_MovePing");
static_assert(sizeof(WBP_G_V1_Minimap_C_Input_MovePing) == 0x000148, "Wrong size on WBP_G_V1_Minimap_C_Input_MovePing");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, InputActionValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::InputActionValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CursorSpeed) == 0x000020, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CursorSpeed' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, DirectionMultiplier) == 0x000028, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::DirectionMultiplier' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, Temp_bool_Variable) == 0x000030, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakInputActionValue_X) == 0x000038, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakInputActionValue_X' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakInputActionValue_Y) == 0x000040, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakInputActionValue_Y' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakInputActionValue_Z) == 0x000048, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakInputActionValue_Z' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakInputActionValue_Type) == 0x000050, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakInputActionValue_Type' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, Temp_real_Variable) == 0x000058, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Abs_ReturnValue) == 0x000060, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Abs_ReturnValue_1) == 0x000070, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, K2Node_Select_Default) == 0x000080, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_SelectInt_ReturnValue) == 0x000090, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, Temp_real_Variable_1) == 0x000098, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0000A0, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, Temp_bool_Variable_1) == 0x0000B0, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_GetPingBounds_PingBounds) == 0x0000B8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_GetPingBounds_PingBounds' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakVector2D_X) == 0x0000C8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakVector2D_Y) == 0x0000D0, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, K2Node_Select_Default_1) == 0x0000D8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000E0, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000E8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0000F0, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakVector2D_X_1) == 0x0000F8, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_BreakVector2D_Y_1) == 0x000100, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000108, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000110, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_FMin_ReturnValue) == 0x000118, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_FMin_ReturnValue_1) == 0x000120, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_FMax_ReturnValue) == 0x000128, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_FMax_ReturnValue_1) == 0x000130, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_Input_MovePing, CallFunc_MakeVector2D_ReturnValue) == 0x000138, "Member 'WBP_G_V1_Minimap_C_Input_MovePing::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.MinimapFlippedChanged
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V1_Minimap_C_MinimapFlippedChanged final
{
public:
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_MinimapFlippedChanged) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_MinimapFlippedChanged");
static_assert(sizeof(WBP_G_V1_Minimap_C_MinimapFlippedChanged) == 0x000010, "Wrong size on WBP_G_V1_Minimap_C_MinimapFlippedChanged");
static_assert(offsetof(WBP_G_V1_Minimap_C_MinimapFlippedChanged, CallFunc_SelectFloat_ReturnValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_MinimapFlippedChanged::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_MinimapFlippedChanged, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000008, "Member 'WBP_G_V1_Minimap_C_MinimapFlippedChanged::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.OnMouseButtonDown
// 0x0250 (0x0250 - 0x0000)
struct WBP_G_V1_Minimap_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
	struct FGameplayTag                           CallFunc_GetPingTagFromPointerEvent_OutPingTag;    // 0x0220(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPingTagFromPointerEvent_ReturnValue;   // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue; // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_AbsoluteToLocal_ReturnValue;              // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_OnMouseButtonDown");
static_assert(sizeof(WBP_G_V1_Minimap_C_OnMouseButtonDown) == 0x000250, "Wrong size on WBP_G_V1_Minimap_C_OnMouseButtonDown");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, CallFunc_GetPingTagFromPointerEvent_OutPingTag) == 0x000220, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::CallFunc_GetPingTagFromPointerEvent_OutPingTag' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, CallFunc_GetPingTagFromPointerEvent_ReturnValue) == 0x000228, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::CallFunc_GetPingTagFromPointerEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue) == 0x000230, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetScreenSpacePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_OnMouseButtonDown, CallFunc_AbsoluteToLocal_ReturnValue) == 0x000240, "Member 'WBP_G_V1_Minimap_C_OnMouseButtonDown::CallFunc_AbsoluteToLocal_ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.GetGamepadPingLocation
// 0x0100 (0x0100 - 0x0000)
struct WBP_G_V1_Minimap_C_GetGamepadPingLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMinimapScale_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue;        // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_DoubleToVector2D_ReturnValue_1;      // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0048(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast_1; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_GetGamepadPingLocation) == 0x000008, "Wrong alignment on WBP_G_V1_Minimap_C_GetGamepadPingLocation");
static_assert(sizeof(WBP_G_V1_Minimap_C_GetGamepadPingLocation) == 0x000100, "Wrong size on WBP_G_V1_Minimap_C_GetGamepadPingLocation");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, ReturnValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_GetMinimapScale_ReturnValue) == 0x000010, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_GetMinimapScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Conv_DoubleToVector2D_ReturnValue) == 0x000018, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Conv_DoubleToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Conv_DoubleToVector2D_ReturnValue_1) == 0x000028, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Conv_DoubleToVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000038, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_GetCachedGeometry_ReturnValue) == 0x000048, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_BreakVector2D_X) == 0x000080, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_BreakVector2D_Y) == 0x000088, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_GetLocalSize_ReturnValue) == 0x000090, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x0000A0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_BreakVector2D_X_1) == 0x0000B0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_BreakVector2D_Y_1) == 0x0000B8, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000D8, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_MakeVector2D_ReturnValue) == 0x0000E0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast) == 0x0000F0, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetGamepadPingLocation, CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast_1) == 0x0000F8, "Member 'WBP_G_V1_Minimap_C_GetGamepadPingLocation::CallFunc_Conv_DoubleToVector2D_InDouble_ImplicitCast_1' has a wrong offset!");

// Function WBP_G_V1_Minimap.WBP_G_V1_Minimap_C.GetMinimapScale
// 0x0004 (0x0004 - 0x0000)
struct WBP_G_V1_Minimap_C_GetMinimapScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V1_Minimap_C_GetMinimapScale) == 0x000004, "Wrong alignment on WBP_G_V1_Minimap_C_GetMinimapScale");
static_assert(sizeof(WBP_G_V1_Minimap_C_GetMinimapScale) == 0x000004, "Wrong size on WBP_G_V1_Minimap_C_GetMinimapScale");
static_assert(offsetof(WBP_G_V1_Minimap_C_GetMinimapScale, ReturnValue) == 0x000000, "Member 'WBP_G_V1_Minimap_C_GetMinimapScale::ReturnValue' has a wrong offset!");

}

