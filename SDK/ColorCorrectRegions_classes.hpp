#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ColorCorrectRegions

#include "Basic.hpp"

#include "ColorCorrectRegions_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DisplayClusterLightCardExtender_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class ColorCorrectRegions.ColorCorrectRegion
// 0x03B8 (0x0650 - 0x0298)
#pragma pack(push, 0x1)
class alignas(0x10) AColorCorrectRegion : public AActor
{
public:
	EColorCorrectRegionsType                      Type;                                              // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inner;                                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Outer_0;                                           // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invert;                                            // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorCorrectRegionTemperatureType            TemperatureType;                                   // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tint;                                              // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingSettings                  ColorGradingSettings;                              // 0x02C0(0x0290)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePerActorCC;                                 // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorCorrectRegionStencilType                PerActorColorCorrection;                           // 0x0552(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_553[0x5];                                      // 0x0553(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftObjectPtr<class AActor>>            AffectedActors;                                    // 0x0558(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A8[0x50];                                     // 0x05A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UColorCorrectionInvisibleComponent*     IdentityComponent;                                 // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_600[0x48];                                     // 0x0600(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectRegion">();
	}
	static class AColorCorrectRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<AColorCorrectRegion>();
	}
};
#pragma pack(pop)
static_assert(alignof(AColorCorrectRegion) == 0x000010, "Wrong alignment on AColorCorrectRegion");
static_assert(sizeof(AColorCorrectRegion) == 0x000650, "Wrong size on AColorCorrectRegion");
static_assert(offsetof(AColorCorrectRegion, Type) == 0x000298, "Member 'AColorCorrectRegion::Type' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Priority) == 0x00029C, "Member 'AColorCorrectRegion::Priority' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Intensity) == 0x0002A0, "Member 'AColorCorrectRegion::Intensity' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Inner) == 0x0002A4, "Member 'AColorCorrectRegion::Inner' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Outer_0) == 0x0002A8, "Member 'AColorCorrectRegion::Outer_0' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Falloff) == 0x0002AC, "Member 'AColorCorrectRegion::Falloff' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Invert) == 0x0002B0, "Member 'AColorCorrectRegion::Invert' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, TemperatureType) == 0x0002B1, "Member 'AColorCorrectRegion::TemperatureType' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Temperature) == 0x0002B4, "Member 'AColorCorrectRegion::Temperature' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Tint) == 0x0002B8, "Member 'AColorCorrectRegion::Tint' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, ColorGradingSettings) == 0x0002C0, "Member 'AColorCorrectRegion::ColorGradingSettings' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, Enabled) == 0x000550, "Member 'AColorCorrectRegion::Enabled' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, bEnablePerActorCC) == 0x000551, "Member 'AColorCorrectRegion::bEnablePerActorCC' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, PerActorColorCorrection) == 0x000552, "Member 'AColorCorrectRegion::PerActorColorCorrection' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, AffectedActors) == 0x000558, "Member 'AColorCorrectRegion::AffectedActors' has a wrong offset!");
static_assert(offsetof(AColorCorrectRegion, IdentityComponent) == 0x0005F8, "Member 'AColorCorrectRegion::IdentityComponent' has a wrong offset!");

// Class ColorCorrectRegions.ColorCorrectionRegion
// 0x0010 (0x0660 - 0x0650)
class AColorCorrectionRegion final : public AColorCorrectRegion
{
public:
	TArray<class UStaticMeshComponent*>           MeshComponents;                                    // 0x0648(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectionRegion">();
	}
	static class AColorCorrectionRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<AColorCorrectionRegion>();
	}
};
static_assert(alignof(AColorCorrectionRegion) == 0x000010, "Wrong alignment on AColorCorrectionRegion");
static_assert(sizeof(AColorCorrectionRegion) == 0x000660, "Wrong size on AColorCorrectionRegion");
static_assert(offsetof(AColorCorrectionRegion, MeshComponents) == 0x000648, "Member 'AColorCorrectionRegion::MeshComponents' has a wrong offset!");

// Class ColorCorrectRegions.ColorCorrectionInvisibleComponent
// 0x0000 (0x0570 - 0x0570)
class UColorCorrectionInvisibleComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectionInvisibleComponent">();
	}
	static class UColorCorrectionInvisibleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorCorrectionInvisibleComponent>();
	}
};
static_assert(alignof(UColorCorrectionInvisibleComponent) == 0x000010, "Wrong alignment on UColorCorrectionInvisibleComponent");
static_assert(sizeof(UColorCorrectionInvisibleComponent) == 0x000570, "Wrong size on UColorCorrectionInvisibleComponent");

// Class ColorCorrectRegions.ColorCorrectRegionsSubsystem
// 0x0070 (0x00A0 - 0x0030)
class UColorCorrectRegionsSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x70];                                      // 0x0030(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RefreshStenciIdAssignmentForAllCCR();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectRegionsSubsystem">();
	}
	static class UColorCorrectRegionsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UColorCorrectRegionsSubsystem>();
	}
};
static_assert(alignof(UColorCorrectRegionsSubsystem) == 0x000008, "Wrong alignment on UColorCorrectRegionsSubsystem");
static_assert(sizeof(UColorCorrectRegionsSubsystem) == 0x0000A0, "Wrong size on UColorCorrectRegionsSubsystem");

// Class ColorCorrectRegions.ColorCorrectionWindow
// 0x00D0 (0x0720 - 0x0650)
class AColorCorrectionWindow : public AColorCorrectRegion
{
public:
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           MeshComponents;                                    // 0x0650(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	EColorCorrectWindowType                       WindowType;                                        // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDisplayClusterPositionalParams        PositionalParams;                                  // 0x0668(0x0048)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             Origin;                                            // 0x06B0(0x0060)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_710[0x10];                                     // 0x0710(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDistanceFromCenter(double InValue);
	void SetLatitude(double InValue);
	void SetLongitude(double InValue);
	void SetOrigin(const struct FTransform& InOrigin);
	void SetPitch(double InValue);
	void SetPositionalParams(const struct FDisplayClusterPositionalParams& inParams);
	void SetRadialOffset(double InValue);
	void SetScale(const struct FVector2D& InScale);
	void SetSpin(double InValue);
	void SetYaw(double InValue);

	double GetDistanceFromCenter() const;
	double GetLatitude() const;
	double GetLongitude() const;
	struct FTransform GetOrigin() const;
	double GetPitch() const;
	struct FDisplayClusterPositionalParams GetPositionalParams() const;
	double GetRadialOffset() const;
	struct FVector2D GetScale() const;
	double GetSpin() const;
	double GetYaw() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectionWindow">();
	}
	static class AColorCorrectionWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<AColorCorrectionWindow>();
	}
};
static_assert(alignof(AColorCorrectionWindow) == 0x000010, "Wrong alignment on AColorCorrectionWindow");
static_assert(sizeof(AColorCorrectionWindow) == 0x000720, "Wrong size on AColorCorrectionWindow");
static_assert(offsetof(AColorCorrectionWindow, MeshComponents) == 0x000650, "Member 'AColorCorrectionWindow::MeshComponents' has a wrong offset!");
static_assert(offsetof(AColorCorrectionWindow, WindowType) == 0x000660, "Member 'AColorCorrectionWindow::WindowType' has a wrong offset!");
static_assert(offsetof(AColorCorrectionWindow, PositionalParams) == 0x000668, "Member 'AColorCorrectionWindow::PositionalParams' has a wrong offset!");
static_assert(offsetof(AColorCorrectionWindow, Origin) == 0x0006B0, "Member 'AColorCorrectionWindow::Origin' has a wrong offset!");

// Class ColorCorrectRegions.ColorCorrectWindow
// 0x0000 (0x0720 - 0x0720)
class AColorCorrectWindow final : public AColorCorrectionWindow
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ColorCorrectWindow">();
	}
	static class AColorCorrectWindow* GetDefaultObj()
	{
		return GetDefaultObjImpl<AColorCorrectWindow>();
	}
};
static_assert(alignof(AColorCorrectWindow) == 0x000010, "Wrong alignment on AColorCorrectWindow");
static_assert(sizeof(AColorCorrectWindow) == 0x000720, "Wrong size on AColorCorrectWindow");

}

