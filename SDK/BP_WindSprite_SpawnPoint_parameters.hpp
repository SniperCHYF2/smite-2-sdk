#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WindSprite_SpawnPoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_WindSprite_SpawnPoint.BP_WindSprite_SpawnPoint_C.ExecuteUbergraph_BP_WindSprite_SpawnPoint
// 0x0008 (0x0008 - 0x0000)
struct BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint) == 0x000004, "Wrong alignment on BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint");
static_assert(sizeof(BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint) == 0x000008, "Wrong size on BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint, EntryPoint) == 0x000000, "Member 'BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_WindSprite_SpawnPoint_C_ExecuteUbergraph_BP_WindSprite_SpawnPoint::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_WindSprite_SpawnPoint.BP_WindSprite_SpawnPoint_C.SpawnWindSprite
// 0x0160 (0x0160 - 0x0000)
struct BP_WindSprite_SpawnPoint_C_SpawnWindSprite final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBP_WindSprite_01_C*                   CallFunc_FinishSpawningActor_ReturnValue;          // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite) == 0x000010, "Wrong alignment on BP_WindSprite_SpawnPoint_C_SpawnWindSprite");
static_assert(sizeof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite) == 0x000160, "Wrong size on BP_WindSprite_SpawnPoint_C_SpawnWindSprite");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakTransform_Location) == 0x000070, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakTransform_Rotation) == 0x000088, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakTransform_Scale) == 0x0000A0, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakVector_X) == 0x0000B8, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakVector_Y) == 0x0000C0, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BreakVector_Z) == 0x0000C8, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_MakeTransform_ReturnValue) == 0x0000F0, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000150, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_SpawnWindSprite, CallFunc_FinishSpawningActor_ReturnValue) == 0x000158, "Member 'BP_WindSprite_SpawnPoint_C_SpawnWindSprite::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function BP_WindSprite_SpawnPoint.BP_WindSprite_SpawnPoint_C.StartSpawnProcess
// 0x0040 (0x0040 - 0x0000)
struct BP_WindSprite_SpawnPoint_C_StartSpawnProcess final
{
public:
	double                                        LocalMaxSpawnTime;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocalMinSpawnTime;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess) == 0x000008, "Wrong alignment on BP_WindSprite_SpawnPoint_C_StartSpawnProcess");
static_assert(sizeof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess) == 0x000040, "Wrong size on BP_WindSprite_SpawnPoint_C_StartSpawnProcess");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, LocalMaxSpawnTime) == 0x000000, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::LocalMaxSpawnTime' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, LocalMinSpawnTime) == 0x000008, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::LocalMinSpawnTime' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_StartSpawnProcess, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000038, "Member 'BP_WindSprite_SpawnPoint_C_StartSpawnProcess::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_WindSprite_SpawnPoint.BP_WindSprite_SpawnPoint_C.UserConstructionScript
// 0x00F0 (0x00F0 - 0x0000)
struct BP_WindSprite_SpawnPoint_C_UserConstructionScript final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WindSprite_SpawnPoint_C_UserConstructionScript) == 0x000010, "Wrong alignment on BP_WindSprite_SpawnPoint_C_UserConstructionScript");
static_assert(sizeof(BP_WindSprite_SpawnPoint_C_UserConstructionScript) == 0x0000F0, "Wrong size on BP_WindSprite_SpawnPoint_C_UserConstructionScript");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000060, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000078, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_GetActorForwardVector_ReturnValue) == 0x000090, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WindSprite_SpawnPoint_C_UserConstructionScript, CallFunc_InverseTransformLocation_ReturnValue) == 0x0000D8, "Member 'BP_WindSprite_SpawnPoint_C_UserConstructionScript::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");

}

