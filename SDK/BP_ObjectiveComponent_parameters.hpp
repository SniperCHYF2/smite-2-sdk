#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ObjectiveComponent

#include "Basic.hpp"

#include "S_ObjectivePhase_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.EndPhase
// 0x0001 (0x0001 - 0x0000)
struct BP_ObjectiveComponent_C_EndPhase final
{
public:
	bool                                          CallFunc_NotEqual_GameplayTag_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_EndPhase) == 0x000001, "Wrong alignment on BP_ObjectiveComponent_C_EndPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_EndPhase) == 0x000001, "Wrong size on BP_ObjectiveComponent_C_EndPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_EndPhase, CallFunc_NotEqual_GameplayTag_ReturnValue) == 0x000000, "Member 'BP_ObjectiveComponent_C_EndPhase::CallFunc_NotEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.ExecuteUbergraph_BP_ObjectiveComponent
// 0x0028 (0x0028 - 0x0000)
struct BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_PrevPhase;                      // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_NextPhase;                      // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_CustomEvent_CurrentPhase;                   // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_PhaseDuration;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent");
static_assert(sizeof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent) == 0x000028, "Wrong size on BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent");
static_assert(offsetof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent, EntryPoint) == 0x000000, "Member 'BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent, K2Node_CustomEvent_PrevPhase) == 0x000004, "Member 'BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent::K2Node_CustomEvent_PrevPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent, K2Node_CustomEvent_NextPhase) == 0x00000C, "Member 'BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent::K2Node_CustomEvent_NextPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent, K2Node_CustomEvent_CurrentPhase) == 0x000014, "Member 'BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent::K2Node_CustomEvent_CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent, K2Node_CustomEvent_PhaseDuration) == 0x000020, "Member 'BP_ObjectiveComponent_C_ExecuteUbergraph_BP_ObjectiveComponent::K2Node_CustomEvent_PhaseDuration' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.GoToPhase
// 0x0048 (0x0048 - 0x0000)
struct BP_ObjectiveComponent_C_GoToPhase final
{
public:
	struct FGameplayTag                           NextPhase;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	double                                        DurationOverride;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ObjectivePhase                      CallFunc_Array_Get_Item;                           // 0x0028(0x0018)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_GoToPhase) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_GoToPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_GoToPhase) == 0x000048, "Wrong size on BP_ObjectiveComponent_C_GoToPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, NextPhase) == 0x000000, "Member 'BP_ObjectiveComponent_C_GoToPhase::NextPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, DurationOverride) == 0x000008, "Member 'BP_ObjectiveComponent_C_GoToPhase::DurationOverride' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'BP_ObjectiveComponent_C_GoToPhase::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_ObjectiveComponent_C_GoToPhase::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'BP_ObjectiveComponent_C_GoToPhase::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_BooleanAND_ReturnValue) == 0x000041, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GoToPhase, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000042, "Member 'BP_ObjectiveComponent_C_GoToPhase::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.MulticastObjectivePhaseEnd
// 0x0010 (0x0010 - 0x0000)
struct BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd final
{
public:
	struct FGameplayTag                           PrevPhase;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NextPhase;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd) == 0x000004, "Wrong alignment on BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd");
static_assert(sizeof(BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd) == 0x000010, "Wrong size on BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd");
static_assert(offsetof(BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd, PrevPhase) == 0x000000, "Member 'BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd::PrevPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd, NextPhase) == 0x000008, "Member 'BP_ObjectiveComponent_C_MulticastObjectivePhaseEnd::NextPhase' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.MulticastObjectivePhaseStart
// 0x0010 (0x0010 - 0x0000)
struct BP_ObjectiveComponent_C_MulticastObjectivePhaseStart final
{
public:
	struct FGameplayTag                           CurrentPhase;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	double                                        PhaseDuration;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_MulticastObjectivePhaseStart) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_MulticastObjectivePhaseStart");
static_assert(sizeof(BP_ObjectiveComponent_C_MulticastObjectivePhaseStart) == 0x000010, "Wrong size on BP_ObjectiveComponent_C_MulticastObjectivePhaseStart");
static_assert(offsetof(BP_ObjectiveComponent_C_MulticastObjectivePhaseStart, CurrentPhase) == 0x000000, "Member 'BP_ObjectiveComponent_C_MulticastObjectivePhaseStart::CurrentPhase' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_MulticastObjectivePhaseStart, PhaseDuration) == 0x000008, "Member 'BP_ObjectiveComponent_C_MulticastObjectivePhaseStart::PhaseDuration' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.PauseCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct BP_ObjectiveComponent_C_PauseCurrentPhase final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_PauseCurrentPhase) == 0x000001, "Wrong alignment on BP_ObjectiveComponent_C_PauseCurrentPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_PauseCurrentPhase) == 0x000001, "Wrong size on BP_ObjectiveComponent_C_PauseCurrentPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_PauseCurrentPhase, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'BP_ObjectiveComponent_C_PauseCurrentPhase::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.ResumeCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct BP_ObjectiveComponent_C_ResumeCurrentPhase final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_ResumeCurrentPhase) == 0x000001, "Wrong alignment on BP_ObjectiveComponent_C_ResumeCurrentPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_ResumeCurrentPhase) == 0x000001, "Wrong size on BP_ObjectiveComponent_C_ResumeCurrentPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_ResumeCurrentPhase, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'BP_ObjectiveComponent_C_ResumeCurrentPhase::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.StartPhase
// 0x0038 (0x0038 - 0x0000)
struct BP_ObjectiveComponent_C_StartPhase final
{
public:
	double                                        DurationOverride;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_StartPhase) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_StartPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_StartPhase) == 0x000038, "Wrong size on BP_ObjectiveComponent_C_StartPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, DurationOverride) == 0x000000, "Member 'BP_ObjectiveComponent_C_StartPhase::DurationOverride' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_ObjectiveComponent_C_StartPhase::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_ObjectiveComponent_C_StartPhase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'BP_ObjectiveComponent_C_StartPhase::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'BP_ObjectiveComponent_C_StartPhase::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_ObjectiveComponent_C_StartPhase::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_StartPhase, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000034, "Member 'BP_ObjectiveComponent_C_StartPhase::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.GetCurrentObjectivePhaseDuration
// 0x0008 (0x0008 - 0x0000)
struct BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration final
{
public:
	double                                        PhaseDuration;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration");
static_assert(sizeof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration) == 0x000008, "Wrong size on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration, PhaseDuration) == 0x000000, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseDuration::PhaseDuration' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.GetCurrentObjectivePhaseElapsedTime
// 0x0020 (0x0020 - 0x0000)
struct BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime final
{
public:
	double                                        ElapsedTime;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime");
static_assert(sizeof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime) == 0x000020, "Wrong size on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime, ElapsedTime) == 0x000000, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime::ElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000008, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x00000C, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime, CallFunc_SelectFloat_A_ImplicitCast) == 0x000018, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseElapsedTime::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.GetCurrentObjectivePhaseRemainingTime
// 0x0020 (0x0020 - 0x0000)
struct BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime final
{
public:
	double                                        RemainingTime;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_A_ImplicitCast;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime) == 0x000008, "Wrong alignment on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime");
static_assert(sizeof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime) == 0x000020, "Wrong size on BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime, RemainingTime) == 0x000000, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime::RemainingTime' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000008, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x00000C, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime, CallFunc_SelectFloat_A_ImplicitCast) == 0x000018, "Member 'BP_ObjectiveComponent_C_GetCurrentObjectivePhaseRemainingTime::CallFunc_SelectFloat_A_ImplicitCast' has a wrong offset!");

// Function BP_ObjectiveComponent.BP_ObjectiveComponent_C.GetCurrentPhase
// 0x0008 (0x0008 - 0x0000)
struct BP_ObjectiveComponent_C_GetCurrentPhase final
{
public:
	struct FGameplayTag                           CurrentPhase;                                      // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ObjectiveComponent_C_GetCurrentPhase) == 0x000004, "Wrong alignment on BP_ObjectiveComponent_C_GetCurrentPhase");
static_assert(sizeof(BP_ObjectiveComponent_C_GetCurrentPhase) == 0x000008, "Wrong size on BP_ObjectiveComponent_C_GetCurrentPhase");
static_assert(offsetof(BP_ObjectiveComponent_C_GetCurrentPhase, CurrentPhase) == 0x000000, "Member 'BP_ObjectiveComponent_C_GetCurrentPhase::CurrentPhase' has a wrong offset!");

}

