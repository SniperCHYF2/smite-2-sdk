#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BotFactory_Leashed_Jungle

#include "Basic.hpp"

#include "EFactoryDifficulty_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EJungleTribes_structs.hpp"
#include "BP_BotFactory_Leashed_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BotFactory_Leashed_Jungle.BP_BotFactory_Leashed_Jungle_C
// 0x00D8 (0x09C0 - 0x08E8)
class ABP_BotFactory_Leashed_Jungle_C : public ABP_BotFactory_Leashed_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BotFactory_Leashed_Jungle_C;     // 0x08E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWAIPlayComponent*                     AIPlay;                                            // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EFactoryDifficulty                            FactoryDifficulty;                                 // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomizeSpawns;                                   // 0x08F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableRenownPrototype;                             // 0x08FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FB[0x1];                                      // 0x08FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TribeLevel;                                        // 0x08FC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const struct FGameplayTag& SpawnTableTag)> SpawnTableUpdated;      // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldShowInfamyProgress;                          // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           JungleTypeTag;                                     // 0x0914(0x0008)(Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EJungleTribes>                         StartingTribeSet;                                  // 0x0920(0x0010)(Edit, BlueprintVisible)
	TArray<EJungleTribes>                         CurrentTribeSet;                                   // 0x0930(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           ManticoreSpawnTag;                                 // 0x0940(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, EJungleTribes>                    TribeSet;                                          // 0x0948(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           CentaurSpawnTag;                                   // 0x0998(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ChimeraSpawnTag;                                   // 0x09A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SatyrSpawnTag;                                     // 0x09A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BigHarpySpawnTag;                                  // 0x09B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SmallHarpySpawnTag;                                // 0x09B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AwardRenown(class AHWCharacter_Base* characterKilled, class AActor* Killer);
	void ExecuteUbergraph_BP_BotFactory_Leashed_Jungle(int32 EntryPoint);
	void GetSpawnTableQueue();
	void MulticastSpawnTableUpdated(const struct FGameplayTag& SpawnTableTag);
	void OnFactoryEmptied(class AActor* Causer);
	void OnSpawnBotDied(class AHWCharacter_Base* characterKilled, class AActor* Killer);
	void OnSpawnedBot(class AHWCharacter_Base* characterSpawned);
	void RandomizeBasedOnTribes();
	void RandomizeNextSpawn();
	void RandomizeSpawnsBasedOnDifficulty();
	void ReceiveBeginPlay();
	void UpdateFactoryLevel(int32 Level);
	void UpdateSpawnTable(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BotFactory_Leashed_Jungle_C">();
	}
	static class ABP_BotFactory_Leashed_Jungle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BotFactory_Leashed_Jungle_C>();
	}
};
static_assert(alignof(ABP_BotFactory_Leashed_Jungle_C) == 0x000008, "Wrong alignment on ABP_BotFactory_Leashed_Jungle_C");
static_assert(sizeof(ABP_BotFactory_Leashed_Jungle_C) == 0x0009C0, "Wrong size on ABP_BotFactory_Leashed_Jungle_C");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, UberGraphFrame_BP_BotFactory_Leashed_Jungle_C) == 0x0008E8, "Member 'ABP_BotFactory_Leashed_Jungle_C::UberGraphFrame_BP_BotFactory_Leashed_Jungle_C' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, AIPlay) == 0x0008F0, "Member 'ABP_BotFactory_Leashed_Jungle_C::AIPlay' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, FactoryDifficulty) == 0x0008F8, "Member 'ABP_BotFactory_Leashed_Jungle_C::FactoryDifficulty' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, RandomizeSpawns) == 0x0008F9, "Member 'ABP_BotFactory_Leashed_Jungle_C::RandomizeSpawns' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, EnableRenownPrototype) == 0x0008FA, "Member 'ABP_BotFactory_Leashed_Jungle_C::EnableRenownPrototype' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, TribeLevel) == 0x0008FC, "Member 'ABP_BotFactory_Leashed_Jungle_C::TribeLevel' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, SpawnTableUpdated) == 0x000900, "Member 'ABP_BotFactory_Leashed_Jungle_C::SpawnTableUpdated' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, ShouldShowInfamyProgress) == 0x000910, "Member 'ABP_BotFactory_Leashed_Jungle_C::ShouldShowInfamyProgress' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, JungleTypeTag) == 0x000914, "Member 'ABP_BotFactory_Leashed_Jungle_C::JungleTypeTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, StartingTribeSet) == 0x000920, "Member 'ABP_BotFactory_Leashed_Jungle_C::StartingTribeSet' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, CurrentTribeSet) == 0x000930, "Member 'ABP_BotFactory_Leashed_Jungle_C::CurrentTribeSet' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, ManticoreSpawnTag) == 0x000940, "Member 'ABP_BotFactory_Leashed_Jungle_C::ManticoreSpawnTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, TribeSet) == 0x000948, "Member 'ABP_BotFactory_Leashed_Jungle_C::TribeSet' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, CentaurSpawnTag) == 0x000998, "Member 'ABP_BotFactory_Leashed_Jungle_C::CentaurSpawnTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, ChimeraSpawnTag) == 0x0009A0, "Member 'ABP_BotFactory_Leashed_Jungle_C::ChimeraSpawnTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, SatyrSpawnTag) == 0x0009A8, "Member 'ABP_BotFactory_Leashed_Jungle_C::SatyrSpawnTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, BigHarpySpawnTag) == 0x0009B0, "Member 'ABP_BotFactory_Leashed_Jungle_C::BigHarpySpawnTag' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_Leashed_Jungle_C, SmallHarpySpawnTag) == 0x0009B8, "Member 'ABP_BotFactory_Leashed_Jungle_C::SmallHarpySpawnTag' has a wrong offset!");

}

