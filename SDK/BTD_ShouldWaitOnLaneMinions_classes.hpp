#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_ShouldWaitOnLaneMinions

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_ShouldWaitOnLaneMinions.BTD_ShouldWaitOnLaneMinions_C
// 0x0058 (0x00F8 - 0x00A0)
class UBTD_ShouldWaitOnLaneMinions_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FBlackboardKeySelector                 WaitOnLaneMinionsBlackboardKey;                    // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 WaypointBlackboardKey;                             // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        MaxDistanceFromLane;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsAheadOfMinionWave(class AAIController* Controller, bool* IsAhead);
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_ShouldWaitOnLaneMinions_C">();
	}
	static class UBTD_ShouldWaitOnLaneMinions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_ShouldWaitOnLaneMinions_C>();
	}
};
static_assert(alignof(UBTD_ShouldWaitOnLaneMinions_C) == 0x000008, "Wrong alignment on UBTD_ShouldWaitOnLaneMinions_C");
static_assert(sizeof(UBTD_ShouldWaitOnLaneMinions_C) == 0x0000F8, "Wrong size on UBTD_ShouldWaitOnLaneMinions_C");
static_assert(offsetof(UBTD_ShouldWaitOnLaneMinions_C, WaitOnLaneMinionsBlackboardKey) == 0x0000A0, "Member 'UBTD_ShouldWaitOnLaneMinions_C::WaitOnLaneMinionsBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldWaitOnLaneMinions_C, WaypointBlackboardKey) == 0x0000C8, "Member 'UBTD_ShouldWaitOnLaneMinions_C::WaypointBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldWaitOnLaneMinions_C, MaxDistanceFromLane) == 0x0000F0, "Member 'UBTD_ShouldWaitOnLaneMinions_C::MaxDistanceFromLane' has a wrong offset!");

}

