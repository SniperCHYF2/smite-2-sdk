#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HemingwayUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "RallyHereIntegration_structs.hpp"
#include "Hemingway_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Enum HemingwayUI.EHWFilterSortMethod
// NumValues: 0x0009
enum class EHWFilterSortMethod : uint8
{
	Alphabetical                             = 0,
	Owned                                    = 1,
	Mastery                                  = 2,
	ClosestRank                              = 3,
	OnRotation                               = 4,
	Favorites                                = 5,
	DateModified                             = 6,
	DateCreated                              = 7,
	EHWFilterSortMethod_MAX                  = 8,
};

// Enum HemingwayUI.EHWPlayerContextActions
// NumValues: 0x000C
enum class EHWPlayerContextActions : uint8
{
	Back                                     = 0,
	ViewProfile                              = 1,
	TradeRoles                               = 2,
	TradeGods                                = 3,
	MuteVoice                                = 4,
	MuteText                                 = 5,
	MuteVGS                                  = 6,
	MutePings                                = 7,
	MuteAll                                  = 8,
	Report                                   = 9,
	ActivateBooster                          = 10,
	EHWPlayerContextActions_MAX              = 11,
};

// Enum HemingwayUI.EHWPlayerCardEquipState
// NumValues: 0x0008
enum class EHWPlayerCardEquipState : uint8
{
	Saved                                    = 0,
	Preview                                  = 1,
	BadgeEquip                               = 2,
	TrackerEquip                             = 3,
	CardVFXEquip                             = 4,
	TitleEquip                               = 5,
	JumpStampEquip                           = 6,
	EHWPlayerCardEquipState_MAX              = 7,
};

// Enum HemingwayUI.EHWTabChangeCause
// NumValues: 0x0003
enum class EHWTabChangeCause : uint8
{
	Auto                                     = 0,
	UserInput                                = 1,
	EHWTabChangeCause_MAX                    = 2,
};

// Enum HemingwayUI.EHWBuffWidgetType
// NumValues: 0x0003
enum class EHWBuffWidgetType : uint8
{
	Buff                                     = 0,
	Debuff                                   = 1,
	EHWBuffWidgetType_MAX                    = 2,
};

// Enum HemingwayUI.EHWChatWindowState
// NumValues: 0x0004
enum class EHWChatWindowState : uint8
{
	Hidden                                   = 0,
	Preview                                  = 1,
	Full                                     = 2,
	EHWChatWindowState_MAX                   = 3,
};

// Enum HemingwayUI.EHWChatWindowDisplayedEntryType
// NumValues: 0x0006
enum class EHWChatWindowDisplayedEntryType : uint8
{
	None                                     = 0,
	VGS                                      = 1,
	RemotePlayer                             = 2,
	LocalPlayer                              = 4,
	System                                   = 8,
	EHWChatWindowDisplayedEntryType_MAX      = 9,
};

// Enum HemingwayUI.EHWChoiceButtonState
// NumValues: 0x0008
enum class EHWChoiceButtonState : uint8
{
	Available                                = 0,
	LocallySelected                          = 1,
	LocallyLocked                            = 2,
	TeammateSelected                         = 3,
	TeammateLocked                           = 4,
	OpponentLocked                           = 5,
	Banned                                   = 6,
	EHWChoiceButtonState_MAX                 = 7,
};

// Enum HemingwayUI.EHWDraftLobbyWidgetState
// NumValues: 0x0007
enum class EHWDraftLobbyWidgetState : uint8
{
	Setup                                    = 0,
	CharacterDraft                           = 1,
	SkinDraft                                = 2,
	NoDraft                                  = 3,
	EndDraftEarly                            = 4,
	ClosingLobby                             = 5,
	EHWDraftLobbyWidgetState_MAX             = 6,
};

// Enum HemingwayUI.EHWAutoRegisterTeamType
// NumValues: 0x0004
enum class EHWAutoRegisterTeamType : uint8
{
	LocalTeam                                = 0,
	ExactTeamNum                             = 1,
	RelativeEnemyTeam                        = 2,
	EHWAutoRegisterTeamType_MAX              = 3,
};

// Enum HemingwayUI.EHWSupportedTimespans
// NumValues: 0x0006
enum class EHWSupportedTimespans : uint8
{
	NONE                                     = 0,
	LAST_DAY                                 = 1,
	ONE_WEEK                                 = 2,
	TWO_WEEKS                                = 4,
	THIRTY_DAYS                              = 8,
	EHWSupportedTimespans_MAX                = 9,
};

// Enum HemingwayUI.EHWTradeEntryState
// NumValues: 0x0004
enum class EHWTradeEntryState : uint8
{
	Available                                = 0,
	Blocked                                  = 1,
	Pending                                  = 2,
	EHWTradeEntryState_MAX                   = 3,
};

// Enum HemingwayUI.EHWGridNavigationRule
// NumValues: 0x0006
enum class EHWGridNavigationRule : uint8
{
	NoNavigation                             = 0,
	NoWrapAround                             = 1,
	WrapAround                               = 2,
	WrapHorizontalOnly                       = 3,
	WrapVerticalOnly                         = 4,
	EHWGridNavigationRule_MAX                = 5,
};

// Enum HemingwayUI.EHWUINavigationEdgeCustomBehavior
// NumValues: 0x0002
enum class EHWUINavigationEdgeCustomBehavior : uint8
{
	CopyFromContainer                        = 0,
	EHWUINavigationEdgeCustomBehavior_MAX    = 1,
};

// Enum HemingwayUI.EHWViewportZOrder
// NumValues: 0x0006
enum class EHWViewportZOrder : uint8
{
	HUDWidget                                = 0,
	FullscreenEffectWidget                   = 1,
	PersistentWidget                         = 10,
	Watermark                                = 100,
	DebugHUD                                 = 200,
	EHWViewportZOrder_MAX                    = 201,
};

// Enum HemingwayUI.EHWOrientation
// NumValues: 0x0003
enum class EHWOrientation : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	EHWOrientation_MAX                       = 2,
};

// Enum HemingwayUI.EHWHorizontalAlignment
// NumValues: 0x0003
enum class EHWHorizontalAlignment : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	EHWHorizontalAlignment_MAX               = 2,
};

// Enum HemingwayUI.EHWVerticalAlignment
// NumValues: 0x0003
enum class EHWVerticalAlignment : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	EHWVerticalAlignment_MAX                 = 2,
};

// Enum HemingwayUI.EHWButtonEquipStatus
// NumValues: 0x0006
enum class EHWButtonEquipStatus : uint8
{
	Equip                                    = 0,
	Equipped                                 = 1,
	Adjust                                   = 2,
	Locked                                   = 3,
	Redirect                                 = 4,
	EHWButtonEquipStatus_MAX                 = 5,
};

// Enum HemingwayUI.EHWViewRedirectType
// NumValues: 0x0003
enum class EHWViewRedirectType : uint8
{
	DisplayItem                              = 0,
	ObtainItem                               = 1,
	EHWViewRedirectType_MAX                  = 2,
};

// Enum HemingwayUI.EHWGodCollectionTabIndex
// NumValues: 0x0006
enum class EHWGodCollectionTabIndex : uint8
{
	Skins                                    = 0,
	Badges                                   = 1,
	Trackers                                 = 2,
	VFX                                      = 3,
	JumpStamp                                = 4,
	EHWGodCollectionTabIndex_MAX             = 5,
};

// Enum HemingwayUI.EHWGodBuilderState
// NumValues: 0x000B
enum class EHWGodBuilderState : uint8
{
	Loading                                  = 0,
	Previewing                               = 1,
	EditingBuild                             = 2,
	EditingRole                              = 3,
	EditingAbilities                         = 4,
	EditingItem                              = 5,
	EditingItemTree                          = 6,
	EditingMode                              = 7,
	EditingItemFilter                        = 8,
	EditingItemSearch                        = 9,
	EHWGodBuilderState_MAX                   = 10,
};

// Enum HemingwayUI.EHWGodBuilderError
// NumValues: 0x0005
enum class EHWGodBuilderError : uint8
{
	None                                     = 0,
	UpdateFailed                             = 1,
	UnacceptableContent                      = 2,
	CopyFailed                               = 3,
	EHWGodBuilderError_MAX                   = 4,
};

// Enum HemingwayUI.EHWPlayerProfileLoadoutTabIndex
// NumValues: 0x000A
enum class EHWPlayerProfileLoadoutTabIndex : uint8
{
	Avatars                                  = 0,
	Titles                                   = 1,
	GlobalEmotes                             = 2,
	MusicPacks                               = 3,
	PlayerNameColor                          = 4,
	WardSkin                                 = 5,
	SoundEmotes                              = 6,
	AnnouncerPacks                           = 7,
	TeleporterVFX                            = 8,
	EHWPlayerProfileLoadoutTabIndex_MAX      = 9,
};

// Enum HemingwayUI.EHWQueueSelectState
// NumValues: 0x0009
enum class EHWQueueSelectState : uint8
{
	MainLanding                              = 0,
	Casual                                   = 1,
	Ranked                                   = 2,
	Coop                                     = 3,
	CoopConquest                             = 4,
	CoopArena                                = 5,
	Training                                 = 6,
	Custom                                   = 7,
	EHWQueueSelectState_MAX                  = 8,
};

// Enum HemingwayUI.EHWSupporterStoreDisplayType
// NumValues: 0x0007
enum class EHWSupporterStoreDisplayType : uint8
{
	Default                                  = 0,
	ColorBundle                              = 1,
	GlobalEmoteSlotBundle                    = 2,
	SoundEmoteBundle                         = 3,
	TeleportBundle                           = 4,
	MixedBundle                              = 5,
	EHWSupporterStoreDisplayType_MAX         = 6,
};

// Enum HemingwayUI.EHWArenaSuddenDeathState
// NumValues: 0x0003
enum class EHWArenaSuddenDeathState : uint8
{
	None                                     = 0,
	SuddenDeath                              = 1,
	EHWArenaSuddenDeathState_MAX             = 2,
};

// Enum HemingwayUI.EHWAutoBuildSelectionType
// NumValues: 0x0005
enum class EHWAutoBuildSelectionType : uint8
{
	None                                     = 0,
	AutoGodBuild                             = 1,
	Relic                                    = 2,
	Finished                                 = 3,
	EHWAutoBuildSelectionType_MAX            = 4,
};

// Enum HemingwayUI.EHWDamageFeedbackSide
// NumValues: 0x0006
enum class EHWDamageFeedbackSide : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Top                                      = 2,
	Bottom                                   = 3,
	Count                                    = 4,
	EHWDamageFeedbackSide_MAX                = 5,
};

// Enum HemingwayUI.EHWEquipmentAcquisitionDetailLevel
// NumValues: 0x0006
enum class EHWEquipmentAcquisitionDetailLevel : uint8
{
	Off                                      = 0,
	Minimal                                  = 1,
	Normal                                   = 2,
	Descriptive                              = 3,
	Last                                     = 4,
	EHWEquipmentAcquisitionDetailLevel_MAX   = 5,
};

// Enum HemingwayUI.EHWFloatingTextOverrideType
// NumValues: 0x0004
enum class EHWFloatingTextOverrideType : uint8
{
	None                                     = 0,
	DamageImmune                             = 1,
	LeashImmune                              = 2,
	EHWFloatingTextOverrideType_MAX          = 3,
};

// Enum HemingwayUI.EHWHUDABTestingType
// NumValues: 0x0005
enum class EHWHUDABTestingType : uint8
{
	None                                     = 0,
	KV                                       = 1,
	PlayerId                                 = 2,
	Random                                   = 3,
	EHWHUDABTestingType_MAX                  = 4,
};

// Enum HemingwayUI.ENetworkPingState
// NumValues: 0x0006
enum class ENetworkPingState : uint8
{
	Normal                                   = 0,
	HighPing                                 = 1,
	VeryHighPing                             = 2,
	HighJitter                               = 3,
	VeryHighJitter                           = 4,
	ENetworkPingState_MAX                    = 5,
};

// Enum HemingwayUI.EHWIconDisplayBaseTeamSortingZOrder
// NumValues: 0x0004
enum class EHWIconDisplayBaseTeamSortingZOrder : uint8
{
	Equal                                    = 0,
	FriendlyOnTop                            = 1,
	EnemyOnTop                               = 2,
	EHWIconDisplayBaseTeamSortingZOrder_MAX  = 3,
};

// Enum HemingwayUI.EHWBracketHighlightType
// NumValues: 0x0005
enum class EHWBracketHighlightType : uint8
{
	None                                     = 0,
	EnemiesOnly                              = 1,
	AlliesOnly                               = 2,
	All                                      = 3,
	EHWBracketHighlightType_MAX              = 4,
};

// Enum HemingwayUI.EHWMinimapIconColoration
// NumValues: 0x0003
enum class EHWMinimapIconColoration : uint8
{
	AttitudeBased                            = 0,
	TeamBased                                = 1,
	EHWMinimapIconColoration_MAX             = 2,
};

// Enum HemingwayUI.EHWMinionBlipType
// NumValues: 0x0004
enum class EHWMinionBlipType : uint8
{
	Default                                  = 0,
	Champion                                 = 1,
	Minotaur                                 = 2,
	EHWMinionBlipType_MAX                    = 3,
};

// Enum HemingwayUI.EHWOverrideZOrderType
// NumValues: 0x0003
enum class EHWOverrideZOrderType : uint8
{
	Replace                                  = 0,
	Increment                                = 1,
	EHWOverrideZOrderType_MAX                = 2,
};

// Enum HemingwayUI.EHWNameplateNameDisplayOption
// NumValues: 0x0005
enum class EHWNameplateNameDisplayOption : uint8
{
	God                                      = 0,
	Player                                   = 1,
	PlayerAndTitle                           = 2,
	None                                     = 3,
	EHWNameplateNameDisplayOption_MAX        = 4,
};

// Enum HemingwayUI.EHWNameplateHighlightType
// NumValues: 0x0005
enum class EHWNameplateHighlightType : uint8
{
	None                                     = 0,
	EnemiesOnly                              = 1,
	AlliesOnly                               = 2,
	All                                      = 3,
	EHWNameplateHighlightType_MAX            = 4,
};

// Enum HemingwayUI.EHWPassiveApplyType
// NumValues: 0x0004
enum class EHWPassiveApplyType : uint8
{
	Enemy                                    = 0,
	Friendly                                 = 1,
	Both                                     = 2,
	EHWPassiveApplyType_MAX                  = 3,
};

// Enum HemingwayUI.EHWWorldOverlayRequiredLoS
// NumValues: 0x0004
enum class EHWWorldOverlayRequiredLoS : uint8
{
	None                                     = 0,
	Actor                                    = 1,
	Widget                                   = 2,
	EHWWorldOverlayRequiredLoS_MAX           = 3,
};

// Enum HemingwayUI.EHWItemStoreGridDetailLevel
// NumValues: 0x0005
enum class EHWItemStoreGridDetailLevel : uint8
{
	Default                                  = 0,
	Minimal                                  = 1,
	Descriptive                              = 2,
	Last                                     = 3,
	EHWItemStoreGridDetailLevel_MAX          = 4,
};

// Enum HemingwayUI.EHWDefaultRoleSelectionType
// NumValues: 0x0004
enum class EHWDefaultRoleSelectionType : uint8
{
	Recommended                              = 0,
	AllItem                                  = 1,
	Role                                     = 2,
	EHWDefaultRoleSelectionType_MAX          = 3,
};

// Enum HemingwayUI.EHWItemStoreSubTreeLineWidth
// NumValues: 0x0005
enum class EHWItemStoreSubTreeLineWidth : uint8
{
	Default                                  = 0,
	RootChild                                = 1,
	Component                                = 2,
	Last                                     = 3,
	EHWItemStoreSubTreeLineWidth_MAX         = 4,
};

// Enum HemingwayUI.EHWItemStoreLayoutType
// NumValues: 0x0006
enum class EHWItemStoreLayoutType : uint8
{
	Default                                  = 0,
	LeftAligned                              = 1,
	Centered                                 = 2,
	Split                                    = 3,
	Last                                     = 4,
	EHWItemStoreLayoutType_MAX               = 5,
};

// Enum HemingwayUI.EHWItemStoreLeftDisplayType
// NumValues: 0x0003
enum class EHWItemStoreLeftDisplayType : uint8
{
	Default                                  = 0,
	FixedCategory                            = 1,
	EHWItemStoreLeftDisplayType_MAX          = 2,
};

// Enum HemingwayUI.EHWCharacterStatBuffStatus
// NumValues: 0x0004
enum class EHWCharacterStatBuffStatus : uint8
{
	None                                     = 0,
	Buffed                                   = 1,
	Debuffed                                 = 2,
	EHWCharacterStatBuffStatus_MAX           = 3,
};

// Enum HemingwayUI.EHWCharacterStatCategory
// NumValues: 0x0004
enum class EHWCharacterStatCategory : uint8
{
	Offense                                  = 0,
	Defense                                  = 1,
	Utility                                  = 2,
	EHWCharacterStatCategory_MAX             = 3,
};

// Enum HemingwayUI.EHWCustomCharacterStatWidgetType
// NumValues: 0x0003
enum class EHWCustomCharacterStatWidgetType : uint8
{
	None                                     = 0,
	MovementSpeed                            = 1,
	EHWCustomCharacterStatWidgetType_MAX     = 2,
};

// Enum HemingwayUI.EHWBlockedReasonSortType
// NumValues: 0x0003
enum class EHWBlockedReasonSortType : uint8
{
	MostRecent                               = 0,
	Duration                                 = 1,
	EHWBlockedReasonSortType_MAX             = 2,
};

// Enum HemingwayUI.EHWUIAbilityFlowPhase
// NumValues: 0x0005
enum class EHWUIAbilityFlowPhase : uint8
{
	Inactive                                 = 0,
	Aiming                                   = 1,
	PreFire                                  = 2,
	Fired                                    = 3,
	EHWUIAbilityFlowPhase_MAX                = 4,
};

// Enum HemingwayUI.EHWShowActivePassive
// NumValues: 0x0004
enum class EHWShowActivePassive : uint8
{
	EHWShowActivePassive_ShowBoth            = 0,
	EHWShowActivePassive_ShowActive          = 1,
	EHWShowActivePassive_ShowPassive         = 2,
	EHWShowActivePassive_MAX                 = 3,
};

// Enum HemingwayUI.EHWSpectatorStatTypes
// NumValues: 0x0009
enum class EHWSpectatorStatTypes : uint8
{
	GoldPerMinute                            = 0,
	GoldInHand                               = 1,
	XPPerMinute                              = 2,
	PlayerDamage                             = 3,
	SelfHealingDone                          = 4,
	HealingDone                              = 5,
	NetWorth                                 = 6,
	DamageMitigated                          = 7,
	EHWSpectatorStatTypes_MAX                = 8,
};

// Enum HemingwayUI.EHWTeamLayoutOrientation
// NumValues: 0x0003
enum class EHWTeamLayoutOrientation : uint8
{
	Horizontal                               = 0,
	Vertical                                 = 1,
	EHWTeamLayoutOrientation_MAX             = 2,
};

// Enum HemingwayUI.EHWSortableGridSortOrder
// NumValues: 0x0002
enum class EHWSortableGridSortOrder : uint8
{
	Alphabetic                               = 0,
	EHWSortableGridSortOrder_MAX             = 1,
};

// Enum HemingwayUI.EHWExclusiveWidgetType
// NumValues: 0x0004
enum class EHWExclusiveWidgetType : uint8
{
	ViewRouteWidget                          = 0,
	InputHandlerWidget                       = 1,
	HUDNavigation                            = 2,
	EHWExclusiveWidgetType_MAX               = 3,
};

// Enum HemingwayUI.EHWUIActionBindingFlags
// NumValues: 0x0007
enum class EHWUIActionBindingFlags : uint8
{
	DisplayInActionBar                       = 1,
	ConsumesInput                            = 2,
	IsPersistent                             = 4,
	IsFallback                               = 8,
	CanDisplayInActionBarWithoutKey          = 16,
	None                                     = 0,
	EHWUIActionBindingFlags_MAX              = 17,
};

// Enum HemingwayUI.EHWUIStyleGlobalModifierType
// NumValues: 0x0005
enum class EHWUIStyleGlobalModifierType : uint8
{
	None                                     = 0,
	Menu                                     = 1,
	HUD                                      = 2,
	World                                    = 3,
	EHWUIStyleGlobalModifierType_MAX         = 4,
};

// Enum HemingwayUI.EHWUIStylePlatformModifierType
// NumValues: 0x0004
enum class EHWUIStylePlatformModifierType : uint8
{
	None                                     = 0,
	FontSize                                 = 1,
	All                                      = 2,
	EHWUIStylePlatformModifierType_MAX       = 3,
};

// Enum HemingwayUI.EHWHUDLayoutPreset
// NumValues: 0x0004
enum class EHWHUDLayoutPreset : uint8
{
	Default                                  = 0,
	Centered                                 = 1,
	Split                                    = 2,
	EHWHUDLayoutPreset_MAX                   = 3,
};

// Enum HemingwayUI.EHWViewRedirectConfigType
// NumValues: 0x0003
enum class EHWViewRedirectConfigType : uint8
{
	ViewRedirect                             = 0,
	External                                 = 1,
	EHWViewRedirectConfigType_MAX            = 2,
};

// Enum HemingwayUI.EHWTooltipAxis
// NumValues: 0x0003
enum class EHWTooltipAxis : uint8
{
	Vertical                                 = 0,
	Horizontal                               = 1,
	EHWTooltipAxis_MAX                       = 2,
};

// Enum HemingwayUI.EHWButtonFocusMode
// NumValues: 0x0003
enum class EHWButtonFocusMode : uint8
{
	NoChange                                 = 0,
	GamepadOnlyFocus                         = 1,
	EHWButtonFocusMode_MAX                   = 2,
};

// Enum HemingwayUI.EHWImageColorStyleLocation
// NumValues: 0x0004
enum class EHWImageColorStyleLocation : uint8
{
	ColorAndOpacity                          = 0,
	Outline                                  = 1,
	Material                                 = 2,
	EHWImageColorStyleLocation_MAX           = 3,
};

// Enum HemingwayUI.EHWProgressBarColorStyleLocation
// NumValues: 0x0003
enum class EHWProgressBarColorStyleLocation : uint8
{
	ColorAndOpacity                          = 0,
	Material                                 = 1,
	EHWProgressBarColorStyleLocation_MAX     = 2,
};

// Enum HemingwayUI.EHWDynamicAnnouncementAllowedPhase
// NumValues: 0x0006
enum class EHWDynamicAnnouncementAllowedPhase : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Client                                   = 2,
	DraftLobby                               = 4,
	All                                      = 255,
	EHWDynamicAnnouncementAllowedPhase_MAX   = 256,
};

// Enum HemingwayUI.EHWGodBuilderItemEntryType
// NumValues: 0x0004
enum class EHWGodBuilderItemEntryType : uint8
{
	None                                     = 0,
	StarterItem                              = 1,
	RelicItem                                = 2,
	EHWGodBuilderItemEntryType_MAX           = 3,
};

// Enum HemingwayUI.EHWGodBuilderEntryType
// NumValues: 0x0004
enum class EHWGodBuilderEntryType : uint8
{
	None                                     = 0,
	FinalBuild                               = 1,
	StartingItems                            = 2,
	EHWGodBuilderEntryType_MAX               = 3,
};

// Enum HemingwayUI.EHWBuildsListDisplayType
// NumValues: 0x0003
enum class EHWBuildsListDisplayType : uint8
{
	Personal                                 = 0,
	Community                                = 1,
	EHWBuildsListDisplayType_MAX             = 2,
};

// Enum HemingwayUI.EHWButtonStateFlag
// NumValues: 0x0005
enum class EHWButtonStateFlag : uint8
{
	None                                     = 0,
	CheckMark                                = 1,
	Lock                                     = 2,
	VFX                                      = 4,
	EHWButtonStateFlag_MAX                   = 5,
};

// Enum HemingwayUI.EHWCallToActionListenType
// NumValues: 0x0004
enum class EHWCallToActionListenType : uint8
{
	Active                                   = 0,
	SeenAmount                               = 1,
	ActiveChildrenCount                      = 2,
	EHWCallToActionListenType_MAX            = 3,
};

// Enum HemingwayUI.EHWDragAreaCanvasSlotSearch
// NumValues: 0x0003
enum class EHWDragAreaCanvasSlotSearch : uint8
{
	Self                                     = 0,
	RootUserWidget                           = 1,
	EHWDragAreaCanvasSlotSearch_MAX          = 2,
};

// Enum HemingwayUI.EHWQuestDisplayState
// NumValues: 0x0004
enum class EHWQuestDisplayState : uint8
{
	Normal                                   = 0,
	Claimable                                = 1,
	Complete                                 = 2,
	EHWQuestDisplayState_MAX                 = 3,
};

// Enum HemingwayUI.EHWPurchaseConfirmResult
// NumValues: 0x0004
enum class EHWPurchaseConfirmResult : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	Pending                                  = 2,
	EHWPurchaseConfirmResult_MAX             = 3,
};

// Enum HemingwayUI.EHWPrecompiledShaderState
// NumValues: 0x0003
enum class EHWPrecompiledShaderState : uint8
{
	Preparing                                = 0,
	Precompiling                             = 1,
	EHWPrecompiledShaderState_MAX            = 2,
};

// ScriptStruct HemingwayUI.DebugHUDCommand
// 0x0020 (0x0020 - 0x0000)
struct FDebugHUDCommand final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugHUDCommand) == 0x000008, "Wrong alignment on FDebugHUDCommand");
static_assert(sizeof(FDebugHUDCommand) == 0x000020, "Wrong size on FDebugHUDCommand");
static_assert(offsetof(FDebugHUDCommand, Name) == 0x000000, "Member 'FDebugHUDCommand::Name' has a wrong offset!");
static_assert(offsetof(FDebugHUDCommand, Command) == 0x000010, "Member 'FDebugHUDCommand::Command' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDEditorLayoutCustomModifier
// 0x000C (0x000C - 0x0000)
struct FHWHUDEditorLayoutCustomModifier final
{
public:
	class FName                                   ModifierName;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModifierValue;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDEditorLayoutCustomModifier) == 0x000004, "Wrong alignment on FHWHUDEditorLayoutCustomModifier");
static_assert(sizeof(FHWHUDEditorLayoutCustomModifier) == 0x00000C, "Wrong size on FHWHUDEditorLayoutCustomModifier");
static_assert(offsetof(FHWHUDEditorLayoutCustomModifier, ModifierName) == 0x000000, "Member 'FHWHUDEditorLayoutCustomModifier::ModifierName' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayoutCustomModifier, ModifierValue) == 0x000008, "Member 'FHWHUDEditorLayoutCustomModifier::ModifierValue' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDEditorLayoutEntry
// 0x0060 (0x0060 - 0x0000)
struct FHWHUDEditorLayoutEntry final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnchorData                            AnchorData;                                        // 0x0010(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FHWHUDEditorLayoutCustomModifier> CustomModifiers;                                 // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDEditorLayoutEntry) == 0x000008, "Wrong alignment on FHWHUDEditorLayoutEntry");
static_assert(sizeof(FHWHUDEditorLayoutEntry) == 0x000060, "Wrong size on FHWHUDEditorLayoutEntry");
static_assert(offsetof(FHWHUDEditorLayoutEntry, bIsVisible) == 0x000000, "Member 'FHWHUDEditorLayoutEntry::bIsVisible' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayoutEntry, Scale) == 0x000004, "Member 'FHWHUDEditorLayoutEntry::Scale' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayoutEntry, Opacity) == 0x000008, "Member 'FHWHUDEditorLayoutEntry::Opacity' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayoutEntry, AnchorData) == 0x000010, "Member 'FHWHUDEditorLayoutEntry::AnchorData' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayoutEntry, CustomModifiers) == 0x000050, "Member 'FHWHUDEditorLayoutEntry::CustomModifiers' has a wrong offset!");

// ScriptStruct HemingwayUI.HWTrackedEffectData
// 0x0300 (0x0300 - 0x0000)
struct FHWTrackedEffectData final
{
public:
	struct FGameplayTag                           MatchedTag;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffectUIData>      MatchedClass;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UGameplayEffect>         EffectSpecDef;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UHWGameplayAbility>      AbilityCDO;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectLevel;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0028(0x02A8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x20];                                     // 0x02E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWTrackedEffectData) == 0x000008, "Wrong alignment on FHWTrackedEffectData");
static_assert(sizeof(FHWTrackedEffectData) == 0x000300, "Wrong size on FHWTrackedEffectData");
static_assert(offsetof(FHWTrackedEffectData, MatchedTag) == 0x000000, "Member 'FHWTrackedEffectData::MatchedTag' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, MatchedClass) == 0x000008, "Member 'FHWTrackedEffectData::MatchedClass' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, EffectSpecDef) == 0x000010, "Member 'FHWTrackedEffectData::EffectSpecDef' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, AbilityCDO) == 0x000018, "Member 'FHWTrackedEffectData::AbilityCDO' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, EffectLevel) == 0x000020, "Member 'FHWTrackedEffectData::EffectLevel' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, EffectSpec) == 0x000028, "Member 'FHWTrackedEffectData::EffectSpec' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, Instigator) == 0x0002D0, "Member 'FHWTrackedEffectData::Instigator' has a wrong offset!");
static_assert(offsetof(FHWTrackedEffectData, EffectHandle) == 0x0002D8, "Member 'FHWTrackedEffectData::EffectHandle' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDeathRecapDamageBundle
// 0x0070 (0x0070 - 0x0000)
struct FHWDeathRecapDamageBundle final
{
public:
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItem;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageTypeTag;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDamage;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamIdentity;                                      // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FDateTime, struct FHWCombatEvent> CombatEvents;                                      // 0x0020(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDeathRecapDamageBundle) == 0x000008, "Wrong alignment on FHWDeathRecapDamageBundle");
static_assert(sizeof(FHWDeathRecapDamageBundle) == 0x000070, "Wrong size on FHWDeathRecapDamageBundle");
static_assert(offsetof(FHWDeathRecapDamageBundle, CharacterItem) == 0x000000, "Member 'FHWDeathRecapDamageBundle::CharacterItem' has a wrong offset!");
static_assert(offsetof(FHWDeathRecapDamageBundle, EquipmentItem) == 0x000008, "Member 'FHWDeathRecapDamageBundle::EquipmentItem' has a wrong offset!");
static_assert(offsetof(FHWDeathRecapDamageBundle, DamageTypeTag) == 0x000010, "Member 'FHWDeathRecapDamageBundle::DamageTypeTag' has a wrong offset!");
static_assert(offsetof(FHWDeathRecapDamageBundle, TotalDamage) == 0x000018, "Member 'FHWDeathRecapDamageBundle::TotalDamage' has a wrong offset!");
static_assert(offsetof(FHWDeathRecapDamageBundle, TeamIdentity) == 0x00001C, "Member 'FHWDeathRecapDamageBundle::TeamIdentity' has a wrong offset!");
static_assert(offsetof(FHWDeathRecapDamageBundle, CombatEvents) == 0x000020, "Member 'FHWDeathRecapDamageBundle::CombatEvents' has a wrong offset!");

// ScriptStruct HemingwayUI.HWRadialMenuPageEntry
// 0x0048 (0x0048 - 0x0000)
struct FHWRadialMenuPageEntry final
{
public:
	class FText                                   EntryName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EntryIcon;                                         // 0x0018(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AHWPlayerState>          PlayerState;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWRadialMenuPageEntry) == 0x000008, "Wrong alignment on FHWRadialMenuPageEntry");
static_assert(sizeof(FHWRadialMenuPageEntry) == 0x000048, "Wrong size on FHWRadialMenuPageEntry");
static_assert(offsetof(FHWRadialMenuPageEntry, EntryName) == 0x000000, "Member 'FHWRadialMenuPageEntry::EntryName' has a wrong offset!");
static_assert(offsetof(FHWRadialMenuPageEntry, EntryIcon) == 0x000018, "Member 'FHWRadialMenuPageEntry::EntryIcon' has a wrong offset!");
static_assert(offsetof(FHWRadialMenuPageEntry, PlayerState) == 0x000040, "Member 'FHWRadialMenuPageEntry::PlayerState' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDamageEntryData
// 0x0050 (0x0050 - 0x0000)
struct FHWDamageEntryData final
{
public:
	class UHWCharacterItem*                       SourceCharacterItem;                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWCharacterItem*                       TargetCharacterItem;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentItem*                       EquipmentItem;                                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x38];                                      // 0x0018(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWDamageEntryData) == 0x000008, "Wrong alignment on FHWDamageEntryData");
static_assert(sizeof(FHWDamageEntryData) == 0x000050, "Wrong size on FHWDamageEntryData");
static_assert(offsetof(FHWDamageEntryData, SourceCharacterItem) == 0x000000, "Member 'FHWDamageEntryData::SourceCharacterItem' has a wrong offset!");
static_assert(offsetof(FHWDamageEntryData, TargetCharacterItem) == 0x000008, "Member 'FHWDamageEntryData::TargetCharacterItem' has a wrong offset!");
static_assert(offsetof(FHWDamageEntryData, EquipmentItem) == 0x000010, "Member 'FHWDamageEntryData::EquipmentItem' has a wrong offset!");

// ScriptStruct HemingwayUI.DebugHUDCommandsRow
// 0x0010 (0x0018 - 0x0008)
struct FDebugHUDCommandsRow final : public FTableRowBase
{
public:
	TArray<struct FDebugHUDCommand>               Commands;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugHUDCommandsRow) == 0x000008, "Wrong alignment on FDebugHUDCommandsRow");
static_assert(sizeof(FDebugHUDCommandsRow) == 0x000018, "Wrong size on FDebugHUDCommandsRow");
static_assert(offsetof(FDebugHUDCommandsRow, Commands) == 0x000008, "Member 'FDebugHUDCommandsRow::Commands' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEndOfMatchDetailsStat
// 0x0020 (0x0020 - 0x0000)
struct FHWEndOfMatchDetailsStat final
{
public:
	class FText                                   StatText;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         StatNumber;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWEndOfMatchDetailsStat) == 0x000008, "Wrong alignment on FHWEndOfMatchDetailsStat");
static_assert(sizeof(FHWEndOfMatchDetailsStat) == 0x000020, "Wrong size on FHWEndOfMatchDetailsStat");
static_assert(offsetof(FHWEndOfMatchDetailsStat, StatText) == 0x000000, "Member 'FHWEndOfMatchDetailsStat::StatText' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchDetailsStat, StatNumber) == 0x000018, "Member 'FHWEndOfMatchDetailsStat::StatNumber' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEndOfMatchBestInStat
// 0x0018 (0x0018 - 0x0000)
struct FHWEndOfMatchBestInStat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWEndOfMatchLobbyDetailsStat*>  StatWidgets;                                       // 0x0008(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWEndOfMatchBestInStat) == 0x000008, "Wrong alignment on FHWEndOfMatchBestInStat");
static_assert(sizeof(FHWEndOfMatchBestInStat) == 0x000018, "Wrong size on FHWEndOfMatchBestInStat");
static_assert(offsetof(FHWEndOfMatchBestInStat, Value) == 0x000000, "Member 'FHWEndOfMatchBestInStat::Value' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchBestInStat, StatWidgets) == 0x000008, "Member 'FHWEndOfMatchBestInStat::StatWidgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMasteryEntry
// 0x0030 (0x0038 - 0x0008)
struct FHWMasteryEntry final : public FTableRowBase
{
public:
	int32                                         Level;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              MasteryIcon;                                       // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWMasteryEntry) == 0x000008, "Wrong alignment on FHWMasteryEntry");
static_assert(sizeof(FHWMasteryEntry) == 0x000038, "Wrong size on FHWMasteryEntry");
static_assert(offsetof(FHWMasteryEntry, Level) == 0x000008, "Member 'FHWMasteryEntry::Level' has a wrong offset!");
static_assert(offsetof(FHWMasteryEntry, MasteryIcon) == 0x000010, "Member 'FHWMasteryEntry::MasteryIcon' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMatchHistoryInfo
// 0x0001 (0x0001 - 0x0000)
struct FHWMatchHistoryInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWMatchHistoryInfo) == 0x000001, "Wrong alignment on FHWMatchHistoryInfo");
static_assert(sizeof(FHWMatchHistoryInfo) == 0x000001, "Wrong size on FHWMatchHistoryInfo");

// ScriptStruct HemingwayUI.HWRolePreference_RoleText
// 0x0010 (0x0010 - 0x0000)
struct FHWRolePreference_RoleText final
{
public:
	TArray<class FText>                           RoleText;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWRolePreference_RoleText) == 0x000008, "Wrong alignment on FHWRolePreference_RoleText");
static_assert(sizeof(FHWRolePreference_RoleText) == 0x000010, "Wrong size on FHWRolePreference_RoleText");
static_assert(offsetof(FHWRolePreference_RoleText, RoleText) == 0x000000, "Member 'FHWRolePreference_RoleText::RoleText' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDataDisplay_CharacterStat
// 0x00A0 (0x00A0 - 0x0000)
struct FHWDataDisplay_CharacterStat final
{
public:
	TSoftObjectPtr<class UTexture2D>              StatIcon;                                          // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StatLongText;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   StatShortText;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ValueText;                                         // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 AttributeName;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  StatTags;                                          // 0x0080(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDataDisplay_CharacterStat) == 0x000008, "Wrong alignment on FHWDataDisplay_CharacterStat");
static_assert(sizeof(FHWDataDisplay_CharacterStat) == 0x0000A0, "Wrong size on FHWDataDisplay_CharacterStat");
static_assert(offsetof(FHWDataDisplay_CharacterStat, StatIcon) == 0x000000, "Member 'FHWDataDisplay_CharacterStat::StatIcon' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStat, StatLongText) == 0x000028, "Member 'FHWDataDisplay_CharacterStat::StatLongText' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStat, StatShortText) == 0x000040, "Member 'FHWDataDisplay_CharacterStat::StatShortText' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStat, ValueText) == 0x000058, "Member 'FHWDataDisplay_CharacterStat::ValueText' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStat, AttributeName) == 0x000070, "Member 'FHWDataDisplay_CharacterStat::AttributeName' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStat, StatTags) == 0x000080, "Member 'FHWDataDisplay_CharacterStat::StatTags' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDataDisplay_CharacterStatRow
// 0x00B0 (0x00B8 - 0x0008)
struct FHWDataDisplay_CharacterStatRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWDataDisplay_CharacterStat           StatData;                                          // 0x0018(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDataDisplay_CharacterStatRow) == 0x000008, "Wrong alignment on FHWDataDisplay_CharacterStatRow");
static_assert(sizeof(FHWDataDisplay_CharacterStatRow) == 0x0000B8, "Wrong size on FHWDataDisplay_CharacterStatRow");
static_assert(offsetof(FHWDataDisplay_CharacterStatRow, StatTag) == 0x000008, "Member 'FHWDataDisplay_CharacterStatRow::StatTag' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStatRow, bEnabled) == 0x000010, "Member 'FHWDataDisplay_CharacterStatRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_CharacterStatRow, StatData) == 0x000018, "Member 'FHWDataDisplay_CharacterStatRow::StatData' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAllowedPlatformTypesForSetting
// 0x000D (0x000D - 0x0000)
struct FHWAllowedPlatformTypesForSetting final
{
public:
	bool                                          bXBoxOne;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPS4;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitch;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWindows;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSteam;                                            // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEpic;                                             // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSteamDeck;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMac;                                              // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLinux;                                            // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIOS;                                              // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAndroid;                                          // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXSX;                                              // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPS5;                                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAllowedPlatformTypesForSetting) == 0x000001, "Wrong alignment on FHWAllowedPlatformTypesForSetting");
static_assert(sizeof(FHWAllowedPlatformTypesForSetting) == 0x00000D, "Wrong size on FHWAllowedPlatformTypesForSetting");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bXBoxOne) == 0x000000, "Member 'FHWAllowedPlatformTypesForSetting::bXBoxOne' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bPS4) == 0x000001, "Member 'FHWAllowedPlatformTypesForSetting::bPS4' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bSwitch) == 0x000002, "Member 'FHWAllowedPlatformTypesForSetting::bSwitch' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bWindows) == 0x000003, "Member 'FHWAllowedPlatformTypesForSetting::bWindows' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bSteam) == 0x000004, "Member 'FHWAllowedPlatformTypesForSetting::bSteam' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bEpic) == 0x000005, "Member 'FHWAllowedPlatformTypesForSetting::bEpic' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bSteamDeck) == 0x000006, "Member 'FHWAllowedPlatformTypesForSetting::bSteamDeck' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bMac) == 0x000007, "Member 'FHWAllowedPlatformTypesForSetting::bMac' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bLinux) == 0x000008, "Member 'FHWAllowedPlatformTypesForSetting::bLinux' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bIOS) == 0x000009, "Member 'FHWAllowedPlatformTypesForSetting::bIOS' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bAndroid) == 0x00000A, "Member 'FHWAllowedPlatformTypesForSetting::bAndroid' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bXSX) == 0x00000B, "Member 'FHWAllowedPlatformTypesForSetting::bXSX' has a wrong offset!");
static_assert(offsetof(FHWAllowedPlatformTypesForSetting, bPS5) == 0x00000C, "Member 'FHWAllowedPlatformTypesForSetting::bPS5' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAllowedInputTypesForSetting
// 0x0003 (0x0003 - 0x0000)
struct FHWAllowedInputTypesForSetting final
{
public:
	bool                                          bGamepad;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMouse;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTouch;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAllowedInputTypesForSetting) == 0x000001, "Wrong alignment on FHWAllowedInputTypesForSetting");
static_assert(sizeof(FHWAllowedInputTypesForSetting) == 0x000003, "Wrong size on FHWAllowedInputTypesForSetting");
static_assert(offsetof(FHWAllowedInputTypesForSetting, bGamepad) == 0x000000, "Member 'FHWAllowedInputTypesForSetting::bGamepad' has a wrong offset!");
static_assert(offsetof(FHWAllowedInputTypesForSetting, bMouse) == 0x000001, "Member 'FHWAllowedInputTypesForSetting::bMouse' has a wrong offset!");
static_assert(offsetof(FHWAllowedInputTypesForSetting, bTouch) == 0x000002, "Member 'FHWAllowedInputTypesForSetting::bTouch' has a wrong offset!");

// ScriptStruct HemingwayUI.HWSettingsWidgetConfig
// 0x0018 (0x0018 - 0x0000)
struct FHWSettingsWidgetConfig final
{
public:
	TSubclassOf<class UHWSettingsEntryWidget>     WidgetClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseKeybindWidget;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URHSettingsInfoBase>        SettingInfo;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWSettingsWidgetConfig) == 0x000008, "Wrong alignment on FHWSettingsWidgetConfig");
static_assert(sizeof(FHWSettingsWidgetConfig) == 0x000018, "Wrong size on FHWSettingsWidgetConfig");
static_assert(offsetof(FHWSettingsWidgetConfig, WidgetClass) == 0x000000, "Member 'FHWSettingsWidgetConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FHWSettingsWidgetConfig, bUseKeybindWidget) == 0x000008, "Member 'FHWSettingsWidgetConfig::bUseKeybindWidget' has a wrong offset!");
static_assert(offsetof(FHWSettingsWidgetConfig, SettingInfo) == 0x000010, "Member 'FHWSettingsWidgetConfig::SettingInfo' has a wrong offset!");

// ScriptStruct HemingwayUI.HWTabEntryData
// 0x0068 (0x0068 - 0x0000)
struct FHWTabEntryData final
{
public:
	class FText                                   EntryText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EntryImage;                                        // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KVTag;                                             // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_LootId                             LootId;                                            // 0x0048(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCTA;                                           // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearChildrenOnExit;                              // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCTARequiresItem;                                  // 0x005E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      CTAPrefix;                                         // 0x005F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      CTASuffix;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCollectionItemType                         CTACollectionType;                                 // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionListenType                     CTAListenType;                                     // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWTabEntryData) == 0x000008, "Wrong alignment on FHWTabEntryData");
static_assert(sizeof(FHWTabEntryData) == 0x000068, "Wrong size on FHWTabEntryData");
static_assert(offsetof(FHWTabEntryData, EntryText) == 0x000000, "Member 'FHWTabEntryData::EntryText' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, EntryImage) == 0x000018, "Member 'FHWTabEntryData::EntryImage' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, KVTag) == 0x000040, "Member 'FHWTabEntryData::KVTag' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, LootId) == 0x000048, "Member 'FHWTabEntryData::LootId' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, bHasCTA) == 0x00005C, "Member 'FHWTabEntryData::bHasCTA' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, bClearChildrenOnExit) == 0x00005D, "Member 'FHWTabEntryData::bClearChildrenOnExit' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, bCTARequiresItem) == 0x00005E, "Member 'FHWTabEntryData::bCTARequiresItem' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, CTAPrefix) == 0x00005F, "Member 'FHWTabEntryData::CTAPrefix' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, CTASuffix) == 0x000060, "Member 'FHWTabEntryData::CTASuffix' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, CTACollectionType) == 0x000061, "Member 'FHWTabEntryData::CTACollectionType' has a wrong offset!");
static_assert(offsetof(FHWTabEntryData, CTAListenType) == 0x000062, "Member 'FHWTabEntryData::CTAListenType' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEventsScreenTabRow
// 0x0070 (0x0078 - 0x0008)
struct FHWEventsScreenTabRow final : public FTableRowBase
{
public:
	TSubclassOf<class UHWEventsScreenEntryWidget> EventWidget;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWTabEntryData                        TabEntryData;                                      // 0x0010(0x0068)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWEventsScreenTabRow) == 0x000008, "Wrong alignment on FHWEventsScreenTabRow");
static_assert(sizeof(FHWEventsScreenTabRow) == 0x000078, "Wrong size on FHWEventsScreenTabRow");
static_assert(offsetof(FHWEventsScreenTabRow, EventWidget) == 0x000008, "Member 'FHWEventsScreenTabRow::EventWidget' has a wrong offset!");
static_assert(offsetof(FHWEventsScreenTabRow, TabEntryData) == 0x000010, "Member 'FHWEventsScreenTabRow::TabEntryData' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFoundersEditionSkus
// 0x0060 (0x0060 - 0x0000)
struct FHWFoundersEditionSkus final
{
public:
	class FString                                 BaseEditionSku;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeluxeEditionSku;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UltimateEditionSku;                                // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeluxeUpgradeSku;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UltimateUpgradeSku;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GodlikeUpgradeSku;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFoundersEditionSkus) == 0x000008, "Wrong alignment on FHWFoundersEditionSkus");
static_assert(sizeof(FHWFoundersEditionSkus) == 0x000060, "Wrong size on FHWFoundersEditionSkus");
static_assert(offsetof(FHWFoundersEditionSkus, BaseEditionSku) == 0x000000, "Member 'FHWFoundersEditionSkus::BaseEditionSku' has a wrong offset!");
static_assert(offsetof(FHWFoundersEditionSkus, DeluxeEditionSku) == 0x000010, "Member 'FHWFoundersEditionSkus::DeluxeEditionSku' has a wrong offset!");
static_assert(offsetof(FHWFoundersEditionSkus, UltimateEditionSku) == 0x000020, "Member 'FHWFoundersEditionSkus::UltimateEditionSku' has a wrong offset!");
static_assert(offsetof(FHWFoundersEditionSkus, DeluxeUpgradeSku) == 0x000030, "Member 'FHWFoundersEditionSkus::DeluxeUpgradeSku' has a wrong offset!");
static_assert(offsetof(FHWFoundersEditionSkus, UltimateUpgradeSku) == 0x000040, "Member 'FHWFoundersEditionSkus::UltimateUpgradeSku' has a wrong offset!");
static_assert(offsetof(FHWFoundersEditionSkus, GodlikeUpgradeSku) == 0x000050, "Member 'FHWFoundersEditionSkus::GodlikeUpgradeSku' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleGlobalModifier_Scale
// 0x0004 (0x0004 - 0x0000)
struct FHWUIStyleGlobalModifier_Scale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleGlobalModifier_Scale) == 0x000004, "Wrong alignment on FHWUIStyleGlobalModifier_Scale");
static_assert(sizeof(FHWUIStyleGlobalModifier_Scale) == 0x000004, "Wrong size on FHWUIStyleGlobalModifier_Scale");
static_assert(offsetof(FHWUIStyleGlobalModifier_Scale, Scale) == 0x000000, "Member 'FHWUIStyleGlobalModifier_Scale::Scale' has a wrong offset!");

// ScriptStruct HemingwayUI.HWCollectionGridConfig
// 0x0014 (0x0014 - 0x0000)
struct FHWCollectionGridConfig final
{
public:
	struct FMargin                                GridPadding;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GridWidth;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWCollectionGridConfig) == 0x000004, "Wrong alignment on FHWCollectionGridConfig");
static_assert(sizeof(FHWCollectionGridConfig) == 0x000014, "Wrong size on FHWCollectionGridConfig");
static_assert(offsetof(FHWCollectionGridConfig, GridPadding) == 0x000000, "Member 'FHWCollectionGridConfig::GridPadding' has a wrong offset!");
static_assert(offsetof(FHWCollectionGridConfig, GridWidth) == 0x000010, "Member 'FHWCollectionGridConfig::GridWidth' has a wrong offset!");

// ScriptStruct HemingwayUI.CurrencyRewardInfo
// 0x0010 (0x0010 - 0x0000)
struct FCurrencyRewardInfo final
{
public:
	class URHCurrency*                            CurrencyInventoryItem;                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrencyRewardInfo) == 0x000008, "Wrong alignment on FCurrencyRewardInfo");
static_assert(sizeof(FCurrencyRewardInfo) == 0x000010, "Wrong size on FCurrencyRewardInfo");
static_assert(offsetof(FCurrencyRewardInfo, CurrencyInventoryItem) == 0x000000, "Member 'FCurrencyRewardInfo::CurrencyInventoryItem' has a wrong offset!");
static_assert(offsetof(FCurrencyRewardInfo, Quantity) == 0x000008, "Member 'FCurrencyRewardInfo::Quantity' has a wrong offset!");

// ScriptStruct HemingwayUI.HWWidgetFadeData
// 0x0014 (0x0014 - 0x0000)
struct FHWWidgetFadeData final
{
public:
	TWeakObjectPtr<class UWidget>                 Widget;                                            // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xC];                                        // 0x0008(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWWidgetFadeData) == 0x000004, "Wrong alignment on FHWWidgetFadeData");
static_assert(sizeof(FHWWidgetFadeData) == 0x000014, "Wrong size on FHWWidgetFadeData");
static_assert(offsetof(FHWWidgetFadeData, Widget) == 0x000000, "Member 'FHWWidgetFadeData::Widget' has a wrong offset!");

// ScriptStruct HemingwayUI.HWLoadoutGridConfig
// 0x0014 (0x0014 - 0x0000)
struct FHWLoadoutGridConfig final
{
public:
	struct FMargin                                GridPadding;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         GridWidth;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWLoadoutGridConfig) == 0x000004, "Wrong alignment on FHWLoadoutGridConfig");
static_assert(sizeof(FHWLoadoutGridConfig) == 0x000014, "Wrong size on FHWLoadoutGridConfig");
static_assert(offsetof(FHWLoadoutGridConfig, GridPadding) == 0x000000, "Member 'FHWLoadoutGridConfig::GridPadding' has a wrong offset!");
static_assert(offsetof(FHWLoadoutGridConfig, GridWidth) == 0x000010, "Member 'FHWLoadoutGridConfig::GridWidth' has a wrong offset!");

// ScriptStruct HemingwayUI.HWCurrencyIdCollection
// 0x0010 (0x0010 - 0x0000)
struct FHWCurrencyIdCollection final
{
public:
	TArray<struct FRH_ItemId>                     CurrencyIds;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWCurrencyIdCollection) == 0x000008, "Wrong alignment on FHWCurrencyIdCollection");
static_assert(sizeof(FHWCurrencyIdCollection) == 0x000010, "Wrong size on FHWCurrencyIdCollection");
static_assert(offsetof(FHWCurrencyIdCollection, CurrencyIds) == 0x000000, "Member 'FHWCurrencyIdCollection::CurrencyIds' has a wrong offset!");

// ScriptStruct HemingwayUI.HWCurrencyCategory
// 0x0030 (0x0030 - 0x0000)
struct FHWCurrencyCategory final
{
public:
	class FText                                   CurrencyCategoryName;                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CurrencyCategoryDescription;                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWCurrencyCategory) == 0x000008, "Wrong alignment on FHWCurrencyCategory");
static_assert(sizeof(FHWCurrencyCategory) == 0x000030, "Wrong size on FHWCurrencyCategory");
static_assert(offsetof(FHWCurrencyCategory, CurrencyCategoryName) == 0x000000, "Member 'FHWCurrencyCategory::CurrencyCategoryName' has a wrong offset!");
static_assert(offsetof(FHWCurrencyCategory, CurrencyCategoryDescription) == 0x000018, "Member 'FHWCurrencyCategory::CurrencyCategoryDescription' has a wrong offset!");

// ScriptStruct HemingwayUI.HWSeasonShopItemWithCustomData
// 0x00A8 (0x00A8 - 0x0000)
struct FHWSeasonShopItemWithCustomData final
{
public:
	TSoftObjectPtr<class URHStoreItem>            Item;                                              // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPageUnlocked;                                    // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWSeasonShopItemConfig                CustomData;                                        // 0x0030(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPlatformInventoryItem>  InventoryItemPtr;                                  // 0x0080(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWSeasonShopItemWithCustomData) == 0x000008, "Wrong alignment on FHWSeasonShopItemWithCustomData");
static_assert(sizeof(FHWSeasonShopItemWithCustomData) == 0x0000A8, "Wrong size on FHWSeasonShopItemWithCustomData");
static_assert(offsetof(FHWSeasonShopItemWithCustomData, Item) == 0x000000, "Member 'FHWSeasonShopItemWithCustomData::Item' has a wrong offset!");
static_assert(offsetof(FHWSeasonShopItemWithCustomData, IsOwned) == 0x000028, "Member 'FHWSeasonShopItemWithCustomData::IsOwned' has a wrong offset!");
static_assert(offsetof(FHWSeasonShopItemWithCustomData, IsPageUnlocked) == 0x000029, "Member 'FHWSeasonShopItemWithCustomData::IsPageUnlocked' has a wrong offset!");
static_assert(offsetof(FHWSeasonShopItemWithCustomData, CustomData) == 0x000030, "Member 'FHWSeasonShopItemWithCustomData::CustomData' has a wrong offset!");
static_assert(offsetof(FHWSeasonShopItemWithCustomData, InventoryItemPtr) == 0x000080, "Member 'FHWSeasonShopItemWithCustomData::InventoryItemPtr' has a wrong offset!");

// ScriptStruct HemingwayUI.HWRedirectData
// 0x0008 (0x0008 - 0x0000)
struct FHWRedirectData final
{
public:
	int32                                         SeasonIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWRedirectData) == 0x000004, "Wrong alignment on FHWRedirectData");
static_assert(sizeof(FHWRedirectData) == 0x000008, "Wrong size on FHWRedirectData");
static_assert(offsetof(FHWRedirectData, SeasonIndex) == 0x000000, "Member 'FHWRedirectData::SeasonIndex' has a wrong offset!");
static_assert(offsetof(FHWRedirectData, PageIndex) == 0x000004, "Member 'FHWRedirectData::PageIndex' has a wrong offset!");

// ScriptStruct HemingwayUI.HWInputKeySetBrushConfiguration
// 0x00E0 (0x00E0 - 0x0000)
struct FHWInputKeySetBrushConfiguration final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            KeyBrush;                                          // 0x0010(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWInputKeySetBrushConfiguration) == 0x000010, "Wrong alignment on FHWInputKeySetBrushConfiguration");
static_assert(sizeof(FHWInputKeySetBrushConfiguration) == 0x0000E0, "Wrong size on FHWInputKeySetBrushConfiguration");
static_assert(offsetof(FHWInputKeySetBrushConfiguration, Keys) == 0x000000, "Member 'FHWInputKeySetBrushConfiguration::Keys' has a wrong offset!");
static_assert(offsetof(FHWInputKeySetBrushConfiguration, KeyBrush) == 0x000010, "Member 'FHWInputKeySetBrushConfiguration::KeyBrush' has a wrong offset!");

// ScriptStruct HemingwayUI.HWStoreScreenTabRow
// 0x0078 (0x0080 - 0x0008)
struct FHWStoreScreenTabRow final : public FTableRowBase
{
public:
	TSubclassOf<class UHWWidget>                  EntryWidgetClass;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWTabEntryData                        TabEntryData;                                      // 0x0010(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   CameraActorTag;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWStoreScreenTabRow) == 0x000008, "Wrong alignment on FHWStoreScreenTabRow");
static_assert(sizeof(FHWStoreScreenTabRow) == 0x000080, "Wrong size on FHWStoreScreenTabRow");
static_assert(offsetof(FHWStoreScreenTabRow, EntryWidgetClass) == 0x000008, "Member 'FHWStoreScreenTabRow::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(FHWStoreScreenTabRow, TabEntryData) == 0x000010, "Member 'FHWStoreScreenTabRow::TabEntryData' has a wrong offset!");
static_assert(offsetof(FHWStoreScreenTabRow, CameraActorTag) == 0x000078, "Member 'FHWStoreScreenTabRow::CameraActorTag' has a wrong offset!");

// ScriptStruct HemingwayUI.DebugAttributeMod
// 0x000C (0x000C - 0x0000)
struct FDebugAttributeMod final
{
public:
	struct FGameplayTag                           AttributeTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttributeMod;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugAttributeMod) == 0x000004, "Wrong alignment on FDebugAttributeMod");
static_assert(sizeof(FDebugAttributeMod) == 0x00000C, "Wrong size on FDebugAttributeMod");
static_assert(offsetof(FDebugAttributeMod, AttributeTag) == 0x000000, "Member 'FDebugAttributeMod::AttributeTag' has a wrong offset!");
static_assert(offsetof(FDebugAttributeMod, AttributeMod) == 0x000008, "Member 'FDebugAttributeMod::AttributeMod' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDebug_ItemSimulatorConfig
// 0x0030 (0x0038 - 0x0008)
struct FHWDebug_ItemSimulatorConfig final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UHWEquipmentItem>        Item;                                              // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Slot;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDebug_ItemSimulatorConfig) == 0x000008, "Wrong alignment on FHWDebug_ItemSimulatorConfig");
static_assert(sizeof(FHWDebug_ItemSimulatorConfig) == 0x000038, "Wrong size on FHWDebug_ItemSimulatorConfig");
static_assert(offsetof(FHWDebug_ItemSimulatorConfig, Item) == 0x000008, "Member 'FHWDebug_ItemSimulatorConfig::Item' has a wrong offset!");
static_assert(offsetof(FHWDebug_ItemSimulatorConfig, Slot) == 0x000030, "Member 'FHWDebug_ItemSimulatorConfig::Slot' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDebug_MockItemStoreItemConfig
// 0x0028 (0x0028 - 0x0000)
struct FHWDebug_MockItemStoreItemConfig final
{
public:
	TSoftObjectPtr<class UHWEquipmentItem>        Item;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDebug_MockItemStoreItemConfig) == 0x000008, "Wrong alignment on FHWDebug_MockItemStoreItemConfig");
static_assert(sizeof(FHWDebug_MockItemStoreItemConfig) == 0x000028, "Wrong size on FHWDebug_MockItemStoreItemConfig");
static_assert(offsetof(FHWDebug_MockItemStoreItemConfig, Item) == 0x000000, "Member 'FHWDebug_MockItemStoreItemConfig::Item' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAbilityPromptConfig
// 0x0070 (0x0070 - 0x0000)
struct FHWAbilityPromptConfig final
{
public:
	TSoftClassPtr<class UClass>                   AbilityPromptClass;                                // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnchorData                            LayoutData;                                        // 0x0028(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bRequiresMouseFocus;                               // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWAbilityPromptConfig) == 0x000008, "Wrong alignment on FHWAbilityPromptConfig");
static_assert(sizeof(FHWAbilityPromptConfig) == 0x000070, "Wrong size on FHWAbilityPromptConfig");
static_assert(offsetof(FHWAbilityPromptConfig, AbilityPromptClass) == 0x000000, "Member 'FHWAbilityPromptConfig::AbilityPromptClass' has a wrong offset!");
static_assert(offsetof(FHWAbilityPromptConfig, LayoutData) == 0x000028, "Member 'FHWAbilityPromptConfig::LayoutData' has a wrong offset!");
static_assert(offsetof(FHWAbilityPromptConfig, bRequiresMouseFocus) == 0x000068, "Member 'FHWAbilityPromptConfig::bRequiresMouseFocus' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeDisplayConfig
// 0x0048 (0x0048 - 0x0000)
struct FHWAccoladeDisplayConfig final
{
public:
	struct FGameplayTag                           AccoladeTag;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWAccoladeEntryWidget>     DisplayWidgetClass;                                // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullDisplayDuration;                               // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMetaSoundSource>        SFXToPlay;                                         // 0x0018(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCache;                                      // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWAccoladeDisplayConfig) == 0x000008, "Wrong alignment on FHWAccoladeDisplayConfig");
static_assert(sizeof(FHWAccoladeDisplayConfig) == 0x000048, "Wrong size on FHWAccoladeDisplayConfig");
static_assert(offsetof(FHWAccoladeDisplayConfig, AccoladeTag) == 0x000000, "Member 'FHWAccoladeDisplayConfig::AccoladeTag' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayConfig, DisplayWidgetClass) == 0x000008, "Member 'FHWAccoladeDisplayConfig::DisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayConfig, FullDisplayDuration) == 0x000010, "Member 'FHWAccoladeDisplayConfig::FullDisplayDuration' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayConfig, SFXToPlay) == 0x000018, "Member 'FHWAccoladeDisplayConfig::SFXToPlay' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayConfig, bShouldCache) == 0x000040, "Member 'FHWAccoladeDisplayConfig::bShouldCache' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeDisplayConfigRow
// 0x0048 (0x0050 - 0x0008)
struct FHWAccoladeDisplayConfigRow final : public FTableRowBase
{
public:
	struct FHWAccoladeDisplayConfig               AccoladeDisplayConfig;                             // 0x0008(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAccoladeDisplayConfigRow) == 0x000008, "Wrong alignment on FHWAccoladeDisplayConfigRow");
static_assert(sizeof(FHWAccoladeDisplayConfigRow) == 0x000050, "Wrong size on FHWAccoladeDisplayConfigRow");
static_assert(offsetof(FHWAccoladeDisplayConfigRow, AccoladeDisplayConfig) == 0x000008, "Member 'FHWAccoladeDisplayConfigRow::AccoladeDisplayConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeConfig
// 0x0058 (0x0058 - 0x0000)
struct FHWAccoladeConfig final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeInQueue;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstInQueueDelayTime;                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullDisplayTime;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDisplayTime;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMetaSoundSource>        MetaSoundSource;                                   // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWAccoladeWidget>          AccoladeWidgetClass;                               // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWAccoladeStompAssessorBase> StompAssessorClass;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldCache;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyShowIfInstigatorIsLocal;                      // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWAccoladeConfig) == 0x000008, "Wrong alignment on FHWAccoladeConfig");
static_assert(sizeof(FHWAccoladeConfig) == 0x000058, "Wrong size on FHWAccoladeConfig");
static_assert(offsetof(FHWAccoladeConfig, Priority) == 0x000000, "Member 'FHWAccoladeConfig::Priority' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, MaxTimeInQueue) == 0x000004, "Member 'FHWAccoladeConfig::MaxTimeInQueue' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, FirstInQueueDelayTime) == 0x000008, "Member 'FHWAccoladeConfig::FirstInQueueDelayTime' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, FullDisplayTime) == 0x00000C, "Member 'FHWAccoladeConfig::FullDisplayTime' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, MinimumDisplayTime) == 0x000010, "Member 'FHWAccoladeConfig::MinimumDisplayTime' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, MetaSoundSource) == 0x000018, "Member 'FHWAccoladeConfig::MetaSoundSource' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, AccoladeWidgetClass) == 0x000040, "Member 'FHWAccoladeConfig::AccoladeWidgetClass' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, StompAssessorClass) == 0x000048, "Member 'FHWAccoladeConfig::StompAssessorClass' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, bShouldCache) == 0x000050, "Member 'FHWAccoladeConfig::bShouldCache' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfig, bOnlyShowIfInstigatorIsLocal) == 0x000051, "Member 'FHWAccoladeConfig::bOnlyShowIfInstigatorIsLocal' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeConfigRow
// 0x0060 (0x0068 - 0x0008)
struct FHWAccoladeConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           AccoladeTag;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWAccoladeConfig                      AccoladeConfig;                                    // 0x0010(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAccoladeConfigRow) == 0x000008, "Wrong alignment on FHWAccoladeConfigRow");
static_assert(sizeof(FHWAccoladeConfigRow) == 0x000068, "Wrong size on FHWAccoladeConfigRow");
static_assert(offsetof(FHWAccoladeConfigRow, AccoladeTag) == 0x000008, "Member 'FHWAccoladeConfigRow::AccoladeTag' has a wrong offset!");
static_assert(offsetof(FHWAccoladeConfigRow, AccoladeConfig) == 0x000010, "Member 'FHWAccoladeConfigRow::AccoladeConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeBucketConfig
// 0x0030 (0x0030 - 0x0000)
struct FHWAccoladeBucketConfig final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStompable;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              AccoladeConfigsDTSoftPtr;                          // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAccoladeBucketConfig) == 0x000008, "Wrong alignment on FHWAccoladeBucketConfig");
static_assert(sizeof(FHWAccoladeBucketConfig) == 0x000030, "Wrong size on FHWAccoladeBucketConfig");
static_assert(offsetof(FHWAccoladeBucketConfig, Priority) == 0x000000, "Member 'FHWAccoladeBucketConfig::Priority' has a wrong offset!");
static_assert(offsetof(FHWAccoladeBucketConfig, bStompable) == 0x000004, "Member 'FHWAccoladeBucketConfig::bStompable' has a wrong offset!");
static_assert(offsetof(FHWAccoladeBucketConfig, AccoladeConfigsDTSoftPtr) == 0x000008, "Member 'FHWAccoladeBucketConfig::AccoladeConfigsDTSoftPtr' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIActionBindingConfig
// 0x000C (0x000C - 0x0000)
struct FHWUIActionBindingConfig final
{
public:
	float                                         HoldTime;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldRollbackTime;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DisplayPriority;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Flags;                                             // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWUIActionBindingConfig) == 0x000004, "Wrong alignment on FHWUIActionBindingConfig");
static_assert(sizeof(FHWUIActionBindingConfig) == 0x00000C, "Wrong size on FHWUIActionBindingConfig");
static_assert(offsetof(FHWUIActionBindingConfig, HoldTime) == 0x000000, "Member 'FHWUIActionBindingConfig::HoldTime' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingConfig, HoldRollbackTime) == 0x000004, "Member 'FHWUIActionBindingConfig::HoldRollbackTime' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingConfig, DisplayPriority) == 0x000008, "Member 'FHWUIActionBindingConfig::DisplayPriority' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingConfig, Flags) == 0x000009, "Member 'FHWUIActionBindingConfig::Flags' has a wrong offset!");

// ScriptStruct HemingwayUI.UIContextCalloutDisplay
// 0x0048 (0x0048 - 0x0000)
struct FUIContextCalloutDisplay final
{
public:
	TArray<struct FKey>                           KeySet;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingConfig               BindingConfig;                                     // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class UWidget*                                WidgetRef;                                         // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIContextCalloutDisplay) == 0x000008, "Wrong alignment on FUIContextCalloutDisplay");
static_assert(sizeof(FUIContextCalloutDisplay) == 0x000048, "Wrong size on FUIContextCalloutDisplay");
static_assert(offsetof(FUIContextCalloutDisplay, KeySet) == 0x000000, "Member 'FUIContextCalloutDisplay::KeySet' has a wrong offset!");
static_assert(offsetof(FUIContextCalloutDisplay, BindingConfig) == 0x000010, "Member 'FUIContextCalloutDisplay::BindingConfig' has a wrong offset!");
static_assert(offsetof(FUIContextCalloutDisplay, DisplayName) == 0x000020, "Member 'FUIContextCalloutDisplay::DisplayName' has a wrong offset!");
static_assert(offsetof(FUIContextCalloutDisplay, WidgetRef) == 0x000038, "Member 'FUIContextCalloutDisplay::WidgetRef' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAccoladeDisplayData
// 0x00A0 (0x00A0 - 0x0000)
struct FHWAccoladeDisplayData final
{
public:
	struct FGameplayTag                           AccoladeTag;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BucketTag;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeAdded;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWEventContext                        AccoladeContext;                                   // 0x0018(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAccoladeDisplayData) == 0x000008, "Wrong alignment on FHWAccoladeDisplayData");
static_assert(sizeof(FHWAccoladeDisplayData) == 0x0000A0, "Wrong size on FHWAccoladeDisplayData");
static_assert(offsetof(FHWAccoladeDisplayData, AccoladeTag) == 0x000000, "Member 'FHWAccoladeDisplayData::AccoladeTag' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayData, BucketTag) == 0x000008, "Member 'FHWAccoladeDisplayData::BucketTag' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayData, TimeAdded) == 0x000010, "Member 'FHWAccoladeDisplayData::TimeAdded' has a wrong offset!");
static_assert(offsetof(FHWAccoladeDisplayData, AccoladeContext) == 0x000018, "Member 'FHWAccoladeDisplayData::AccoladeContext' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAnnouncementConfig
// 0x0048 (0x0048 - 0x0000)
struct FHWAnnouncementConfig final
{
public:
	class FText                                   AnnouncementText;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaSoundSource>        AnnouncementAudio;                                 // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDisplayTime;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAnnouncementConfig) == 0x000008, "Wrong alignment on FHWAnnouncementConfig");
static_assert(sizeof(FHWAnnouncementConfig) == 0x000048, "Wrong size on FHWAnnouncementConfig");
static_assert(offsetof(FHWAnnouncementConfig, AnnouncementText) == 0x000000, "Member 'FHWAnnouncementConfig::AnnouncementText' has a wrong offset!");
static_assert(offsetof(FHWAnnouncementConfig, AnnouncementAudio) == 0x000018, "Member 'FHWAnnouncementConfig::AnnouncementAudio' has a wrong offset!");
static_assert(offsetof(FHWAnnouncementConfig, Duration) == 0x000040, "Member 'FHWAnnouncementConfig::Duration' has a wrong offset!");
static_assert(offsetof(FHWAnnouncementConfig, MinimumDisplayTime) == 0x000044, "Member 'FHWAnnouncementConfig::MinimumDisplayTime' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAnnouncementConfigRow
// 0x0050 (0x0058 - 0x0008)
struct FHWAnnouncementConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           AnnouncementTag;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWAnnouncementConfig                  AnnouncementConfig;                                // 0x0010(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAnnouncementConfigRow) == 0x000008, "Wrong alignment on FHWAnnouncementConfigRow");
static_assert(sizeof(FHWAnnouncementConfigRow) == 0x000058, "Wrong size on FHWAnnouncementConfigRow");
static_assert(offsetof(FHWAnnouncementConfigRow, AnnouncementTag) == 0x000008, "Member 'FHWAnnouncementConfigRow::AnnouncementTag' has a wrong offset!");
static_assert(offsetof(FHWAnnouncementConfigRow, AnnouncementConfig) == 0x000010, "Member 'FHWAnnouncementConfigRow::AnnouncementConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWReticleDisplayOptionEntry
// 0x0040 (0x0048 - 0x0008)
struct FHWReticleDisplayOptionEntry final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReticleTexture;                                    // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWReticleDisplayOptionEntry) == 0x000008, "Wrong alignment on FHWReticleDisplayOptionEntry");
static_assert(sizeof(FHWReticleDisplayOptionEntry) == 0x000048, "Wrong size on FHWReticleDisplayOptionEntry");
static_assert(offsetof(FHWReticleDisplayOptionEntry, DisplayName) == 0x000008, "Member 'FHWReticleDisplayOptionEntry::DisplayName' has a wrong offset!");
static_assert(offsetof(FHWReticleDisplayOptionEntry, ReticleTexture) == 0x000020, "Member 'FHWReticleDisplayOptionEntry::ReticleTexture' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAutoGodBuild
// 0x0198 (0x0198 - 0x0000)
struct FHWAutoGodBuild final
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsLoaded;                                         // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPinned;                                         // 0x0191(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWAutoGodBuild) == 0x000008, "Wrong alignment on FHWAutoGodBuild");
static_assert(sizeof(FHWAutoGodBuild) == 0x000198, "Wrong size on FHWAutoGodBuild");
static_assert(offsetof(FHWAutoGodBuild, GodBuild) == 0x000000, "Member 'FHWAutoGodBuild::GodBuild' has a wrong offset!");
static_assert(offsetof(FHWAutoGodBuild, bIsLoaded) == 0x000190, "Member 'FHWAutoGodBuild::bIsLoaded' has a wrong offset!");
static_assert(offsetof(FHWAutoGodBuild, bIsPinned) == 0x000191, "Member 'FHWAutoGodBuild::bIsPinned' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDamageFeedbackIndicatorData
// 0x001C (0x001C - 0x0000)
struct FHWDamageFeedbackIndicatorData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitIntensity;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstHit;                                       // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWDamageFeedbackIndicatorData) == 0x000004, "Wrong alignment on FHWDamageFeedbackIndicatorData");
static_assert(sizeof(FHWDamageFeedbackIndicatorData) == 0x00001C, "Wrong size on FHWDamageFeedbackIndicatorData");
static_assert(offsetof(FHWDamageFeedbackIndicatorData, InitIntensity) == 0x000008, "Member 'FHWDamageFeedbackIndicatorData::InitIntensity' has a wrong offset!");
static_assert(offsetof(FHWDamageFeedbackIndicatorData, Intensity) == 0x00000C, "Member 'FHWDamageFeedbackIndicatorData::Intensity' has a wrong offset!");
static_assert(offsetof(FHWDamageFeedbackIndicatorData, Magnitude) == 0x000010, "Member 'FHWDamageFeedbackIndicatorData::Magnitude' has a wrong offset!");
static_assert(offsetof(FHWDamageFeedbackIndicatorData, Rotation) == 0x000014, "Member 'FHWDamageFeedbackIndicatorData::Rotation' has a wrong offset!");
static_assert(offsetof(FHWDamageFeedbackIndicatorData, bIsFirstHit) == 0x000018, "Member 'FHWDamageFeedbackIndicatorData::bIsFirstHit' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDisplayInfoEffectWidgetConfigRow
// 0x0010 (0x0018 - 0x0008)
struct FHWDisplayInfoEffectWidgetConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           DisplayInfoTag;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWDisplayInfoEffectWidget> EffectWidgetClass;                                 // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDisplayInfoEffectWidgetConfigRow) == 0x000008, "Wrong alignment on FHWDisplayInfoEffectWidgetConfigRow");
static_assert(sizeof(FHWDisplayInfoEffectWidgetConfigRow) == 0x000018, "Wrong size on FHWDisplayInfoEffectWidgetConfigRow");
static_assert(offsetof(FHWDisplayInfoEffectWidgetConfigRow, DisplayInfoTag) == 0x000008, "Member 'FHWDisplayInfoEffectWidgetConfigRow::DisplayInfoTag' has a wrong offset!");
static_assert(offsetof(FHWDisplayInfoEffectWidgetConfigRow, EffectWidgetClass) == 0x000010, "Member 'FHWDisplayInfoEffectWidgetConfigRow::EffectWidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEndOfMatchResultsProgressSource
// 0x0040 (0x0040 - 0x0000)
struct FHWEndOfMatchResultsProgressSource final
{
public:
	float                                         StartingProgressCount;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingProgressPercent;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentProgressPercent;                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingLevel;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetLevel;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingProgress;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewProgress;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingProgress;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetProgress;                                    // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 BoosterProgress;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         VIPProgress;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWEndOfMatchResultsProgressSource) == 0x000008, "Wrong alignment on FHWEndOfMatchResultsProgressSource");
static_assert(sizeof(FHWEndOfMatchResultsProgressSource) == 0x000040, "Wrong size on FHWEndOfMatchResultsProgressSource");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, StartingProgressCount) == 0x000000, "Member 'FHWEndOfMatchResultsProgressSource::StartingProgressCount' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, StartingProgressPercent) == 0x000004, "Member 'FHWEndOfMatchResultsProgressSource::StartingProgressPercent' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, CurrentProgressPercent) == 0x000008, "Member 'FHWEndOfMatchResultsProgressSource::CurrentProgressPercent' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, StartingLevel) == 0x00000C, "Member 'FHWEndOfMatchResultsProgressSource::StartingLevel' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, CurrentLevel) == 0x000010, "Member 'FHWEndOfMatchResultsProgressSource::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, TargetLevel) == 0x000014, "Member 'FHWEndOfMatchResultsProgressSource::TargetLevel' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, RemainingProgress) == 0x000018, "Member 'FHWEndOfMatchResultsProgressSource::RemainingProgress' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, NewProgress) == 0x00001C, "Member 'FHWEndOfMatchResultsProgressSource::NewProgress' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, EndingProgress) == 0x000020, "Member 'FHWEndOfMatchResultsProgressSource::EndingProgress' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, TargetProgress) == 0x000024, "Member 'FHWEndOfMatchResultsProgressSource::TargetProgress' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, BoosterProgress) == 0x000028, "Member 'FHWEndOfMatchResultsProgressSource::BoosterProgress' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchResultsProgressSource, VIPProgress) == 0x000038, "Member 'FHWEndOfMatchResultsProgressSource::VIPProgress' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEndOfMatchRankedProgressSource
// 0x0138 (0x0138 - 0x0000)
struct FHWEndOfMatchRankedProgressSource final
{
public:
	float                                         CurrentSR;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedSR;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWSkillRatingRank                     CurrentRankConfig;                                 // 0x0008(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHWSkillRatingRank                     PreviousRankConfig;                                // 0x0068(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHWSkillRatingRank                     TargetRankConfig;                                  // 0x00C8(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         CurrentDivisionIndex;                              // 0x0128(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousDivisionIndex;                             // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetDivisionIndex;                               // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWEndOfMatchRankedProgressSource) == 0x000008, "Wrong alignment on FHWEndOfMatchRankedProgressSource");
static_assert(sizeof(FHWEndOfMatchRankedProgressSource) == 0x000138, "Wrong size on FHWEndOfMatchRankedProgressSource");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, CurrentSR) == 0x000000, "Member 'FHWEndOfMatchRankedProgressSource::CurrentSR' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, CachedSR) == 0x000004, "Member 'FHWEndOfMatchRankedProgressSource::CachedSR' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, CurrentRankConfig) == 0x000008, "Member 'FHWEndOfMatchRankedProgressSource::CurrentRankConfig' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, PreviousRankConfig) == 0x000068, "Member 'FHWEndOfMatchRankedProgressSource::PreviousRankConfig' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, TargetRankConfig) == 0x0000C8, "Member 'FHWEndOfMatchRankedProgressSource::TargetRankConfig' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, CurrentDivisionIndex) == 0x000128, "Member 'FHWEndOfMatchRankedProgressSource::CurrentDivisionIndex' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, PreviousDivisionIndex) == 0x00012C, "Member 'FHWEndOfMatchRankedProgressSource::PreviousDivisionIndex' has a wrong offset!");
static_assert(offsetof(FHWEndOfMatchRankedProgressSource, TargetDivisionIndex) == 0x000130, "Member 'FHWEndOfMatchRankedProgressSource::TargetDivisionIndex' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEventTextConfig
// 0x0028 (0x0028 - 0x0000)
struct FHWEventTextConfig final
{
public:
	struct FGameplayTag                           EventTextTag;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DefaultText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWEventTextBuilderBase>    TextBuilderClass;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWEventTextConfig) == 0x000008, "Wrong alignment on FHWEventTextConfig");
static_assert(sizeof(FHWEventTextConfig) == 0x000028, "Wrong size on FHWEventTextConfig");
static_assert(offsetof(FHWEventTextConfig, EventTextTag) == 0x000000, "Member 'FHWEventTextConfig::EventTextTag' has a wrong offset!");
static_assert(offsetof(FHWEventTextConfig, DefaultText) == 0x000008, "Member 'FHWEventTextConfig::DefaultText' has a wrong offset!");
static_assert(offsetof(FHWEventTextConfig, TextBuilderClass) == 0x000020, "Member 'FHWEventTextConfig::TextBuilderClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEventTextConfigRow
// 0x0028 (0x0030 - 0x0008)
struct FHWEventTextConfigRow final : public FTableRowBase
{
public:
	struct FHWEventTextConfig                     EventTextConfig;                                   // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWEventTextConfigRow) == 0x000008, "Wrong alignment on FHWEventTextConfigRow");
static_assert(sizeof(FHWEventTextConfigRow) == 0x000030, "Wrong size on FHWEventTextConfigRow");
static_assert(offsetof(FHWEventTextConfigRow, EventTextConfig) == 0x000008, "Member 'FHWEventTextConfigRow::EventTextConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFeedNotificationConfig
// 0x0020 (0x0020 - 0x0000)
struct FHWFeedNotificationConfig final
{
public:
	TSubclassOf<class UHWFeedNotificationBaseWidget> WidgetClass;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayDuration;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPoolNotification;                                 // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWFeedNotificationBaseWidget*>  PooledWidgets;                                     // 0x0010(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFeedNotificationConfig) == 0x000008, "Wrong alignment on FHWFeedNotificationConfig");
static_assert(sizeof(FHWFeedNotificationConfig) == 0x000020, "Wrong size on FHWFeedNotificationConfig");
static_assert(offsetof(FHWFeedNotificationConfig, WidgetClass) == 0x000000, "Member 'FHWFeedNotificationConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FHWFeedNotificationConfig, DisplayDuration) == 0x000008, "Member 'FHWFeedNotificationConfig::DisplayDuration' has a wrong offset!");
static_assert(offsetof(FHWFeedNotificationConfig, bPoolNotification) == 0x00000C, "Member 'FHWFeedNotificationConfig::bPoolNotification' has a wrong offset!");
static_assert(offsetof(FHWFeedNotificationConfig, PooledWidgets) == 0x000010, "Member 'FHWFeedNotificationConfig::PooledWidgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDisplayedFloatingText
// 0x0018 (0x0018 - 0x0000)
struct FHWDisplayedFloatingText final
{
public:
	class UHWFloatingTextWidget*                  DisplayedWidget;                                   // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWDisplayedFloatingText) == 0x000008, "Wrong alignment on FHWDisplayedFloatingText");
static_assert(sizeof(FHWDisplayedFloatingText) == 0x000018, "Wrong size on FHWDisplayedFloatingText");
static_assert(offsetof(FHWDisplayedFloatingText, DisplayedWidget) == 0x000000, "Member 'FHWDisplayedFloatingText::DisplayedWidget' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextDisplayQueue
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FHWFloatingTextDisplayQueue final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWFloatingTextDisplayQueue) == 0x000008, "Wrong alignment on FHWFloatingTextDisplayQueue");
static_assert(sizeof(FHWFloatingTextDisplayQueue) == 0x000048, "Wrong size on FHWFloatingTextDisplayQueue");

// ScriptStruct HemingwayUI.HWFloatingTextTimedOffset
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FHWFloatingTextTimedOffset final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWFloatingTextTimedOffset) == 0x000008, "Wrong alignment on FHWFloatingTextTimedOffset");
static_assert(sizeof(FHWFloatingTextTimedOffset) == 0x000050, "Wrong size on FHWFloatingTextTimedOffset");

// ScriptStruct HemingwayUI.HWFloatingTextPoolConfig
// 0x0010 (0x0010 - 0x0000)
struct FHWFloatingTextPoolConfig final
{
public:
	TSubclassOf<class UHWFloatingTextWidget>      FloatingWidgetClass;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialPoolSize;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxWidgets;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFloatingTextPoolConfig) == 0x000008, "Wrong alignment on FHWFloatingTextPoolConfig");
static_assert(sizeof(FHWFloatingTextPoolConfig) == 0x000010, "Wrong size on FHWFloatingTextPoolConfig");
static_assert(offsetof(FHWFloatingTextPoolConfig, FloatingWidgetClass) == 0x000000, "Member 'FHWFloatingTextPoolConfig::FloatingWidgetClass' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextPoolConfig, InitialPoolSize) == 0x000008, "Member 'FHWFloatingTextPoolConfig::InitialPoolSize' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextPoolConfig, MaxWidgets) == 0x00000C, "Member 'FHWFloatingTextPoolConfig::MaxWidgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleLocalCustomModifier
// 0x0068 (0x0068 - 0x0000)
struct FHWUIStyleLocalCustomModifier final
{
public:
	class FName                                   ModifierName;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModifierValue;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHWHUDLayoutPreset, float>               OverrideModifierValues;                            // 0x0010(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UHWUIStyleCustomModifierDisplayData*    DisplayData;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleLocalCustomModifier) == 0x000008, "Wrong alignment on FHWUIStyleLocalCustomModifier");
static_assert(sizeof(FHWUIStyleLocalCustomModifier) == 0x000068, "Wrong size on FHWUIStyleLocalCustomModifier");
static_assert(offsetof(FHWUIStyleLocalCustomModifier, ModifierName) == 0x000000, "Member 'FHWUIStyleLocalCustomModifier::ModifierName' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalCustomModifier, ModifierValue) == 0x000008, "Member 'FHWUIStyleLocalCustomModifier::ModifierValue' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalCustomModifier, OverrideModifierValues) == 0x000010, "Member 'FHWUIStyleLocalCustomModifier::OverrideModifierValues' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalCustomModifier, DisplayData) == 0x000060, "Member 'FHWUIStyleLocalCustomModifier::DisplayData' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextConfig
// 0x0030 (0x0030 - 0x0000)
struct FHWFloatingTextConfig final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdditive;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWFloatingTextPoolConfig              PoolConfig;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MinimumDisplayDistance;                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyShowOnLOS;                                    // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyShowLocalRelevant;                            // 0x001D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderOriginalInstigator;                       // 0x001E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressZero;                                     // 0x001F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Limits;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFloatingTextConfig) == 0x000008, "Wrong alignment on FHWFloatingTextConfig");
static_assert(sizeof(FHWFloatingTextConfig) == 0x000030, "Wrong size on FHWFloatingTextConfig");
static_assert(offsetof(FHWFloatingTextConfig, bIsEnabled) == 0x000000, "Member 'FHWFloatingTextConfig::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, bIsAdditive) == 0x000001, "Member 'FHWFloatingTextConfig::bIsAdditive' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, PoolConfig) == 0x000008, "Member 'FHWFloatingTextConfig::PoolConfig' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, MinimumDisplayDistance) == 0x000018, "Member 'FHWFloatingTextConfig::MinimumDisplayDistance' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, bOnlyShowOnLOS) == 0x00001C, "Member 'FHWFloatingTextConfig::bOnlyShowOnLOS' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, bOnlyShowLocalRelevant) == 0x00001D, "Member 'FHWFloatingTextConfig::bOnlyShowLocalRelevant' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, bConsiderOriginalInstigator) == 0x00001E, "Member 'FHWFloatingTextConfig::bConsiderOriginalInstigator' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, bSuppressZero) == 0x00001F, "Member 'FHWFloatingTextConfig::bSuppressZero' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextConfig, Limits) == 0x000020, "Member 'FHWFloatingTextConfig::Limits' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextQueueConfig
// 0x0028 (0x0028 - 0x0000)
struct FHWFloatingTextQueueConfig final
{
public:
	struct FGameplayTagContainer                  QueueTags;                                         // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         QueueTimer;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWFloatingTextQueueConfig) == 0x000008, "Wrong alignment on FHWFloatingTextQueueConfig");
static_assert(sizeof(FHWFloatingTextQueueConfig) == 0x000028, "Wrong size on FHWFloatingTextQueueConfig");
static_assert(offsetof(FHWFloatingTextQueueConfig, QueueTags) == 0x000000, "Member 'FHWFloatingTextQueueConfig::QueueTags' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextQueueConfig, QueueTimer) == 0x000020, "Member 'FHWFloatingTextQueueConfig::QueueTimer' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextTimedOffsetConfig
// 0x0038 (0x0038 - 0x0000)
struct FHWFloatingTextTimedOffsetConfig final
{
public:
	struct FGameplayTagContainer                  OffsetTags;                                        // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         OffsetTime;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              WidgetOffset;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFloatingTextTimedOffsetConfig) == 0x000008, "Wrong alignment on FHWFloatingTextTimedOffsetConfig");
static_assert(sizeof(FHWFloatingTextTimedOffsetConfig) == 0x000038, "Wrong size on FHWFloatingTextTimedOffsetConfig");
static_assert(offsetof(FHWFloatingTextTimedOffsetConfig, OffsetTags) == 0x000000, "Member 'FHWFloatingTextTimedOffsetConfig::OffsetTags' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextTimedOffsetConfig, OffsetTime) == 0x000020, "Member 'FHWFloatingTextTimedOffsetConfig::OffsetTime' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextTimedOffsetConfig, WidgetOffset) == 0x000028, "Member 'FHWFloatingTextTimedOffsetConfig::WidgetOffset' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextScale
// 0x0010 (0x0010 - 0x0000)
struct FHWFloatingTextScale final
{
public:
	float                                         MinPercentScalingValue;                            // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPercentScalingValue;                            // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFontSize;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFontSize;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFloatingTextScale) == 0x000004, "Wrong alignment on FHWFloatingTextScale");
static_assert(sizeof(FHWFloatingTextScale) == 0x000010, "Wrong size on FHWFloatingTextScale");
static_assert(offsetof(FHWFloatingTextScale, MinPercentScalingValue) == 0x000000, "Member 'FHWFloatingTextScale::MinPercentScalingValue' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextScale, MaxPercentScalingValue) == 0x000004, "Member 'FHWFloatingTextScale::MaxPercentScalingValue' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextScale, MinFontSize) == 0x000008, "Member 'FHWFloatingTextScale::MinFontSize' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextScale, MaxFontSize) == 0x00000C, "Member 'FHWFloatingTextScale::MaxFontSize' has a wrong offset!");

// ScriptStruct HemingwayUI.HWInputUIViewConfig
// 0x000C (0x000C - 0x0000)
struct FHWInputUIViewConfig final
{
public:
	struct FGameplayTag                           ViewName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnPressed;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWInputUIViewConfig) == 0x000004, "Wrong alignment on FHWInputUIViewConfig");
static_assert(sizeof(FHWInputUIViewConfig) == 0x00000C, "Wrong size on FHWInputUIViewConfig");
static_assert(offsetof(FHWInputUIViewConfig, ViewName) == 0x000000, "Member 'FHWInputUIViewConfig::ViewName' has a wrong offset!");
static_assert(offsetof(FHWInputUIViewConfig, bShowOnPressed) == 0x000008, "Member 'FHWInputUIViewConfig::bShowOnPressed' has a wrong offset!");

// ScriptStruct HemingwayUI.HWFloatingTextScaleEntry
// 0x0068 (0x0068 - 0x0000)
struct FHWFloatingTextScaleEntry final
{
public:
	struct FGameplayTagContainer                  CharacterTypeScalingTags;                          // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     ScalingAttribute;                                  // 0x0020(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWFloatingTextScale>           FloatingTextScalingList;                           // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWFloatingTextScaleEntry) == 0x000008, "Wrong alignment on FHWFloatingTextScaleEntry");
static_assert(sizeof(FHWFloatingTextScaleEntry) == 0x000068, "Wrong size on FHWFloatingTextScaleEntry");
static_assert(offsetof(FHWFloatingTextScaleEntry, CharacterTypeScalingTags) == 0x000000, "Member 'FHWFloatingTextScaleEntry::CharacterTypeScalingTags' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextScaleEntry, ScalingAttribute) == 0x000020, "Member 'FHWFloatingTextScaleEntry::ScalingAttribute' has a wrong offset!");
static_assert(offsetof(FHWFloatingTextScaleEntry, FloatingTextScalingList) == 0x000058, "Member 'FHWFloatingTextScaleEntry::FloatingTextScalingList' has a wrong offset!");

// ScriptStruct HemingwayUI.HWGameScoreTeamData
// 0x0010 (0x0010 - 0x0000)
struct FHWGameScoreTeamData final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamKills;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamGold;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamXP;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWGameScoreTeamData) == 0x000004, "Wrong alignment on FHWGameScoreTeamData");
static_assert(sizeof(FHWGameScoreTeamData) == 0x000010, "Wrong size on FHWGameScoreTeamData");
static_assert(offsetof(FHWGameScoreTeamData, TeamId) == 0x000000, "Member 'FHWGameScoreTeamData::TeamId' has a wrong offset!");
static_assert(offsetof(FHWGameScoreTeamData, TeamKills) == 0x000004, "Member 'FHWGameScoreTeamData::TeamKills' has a wrong offset!");
static_assert(offsetof(FHWGameScoreTeamData, TeamGold) == 0x000008, "Member 'FHWGameScoreTeamData::TeamGold' has a wrong offset!");
static_assert(offsetof(FHWGameScoreTeamData, TeamXP) == 0x00000C, "Member 'FHWGameScoreTeamData::TeamXP' has a wrong offset!");

// ScriptStruct HemingwayUI.HWOrderHeaderOverrideRow
// 0x00D0 (0x00D8 - 0x0008)
struct FHWOrderHeaderOverrideRow final : public FTableRowBase
{
public:
	class FText                                   Header;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FRH_LootId>                       LootIds;                                           // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<int32>                                   VendorIds;                                         // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExternalTransactionIds;                            // 0x00C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWOrderHeaderOverrideRow) == 0x000008, "Wrong alignment on FHWOrderHeaderOverrideRow");
static_assert(sizeof(FHWOrderHeaderOverrideRow) == 0x0000D8, "Wrong size on FHWOrderHeaderOverrideRow");
static_assert(offsetof(FHWOrderHeaderOverrideRow, Header) == 0x000008, "Member 'FHWOrderHeaderOverrideRow::Header' has a wrong offset!");
static_assert(offsetof(FHWOrderHeaderOverrideRow, Priority) == 0x000020, "Member 'FHWOrderHeaderOverrideRow::Priority' has a wrong offset!");
static_assert(offsetof(FHWOrderHeaderOverrideRow, LootIds) == 0x000028, "Member 'FHWOrderHeaderOverrideRow::LootIds' has a wrong offset!");
static_assert(offsetof(FHWOrderHeaderOverrideRow, VendorIds) == 0x000078, "Member 'FHWOrderHeaderOverrideRow::VendorIds' has a wrong offset!");
static_assert(offsetof(FHWOrderHeaderOverrideRow, ExternalTransactionIds) == 0x0000C8, "Member 'FHWOrderHeaderOverrideRow::ExternalTransactionIds' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHelpTipConfig
// 0x0138 (0x0138 - 0x0000)
struct FHWHelpTipConfig final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShow;                                       // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveOnDeath;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWarning;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HeaderTintColorTag;                                // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameModeExcludedTags;                              // 0x0070(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameModeExclusiveTags;                             // 0x0090(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               CharacterTagRequirements;                          // 0x00B0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHelpTipConfig) == 0x000008, "Wrong alignment on FHWHelpTipConfig");
static_assert(sizeof(FHWHelpTipConfig) == 0x000138, "Wrong size on FHWHelpTipConfig");
static_assert(offsetof(FHWHelpTipConfig, Priority) == 0x000000, "Member 'FHWHelpTipConfig::Priority' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, bAlwaysShow) == 0x000004, "Member 'FHWHelpTipConfig::bAlwaysShow' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, bRemoveOnDeath) == 0x000005, "Member 'FHWHelpTipConfig::bRemoveOnDeath' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, bIsWarning) == 0x000006, "Member 'FHWHelpTipConfig::bIsWarning' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, Duration) == 0x000008, "Member 'FHWHelpTipConfig::Duration' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, Title) == 0x000010, "Member 'FHWHelpTipConfig::Title' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, HeaderTintColorTag) == 0x000028, "Member 'FHWHelpTipConfig::HeaderTintColorTag' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, Description) == 0x000030, "Member 'FHWHelpTipConfig::Description' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, Icon) == 0x000048, "Member 'FHWHelpTipConfig::Icon' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, GameModeExcludedTags) == 0x000070, "Member 'FHWHelpTipConfig::GameModeExcludedTags' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, GameModeExclusiveTags) == 0x000090, "Member 'FHWHelpTipConfig::GameModeExclusiveTags' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfig, CharacterTagRequirements) == 0x0000B0, "Member 'FHWHelpTipConfig::CharacterTagRequirements' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHelpTipConfigRow
// 0x0140 (0x0148 - 0x0008)
struct FHWHelpTipConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           HelpTipTag;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWHelpTipConfig                       HelpTipConfig;                                     // 0x0010(0x0138)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHelpTipConfigRow) == 0x000008, "Wrong alignment on FHWHelpTipConfigRow");
static_assert(sizeof(FHWHelpTipConfigRow) == 0x000148, "Wrong size on FHWHelpTipConfigRow");
static_assert(offsetof(FHWHelpTipConfigRow, HelpTipTag) == 0x000008, "Member 'FHWHelpTipConfigRow::HelpTipTag' has a wrong offset!");
static_assert(offsetof(FHWHelpTipConfigRow, HelpTipConfig) == 0x000010, "Member 'FHWHelpTipConfigRow::HelpTipConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDEditorLayout
// 0x0060 (0x0060 - 0x0000)
struct FHWHUDEditorLayout final
{
public:
	class FString                                 LayoutName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FHWHUDEditorLayoutEntry> Entries;                               // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDEditorLayout) == 0x000008, "Wrong alignment on FHWHUDEditorLayout");
static_assert(sizeof(FHWHUDEditorLayout) == 0x000060, "Wrong size on FHWHUDEditorLayout");
static_assert(offsetof(FHWHUDEditorLayout, LayoutName) == 0x000000, "Member 'FHWHUDEditorLayout::LayoutName' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayout, Entries) == 0x000010, "Member 'FHWHUDEditorLayout::Entries' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDEditorLayouts
// 0x0020 (0x0020 - 0x0000)
struct FHWHUDEditorLayouts final
{
public:
	TArray<struct FHWHUDEditorLayout>             Layouts;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ActiveLayoutName;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDEditorLayouts) == 0x000008, "Wrong alignment on FHWHUDEditorLayouts");
static_assert(sizeof(FHWHUDEditorLayouts) == 0x000020, "Wrong size on FHWHUDEditorLayouts");
static_assert(offsetof(FHWHUDEditorLayouts, Layouts) == 0x000000, "Member 'FHWHUDEditorLayouts::Layouts' has a wrong offset!");
static_assert(offsetof(FHWHUDEditorLayouts, ActiveLayoutName) == 0x000010, "Member 'FHWHUDEditorLayouts::ActiveLayoutName' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDLayoutPresetWidget
// 0x0050 (0x0050 - 0x0000)
struct FHWHUDLayoutPresetWidget final
{
public:
	struct FAnchorData                            AnchorData;                                        // 0x0000(0x0040)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDLayoutPresetWidget) == 0x000008, "Wrong alignment on FHWHUDLayoutPresetWidget");
static_assert(sizeof(FHWHUDLayoutPresetWidget) == 0x000050, "Wrong size on FHWHUDLayoutPresetWidget");
static_assert(offsetof(FHWHUDLayoutPresetWidget, AnchorData) == 0x000000, "Member 'FHWHUDLayoutPresetWidget::AnchorData' has a wrong offset!");
static_assert(offsetof(FHWHUDLayoutPresetWidget, Alignment) == 0x000040, "Member 'FHWHUDLayoutPresetWidget::Alignment' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHUDLayoutPresetWidgets
// 0x0050 (0x0050 - 0x0000)
struct FHWHUDLayoutPresetWidgets final
{
public:
	TMap<class FName, struct FHWHUDLayoutPresetWidget> WidgetData;                                   // 0x0000(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHUDLayoutPresetWidgets) == 0x000008, "Wrong alignment on FHWHUDLayoutPresetWidgets");
static_assert(sizeof(FHWHUDLayoutPresetWidgets) == 0x000050, "Wrong size on FHWHUDLayoutPresetWidgets");
static_assert(offsetof(FHWHUDLayoutPresetWidgets, WidgetData) == 0x000000, "Member 'FHWHUDLayoutPresetWidgets::WidgetData' has a wrong offset!");

// ScriptStruct HemingwayUI.HWIconDisplayerIconConfig
// 0x0008 (0x0008 - 0x0000)
struct FHWIconDisplayerIconConfig
{
public:
	TSubclassOf<class UHWIconDisplayBaseWidget>   IconWidgetClass;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWIconDisplayerIconConfig) == 0x000008, "Wrong alignment on FHWIconDisplayerIconConfig");
static_assert(sizeof(FHWIconDisplayerIconConfig) == 0x000008, "Wrong size on FHWIconDisplayerIconConfig");
static_assert(offsetof(FHWIconDisplayerIconConfig, IconWidgetClass) == 0x000000, "Member 'FHWIconDisplayerIconConfig::IconWidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWIconDisplayerIconConfigRow
// 0x0018 (0x0020 - 0x0008)
struct FHWIconDisplayerIconConfigRow : public FTableRowBase
{
public:
	struct FGameplayTag                           DisplayInfoTag;                                    // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWidgetPool;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialPoolSize;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateOnEmptyPool;                                // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWIconDisplayerIconConfigRow) == 0x000008, "Wrong alignment on FHWIconDisplayerIconConfigRow");
static_assert(sizeof(FHWIconDisplayerIconConfigRow) == 0x000020, "Wrong size on FHWIconDisplayerIconConfigRow");
static_assert(offsetof(FHWIconDisplayerIconConfigRow, DisplayInfoTag) == 0x000008, "Member 'FHWIconDisplayerIconConfigRow::DisplayInfoTag' has a wrong offset!");
static_assert(offsetof(FHWIconDisplayerIconConfigRow, bIsEnabled) == 0x000010, "Member 'FHWIconDisplayerIconConfigRow::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWIconDisplayerIconConfigRow, bUseWidgetPool) == 0x000011, "Member 'FHWIconDisplayerIconConfigRow::bUseWidgetPool' has a wrong offset!");
static_assert(offsetof(FHWIconDisplayerIconConfigRow, InitialPoolSize) == 0x000014, "Member 'FHWIconDisplayerIconConfigRow::InitialPoolSize' has a wrong offset!");
static_assert(offsetof(FHWIconDisplayerIconConfigRow, bCreateOnEmptyPool) == 0x000018, "Member 'FHWIconDisplayerIconConfigRow::bCreateOnEmptyPool' has a wrong offset!");

// ScriptStruct HemingwayUI.HWScreenAlertConfig
// 0x0028 (0x0028 - 0x0000)
struct FHWScreenAlertConfig final
{
public:
	class UMaterialInstance*                      MaterialInstance;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DesiredSize;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWScreenAlertConfig) == 0x000008, "Wrong alignment on FHWScreenAlertConfig");
static_assert(sizeof(FHWScreenAlertConfig) == 0x000028, "Wrong size on FHWScreenAlertConfig");
static_assert(offsetof(FHWScreenAlertConfig, MaterialInstance) == 0x000000, "Member 'FHWScreenAlertConfig::MaterialInstance' has a wrong offset!");
static_assert(offsetof(FHWScreenAlertConfig, DesiredSize) == 0x000008, "Member 'FHWScreenAlertConfig::DesiredSize' has a wrong offset!");
static_assert(offsetof(FHWScreenAlertConfig, Alignment) == 0x000018, "Member 'FHWScreenAlertConfig::Alignment' has a wrong offset!");

// ScriptStruct HemingwayUI.HWIconWidgetPool
// 0x0018 (0x0018 - 0x0000)
struct FHWIconWidgetPool final
{
public:
	TArray<class UHWIconDisplayBaseWidget*>       Widgets;                                           // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWIconWidgetPool) == 0x000008, "Wrong alignment on FHWIconWidgetPool");
static_assert(sizeof(FHWIconWidgetPool) == 0x000018, "Wrong size on FHWIconWidgetPool");
static_assert(offsetof(FHWIconWidgetPool, Widgets) == 0x000000, "Member 'FHWIconWidgetPool::Widgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMinionBlipPool
// 0x0010 (0x0010 - 0x0000)
struct FHWMinionBlipPool final
{
public:
	TArray<class UHWMinimapMinionBlipWidget*>     BlipPool;                                          // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWMinionBlipPool) == 0x000008, "Wrong alignment on FHWMinionBlipPool");
static_assert(sizeof(FHWMinionBlipPool) == 0x000010, "Wrong size on FHWMinionBlipPool");
static_assert(offsetof(FHWMinionBlipPool, BlipPool) == 0x000000, "Member 'FHWMinionBlipPool::BlipPool' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMinionStateArray
// 0x0010 (0x0010 - 0x0000)
struct FHWMinionStateArray final
{
public:
	TArray<struct FHWPawnMinimapState>            MinionStates;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWMinionStateArray) == 0x000008, "Wrong alignment on FHWMinionStateArray");
static_assert(sizeof(FHWMinionStateArray) == 0x000010, "Wrong size on FHWMinionStateArray");
static_assert(offsetof(FHWMinionStateArray, MinionStates) == 0x000000, "Member 'FHWMinionStateArray::MinionStates' has a wrong offset!");

// ScriptStruct HemingwayUI.HWHealthTexturePair
// 0x0020 (0x0020 - 0x0000)
struct FHWHealthTexturePair final
{
public:
	float                                         HealthPercent;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ChaosTexture;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OrderTexture;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             NeutralTexture;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWHealthTexturePair) == 0x000008, "Wrong alignment on FHWHealthTexturePair");
static_assert(sizeof(FHWHealthTexturePair) == 0x000020, "Wrong size on FHWHealthTexturePair");
static_assert(offsetof(FHWHealthTexturePair, HealthPercent) == 0x000000, "Member 'FHWHealthTexturePair::HealthPercent' has a wrong offset!");
static_assert(offsetof(FHWHealthTexturePair, ChaosTexture) == 0x000008, "Member 'FHWHealthTexturePair::ChaosTexture' has a wrong offset!");
static_assert(offsetof(FHWHealthTexturePair, OrderTexture) == 0x000010, "Member 'FHWHealthTexturePair::OrderTexture' has a wrong offset!");
static_assert(offsetof(FHWHealthTexturePair, NeutralTexture) == 0x000018, "Member 'FHWHealthTexturePair::NeutralTexture' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleGlobalModifier_Color
// 0x0070 (0x0070 - 0x0000)
struct FHWUIStyleGlobalModifier_Color final
{
public:
	struct FGameplayTagContainer                  AllowedColorOverrides;                             // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FLinearColor> ColorOverrides;                                   // 0x0020(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleGlobalModifier_Color) == 0x000008, "Wrong alignment on FHWUIStyleGlobalModifier_Color");
static_assert(sizeof(FHWUIStyleGlobalModifier_Color) == 0x000070, "Wrong size on FHWUIStyleGlobalModifier_Color");
static_assert(offsetof(FHWUIStyleGlobalModifier_Color, AllowedColorOverrides) == 0x000000, "Member 'FHWUIStyleGlobalModifier_Color::AllowedColorOverrides' has a wrong offset!");
static_assert(offsetof(FHWUIStyleGlobalModifier_Color, ColorOverrides) == 0x000020, "Member 'FHWUIStyleGlobalModifier_Color::ColorOverrides' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMinimapIconWidgetConfig
// 0x0008 (0x0010 - 0x0008)
struct FHWMinimapIconWidgetConfig final : public FHWIconDisplayerIconConfig
{
public:
	int32                                         ZOrder;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanMove;                                          // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRotate;                                        // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowVision;                                       // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWMinimapIconWidgetConfig) == 0x000008, "Wrong alignment on FHWMinimapIconWidgetConfig");
static_assert(sizeof(FHWMinimapIconWidgetConfig) == 0x000010, "Wrong size on FHWMinimapIconWidgetConfig");
static_assert(offsetof(FHWMinimapIconWidgetConfig, ZOrder) == 0x000008, "Member 'FHWMinimapIconWidgetConfig::ZOrder' has a wrong offset!");
static_assert(offsetof(FHWMinimapIconWidgetConfig, bCanMove) == 0x00000C, "Member 'FHWMinimapIconWidgetConfig::bCanMove' has a wrong offset!");
static_assert(offsetof(FHWMinimapIconWidgetConfig, bCanRotate) == 0x00000D, "Member 'FHWMinimapIconWidgetConfig::bCanRotate' has a wrong offset!");
static_assert(offsetof(FHWMinimapIconWidgetConfig, bShowVision) == 0x00000E, "Member 'FHWMinimapIconWidgetConfig::bShowVision' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMinimapIconConfigRow
// 0x0010 (0x0030 - 0x0020)
struct FHWMinimapIconConfigRow final : public FHWIconDisplayerIconConfigRow
{
public:
	struct FHWMinimapIconWidgetConfig             IconConfig;                                        // 0x0020(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWMinimapIconConfigRow) == 0x000008, "Wrong alignment on FHWMinimapIconConfigRow");
static_assert(sizeof(FHWMinimapIconConfigRow) == 0x000030, "Wrong size on FHWMinimapIconConfigRow");
static_assert(offsetof(FHWMinimapIconConfigRow, IconConfig) == 0x000020, "Member 'FHWMinimapIconConfigRow::IconConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWTrackedAttributeData
// 0x0048 (0x0048 - 0x0000)
struct FHWTrackedAttributeData final
{
public:
	struct FGameplayAttribute                     TrackedAttribute;                                  // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWTrackedAttributeData) == 0x000008, "Wrong alignment on FHWTrackedAttributeData");
static_assert(sizeof(FHWTrackedAttributeData) == 0x000048, "Wrong size on FHWTrackedAttributeData");
static_assert(offsetof(FHWTrackedAttributeData, TrackedAttribute) == 0x000000, "Member 'FHWTrackedAttributeData::TrackedAttribute' has a wrong offset!");

// ScriptStruct HemingwayUI.HWMinimapTextureConfig
// 0x0030 (0x0030 - 0x0000)
struct FHWMinimapTextureConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              MapTexture;                                        // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapRepresentedSize;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMirroredMap;                                    // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWMinimapTextureConfig) == 0x000008, "Wrong alignment on FHWMinimapTextureConfig");
static_assert(sizeof(FHWMinimapTextureConfig) == 0x000030, "Wrong size on FHWMinimapTextureConfig");
static_assert(offsetof(FHWMinimapTextureConfig, MapTexture) == 0x000000, "Member 'FHWMinimapTextureConfig::MapTexture' has a wrong offset!");
static_assert(offsetof(FHWMinimapTextureConfig, MapRepresentedSize) == 0x000028, "Member 'FHWMinimapTextureConfig::MapRepresentedSize' has a wrong offset!");
static_assert(offsetof(FHWMinimapTextureConfig, bIsMirroredMap) == 0x00002C, "Member 'FHWMinimapTextureConfig::bIsMirroredMap' has a wrong offset!");

// ScriptStruct HemingwayUI.HWJungleCampWidgetConfig
// 0x0038 (0x0038 - 0x0000)
struct FHWJungleCampWidgetConfig final
{
public:
	TSoftObjectPtr<class UTexture2D>              CampTexture;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CampRespawnColor;                                  // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWJungleCampWidgetConfig) == 0x000008, "Wrong alignment on FHWJungleCampWidgetConfig");
static_assert(sizeof(FHWJungleCampWidgetConfig) == 0x000038, "Wrong size on FHWJungleCampWidgetConfig");
static_assert(offsetof(FHWJungleCampWidgetConfig, CampTexture) == 0x000000, "Member 'FHWJungleCampWidgetConfig::CampTexture' has a wrong offset!");
static_assert(offsetof(FHWJungleCampWidgetConfig, CampRespawnColor) == 0x000028, "Member 'FHWJungleCampWidgetConfig::CampRespawnColor' has a wrong offset!");

// ScriptStruct HemingwayUI.HWWorldOverlayNameplateCCFlags
// 0x0028 (0x0028 - 0x0000)
struct FHWWorldOverlayNameplateCCFlags final
{
public:
	struct FGameplayTag                           ImmunityTag;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBorderGlow;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ImmunityText;                                      // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWWorldOverlayNameplateCCFlags) == 0x000008, "Wrong alignment on FHWWorldOverlayNameplateCCFlags");
static_assert(sizeof(FHWWorldOverlayNameplateCCFlags) == 0x000028, "Wrong size on FHWWorldOverlayNameplateCCFlags");
static_assert(offsetof(FHWWorldOverlayNameplateCCFlags, ImmunityTag) == 0x000000, "Member 'FHWWorldOverlayNameplateCCFlags::ImmunityTag' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayNameplateCCFlags, bShowBorderGlow) == 0x000008, "Member 'FHWWorldOverlayNameplateCCFlags::bShowBorderGlow' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayNameplateCCFlags, ImmunityText) == 0x000010, "Member 'FHWWorldOverlayNameplateCCFlags::ImmunityText' has a wrong offset!");

// ScriptStruct HemingwayUI.HWWorldOverlayNameplatePassiveAddonWidgetConfig
// 0x0030 (0x0030 - 0x0000)
struct FHWWorldOverlayNameplatePassiveAddonWidgetConfig final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWPassiveApplyType                           ApplyType;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWWorldOverlayNameplatePassiveAddonWidgetConfig) == 0x000008, "Wrong alignment on FHWWorldOverlayNameplatePassiveAddonWidgetConfig");
static_assert(sizeof(FHWWorldOverlayNameplatePassiveAddonWidgetConfig) == 0x000030, "Wrong size on FHWWorldOverlayNameplatePassiveAddonWidgetConfig");
static_assert(offsetof(FHWWorldOverlayNameplatePassiveAddonWidgetConfig, WidgetClass) == 0x000000, "Member 'FHWWorldOverlayNameplatePassiveAddonWidgetConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayNameplatePassiveAddonWidgetConfig, ApplyType) == 0x000028, "Member 'FHWWorldOverlayNameplatePassiveAddonWidgetConfig::ApplyType' has a wrong offset!");

// ScriptStruct HemingwayUI.HWWorldOverlayIconWidgetConfig
// 0x00A0 (0x00A8 - 0x0008)
struct FHWWorldOverlayIconWidgetConfig final : public FHWIconDisplayerIconConfig
{
public:
	uint8                                         ClampAxis;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ClampMargin;                                       // 0x000C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Alignment;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset;                                            // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenSpaceOffset;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetPivot;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDisplayDistance;                            // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWWorldOverlayRequiredLoS                    RequiredLOS;                                       // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScaleSetting;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScaleAtDistance;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedScaleModifier;                                // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToStartScaling;                         // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToStopScaling;                          // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleAtMinDistance;                                // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleAtMaxDistance;                                // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetScalePivot;                                  // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWWorldOverlayIconWidgetConfig) == 0x000008, "Wrong alignment on FHWWorldOverlayIconWidgetConfig");
static_assert(sizeof(FHWWorldOverlayIconWidgetConfig) == 0x0000A8, "Wrong size on FHWWorldOverlayIconWidgetConfig");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ClampAxis) == 0x000008, "Member 'FHWWorldOverlayIconWidgetConfig::ClampAxis' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ClampMargin) == 0x00000C, "Member 'FHWWorldOverlayIconWidgetConfig::ClampMargin' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, Alignment) == 0x000020, "Member 'FHWWorldOverlayIconWidgetConfig::Alignment' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, Offset) == 0x000038, "Member 'FHWWorldOverlayIconWidgetConfig::Offset' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ScreenSpaceOffset) == 0x000050, "Member 'FHWWorldOverlayIconWidgetConfig::ScreenSpaceOffset' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, WidgetPivot) == 0x000060, "Member 'FHWWorldOverlayIconWidgetConfig::WidgetPivot' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, MinimumDisplayDistance) == 0x000070, "Member 'FHWWorldOverlayIconWidgetConfig::MinimumDisplayDistance' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, RequiredLOS) == 0x000074, "Member 'FHWWorldOverlayIconWidgetConfig::RequiredLOS' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ScaleSetting) == 0x000078, "Member 'FHWWorldOverlayIconWidgetConfig::ScaleSetting' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, bScaleAtDistance) == 0x000080, "Member 'FHWWorldOverlayIconWidgetConfig::bScaleAtDistance' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, FixedScaleModifier) == 0x000084, "Member 'FHWWorldOverlayIconWidgetConfig::FixedScaleModifier' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, MinDistanceToStartScaling) == 0x000088, "Member 'FHWWorldOverlayIconWidgetConfig::MinDistanceToStartScaling' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, MaxDistanceToStopScaling) == 0x00008C, "Member 'FHWWorldOverlayIconWidgetConfig::MaxDistanceToStopScaling' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ScaleAtMinDistance) == 0x000090, "Member 'FHWWorldOverlayIconWidgetConfig::ScaleAtMinDistance' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, ScaleAtMaxDistance) == 0x000094, "Member 'FHWWorldOverlayIconWidgetConfig::ScaleAtMaxDistance' has a wrong offset!");
static_assert(offsetof(FHWWorldOverlayIconWidgetConfig, WidgetScalePivot) == 0x000098, "Member 'FHWWorldOverlayIconWidgetConfig::WidgetScalePivot' has a wrong offset!");

// ScriptStruct HemingwayUI.HWWorldOverlayIconConfigRow
// 0x00A8 (0x00C8 - 0x0020)
struct FHWWorldOverlayIconConfigRow final : public FHWIconDisplayerIconConfigRow
{
public:
	struct FHWWorldOverlayIconWidgetConfig        IconConfig;                                        // 0x0020(0x00A8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWWorldOverlayIconConfigRow) == 0x000008, "Wrong alignment on FHWWorldOverlayIconConfigRow");
static_assert(sizeof(FHWWorldOverlayIconConfigRow) == 0x0000C8, "Wrong size on FHWWorldOverlayIconConfigRow");
static_assert(offsetof(FHWWorldOverlayIconConfigRow, IconConfig) == 0x000020, "Member 'FHWWorldOverlayIconConfigRow::IconConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWKillEventDisplayConfigRow
// 0x0010 (0x0018 - 0x0008)
struct FHWKillEventDisplayConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWAccoladeEntryWidget>     DisplayWidgetClass;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWKillEventDisplayConfigRow) == 0x000008, "Wrong alignment on FHWKillEventDisplayConfigRow");
static_assert(sizeof(FHWKillEventDisplayConfigRow) == 0x000018, "Wrong size on FHWKillEventDisplayConfigRow");
static_assert(offsetof(FHWKillEventDisplayConfigRow, EventTag) == 0x000008, "Member 'FHWKillEventDisplayConfigRow::EventTag' has a wrong offset!");
static_assert(offsetof(FHWKillEventDisplayConfigRow, DisplayWidgetClass) == 0x000010, "Member 'FHWKillEventDisplayConfigRow::DisplayWidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEventDisplayQueueEntry
// 0x0098 (0x0098 - 0x0000)
struct FHWEventDisplayQueueEntry final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         TimeAdded;                                         // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWEventDisplayQueueEntry) == 0x000008, "Wrong alignment on FHWEventDisplayQueueEntry");
static_assert(sizeof(FHWEventDisplayQueueEntry) == 0x000098, "Wrong size on FHWEventDisplayQueueEntry");
static_assert(offsetof(FHWEventDisplayQueueEntry, EventTag) == 0x000000, "Member 'FHWEventDisplayQueueEntry::EventTag' has a wrong offset!");
static_assert(offsetof(FHWEventDisplayQueueEntry, EventContext) == 0x000008, "Member 'FHWEventDisplayQueueEntry::EventContext' has a wrong offset!");
static_assert(offsetof(FHWEventDisplayQueueEntry, TimeAdded) == 0x000090, "Member 'FHWEventDisplayQueueEntry::TimeAdded' has a wrong offset!");

// ScriptStruct HemingwayUI.HWObjectiveHealthbarConfig
// 0x0010 (0x0010 - 0x0000)
struct FHWObjectiveHealthbarConfig final
{
public:
	TSubclassOf<class UHWObjectiveHealthbarWidget> WidgetClass;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionRadius;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWObjectiveHealthbarConfig) == 0x000008, "Wrong alignment on FHWObjectiveHealthbarConfig");
static_assert(sizeof(FHWObjectiveHealthbarConfig) == 0x000010, "Wrong size on FHWObjectiveHealthbarConfig");
static_assert(offsetof(FHWObjectiveHealthbarConfig, WidgetClass) == 0x000000, "Member 'FHWObjectiveHealthbarConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FHWObjectiveHealthbarConfig, DetectionRadius) == 0x000008, "Member 'FHWObjectiveHealthbarConfig::DetectionRadius' has a wrong offset!");

// ScriptStruct HemingwayUI.HWPassiveMeterWidgetConfig
// 0x0028 (0x0028 - 0x0000)
struct FHWPassiveMeterWidgetConfig final
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWPassiveMeterWidgetConfig) == 0x000008, "Wrong alignment on FHWPassiveMeterWidgetConfig");
static_assert(sizeof(FHWPassiveMeterWidgetConfig) == 0x000028, "Wrong size on FHWPassiveMeterWidgetConfig");
static_assert(offsetof(FHWPassiveMeterWidgetConfig, WidgetClass) == 0x000000, "Member 'FHWPassiveMeterWidgetConfig::WidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWCharacterStatDisplayEntry
// 0x0108 (0x0110 - 0x0008)
struct FHWCharacterStatDisplayEntry final : public FTableRowBase
{
public:
	bool                                          bDisplayByDefault;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCharacterStatCategory                      CharacterStatCategory;                             // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCustomCharacterStatWidgetType              CustomStatWidgetType;                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAttribute>             CharacterStatAttributes;                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CharacterStatIcon;                                 // 0x0020(0x00D0)(Edit, NativeAccessSpecifierPublic)
	int32                                         MinimumFractionalDigitsToDisplay;                  // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigitsToDisplay;                  // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StatDisplayName;                                   // 0x00F8(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWCharacterStatDisplayEntry) == 0x000010, "Wrong alignment on FHWCharacterStatDisplayEntry");
static_assert(sizeof(FHWCharacterStatDisplayEntry) == 0x000110, "Wrong size on FHWCharacterStatDisplayEntry");
static_assert(offsetof(FHWCharacterStatDisplayEntry, bDisplayByDefault) == 0x000008, "Member 'FHWCharacterStatDisplayEntry::bDisplayByDefault' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, CharacterStatCategory) == 0x000009, "Member 'FHWCharacterStatDisplayEntry::CharacterStatCategory' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, CustomStatWidgetType) == 0x00000A, "Member 'FHWCharacterStatDisplayEntry::CustomStatWidgetType' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, CharacterStatAttributes) == 0x000010, "Member 'FHWCharacterStatDisplayEntry::CharacterStatAttributes' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, CharacterStatIcon) == 0x000020, "Member 'FHWCharacterStatDisplayEntry::CharacterStatIcon' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, MinimumFractionalDigitsToDisplay) == 0x0000F0, "Member 'FHWCharacterStatDisplayEntry::MinimumFractionalDigitsToDisplay' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, MaximumFractionalDigitsToDisplay) == 0x0000F4, "Member 'FHWCharacterStatDisplayEntry::MaximumFractionalDigitsToDisplay' has a wrong offset!");
static_assert(offsetof(FHWCharacterStatDisplayEntry, StatDisplayName) == 0x0000F8, "Member 'FHWCharacterStatDisplayEntry::StatDisplayName' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleWidgetConfig
// 0x000C (0x000C - 0x0000)
struct FHWUIStyleWidgetConfig final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  GlobalModifier;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUpdateStyle;                                  // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlatformModifiers;                                 // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWUIStyleWidgetConfig) == 0x000004, "Wrong alignment on FHWUIStyleWidgetConfig");
static_assert(sizeof(FHWUIStyleWidgetConfig) == 0x00000C, "Wrong size on FHWUIStyleWidgetConfig");
static_assert(offsetof(FHWUIStyleWidgetConfig, StyleTag) == 0x000000, "Member 'FHWUIStyleWidgetConfig::StyleTag' has a wrong offset!");
static_assert(offsetof(FHWUIStyleWidgetConfig, GlobalModifier) == 0x000008, "Member 'FHWUIStyleWidgetConfig::GlobalModifier' has a wrong offset!");
static_assert(offsetof(FHWUIStyleWidgetConfig, bAutoUpdateStyle) == 0x000009, "Member 'FHWUIStyleWidgetConfig::bAutoUpdateStyle' has a wrong offset!");
static_assert(offsetof(FHWUIStyleWidgetConfig, PlatformModifiers) == 0x00000A, "Member 'FHWUIStyleWidgetConfig::PlatformModifiers' has a wrong offset!");

// ScriptStruct HemingwayUI.HWEquipmentLevelBarPipConfig
// 0x00E0 (0x00E0 - 0x0000)
struct FHWEquipmentLevelBarPipConfig final
{
public:
	struct FHWUIStyleWidgetConfig                 ColorStyle;                                        // 0x0000(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWEquipmentLevelBarPipConfig) == 0x000010, "Wrong alignment on FHWEquipmentLevelBarPipConfig");
static_assert(sizeof(FHWEquipmentLevelBarPipConfig) == 0x0000E0, "Wrong size on FHWEquipmentLevelBarPipConfig");
static_assert(offsetof(FHWEquipmentLevelBarPipConfig, ColorStyle) == 0x000000, "Member 'FHWEquipmentLevelBarPipConfig::ColorStyle' has a wrong offset!");
static_assert(offsetof(FHWEquipmentLevelBarPipConfig, Brush) == 0x000010, "Member 'FHWEquipmentLevelBarPipConfig::Brush' has a wrong offset!");

// ScriptStruct HemingwayUI.HWInventorySlotWidgetOverride
// 0x0010 (0x0010 - 0x0000)
struct FHWInventorySlotWidgetOverride final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWInventoryEquipmentWidget> EquipmentWidgetClass;                             // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWInventorySlotWidgetOverride) == 0x000008, "Wrong alignment on FHWInventorySlotWidgetOverride");
static_assert(sizeof(FHWInventorySlotWidgetOverride) == 0x000010, "Wrong size on FHWInventorySlotWidgetOverride");
static_assert(offsetof(FHWInventorySlotWidgetOverride, SlotIndex) == 0x000000, "Member 'FHWInventorySlotWidgetOverride::SlotIndex' has a wrong offset!");
static_assert(offsetof(FHWInventorySlotWidgetOverride, EquipmentWidgetClass) == 0x000008, "Member 'FHWInventorySlotWidgetOverride::EquipmentWidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWLoadingScreenTestData
// 0x0038 (0x0038 - 0x0000)
struct FHWLoadingScreenTestData final
{
public:
	class UHWCharacterItem*                       CharacterItem;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWSkinItem*                            SkinItem;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHWCollectionItem*>              BadgeItems;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UHWCollectionItem*>              TrackerItems;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHWCollectionItem*                      CardVFXItem;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWLoadingScreenTestData) == 0x000008, "Wrong alignment on FHWLoadingScreenTestData");
static_assert(sizeof(FHWLoadingScreenTestData) == 0x000038, "Wrong size on FHWLoadingScreenTestData");
static_assert(offsetof(FHWLoadingScreenTestData, CharacterItem) == 0x000000, "Member 'FHWLoadingScreenTestData::CharacterItem' has a wrong offset!");
static_assert(offsetof(FHWLoadingScreenTestData, SkinItem) == 0x000008, "Member 'FHWLoadingScreenTestData::SkinItem' has a wrong offset!");
static_assert(offsetof(FHWLoadingScreenTestData, BadgeItems) == 0x000010, "Member 'FHWLoadingScreenTestData::BadgeItems' has a wrong offset!");
static_assert(offsetof(FHWLoadingScreenTestData, TrackerItems) == 0x000020, "Member 'FHWLoadingScreenTestData::TrackerItems' has a wrong offset!");
static_assert(offsetof(FHWLoadingScreenTestData, CardVFXItem) == 0x000030, "Member 'FHWLoadingScreenTestData::CardVFXItem' has a wrong offset!");

// ScriptStruct HemingwayUI.HWRadialMenuPage
// 0x0028 (0x0028 - 0x0000)
struct FHWRadialMenuPage final
{
public:
	class FText                                   PageName;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FHWRadialMenuPageEntry>         Entries;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWRadialMenuPage) == 0x000008, "Wrong alignment on FHWRadialMenuPage");
static_assert(sizeof(FHWRadialMenuPage) == 0x000028, "Wrong size on FHWRadialMenuPage");
static_assert(offsetof(FHWRadialMenuPage, PageName) == 0x000000, "Member 'FHWRadialMenuPage::PageName' has a wrong offset!");
static_assert(offsetof(FHWRadialMenuPage, Entries) == 0x000018, "Member 'FHWRadialMenuPage::Entries' has a wrong offset!");

// ScriptStruct HemingwayUI.TabViewEntryRow
// 0x0030 (0x0038 - 0x0008)
struct FTabViewEntryRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           TabView;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TabDisplayText;                                    // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWWidget>                  ViewWidgetClass;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDefaultView;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTabViewEntryRow) == 0x000008, "Wrong alignment on FTabViewEntryRow");
static_assert(sizeof(FTabViewEntryRow) == 0x000038, "Wrong size on FTabViewEntryRow");
static_assert(offsetof(FTabViewEntryRow, TabView) == 0x000008, "Member 'FTabViewEntryRow::TabView' has a wrong offset!");
static_assert(offsetof(FTabViewEntryRow, TabDisplayText) == 0x000010, "Member 'FTabViewEntryRow::TabDisplayText' has a wrong offset!");
static_assert(offsetof(FTabViewEntryRow, ViewWidgetClass) == 0x000028, "Member 'FTabViewEntryRow::ViewWidgetClass' has a wrong offset!");
static_assert(offsetof(FTabViewEntryRow, bIsDefaultView) == 0x000030, "Member 'FTabViewEntryRow::bIsDefaultView' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDataDisplay_Keyword
// 0x00F0 (0x00F0 - 0x0000)
struct FHWDataDisplay_Keyword final
{
public:
	TSoftObjectPtr<class UTexture2D>              KeywordIcon;                                       // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KeywordName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   KeywordNameShort;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FText>        KeywordTexts;                                      // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  KeywordTags;                                       // 0x00A8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       KeywordMIC;                                        // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDataDisplay_Keyword) == 0x000008, "Wrong alignment on FHWDataDisplay_Keyword");
static_assert(sizeof(FHWDataDisplay_Keyword) == 0x0000F0, "Wrong size on FHWDataDisplay_Keyword");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordIcon) == 0x000000, "Member 'FHWDataDisplay_Keyword::KeywordIcon' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordName) == 0x000028, "Member 'FHWDataDisplay_Keyword::KeywordName' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordNameShort) == 0x000040, "Member 'FHWDataDisplay_Keyword::KeywordNameShort' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordTexts) == 0x000058, "Member 'FHWDataDisplay_Keyword::KeywordTexts' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordTags) == 0x0000A8, "Member 'FHWDataDisplay_Keyword::KeywordTags' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_Keyword, KeywordMIC) == 0x0000C8, "Member 'FHWDataDisplay_Keyword::KeywordMIC' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDataDisplay_KeywordRow
// 0x0100 (0x0108 - 0x0008)
struct FHWDataDisplay_KeywordRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           KeywordTag;                                        // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWDataDisplay_Keyword                 KeywordData;                                       // 0x0018(0x00F0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDataDisplay_KeywordRow) == 0x000008, "Wrong alignment on FHWDataDisplay_KeywordRow");
static_assert(sizeof(FHWDataDisplay_KeywordRow) == 0x000108, "Wrong size on FHWDataDisplay_KeywordRow");
static_assert(offsetof(FHWDataDisplay_KeywordRow, KeywordTag) == 0x000008, "Member 'FHWDataDisplay_KeywordRow::KeywordTag' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_KeywordRow, bEnabled) == 0x000010, "Member 'FHWDataDisplay_KeywordRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FHWDataDisplay_KeywordRow, KeywordData) == 0x000018, "Member 'FHWDataDisplay_KeywordRow::KeywordData' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDevHUDConfigRow
// 0x0030 (0x0038 - 0x0008)
struct FHWDevHUDConfigRow final : public FTableRowBase
{
public:
	bool                                          bIsEnabled;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   DevHUDWidgetClass;                                 // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDevHUDConfigRow) == 0x000008, "Wrong alignment on FHWDevHUDConfigRow");
static_assert(sizeof(FHWDevHUDConfigRow) == 0x000038, "Wrong size on FHWDevHUDConfigRow");
static_assert(offsetof(FHWDevHUDConfigRow, bIsEnabled) == 0x000008, "Member 'FHWDevHUDConfigRow::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWDevHUDConfigRow, DevHUDWidgetClass) == 0x000010, "Member 'FHWDevHUDConfigRow::DevHUDWidgetClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWNamedWidget
// 0x0018 (0x0018 - 0x0000)
struct FHWNamedWidget final
{
public:
	TWeakObjectPtr<class UWidget>                 Widget;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Coordinates;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWNamedWidget) == 0x000008, "Wrong alignment on FHWNamedWidget");
static_assert(sizeof(FHWNamedWidget) == 0x000018, "Wrong size on FHWNamedWidget");
static_assert(offsetof(FHWNamedWidget, Widget) == 0x000000, "Member 'FHWNamedWidget::Widget' has a wrong offset!");
static_assert(offsetof(FHWNamedWidget, Coordinates) == 0x000008, "Member 'FHWNamedWidget::Coordinates' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIActionBindingContainer
// 0x0040 (0x0040 - 0x0000)
struct FHWUIActionBindingContainer final
{
public:
	class FText                                   OverridePromptText;                                // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UInputAction*                           InputAction;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingConfig               BindingConfig;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWMultiPromptWidget*>           MultiPromptWidgets;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIActionBindingContainer) == 0x000008, "Wrong alignment on FHWUIActionBindingContainer");
static_assert(sizeof(FHWUIActionBindingContainer) == 0x000040, "Wrong size on FHWUIActionBindingContainer");
static_assert(offsetof(FHWUIActionBindingContainer, OverridePromptText) == 0x000000, "Member 'FHWUIActionBindingContainer::OverridePromptText' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingContainer, InputAction) == 0x000018, "Member 'FHWUIActionBindingContainer::InputAction' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingContainer, BindingConfig) == 0x000020, "Member 'FHWUIActionBindingContainer::BindingConfig' has a wrong offset!");
static_assert(offsetof(FHWUIActionBindingContainer, MultiPromptWidgets) == 0x000030, "Member 'FHWUIActionBindingContainer::MultiPromptWidgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWInputKeyBrushConfiguration
// 0x00F0 (0x00F0 - 0x0000)
struct FHWInputKeyBrushConfiguration final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            KeyBrush;                                          // 0x0020(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWInputKeyBrushConfiguration) == 0x000010, "Wrong alignment on FHWInputKeyBrushConfiguration");
static_assert(sizeof(FHWInputKeyBrushConfiguration) == 0x0000F0, "Wrong size on FHWInputKeyBrushConfiguration");
static_assert(offsetof(FHWInputKeyBrushConfiguration, Key) == 0x000000, "Member 'FHWInputKeyBrushConfiguration::Key' has a wrong offset!");
static_assert(offsetof(FHWInputKeyBrushConfiguration, KeyBrush) == 0x000020, "Member 'FHWInputKeyBrushConfiguration::KeyBrush' has a wrong offset!");

// ScriptStruct HemingwayUI.HWKeyBinderCategory
// 0x0080 (0x0080 - 0x0000)
struct FHWKeyBinderCategory final
{
public:
	class FText                                   ContextDisplayName;                                // 0x0000(0x0018)(NativeAccessSpecifierPublic)
	class FText                                   CategoryName;                                      // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	TMap<class FName, class UHWKeyBinderEntryWidget*> KeyEntryWidgets;                               // 0x0030(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWKeyBinderCategory) == 0x000008, "Wrong alignment on FHWKeyBinderCategory");
static_assert(sizeof(FHWKeyBinderCategory) == 0x000080, "Wrong size on FHWKeyBinderCategory");
static_assert(offsetof(FHWKeyBinderCategory, ContextDisplayName) == 0x000000, "Member 'FHWKeyBinderCategory::ContextDisplayName' has a wrong offset!");
static_assert(offsetof(FHWKeyBinderCategory, CategoryName) == 0x000018, "Member 'FHWKeyBinderCategory::CategoryName' has a wrong offset!");
static_assert(offsetof(FHWKeyBinderCategory, KeyEntryWidgets) == 0x000030, "Member 'FHWKeyBinderCategory::KeyEntryWidgets' has a wrong offset!");

// ScriptStruct HemingwayUI.HWPersistentWidgetConfig
// 0x0038 (0x0040 - 0x0008)
struct FHWPersistentWidgetConfig final : public FTableRowBase
{
public:
	struct FGameplayTag                           PersistentWidgetTag;                               // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreload;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWPersistentWidgetConfig) == 0x000008, "Wrong alignment on FHWPersistentWidgetConfig");
static_assert(sizeof(FHWPersistentWidgetConfig) == 0x000040, "Wrong size on FHWPersistentWidgetConfig");
static_assert(offsetof(FHWPersistentWidgetConfig, PersistentWidgetTag) == 0x000008, "Member 'FHWPersistentWidgetConfig::PersistentWidgetTag' has a wrong offset!");
static_assert(offsetof(FHWPersistentWidgetConfig, WidgetClass) == 0x000010, "Member 'FHWPersistentWidgetConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FHWPersistentWidgetConfig, bPreload) == 0x000038, "Member 'FHWPersistentWidgetConfig::bPreload' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyle_Scale
// 0x0004 (0x0004 - 0x0000)
struct FHWUIStyle_Scale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyle_Scale) == 0x000004, "Wrong alignment on FHWUIStyle_Scale");
static_assert(sizeof(FHWUIStyle_Scale) == 0x000004, "Wrong size on FHWUIStyle_Scale");
static_assert(offsetof(FHWUIStyle_Scale, Scale) == 0x000000, "Member 'FHWUIStyle_Scale::Scale' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyle_Font
// 0x0050 (0x0050 - 0x0000)
struct FHWUIStyle_Font final
{
public:
	class UObject*                                FontFamily;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Typeface;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LetterSpacing;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ShadowOffset;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineHeight;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextTransformPolicy                          TransformPolicy;                                   // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFontOutlineSettings                   OutlineSettings;                                   // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyle_Font) == 0x000008, "Wrong alignment on FHWUIStyle_Font");
static_assert(sizeof(FHWUIStyle_Font) == 0x000050, "Wrong size on FHWUIStyle_Font");
static_assert(offsetof(FHWUIStyle_Font, FontFamily) == 0x000000, "Member 'FHWUIStyle_Font::FontFamily' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, Typeface) == 0x000008, "Member 'FHWUIStyle_Font::Typeface' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, Size) == 0x000010, "Member 'FHWUIStyle_Font::Size' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, LetterSpacing) == 0x000014, "Member 'FHWUIStyle_Font::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, ShadowOffset) == 0x000018, "Member 'FHWUIStyle_Font::ShadowOffset' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, LineHeight) == 0x000028, "Member 'FHWUIStyle_Font::LineHeight' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, TransformPolicy) == 0x00002C, "Member 'FHWUIStyle_Font::TransformPolicy' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Font, OutlineSettings) == 0x000030, "Member 'FHWUIStyle_Font::OutlineSettings' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyle_Color
// 0x0020 (0x0020 - 0x0000)
struct FHWUIStyle_Color final
{
public:
	struct FGameplayTag                           ColorTag;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyle_Color) == 0x000008, "Wrong alignment on FHWUIStyle_Color");
static_assert(sizeof(FHWUIStyle_Color) == 0x000020, "Wrong size on FHWUIStyle_Color");
static_assert(offsetof(FHWUIStyle_Color, ColorTag) == 0x000000, "Member 'FHWUIStyle_Color::ColorTag' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Color, Color) == 0x000008, "Member 'FHWUIStyle_Color::Color' has a wrong offset!");
static_assert(offsetof(FHWUIStyle_Color, Material) == 0x000018, "Member 'FHWUIStyle_Color::Material' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleRow
// 0x0018 (0x0020 - 0x0008)
struct FHWUIStyleRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWUIStyle*                             StyleAsset;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWUIStyleRow) == 0x000008, "Wrong alignment on FHWUIStyleRow");
static_assert(sizeof(FHWUIStyleRow) == 0x000020, "Wrong size on FHWUIStyleRow");
static_assert(offsetof(FHWUIStyleRow, StyleTag) == 0x000008, "Member 'FHWUIStyleRow::StyleTag' has a wrong offset!");
static_assert(offsetof(FHWUIStyleRow, StyleAsset) == 0x000010, "Member 'FHWUIStyleRow::StyleAsset' has a wrong offset!");
static_assert(offsetof(FHWUIStyleRow, bIsEnabled) == 0x000018, "Member 'FHWUIStyleRow::bIsEnabled' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleColorPaletteRow
// 0x0020 (0x0028 - 0x0008)
struct FHWUIStyleColorPaletteRow final : public FTableRowBase
{
public:
	bool                                          bIsEnabled;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ColorTag;                                          // 0x000C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0014(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  GlobalModifier;                                    // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWUIStyleColorPaletteRow) == 0x000008, "Wrong alignment on FHWUIStyleColorPaletteRow");
static_assert(sizeof(FHWUIStyleColorPaletteRow) == 0x000028, "Wrong size on FHWUIStyleColorPaletteRow");
static_assert(offsetof(FHWUIStyleColorPaletteRow, bIsEnabled) == 0x000008, "Member 'FHWUIStyleColorPaletteRow::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWUIStyleColorPaletteRow, ColorTag) == 0x00000C, "Member 'FHWUIStyleColorPaletteRow::ColorTag' has a wrong offset!");
static_assert(offsetof(FHWUIStyleColorPaletteRow, Color) == 0x000014, "Member 'FHWUIStyleColorPaletteRow::Color' has a wrong offset!");
static_assert(offsetof(FHWUIStyleColorPaletteRow, GlobalModifier) == 0x000024, "Member 'FHWUIStyleColorPaletteRow::GlobalModifier' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleGlobalModifier_Font
// 0x0004 (0x0004 - 0x0000)
struct FHWUIStyleGlobalModifier_Font final
{
public:
	float                                         SizePercent;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleGlobalModifier_Font) == 0x000004, "Wrong alignment on FHWUIStyleGlobalModifier_Font");
static_assert(sizeof(FHWUIStyleGlobalModifier_Font) == 0x000004, "Wrong size on FHWUIStyleGlobalModifier_Font");
static_assert(offsetof(FHWUIStyleGlobalModifier_Font, SizePercent) == 0x000000, "Member 'FHWUIStyleGlobalModifier_Font::SizePercent' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleGlobalModifier
// 0x0078 (0x0078 - 0x0000)
struct FHWUIStyleGlobalModifier final
{
public:
	struct FHWUIStyleGlobalModifier_Scale         ScaleModifier;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyleGlobalModifier_Font          FontModifier;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyleGlobalModifier_Color         ColorModifier;                                     // 0x0008(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleGlobalModifier) == 0x000008, "Wrong alignment on FHWUIStyleGlobalModifier");
static_assert(sizeof(FHWUIStyleGlobalModifier) == 0x000078, "Wrong size on FHWUIStyleGlobalModifier");
static_assert(offsetof(FHWUIStyleGlobalModifier, ScaleModifier) == 0x000000, "Member 'FHWUIStyleGlobalModifier::ScaleModifier' has a wrong offset!");
static_assert(offsetof(FHWUIStyleGlobalModifier, FontModifier) == 0x000004, "Member 'FHWUIStyleGlobalModifier::FontModifier' has a wrong offset!");
static_assert(offsetof(FHWUIStyleGlobalModifier, ColorModifier) == 0x000008, "Member 'FHWUIStyleGlobalModifier::ColorModifier' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleGlobalModifierRow
// 0x0080 (0x0088 - 0x0008)
struct FHWUIStyleGlobalModifierRow final : public FTableRowBase
{
public:
	EHWUIStyleGlobalModifierType                  ModifierType;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier               Modifier;                                          // 0x0010(0x0078)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleGlobalModifierRow) == 0x000008, "Wrong alignment on FHWUIStyleGlobalModifierRow");
static_assert(sizeof(FHWUIStyleGlobalModifierRow) == 0x000088, "Wrong size on FHWUIStyleGlobalModifierRow");
static_assert(offsetof(FHWUIStyleGlobalModifierRow, ModifierType) == 0x000008, "Member 'FHWUIStyleGlobalModifierRow::ModifierType' has a wrong offset!");
static_assert(offsetof(FHWUIStyleGlobalModifierRow, bIsEnabled) == 0x000009, "Member 'FHWUIStyleGlobalModifierRow::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWUIStyleGlobalModifierRow, Modifier) == 0x000010, "Member 'FHWUIStyleGlobalModifierRow::Modifier' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleLocalGenericModifier
// 0x000C (0x000C - 0x0000)
struct FHWUIStyleLocalGenericModifier final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleLocalGenericModifier) == 0x000004, "Wrong alignment on FHWUIStyleLocalGenericModifier");
static_assert(sizeof(FHWUIStyleLocalGenericModifier) == 0x00000C, "Wrong size on FHWUIStyleLocalGenericModifier");
static_assert(offsetof(FHWUIStyleLocalGenericModifier, bIsVisible) == 0x000000, "Member 'FHWUIStyleLocalGenericModifier::bIsVisible' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalGenericModifier, Scale) == 0x000004, "Member 'FHWUIStyleLocalGenericModifier::Scale' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalGenericModifier, Opacity) == 0x000008, "Member 'FHWUIStyleLocalGenericModifier::Opacity' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleLocalModifier
// 0x0088 (0x0088 - 0x0000)
struct FHWUIStyleLocalModifier final
{
public:
	class FText                                   WidgetDisplayName;                                 // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalGenericModifier         GenericModifier;                                   // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHWHUDLayoutPreset, struct FHWUIStyleLocalGenericModifier> GenericModifierPresets;          // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHWUIStyleLocalCustomModifier>  CustomModifiers;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleLocalModifier) == 0x000008, "Wrong alignment on FHWUIStyleLocalModifier");
static_assert(sizeof(FHWUIStyleLocalModifier) == 0x000088, "Wrong size on FHWUIStyleLocalModifier");
static_assert(offsetof(FHWUIStyleLocalModifier, WidgetDisplayName) == 0x000000, "Member 'FHWUIStyleLocalModifier::WidgetDisplayName' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalModifier, GenericModifier) == 0x000018, "Member 'FHWUIStyleLocalModifier::GenericModifier' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalModifier, GenericModifierPresets) == 0x000028, "Member 'FHWUIStyleLocalModifier::GenericModifierPresets' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalModifier, CustomModifiers) == 0x000078, "Member 'FHWUIStyleLocalModifier::CustomModifiers' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStyleLocalModifierRow
// 0x0018 (0x0020 - 0x0008)
struct FHWUIStyleLocalModifierRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           ModifierTag;                                       // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUIStyleLocalModifierData*            Modifier;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStyleLocalModifierRow) == 0x000008, "Wrong alignment on FHWUIStyleLocalModifierRow");
static_assert(sizeof(FHWUIStyleLocalModifierRow) == 0x000020, "Wrong size on FHWUIStyleLocalModifierRow");
static_assert(offsetof(FHWUIStyleLocalModifierRow, ModifierTag) == 0x000008, "Member 'FHWUIStyleLocalModifierRow::ModifierTag' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalModifierRow, bIsEnabled) == 0x000010, "Member 'FHWUIStyleLocalModifierRow::bIsEnabled' has a wrong offset!");
static_assert(offsetof(FHWUIStyleLocalModifierRow, Modifier) == 0x000018, "Member 'FHWUIStyleLocalModifierRow::Modifier' has a wrong offset!");

// ScriptStruct HemingwayUI.HWUIStylePlatformModifiers
// 0x0008 (0x0008 - 0x0000)
struct FHWUIStylePlatformModifiers final
{
public:
	float                                         FontSizeModifier;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumFontSize;                                   // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWUIStylePlatformModifiers) == 0x000004, "Wrong alignment on FHWUIStylePlatformModifiers");
static_assert(sizeof(FHWUIStylePlatformModifiers) == 0x000008, "Wrong size on FHWUIStylePlatformModifiers");
static_assert(offsetof(FHWUIStylePlatformModifiers, FontSizeModifier) == 0x000000, "Member 'FHWUIStylePlatformModifiers::FontSizeModifier' has a wrong offset!");
static_assert(offsetof(FHWUIStylePlatformModifiers, MinimumFontSize) == 0x000004, "Member 'FHWUIStylePlatformModifiers::MinimumFontSize' has a wrong offset!");

// ScriptStruct HemingwayUI.HWPendingCrossLevelViewRedirect
// 0x0058 (0x0058 - 0x0000)
struct FHWPendingCrossLevelViewRedirect final
{
public:
	TSoftObjectPtr<class UHWCollectionItem>       CollectionItem;                                    // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWCharacterItem>        AssociatedCharacter;                               // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewRedirectType                           RedirectType;                                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWPendingCrossLevelViewRedirect) == 0x000008, "Wrong alignment on FHWPendingCrossLevelViewRedirect");
static_assert(sizeof(FHWPendingCrossLevelViewRedirect) == 0x000058, "Wrong size on FHWPendingCrossLevelViewRedirect");
static_assert(offsetof(FHWPendingCrossLevelViewRedirect, CollectionItem) == 0x000000, "Member 'FHWPendingCrossLevelViewRedirect::CollectionItem' has a wrong offset!");
static_assert(offsetof(FHWPendingCrossLevelViewRedirect, AssociatedCharacter) == 0x000028, "Member 'FHWPendingCrossLevelViewRedirect::AssociatedCharacter' has a wrong offset!");
static_assert(offsetof(FHWPendingCrossLevelViewRedirect, RedirectType) == 0x000050, "Member 'FHWPendingCrossLevelViewRedirect::RedirectType' has a wrong offset!");

// ScriptStruct HemingwayUI.HWViewRedirectorConfig
// 0x000C (0x000C - 0x0000)
struct FHWViewRedirectorConfig final
{
public:
	EHWViewRedirectConfigType                     ConfigType;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           RedirectViewTag;                                   // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWViewRedirectorConfig) == 0x000004, "Wrong alignment on FHWViewRedirectorConfig");
static_assert(sizeof(FHWViewRedirectorConfig) == 0x00000C, "Wrong size on FHWViewRedirectorConfig");
static_assert(offsetof(FHWViewRedirectorConfig, ConfigType) == 0x000000, "Member 'FHWViewRedirectorConfig::ConfigType' has a wrong offset!");
static_assert(offsetof(FHWViewRedirectorConfig, RedirectViewTag) == 0x000004, "Member 'FHWViewRedirectorConfig::RedirectViewTag' has a wrong offset!");

// ScriptStruct HemingwayUI.HWViewRedirectorConfigRow
// 0x0018 (0x0020 - 0x0008)
struct FHWViewRedirectorConfigRow final : public FTableRowBase
{
public:
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SourceTag;                                         // 0x000C(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWViewRedirectorConfig                Config;                                            // 0x0014(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWViewRedirectorConfigRow) == 0x000008, "Wrong alignment on FHWViewRedirectorConfigRow");
static_assert(sizeof(FHWViewRedirectorConfigRow) == 0x000020, "Wrong size on FHWViewRedirectorConfigRow");
static_assert(offsetof(FHWViewRedirectorConfigRow, bEnabled) == 0x000008, "Member 'FHWViewRedirectorConfigRow::bEnabled' has a wrong offset!");
static_assert(offsetof(FHWViewRedirectorConfigRow, SourceTag) == 0x00000C, "Member 'FHWViewRedirectorConfigRow::SourceTag' has a wrong offset!");
static_assert(offsetof(FHWViewRedirectorConfigRow, Config) == 0x000014, "Member 'FHWViewRedirectorConfigRow::Config' has a wrong offset!");

// ScriptStruct HemingwayUI.HWComboBoxOption
// 0x0028 (0x0028 - 0x0000)
struct FHWComboBoxOption final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class UHWComboBoxEntry*                       EntryWidget;                                       // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWComboBoxOption) == 0x000008, "Wrong alignment on FHWComboBoxOption");
static_assert(sizeof(FHWComboBoxOption) == 0x000028, "Wrong size on FHWComboBoxOption");
static_assert(offsetof(FHWComboBoxOption, ID) == 0x000000, "Member 'FHWComboBoxOption::ID' has a wrong offset!");
static_assert(offsetof(FHWComboBoxOption, Text) == 0x000008, "Member 'FHWComboBoxOption::Text' has a wrong offset!");
static_assert(offsetof(FHWComboBoxOption, EntryWidget) == 0x000020, "Member 'FHWComboBoxOption::EntryWidget' has a wrong offset!");

// ScriptStruct HemingwayUI.HWRichTextStyleRow
// 0x0020 (0x0370 - 0x0350)
struct FHWRichTextStyleRow final : public FRichTextStyleRow
{
public:
	struct FHWUIStyleWidgetConfig                 FontStyle;                                         // 0x0350(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyleWidgetConfig                 FontColorStyle;                                    // 0x035C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHWRichTextStyleRow) == 0x000010, "Wrong alignment on FHWRichTextStyleRow");
static_assert(sizeof(FHWRichTextStyleRow) == 0x000370, "Wrong size on FHWRichTextStyleRow");
static_assert(offsetof(FHWRichTextStyleRow, FontStyle) == 0x000350, "Member 'FHWRichTextStyleRow::FontStyle' has a wrong offset!");
static_assert(offsetof(FHWRichTextStyleRow, FontColorStyle) == 0x00035C, "Member 'FHWRichTextStyleRow::FontColorStyle' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDynamicAnnouncementData_ClientUpdate
// 0x0010 (0x0010 - 0x0000)
struct FHWDynamicAnnouncementData_ClientUpdate final
{
public:
	int32                                         PC;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PS5;                                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XBox;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinGDK;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDynamicAnnouncementData_ClientUpdate) == 0x000004, "Wrong alignment on FHWDynamicAnnouncementData_ClientUpdate");
static_assert(sizeof(FHWDynamicAnnouncementData_ClientUpdate) == 0x000010, "Wrong size on FHWDynamicAnnouncementData_ClientUpdate");
static_assert(offsetof(FHWDynamicAnnouncementData_ClientUpdate, PC) == 0x000000, "Member 'FHWDynamicAnnouncementData_ClientUpdate::PC' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementData_ClientUpdate, PS5) == 0x000004, "Member 'FHWDynamicAnnouncementData_ClientUpdate::PS5' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementData_ClientUpdate, XBox) == 0x000008, "Member 'FHWDynamicAnnouncementData_ClientUpdate::XBox' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementData_ClientUpdate, WinGDK) == 0x00000C, "Member 'FHWDynamicAnnouncementData_ClientUpdate::WinGDK' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDynamicAnnouncementText
// 0x0028 (0x0028 - 0x0000)
struct FHWDynamicAnnouncementText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	uint8                                         AllowedPhases;                                     // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWDynamicAnnouncementEvaluator> EvaluatorClass;                               // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDynamicAnnouncementText) == 0x000008, "Wrong alignment on FHWDynamicAnnouncementText");
static_assert(sizeof(FHWDynamicAnnouncementText) == 0x000028, "Wrong size on FHWDynamicAnnouncementText");
static_assert(offsetof(FHWDynamicAnnouncementText, Text) == 0x000000, "Member 'FHWDynamicAnnouncementText::Text' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementText, AllowedPhases) == 0x000018, "Member 'FHWDynamicAnnouncementText::AllowedPhases' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementText, Priority) == 0x00001C, "Member 'FHWDynamicAnnouncementText::Priority' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementText, EvaluatorClass) == 0x000020, "Member 'FHWDynamicAnnouncementText::EvaluatorClass' has a wrong offset!");

// ScriptStruct HemingwayUI.HWDynamicAnnouncementTextRow
// 0x0030 (0x0038 - 0x0008)
struct FHWDynamicAnnouncementTextRow final : public FTableRowBase
{
public:
	class FName                                   TextId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWDynamicAnnouncementText             Text;                                              // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWDynamicAnnouncementTextRow) == 0x000008, "Wrong alignment on FHWDynamicAnnouncementTextRow");
static_assert(sizeof(FHWDynamicAnnouncementTextRow) == 0x000038, "Wrong size on FHWDynamicAnnouncementTextRow");
static_assert(offsetof(FHWDynamicAnnouncementTextRow, TextId) == 0x000008, "Member 'FHWDynamicAnnouncementTextRow::TextId' has a wrong offset!");
static_assert(offsetof(FHWDynamicAnnouncementTextRow, Text) == 0x000010, "Member 'FHWDynamicAnnouncementTextRow::Text' has a wrong offset!");

// ScriptStruct HemingwayUI.HWLoadedAbilityItem
// 0x0010 (0x0010 - 0x0000)
struct FHWLoadedAbilityItem final
{
public:
	class UHWEquipmentItem*                       AbilityEquipmentItem;                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DisplayComboTag;                                   // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWLoadedAbilityItem) == 0x000008, "Wrong alignment on FHWLoadedAbilityItem");
static_assert(sizeof(FHWLoadedAbilityItem) == 0x000010, "Wrong size on FHWLoadedAbilityItem");
static_assert(offsetof(FHWLoadedAbilityItem, AbilityEquipmentItem) == 0x000000, "Member 'FHWLoadedAbilityItem::AbilityEquipmentItem' has a wrong offset!");
static_assert(offsetof(FHWLoadedAbilityItem, DisplayComboTag) == 0x000008, "Member 'FHWLoadedAbilityItem::DisplayComboTag' has a wrong offset!");

// ScriptStruct HemingwayUI.HWButtonStateConfig
// 0x0014 (0x0014 - 0x0000)
struct FHWButtonStateConfig final
{
public:
	uint8                                         Flags;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TextFontStyleTag;                                  // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TextColorStyleTag;                                 // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FHWButtonStateConfig) == 0x000004, "Wrong alignment on FHWButtonStateConfig");
static_assert(sizeof(FHWButtonStateConfig) == 0x000014, "Wrong size on FHWButtonStateConfig");
static_assert(offsetof(FHWButtonStateConfig, Flags) == 0x000000, "Member 'FHWButtonStateConfig::Flags' has a wrong offset!");
static_assert(offsetof(FHWButtonStateConfig, TextFontStyleTag) == 0x000004, "Member 'FHWButtonStateConfig::TextFontStyleTag' has a wrong offset!");
static_assert(offsetof(FHWButtonStateConfig, TextColorStyleTag) == 0x00000C, "Member 'FHWButtonStateConfig::TextColorStyleTag' has a wrong offset!");

// ScriptStruct HemingwayUI.HWButtonImageStateConfig
// 0x00F0 (0x00F0 - 0x0000)
struct FHWButtonImageStateConfig final
{
public:
	struct FHWButtonStateConfig                   StateConfig;                                       // 0x0000(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Image;                                             // 0x0020(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWButtonImageStateConfig) == 0x000010, "Wrong alignment on FHWButtonImageStateConfig");
static_assert(sizeof(FHWButtonImageStateConfig) == 0x0000F0, "Wrong size on FHWButtonImageStateConfig");
static_assert(offsetof(FHWButtonImageStateConfig, StateConfig) == 0x000000, "Member 'FHWButtonImageStateConfig::StateConfig' has a wrong offset!");
static_assert(offsetof(FHWButtonImageStateConfig, Image) == 0x000020, "Member 'FHWButtonImageStateConfig::Image' has a wrong offset!");

// ScriptStruct HemingwayUI.HWGainLossBarPercentRangeConfig
// 0x0050 (0x0050 - 0x0000)
struct FHWGainLossBarPercentRangeConfig final
{
public:
	float                                         MinRangePercent;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRangePercent;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CurrentValueColor;                                 // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GainValueColor;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LossValueColor;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CurrentValueColorTag;                              // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GainValueColorTag;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LossValueColorTag;                                 // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWGainLossBarPercentRangeConfig) == 0x000004, "Wrong alignment on FHWGainLossBarPercentRangeConfig");
static_assert(sizeof(FHWGainLossBarPercentRangeConfig) == 0x000050, "Wrong size on FHWGainLossBarPercentRangeConfig");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, MinRangePercent) == 0x000000, "Member 'FHWGainLossBarPercentRangeConfig::MinRangePercent' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, MaxRangePercent) == 0x000004, "Member 'FHWGainLossBarPercentRangeConfig::MaxRangePercent' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, CurrentValueColor) == 0x000008, "Member 'FHWGainLossBarPercentRangeConfig::CurrentValueColor' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, GainValueColor) == 0x000018, "Member 'FHWGainLossBarPercentRangeConfig::GainValueColor' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, LossValueColor) == 0x000028, "Member 'FHWGainLossBarPercentRangeConfig::LossValueColor' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, CurrentValueColorTag) == 0x000038, "Member 'FHWGainLossBarPercentRangeConfig::CurrentValueColorTag' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, GainValueColorTag) == 0x000040, "Member 'FHWGainLossBarPercentRangeConfig::GainValueColorTag' has a wrong offset!");
static_assert(offsetof(FHWGainLossBarPercentRangeConfig, LossValueColorTag) == 0x000048, "Member 'FHWGainLossBarPercentRangeConfig::LossValueColorTag' has a wrong offset!");

// ScriptStruct HemingwayUI.HWScreenAlertConfigRow
// 0x0030 (0x0038 - 0x0008)
struct FHWScreenAlertConfigRow final : public FTableRowBase
{
public:
	struct FGameplayTag                           AlertTag;                                          // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWScreenAlertConfig                   AlertConfig;                                       // 0x0010(0x0028)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWScreenAlertConfigRow) == 0x000008, "Wrong alignment on FHWScreenAlertConfigRow");
static_assert(sizeof(FHWScreenAlertConfigRow) == 0x000038, "Wrong size on FHWScreenAlertConfigRow");
static_assert(offsetof(FHWScreenAlertConfigRow, AlertTag) == 0x000008, "Member 'FHWScreenAlertConfigRow::AlertTag' has a wrong offset!");
static_assert(offsetof(FHWScreenAlertConfigRow, AlertConfig) == 0x000010, "Member 'FHWScreenAlertConfigRow::AlertConfig' has a wrong offset!");

// ScriptStruct HemingwayUI.HWQuestRewardInfo
// 0x000C (0x000C - 0x0000)
struct FHWQuestRewardInfo final
{
public:
	int32                                         RewardCount;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPlatformInventoryItem>  RewardItem;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWQuestRewardInfo) == 0x000004, "Wrong alignment on FHWQuestRewardInfo");
static_assert(sizeof(FHWQuestRewardInfo) == 0x00000C, "Wrong size on FHWQuestRewardInfo");
static_assert(offsetof(FHWQuestRewardInfo, RewardCount) == 0x000000, "Member 'FHWQuestRewardInfo::RewardCount' has a wrong offset!");
static_assert(offsetof(FHWQuestRewardInfo, RewardItem) == 0x000004, "Member 'FHWQuestRewardInfo::RewardItem' has a wrong offset!");

// ScriptStruct HemingwayUI.HWAscensionPurchaseRewardItem
// 0x0010 (0x0010 - 0x0000)
struct FHWAscensionPurchaseRewardItem final
{
public:
	class UPlatformInventoryItem*                 PlatformItem;                                      // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           StoreItem;                                         // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHWAscensionPurchaseRewardItem) == 0x000008, "Wrong alignment on FHWAscensionPurchaseRewardItem");
static_assert(sizeof(FHWAscensionPurchaseRewardItem) == 0x000010, "Wrong size on FHWAscensionPurchaseRewardItem");
static_assert(offsetof(FHWAscensionPurchaseRewardItem, PlatformItem) == 0x000000, "Member 'FHWAscensionPurchaseRewardItem::PlatformItem' has a wrong offset!");
static_assert(offsetof(FHWAscensionPurchaseRewardItem, StoreItem) == 0x000008, "Member 'FHWAscensionPurchaseRewardItem::StoreItem' has a wrong offset!");

}

