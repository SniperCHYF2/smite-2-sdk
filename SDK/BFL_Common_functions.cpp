#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_Common

#include "Basic.hpp"

#include "BFL_Common_classes.hpp"
#include "BFL_Common_parameters.hpp"


namespace SDK
{

// Function BFL_Common.BFL_Common_C.CheckTeams
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           ActorA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsOnSameTeam                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::CheckTeams(class AActor* ActorA, class AActor* ActorB, class UObject* __WorldContext, bool* IsOnSameTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "CheckTeams");

	Params::BFL_Common_C_CheckTeams Parms{};

	Parms.ActorA = ActorA;
	Parms.ActorB = ActorB;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsOnSameTeam != nullptr)
		*IsOnSameTeam = Parms.IsOnSameTeam;
}


// Function BFL_Common.BFL_Common_C.CompareValues
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  InputA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputB                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EOperators                              Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::CompareValues(double InputA, double InputB, EOperators Operation, class UObject* __WorldContext, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "CompareValues");

	Params::BFL_Common_C_CompareValues Parms{};

	Parms.InputA = InputA;
	Parms.InputB = InputB;
	Parms.Operation = Operation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BFL_Common.BFL_Common_C.FindClosestActor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>&                  ActorArray                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor*                           ActorToCheckAgainst                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor**                          ClosestActor                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::FindClosestActor(TArray<class AActor*>& ActorArray, class AActor* ActorToCheckAgainst, class UObject* __WorldContext, class AActor** ClosestActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "FindClosestActor");

	Params::BFL_Common_C_FindClosestActor Parms{};

	Parms.ActorArray = std::move(ActorArray);
	Parms.ActorToCheckAgainst = ActorToCheckAgainst;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ActorArray = std::move(Parms.ActorArray);

	if (ClosestActor != nullptr)
		*ClosestActor = Parms.ClosestActor;
}


// Function BFL_Common.BFL_Common_C.GetEquipPointRange
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              EquipTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Range                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::GetEquipPointRange(class AActor* Actor, const struct FGameplayTag& EquipTag, int32 SlotId, class UObject* __WorldContext, double* Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "GetEquipPointRange");

	Params::BFL_Common_C_GetEquipPointRange Parms{};

	Parms.Actor = Actor;
	Parms.EquipTag = std::move(EquipTag);
	Parms.SlotId = SlotId;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Range != nullptr)
		*Range = Parms.Range;
}


// Function BFL_Common.BFL_Common_C.IsPlayer
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPlayer_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::IsPlayer(class AActor* Actor, class UObject* __WorldContext, bool* IsPlayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "IsPlayer");

	Params::BFL_Common_C_IsPlayer Parms{};

	Parms.Actor = Actor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsPlayer_0 != nullptr)
		*IsPlayer_0 = Parms.IsPlayer_0;
}


// Function BFL_Common.BFL_Common_C.ToggleDynamicTag
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldAdd                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllowMultipleTags                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              GameplayTag                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldReplicate                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBFL_Common_C::ToggleDynamicTag(bool ShouldAdd, bool AllowMultipleTags, class AActor* Actor, const struct FGameplayTag& GameplayTag, bool bShouldReplicate, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_Common_C", "ToggleDynamicTag");

	Params::BFL_Common_C_ToggleDynamicTag Parms{};

	Parms.ShouldAdd = ShouldAdd;
	Parms.AllowMultipleTags = AllowMultipleTags;
	Parms.Actor = Actor;
	Parms.GameplayTag = std::move(GameplayTag);
	Parms.bShouldReplicate = bShouldReplicate;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

