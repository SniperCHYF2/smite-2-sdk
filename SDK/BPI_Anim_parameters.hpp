#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Anim

#include "Basic.hpp"

#include "ECharPassiveState_structs.hpp"
#include "RigVM_structs.hpp"
#include "ECharGenericStance_structs.hpp"
#include "E_CombatState_structs.hpp"


namespace SDK::Params
{

// Function BPI_Anim.BPI_Anim_C.BPI_AN_CanTransition
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_AN_CanTransition final
{
public:
	bool                                          CanTransition;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_CanTransition) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_AN_CanTransition");
static_assert(sizeof(BPI_Anim_C_BPI_AN_CanTransition) == 0x000001, "Wrong size on BPI_Anim_C_BPI_AN_CanTransition");
static_assert(offsetof(BPI_Anim_C_BPI_AN_CanTransition, CanTransition) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_CanTransition::CanTransition' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_AN_GenericStance
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_AN_GenericStance final
{
public:
	ECharGenericStance                            Stance_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_GenericStance) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_AN_GenericStance");
static_assert(sizeof(BPI_Anim_C_BPI_AN_GenericStance) == 0x000001, "Wrong size on BPI_Anim_C_BPI_AN_GenericStance");
static_assert(offsetof(BPI_Anim_C_BPI_AN_GenericStance, Stance_State) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_GenericStance::Stance_State' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_AN_JumpEnd
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_AN_JumpEnd final
{
public:
	bool                                          JumpEnd;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_JumpEnd) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_AN_JumpEnd");
static_assert(sizeof(BPI_Anim_C_BPI_AN_JumpEnd) == 0x000001, "Wrong size on BPI_Anim_C_BPI_AN_JumpEnd");
static_assert(offsetof(BPI_Anim_C_BPI_AN_JumpEnd, JumpEnd) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_JumpEnd::JumpEnd' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_AN_PassiveState
// 0x0010 (0x0010 - 0x0000)
struct BPI_Anim_C_BPI_AN_PassiveState final
{
public:
	ECharPassiveState                             PassiveState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PassiveValue;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_PassiveState) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_AN_PassiveState");
static_assert(sizeof(BPI_Anim_C_BPI_AN_PassiveState) == 0x000010, "Wrong size on BPI_Anim_C_BPI_AN_PassiveState");
static_assert(offsetof(BPI_Anim_C_BPI_AN_PassiveState, PassiveState) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_PassiveState::PassiveState' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_AN_PassiveState, PassiveValue) == 0x000008, "Member 'BPI_Anim_C_BPI_AN_PassiveState::PassiveValue' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_AN_PlayRate
// 0x0008 (0x0008 - 0x0000)
struct BPI_Anim_C_BPI_AN_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_PlayRate) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_AN_PlayRate");
static_assert(sizeof(BPI_Anim_C_BPI_AN_PlayRate) == 0x000008, "Wrong size on BPI_Anim_C_BPI_AN_PlayRate");
static_assert(offsetof(BPI_Anim_C_BPI_AN_PlayRate, PlayRate) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_PlayRate::PlayRate' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_AN_RunVariant
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_AN_RunVariant final
{
public:
	bool                                          Variant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_AN_RunVariant) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_AN_RunVariant");
static_assert(sizeof(BPI_Anim_C_BPI_AN_RunVariant) == 0x000001, "Wrong size on BPI_Anim_C_BPI_AN_RunVariant");
static_assert(offsetof(BPI_Anim_C_BPI_AN_RunVariant, Variant) == 0x000000, "Member 'BPI_Anim_C_BPI_AN_RunVariant::Variant' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_DisablePhysics
// 0x000C (0x000C - 0x0000)
struct BPI_Anim_C_BPI_ANS_DisablePhysics final
{
public:
	class FName                                   Bone_Name;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Turn_Off;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_DisablePhysics) == 0x000004, "Wrong alignment on BPI_Anim_C_BPI_ANS_DisablePhysics");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_DisablePhysics) == 0x00000C, "Wrong size on BPI_Anim_C_BPI_ANS_DisablePhysics");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_DisablePhysics, Bone_Name) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_DisablePhysics::Bone_Name' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_DisablePhysics, Turn_Off) == 0x000008, "Member 'BPI_Anim_C_BPI_ANS_DisablePhysics::Turn_Off' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_DisableTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_DisableTurnInPlace final
{
public:
	bool                                          DisableTurnInPlace;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_DisableTurnInPlace");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_DisableTurnInPlace");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_DisableTurnInPlace, DisableTurnInPlace) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_DisableTurnInPlace::DisableTurnInPlace' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_EmoteQuery
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_EmoteQuery final
{
public:
	bool                                          EmoteQuery;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_EmoteQuery");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_EmoteQuery");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_EmoteQuery, EmoteQuery) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_EmoteQuery::EmoteQuery' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ForceFullBody
// 0x0010 (0x0010 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ForceFullBody final
{
public:
	bool                                          Fullbody;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendOutTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ForceFullBody) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_ForceFullBody");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ForceFullBody) == 0x000010, "Wrong size on BPI_Anim_C_BPI_ANS_ForceFullBody");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ForceFullBody, Fullbody) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ForceFullBody::Fullbody' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ForceFullBody, BlendOutTime) == 0x000008, "Member 'BPI_Anim_C_BPI_ANS_ForceFullBody::BlendOutTime' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_HideBlueprintVFX
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_HideBlueprintVFX final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_HideBlueprintVFX");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_HideBlueprintVFX");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_HideBlueprintVFX, Hide) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_HideBlueprintVFX::Hide' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_PlayRate
// 0x0010 (0x0010 - 0x0000)
struct BPI_Anim_C_BPI_ANS_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_PlayRate) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_PlayRate");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_PlayRate) == 0x000010, "Wrong size on BPI_Anim_C_BPI_ANS_PlayRate");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_PlayRate, PlayRate) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_PlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_PlayRate, Duration) == 0x000008, "Member 'BPI_Anim_C_BPI_ANS_PlayRate::Duration' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_Prop01Lock
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_Prop01Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_Prop01Lock");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_Prop01Lock");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_Prop01Lock, Lock) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_Prop01Lock::Lock' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_Prop02Lock
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_Prop02Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_Prop02Lock");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_Prop02Lock");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_Prop02Lock, Lock) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_Prop02Lock::Lock' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleCharacter
// 0x0008 (0x0008 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ScaleCharacter final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_ScaleCharacter");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong size on BPI_Anim_C_BPI_ANS_ScaleCharacter");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleCharacter, ScaleValue) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ScaleCharacter::ScaleValue' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleFromCurve
// 0x00A0 (0x00A0 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ScaleFromCurve final
{
public:
	struct FRigVMFunction_AnimRichCurve           BoneScaleCurve;                                    // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   Bone_Name;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ScaleFromCurve) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_ScaleFromCurve");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ScaleFromCurve) == 0x0000A0, "Wrong size on BPI_Anim_C_BPI_ANS_ScaleFromCurve");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleFromCurve, BoneScaleCurve) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ScaleFromCurve::BoneScaleCurve' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleFromCurve, Bone_Name) == 0x000090, "Member 'BPI_Anim_C_BPI_ANS_ScaleFromCurve::Bone_Name' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleFromCurve, Scale) == 0x000098, "Member 'BPI_Anim_C_BPI_ANS_ScaleFromCurve::Scale' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleWeapon
// 0x0010 (0x0010 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ScaleWeapon final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ScaleWeapon) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_ScaleWeapon");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ScaleWeapon) == 0x000010, "Wrong size on BPI_Anim_C_BPI_ANS_ScaleWeapon");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleWeapon, ScaleValue) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ScaleWeapon::ScaleValue' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleWeapon, Weapon) == 0x000008, "Member 'BPI_Anim_C_BPI_ANS_ScaleWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ScaleWeapon, Override) == 0x00000C, "Member 'BPI_Anim_C_BPI_ANS_ScaleWeapon::Override' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ShowMesh
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ShowMesh final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_ShowMesh");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_ShowMesh");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ShowMesh, Visibility) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ShowMesh::Visibility' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_StopMotionWarping
// 0x0008 (0x0008 - 0x0000)
struct BPI_Anim_C_BPI_ANS_StopMotionWarping final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_ANS_StopMotionWarping");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong size on BPI_Anim_C_BPI_ANS_StopMotionWarping");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_StopMotionWarping, AlphaValue) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_StopMotionWarping::AlphaValue' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ToggleBoulder
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ANS_ToggleBoulder final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ANS_ToggleBoulder");
static_assert(sizeof(BPI_Anim_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ANS_ToggleBoulder");
static_assert(offsetof(BPI_Anim_C_BPI_ANS_ToggleBoulder, Visible) == 0x000000, "Member 'BPI_Anim_C_BPI_ANS_ToggleBoulder::Visible' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_BellonaWeaponOverride
// 0x0002 (0x0002 - 0x0000)
struct BPI_Anim_C_BPI_BellonaWeaponOverride final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            OverrideStance;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_BellonaWeaponOverride) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_BellonaWeaponOverride");
static_assert(sizeof(BPI_Anim_C_BPI_BellonaWeaponOverride) == 0x000002, "Wrong size on BPI_Anim_C_BPI_BellonaWeaponOverride");
static_assert(offsetof(BPI_Anim_C_BPI_BellonaWeaponOverride, Override) == 0x000000, "Member 'BPI_Anim_C_BPI_BellonaWeaponOverride::Override' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_BellonaWeaponOverride, OverrideStance) == 0x000001, "Member 'BPI_Anim_C_BPI_BellonaWeaponOverride::OverrideStance' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_ChildMesh_Outro
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_ChildMesh_Outro final
{
public:
	bool                                          PlayOutro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_ChildMesh_Outro");
static_assert(sizeof(BPI_Anim_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong size on BPI_Anim_C_BPI_ChildMesh_Outro");
static_assert(offsetof(BPI_Anim_C_BPI_ChildMesh_Outro, PlayOutro) == 0x000000, "Member 'BPI_Anim_C_BPI_ChildMesh_Outro::PlayOutro' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_CombatStance
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_CombatStance final
{
public:
	E_CombatState                                 CombatState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_CombatStance) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_CombatStance");
static_assert(sizeof(BPI_Anim_C_BPI_CombatStance) == 0x000001, "Wrong size on BPI_Anim_C_BPI_CombatStance");
static_assert(offsetof(BPI_Anim_C_BPI_CombatStance, CombatState) == 0x000000, "Member 'BPI_Anim_C_BPI_CombatStance::CombatState' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_Fire
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_Morrigan_Fire final
{
public:
	bool                                          PlayFire;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_Morrigan_Fire) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_Morrigan_Fire");
static_assert(sizeof(BPI_Anim_C_BPI_Morrigan_Fire) == 0x000001, "Wrong size on BPI_Anim_C_BPI_Morrigan_Fire");
static_assert(offsetof(BPI_Anim_C_BPI_Morrigan_Fire, PlayFire) == 0x000000, "Member 'BPI_Anim_C_BPI_Morrigan_Fire::PlayFire' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_PlayIntroA
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_Morrigan_PlayIntroA final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_Morrigan_PlayIntroA");
static_assert(sizeof(BPI_Anim_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong size on BPI_Anim_C_BPI_Morrigan_PlayIntroA");
static_assert(offsetof(BPI_Anim_C_BPI_Morrigan_PlayIntroA, PlayIntro) == 0x000000, "Member 'BPI_Anim_C_BPI_Morrigan_PlayIntroA::PlayIntro' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_PlayIntroB
// 0x0001 (0x0001 - 0x0000)
struct BPI_Anim_C_BPI_Morrigan_PlayIntroB final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong alignment on BPI_Anim_C_BPI_Morrigan_PlayIntroB");
static_assert(sizeof(BPI_Anim_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong size on BPI_Anim_C_BPI_Morrigan_PlayIntroB");
static_assert(offsetof(BPI_Anim_C_BPI_Morrigan_PlayIntroB, PlayIntro) == 0x000000, "Member 'BPI_Anim_C_BPI_Morrigan_PlayIntroB::PlayIntro' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_PelvisDirectionFromVelocity
// 0x0010 (0x0010 - 0x0000)
struct BPI_Anim_C_BPI_PelvisDirectionFromVelocity final
{
public:
	bool                                          UsePelvisDirection;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ALPHA;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_PelvisDirectionFromVelocity) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_PelvisDirectionFromVelocity");
static_assert(sizeof(BPI_Anim_C_BPI_PelvisDirectionFromVelocity) == 0x000010, "Wrong size on BPI_Anim_C_BPI_PelvisDirectionFromVelocity");
static_assert(offsetof(BPI_Anim_C_BPI_PelvisDirectionFromVelocity, UsePelvisDirection) == 0x000000, "Member 'BPI_Anim_C_BPI_PelvisDirectionFromVelocity::UsePelvisDirection' has a wrong offset!");
static_assert(offsetof(BPI_Anim_C_BPI_PelvisDirectionFromVelocity, ALPHA) == 0x000008, "Member 'BPI_Anim_C_BPI_PelvisDirectionFromVelocity::ALPHA' has a wrong offset!");

// Function BPI_Anim.BPI_Anim_C.BPI_TailAlpha
// 0x0008 (0x0008 - 0x0000)
struct BPI_Anim_C_BPI_TailAlpha final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Anim_C_BPI_TailAlpha) == 0x000008, "Wrong alignment on BPI_Anim_C_BPI_TailAlpha");
static_assert(sizeof(BPI_Anim_C_BPI_TailAlpha) == 0x000008, "Wrong size on BPI_Anim_C_BPI_TailAlpha");
static_assert(offsetof(BPI_Anim_C_BPI_TailAlpha, AlphaValue) == 0x000000, "Member 'BPI_Anim_C_BPI_TailAlpha::AlphaValue' has a wrong offset!");

}

