#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BotFactory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BotFactory.BP_BotFactory_C
// 0x00B0 (0x08E8 - 0x0838)
class ABP_BotFactory_C : public AHWBotFactory
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0838(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWVectorFieldWaypointComponent*        VectorFieldWaypointComp;                           // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Leash;                                             // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ATriggerVolume>          LeashVolume;                                       // 0x0850(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Character_Spawned;                                 // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UsesPullDistance;                                  // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_881[0x7];                                      // 0x0881(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PullTimer;                                         // 0x0888(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAggressive;                                      // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBindOnDamageEvent;                           // 0x0891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_892[0x6];                                      // 0x0892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, const struct FGameplayTagContainer& AssetTags)> CharacterDamaged; // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HasBlacksmithBuff;                                 // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A9[0x7];                                      // 0x08A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeashRadius;                                       // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLeashInEditor;                                 // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldIgnoreJungleVolumeCheck;                     // 0x08B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8BA[0x6];                                      // 0x08BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AHWBotFactory* BotFactory, class AActor* Causer)> CustomOnFactoryEmptied; // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsLightningEffectActive;                           // 0x08D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D1[0x7];                                      // 0x08D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            LightningEffect;                                   // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         TotalSpawnCount;                                   // 0x08E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyAncientFuryDebuff();
	void ApplyLightningEffect(class AHWCharacter_Base* Character);
	void BindOnDamageEvent(class AHWCharacter_Base* Character);
	void DebugDrawVectorField();
	void EndAbilityCalled();
	void ExecuteUbergraph_BP_BotFactory(int32 EntryPoint);
	void GenerateVectorField();
	void GetLeashCapsule(class UPrimitiveComponent** LeashComponent);
	void GetLeashRadius(double* LeashRadius_0);
	void GetLeashVolume(TSoftObjectPtr<class ATriggerVolume>* LeashVolume_0);
	void GetNearbyMinionCount(int32* MinionCount);
	void GetStartingWaypoints(TArray<TSoftObjectPtr<class AWaypoint_C>>* Waypoints);
	void LightningFuryDied();
	void MulticastCustomFactoryEmptied(class AActor* Causer);
	void OnFactoryEmptied(class AActor* Causer);
	void OnSpawnedBot(class AHWCharacter_Base* characterSpawned);
	void RemoveAncientFuryDebuff();
	void RetrieveTargetActor(class AActor** CurrentTargetActor);
	void SendDamageCallback(const struct FDamageEventData& DamageEventData);
	void UpdateNearbyMinionCount(int32 NewCount, int32* NewMinionCount);
	void UpdateTargetActor(class AActor* NewTargetActor);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BotFactory_C">();
	}
	static class ABP_BotFactory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BotFactory_C>();
	}
};
static_assert(alignof(ABP_BotFactory_C) == 0x000008, "Wrong alignment on ABP_BotFactory_C");
static_assert(sizeof(ABP_BotFactory_C) == 0x0008E8, "Wrong size on ABP_BotFactory_C");
static_assert(offsetof(ABP_BotFactory_C, UberGraphFrame) == 0x000838, "Member 'ABP_BotFactory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, VectorFieldWaypointComp) == 0x000840, "Member 'ABP_BotFactory_C::VectorFieldWaypointComp' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, Leash) == 0x000848, "Member 'ABP_BotFactory_C::Leash' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, LeashVolume) == 0x000850, "Member 'ABP_BotFactory_C::LeashVolume' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, Character_Spawned) == 0x000878, "Member 'ABP_BotFactory_C::Character_Spawned' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, UsesPullDistance) == 0x000880, "Member 'ABP_BotFactory_C::UsesPullDistance' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, PullTimer) == 0x000888, "Member 'ABP_BotFactory_C::PullTimer' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, IsAggressive) == 0x000890, "Member 'ABP_BotFactory_C::IsAggressive' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, ShouldBindOnDamageEvent) == 0x000891, "Member 'ABP_BotFactory_C::ShouldBindOnDamageEvent' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, CharacterDamaged) == 0x000898, "Member 'ABP_BotFactory_C::CharacterDamaged' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, HasBlacksmithBuff) == 0x0008A8, "Member 'ABP_BotFactory_C::HasBlacksmithBuff' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, LeashRadius) == 0x0008B0, "Member 'ABP_BotFactory_C::LeashRadius' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, ShowLeashInEditor) == 0x0008B8, "Member 'ABP_BotFactory_C::ShowLeashInEditor' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, ShouldIgnoreJungleVolumeCheck) == 0x0008B9, "Member 'ABP_BotFactory_C::ShouldIgnoreJungleVolumeCheck' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, CustomOnFactoryEmptied) == 0x0008C0, "Member 'ABP_BotFactory_C::CustomOnFactoryEmptied' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, IsLightningEffectActive) == 0x0008D0, "Member 'ABP_BotFactory_C::IsLightningEffectActive' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, LightningEffect) == 0x0008D8, "Member 'ABP_BotFactory_C::LightningEffect' has a wrong offset!");
static_assert(offsetof(ABP_BotFactory_C, TotalSpawnCount) == 0x0008E0, "Member 'ABP_BotFactory_C::TotalSpawnCount' has a wrong offset!");

}

