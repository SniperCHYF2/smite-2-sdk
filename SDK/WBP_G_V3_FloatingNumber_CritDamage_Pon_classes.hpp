#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V3_FloatingNumber_CritDamage_Pon

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "HemingwayUI_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_G_V3_FloatingNumber_CritDamage_Pon.WBP_G_V3_FloatingNumber_CritDamage_Pon_C
// 0x0108 (0x07B0 - 0x06A8)
class UWBP_G_V3_FloatingNumber_CritDamage_Pon_C final : public UHWFloatingTextScaleWidget
{
public:
	class UWidgetAnimation*                       DefaultMove;                                       // 0x06A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CritAnimation;                                     // 0x06B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_1to1Left;                          // 0x06B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_2to1Left;                          // 0x06C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_3to1Left;                          // 0x06C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_1to1Right;                         // 0x06D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_2to1Right;                         // 0x06D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       AnimMoveAndFade_3to1Right;                         // 0x06E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Backdrop;                                          // 0x06E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWScaleBox*                            DamageNumberScaleBox;                              // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           DamageText;                                        // 0x06F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               DamageTypeIcon;                                    // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               HWImage;                                           // 0x0708(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               HWImage_1;                                         // 0x0710(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         FontInfo;                                          // 0x0718(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 Instigator;                                        // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PhysicalColor;                                     // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MagicalColor;                                      // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Size;                                              // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79C[0x4];                                      // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       SelectedAnim;                                      // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TargetScale;                                       // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimateNumber(int32 Number, const struct FGameplayCueParameters& Parameters, class AActor* OwnerActor);
	void ApplyFontSize(int32 Size_0);
	double DetermineSpeed();
	void GetDamageTypeIcon(struct FGameplayCueParameters& CueParameters, class UTexture2D** Texture);
	void InitializeWidget();
	void OnShown();
	void SetDamageTypeColor(const struct FLinearColor& SpecifiedColor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_G_V3_FloatingNumber_CritDamage_Pon_C">();
	}
	static class UWBP_G_V3_FloatingNumber_CritDamage_Pon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_G_V3_FloatingNumber_CritDamage_Pon_C>();
	}
};
static_assert(alignof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C) == 0x000008, "Wrong alignment on UWBP_G_V3_FloatingNumber_CritDamage_Pon_C");
static_assert(sizeof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C) == 0x0007B0, "Wrong size on UWBP_G_V3_FloatingNumber_CritDamage_Pon_C");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, DefaultMove) == 0x0006A8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::DefaultMove' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, CritAnimation) == 0x0006B0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::CritAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_1to1Left) == 0x0006B8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_1to1Left' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_2to1Left) == 0x0006C0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_2to1Left' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_3to1Left) == 0x0006C8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_3to1Left' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_1to1Right) == 0x0006D0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_1to1Right' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_2to1Right) == 0x0006D8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_2to1Right' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, AnimMoveAndFade_3to1Right) == 0x0006E0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::AnimMoveAndFade_3to1Right' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, Backdrop) == 0x0006E8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::Backdrop' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, DamageNumberScaleBox) == 0x0006F0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::DamageNumberScaleBox' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, DamageText) == 0x0006F8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::DamageText' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, DamageTypeIcon) == 0x000700, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::DamageTypeIcon' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, HWImage) == 0x000708, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::HWImage' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, HWImage_1) == 0x000710, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::HWImage_1' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, FontInfo) == 0x000718, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::FontInfo' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, Instigator) == 0x000770, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::Instigator' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, PhysicalColor) == 0x000778, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::PhysicalColor' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, MagicalColor) == 0x000788, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::MagicalColor' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, Size) == 0x000798, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::Size' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, SelectedAnim) == 0x0007A0, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::SelectedAnim' has a wrong offset!");
static_assert(offsetof(UWBP_G_V3_FloatingNumber_CritDamage_Pon_C, TargetScale) == 0x0007A8, "Member 'UWBP_G_V3_FloatingNumber_CritDamage_Pon_C::TargetScale' has a wrong offset!");

}

