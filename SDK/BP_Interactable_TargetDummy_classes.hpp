#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Interactable_TargetDummy

#include "Basic.hpp"

#include "BP_Interactable_classes.hpp"
#include "S_TargetDummyDPS_structs.hpp"
#include "Engine_structs.hpp"
#include "E_TargetDummyModifiers_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Interactable_TargetDummy.BP_Interactable_TargetDummy_C
// 0x0108 (0x03D0 - 0x02C8)
class ABP_Interactable_TargetDummy_C final : public ABP_Interactable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Interactable_TargetDummy_C;      // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWDisplayInfoComponent*                HWDisplayInfo;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      ProxyCharacter;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DPS;                                               // 0x02E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        DamageTotal;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_TargetDummyDPS>              DamageInstances;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DPSMax;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                DPSRecent;                                         // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           DPSAveragingTimer;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double DPS, double DPSMax, double TotalDamage)> OnTargetDummyDPSUpdated; // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           ResetTimer;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DPSAverage2;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double AverageDPS)> OnTargetDummyDPSAverageUpdated;                // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double DamageTotal)> OnTargetDummyDamaged;                         // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UHWInventoryManagerComponent*           ProxyInventory;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredLevel;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredProtections;                                // 0x036C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnTargetDummyUpdated;                              // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        BaseProts;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnNotifiedDesiredProtections;                      // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         StartTimestamp;                                    // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_TargetDummyDPS>              DamageInstancesHistory;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        thing;                                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DPSAverage;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                averages;                                          // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddProxyCharacterProtections(int32 AddProtections);
	void BndEvt__BP_Interactable_TargetDummy_BP_InteractableComponent_K2Node_ComponentBoundEvent_1_OnInteractionEventDel__DelegateSignature(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator);
	void ChangeTargetDummyBot();
	void ChangeTargetDummyTeam(int32 Team);
	void ClearItemInventory(class UHWInventoryManagerComponent* Inventory);
	void ClearTargetDummyInventory();
	void Copy_Inventory_to_Proxy_Inventory(class AActor* Instigator_0);
	void CopyInventoryToTargetDummy(class AActor* Instigator_0);
	void ExecuteUbergraph_BP_Interactable_TargetDummy(int32 EntryPoint);
	void Get_Second_Previous_Timestamp(double* SecondLastTimestamp);
	void GetItemsFromInventory(class UHWInventoryManagerComponent* Inventory, TMap<struct FHWInventorySlot, class UHWEquipmentItem*>* Items);
	void GiveItemsToInventory(const TMap<struct FHWInventorySlot, class UHWEquipmentItem*>& Items, class UHWInventoryManagerComponent* Inventory);
	void ModifyLevel(int32 SetLevel);
	void ModifyProtections(int32 AddProtections);
	void ModifyTargetDummy(E_TargetDummyModifiers Modifier, int32 Magnitude);
	void OnProxyDamaged(const struct FDamageEventData& DamageEventData);
	void OnRep_BaseProts();
	void OnRep_DamageTotal();
	void OnRep_DesiredLevel();
	void OnRep_DesiredProtections();
	void OnRep_DPS();
	void OnRep_DPSAverage();
	void PopDamage();
	void PushDamage(double Damage);
	void PushDamageHistory(const struct FS_TargetDummyDPS& DamageInstance);
	void ReceiveBeginPlay();
	void Reset();
	void ResetTargetDummy();
	void RunTargetDummyBehavior(int32 Behavior);
	void Set_And_Bind_To_Proxy_Character(class AHWCharacter_Base* ProxyCharacter_0);
	void Set_Proxy_Character_Level(int32 SetLevel);
	void UpdateBaseProts();
	void UpdateBurstDPS();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Interactable_TargetDummy_C">();
	}
	static class ABP_Interactable_TargetDummy_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Interactable_TargetDummy_C>();
	}
};
static_assert(alignof(ABP_Interactable_TargetDummy_C) == 0x000008, "Wrong alignment on ABP_Interactable_TargetDummy_C");
static_assert(sizeof(ABP_Interactable_TargetDummy_C) == 0x0003D0, "Wrong size on ABP_Interactable_TargetDummy_C");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, UberGraphFrame_BP_Interactable_TargetDummy_C) == 0x0002C8, "Member 'ABP_Interactable_TargetDummy_C::UberGraphFrame_BP_Interactable_TargetDummy_C' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, HWDisplayInfo) == 0x0002D0, "Member 'ABP_Interactable_TargetDummy_C::HWDisplayInfo' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, ProxyCharacter) == 0x0002D8, "Member 'ABP_Interactable_TargetDummy_C::ProxyCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPS) == 0x0002E0, "Member 'ABP_Interactable_TargetDummy_C::DPS' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DamageTotal) == 0x0002E8, "Member 'ABP_Interactable_TargetDummy_C::DamageTotal' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DamageInstances) == 0x0002F0, "Member 'ABP_Interactable_TargetDummy_C::DamageInstances' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPSMax) == 0x000300, "Member 'ABP_Interactable_TargetDummy_C::DPSMax' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPSRecent) == 0x000308, "Member 'ABP_Interactable_TargetDummy_C::DPSRecent' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPSAveragingTimer) == 0x000318, "Member 'ABP_Interactable_TargetDummy_C::DPSAveragingTimer' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, OnTargetDummyDPSUpdated) == 0x000320, "Member 'ABP_Interactable_TargetDummy_C::OnTargetDummyDPSUpdated' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, ResetTimer) == 0x000330, "Member 'ABP_Interactable_TargetDummy_C::ResetTimer' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPSAverage2) == 0x000338, "Member 'ABP_Interactable_TargetDummy_C::DPSAverage2' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, OnTargetDummyDPSAverageUpdated) == 0x000340, "Member 'ABP_Interactable_TargetDummy_C::OnTargetDummyDPSAverageUpdated' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, OnTargetDummyDamaged) == 0x000350, "Member 'ABP_Interactable_TargetDummy_C::OnTargetDummyDamaged' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, ProxyInventory) == 0x000360, "Member 'ABP_Interactable_TargetDummy_C::ProxyInventory' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DesiredLevel) == 0x000368, "Member 'ABP_Interactable_TargetDummy_C::DesiredLevel' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DesiredProtections) == 0x00036C, "Member 'ABP_Interactable_TargetDummy_C::DesiredProtections' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, OnTargetDummyUpdated) == 0x000370, "Member 'ABP_Interactable_TargetDummy_C::OnTargetDummyUpdated' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, BaseProts) == 0x000380, "Member 'ABP_Interactable_TargetDummy_C::BaseProts' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, OnNotifiedDesiredProtections) == 0x000388, "Member 'ABP_Interactable_TargetDummy_C::OnNotifiedDesiredProtections' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, StartTimestamp) == 0x000398, "Member 'ABP_Interactable_TargetDummy_C::StartTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DamageInstancesHistory) == 0x0003A0, "Member 'ABP_Interactable_TargetDummy_C::DamageInstancesHistory' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, thing) == 0x0003B0, "Member 'ABP_Interactable_TargetDummy_C::thing' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, DPSAverage) == 0x0003B8, "Member 'ABP_Interactable_TargetDummy_C::DPSAverage' has a wrong offset!");
static_assert(offsetof(ABP_Interactable_TargetDummy_C, averages) == 0x0003C0, "Member 'ABP_Interactable_TargetDummy_C::averages' has a wrong offset!");

}

