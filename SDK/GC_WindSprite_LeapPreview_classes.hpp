#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_WindSprite_LeapPreview

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C
// 0x0118 (0x10F8 - 0x0FE0)
class AGC_WindSprite_LeapPreview_C final : public AHWGameplayCueNotify_Looping
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0FE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWNiagaraComponent*                    HWNiagara;                                         // 0x0FE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          FXActive;                                          // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0FF8(0x00D8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                EndLocation;                                       // 0x10D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      MyCharacter;                                       // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LeapRange;                                         // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckEndPoint();
	void DisableCue();
	void ExecuteUbergraph_GC_WindSprite_LeapPreview(int32 EntryPoint);
	struct FVector GetEndLocation(class AHWCharacter_Base* Target);
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters_0);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters_0);
	void ReceiveTick(float DeltaSeconds);
	void SetTargeterToEndPoint();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GC_WindSprite_LeapPreview_C">();
	}
	static class AGC_WindSprite_LeapPreview_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGC_WindSprite_LeapPreview_C>();
	}
};
static_assert(alignof(AGC_WindSprite_LeapPreview_C) == 0x000008, "Wrong alignment on AGC_WindSprite_LeapPreview_C");
static_assert(sizeof(AGC_WindSprite_LeapPreview_C) == 0x0010F8, "Wrong size on AGC_WindSprite_LeapPreview_C");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, UberGraphFrame) == 0x000FE0, "Member 'AGC_WindSprite_LeapPreview_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, HWNiagara) == 0x000FE8, "Member 'AGC_WindSprite_LeapPreview_C::HWNiagara' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, FXActive) == 0x000FF0, "Member 'AGC_WindSprite_LeapPreview_C::FXActive' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, Parameters) == 0x000FF8, "Member 'AGC_WindSprite_LeapPreview_C::Parameters' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, EndLocation) == 0x0010D0, "Member 'AGC_WindSprite_LeapPreview_C::EndLocation' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, MyCharacter) == 0x0010E8, "Member 'AGC_WindSprite_LeapPreview_C::MyCharacter' has a wrong offset!");
static_assert(offsetof(AGC_WindSprite_LeapPreview_C, LeapRange) == 0x0010F0, "Member 'AGC_WindSprite_LeapPreview_C::LeapRange' has a wrong offset!");

}

