#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_ShouldRemainOutsideEnemyTower

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTD_ShouldRemainOutsideEnemyTower.BTD_ShouldRemainOutsideEnemyTower_C
// 0x00A8 (0x0148 - 0x00A0)
class UBTD_ShouldRemainOutsideEnemyTower_C final : public UBTDecorator_BlueprintBase
{
public:
	struct FBlackboardKeySelector                 EnemyTowerKey;                                     // 0x00A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 ShouldDiveBlackboardKey;                           // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        DistanceBuffer;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 CurrentTargetBlackboardKey;                        // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	int32                                         MinAllyCountUnderTower;                            // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Ally_Tags_to_Ignore;                               // 0x0128(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTD_ShouldRemainOutsideEnemyTower_C">();
	}
	static class UBTD_ShouldRemainOutsideEnemyTower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_ShouldRemainOutsideEnemyTower_C>();
	}
};
static_assert(alignof(UBTD_ShouldRemainOutsideEnemyTower_C) == 0x000008, "Wrong alignment on UBTD_ShouldRemainOutsideEnemyTower_C");
static_assert(sizeof(UBTD_ShouldRemainOutsideEnemyTower_C) == 0x000148, "Wrong size on UBTD_ShouldRemainOutsideEnemyTower_C");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, EnemyTowerKey) == 0x0000A0, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::EnemyTowerKey' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, ShouldDiveBlackboardKey) == 0x0000C8, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::ShouldDiveBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, DistanceBuffer) == 0x0000F0, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::DistanceBuffer' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, CurrentTargetBlackboardKey) == 0x0000F8, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::CurrentTargetBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, MinAllyCountUnderTower) == 0x000120, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::MinAllyCountUnderTower' has a wrong offset!");
static_assert(offsetof(UBTD_ShouldRemainOutsideEnemyTower_C, Ally_Tags_to_Ignore) == 0x000128, "Member 'UBTD_ShouldRemainOutsideEnemyTower_C::Ally_Tags_to_Ignore' has a wrong offset!");

}

