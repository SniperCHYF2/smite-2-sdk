#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Anim

#include "Basic.hpp"

#include "ECharPassiveState_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ECharGenericStance_structs.hpp"
#include "E_CombatState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_Anim.BPI_Anim_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_Anim_C final
{
public:
	void BPI_AN_CanTransition(bool CanTransition);
	void BPI_AN_GenericStance(ECharGenericStance Stance_State);
	void BPI_AN_JumpEnd(bool JumpEnd);
	void BPI_AN_PassiveState(ECharPassiveState PassiveState, double PassiveValue);
	void BPI_AN_PlayRate(double PlayRate);
	void BPI_AN_RunVariant(bool Variant);
	void BPI_ANS_DisablePhysics(class FName Bone_Name, bool Turn_Off);
	void BPI_ANS_DisableTurnInPlace(bool DisableTurnInPlace);
	void BPI_ANS_EmoteQuery(bool EmoteQuery);
	void BPI_ANS_ForceFullBody(bool Fullbody, double BlendOutTime);
	void BPI_ANS_HideBlueprintVFX(bool Hide);
	void BPI_ANS_PlayRate(double PlayRate, double Duration);
	void BPI_ANS_Prop01Lock(bool Lock);
	void BPI_ANS_Prop02Lock(bool Lock);
	void BPI_ANS_ScaleCharacter(double ScaleValue);
	void BPI_ANS_ScaleFromCurve(const struct FRigVMFunction_AnimRichCurve& BoneScaleCurve, class FName Bone_Name, double Scale);
	void BPI_ANS_ScaleWeapon(double ScaleValue, int32 Weapon, bool Override);
	void BPI_ANS_ShowMesh(bool Visibility);
	void BPI_ANS_StopMotionWarping(double AlphaValue);
	void BPI_ANS_ToggleBoulder(bool Visible);
	void BPI_BellonaWeaponOverride(bool Override, ECharGenericStance OverrideStance);
	void BPI_ChildMesh_Outro(bool PlayOutro);
	void BPI_CombatStance(E_CombatState CombatState);
	void BPI_Morrigan_Fire(bool PlayFire);
	void BPI_Morrigan_PlayIntroA(bool PlayIntro);
	void BPI_Morrigan_PlayIntroB(bool PlayIntro);
	void BPI_PelvisDirectionFromVelocity(bool UsePelvisDirection, double ALPHA);
	void BPI_TailAlpha(double AlphaValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_Anim_C">();
	}
	static class IBPI_Anim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_Anim_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IBPI_Anim_C) == 0x000001, "Wrong alignment on IBPI_Anim_C");
static_assert(sizeof(IBPI_Anim_C) == 0x000001, "Wrong size on IBPI_Anim_C");

}

