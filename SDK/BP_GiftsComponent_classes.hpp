#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GiftsComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GiftsComponent.BP_GiftsComponent_C
// 0x0088 (0x0128 - 0x00A0)
class UBP_GiftsComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_Gifts_C*>                    NeutralFavorZone;                                  // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Gifts_C*>                    OrderFavorZone;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Gifts_C*>                    ChaosFavorZone;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        PlayerKillTimeReduction;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NeutralFavorInterval;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OrderFavorInterval;                                // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChaosFavorInterval;                                // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           NeutralTimer;                                      // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OrderTimer;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ChaosTimer;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeReductionPerSpawn;                             // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinNeutralSpawnTimer;                              // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxNeutralSpawnTimer;                              // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChaosHasFavor;                                     // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OrderHasFavor;                                     // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableFavor;                                       // 0x0122(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindToGameModeEvent();
	void BindToPlayerDeaths();
	void ChaosTicketsUpdated(int32 Count);
	void ExecuteUbergraph_BP_GiftsComponent(int32 EntryPoint);
	void GamePhaseChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void GatherFavorZones();
	void GetRandomZone(TArray<class ABP_Gifts_C*>& Array, class ABP_Gifts_C** Output);
	void OrderTicketsUpdated(int32 Count);
	void PlayerDied(class AHWTeamState* Team, class AHWPlayerState* TeamMember, const struct FDamageEventData& DeathEventData);
	void ReceiveBeginPlay();
	void ReduceFavorTimer();
	void SpawnChaosFavor();
	void SpawnNeutralFavor();
	void SpawnOrderFavor();
	void StartChaosTimer(bool OverrideTimer, double OverrideTime);
	void StartFavorTimers();
	void StartNeutralTimer(bool OverrideTimer, double OverrideTime);
	void StartOrderTimer(bool OverrideTimer, double OverrideTime);
	void StopFavorTimers();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GiftsComponent_C">();
	}
	static class UBP_GiftsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GiftsComponent_C>();
	}
};
static_assert(alignof(UBP_GiftsComponent_C) == 0x000008, "Wrong alignment on UBP_GiftsComponent_C");
static_assert(sizeof(UBP_GiftsComponent_C) == 0x000128, "Wrong size on UBP_GiftsComponent_C");
static_assert(offsetof(UBP_GiftsComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_GiftsComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, NeutralFavorZone) == 0x0000A8, "Member 'UBP_GiftsComponent_C::NeutralFavorZone' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, OrderFavorZone) == 0x0000B8, "Member 'UBP_GiftsComponent_C::OrderFavorZone' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, ChaosFavorZone) == 0x0000C8, "Member 'UBP_GiftsComponent_C::ChaosFavorZone' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, PlayerKillTimeReduction) == 0x0000D8, "Member 'UBP_GiftsComponent_C::PlayerKillTimeReduction' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, NeutralFavorInterval) == 0x0000E0, "Member 'UBP_GiftsComponent_C::NeutralFavorInterval' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, OrderFavorInterval) == 0x0000E4, "Member 'UBP_GiftsComponent_C::OrderFavorInterval' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, ChaosFavorInterval) == 0x0000E8, "Member 'UBP_GiftsComponent_C::ChaosFavorInterval' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, NeutralTimer) == 0x0000F0, "Member 'UBP_GiftsComponent_C::NeutralTimer' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, OrderTimer) == 0x0000F8, "Member 'UBP_GiftsComponent_C::OrderTimer' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, ChaosTimer) == 0x000100, "Member 'UBP_GiftsComponent_C::ChaosTimer' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, TimeReductionPerSpawn) == 0x000108, "Member 'UBP_GiftsComponent_C::TimeReductionPerSpawn' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, MinNeutralSpawnTimer) == 0x000110, "Member 'UBP_GiftsComponent_C::MinNeutralSpawnTimer' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, MaxNeutralSpawnTimer) == 0x000118, "Member 'UBP_GiftsComponent_C::MaxNeutralSpawnTimer' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, ChaosHasFavor) == 0x000120, "Member 'UBP_GiftsComponent_C::ChaosHasFavor' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, OrderHasFavor) == 0x000121, "Member 'UBP_GiftsComponent_C::OrderHasFavor' has a wrong offset!");
static_assert(offsetof(UBP_GiftsComponent_C, EnableFavor) == 0x000122, "Member 'UBP_GiftsComponent_C::EnableFavor' has a wrong offset!");

}

