#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_AutoAttackCurrentTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_AutoAttackCurrentTarget.BTS_AutoAttackCurrentTarget_C
// 0x0068 (0x0100 - 0x0098)
class UBTS_AutoAttackCurrentTarget_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 TargetBlackboardKey;                               // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 RuleOfFireKey;                                     // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	double                                        ReturnFireTime;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bButtonDown;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CanFireAbility(class APawn* Pawn, bool* CanFire);
	void ExecuteUbergraph_BTS_AutoAttackCurrentTarget(int32 EntryPoint);
	void IsFiring(class APawn* Pawn, bool* Firing);
	void IsTargetInAbilityRange(class APawn* ControlledPawn, class AActor* TargetActor, bool* IsInRange);
	void PressFireButton(class APawn* Pawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReleaseFireButton(class APawn* Pawn);
	bool RetrieveEquipmentFromTag(class AHWCharacter_Base* Character, const struct FGameplayTag& EquipSlot, int32 SlotId, struct FGameplayAbilitySpecHandle* GrantedAbilityHandle);
	void ShouldFireAbility(class APawn* Pawn, bool* ShoudFire);
	void StartFire(class AAIController* Controller, class APawn* Pawn);
	void TryFireAbility(class APawn* Pawn, bool* Success);
	void UpdateAim(class AAIController* Controller, class APawn* Pawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_AutoAttackCurrentTarget_C">();
	}
	static class UBTS_AutoAttackCurrentTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_AutoAttackCurrentTarget_C>();
	}
};
static_assert(alignof(UBTS_AutoAttackCurrentTarget_C) == 0x000008, "Wrong alignment on UBTS_AutoAttackCurrentTarget_C");
static_assert(sizeof(UBTS_AutoAttackCurrentTarget_C) == 0x000100, "Wrong size on UBTS_AutoAttackCurrentTarget_C");
static_assert(offsetof(UBTS_AutoAttackCurrentTarget_C, UberGraphFrame) == 0x000098, "Member 'UBTS_AutoAttackCurrentTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_AutoAttackCurrentTarget_C, TargetBlackboardKey) == 0x0000A0, "Member 'UBTS_AutoAttackCurrentTarget_C::TargetBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTS_AutoAttackCurrentTarget_C, RuleOfFireKey) == 0x0000C8, "Member 'UBTS_AutoAttackCurrentTarget_C::RuleOfFireKey' has a wrong offset!");
static_assert(offsetof(UBTS_AutoAttackCurrentTarget_C, ReturnFireTime) == 0x0000F0, "Member 'UBTS_AutoAttackCurrentTarget_C::ReturnFireTime' has a wrong offset!");
static_assert(offsetof(UBTS_AutoAttackCurrentTarget_C, bButtonDown) == 0x0000F8, "Member 'UBTS_AutoAttackCurrentTarget_C::bButtonDown' has a wrong offset!");

}

