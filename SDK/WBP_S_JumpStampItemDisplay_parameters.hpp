#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_S_JumpStampItemDisplay

#include "Basic.hpp"

#include "Hemingway_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleEntryButtonUnhovered
// 0x0028 (0x0028 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsSelected_ReturnValue;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       CallFunc_GetCollectionItemStatus_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered) == 0x000008, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered) == 0x000028, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, Temp_byte_Variable) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, K2Node_DynamicCast_AsHWCollection_Item) == 0x000008, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, Temp_bool_Variable) == 0x000011, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_GetIsSelected_ReturnValue) == 0x000012, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_GetIsSelected_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_GetLocalPlayerInfo_ReturnValue) == 0x000018, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_GetLocalPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_GetCollectionItemStatus_ReturnValue) == 0x000020, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_GetCollectionItemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000022, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered, K2Node_Select_Default) == 0x000024, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleEntryButtonUnhovered::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleOnDisplayItemSet
// 0x0028 (0x0028 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet final
{
public:
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetIconTextureByTag_ReturnValue;          // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet) == 0x000008, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet) == 0x000028, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet, CallFunc_GetIconTextureByTag_ReturnValue) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleOnDisplayItemSet::CallFunc_GetIconTextureByTag_ReturnValue' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleSetDisplayOwnershipIcons
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons final
{
public:
	bool                                          InDisplayOwnershipIcons;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons) == 0x000001, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons, InDisplayOwnershipIcons) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetDisplayOwnershipIcons::InDisplayOwnershipIcons' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleSetIsEquipped
// 0x0010 (0x0010 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped final
{
public:
	bool                                          InIsEquipped;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped) == 0x000004, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped) == 0x000010, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped, InIsEquipped) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped::InIsEquipped' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped, Temp_bool_Variable) == 0x000001, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped, Temp_int_Variable) == 0x000004, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped, Temp_int_Variable_1) == 0x000008, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped, K2Node_Select_Default) == 0x00000C, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsEquipped::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleSetIsInteractable
// 0x0005 (0x0005 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable final
{
public:
	bool                                          InIsInteractable;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable) == 0x000005, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable, InIsInteractable) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable::InIsInteractable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable, Temp_bool_Variable) == 0x000001, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable, Temp_byte_Variable) == 0x000002, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable, K2Node_Select_Default) == 0x000004, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsInteractable::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.BP_HandleSetIsSelected
// 0x0028 (0x0028 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected final
{
public:
	bool                                          InIsSelected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       CallFunc_GetCollectionItemStatus_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected) == 0x000008, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected) == 0x000028, "Wrong size on WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, InIsSelected) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::InIsSelected' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_byte_Variable) == 0x000001, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_bool_Variable) == 0x000003, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_byte_Variable_3) == 0x000005, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, K2Node_Select_Default) == 0x000006, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, K2Node_DynamicCast_AsHWCollection_Item) == 0x000008, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, CallFunc_GetLocalPlayerInfo_ReturnValue) == 0x000018, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::CallFunc_GetLocalPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, CallFunc_GetCollectionItemStatus_ReturnValue) == 0x000020, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::CallFunc_GetCollectionItemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000022, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected, K2Node_Select_Default_1) == 0x000024, "Member 'WBP_S_JumpStampItemDisplay_C_BP_HandleSetIsSelected::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.ExecuteUbergraph_WBP_S_JumpStampItemDisplay
// 0x0008 (0x0008 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsSelected;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsEquipped;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInIsInteractable;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInDisplayOwnershipIcons;             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay) == 0x000004, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay) == 0x000008, "Wrong size on WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay, EntryPoint) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay, K2Node_Event_bInIsSelected) == 0x000004, "Member 'WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay::K2Node_Event_bInIsSelected' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay, K2Node_Event_bInIsEquipped) == 0x000005, "Member 'WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay::K2Node_Event_bInIsEquipped' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay, K2Node_Event_bInIsInteractable) == 0x000006, "Member 'WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay::K2Node_Event_bInIsInteractable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay, K2Node_Event_bInDisplayOwnershipIcons) == 0x000007, "Member 'WBP_S_JumpStampItemDisplay_C_ExecuteUbergraph_WBP_S_JumpStampItemDisplay::K2Node_Event_bInDisplayOwnershipIcons' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.SetDisplayOwnershipIcons
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons final
{
public:
	bool                                          bInDisplayOwnershipIcons;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons) == 0x000001, "Wrong size on WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons, bInDisplayOwnershipIcons) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_SetDisplayOwnershipIcons::bInDisplayOwnershipIcons' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.SetIsEquipped
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_SetIsEquipped final
{
public:
	bool                                          bInIsEquipped;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_SetIsEquipped) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_SetIsEquipped");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_SetIsEquipped) == 0x000001, "Wrong size on WBP_S_JumpStampItemDisplay_C_SetIsEquipped");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_SetIsEquipped, bInIsEquipped) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_SetIsEquipped::bInIsEquipped' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.SetIsInteractable
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_SetIsInteractable final
{
public:
	bool                                          bInIsInteractable;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_SetIsInteractable) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_SetIsInteractable");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_SetIsInteractable) == 0x000001, "Wrong size on WBP_S_JumpStampItemDisplay_C_SetIsInteractable");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_SetIsInteractable, bInIsInteractable) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_SetIsInteractable::bInIsInteractable' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_SetIsSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_SetIsSelected) == 0x000001, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_SetIsSelected");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_SetIsSelected) == 0x000001, "Wrong size on WBP_S_JumpStampItemDisplay_C_SetIsSelected");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_SetIsSelected, bInIsSelected) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_SetIsSelected::bInIsSelected' has a wrong offset!");

// Function WBP_S_JumpStampItemDisplay.WBP_S_JumpStampItemDisplay_C.UpdateOwnershipIcons
// 0x0038 (0x0038 - 0x0000)
struct WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       CallFunc_GetCollectionItemStatus_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOwnedCached_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons) == 0x000008, "Wrong alignment on WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons");
static_assert(sizeof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons) == 0x000038, "Wrong size on WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_byte_Variable) == 0x000000, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_bool_Variable) == 0x000001, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, K2Node_DynamicCast_AsHWCollection_Item) == 0x000008, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_GetLocalPlayerInfo_ReturnValue) == 0x000018, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_GetLocalPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_GetCollectionItemStatus_ReturnValue) == 0x000020, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_GetCollectionItemStatus_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_GetLocalPlayerInfo_ReturnValue_1) == 0x000028, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_GetLocalPlayerInfo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000030, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_IsOwnedCached_ReturnValue) == 0x000031, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_IsOwnedCached_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, CallFunc_BooleanOR_ReturnValue) == 0x000032, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, K2Node_Select_Default) == 0x000033, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons, K2Node_Select_Default_1) == 0x000034, "Member 'WBP_S_JumpStampItemDisplay_C_UpdateOwnershipIcons::K2Node_Select_Default_1' has a wrong offset!");

}

