#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_QueueTimer_v2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "UMG_structs.hpp"
#include "Hemingway_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK::Params
{

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.ExecuteUbergraph_WBP_QueueTimer_v2
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionValue                      K2Node_EnhancedInputActionEvent_ActionValue;       // 0x0008(0x0020)(NoDestructor)
	float                                         K2Node_EnhancedInputActionEvent_ElapsedTime;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_EnhancedInputActionEvent_TriggeredTime;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     K2Node_EnhancedInputActionEvent_SourceAction;      // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInputAction*                           Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_InputActionValueToBool_ReturnValue;  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_0;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1_0;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UIX_AttemptCancelQueue_ReturnValue;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_TimeSecs;                             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQueueTimerState                              K2Node_Event_State;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CanControl;                           // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Event_FromRoute_1;                          // 0x008C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ToRoute_1;                            // 0x0094(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHInputManager*                        CallFunc_GetInputManager_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00A8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_FromRoute;                            // 0x00B8(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Event_ToRoute;                              // 0x00C0(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	class URHInputManager*                        CallFunc_GetInputManager_ReturnValue_1;            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ARHLobbyHUD*                            K2Node_DynamicCast_AsRallyHere_Client_HUD;         // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHQueueDataFactory*                    CallFunc_GetQueueDataFactory_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2");
static_assert(sizeof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2) == 0x0000F0, "Wrong size on WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, EntryPoint) == 0x000000, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_EnhancedInputActionEvent_ActionValue) == 0x000008, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_EnhancedInputActionEvent_ActionValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_EnhancedInputActionEvent_ElapsedTime) == 0x000028, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_EnhancedInputActionEvent_ElapsedTime' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_EnhancedInputActionEvent_TriggeredTime) == 0x00002C, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_EnhancedInputActionEvent_TriggeredTime' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_EnhancedInputActionEvent_SourceAction) == 0x000030, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_EnhancedInputActionEvent_SourceAction' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_object_Variable) == 0x000038, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_Conv_InputActionValueToBool_ReturnValue) == 0x000040, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_Conv_InputActionValueToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_real_Variable) == 0x000048, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_real_Variable_1) == 0x000050, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_real_Variable_0) == 0x000058, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_real_Variable_0' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_real_Variable_1_0) == 0x000060, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_real_Variable_1_0' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, Temp_bool_Variable) == 0x000068, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_PlayAnimation_ReturnValue_1) == 0x000078, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_UIX_AttemptCancelQueue_ReturnValue) == 0x000080, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_UIX_AttemptCancelQueue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_TimeSecs) == 0x000084, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_TimeSecs' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_State) == 0x000088, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_State' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_CanControl) == 0x000089, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_CanControl' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_FromRoute_1) == 0x00008C, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_FromRoute_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_ToRoute_1) == 0x000094, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_ToRoute_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_GetInputManager_ReturnValue) == 0x0000A0, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_GetInputManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_CreateDelegate_OutputDelegate) == 0x0000A8, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_FromRoute) == 0x0000B8, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_FromRoute' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_Event_ToRoute) == 0x0000C0, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_Event_ToRoute' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_GetInputManager_ReturnValue_1) == 0x0000C8, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_GetInputManager_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_DynamicCast_AsRallyHere_Client_HUD) == 0x0000D0, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_DynamicCast_AsRallyHere_Client_HUD' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_GetQueueDataFactory_ReturnValue) == 0x0000E0, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_GetQueueDataFactory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2, CallFunc_IsVisible_ReturnValue) == 0x0000E8, "Member 'WBP_QueueTimer_v2_C_ExecuteUbergraph_WBP_QueueTimer_v2::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.GetColorFromPalette
// 0x0048 (0x0048 - 0x0000)
struct WBP_QueueTimer_v2_C_GetColorFromPalette final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LinearColor;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_BuildString_Name_ReturnValue;             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FColorPaletteInfo                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0018)()
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_GetColorFromPalette) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_GetColorFromPalette");
static_assert(sizeof(WBP_QueueTimer_v2_C_GetColorFromPalette) == 0x000048, "Wrong size on WBP_QueueTimer_v2_C_GetColorFromPalette");
static_assert(offsetof(WBP_QueueTimer_v2_C_GetColorFromPalette, RowName) == 0x000000, "Member 'WBP_QueueTimer_v2_C_GetColorFromPalette::RowName' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_GetColorFromPalette, LinearColor) == 0x000008, "Member 'WBP_QueueTimer_v2_C_GetColorFromPalette::LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_GetColorFromPalette, CallFunc_BuildString_Name_ReturnValue) == 0x000018, "Member 'WBP_QueueTimer_v2_C_GetColorFromPalette::CallFunc_BuildString_Name_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_GetColorFromPalette, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'WBP_QueueTimer_v2_C_GetColorFromPalette::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_GetColorFromPalette, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000040, "Member 'WBP_QueueTimer_v2_C_GetColorFromPalette::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0
// 0x0030 (0x0030 - 0x0000)
struct WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0 final
{
public:
	struct FInputActionValue                      ActionValue;                                       // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         ElapsedTime;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggeredTime;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     SourceAction;                                      // 0x0028(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0");
static_assert(sizeof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0) == 0x000030, "Wrong size on WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0");
static_assert(offsetof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0, ActionValue) == 0x000000, "Member 'WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0::ActionValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0, ElapsedTime) == 0x000020, "Member 'WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0::ElapsedTime' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0, TriggeredTime) == 0x000024, "Member 'WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0::TriggeredTime' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0, SourceAction) == 0x000028, "Member 'WBP_QueueTimer_v2_C_InpActEvt_IA_UI_RightStickClick_K2Node_EnhancedInputActionEvent_0::SourceAction' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.OnControlQueuePermissionUpdate
// 0x0001 (0x0001 - 0x0000)
struct WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate final
{
public:
	bool                                          CanControl;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate) == 0x000001, "Wrong alignment on WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate");
static_assert(sizeof(WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate) == 0x000001, "Wrong size on WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate");
static_assert(offsetof(WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate, CanControl) == 0x000000, "Member 'WBP_QueueTimer_v2_C_OnControlQueuePermissionUpdate::CanControl' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.OnUpdateQueueTime
// 0x0004 (0x0004 - 0x0000)
struct WBP_QueueTimer_v2_C_OnUpdateQueueTime final
{
public:
	float                                         TimeSecs;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_OnUpdateQueueTime) == 0x000004, "Wrong alignment on WBP_QueueTimer_v2_C_OnUpdateQueueTime");
static_assert(sizeof(WBP_QueueTimer_v2_C_OnUpdateQueueTime) == 0x000004, "Wrong size on WBP_QueueTimer_v2_C_OnUpdateQueueTime");
static_assert(offsetof(WBP_QueueTimer_v2_C_OnUpdateQueueTime, TimeSecs) == 0x000000, "Member 'WBP_QueueTimer_v2_C_OnUpdateQueueTime::TimeSecs' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.OnUpdateQueueTimerState
// 0x0001 (0x0001 - 0x0000)
struct WBP_QueueTimer_v2_C_OnUpdateQueueTimerState final
{
public:
	EQueueTimerState                              State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_OnUpdateQueueTimerState) == 0x000001, "Wrong alignment on WBP_QueueTimer_v2_C_OnUpdateQueueTimerState");
static_assert(sizeof(WBP_QueueTimer_v2_C_OnUpdateQueueTimerState) == 0x000001, "Wrong size on WBP_QueueTimer_v2_C_OnUpdateQueueTimerState");
static_assert(offsetof(WBP_QueueTimer_v2_C_OnUpdateQueueTimerState, State) == 0x000000, "Member 'WBP_QueueTimer_v2_C_OnUpdateQueueTimerState::State' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.SetNeutralLabel
// 0x0018 (0x0018 - 0x0000)
struct WBP_QueueTimer_v2_C_SetNeutralLabel final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_QueueTimer_v2_C_SetNeutralLabel) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_SetNeutralLabel");
static_assert(sizeof(WBP_QueueTimer_v2_C_SetNeutralLabel) == 0x000018, "Wrong size on WBP_QueueTimer_v2_C_SetNeutralLabel");
static_assert(offsetof(WBP_QueueTimer_v2_C_SetNeutralLabel, InText) == 0x000000, "Member 'WBP_QueueTimer_v2_C_SetNeutralLabel::InText' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.StartHideSequence
// 0x0010 (0x0010 - 0x0000)
struct WBP_QueueTimer_v2_C_StartHideSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_StartHideSequence) == 0x000004, "Wrong alignment on WBP_QueueTimer_v2_C_StartHideSequence");
static_assert(sizeof(WBP_QueueTimer_v2_C_StartHideSequence) == 0x000010, "Wrong size on WBP_QueueTimer_v2_C_StartHideSequence");
static_assert(offsetof(WBP_QueueTimer_v2_C_StartHideSequence, FromRoute) == 0x000000, "Member 'WBP_QueueTimer_v2_C_StartHideSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_StartHideSequence, ToRoute) == 0x000008, "Member 'WBP_QueueTimer_v2_C_StartHideSequence::ToRoute' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.StartShowSequence
// 0x0010 (0x0010 - 0x0000)
struct WBP_QueueTimer_v2_C_StartShowSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_StartShowSequence) == 0x000004, "Wrong alignment on WBP_QueueTimer_v2_C_StartShowSequence");
static_assert(sizeof(WBP_QueueTimer_v2_C_StartShowSequence) == 0x000010, "Wrong size on WBP_QueueTimer_v2_C_StartShowSequence");
static_assert(offsetof(WBP_QueueTimer_v2_C_StartShowSequence, FromRoute) == 0x000000, "Member 'WBP_QueueTimer_v2_C_StartShowSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_StartShowSequence, ToRoute) == 0x000008, "Member 'WBP_QueueTimer_v2_C_StartShowSequence::ToRoute' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateBackfillJoinTimer
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHWBackfillSubsystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHWBackfillQueueInfo                   CallFunc_GetBackfillQueueInfo_ReturnValue;         // 0x0014(0x0014)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	float                                         K2Node_VariableGet_RemainingBackfillStateTime_ImplicitCast; // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSetRef_Target_ImplicitCast;         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer) == 0x0000D0, "Wrong size on WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, Temp_real_Variable) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_FCeil_ReturnValue) == 0x000010, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_GetBackfillQueueInfo_ReturnValue) == 0x000014, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_GetBackfillQueueInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000030, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, K2Node_MakeArray_Array) == 0x000088, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_Format_ReturnValue) == 0x000098, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, K2Node_VariableGet_RemainingBackfillStateTime_ImplicitCast) == 0x0000B0, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::K2Node_VariableGet_RemainingBackfillStateTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x0000C0, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer, K2Node_VariableSetRef_Target_ImplicitCast) == 0x0000C8, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillJoinTimer::K2Node_VariableSetRef_Target_ImplicitCast' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateBackfillPips
// 0x0188 (0x0188 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateBackfillPips final
{
public:
	TArray<class UWidget*>                        BackfillPipWidgets;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         ConnectedPlayers;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	class UHWBackfillSubsystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHWBackfillQueueInfo                   CallFunc_GetBackfillQueueInfo_ReturnValue;         // 0x0058(0x0014)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_C_BackfillSeatPip_C*               K2Node_DynamicCast_AsWBP_C_Backfill_Seat_Pip;      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00B0(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0100(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0128(0x0018)()
	EHWBackfillState                              Temp_byte_Variable;                                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0148(0x0018)()
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0160(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0170(0x0010)(ReferenceParm, ContainsInstancedReference)
	double                                        CallFunc_FCeil_A_ImplicitCast;                     // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateBackfillPips) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateBackfillPips");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateBackfillPips) == 0x000188, "Wrong size on WBP_QueueTimer_v2_C_UpdateBackfillPips");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, BackfillPipWidgets) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::BackfillPipWidgets' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, ConnectedPlayers) == 0x000010, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::ConnectedPlayers' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_text_Variable) == 0x000018, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_text_Variable_1) == 0x000030, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000048, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_GetBackfillQueueInfo_ReturnValue) == 0x000058, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_GetBackfillQueueInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_int_Loop_Counter_Variable) == 0x00006C, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_int_Array_Index_Variable) == 0x000078, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Array_Get_Item) == 0x000080, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_FCeil_ReturnValue) == 0x000088, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, K2Node_DynamicCast_AsWBP_C_Backfill_Seat_Pip) == 0x000090, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::K2Node_DynamicCast_AsWBP_C_Backfill_Seat_Pip' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, K2Node_DynamicCast_bSuccess) == 0x000098, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Conv_IntToInt64_ReturnValue) == 0x0000A0, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000A8, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, K2Node_MakeStruct_FormatArgumentData) == 0x0000B0, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, K2Node_MakeArray_Array) == 0x000100, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_Format_ReturnValue) == 0x000110, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_text_Variable_2) == 0x000128, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, Temp_byte_Variable) == 0x000140, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, K2Node_Select_Default) == 0x000148, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_K2_SetTimer_ReturnValue) == 0x000160, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000168, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_GetAllChildren_ReturnValue) == 0x000170, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateBackfillPips, CallFunc_FCeil_A_ImplicitCast) == 0x000180, "Member 'WBP_QueueTimer_v2_C_UpdateBackfillPips::CallFunc_FCeil_A_ImplicitCast' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateCancelButton
// 0x000F (0x000F - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateCancelButton final
{
public:
	EQueueTimerState                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQueueTimerState                              CallFunc_GetCurrentTimerState_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetQueuePermissions_CanControl;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetQueuePermissions_CanQueue;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateCancelButton) == 0x000001, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateCancelButton");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateCancelButton) == 0x00000F, "Wrong size on WBP_QueueTimer_v2_C_UpdateCancelButton");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_byte_Variable) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable) == 0x000001, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable_1) == 0x000002, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable_2) == 0x000003, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable_3) == 0x000004, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable_4) == 0x000005, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_bool_Variable_5) == 0x000006, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_byte_Variable_1) == 0x000007, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, Temp_byte_Variable_2) == 0x000008, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, CallFunc_GetCurrentTimerState_ReturnValue) == 0x000009, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::CallFunc_GetCurrentTimerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, CallFunc_GetQueuePermissions_CanControl) == 0x00000A, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::CallFunc_GetQueuePermissions_CanControl' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, CallFunc_GetQueuePermissions_CanQueue) == 0x00000B, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::CallFunc_GetQueuePermissions_CanQueue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, K2Node_Select_Default) == 0x00000C, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, CallFunc_BooleanAND_ReturnValue) == 0x00000D, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateCancelButton, K2Node_Select_Default_1) == 0x00000E, "Member 'WBP_QueueTimer_v2_C_UpdateCancelButton::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdatePenaltyTime
// 0x0280 (0x0280 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdatePenaltyTime final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetQueueTime_PartHours_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQueueTime_PartMins_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00E0(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetQueueTime_PartHours_ReturnValue_1;     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetColorFromPalette_LinearColor;          // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x013C(0x0014)()
	int32                                         CallFunc_GetQueueTime_PartMins_ReturnValue_1;      // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQueueTime_PartSecs_ReturnValue;        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_2;             // 0x0158(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_3;             // 0x0170(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0188(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x01D8(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue_1;            // 0x0228(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0240(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0250(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0268(0x0018)()
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdatePenaltyTime) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_UpdatePenaltyTime");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdatePenaltyTime) == 0x000280, "Wrong size on WBP_QueueTimer_v2_C_UpdatePenaltyTime");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, Temp_bool_Variable) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetQueueTime_PartHours_ReturnValue) == 0x000004, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetQueueTime_PartHours_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetQueueTime_PartMins_ReturnValue) == 0x000008, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetQueueTime_PartMins_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000028, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_MakeLiteralText_ReturnValue) == 0x0000E0, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeArray_Array) == 0x0000F8, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetQueueTime_PartHours_ReturnValue_1) == 0x000108, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetQueueTime_PartHours_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Format_ReturnValue) == 0x000110, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Greater_IntInt_ReturnValue) == 0x000128, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetColorFromPalette_LinearColor) == 0x00012C, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetColorFromPalette_LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeStruct_SlateColor) == 0x00013C, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetQueueTime_PartMins_ReturnValue_1) == 0x000150, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetQueueTime_PartMins_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_GetQueueTime_PartSecs_ReturnValue) == 0x000154, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_GetQueueTime_PartSecs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Conv_IntToText_ReturnValue_2) == 0x000158, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Conv_IntToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Conv_IntToText_ReturnValue_3) == 0x000170, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Conv_IntToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeStruct_FormatArgumentData_2) == 0x000188, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeStruct_FormatArgumentData_3) == 0x0001D8, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_MakeLiteralText_ReturnValue_1) == 0x000228, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_MakeLiteralText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_MakeArray_Array_1) == 0x000240, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, CallFunc_Format_ReturnValue_1) == 0x000250, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdatePenaltyTime, K2Node_Select_Default) == 0x000268, "Member 'WBP_QueueTimer_v2_C_UpdatePenaltyTime::K2Node_Select_Default' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateQueueName
// 0x0308 (0x0308 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateQueueName final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0068(0x0018)()
	ERHQueueType                                  Temp_byte_Variable;                                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHQueueDetails                        CallFunc_GetSelectedQueueDetails_OutQueueDetails;  // 0x0088(0x0198)()
	bool                                          CallFunc_GetSelectedQueueDetails_ReturnValue;      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0228(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0240(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0290(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x02E0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x02F0(0x0018)()
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateQueueName) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateQueueName");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateQueueName) == 0x000308, "Wrong size on WBP_QueueTimer_v2_C_UpdateQueueName");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, bShow) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::bShow' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_text_Variable) == 0x000008, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_text_Variable_1) == 0x000020, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_text_Variable_2) == 0x000038, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_text_Variable_3) == 0x000050, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_text_Variable_4) == 0x000068, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, Temp_byte_Variable) == 0x000080, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, CallFunc_GetSelectedQueueDetails_OutQueueDetails) == 0x000088, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::CallFunc_GetSelectedQueueDetails_OutQueueDetails' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, CallFunc_GetSelectedQueueDetails_ReturnValue) == 0x000220, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::CallFunc_GetSelectedQueueDetails_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, K2Node_Select_Default) == 0x000228, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, K2Node_MakeStruct_FormatArgumentData) == 0x000240, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, K2Node_MakeStruct_FormatArgumentData_1) == 0x000290, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, K2Node_MakeArray_Array) == 0x0002E0, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueName, CallFunc_Format_ReturnValue) == 0x0002F0, "Member 'WBP_QueueTimer_v2_C_UpdateQueueName::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateQueueTime
// 0x0120 (0x0120 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateQueueTime final
{
public:
	EQueueTimerState                              CallFunc_GetCurrentTimerState_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInCustomMatch_ReturnValue;              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetQueueTime_PartSecs_ReturnValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetQueueTime_PartMins_ReturnValue;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00E0(0x0018)()
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0108(0x0018)()
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateQueueTime) == 0x000008, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateQueueTime");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateQueueTime) == 0x000120, "Wrong size on WBP_QueueTimer_v2_C_UpdateQueueTime");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_GetCurrentTimerState_ReturnValue) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_GetCurrentTimerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_IsInCustomMatch_ReturnValue) == 0x000002, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_IsInCustomMatch_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_GetQueueTime_PartSecs_ReturnValue) == 0x000004, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_GetQueueTime_PartSecs_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_GetQueueTime_PartMins_ReturnValue) == 0x000008, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_GetQueueTime_PartMins_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000028, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_MakeLiteralText_ReturnValue) == 0x0000E0, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, K2Node_MakeArray_Array) == 0x0000F8, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateQueueTime, CallFunc_Format_ReturnValue) == 0x000108, "Member 'WBP_QueueTimer_v2_C_UpdateQueueTime::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_QueueTimer_v2.WBP_QueueTimer_v2_C.UpdateStatusLabel
// 0x0002 (0x0002 - 0x0000)
struct WBP_QueueTimer_v2_C_UpdateStatusLabel final
{
public:
	EQueueTimerState                              CallFunc_GetCurrentTimerState_ReturnValue;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_QueueTimer_v2_C_UpdateStatusLabel) == 0x000001, "Wrong alignment on WBP_QueueTimer_v2_C_UpdateStatusLabel");
static_assert(sizeof(WBP_QueueTimer_v2_C_UpdateStatusLabel) == 0x000002, "Wrong size on WBP_QueueTimer_v2_C_UpdateStatusLabel");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateStatusLabel, CallFunc_GetCurrentTimerState_ReturnValue) == 0x000000, "Member 'WBP_QueueTimer_v2_C_UpdateStatusLabel::CallFunc_GetCurrentTimerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_QueueTimer_v2_C_UpdateStatusLabel, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_QueueTimer_v2_C_UpdateStatusLabel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

