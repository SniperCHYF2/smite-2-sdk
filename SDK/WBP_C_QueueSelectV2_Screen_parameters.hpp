#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_QueueSelectV2_Screen

#include "Basic.hpp"


namespace SDK::Params
{

// Function WBP_C_QueueSelectV2_Screen.WBP_C_QueueSelectV2_Screen_C.BP_OnHandleBackAction
// 0x0002 (0x0002 - 0x0000)
struct WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction) == 0x000001, "Wrong alignment on WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction");
static_assert(sizeof(WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction) == 0x000002, "Wrong size on WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction, ReturnValue) == 0x000000, "Member 'WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_C_QueueSelectV2_Screen_C_BP_OnHandleBackAction::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_C_QueueSelectV2_Screen.WBP_C_QueueSelectV2_Screen_C.ExecuteUbergraph_WBP_C_QueueSelectV2_Screen
// 0x0044 (0x0044 - 0x0000)
struct WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen) == 0x000004, "Wrong alignment on WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen");
static_assert(sizeof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen) == 0x000044, "Wrong size on WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen, EntryPoint) == 0x000000, "Member 'WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'WBP_C_QueueSelectV2_Screen_C_ExecuteUbergraph_WBP_C_QueueSelectV2_Screen::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");

// Function WBP_C_QueueSelectV2_Screen.WBP_C_QueueSelectV2_Screen_C.HandleRankedLeaderboardClicked
// 0x0001 (0x0001 - 0x0000)
struct WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked final
{
public:
	bool                                          CallFunc_AddViewRoute_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked) == 0x000001, "Wrong alignment on WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked");
static_assert(sizeof(WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked) == 0x000001, "Wrong size on WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked, CallFunc_AddViewRoute_ReturnValue) == 0x000000, "Member 'WBP_C_QueueSelectV2_Screen_C_HandleRankedLeaderboardClicked::CallFunc_AddViewRoute_ReturnValue' has a wrong offset!");

// Function WBP_C_QueueSelectV2_Screen.WBP_C_QueueSelectV2_Screen_C.BP_GetDesiredFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget) == 0x000010, "Wrong size on WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WBP_C_QueueSelectV2_Screen_C_BP_GetDesiredFocusTarget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

