#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_WaypointPath

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_WaypointPath.BP_NPE_WaypointPath_C
// 0x0068 (0x0108 - 0x00A0)
class UBP_NPE_WaypointPath_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_NPE_WaypointSpline_C*>       SplineQueue;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         NumSplines;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSplineIndex;                                // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdatePathTimer;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CompassParticle;                                   // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RotateCompassTimer;                                // 0x00D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCompass;                                     // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CompassFXTemplate;                                 // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNavMeshToMakePath;                              // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLaneWaypointsToMakePath;                        // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AWaypoint_C*>                    CachedLaneWaypoints;                               // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ATestWaypointSet_C*                     CachedWaypointSet;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CleanupSpawnedElements();
	void ExecuteUbergraph_BP_NPE_WaypointPath(int32 EntryPoint);
	void GetCachedWaypointSet(class ATestWaypointSet_C** WaypointSet);
	void GetLaneWaypointsPath(TArray<struct FVector>* Path);
	void MakePath();
	void MakePath_OnLaneWaypoints();
	void MakePath_OnNavMesh();
	void RotateCompass();
	void SetPathToSpline(class ABP_NPE_WaypointSpline_C* SplineActor, TArray<struct FVector>& PathPoints);
	void SpawnCompassFX();
	void SpawnSplines();
	void ToggleWaypointPath(bool ToggleOn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_WaypointPath_C">();
	}
	static class UBP_NPE_WaypointPath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_NPE_WaypointPath_C>();
	}
};
static_assert(alignof(UBP_NPE_WaypointPath_C) == 0x000008, "Wrong alignment on UBP_NPE_WaypointPath_C");
static_assert(sizeof(UBP_NPE_WaypointPath_C) == 0x000108, "Wrong size on UBP_NPE_WaypointPath_C");
static_assert(offsetof(UBP_NPE_WaypointPath_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_NPE_WaypointPath_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, SplineQueue) == 0x0000A8, "Member 'UBP_NPE_WaypointPath_C::SplineQueue' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, NumSplines) == 0x0000B8, "Member 'UBP_NPE_WaypointPath_C::NumSplines' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, CurrentSplineIndex) == 0x0000BC, "Member 'UBP_NPE_WaypointPath_C::CurrentSplineIndex' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, UpdatePathTimer) == 0x0000C0, "Member 'UBP_NPE_WaypointPath_C::UpdatePathTimer' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, CompassParticle) == 0x0000C8, "Member 'UBP_NPE_WaypointPath_C::CompassParticle' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, RotateCompassTimer) == 0x0000D0, "Member 'UBP_NPE_WaypointPath_C::RotateCompassTimer' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, EnableCompass) == 0x0000D8, "Member 'UBP_NPE_WaypointPath_C::EnableCompass' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, CompassFXTemplate) == 0x0000E0, "Member 'UBP_NPE_WaypointPath_C::CompassFXTemplate' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, UseNavMeshToMakePath) == 0x0000E8, "Member 'UBP_NPE_WaypointPath_C::UseNavMeshToMakePath' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, UseLaneWaypointsToMakePath) == 0x0000E9, "Member 'UBP_NPE_WaypointPath_C::UseLaneWaypointsToMakePath' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, CachedLaneWaypoints) == 0x0000F0, "Member 'UBP_NPE_WaypointPath_C::CachedLaneWaypoints' has a wrong offset!");
static_assert(offsetof(UBP_NPE_WaypointPath_C, CachedWaypointSet) == 0x000100, "Member 'UBP_NPE_WaypointPath_C::CachedWaypointSet' has a wrong offset!");

}

