#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_DailyLoginReward

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.BP_OnHandleBackAction
// 0x0002 (0x0002 - 0x0000)
struct WBP_C_DailyLoginReward_C_BP_OnHandleBackAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanClaimLoginReward_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_BP_OnHandleBackAction) == 0x000001, "Wrong alignment on WBP_C_DailyLoginReward_C_BP_OnHandleBackAction");
static_assert(sizeof(WBP_C_DailyLoginReward_C_BP_OnHandleBackAction) == 0x000002, "Wrong size on WBP_C_DailyLoginReward_C_BP_OnHandleBackAction");
static_assert(offsetof(WBP_C_DailyLoginReward_C_BP_OnHandleBackAction, ReturnValue) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_BP_OnHandleBackAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_BP_OnHandleBackAction, CallFunc_CanClaimLoginReward_ReturnValue) == 0x000001, "Member 'WBP_C_DailyLoginReward_C_BP_OnHandleBackAction::CallFunc_CanClaimLoginReward_ReturnValue' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.CanClaimLoginRewardUpdated
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated final
{
public:
	bool                                          bCanClaim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated) == 0x000001, "Wrong alignment on WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated");
static_assert(sizeof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated) == 0x000005, "Wrong size on WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated");
static_assert(offsetof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated, bCanClaim) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated::bCanClaim' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_DailyLoginReward_C_CanClaimLoginRewardUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.DailyProgressUpdated
// 0x0050 (0x0050 - 0x0000)
struct WBP_C_DailyLoginReward_C_DailyProgressUpdated final
{
public:
	int32                                         ClaimedDays;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0038(0x0018)()
};
static_assert(alignof(WBP_C_DailyLoginReward_C_DailyProgressUpdated) == 0x000008, "Wrong alignment on WBP_C_DailyLoginReward_C_DailyProgressUpdated");
static_assert(sizeof(WBP_C_DailyLoginReward_C_DailyProgressUpdated) == 0x000050, "Wrong size on WBP_C_DailyLoginReward_C_DailyProgressUpdated");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, ClaimedDays) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::ClaimedDays' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, Temp_bool_Variable) == 0x000004, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, Temp_text_Variable) == 0x000008, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, Temp_text_Variable_1) == 0x000020, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_DailyProgressUpdated, K2Node_Select_Default) == 0x000038, "Member 'WBP_C_DailyLoginReward_C_DailyProgressUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.ExecuteUbergraph_WBP_C_DailyLoginReward
// 0x0004 (0x0004 - 0x0000)
struct WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward) == 0x000004, "Wrong alignment on WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward");
static_assert(sizeof(WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward) == 0x000004, "Wrong size on WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward");
static_assert(offsetof(WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward, EntryPoint) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_ExecuteUbergraph_WBP_C_DailyLoginReward::EntryPoint' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.IsClaimingRewardUpdated
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsClaimingReward_ReturnValue;             // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated) == 0x000001, "Wrong alignment on WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated");
static_assert(sizeof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated) == 0x000005, "Wrong size on WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated");
static_assert(offsetof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated, Temp_bool_Variable) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated, Temp_byte_Variable) == 0x000001, "Member 'WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated, CallFunc_IsClaimingReward_ReturnValue) == 0x000003, "Member 'WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated::CallFunc_IsClaimingReward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_DailyLoginReward_C_IsClaimingRewardUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.OnHide
// 0x0001 (0x0001 - 0x0000)
struct WBP_C_DailyLoginReward_C_OnHide final
{
public:
	bool                                          CallFunc_RemoveViewRoute_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_OnHide) == 0x000001, "Wrong alignment on WBP_C_DailyLoginReward_C_OnHide");
static_assert(sizeof(WBP_C_DailyLoginReward_C_OnHide) == 0x000001, "Wrong size on WBP_C_DailyLoginReward_C_OnHide");
static_assert(offsetof(WBP_C_DailyLoginReward_C_OnHide, CallFunc_RemoveViewRoute_ReturnValue) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_OnHide::CallFunc_RemoveViewRoute_ReturnValue' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.BP_GetDesiredFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget) == 0x000010, "Wrong size on WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000008, "Member 'WBP_C_DailyLoginReward_C_BP_GetDesiredFocusTarget::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");

// Function WBP_C_DailyLoginReward.WBP_C_DailyLoginReward_C.GetDailyLoginEntries
// 0x0020 (0x0020 - 0x0000)
struct WBP_C_DailyLoginReward_C_GetDailyLoginEntries final
{
public:
	TArray<class UHWDailyLoginRewardEntryWidget*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference)
	TArray<class UHWDailyLoginRewardEntryWidget*> K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_C_DailyLoginReward_C_GetDailyLoginEntries) == 0x000008, "Wrong alignment on WBP_C_DailyLoginReward_C_GetDailyLoginEntries");
static_assert(sizeof(WBP_C_DailyLoginReward_C_GetDailyLoginEntries) == 0x000020, "Wrong size on WBP_C_DailyLoginReward_C_GetDailyLoginEntries");
static_assert(offsetof(WBP_C_DailyLoginReward_C_GetDailyLoginEntries, ReturnValue) == 0x000000, "Member 'WBP_C_DailyLoginReward_C_GetDailyLoginEntries::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginReward_C_GetDailyLoginEntries, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_C_DailyLoginReward_C_GetDailyLoginEntries::K2Node_MakeArray_Array' has a wrong offset!");

}

