#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_DebugShoot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BTT_DebugShoot.BTT_DebugShoot_C.ExecuteUbergraph_BTT_DebugShoot
// 0x0020 (0x0020 - 0x0000)
struct BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Fire_Success;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot) == 0x000008, "Wrong alignment on BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot");
static_assert(sizeof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot) == 0x000020, "Wrong size on BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot");
static_assert(offsetof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot, EntryPoint) == 0x000000, "Member 'BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot, K2Node_Event_OwnerController) == 0x000008, "Member 'BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot, CallFunc_Fire_Success) == 0x000018, "Member 'BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot::CallFunc_Fire_Success' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BTT_DebugShoot_C_ExecuteUbergraph_BTT_DebugShoot::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTT_DebugShoot.BTT_DebugShoot_C.Fire
// 0x0180 (0x0180 - 0x0000)
struct BTT_DebugShoot_C_Fire final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          Controller;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEquipmentInstance*                   Equipment;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                ASC;                                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHWInventoryManagerComponent*           Inventory;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHWCharacterAbilitySystemActor*         AbilitySystemActor;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacterAbilitySystemActor*         Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0050(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilitySpecHandle             CallFunc_GetAbilityHandle_ReturnValue;             // 0x00A8(0x0004)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryActivateAbility_ReturnValue;           // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetBlackboardValueAsInt_ReturnValue;      // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x00B8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHWInventorySlot                       K2Node_MakeStruct_HWInventorySlot;                 // 0x00C8(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEquipmentInstance*                   CallFunc_RetrieveEquipment_ReturnValue;            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWInventoryManagerComponent*           CallFunc_GetInventoryManager_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IHWInterface_Controller> K2Node_DynamicCast_AsHWInterface_Controller;     // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacterAbilitySystemActor*         CallFunc_GetAbilitySystemActor_ReturnValue;        // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_DebugShoot_C_Fire) == 0x000008, "Wrong alignment on BTT_DebugShoot_C_Fire");
static_assert(sizeof(BTT_DebugShoot_C_Fire) == 0x000180, "Wrong size on BTT_DebugShoot_C_Fire");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Pawn) == 0x000000, "Member 'BTT_DebugShoot_C_Fire::Pawn' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Controller) == 0x000008, "Member 'BTT_DebugShoot_C_Fire::Controller' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Success) == 0x000010, "Member 'BTT_DebugShoot_C_Fire::Success' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Equipment) == 0x000018, "Member 'BTT_DebugShoot_C_Fire::Equipment' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, ASC) == 0x000020, "Member 'BTT_DebugShoot_C_Fire::ASC' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Inventory) == 0x000028, "Member 'BTT_DebugShoot_C_Fire::Inventory' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, AbilitySystemActor) == 0x000030, "Member 'BTT_DebugShoot_C_Fire::AbilitySystemActor' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Temp_struct_Variable) == 0x000038, "Member 'BTT_DebugShoot_C_Fire::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BTT_DebugShoot_C_Fire::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'BTT_DebugShoot_C_Fire::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_IsValid_ReturnValue_2) == 0x000042, "Member 'BTT_DebugShoot_C_Fire::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Temp_object_Variable) == 0x000048, "Member 'BTT_DebugShoot_C_Fire::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Temp_struct_Variable_1) == 0x000050, "Member 'BTT_DebugShoot_C_Fire::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_IsValid_ReturnValue_3) == 0x000058, "Member 'BTT_DebugShoot_C_Fire::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BTT_DebugShoot_C_Fire::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000078, "Member 'BTT_DebugShoot_C_Fire::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetForwardVector_ReturnValue) == 0x000090, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetAbilityHandle_ReturnValue) == 0x0000A8, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetAbilityHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, Temp_bool_Variable) == 0x0000AC, "Member 'BTT_DebugShoot_C_Fire::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_TryActivateAbility_ReturnValue) == 0x0000AD, "Member 'BTT_DebugShoot_C_Fire::CallFunc_TryActivateAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetBlackboardValueAsInt_ReturnValue) == 0x0000B0, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetBlackboardValueAsInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B4, "Member 'BTT_DebugShoot_C_Fire::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, K2Node_Select_Default) == 0x0000B8, "Member 'BTT_DebugShoot_C_Fire::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x0000C0, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, K2Node_MakeStruct_HWInventorySlot) == 0x0000C8, "Member 'BTT_DebugShoot_C_Fire::K2Node_MakeStruct_HWInventorySlot' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_RetrieveEquipment_ReturnValue) == 0x0000D8, "Member 'BTT_DebugShoot_C_Fire::CallFunc_RetrieveEquipment_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetInventoryManager_ReturnValue) == 0x0000E0, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetInventoryManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, K2Node_DynamicCast_AsHWInterface_Controller) == 0x0000E8, "Member 'BTT_DebugShoot_C_Fire::K2Node_DynamicCast_AsHWInterface_Controller' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, K2Node_DynamicCast_bSuccess) == 0x0000F8, "Member 'BTT_DebugShoot_C_Fire::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_GetAbilitySystemActor_ReturnValue) == 0x000100, "Member 'BTT_DebugShoot_C_Fire::CallFunc_GetAbilitySystemActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000108, "Member 'BTT_DebugShoot_C_Fire::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000120, "Member 'BTT_DebugShoot_C_Fire::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_Add_VectorVector_ReturnValue) == 0x000138, "Member 'BTT_DebugShoot_C_Fire::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_BreakVector_X) == 0x000150, "Member 'BTT_DebugShoot_C_Fire::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_BreakVector_Y) == 0x000158, "Member 'BTT_DebugShoot_C_Fire::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_BreakVector_Z) == 0x000160, "Member 'BTT_DebugShoot_C_Fire::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_Fire, CallFunc_MakeVector_ReturnValue) == 0x000168, "Member 'BTT_DebugShoot_C_Fire::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BTT_DebugShoot.BTT_DebugShoot_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_DebugShoot_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_DebugShoot_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_DebugShoot_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_DebugShoot_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_DebugShoot_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_DebugShoot_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_DebugShoot_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_DebugShoot_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_DebugShoot_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

