#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_Store_SupporterScreen

#include "Basic.hpp"

#include "RallyHereIntegration_structs.hpp"
#include "Hemingway_structs.hpp"
#include "UMG_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "Engine_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.AddStoreItemWidget
// 0x0030 (0x0030 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_AddStoreItemWidget final
{
public:
	class UHWStoreItemDisplayWidget*              Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHWSupporterStoreDisplayType                  DisplayType;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UHWWidget*>                      CallFunc_GetEntries_ReturnValue;                   // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_AddStoreItemWidget");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget) == 0x000030, "Wrong size on WBP_C_Store_SupporterScreen_C_AddStoreItemWidget");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, Widget) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::Widget' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, DisplayType) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::DisplayType' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, CallFunc_GetEntries_ReturnValue) == 0x000018, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::CallFunc_GetEntries_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_AddStoreItemWidget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00002C, "Member 'WBP_C_Store_SupporterScreen_C_AddStoreItemWidget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.DisplayGridLoadingState
// 0x0009 (0x0009 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState) == 0x000009, "Wrong size on WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, bIsLoading) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::bIsLoading' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_byte_Variable) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_bool_Variable) == 0x000003, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_byte_Variable_3) == 0x000005, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, K2Node_Select_Default) == 0x000006, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, Temp_bool_Variable_1) == 0x000007, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState, K2Node_Select_Default_1) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_DisplayGridLoadingState::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.ExecuteUbergraph_WBP_C_Store_SupporterScreen
// 0x0020 (0x0020 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ERH_INPUT_STATE InputState)>   K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen) == 0x000020, "Wrong size on WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen, EntryPoint) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen, CallFunc_GetCurrentInputState_ReturnValue) == 0x000014, "Member 'WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen, CallFunc_GetLocalPlayerInfo_ReturnValue) == 0x000018, "Member 'WBP_C_Store_SupporterScreen_C_ExecuteUbergraph_WBP_C_Store_SupporterScreen::CallFunc_GetLocalPlayerInfo_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.HandleViewRedirect
// 0x0028 (0x0028 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_HandleViewRedirect final
{
public:
	class UHWViewRedirectContext*                 RedirectContext;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_HandleViewRedirect");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect) == 0x000028, "Wrong size on WBP_C_Store_SupporterScreen_C_HandleViewRedirect");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, RedirectContext) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::RedirectContext' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, ReturnValue) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, K2Node_DynamicCast_AsHWCollection_Item) == 0x000018, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_HandleViewRedirect, CallFunc_HasTag_ReturnValue) == 0x000021, "Member 'WBP_C_Store_SupporterScreen_C_HandleViewRedirect::CallFunc_HasTag_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnDisplayItem
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnDisplayItem final
{
public:
	class UHWInventoryItem*                       Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetDefaultSelectDisplayName_ReturnValue;  // 0x0010(0x0018)()
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0038(0x0018)()
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item_1;          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item_2;          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWCharacterItem*                 K2Node_DynamicCast_AsHWCharacter_Item;             // 0x0070(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWSkinItem*                            K2Node_DynamicCast_AsHWSkin_Item;                  // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWViewRedirectorSubsystem*             CallFunc_GetLocalPlayerSubsystem_ReturnValue;      // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanRedirectItem_ReturnValue;              // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00A0(0x0018)()
	class UWidget*                                K2Node_Select_Default_1;                           // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnDisplayItem) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnDisplayItem");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnDisplayItem) == 0x0000C0, "Wrong size on WBP_C_Store_SupporterScreen_C_OnDisplayItem");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, Item) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::Item' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, Temp_bool_Variable) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, Temp_bool_Variable_1) == 0x000009, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, CallFunc_GetDefaultSelectDisplayName_ReturnValue) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::CallFunc_GetDefaultSelectDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_AsHWCollection_Item) == 0x000028, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, CallFunc_GetText_ReturnValue) == 0x000038, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_AsHWCollection_Item_1) == 0x000050, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_AsHWCollection_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_AsHWCollection_Item_2) == 0x000060, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_AsHWCollection_Item_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_AsHWCharacter_Item) == 0x000070, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_AsHWCharacter_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_AsHWSkin_Item) == 0x000080, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_AsHWSkin_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_DynamicCast_bSuccess_4) == 0x000088, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, CallFunc_GetLocalPlayerSubsystem_ReturnValue) == 0x000090, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::CallFunc_GetLocalPlayerSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, CallFunc_BooleanOR_ReturnValue) == 0x000098, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, CallFunc_CanRedirectItem_ReturnValue) == 0x000099, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::CallFunc_CanRedirectItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_Select_Default) == 0x0000A0, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayItem, K2Node_Select_Default_1) == 0x0000B8, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayItem::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnDisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnDisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnDisplayPrice) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnDisplayPrice");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnDisplayPrice) == 0x000010, "Wrong size on WBP_C_Store_SupporterScreen_C_OnDisplayPrice");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayPrice, PriceItem) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnDisplayPrice, PriceGroupTag) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_OnDisplayPrice::PriceGroupTag' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnInputChange
// 0x0002 (0x0002 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnInputChange final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnInputChange) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnInputChange");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnInputChange) == 0x000002, "Wrong size on WBP_C_Store_SupporterScreen_C_OnInputChange");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnInputChange, InputState) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnInputChange::InputState' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnInputChange, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_OnInputChange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnPreviewMixedBundle
// 0x0138 (0x0138 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle final
{
public:
	const class UHWCollectionItem*                MixedBundleItem;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemType                         CallFunc_GetCollectionType_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemTypeText_OutText;                  // 0x0010(0x0018)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x0080(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0098(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
	TSoftObjectPtr<class USoundBase>              CallFunc_GetCosmeticSound_ReturnValue;             // 0x0110(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle) == 0x000138, "Wrong size on WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, MixedBundleItem) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::MixedBundleItem' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, CallFunc_GetCollectionType_ReturnValue) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::CallFunc_GetCollectionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, CallFunc_GetItemTypeText_OutText) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::CallFunc_GetItemTypeText_OutText' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, CallFunc_GetItemName_ReturnValue) == 0x000080, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::CallFunc_GetItemName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, K2Node_MakeStruct_FormatArgumentData_1) == 0x000098, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, K2Node_MakeArray_Array) == 0x0000E8, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle, CallFunc_GetCosmeticSound_ReturnValue) == 0x000110, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewMixedBundle::CallFunc_GetCosmeticSound_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnPreviewPlayerNameColor
// 0x0008 (0x0008 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor final
{
public:
	const class UHWCollectionItem*                CollectionItem;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor) == 0x000008, "Wrong size on WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor, CollectionItem) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewPlayerNameColor::CollectionItem' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnPreviewQuip
// 0x0038 (0x0038 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnPreviewQuip final
{
public:
	const class UHWCollectionItem*                QuipItem;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              CallFunc_GetCosmeticSound_ReturnValue;             // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnPreviewQuip) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnPreviewQuip");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnPreviewQuip) == 0x000038, "Wrong size on WBP_C_Store_SupporterScreen_C_OnPreviewQuip");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewQuip, QuipItem) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewQuip::QuipItem' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewQuip, CallFunc_GetCosmeticSound_ReturnValue) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewQuip::CallFunc_GetCosmeticSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewQuip, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewQuip::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnPreviewTeleport
// 0x0008 (0x0008 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnPreviewTeleport final
{
public:
	const class UHWCollectionItem*                TeleportItem;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnPreviewTeleport) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnPreviewTeleport");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnPreviewTeleport) == 0x000008, "Wrong size on WBP_C_Store_SupporterScreen_C_OnPreviewTeleport");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnPreviewTeleport, TeleportItem) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnPreviewTeleport::TeleportItem' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnUpdateColorGridVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility) == 0x000005, "Wrong size on WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility, bShow) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility::bShow' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateColorGridVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnUpdateMixedBundleVisibility
// 0x0030 (0x0030 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           StoreItem;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_LootId                             CallFunc_GetLootId_ReturnValue;                    // 0x0014(0x0014)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility) == 0x000030, "Wrong size on WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, bShow) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::bShow' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, StoreItem) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::StoreItem' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_bool_Variable) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, CallFunc_GetLootId_ReturnValue) == 0x000014, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::CallFunc_GetLootId_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, K2Node_SwitchInteger_CmpSuccess) == 0x000028, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_byte_Variable) == 0x000029, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_byte_Variable_1) == 0x00002A, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_byte_Variable_2) == 0x00002B, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, K2Node_Select_Default) == 0x00002C, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_byte_Variable_3) == 0x00002D, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, Temp_bool_Variable_1) == 0x00002E, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility, K2Node_Select_Default_1) == 0x00002F, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateMixedBundleVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnUpdateQuipGridVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility) == 0x000005, "Wrong size on WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility, bShow) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility::bShow' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateQuipGridVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnUpdateTeleportVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility) == 0x000005, "Wrong size on WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility, bShow) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility::bShow' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility, Temp_byte_Variable) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility, Temp_bool_Variable) == 0x000003, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateTeleportVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.OnUpdateVGSVisibility
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility) == 0x000001, "Wrong alignment on WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility) == 0x000005, "Wrong size on WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility, bShow) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility::bShow' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_Store_SupporterScreen_C_OnUpdateVGSVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.UpdateVGSKeybinds
// 0x0110 (0x0110 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_S_MultiPromptWidget_C*             KBMKeys;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_S_MultiPromptWidget_C*             GPKeys;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FGameplayTag>                   GPBindTags;                                        // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<struct FGameplayTag>                   KBMBindTags;                                       // 0x0028(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x003C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0044(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x004C(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x0054(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x0060(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_5;                            // 0x0068(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_6;                            // 0x0070(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_1;     // 0x0080(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_2;     // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_3;     // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_4;     // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_5;     // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x00A8(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_6;     // 0x00CC(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_7;     // 0x00D4(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_8;     // 0x00DC(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_9;     // 0x00E4(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_10;    // 0x00EC(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_11;    // 0x00F4(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x00FC(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds) == 0x000110, "Wrong size on WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, SlotIndex) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::SlotIndex' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, KBMKeys) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::KBMKeys' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, GPKeys) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::GPKeys' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, GPBindTags) == 0x000018, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::GPBindTags' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, KBMBindTags) == 0x000028, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::KBMBindTags' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_int_Variable) == 0x000038, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable) == 0x00003C, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_1) == 0x000044, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_2) == 0x00004C, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_3) == 0x000054, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_int_Variable_1) == 0x00005C, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_4) == 0x000060, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_5) == 0x000068, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, Temp_struct_Variable_6) == 0x000070, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000078, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_1) == 0x000080, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_2) == 0x000088, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_3) == 0x000090, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_4) == 0x000098, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_5) == 0x0000A0, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, K2Node_Select_Default) == 0x0000A8, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue) == 0x0000B0, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_1) == 0x0000B4, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_2) == 0x0000B8, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_3) == 0x0000BC, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_4) == 0x0000C0, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_5) == 0x0000C4, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_6) == 0x0000C8, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_6) == 0x0000CC, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_7) == 0x0000D4, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_8) == 0x0000DC, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_9) == 0x0000E4, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_10) == 0x0000EC, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_MakeLiteralGameplayTag_ReturnValue_11) == 0x0000F4, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_MakeLiteralGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, K2Node_Select_Default_1) == 0x0000FC, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_7) == 0x000104, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds, CallFunc_Array_Add_ReturnValue_8) == 0x000108, "Member 'WBP_C_Store_SupporterScreen_C_UpdateVGSKeybinds::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.BP_GetDesiredFocusTarget
// 0x0018 (0x0018 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetContainerDesiredFocusTarget_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget) == 0x000018, "Wrong size on WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget, CallFunc_GetContainerDesiredFocusTarget_ReturnValue) == 0x000008, "Member 'WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget::CallFunc_GetContainerDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_C_Store_SupporterScreen_C_BP_GetDesiredFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_C_Store_SupporterScreen.WBP_C_Store_SupporterScreen_C.GetDefaultSelectDisplayName
// 0x0018 (0x0018 - 0x0000)
struct WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName) == 0x000008, "Wrong alignment on WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName");
static_assert(sizeof(WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName) == 0x000018, "Wrong size on WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName");
static_assert(offsetof(WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName, ReturnValue) == 0x000000, "Member 'WBP_C_Store_SupporterScreen_C_GetDefaultSelectDisplayName::ReturnValue' has a wrong offset!");

}

