#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_S_CurrencyDisplay

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.DisplayCurrency
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_CurrencyDisplay_C_DisplayCurrency final
{
public:
	const class URHCurrency*                      CURRENCY;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLoading;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UIconInfo*                              CallFunc_GetItemIconInfo_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_DisplayCurrency) == 0x000008, "Wrong alignment on WBP_S_CurrencyDisplay_C_DisplayCurrency");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_DisplayCurrency) == 0x000020, "Wrong size on WBP_S_CurrencyDisplay_C_DisplayCurrency");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, CURRENCY) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::CURRENCY' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, bIsLoading) == 0x000008, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::bIsLoading' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_bool_Variable) == 0x000009, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, CallFunc_GetItemIconInfo_ReturnValue) == 0x000010, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::CallFunc_GetItemIconInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_byte_Variable) == 0x000018, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_byte_Variable_1) == 0x000019, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_bool_Variable_1) == 0x00001A, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_byte_Variable_2) == 0x00001B, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, Temp_byte_Variable_3) == 0x00001C, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, K2Node_Select_Default) == 0x00001D, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrency, K2Node_Select_Default_1) == 0x00001E, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrency::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.DisplayCurrencyAmount
// 0x0128 (0x0128 - 0x0000)
struct WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLessThanOwned;                                  // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0050)(HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0078(0x0008)(NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F0(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0108(0x0018)()
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x0120(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount) == 0x000008, "Wrong alignment on WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount) == 0x000128, "Wrong size on WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, NewAmount) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::NewAmount' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, bIsLessThanOwned) == 0x000004, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::bIsLessThanOwned' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, Temp_bool_Variable) == 0x000005, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, Temp_bool_Variable_1) == 0x000020, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, Temp_struct_Variable) == 0x000078, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000080, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, CallFunc_Greater_IntInt_ReturnValue) == 0x0000D8, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, K2Node_MakeArray_Array) == 0x0000E0, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, K2Node_Select_Default) == 0x000108, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount, K2Node_Select_Default_1) == 0x000120, "Member 'WBP_S_CurrencyDisplay_C_DisplayCurrencyAmount::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.ExecuteUbergraph_WBP_S_CurrencyDisplay
// 0x000C (0x000C - 0x0000)
struct WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsCurrencyEnabled;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay) == 0x000004, "Wrong alignment on WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay) == 0x00000C, "Wrong size on WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, EntryPoint) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, Temp_bool_Variable) == 0x000004, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, Temp_byte_Variable) == 0x000005, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, K2Node_Event_bIsCurrencyEnabled) == 0x000007, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::K2Node_Event_bIsCurrencyEnabled' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay, K2Node_Select_Default) == 0x000008, "Member 'WBP_S_CurrencyDisplay_C_ExecuteUbergraph_WBP_S_CurrencyDisplay::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_CurrencyDisplay_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_S_CurrencyDisplay_C_PreConstruct");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_PreConstruct) == 0x000001, "Wrong size on WBP_S_CurrencyDisplay_C_PreConstruct");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.SetOrientation
// 0x0040 (0x0040 - 0x0000)
struct WBP_S_CurrencyDisplay_C_SetOrientation final
{
public:
	EOrientation                                  InOrientation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOrientation                                  Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWrapBoxSlot*                           CallFunc_SlotAsWrapBoxSlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_Select_Default;                             // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_SetOrientation) == 0x000008, "Wrong alignment on WBP_S_CurrencyDisplay_C_SetOrientation");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_SetOrientation) == 0x000040, "Wrong size on WBP_S_CurrencyDisplay_C_SetOrientation");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, InOrientation) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::InOrientation' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, Temp_byte_Variable) == 0x000001, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, CallFunc_SlotAsWrapBoxSlot_ReturnValue) == 0x000008, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::CallFunc_SlotAsWrapBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, K2Node_MakeStruct_Margin) == 0x000010, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, K2Node_MakeStruct_Margin_1) == 0x000020, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetOrientation, K2Node_Select_Default) == 0x000030, "Member 'WBP_S_CurrencyDisplay_C_SetOrientation::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.SetTextforPricing
// 0x0004 (0x0004 - 0x0000)
struct WBP_S_CurrencyDisplay_C_SetTextforPricing final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_SetTextforPricing) == 0x000004, "Wrong alignment on WBP_S_CurrencyDisplay_C_SetTextforPricing");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_SetTextforPricing) == 0x000004, "Wrong size on WBP_S_CurrencyDisplay_C_SetTextforPricing");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_SetTextforPricing, Index_0) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_SetTextforPricing::Index_0' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.UpdateIsCurrencyDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled final
{
public:
	bool                                          bIsCurrencyEnabled;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled) == 0x000001, "Wrong alignment on WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled) == 0x000001, "Wrong size on WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled, bIsCurrencyEnabled) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_UpdateIsCurrencyDisplayEnabled::bIsCurrencyEnabled' has a wrong offset!");

// Function WBP_S_CurrencyDisplay.WBP_S_CurrencyDisplay_C.UpdateSaleDisplay
// 0x0038 (0x0038 - 0x0000)
struct WBP_S_CurrencyDisplay_C_UpdateSaleDisplay final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default_1;                           // 0x002C(0x0008)(NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay) == 0x000004, "Wrong alignment on WBP_S_CurrencyDisplay_C_UpdateSaleDisplay");
static_assert(sizeof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay) == 0x000038, "Wrong size on WBP_S_CurrencyDisplay_C_UpdateSaleDisplay");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_bool_Variable) == 0x000000, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_struct_Variable) == 0x000004, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_struct_Variable_1) == 0x00000C, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_bool_Variable_1) == 0x000014, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_struct_Variable_2) == 0x000018, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_bool_Variable_2) == 0x000020, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_byte_Variable) == 0x000021, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, Temp_byte_Variable_1) == 0x000022, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, K2Node_Select_Default) == 0x000024, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, K2Node_Select_Default_1) == 0x00002C, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyDisplay_C_UpdateSaleDisplay, K2Node_Select_Default_2) == 0x000034, "Member 'WBP_S_CurrencyDisplay_C_UpdateSaleDisplay::K2Node_Select_Default_2' has a wrong offset!");

}

