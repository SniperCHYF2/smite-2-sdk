#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GOD_Emote

#include "Basic.hpp"

#include "ECharGenericStance_structs.hpp"
#include "Engine_structs.hpp"
#include "ECharPassiveState_structs.hpp"
#include "RigVM_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_CombatState_structs.hpp"


namespace SDK::Params
{

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_GOD_Emote_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_AnimGraph");
static_assert(sizeof(ABP_GOD_Emote_C_AnimGraph) == 0x000010, "Wrong size on ABP_GOD_Emote_C_AnimGraph");
static_assert(offsetof(ABP_GOD_Emote_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_GOD_Emote_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_GOD_Emote_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_GOD_Emote_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_GOD_Emote_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_GOD_Emote_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_GOD_Emote_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_GOD_Emote_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_CanTransition
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_CanTransition final
{
public:
	bool                                          CanTransition;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_CanTransition) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_CanTransition");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_CanTransition) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_AN_CanTransition");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_CanTransition, CanTransition) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_CanTransition::CanTransition' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_GenericStance
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_GenericStance final
{
public:
	ECharGenericStance                            Stance_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_GenericStance) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_GenericStance");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_GenericStance) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_AN_GenericStance");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_GenericStance, Stance_State) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_GenericStance::Stance_State' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_JumpEnd
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_JumpEnd final
{
public:
	bool                                          JumpEnd;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_JumpEnd) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_JumpEnd");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_JumpEnd) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_AN_JumpEnd");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_JumpEnd, JumpEnd) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_JumpEnd::JumpEnd' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_PassiveState
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_PassiveState final
{
public:
	ECharPassiveState                             PassiveState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PassiveValue;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_PassiveState) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_PassiveState");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_PassiveState) == 0x000010, "Wrong size on ABP_GOD_Emote_C_BPI_AN_PassiveState");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_PassiveState, PassiveState) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_PassiveState::PassiveState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_PassiveState, PassiveValue) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_AN_PassiveState::PassiveValue' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_PlayRate
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_PlayRate) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_PlayRate");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_PlayRate) == 0x000008, "Wrong size on ABP_GOD_Emote_C_BPI_AN_PlayRate");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_PlayRate, PlayRate) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_PlayRate::PlayRate' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_AN_RunVariant
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_AN_RunVariant final
{
public:
	bool                                          Variant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_AN_RunVariant) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_AN_RunVariant");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_AN_RunVariant) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_AN_RunVariant");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_AN_RunVariant, Variant) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_AN_RunVariant::Variant' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_DisablePhysics
// 0x000C (0x000C - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_DisablePhysics final
{
public:
	class FName                                   Bone_Name;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Turn_Off;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_DisablePhysics) == 0x000004, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_DisablePhysics");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_DisablePhysics) == 0x00000C, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_DisablePhysics");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_DisablePhysics, Bone_Name) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_DisablePhysics::Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_DisablePhysics, Turn_Off) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_ANS_DisablePhysics::Turn_Off' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_DisableTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace final
{
public:
	bool                                          DisableTurnInPlace;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace, DisableTurnInPlace) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_DisableTurnInPlace::DisableTurnInPlace' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_EmoteQuery
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_EmoteQuery final
{
public:
	bool                                          EmoteQuery;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_EmoteQuery");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_EmoteQuery");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_EmoteQuery, EmoteQuery) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_EmoteQuery::EmoteQuery' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ForceFullBody
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ForceFullBody final
{
public:
	bool                                          Fullbody;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendOutTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ForceFullBody) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ForceFullBody");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ForceFullBody) == 0x000010, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ForceFullBody");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ForceFullBody, Fullbody) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ForceFullBody::Fullbody' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ForceFullBody, BlendOutTime) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_ANS_ForceFullBody::BlendOutTime' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_HideBlueprintVFX
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX, Hide) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_HideBlueprintVFX::Hide' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_PlayRate
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_PlayRate) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_PlayRate");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_PlayRate) == 0x000010, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_PlayRate");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_PlayRate, PlayRate) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_PlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_PlayRate, Duration) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_ANS_PlayRate::Duration' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_Prop01Lock
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_Prop01Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_Prop01Lock");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_Prop01Lock");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_Prop01Lock, Lock) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_Prop01Lock::Lock' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_Prop02Lock
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_Prop02Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_Prop02Lock");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_Prop02Lock");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_Prop02Lock, Lock) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_Prop02Lock::Lock' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ScaleCharacter
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter, ScaleValue) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleCharacter::ScaleValue' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ScaleFromCurve
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve final
{
public:
	struct FRigVMFunction_AnimRichCurve           BoneScaleCurve;                                    // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   Bone_Name;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve) == 0x0000A0, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve, BoneScaleCurve) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve::BoneScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve, Bone_Name) == 0x000090, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve::Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve, Scale) == 0x000098, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleFromCurve::Scale' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ScaleWeapon
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon) == 0x000010, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon, ScaleValue) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon::ScaleValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon, Weapon) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon, Override) == 0x00000C, "Member 'ABP_GOD_Emote_C_BPI_ANS_ScaleWeapon::Override' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ShowMesh
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ShowMesh final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ShowMesh");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ShowMesh");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ShowMesh, Visibility) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ShowMesh::Visibility' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_StopMotionWarping
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping, AlphaValue) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_StopMotionWarping::AlphaValue' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ANS_ToggleBoulder
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder, Visible) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ANS_ToggleBoulder::Visible' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_BellonaWeaponOverride
// 0x0002 (0x0002 - 0x0000)
struct ABP_GOD_Emote_C_BPI_BellonaWeaponOverride final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            OverrideStance;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_BellonaWeaponOverride) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_BellonaWeaponOverride");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_BellonaWeaponOverride) == 0x000002, "Wrong size on ABP_GOD_Emote_C_BPI_BellonaWeaponOverride");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_BellonaWeaponOverride, Override) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_BellonaWeaponOverride::Override' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_BellonaWeaponOverride, OverrideStance) == 0x000001, "Member 'ABP_GOD_Emote_C_BPI_BellonaWeaponOverride::OverrideStance' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_ChildMesh_Outro
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_ChildMesh_Outro final
{
public:
	bool                                          PlayOutro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_ChildMesh_Outro");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_ChildMesh_Outro");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_ChildMesh_Outro, PlayOutro) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_ChildMesh_Outro::PlayOutro' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_CombatStance
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_CombatStance final
{
public:
	E_CombatState                                 CombatState_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_CombatStance) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_CombatStance");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_CombatStance) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_CombatStance");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_CombatStance, CombatState_0) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_CombatStance::CombatState_0' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_Morrigan_Fire
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_Morrigan_Fire final
{
public:
	bool                                          PlayFire;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_Morrigan_Fire) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_Morrigan_Fire");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_Morrigan_Fire) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_Morrigan_Fire");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_Morrigan_Fire, PlayFire) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_Morrigan_Fire::PlayFire' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_Morrigan_PlayIntroA
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA, PlayIntro) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroA::PlayIntro' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_Morrigan_PlayIntroB
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong alignment on ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong size on ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB, PlayIntro) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_Morrigan_PlayIntroB::PlayIntro' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_PelvisDirectionFromVelocity
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity final
{
public:
	bool                                          UsePelvisDirection;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ALPHA;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity) == 0x000010, "Wrong size on ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity, UsePelvisDirection) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity::UsePelvisDirection' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity, ALPHA) == 0x000008, "Member 'ABP_GOD_Emote_C_BPI_PelvisDirectionFromVelocity::ALPHA' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.BPI_TailAlpha
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Emote_C_BPI_TailAlpha final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_BPI_TailAlpha) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_BPI_TailAlpha");
static_assert(sizeof(ABP_GOD_Emote_C_BPI_TailAlpha) == 0x000008, "Wrong size on ABP_GOD_Emote_C_BPI_TailAlpha");
static_assert(offsetof(ABP_GOD_Emote_C_BPI_TailAlpha, AlphaValue) == 0x000000, "Member 'ABP_GOD_Emote_C_BPI_TailAlpha::AlphaValue' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.ExecuteUbergraph_ABP_GOD_Emote
// 0x0150 (0x0150 - 0x0000)
struct ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayIntro_1;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_EmoteQuery;                           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Hide;                                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayIntro;                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AlphaValue;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_JumpEnd;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CanTransition;                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMFunction_AnimRichCurve           K2Node_Event_BoneScaleCurve;                       // 0x0020(0x0090)()
	class FName                                   K2Node_Event_Bone_Name;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Scale;                                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_Bone_Name_1;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Turn_Off;                             // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_ScaleValue_1;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Variant;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharPassiveState                             K2Node_Event_PassiveState;                         // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_PassiveValue;                         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visibility;                           // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Lock_1;                               // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayOutro;                            // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UsePelvisDirection;                   // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Alpha;                                // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Lock;                                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_ScaleValue;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Weapon;                               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Override;                             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Override_1;                           // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            K2Node_Event_OverrideStance;                       // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AlphaValue_1;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CombatState                                 K2Node_Event_CombatState;                          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_FullBody;                             // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_BlendOutTime;                         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Playrate_1;                           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Duration;                             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Playrate;                             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DisableTurnInPlace;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            K2Node_Event_Stance_State;                         // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayFire;                             // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote");
static_assert(sizeof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote) == 0x000150, "Wrong size on ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, EntryPoint) == 0x000000, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PlayIntro_1) == 0x000004, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PlayIntro_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_EmoteQuery) == 0x000005, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_EmoteQuery' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Hide) == 0x000006, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Hide' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Visible) == 0x000007, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PlayIntro) == 0x000008, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PlayIntro' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_AlphaValue) == 0x000010, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_AlphaValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_JumpEnd) == 0x000018, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_JumpEnd' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_CanTransition) == 0x000019, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_CanTransition' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_BoneScaleCurve) == 0x000020, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_BoneScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Bone_Name) == 0x0000B0, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Scale) == 0x0000B8, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Scale' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Bone_Name_1) == 0x0000C0, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Bone_Name_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Turn_Off) == 0x0000C8, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Turn_Off' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_ScaleValue_1) == 0x0000D0, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_ScaleValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Variant) == 0x0000D8, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Variant' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PassiveState) == 0x0000D9, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PassiveState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PassiveValue) == 0x0000E0, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PassiveValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Visibility) == 0x0000E8, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Visibility' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Lock_1) == 0x0000E9, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Lock_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PlayOutro) == 0x0000EA, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PlayOutro' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_UsePelvisDirection) == 0x0000EB, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_UsePelvisDirection' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Alpha) == 0x0000F0, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Lock) == 0x0000F8, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Lock' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_ScaleValue) == 0x000100, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_ScaleValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Weapon) == 0x000108, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Override) == 0x00010C, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Override' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_DeltaTimeX) == 0x000110, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_SwitchInteger_CmpSuccess) == 0x000114, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Override_1) == 0x000115, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Override_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_OverrideStance) == 0x000116, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_OverrideStance' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_AlphaValue_1) == 0x000118, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_AlphaValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_CombatState) == 0x000120, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_CombatState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_FullBody) == 0x000121, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_FullBody' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_BlendOutTime) == 0x000128, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_BlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Playrate_1) == 0x000130, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Playrate_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Duration) == 0x000138, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Playrate) == 0x000140, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Playrate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_DisableTurnInPlace) == 0x000148, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_DisableTurnInPlace' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_Stance_State) == 0x000149, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_Stance_State' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote, K2Node_Event_PlayFire) == 0x00014A, "Member 'ABP_GOD_Emote_C_ExecuteUbergraph_ABP_GOD_Emote::K2Node_Event_PlayFire' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.IntroMat
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Emote_C_IntroMat final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_IntroMat) == 0x000008, "Wrong alignment on ABP_GOD_Emote_C_IntroMat");
static_assert(sizeof(ABP_GOD_Emote_C_IntroMat) == 0x000008, "Wrong size on ABP_GOD_Emote_C_IntroMat");
static_assert(offsetof(ABP_GOD_Emote_C_IntroMat, DeltaTime) == 0x000000, "Member 'ABP_GOD_Emote_C_IntroMat::DeltaTime' has a wrong offset!");

// Function ABP_GOD_Emote.ABP_GOD_Emote_C.GetSkinnedFiringMontageTag
// 0x0018 (0x0018 - 0x0000)
struct ABP_GOD_Emote_C_GetSkinnedFiringMontageTag final
{
public:
	struct FGameplayTag                           SourceIdTag;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           OriginalFiringMontageTag;                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Emote_C_GetSkinnedFiringMontageTag) == 0x000004, "Wrong alignment on ABP_GOD_Emote_C_GetSkinnedFiringMontageTag");
static_assert(sizeof(ABP_GOD_Emote_C_GetSkinnedFiringMontageTag) == 0x000018, "Wrong size on ABP_GOD_Emote_C_GetSkinnedFiringMontageTag");
static_assert(offsetof(ABP_GOD_Emote_C_GetSkinnedFiringMontageTag, SourceIdTag) == 0x000000, "Member 'ABP_GOD_Emote_C_GetSkinnedFiringMontageTag::SourceIdTag' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_GetSkinnedFiringMontageTag, OriginalFiringMontageTag) == 0x000008, "Member 'ABP_GOD_Emote_C_GetSkinnedFiringMontageTag::OriginalFiringMontageTag' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Emote_C_GetSkinnedFiringMontageTag, ReturnValue) == 0x000010, "Member 'ABP_GOD_Emote_C_GetSkinnedFiringMontageTag::ReturnValue' has a wrong offset!");

}

