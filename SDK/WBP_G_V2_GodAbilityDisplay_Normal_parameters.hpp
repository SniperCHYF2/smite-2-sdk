#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V2_GodAbilityDisplay_Normal

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "Engine_structs.hpp"
#include "RallyHereStart_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature
// 0x0700 (0x0700 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature) == 0x000700, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature, ActiveEffect) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature::ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature, EffectData) == 0x000400, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature::EffectData' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature
// 0x0700 (0x0700 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature) == 0x000700, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature, ActiveEffect) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature::ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature, EffectData) == 0x000400, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature::EffectData' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature final
{
public:
	int32                                         PreviousAmmoCount;                                 // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewAmmoCount;                                      // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature) == 0x000004, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature) == 0x000008, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature, PreviousAmmoCount) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature::PreviousAmmoCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature, NewAmmoCount) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BndEvt__WBP_G_V2_GodAbilityDisplay_Normal_CooldownWidget_K2Node_ComponentBoundEvent_4_OnAssociatedEquipmentAmmoChanged__DelegateSignature::NewAmmoCount' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.Check Ability Fire
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire final
{
public:
	ETriggerEvent                                 KeyTriggerEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivateEquipmentAtLevel_ReturnValue;  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRefireTimeRemaining_ReturnValue;       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAbilityCost_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetCurrentBlockedReason_ReturnValue;      // 0x0014(0x0008)(ConstParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowCooldown_ReturnValue;           // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire) == 0x000028, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, KeyTriggerEvent) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::KeyTriggerEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_GetEquipmentLevel_ReturnValue) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_GetEquipmentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_CanActivateEquipmentAtLevel_ReturnValue) == 0x000009, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_CanActivateEquipmentAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_GetRefireTimeRemaining_ReturnValue) == 0x00000C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_GetRefireTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_CheckAbilityCost_ReturnValue) == 0x000011, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_CheckAbilityCost_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_GetCurrentBlockedReason_ReturnValue) == 0x000014, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_GetCurrentBlockedReason_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_ShouldShowCooldown_ReturnValue) == 0x00001D, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_ShouldShowCooldown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Ability_Fire::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.Check Level Animation
// 0x0018 (0x0018 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanEquipmentLevelUp_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation) == 0x000018, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, Temp_bool_Variable) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, Temp_byte_Variable) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, CallFunc_CanEquipmentLevelUp_ReturnValue) == 0x000003, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::CallFunc_CanEquipmentLevelUp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, K2Node_Select_Default) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x000014, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Check_Level_Animation::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.CheckToDisplayHelpTipForAbility
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility final
{
public:
	bool                                          Can_Activate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoesNotMeetCost;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           BlockTagReason;                                    // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameHUD*                             CallFunc_GetLocalHUDAsGame_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWHelpTipWidget*                       CallFunc_GetHelpTipWidget_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility) == 0x000028, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, Can_Activate) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::Can_Activate' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, DoesNotMeetCost) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::DoesNotMeetCost' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, BlockTagReason) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::BlockTagReason' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, CallFunc_GetLocalHUDAsGame_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::CallFunc_GetLocalHUDAsGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000018, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility, CallFunc_GetHelpTipWidget_ReturnValue) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_CheckToDisplayHelpTipForAbility::CallFunc_GetHelpTipWidget_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityCost
// 0x0108 (0x0108 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost final
{
public:
	struct FGameplayAttribute                     CostAttribute;                                     // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	float                                         Cost;                                              // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   textFormat;                                        // 0x0040(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x1];                                       // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivateEquipmentAtLevel_ReturnValue;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0068(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0050)(HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E8(0x0018)()
	double                                        CallFunc_Conv_DoubleToText_Value_ImplicitCast;     // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost) == 0x000108, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CostAttribute) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CostAttribute' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, Cost) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::Cost' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, textFormat) == 0x000040, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::textFormat' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, Temp_bool_Variable) == 0x000058, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, Temp_byte_Variable) == 0x000059, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, Temp_byte_Variable_1) == 0x00005A, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CallFunc_GetEquipmentLevel_ReturnValue) == 0x00005C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CallFunc_GetEquipmentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CallFunc_CanActivateEquipmentAtLevel_ReturnValue) == 0x000060, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CallFunc_CanActivateEquipmentAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000068, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, K2Node_Select_Default) == 0x0000D0, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, K2Node_MakeArray_Array) == 0x0000D8, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost, CallFunc_Conv_DoubleToText_Value_ImplicitCast) == 0x000100, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCost::CallFunc_Conv_DoubleToText_Value_ImplicitCast' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityCostMet
// 0x000C (0x000C - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet final
{
public:
	bool                                          bCostIsMet;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivateEquipmentAtLevel_ReturnValue;  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet) == 0x000004, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet) == 0x00000C, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, bCostIsMet) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::bCostIsMet' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, Temp_byte_Variable) == 0x000002, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, CallFunc_GetEquipmentLevel_ReturnValue) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::CallFunc_GetEquipmentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, CallFunc_CanActivateEquipmentAtLevel_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::CallFunc_CanActivateEquipmentAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet, K2Node_Select_Default) == 0x000009, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityCostMet::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityPhase_Aiming
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Aiming::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityPhase_Fired
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired) == 0x000001, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Fired::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityPhase_Inactive
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_Inactive::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayAbilityPhase_PreFire
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayAbilityPhase_PreFire::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayCanLevelUp
// 0x0040 (0x0040 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp final
{
public:
	bool                                          bCanLevelUp;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerController*                    CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWGameHUD*                             CallFunc_GetLocalHUDAsGame_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInputBound_ReturnValue;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlaying_ReturnValue;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp) == 0x000040, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, bCanLevelUp) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::bCanLevelUp' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, Temp_byte_Variable) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_GetLocalHUDAsGame_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_GetLocalHUDAsGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_GetCurrentInputState_ReturnValue) == 0x000018, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_IsInputBound_ReturnValue) == 0x000019, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_IsInputBound_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000028, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, Temp_bool_Variable) == 0x000030, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_IsAnimationPlaying_ReturnValue) == 0x000031, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_IsAnimationPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, K2Node_Select_Default) == 0x000032, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayCanLevelUp::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayEquipment
// 0x0060 (0x0060 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment final
{
public:
	const class UHWEquipmentItem*                 EquipmentInfo;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Temp_softobject_Variable;                          // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              K2Node_Select_Default;                             // 0x0038(0x0028)(UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment) == 0x000060, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment, EquipmentInfo) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment::EquipmentInfo' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment, Temp_bool_Variable) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment, Temp_softobject_Variable) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment, K2Node_Select_Default) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipment::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayEquipmentMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel) == 0x000004, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel) == 0x000008, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel, MaxLevel) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel::MaxLevel' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel, CallFunc_GetEquipmentLevel_ReturnValue) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayEquipmentMaxLevel::CallFunc_GetEquipmentLevel_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayIconOverride
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride) == 0x000028, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride, Texture) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayIconOverride::Texture' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayInputTag
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag) == 0x000004, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag) == 0x000008, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag, Tag) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayInputTag::Tag' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayRefireState
// 0x0058 (0x0058 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState final
{
public:
	bool                                          bIsRefireIsActive;                                 // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWEquipmentComponentSettings_Refireable* RefireSettings;                            // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0014(0x0014)()
	struct FLinearColor                           CallFunc_LinearColor_White_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0038(0x0014)()
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState) == 0x000058, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, bIsRefireIsActive) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::bIsRefireIsActive' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, RefireSettings) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::RefireSettings' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, K2Node_MakeStruct_SlateColor) == 0x000014, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, CallFunc_LinearColor_White_ReturnValue) == 0x000028, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::CallFunc_LinearColor_White_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, K2Node_MakeStruct_SlateColor_1) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayRefireState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.DisplayShowPrimaryRecommendation
// 0x0005 (0x0005 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation) == 0x000005, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation, bShouldShow) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation::bShouldShow' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation, Temp_byte_Variable) == 0x000002, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation, K2Node_Select_Default) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_DisplayShowPrimaryRecommendation::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.EquipmentLevelUpdated
// 0x0030 (0x0030 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ULocalPlayer*                           CallFunc_GetLocalPlayer_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalPlayerOnlyASpectator_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEquipmentLevel_ReturnValue_1;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActivateEquipmentAtLevel_ReturnValue;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated) == 0x000030, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_byte_Variable) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_bool_Variable) == 0x000002, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_GetLocalPlayer_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_GetLocalPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_IsLocalPlayerOnlyASpectator_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_IsLocalPlayerOnlyASpectator_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_GetEquipmentLevel_ReturnValue) == 0x000014, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_GetEquipmentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_GetEquipmentLevel_ReturnValue_1) == 0x000024, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_GetEquipmentLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, CallFunc_CanActivateEquipmentAtLevel_ReturnValue) == 0x000028, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::CallFunc_CanActivateEquipmentAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, K2Node_Select_Default) == 0x000029, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated, K2Node_Select_Default_1) == 0x00002A, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_EquipmentLevelUpdated::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal
// 0x0E80 (0x0E80 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffect                  K2Node_ComponentBoundEvent_ActiveEffect_1;         // 0x0008(0x0400)(ConstParm)
	struct FHWTrackedEffectData                   K2Node_ComponentBoundEvent_EffectData_1;           // 0x0408(0x0300)(ConstParm)
	struct FActiveGameplayEffect                  K2Node_ComponentBoundEvent_ActiveEffect;           // 0x0708(0x0400)(ConstParm)
	struct FHWTrackedEffectData                   K2Node_ComponentBoundEvent_EffectData;             // 0x0B08(0x0300)(ConstParm)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0E08(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0E40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRefireTimeRemaining_ReturnValue;       // 0x0E44(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRefireDuration_ReturnValue;            // 0x0E48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0E4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4D[0x3];                                      // 0x0E4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0E50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_PreviousAmmoCount;      // 0x0E58(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_NewAmmoCount;           // 0x0E5C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0E60(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_B_ImplicitCast;       // 0x0E68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0E70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0E78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal) == 0x000E80, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, EntryPoint) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_ActiveEffect_1) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_ActiveEffect_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_EffectData_1) == 0x000408, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_EffectData_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_ActiveEffect) == 0x000708, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_EffectData) == 0x000B08, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_EffectData' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_Event_MyGeometry) == 0x000E08, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_Event_InDeltaTime) == 0x000E40, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_GetRefireTimeRemaining_ReturnValue) == 0x000E44, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_GetRefireTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_GetRefireDuration_ReturnValue) == 0x000E48, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_GetRefireDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000E4C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000E50, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_PreviousAmmoCount) == 0x000E58, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_PreviousAmmoCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, K2Node_ComponentBoundEvent_NewAmmoCount) == 0x000E5C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::K2Node_ComponentBoundEvent_NewAmmoCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000E60, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_Divide_DoubleDouble_B_ImplicitCast) == 0x000E68, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_Divide_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000E70, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000E78, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_ExecuteUbergraph_WBP_G_V2_GodAbilityDisplay_Normal::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.InitializeWidget
// 0x0058 (0x0058 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget final
{
public:
	TDelegate<void(bool bHasKeysForInputTags)>    K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(ETriggerEvent KeyTriggerEvent)> K2Node_CreateDelegate_OutputDelegate_2;           // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0040(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget) == 0x000058, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_2) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000030, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_3) == 0x000040, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000050, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_InitializeWidget::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.Level Up Hot Keys Visability Updated
// 0x0002 (0x0002 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated final
{
public:
	bool                                          bHasKeysToDisplay;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanEquipmentLevelUp_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated) == 0x000001, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated) == 0x000002, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated, bHasKeysToDisplay) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated::bHasKeysToDisplay' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated, CallFunc_CanEquipmentLevelUp_ReturnValue) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Level_Up_Hot_Keys_Visability_Updated::CallFunc_CanEquipmentLevelUp_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.On Tracked Effect Ended
// 0x0718 (0x0718 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AHWGameHUD*                             CallFunc_GetLocalHUDAsGame_ReturnValue;            // 0x0700(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWHelpTipWidget*                       CallFunc_GetHelpTipWidget_ReturnValue;             // 0x0708(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0710(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended) == 0x000718, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended, ActiveEffect) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended::ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended, EffectData) == 0x000400, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended::EffectData' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended, CallFunc_GetLocalHUDAsGame_ReturnValue) == 0x000700, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended::CallFunc_GetLocalHUDAsGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended, CallFunc_GetHelpTipWidget_ReturnValue) == 0x000708, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended::CallFunc_GetHelpTipWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000710, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_On_Tracked_Effect_Ended::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.PlayPhaseAnimation
// 0x0030 (0x0030 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                PhaseWidget;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PhaseAnim;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoopAnimation;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation) == 0x000030, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::PreviousPhase' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, PhaseWidget) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::PhaseWidget' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, PhaseAnim) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::PhaseAnim' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, bLoopAnimation) == 0x000018, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, CallFunc_SelectInt_ReturnValue) == 0x00001C, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_PlayPhaseAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.Set Text Alignment and Size
// 0x0020 (0x0020 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size final
{
public:
	EHorizontalAlignment                          Horizontal_Alignment;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Vertical_Alignment;                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FontSize;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BottomPadding;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_GS_V1_CooldownOverlay_C*           K2Node_DynamicCast_AsWBP_GS_V1_Cooldown_Overlay;   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size) == 0x000020, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, Horizontal_Alignment) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::Horizontal_Alignment' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, Vertical_Alignment) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::Vertical_Alignment' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, FontSize) == 0x000004, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::FontSize' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, BottomPadding) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::BottomPadding' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, K2Node_DynamicCast_AsWBP_GS_V1_Cooldown_Overlay) == 0x000010, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::K2Node_DynamicCast_AsWBP_GS_V1_Cooldown_Overlay' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Set_Text_Alignment_and_Size::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.StopPhaseAnimation
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation final
{
public:
	EHWUIAbilityFlowPhase                         PhaseAnimation;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation) == 0x000010, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation, PhaseAnimation) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation::PhaseAnimation' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_StopPhaseAnimation::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_Tick) == 0x000004, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_Tick");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_Tick) == 0x00003C, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_Tick");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.UpdateGrayscale
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowCooldown_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale) == 0x000010, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale, CallFunc_PlayAnimationForward_ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale, CallFunc_ShouldShowCooldown_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale::CallFunc_ShouldShowCooldown_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale, CallFunc_IsVisible_ReturnValue) == 0x000009, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_UpdateGrayscale::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodAbilityDisplay_Normal.WBP_G_V2_GodAbilityDisplay_Normal_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodAbilityDisplay_Normal_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

}

