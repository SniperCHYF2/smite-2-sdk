#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_S_Settings_Keybinder

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.AddKeyBinderCategory
// 0x0030 (0x0030 - 0x0000)
struct WBP_S_Settings_Keybinder_C_AddKeyBinderCategory final
{
public:
	class FText                                   InCategoryName;                                    // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_S_Settings_KeybinderCategory_C*    CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_AddKeyBinderCategory");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory) == 0x000030, "Wrong size on WBP_S_Settings_Keybinder_C_AddKeyBinderCategory");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory, InCategoryName) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderCategory::InCategoryName' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory, CallFunc_GetOwningPlayer_ReturnValue) == 0x000018, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderCategory::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory, CallFunc_Create_ReturnValue) == 0x000020, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderCategory::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderCategory, CallFunc_AddChild_ReturnValue) == 0x000028, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderCategory::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.AddKeyBinderEntryWidget
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget final
{
public:
	class UHWKeyBinderEntryWidget*                EntryWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_S_Settings_KeybinderKeyEntry_C*    K2Node_DynamicCast_AsWBP_S_Settings_Keybinder_Key_Entry; // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget) == 0x000020, "Wrong size on WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget, EntryWidget) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget::EntryWidget' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget, K2Node_DynamicCast_AsWBP_S_Settings_Keybinder_Key_Entry) == 0x000008, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget::K2Node_DynamicCast_AsWBP_S_Settings_Keybinder_Key_Entry' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget, CallFunc_AddChild_ReturnValue) == 0x000018, "Member 'WBP_S_Settings_Keybinder_C_AddKeyBinderEntryWidget::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature) == 0x000018, "Wrong size on WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x000010, "Member 'WBP_S_Settings_Keybinder_C_BndEvt__WBP_S_Settings_Keybinder_PresetsCombobox_K2Node_ComponentBoundEvent_0_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.DisplayMappingName
// 0x0018 (0x0018 - 0x0000)
struct WBP_S_Settings_Keybinder_C_DisplayMappingName final
{
public:
	class FText                                   MappingName;                                       // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_DisplayMappingName) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_DisplayMappingName");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_DisplayMappingName) == 0x000018, "Wrong size on WBP_S_Settings_Keybinder_C_DisplayMappingName");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayMappingName, MappingName) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_DisplayMappingName::MappingName' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.DisplayPresetOptions
// 0x0080 (0x0080 - 0x0000)
struct WBP_S_Settings_Keybinder_C_DisplayPresetOptions final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FText                                   SelectedOption;                                    // 0x0010(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0048(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_DisplayPresetOptions");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions) == 0x000080, "Wrong size on WBP_S_Settings_Keybinder_C_DisplayPresetOptions");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, Options) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::Options' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, SelectedOption) == 0x000010, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::SelectedOption' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, Temp_int_Array_Index_Variable) == 0x000028, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Conv_TextToString_ReturnValue) == 0x000038, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Array_Get_Item) == 0x000048, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000068, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_DisplayPresetOptions, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'WBP_S_Settings_Keybinder_C_DisplayPresetOptions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.ExecuteUbergraph_WBP_S_Settings_Keybinder
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder) == 0x000008, "Wrong alignment on WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder) == 0x000020, "Wrong size on WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder, EntryPoint) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder, K2Node_ComponentBoundEvent_SelectedItem) == 0x000008, "Member 'WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder::K2Node_ComponentBoundEvent_SelectedItem' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder, K2Node_ComponentBoundEvent_SelectionType) == 0x000018, "Member 'WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder::K2Node_ComponentBoundEvent_SelectionType' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'WBP_S_Settings_Keybinder_C_ExecuteUbergraph_WBP_S_Settings_Keybinder::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.GetSelectedPresetIndex
// 0x0008 (0x0008 - 0x0000)
struct WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSelectedIndex_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex) == 0x000004, "Wrong alignment on WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex) == 0x000008, "Wrong size on WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex, ReturnValue) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex, CallFunc_GetSelectedIndex_ReturnValue) == 0x000004, "Member 'WBP_S_Settings_Keybinder_C_GetSelectedPresetIndex::CallFunc_GetSelectedIndex_ReturnValue' has a wrong offset!");

// Function WBP_S_Settings_Keybinder.WBP_S_Settings_Keybinder_C.UnappliedKeybindingsUpdated
// 0x0005 (0x0005 - 0x0000)
struct WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated final
{
public:
	bool                                          bNewHasUnappliedKeybindings;                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated) == 0x000001, "Wrong alignment on WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated");
static_assert(sizeof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated) == 0x000005, "Wrong size on WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated, bNewHasUnappliedKeybindings) == 0x000000, "Member 'WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated::bNewHasUnappliedKeybindings' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated, Temp_bool_Variable) == 0x000001, "Member 'WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated, Temp_byte_Variable) == 0x000002, "Member 'WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated, K2Node_Select_Default) == 0x000004, "Member 'WBP_S_Settings_Keybinder_C_UnappliedKeybindingsUpdated::K2Node_Select_Default' has a wrong offset!");

}

