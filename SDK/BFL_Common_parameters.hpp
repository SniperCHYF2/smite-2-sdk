#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_Common

#include "Basic.hpp"

#include "EOperators_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BFL_Common.BFL_Common_C.CheckTeams
// 0x0020 (0x0020 - 0x0000)
struct BFL_Common_C_CheckTeams final
{
public:
	class AActor*                                 ActorA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnSameTeam;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         CallFunc_GetGenericTeamId_ReturnValue;             // 0x0019(0x0001)(NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         CallFunc_GetGenericTeamId_ReturnValue_1;           // 0x001A(0x0001)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_CheckTeams) == 0x000008, "Wrong alignment on BFL_Common_C_CheckTeams");
static_assert(sizeof(BFL_Common_C_CheckTeams) == 0x000020, "Wrong size on BFL_Common_C_CheckTeams");
static_assert(offsetof(BFL_Common_C_CheckTeams, ActorA) == 0x000000, "Member 'BFL_Common_C_CheckTeams::ActorA' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, ActorB) == 0x000008, "Member 'BFL_Common_C_CheckTeams::ActorB' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, __WorldContext) == 0x000010, "Member 'BFL_Common_C_CheckTeams::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, IsOnSameTeam) == 0x000018, "Member 'BFL_Common_C_CheckTeams::IsOnSameTeam' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, CallFunc_GetGenericTeamId_ReturnValue) == 0x000019, "Member 'BFL_Common_C_CheckTeams::CallFunc_GetGenericTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, CallFunc_GetGenericTeamId_ReturnValue_1) == 0x00001A, "Member 'BFL_Common_C_CheckTeams::CallFunc_GetGenericTeamId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CheckTeams, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001B, "Member 'BFL_Common_C_CheckTeams::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BFL_Common.BFL_Common_C.CompareValues
// 0x0030 (0x0030 - 0x0000)
struct BFL_Common_C_CompareValues final
{
public:
	double                                        InputA;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputB;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOperators                                    Operation;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EOperators                                    Temp_byte_Variable;                                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_CompareValues) == 0x000008, "Wrong alignment on BFL_Common_C_CompareValues");
static_assert(sizeof(BFL_Common_C_CompareValues) == 0x000030, "Wrong size on BFL_Common_C_CompareValues");
static_assert(offsetof(BFL_Common_C_CompareValues, InputA) == 0x000000, "Member 'BFL_Common_C_CompareValues::InputA' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, InputB) == 0x000008, "Member 'BFL_Common_C_CompareValues::InputB' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, Operation) == 0x000010, "Member 'BFL_Common_C_CompareValues::Operation' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, __WorldContext) == 0x000018, "Member 'BFL_Common_C_CompareValues::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, Return) == 0x000020, "Member 'BFL_Common_C_CompareValues::Return' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000021, "Member 'BFL_Common_C_CompareValues::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000022, "Member 'BFL_Common_C_CompareValues::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000023, "Member 'BFL_Common_C_CompareValues::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000024, "Member 'BFL_Common_C_CompareValues::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000025, "Member 'BFL_Common_C_CompareValues::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, Temp_byte_Variable) == 0x000026, "Member 'BFL_Common_C_CompareValues::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000027, "Member 'BFL_Common_C_CompareValues::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_CompareValues, K2Node_Select_Default) == 0x000028, "Member 'BFL_Common_C_CompareValues::K2Node_Select_Default' has a wrong offset!");

// Function BFL_Common.BFL_Common_C.FindClosestActor
// 0x0080 (0x0080 - 0x0000)
struct BFL_Common_C_FindClosestActor final
{
public:
	TArray<class AActor*>                         ActorArray;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AActor*                                 ActorToCheckAgainst;                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ClosestActor;                                      // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LocalClosestActor;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LocalActor;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHorizontalDistanceTo_ReturnValue;      // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_Distance_ImplicitCast;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_FindClosestActor) == 0x000008, "Wrong alignment on BFL_Common_C_FindClosestActor");
static_assert(sizeof(BFL_Common_C_FindClosestActor) == 0x000080, "Wrong size on BFL_Common_C_FindClosestActor");
static_assert(offsetof(BFL_Common_C_FindClosestActor, ActorArray) == 0x000000, "Member 'BFL_Common_C_FindClosestActor::ActorArray' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, ActorToCheckAgainst) == 0x000010, "Member 'BFL_Common_C_FindClosestActor::ActorToCheckAgainst' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, __WorldContext) == 0x000018, "Member 'BFL_Common_C_FindClosestActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, ClosestActor) == 0x000020, "Member 'BFL_Common_C_FindClosestActor::ClosestActor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, LocalClosestActor) == 0x000028, "Member 'BFL_Common_C_FindClosestActor::LocalClosestActor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, LocalActor) == 0x000030, "Member 'BFL_Common_C_FindClosestActor::LocalActor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, Distance) == 0x000038, "Member 'BFL_Common_C_FindClosestActor::Distance' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BFL_Common_C_FindClosestActor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'BFL_Common_C_FindClosestActor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'BFL_Common_C_FindClosestActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x00004D, "Member 'BFL_Common_C_FindClosestActor::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Array_Get_Item) == 0x000050, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_IsValid_ReturnValue_1) == 0x000058, "Member 'BFL_Common_C_FindClosestActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_GetHorizontalDistanceTo_ReturnValue) == 0x000064, "Member 'BFL_Common_C_FindClosestActor::CallFunc_GetHorizontalDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000068, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_BooleanOR_ReturnValue) == 0x000069, "Member 'BFL_Common_C_FindClosestActor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, K2Node_VariableSet_Distance_ImplicitCast) == 0x000070, "Member 'BFL_Common_C_FindClosestActor::K2Node_VariableSet_Distance_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_FindClosestActor, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000078, "Member 'BFL_Common_C_FindClosestActor::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BFL_Common.BFL_Common_C.GetEquipPointRange
// 0x0030 (0x0030 - 0x0000)
struct BFL_Common_C_GetEquipPointRange final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EquipTag;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotId;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Range;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_Range_ImplicitCast;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_GetEquipPointRange) == 0x000008, "Wrong alignment on BFL_Common_C_GetEquipPointRange");
static_assert(sizeof(BFL_Common_C_GetEquipPointRange) == 0x000030, "Wrong size on BFL_Common_C_GetEquipPointRange");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, Actor) == 0x000000, "Member 'BFL_Common_C_GetEquipPointRange::Actor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, EquipTag) == 0x000008, "Member 'BFL_Common_C_GetEquipPointRange::EquipTag' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, SlotId) == 0x000010, "Member 'BFL_Common_C_GetEquipPointRange::SlotId' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, __WorldContext) == 0x000018, "Member 'BFL_Common_C_GetEquipPointRange::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, Range) == 0x000020, "Member 'BFL_Common_C_GetEquipPointRange::Range' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_GetEquipPointRange, K2Node_FunctionResult_Range_ImplicitCast) == 0x000028, "Member 'BFL_Common_C_GetEquipPointRange::K2Node_FunctionResult_Range_ImplicitCast' has a wrong offset!");

// Function BFL_Common.BFL_Common_C.IsPlayer
// 0x0038 (0x0038 - 0x0000)
struct BFL_Common_C_IsPlayer final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer_0;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerController_ReturnValue;           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_IsPlayer) == 0x000008, "Wrong alignment on BFL_Common_C_IsPlayer");
static_assert(sizeof(BFL_Common_C_IsPlayer) == 0x000038, "Wrong size on BFL_Common_C_IsPlayer");
static_assert(offsetof(BFL_Common_C_IsPlayer, Actor) == 0x000000, "Member 'BFL_Common_C_IsPlayer::Actor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, __WorldContext) == 0x000008, "Member 'BFL_Common_C_IsPlayer::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, IsPlayer_0) == 0x000010, "Member 'BFL_Common_C_IsPlayer::IsPlayer_0' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, K2Node_DynamicCast_AsPawn) == 0x000018, "Member 'BFL_Common_C_IsPlayer::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BFL_Common_C_IsPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, CallFunc_GetController_ReturnValue) == 0x000028, "Member 'BFL_Common_C_IsPlayer::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_IsPlayer, CallFunc_IsPlayerController_ReturnValue) == 0x000030, "Member 'BFL_Common_C_IsPlayer::CallFunc_IsPlayerController_ReturnValue' has a wrong offset!");

// Function BFL_Common.BFL_Common_C.ToggleDynamicTag
// 0x00A0 (0x00A0 - 0x0000)
struct BFL_Common_C_ToggleDynamicTag final
{
public:
	bool                                          ShouldAdd;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowMultipleTags;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayTag;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldReplicate;                                  // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess_1;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess_2;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput; // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue;       // 0x0084(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess_3;         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue_3;      // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_MakeLiteralGameplayTag_ReturnValue_1;     // 0x0098(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Common_C_ToggleDynamicTag) == 0x000008, "Wrong alignment on BFL_Common_C_ToggleDynamicTag");
static_assert(sizeof(BFL_Common_C_ToggleDynamicTag) == 0x0000A0, "Wrong size on BFL_Common_C_ToggleDynamicTag");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, ShouldAdd) == 0x000000, "Member 'BFL_Common_C_ToggleDynamicTag::ShouldAdd' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, AllowMultipleTags) == 0x000001, "Member 'BFL_Common_C_ToggleDynamicTag::AllowMultipleTags' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, Actor) == 0x000008, "Member 'BFL_Common_C_ToggleDynamicTag::Actor' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, GameplayTag) == 0x000010, "Member 'BFL_Common_C_ToggleDynamicTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, bShouldReplicate) == 0x000018, "Member 'BFL_Common_C_ToggleDynamicTag::bShouldReplicate' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, __WorldContext) == 0x000020, "Member 'BFL_Common_C_ToggleDynamicTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000028, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000030, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_bSuccess_1) == 0x000038, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue_1) == 0x000040, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_bSuccess_2) == 0x000048, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue_2) == 0x000050, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000058, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000068, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000070, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000080, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_MakeLiteralGameplayTag_ReturnValue) == 0x000084, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_MakeLiteralGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_bSuccess_3) == 0x00008C, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue_3) == 0x000090, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BFL_Common_C_ToggleDynamicTag, CallFunc_MakeLiteralGameplayTag_ReturnValue_1) == 0x000098, "Member 'BFL_Common_C_ToggleDynamicTag::CallFunc_MakeLiteralGameplayTag_ReturnValue_1' has a wrong offset!");

}

