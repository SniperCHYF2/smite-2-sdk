#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_GS_UILibrary

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "Hemingway_structs.hpp"
#include "AIModule_structs.hpp"


namespace SDK::Params
{

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.CheckToPlayCanNotFireSound
// 0x0040 (0x0040 - 0x0000)
struct BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound final
{
public:
	bool                                          Can_Activate;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasRefireTimeRemaining;                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnCooldown;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoesNotMeetCost;                                   // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BlockTagReason;                                    // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                World_Context;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_Dryfire_Silenced;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_Dryfire_Stunned;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_Dryfire_Default;                               // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound");
static_assert(sizeof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound) == 0x000040, "Wrong size on BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, Can_Activate) == 0x000000, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::Can_Activate' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, HasRefireTimeRemaining) == 0x000001, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::HasRefireTimeRemaining' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, IsOnCooldown) == 0x000002, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::IsOnCooldown' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, DoesNotMeetCost) == 0x000003, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::DoesNotMeetCost' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, BlockTagReason) == 0x000004, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::BlockTagReason' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, World_Context) == 0x000010, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::World_Context' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, __WorldContext) == 0x000018, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, SFX_Dryfire_Silenced) == 0x000020, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::SFX_Dryfire_Silenced' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, SFX_Dryfire_Stunned) == 0x000028, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::SFX_Dryfire_Stunned' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, SFX_Dryfire_Default) == 0x000030, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::SFX_Dryfire_Default' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000038, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000039, "Member 'BPL_GS_UILibrary_C_CheckToPlayCanNotFireSound::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.Format Timer Duration Display
// 0x00A0 (0x00A0 - 0x0000)
struct BPL_GS_UILibrary_C_Format_Timer_Duration_Display final
{
public:
	class AHWGameHUD*                             GameHUD;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TimerAsSeconds;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisplayFractional;                                 // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x0020(0x0018)(Parm, OutParm)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetTimerTextFromSeconds_ReturnValue;      // 0x0058(0x0018)()
	int32                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetShouldShowMinutesForDurations_ReturnValue; // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0080(0x0018)()
	float                                         CallFunc_GetTimerTextFromSeconds_TimeInSeconds_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_Format_Timer_Duration_Display");
static_assert(sizeof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display) == 0x0000A0, "Wrong size on BPL_GS_UILibrary_C_Format_Timer_Duration_Display");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, GameHUD) == 0x000000, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::GameHUD' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, TimerAsSeconds) == 0x000008, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::TimerAsSeconds' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, DisplayFractional) == 0x000010, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::DisplayFractional' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, __WorldContext) == 0x000018, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, OutText) == 0x000020, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::OutText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_int_Variable) == 0x000038, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_int_Variable_1) == 0x000040, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_bool_Variable) == 0x000044, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_int_Variable_2) == 0x000048, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_int_Variable_3) == 0x00004C, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, Temp_bool_Variable_1) == 0x000050, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000051, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000053, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_GetTimerTextFromSeconds_ReturnValue) == 0x000058, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_GetTimerTextFromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, K2Node_Select_Default) == 0x000070, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_BooleanAND_ReturnValue_1) == 0x000074, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_GetShouldShowMinutesForDurations_ReturnValue) == 0x000075, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_GetShouldShowMinutesForDurations_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, K2Node_Select_Default_1) == 0x000078, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_BooleanAND_ReturnValue_2) == 0x00007C, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000080, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_Format_Timer_Duration_Display, CallFunc_GetTimerTextFromSeconds_TimeInSeconds_ImplicitCast) == 0x000098, "Member 'BPL_GS_UILibrary_C_Format_Timer_Duration_Display::CallFunc_GetTimerTextFromSeconds_TimeInSeconds_ImplicitCast' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.GetFloatingNumberAsText
// 0x0130 (0x0130 - 0x0000)
struct BPL_GS_UILibrary_C_GetFloatingNumberAsText final
{
public:
	class UHWFloatingTextWidget*                  InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 InParameters;                                      // 0x0008(0x00D8)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         InNumber;                                          // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   OutText;                                           // 0x00F0(0x0018)(Parm, OutParm)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWFloatingTextOverrideType                   CallFunc_GetTextOverrideType_ReturnValue;          // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10F[0x1];                                      // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue_1;                    // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0118(0x0018)()
};
static_assert(alignof(BPL_GS_UILibrary_C_GetFloatingNumberAsText) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_GetFloatingNumberAsText");
static_assert(sizeof(BPL_GS_UILibrary_C_GetFloatingNumberAsText) == 0x000130, "Wrong size on BPL_GS_UILibrary_C_GetFloatingNumberAsText");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, InWidget) == 0x000000, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::InWidget' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, InParameters) == 0x000008, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::InParameters' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, InNumber) == 0x0000E0, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::InNumber' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, __WorldContext) == 0x0000E8, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, OutText) == 0x0000F0, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::OutText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, CallFunc_Abs_Int_ReturnValue) == 0x000108, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, CallFunc_GetTextOverrideType_ReturnValue) == 0x00010C, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::CallFunc_GetTextOverrideType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, CallFunc_Greater_IntInt_ReturnValue) == 0x00010D, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, K2Node_SwitchEnum_CmpSuccess) == 0x00010E, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, CallFunc_Abs_Int_ReturnValue_1) == 0x000110, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::CallFunc_Abs_Int_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetFloatingNumberAsText, CallFunc_Conv_IntToText_ReturnValue) == 0x000118, "Member 'BPL_GS_UILibrary_C_GetFloatingNumberAsText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.GetKillstreakTextFromKillstreakTag
// 0x0050 (0x0050 - 0x0000)
struct BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag final
{
public:
	struct FGameplayTag                           KillstreakTag;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   KillstreakText;                                    // 0x0018(0x0018)(Parm, OutParm)
	class FText                                   ReturnText;                                        // 0x0030(0x0018)(Edit, BlueprintVisible)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag");
static_assert(sizeof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag) == 0x000050, "Wrong size on BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, KillstreakTag) == 0x000000, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::KillstreakTag' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, __WorldContext) == 0x000008, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, bFound) == 0x000010, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::bFound' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, KillstreakText) == 0x000018, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::KillstreakText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, ReturnText) == 0x000030, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::ReturnText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000048, "Member 'BPL_GS_UILibrary_C_GetKillstreakTextFromKillstreakTag::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.GetMultikillTextFromMultikillTag
// 0x0050 (0x0050 - 0x0000)
struct BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag final
{
public:
	struct FGameplayTag                           MultikillTag;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bFound;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MultikillText;                                     // 0x0018(0x0018)(Parm, OutParm)
	class FText                                   ReturnText;                                        // 0x0030(0x0018)(Edit, BlueprintVisible)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag");
static_assert(sizeof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag) == 0x000050, "Wrong size on BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, MultikillTag) == 0x000000, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::MultikillTag' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, __WorldContext) == 0x000008, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, bFound) == 0x000010, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::bFound' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, MultikillText) == 0x000018, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::MultikillText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, ReturnText) == 0x000030, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::ReturnText' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000048, "Member 'BPL_GS_UILibrary_C_GetMultikillTextFromMultikillTag::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.UILibrary_GetSmiteTeamColorTag
// 0x0050 (0x0050 - 0x0000)
struct BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag final
{
public:
	EHWSmiteTeamId                                SmiteTeamId;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ColorTag;                                          // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0024(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_2;                            // 0x002C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_3;                            // 0x0034(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_4;                            // 0x003C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0044(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag");
static_assert(sizeof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag) == 0x000050, "Wrong size on BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, SmiteTeamId) == 0x000000, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::SmiteTeamId' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, __WorldContext) == 0x000008, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, ColorTag) == 0x000010, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::ColorTag' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_byte_Variable) == 0x000018, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_struct_Variable) == 0x00001C, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_struct_Variable_1) == 0x000024, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_struct_Variable_2) == 0x00002C, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_struct_Variable_3) == 0x000034, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, Temp_struct_Variable_4) == 0x00003C, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag, K2Node_Select_Default) == 0x000044, "Member 'BPL_GS_UILibrary_C_UILibrary_GetSmiteTeamColorTag::K2Node_Select_Default' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.UILibrary_GetTeamAttitudeColorTag
// 0x0020 (0x0020 - 0x0000)
struct BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag final
{
public:
	ETeamAttitude                                 Attitude;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ColorTag;                                          // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag");
static_assert(sizeof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag) == 0x000020, "Wrong size on BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag, Attitude) == 0x000000, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag::Attitude' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag, __WorldContext) == 0x000008, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag, ColorTag) == 0x000010, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag::ColorTag' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamAttitudeColorTag::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BPL_GS_UILibrary.BPL_GS_UILibrary_C.UILibrary_GetTeamColorTag
// 0x0020 (0x0020 - 0x0000)
struct BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag final
{
public:
	struct FGenericTeamId                         InTeamId;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ColorTag;                                          // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag) == 0x000008, "Wrong alignment on BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag");
static_assert(sizeof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag) == 0x000020, "Wrong size on BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag, InTeamId) == 0x000000, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag::InTeamId' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag, __WorldContext) == 0x000008, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag, ColorTag) == 0x000010, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag::ColorTag' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000018, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag, K2Node_SwitchInteger_CmpSuccess) == 0x00001C, "Member 'BPL_GS_UILibrary_C_UILibrary_GetTeamColorTag::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

}

