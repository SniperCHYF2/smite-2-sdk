#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GOD_Lobby

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_CombatState_structs.hpp"
#include "Hemingway_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ABP_GOD_Lobby_structs.hpp"
#include "SkinnableAnimGraphRuntime_structs.hpp"
#include "EShuffleType_structs.hpp"
#include "ECharPassiveState_structs.hpp"
#include "ECharGenericStance_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GOD_Lobby.ABP_GOD_Lobby_C
// 0x4100 (0x4670 - 0x0570)
class UABP_GOD_Lobby_C final : public UHWLobby_AnimInstBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_GOD_Lobby::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                // 0x0578(0x001C)(HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0598(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x05A0(0x0008)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x05A8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x05D8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0608(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0638(0x0030)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_11;                  // 0x0668(0x0180)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x07E8(0x0028)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_10;                  // 0x0810(0x0180)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0990(0x0028)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_9;                   // 0x09B8(0x0180)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0B38(0x0028)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_8;                   // 0x0B60(0x0180)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0CE0(0x0028)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x0D08(0x00D0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_12;                       // 0x0DD8(0x0130)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_2;                          // 0x0F08(0x00F8)()
	struct FAnimNode_AimOffsetSkinned             AnimGraphNode_AimOffsetSkinned;                    // 0x1000(0x0148)()
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_1;                            // 0x1150(0x0250)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt;                              // 0x13A0(0x0250)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x15F0(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x1620(0x0030)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_7;                   // 0x1650(0x0180)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x17D0(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x17F8(0x0028)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1820(0x00D0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x18F0(0x0050)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1940(0x0050)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1990(0x0050)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_11;                       // 0x19E0(0x0130)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_10;                       // 0x1B10(0x0130)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_5;             // 0x1C40(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_5;             // 0x1C68(0x0028)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_6;                   // 0x1C90(0x0180)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x1E10(0x0050)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_4;             // 0x1E60(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x1E88(0x0050)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x1ED8(0x0088)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x1F60(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x1F90(0x0030)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_5;                   // 0x1FC0(0x0180)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x2140(0x00D0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_9;                        // 0x2210(0x0130)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_4;             // 0x2340(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_8;                        // 0x2368(0x0130)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_2;            // 0x2498(0x00D8)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_3;             // 0x2570(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_3;             // 0x2598(0x0028)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_4;                   // 0x25C0(0x0180)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive_1;            // 0x2740(0x00D8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2818(0x0050)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_7;                        // 0x2868(0x0130)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x2998(0x0050)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x29E8(0x0028)()
	struct FAnimNode_ApplyMeshSpaceAdditive       AnimGraphNode_ApplyMeshSpaceAdditive;              // 0x2A10(0x00D8)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x2AE8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x2B18(0x0030)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_3;                   // 0x2B48(0x0180)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_2;                   // 0x2CC8(0x0180)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned_1;                   // 0x2E48(0x0180)()
	struct FAnimNode_SequenceSkinned              AnimGraphNode_SequenceSkinned;                     // 0x2FC8(0x0180)()
	struct FAnimNode_BlendListByInt               AnimGraphNode_BlendListByInt;                      // 0x3148(0x0050)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x3198(0x0028)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x31C0(0x0028)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x31E8(0x00D0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_2;             // 0x32B8(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_2;             // 0x32E0(0x0028)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x3308(0x00F8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x3400(0x0050)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x3450(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x3478(0x0028)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x34A0(0x0088)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x3528(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x3558(0x0030)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x3588(0x0028)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x35B0(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_6;                        // 0x35D8(0x0130)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x3708(0x0130)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x3838(0x0130)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x3968(0x0130)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x3A98(0x0130)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x3BC8(0x00F8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x3CC0(0x00F8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x3DB8(0x0050)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x3E08(0x0088)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x3E90(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x3EC0(0x0030)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x3EF0(0x0030)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x3F20(0x0130)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x4050(0x0050)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x40A0(0x0130)()
	float                                         BaseCurve;                                         // 0x41D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41D4[0x4];                                     // 0x41D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WeaponScale;                                       // 0x41D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeSum;                                           // 0x41E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spine1_Scale;                                      // 0x41E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Spine1_Rot;                                        // 0x4200(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCurveFloat*                            c_CurveBreath;                                     // 0x4218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            c_CurveBlink;                                      // 0x4220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               c_Breath_Rotation_Spine1;                          // 0x4228(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Spine2_Scale;                                      // 0x4240(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Spine2_Rot;                                        // 0x4258(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               c_Breath_Rotation_Spine2;                          // 0x4270(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               c_Breath_Rotation_Neck;                            // 0x4288(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               c_Breath_Rotation_ClavicleL;                       // 0x42A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               c_Breath_Rotation_ClavicleR;                       // 0x42B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               c_Breath_Rotation_Head;                            // 0x42D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                c_Breath_Scale_Spine1;                             // 0x42E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                c_Breath_Scale_Spine2;                             // 0x4300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                c_Breath_Scale_Neck;                               // 0x4318(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Blink_MaxRot;                                    // 0x4330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Neck_Scale;                                        // 0x4338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Neck_Rot;                                          // 0x4350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                NeckChild_Scale;                                   // 0x4368(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NeckChild_Rot;                                     // 0x4380(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               L_Clavicle_Rot;                                    // 0x4398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               R_Clavicle_Rot;                                    // 0x43B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        TimeSumBlink;                                      // 0x43C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EyeBlink;                                          // 0x43D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBlinking;                                        // 0x43E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43E9[0x7];                                     // 0x43E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        c_Blink_Time_Min;                                  // 0x43F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Blink_Time_Max;                                  // 0x43F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EyeDartTarget;                                     // 0x4400(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        c_EyeDart_Targets_L;                               // 0x4418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        c_EyeDart_Targets_C;                               // 0x4428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        c_EyeDart_Targets_R;                               // 0x4438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        c_EyeDart_ClampEyeRotation;                        // 0x4448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_EyeDart_InterpTime;                              // 0x4450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_EyeDart_Aim_Left;                                // 0x4458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_EyeDart_Aim_Right;                               // 0x4460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_EyeDart_Time_Min;                                // 0x4468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_EyeDart_Time_Max;                                // 0x4470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimTimeDuration;                                   // 0x4478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EyeDartLastTarget;                                 // 0x4480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4484[0x4];                                     // 0x4484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimYawTarget;                                      // 0x4488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYaw;                                            // 0x4490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimPitch;                                          // 0x4494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitAim;                                           // 0x4498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4499[0x7];                                     // 0x4499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeSumAim;                                        // 0x44A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Time_Min;                                    // 0x44A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Time_Max;                                    // 0x44B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Yaw_Range_Min;                               // 0x44B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Yaw_Range_Max;                               // 0x44C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Pitch_Range_Min;                             // 0x44C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Pitch_Range_Max;                             // 0x44D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimerIdleVar;                                      // 0x44D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DurationIdleVar;                                   // 0x44E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IdleFidgetSelected;                                // 0x44E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFidget;                                          // 0x44EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44ED[0x3];                                     // 0x44ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimPitchTarget;                                    // 0x44F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Yaw_Next_Min;                                // 0x44F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Yaw_Next_Max;                                // 0x4500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Pitch_Next_Min;                              // 0x4508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Aim_Pitch_Next_Max;                              // 0x4510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          c_Fidget_Enabled;                                  // 0x4518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4519[0x3];                                     // 0x4519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         c_Fidget_Count;                                    // 0x451C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Fidget_Time_Min;                                 // 0x4520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Fidget_Time_Max;                                 // 0x4528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShuffleType                                  c_Fidget_Shuffle;                                  // 0x4530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          c_Variant_Enabled;                                 // 0x4531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4532[0x6];                                     // 0x4532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        c_Variant_TriggerTime_Min;                         // 0x4538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Variant_TriggerTime_Max;                         // 0x4540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Variant_Duration_Min;                            // 0x4548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_Variant_Duration_Max;                            // 0x4550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Head_Rot;                                          // 0x4558(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         FidgetLast;                                        // 0x4570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4574[0x4];                                     // 0x4574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FidgetShuffleAll;                                  // 0x4578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        c_RootMotion_Alpha;                                // 0x4588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        c_RootMotion_PlayRate;                             // 0x4590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Condition;                                         // 0x4598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4599[0x7];                                     // 0x4599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        materialize;                                       // 0x45A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WingScale_Temp;                                    // 0x45A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          c_IntroLoop_Enabled;                               // 0x45C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C1[0x7];                                     // 0x45C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WeaponScale_Prop1;                                 // 0x45C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponScale_Prop2;                                 // 0x45D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnTable_Rot;                                     // 0x45D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop01Lock;                                        // 0x45E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop02Lock;                                        // 0x45E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop01Hide;                                        // 0x45E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop02Hide;                                        // 0x45E3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCurve;                                          // 0x45E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45E5[0x3];                                     // 0x45E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         initUpdate;                                        // 0x45E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          initPose;                                          // 0x45EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45ED[0x3];                                     // 0x45ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 CharacterSkeletalMeshComponents;                   // 0x45F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class AHWSkinnablePreviewActor*               As_HWSkinnable_Preview_Actor;                      // 0x4600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          isSkeletalMeshComponentsRetrieved;                 // 0x4608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4609[0x7];                                     // 0x4609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationCache;                                 // 0x4610(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurveTimeSkinUpdate;                               // 0x4628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RootOffset;                                        // 0x4630(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isSkinIntro;                                       // 0x4648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emote_Query;                                       // 0x4649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartAnimBlink;                                    // 0x464A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimBlinkTrigger;                                  // 0x464B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464C[0x4];                                     // 0x464C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Prop1RotOffset;                                    // 0x4650(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ABPSkinningFinished();
	void AnimBlink();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void Begin_Anim_Blink();
	void Blink();
	void BlinkInit(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BPI_AN_CanTransition(bool CanTransition);
	void BPI_AN_GenericStance(ECharGenericStance Stance_State);
	void BPI_AN_JumpEnd(bool JumpEnd);
	void BPI_AN_PassiveState(ECharPassiveState PassiveState, double PassiveValue);
	void BPI_AN_PlayRate(double PlayRate);
	void BPI_AN_RunVariant(bool Variant);
	void BPI_ANS_DisablePhysics(class FName Bone_Name, bool Turn_Off);
	void BPI_ANS_DisableTurnInPlace(bool DisableTurnInPlace);
	void BPI_ANS_EmoteQuery(bool EmoteQuery);
	void BPI_ANS_ForceFullBody(bool Fullbody, double BlendOutTime);
	void BPI_ANS_HideBlueprintVFX(bool Hide);
	void BPI_ANS_PlayRate(double PlayRate, double Duration);
	void BPI_ANS_Prop01Lock(bool Lock);
	void BPI_ANS_Prop02Lock(bool Lock);
	void BPI_ANS_ScaleCharacter(double ScaleValue);
	void BPI_ANS_ScaleFromCurve(const struct FRigVMFunction_AnimRichCurve& BoneScaleCurve, class FName Bone_Name, double Scale);
	void BPI_ANS_ScaleWeapon(double ScaleValue, int32 Weapon, bool Override);
	void BPI_ANS_ShowMesh(bool Visibility);
	void BPI_ANS_StopMotionWarping(double AlphaValue);
	void BPI_ANS_ToggleBoulder(bool Visible);
	void BPI_BellonaWeaponOverride(bool Override, ECharGenericStance OverrideStance);
	void BPI_ChildMesh_Outro(bool PlayOutro);
	void BPI_CombatStance(E_CombatState CombatState);
	void BPI_Morrigan_Fire(bool PlayFire);
	void BPI_Morrigan_PlayIntroA(bool PlayIntro);
	void BPI_Morrigan_PlayIntroB(bool PlayIntro);
	void BPI_PelvisDirectionFromVelocity(bool UsePelvisDirection, double ALPHA);
	void BPI_TailAlpha(double AlphaValue);
	void Delay_Blink(double DelayTime);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GOD_Lobby_AnimGraphNode_TransitionResult_0DD145834B48ACE5F25BBBA7A8EC32A1();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GOD_Lobby_AnimGraphNode_TransitionResult_3E3BD4CC453ADC4358167591876BAB43();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GOD_Lobby_AnimGraphNode_TransitionResult_9BD9A4CB450BEAFDEF4A5582F982B14C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GOD_Lobby_AnimGraphNode_TransitionResult_C2D0955345B11596D370A49562F2BD50();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GOD_Lobby_AnimGraphNode_TransitionResult_FE9235BF43C7818F6FECEC92D4CD8730();
	void ExecuteUbergraph_ABP_GOD_Lobby(int32 EntryPoint);
	void EyeDart();
	void EyeDartTimer();
	void FidgetTimer();
	void GetAllSkeletalMeshes();
	void GetAnimBlinkTimerStarted(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void IdleEntry(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void IntroMat(double DeltaTime);
	void IsVectorArrayMultiple(TArray<struct FVector>& Array, bool* IsEmpty);
	void NewAim(double YawIn, double PitchIn, double* Yaw, double* Pitch);
	void NewFidget();
	void SetWeaponScaleFromCurve();
	void UpdateAim(double DeltaTime);
	void UpdateAimEase();
	void UpdateAnimBlink();
	void UpdateBlink(double DeltaTime);
	void UpdateBreathWave(double DeltaTime);
	void UpdateGetEyeRot();
	void UpdateHead();
	void UpdateL_Clavicle();
	void UpdateNeck(const struct FRotator& RotIn, const struct FVector& ScaleIn, struct FRotator* RotOut, struct FVector* ScaleOut);
	void UpdateNeckChildren(const struct FRotator& RotIn, const struct FVector& ScaleIn);
	void UpdateNWings_temp(const struct FRotator& RotIn, const struct FVector& ScaleIn, struct FRotator* RotOut, struct FVector* ScaleOut);
	void UpdateR_Clavicle();
	void UpdateSkinIntro(double DeltaTime);
	void UpdateSpine1(struct FRotator* RotOut, struct FVector* ScaleOut);
	void UpdateSpine2(const struct FRotator& RotIn, const struct FVector& ScaleIn, struct FRotator* RotOut, struct FVector* ScaleOut);

	struct FGameplayTag GetSkinnedFiringMontageTag(const struct FGameplayTag& SourceIdTag, const struct FGameplayTag& OriginalFiringMontageTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GOD_Lobby_C">();
	}
	static class UABP_GOD_Lobby_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GOD_Lobby_C>();
	}
};
static_assert(alignof(UABP_GOD_Lobby_C) == 0x000010, "Wrong alignment on UABP_GOD_Lobby_C");
static_assert(sizeof(UABP_GOD_Lobby_C) == 0x004670, "Wrong size on UABP_GOD_Lobby_C");
static_assert(offsetof(UABP_GOD_Lobby_C, UberGraphFrame) == 0x000570, "Member 'UABP_GOD_Lobby_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, __AnimBlueprintMutables) == 0x000578, "Member 'UABP_GOD_Lobby_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimBlueprintExtension_PropertyAccess) == 0x000598, "Member 'UABP_GOD_Lobby_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimBlueprintExtension_Base) == 0x0005A0, "Member 'UABP_GOD_Lobby_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_7) == 0x0005A8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_6) == 0x0005D8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_5) == 0x000608, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_4) == 0x000638, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_11) == 0x000668, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_11' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_7) == 0x0007E8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_10) == 0x000810, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_10' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_6) == 0x000990, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_9) == 0x0009B8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_9' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_5) == 0x000B38, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_8) == 0x000B60, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_8' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_4) == 0x000CE0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateMachine_2) == 0x000D08, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_12) == 0x000DD8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_12' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_CopyBone_2) == 0x000F08, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_CopyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_AimOffsetSkinned) == 0x001000, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_AimOffsetSkinned' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LookAt_1) == 0x001150, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LookAt_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LookAt) == 0x0013A0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LookAt' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_3) == 0x0015F0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_2) == 0x001620, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_7) == 0x001650, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_7' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_3) == 0x0017D0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_2) == 0x0017F8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateMachine_1) == 0x001820, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequencePlayer_1) == 0x0018F0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_Slot_3) == 0x001940, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_Slot_2) == 0x001990, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_11) == 0x0019E0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_11' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_10) == 0x001B10, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_10' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace_5) == 0x001C40, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace_5) == 0x001C68, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_6) == 0x001C90, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_6' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_BlendListByBool_3) == 0x001E10, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace_4) == 0x001E60, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_BlendListByBool_2) == 0x001E88, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SaveCachedPose_2) == 0x001ED8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_6) == 0x001F60, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_5) == 0x001F90, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_5) == 0x001FC0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ApplyAdditive) == 0x002140, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_9) == 0x002210, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_9' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace_4) == 0x002340, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_8) == 0x002368, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_8' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ApplyMeshSpaceAdditive_2) == 0x002498, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ApplyMeshSpaceAdditive_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace_3) == 0x002570, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace_3) == 0x002598, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_4) == 0x0025C0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ApplyMeshSpaceAdditive_1) == 0x002740, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ApplyMeshSpaceAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequencePlayer) == 0x002818, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_7) == 0x002868, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_7' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_Slot_1) == 0x002998, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_Root) == 0x0029E8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ApplyMeshSpaceAdditive) == 0x002A10, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ApplyMeshSpaceAdditive' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult_1) == 0x002AE8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_TransitionResult) == 0x002B18, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_3) == 0x002B48, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_2) == 0x002CC8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned_1) == 0x002E48, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SequenceSkinned) == 0x002FC8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SequenceSkinned' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_BlendListByInt) == 0x003148, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_BlendListByInt' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult_1) == 0x003198, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateResult) == 0x0031C0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_StateMachine) == 0x0031E8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace_2) == 0x0032B8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace_2) == 0x0032E0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_CopyBone_1) == 0x003308, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_BlendListByBool_1) == 0x003400, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x003450, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ComponentToLocalSpace) == 0x003478, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SaveCachedPose_1) == 0x0034A0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_4) == 0x003528, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_3) == 0x003558, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace_1) == 0x003588, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LocalToComponentSpace) == 0x0035B0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_6) == 0x0035D8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_6' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_5) == 0x003708, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_4) == 0x003838, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_3) == 0x003968, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_2) == 0x003A98, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_CopyBone) == 0x003BC8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_LayeredBoneBlend) == 0x003CC0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_Slot) == 0x003DB8, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_SaveCachedPose) == 0x003E08, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_2) == 0x003E90, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose_1) == 0x003EC0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_UseCachedPose) == 0x003EF0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone_1) == 0x003F20, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_BlendListByBool) == 0x004050, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimGraphNode_ModifyBone) == 0x0040A0, "Member 'UABP_GOD_Lobby_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, BaseCurve) == 0x0041D0, "Member 'UABP_GOD_Lobby_C::BaseCurve' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, WeaponScale) == 0x0041D8, "Member 'UABP_GOD_Lobby_C::WeaponScale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, TimeSum) == 0x0041E0, "Member 'UABP_GOD_Lobby_C::TimeSum' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Spine1_Scale) == 0x0041E8, "Member 'UABP_GOD_Lobby_C::Spine1_Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Spine1_Rot) == 0x004200, "Member 'UABP_GOD_Lobby_C::Spine1_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_CurveBreath) == 0x004218, "Member 'UABP_GOD_Lobby_C::c_CurveBreath' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_CurveBlink) == 0x004220, "Member 'UABP_GOD_Lobby_C::c_CurveBlink' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_Spine1) == 0x004228, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_Spine1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Spine2_Scale) == 0x004240, "Member 'UABP_GOD_Lobby_C::Spine2_Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Spine2_Rot) == 0x004258, "Member 'UABP_GOD_Lobby_C::Spine2_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_Spine2) == 0x004270, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_Spine2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_Neck) == 0x004288, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_Neck' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_ClavicleL) == 0x0042A0, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_ClavicleL' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_ClavicleR) == 0x0042B8, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_ClavicleR' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Rotation_Head) == 0x0042D0, "Member 'UABP_GOD_Lobby_C::c_Breath_Rotation_Head' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Scale_Spine1) == 0x0042E8, "Member 'UABP_GOD_Lobby_C::c_Breath_Scale_Spine1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Scale_Spine2) == 0x004300, "Member 'UABP_GOD_Lobby_C::c_Breath_Scale_Spine2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Breath_Scale_Neck) == 0x004318, "Member 'UABP_GOD_Lobby_C::c_Breath_Scale_Neck' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Blink_MaxRot) == 0x004330, "Member 'UABP_GOD_Lobby_C::c_Blink_MaxRot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Neck_Scale) == 0x004338, "Member 'UABP_GOD_Lobby_C::Neck_Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Neck_Rot) == 0x004350, "Member 'UABP_GOD_Lobby_C::Neck_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, NeckChild_Scale) == 0x004368, "Member 'UABP_GOD_Lobby_C::NeckChild_Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, NeckChild_Rot) == 0x004380, "Member 'UABP_GOD_Lobby_C::NeckChild_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, L_Clavicle_Rot) == 0x004398, "Member 'UABP_GOD_Lobby_C::L_Clavicle_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, R_Clavicle_Rot) == 0x0043B0, "Member 'UABP_GOD_Lobby_C::R_Clavicle_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, TimeSumBlink) == 0x0043C8, "Member 'UABP_GOD_Lobby_C::TimeSumBlink' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, EyeBlink) == 0x0043D0, "Member 'UABP_GOD_Lobby_C::EyeBlink' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, IsBlinking) == 0x0043E8, "Member 'UABP_GOD_Lobby_C::IsBlinking' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Blink_Time_Min) == 0x0043F0, "Member 'UABP_GOD_Lobby_C::c_Blink_Time_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Blink_Time_Max) == 0x0043F8, "Member 'UABP_GOD_Lobby_C::c_Blink_Time_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, EyeDartTarget) == 0x004400, "Member 'UABP_GOD_Lobby_C::EyeDartTarget' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Targets_L) == 0x004418, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Targets_L' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Targets_C) == 0x004428, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Targets_C' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Targets_R) == 0x004438, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Targets_R' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_ClampEyeRotation) == 0x004448, "Member 'UABP_GOD_Lobby_C::c_EyeDart_ClampEyeRotation' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_InterpTime) == 0x004450, "Member 'UABP_GOD_Lobby_C::c_EyeDart_InterpTime' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Aim_Left) == 0x004458, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Aim_Left' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Aim_Right) == 0x004460, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Aim_Right' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Time_Min) == 0x004468, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Time_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_EyeDart_Time_Max) == 0x004470, "Member 'UABP_GOD_Lobby_C::c_EyeDart_Time_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AimTimeDuration) == 0x004478, "Member 'UABP_GOD_Lobby_C::AimTimeDuration' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, EyeDartLastTarget) == 0x004480, "Member 'UABP_GOD_Lobby_C::EyeDartLastTarget' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AimYawTarget) == 0x004488, "Member 'UABP_GOD_Lobby_C::AimYawTarget' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AimYaw) == 0x004490, "Member 'UABP_GOD_Lobby_C::AimYaw' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AimPitch) == 0x004494, "Member 'UABP_GOD_Lobby_C::AimPitch' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, InitAim) == 0x004498, "Member 'UABP_GOD_Lobby_C::InitAim' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, TimeSumAim) == 0x0044A0, "Member 'UABP_GOD_Lobby_C::TimeSumAim' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Time_Min) == 0x0044A8, "Member 'UABP_GOD_Lobby_C::c_Aim_Time_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Time_Max) == 0x0044B0, "Member 'UABP_GOD_Lobby_C::c_Aim_Time_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Yaw_Range_Min) == 0x0044B8, "Member 'UABP_GOD_Lobby_C::c_Aim_Yaw_Range_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Yaw_Range_Max) == 0x0044C0, "Member 'UABP_GOD_Lobby_C::c_Aim_Yaw_Range_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Pitch_Range_Min) == 0x0044C8, "Member 'UABP_GOD_Lobby_C::c_Aim_Pitch_Range_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Pitch_Range_Max) == 0x0044D0, "Member 'UABP_GOD_Lobby_C::c_Aim_Pitch_Range_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, TimerIdleVar) == 0x0044D8, "Member 'UABP_GOD_Lobby_C::TimerIdleVar' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, DurationIdleVar) == 0x0044E0, "Member 'UABP_GOD_Lobby_C::DurationIdleVar' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, IdleFidgetSelected) == 0x0044E8, "Member 'UABP_GOD_Lobby_C::IdleFidgetSelected' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, IsFidget) == 0x0044EC, "Member 'UABP_GOD_Lobby_C::IsFidget' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AimPitchTarget) == 0x0044F0, "Member 'UABP_GOD_Lobby_C::AimPitchTarget' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Yaw_Next_Min) == 0x0044F8, "Member 'UABP_GOD_Lobby_C::c_Aim_Yaw_Next_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Yaw_Next_Max) == 0x004500, "Member 'UABP_GOD_Lobby_C::c_Aim_Yaw_Next_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Pitch_Next_Min) == 0x004508, "Member 'UABP_GOD_Lobby_C::c_Aim_Pitch_Next_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Aim_Pitch_Next_Max) == 0x004510, "Member 'UABP_GOD_Lobby_C::c_Aim_Pitch_Next_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Fidget_Enabled) == 0x004518, "Member 'UABP_GOD_Lobby_C::c_Fidget_Enabled' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Fidget_Count) == 0x00451C, "Member 'UABP_GOD_Lobby_C::c_Fidget_Count' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Fidget_Time_Min) == 0x004520, "Member 'UABP_GOD_Lobby_C::c_Fidget_Time_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Fidget_Time_Max) == 0x004528, "Member 'UABP_GOD_Lobby_C::c_Fidget_Time_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Fidget_Shuffle) == 0x004530, "Member 'UABP_GOD_Lobby_C::c_Fidget_Shuffle' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Variant_Enabled) == 0x004531, "Member 'UABP_GOD_Lobby_C::c_Variant_Enabled' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Variant_TriggerTime_Min) == 0x004538, "Member 'UABP_GOD_Lobby_C::c_Variant_TriggerTime_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Variant_TriggerTime_Max) == 0x004540, "Member 'UABP_GOD_Lobby_C::c_Variant_TriggerTime_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Variant_Duration_Min) == 0x004548, "Member 'UABP_GOD_Lobby_C::c_Variant_Duration_Min' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_Variant_Duration_Max) == 0x004550, "Member 'UABP_GOD_Lobby_C::c_Variant_Duration_Max' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Head_Rot) == 0x004558, "Member 'UABP_GOD_Lobby_C::Head_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, FidgetLast) == 0x004570, "Member 'UABP_GOD_Lobby_C::FidgetLast' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, FidgetShuffleAll) == 0x004578, "Member 'UABP_GOD_Lobby_C::FidgetShuffleAll' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_RootMotion_Alpha) == 0x004588, "Member 'UABP_GOD_Lobby_C::c_RootMotion_Alpha' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_RootMotion_PlayRate) == 0x004590, "Member 'UABP_GOD_Lobby_C::c_RootMotion_PlayRate' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Condition) == 0x004598, "Member 'UABP_GOD_Lobby_C::Condition' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, materialize) == 0x0045A0, "Member 'UABP_GOD_Lobby_C::materialize' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, WingScale_Temp) == 0x0045A8, "Member 'UABP_GOD_Lobby_C::WingScale_Temp' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, c_IntroLoop_Enabled) == 0x0045C0, "Member 'UABP_GOD_Lobby_C::c_IntroLoop_Enabled' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, WeaponScale_Prop1) == 0x0045C8, "Member 'UABP_GOD_Lobby_C::WeaponScale_Prop1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, WeaponScale_Prop2) == 0x0045D0, "Member 'UABP_GOD_Lobby_C::WeaponScale_Prop2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, TurnTable_Rot) == 0x0045D8, "Member 'UABP_GOD_Lobby_C::TurnTable_Rot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Prop01Lock) == 0x0045E0, "Member 'UABP_GOD_Lobby_C::Prop01Lock' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Prop02Lock) == 0x0045E1, "Member 'UABP_GOD_Lobby_C::Prop02Lock' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Prop01Hide) == 0x0045E2, "Member 'UABP_GOD_Lobby_C::Prop01Hide' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Prop02Hide) == 0x0045E3, "Member 'UABP_GOD_Lobby_C::Prop02Hide' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, HasCurve) == 0x0045E4, "Member 'UABP_GOD_Lobby_C::HasCurve' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, initUpdate) == 0x0045E8, "Member 'UABP_GOD_Lobby_C::initUpdate' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, initPose) == 0x0045EC, "Member 'UABP_GOD_Lobby_C::initPose' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, CharacterSkeletalMeshComponents) == 0x0045F0, "Member 'UABP_GOD_Lobby_C::CharacterSkeletalMeshComponents' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, As_HWSkinnable_Preview_Actor) == 0x004600, "Member 'UABP_GOD_Lobby_C::As_HWSkinnable_Preview_Actor' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, isSkeletalMeshComponentsRetrieved) == 0x004608, "Member 'UABP_GOD_Lobby_C::isSkeletalMeshComponentsRetrieved' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, InitLocationCache) == 0x004610, "Member 'UABP_GOD_Lobby_C::InitLocationCache' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, CurveTimeSkinUpdate) == 0x004628, "Member 'UABP_GOD_Lobby_C::CurveTimeSkinUpdate' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, RootOffset) == 0x004630, "Member 'UABP_GOD_Lobby_C::RootOffset' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, isSkinIntro) == 0x004648, "Member 'UABP_GOD_Lobby_C::isSkinIntro' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Emote_Query) == 0x004649, "Member 'UABP_GOD_Lobby_C::Emote_Query' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, StartAnimBlink) == 0x00464A, "Member 'UABP_GOD_Lobby_C::StartAnimBlink' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, AnimBlinkTrigger) == 0x00464B, "Member 'UABP_GOD_Lobby_C::AnimBlinkTrigger' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Lobby_C, Prop1RotOffset) == 0x004650, "Member 'UABP_GOD_Lobby_C::Prop1RotOffset' has a wrong offset!");

}

