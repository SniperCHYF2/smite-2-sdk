#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_Waypoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"
#include "Hemingway_classes.hpp"
#include "E_NPE_WaypointType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_Waypoint.BP_NPE_Waypoint_C
// 0x00E8 (0x0390 - 0x02A8)
class ABP_NPE_Waypoint_C : public AHWSimpleTeamActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_NPE_WaypointPath_C*                 BP_NPE_WaypointPath;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWNiagaraComponent*                    NS_Splash;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWNiagaraComponent*                    NS_Persistent;                                     // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWDisplayInfoComponent*                HWDisplayInfo;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsActive, bool IsHighlighted, ECharacterRole Role, bool IsHostile)> OnWaypointStateChange; // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsHighlighted;                                     // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharacterRole                                TEMPAssociatedRole;                                // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECharacterRole>                        AssociatedRoles;                                   // 0x02F8(0x0010)(Edit, BlueprintVisible)
	bool                                          IsHostile;                                         // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Label;                                             // 0x0310(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FTimerHandle                           BumpTimer;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double TimeRemaining, double StartTime)> OnWaypointTimerTick;      // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnableTimer;                                       // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimerTargetMatchTime;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x0350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeRemaining;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NPE_WaypointType                            WaypointType;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnWaypointTimerFinished;                           // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         TimerType;                                         // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartTime;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableWaypointPath;                                // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x3];                                      // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team;                                              // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DisableWaypoint();
	void EnableWaypoint();
	void ExecuteUbergraph_BP_NPE_Waypoint(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RestartTimer(double NewTargetMatchTime);
	void SetWaypointRole(ECharacterRole NewRole);
	void TickTimer();
	void ToggleWaypoint();
	void ToggleWaypointHighlight();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_Waypoint_C">();
	}
	static class ABP_NPE_Waypoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPE_Waypoint_C>();
	}
};
static_assert(alignof(ABP_NPE_Waypoint_C) == 0x000008, "Wrong alignment on ABP_NPE_Waypoint_C");
static_assert(sizeof(ABP_NPE_Waypoint_C) == 0x000390, "Wrong size on ABP_NPE_Waypoint_C");
static_assert(offsetof(ABP_NPE_Waypoint_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_NPE_Waypoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, BP_NPE_WaypointPath) == 0x0002B0, "Member 'ABP_NPE_Waypoint_C::BP_NPE_WaypointPath' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, NS_Splash) == 0x0002B8, "Member 'ABP_NPE_Waypoint_C::NS_Splash' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, NS_Persistent) == 0x0002C0, "Member 'ABP_NPE_Waypoint_C::NS_Persistent' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, Billboard) == 0x0002C8, "Member 'ABP_NPE_Waypoint_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, HWDisplayInfo) == 0x0002D0, "Member 'ABP_NPE_Waypoint_C::HWDisplayInfo' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, Active) == 0x0002D8, "Member 'ABP_NPE_Waypoint_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, OnWaypointStateChange) == 0x0002E0, "Member 'ABP_NPE_Waypoint_C::OnWaypointStateChange' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, IsHighlighted) == 0x0002F0, "Member 'ABP_NPE_Waypoint_C::IsHighlighted' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, TEMPAssociatedRole) == 0x0002F1, "Member 'ABP_NPE_Waypoint_C::TEMPAssociatedRole' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, AssociatedRoles) == 0x0002F8, "Member 'ABP_NPE_Waypoint_C::AssociatedRoles' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, IsHostile) == 0x000308, "Member 'ABP_NPE_Waypoint_C::IsHostile' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, Label) == 0x000310, "Member 'ABP_NPE_Waypoint_C::Label' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, BumpTimer) == 0x000328, "Member 'ABP_NPE_Waypoint_C::BumpTimer' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, OnWaypointTimerTick) == 0x000330, "Member 'ABP_NPE_Waypoint_C::OnWaypointTimerTick' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, EnableTimer) == 0x000340, "Member 'ABP_NPE_Waypoint_C::EnableTimer' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, TimerTargetMatchTime) == 0x000348, "Member 'ABP_NPE_Waypoint_C::TimerTargetMatchTime' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, Timer) == 0x000350, "Member 'ABP_NPE_Waypoint_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, TimeRemaining) == 0x000358, "Member 'ABP_NPE_Waypoint_C::TimeRemaining' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, WaypointType) == 0x000360, "Member 'ABP_NPE_Waypoint_C::WaypointType' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, OnWaypointTimerFinished) == 0x000368, "Member 'ABP_NPE_Waypoint_C::OnWaypointTimerFinished' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, TimerType) == 0x000378, "Member 'ABP_NPE_Waypoint_C::TimerType' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, StartTime) == 0x000380, "Member 'ABP_NPE_Waypoint_C::StartTime' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, EnableWaypointPath) == 0x000388, "Member 'ABP_NPE_Waypoint_C::EnableWaypointPath' has a wrong offset!");
static_assert(offsetof(ABP_NPE_Waypoint_C, Team) == 0x00038C, "Member 'ABP_NPE_Waypoint_C::Team' has a wrong offset!");

}

