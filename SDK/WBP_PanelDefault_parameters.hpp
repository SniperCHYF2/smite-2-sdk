#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PanelDefault

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_PanelDefault.WBP_PanelDefault_C.ExecuteUbergraph_WBP_PanelDefault
// 0x0008 (0x0008 - 0x0000)
struct WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault) == 0x000004, "Wrong alignment on WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault");
static_assert(sizeof(WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault) == 0x000008, "Wrong size on WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault");
static_assert(offsetof(WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault, EntryPoint) == 0x000000, "Member 'WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_PanelDefault_C_ExecuteUbergraph_WBP_PanelDefault::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_PanelDefault.WBP_PanelDefault_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_PanelDefault_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PanelDefault_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_PanelDefault_C_PreConstruct");
static_assert(sizeof(WBP_PanelDefault_C_PreConstruct) == 0x000001, "Wrong size on WBP_PanelDefault_C_PreConstruct");
static_assert(offsetof(WBP_PanelDefault_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_PanelDefault_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_PanelDefault.WBP_PanelDefault_C.SetContentPadding
// 0x0018 (0x0018 - 0x0000)
struct WBP_PanelDefault_C_SetContentPadding final
{
public:
	struct FMargin                                ContentPadding_0;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PanelDefault_C_SetContentPadding) == 0x000008, "Wrong alignment on WBP_PanelDefault_C_SetContentPadding");
static_assert(sizeof(WBP_PanelDefault_C_SetContentPadding) == 0x000018, "Wrong size on WBP_PanelDefault_C_SetContentPadding");
static_assert(offsetof(WBP_PanelDefault_C_SetContentPadding, ContentPadding_0) == 0x000000, "Member 'WBP_PanelDefault_C_SetContentPadding::ContentPadding_0' has a wrong offset!");
static_assert(offsetof(WBP_PanelDefault_C_SetContentPadding, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000010, "Member 'WBP_PanelDefault_C_SetContentPadding::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function WBP_PanelDefault.WBP_PanelDefault_C.SetPanelColor
// 0x0010 (0x0010 - 0x0000)
struct WBP_PanelDefault_C_SetPanelColor final
{
public:
	struct FLinearColor                           PanelColor_0;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PanelDefault_C_SetPanelColor) == 0x000004, "Wrong alignment on WBP_PanelDefault_C_SetPanelColor");
static_assert(sizeof(WBP_PanelDefault_C_SetPanelColor) == 0x000010, "Wrong size on WBP_PanelDefault_C_SetPanelColor");
static_assert(offsetof(WBP_PanelDefault_C_SetPanelColor, PanelColor_0) == 0x000000, "Member 'WBP_PanelDefault_C_SetPanelColor::PanelColor_0' has a wrong offset!");

}

