#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPE_TutorialQuestTracker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_NPE_QuestConfig_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_NPE_Quest_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NPE_TutorialQuestTracker.BP_NPE_TutorialQuestTracker_C
// 0x0128 (0x03C0 - 0x0298)
class ABP_NPE_TutorialQuestTracker_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_NPE_QuestConfig>             QuestConfigs;                                      // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(TArray<struct FS_NPE_QuestConfig>& QuestConfigsList)> OnNPEQuestTracker_QuestConfigsUpdated; // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<struct FGameplayTag, struct FS_NPE_Quest> Quests;                                           // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const struct FGameplayTag& QuestTag)> OnNPEQuestTracker_QuestCompleted; // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FGameplayTag& QuestTag, const struct FS_NPE_Quest& QuestData)> OnNPEQuestTracker_QuestStarted; // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FGameplayTag& QuestTag, const struct FGameplayTag& ObjectiveTag, int32 NewProgress)> OnNPEQuestTracker_QuestProgressed; // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnNPEQuestTrackerInitialized;                      // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<struct FGameplayTag, int32>              ObjectiveProgress;                                 // 0x0358(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Subtractive_;                                      // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& QuestTag, const struct FGameplayTag& ObjectiveTag)> OnNPEQuestTracker_QuestObjectiveCompleted; // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AreAllObjectivesCompleted(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, bool* bIsComplete);
	void BeginNPEQuest(const struct FGameplayTag& QuestTag);
	void CompleteNPEQuest(const struct FGameplayTag& QuestTag);
	void CompleteNPEQuestObjective(const struct FGameplayTag& ObjectiveTag);
	void ExecuteUbergraph_BP_NPE_TutorialQuestTracker(int32 EntryPoint);
	void FindQuestByObjective(const struct FGameplayTag& ObjectiveTag, struct FGameplayTag* QuestTag);
	void GetNPEQuestGoal(const struct FGameplayTag& QuestTag, int32* QuestGoal);
	void GetObjective(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, const struct FGameplayTag& ObjectiveTag, struct FS_NPE_Quest_SubObjective* bIsComplete);
	void GetObjectiveGoal(const struct FGameplayTag& ObjectiveTag, int32* Goal);
	void GetQuestObjectiveTags(const struct FGameplayTag& QuestTag, struct FGameplayTagContainer* ObjectiveTags);
	void GiveNPEQuestProgress(const struct FGameplayTag& ObjectiveTag, int32 ProgressIncrement);
	void IncrementNPEQuestProgress(const struct FGameplayTag& QuestTag, int32 Increment);
	void IsObjectiveCompleted(TArray<struct FS_NPE_Quest_SubObjective>& Objectives, const struct FGameplayTag& ObjectiveTag, bool* bIsComplete);
	void ReceiveBeginPlay();
	void SetNewNPEQuestList(TArray<struct FS_NPE_QuestConfig>& QuestList);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NPE_TutorialQuestTracker_C">();
	}
	static class ABP_NPE_TutorialQuestTracker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NPE_TutorialQuestTracker_C>();
	}
};
static_assert(alignof(ABP_NPE_TutorialQuestTracker_C) == 0x000008, "Wrong alignment on ABP_NPE_TutorialQuestTracker_C");
static_assert(sizeof(ABP_NPE_TutorialQuestTracker_C) == 0x0003C0, "Wrong size on ABP_NPE_TutorialQuestTracker_C");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, UberGraphFrame) == 0x000298, "Member 'ABP_NPE_TutorialQuestTracker_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_NPE_TutorialQuestTracker_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, QuestConfigs) == 0x0002A8, "Member 'ABP_NPE_TutorialQuestTracker_C::QuestConfigs' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTracker_QuestConfigsUpdated) == 0x0002B8, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTracker_QuestConfigsUpdated' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, Quests) == 0x0002C8, "Member 'ABP_NPE_TutorialQuestTracker_C::Quests' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTracker_QuestCompleted) == 0x000318, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTracker_QuestCompleted' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTracker_QuestStarted) == 0x000328, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTracker_QuestStarted' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTracker_QuestProgressed) == 0x000338, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTracker_QuestProgressed' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTrackerInitialized) == 0x000348, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTrackerInitialized' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, ObjectiveProgress) == 0x000358, "Member 'ABP_NPE_TutorialQuestTracker_C::ObjectiveProgress' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, Subtractive_) == 0x0003A8, "Member 'ABP_NPE_TutorialQuestTracker_C::Subtractive_' has a wrong offset!");
static_assert(offsetof(ABP_NPE_TutorialQuestTracker_C, OnNPEQuestTracker_QuestObjectiveCompleted) == 0x0003B0, "Member 'ABP_NPE_TutorialQuestTracker_C::OnNPEQuestTracker_QuestObjectiveCompleted' has a wrong offset!");

}

