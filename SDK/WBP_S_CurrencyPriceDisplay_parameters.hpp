#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_S_CurrencyPriceDisplay

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.ExecuteUbergraph_WBP_S_CurrencyPriceDisplay
// 0x0018 (0x0018 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay) == 0x000018, "Wrong size on WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, EntryPoint) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, Temp_bool_Variable) == 0x000004, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, Temp_byte_Variable) == 0x000005, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, Temp_byte_Variable_1) == 0x000006, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, K2Node_Event_IsDesignTime) == 0x000007, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay, K2Node_Select_Default) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_ExecuteUbergraph_WBP_S_CurrencyPriceDisplay::K2Node_Select_Default' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_PreConstruct");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_PreConstruct) == 0x000001, "Wrong size on WBP_S_CurrencyPriceDisplay_C_PreConstruct");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.SetPriceText
// 0x0004 (0x0004 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_SetPriceText final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_SetPriceText) == 0x000004, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_SetPriceText");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_SetPriceText) == 0x000004, "Wrong size on WBP_S_CurrencyPriceDisplay_C_SetPriceText");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_SetPriceText, Index_0) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_SetPriceText::Index_0' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.UpdateSaleState
// 0x0028 (0x0028 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_UpdateSaleState final
{
public:
	bool                                          bIsOnSale;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCurrencies;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_UpdateSaleState");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState) == 0x000028, "Wrong size on WBP_S_CurrencyPriceDisplay_C_UpdateSaleState");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, bIsOnSale) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::bIsOnSale' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, NumCurrencies) == 0x000004, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::NumCurrencies' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_bool_Variable) == 0x000008, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_byte_Variable) == 0x000009, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_byte_Variable_1) == 0x00000A, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_bool_Variable_1) == 0x00000B, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_byte_Variable_2) == 0x00000C, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, Temp_byte_Variable_3) == 0x00000D, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, K2Node_Select_Default) == 0x00000E, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, CallFunc_AddChild_ReturnValue) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000018, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, CallFunc_Greater_IntInt_ReturnValue) == 0x000020, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_UpdateSaleState, K2Node_Select_Default_1) == 0x000021, "Member 'WBP_S_CurrencyPriceDisplay_C_UpdateSaleState::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.GetCurrencyDisplaySaleWidgets
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets final
{
public:
	TArray<class UHWCurrencyDisplayWidget*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference)
	TArray<class UHWCurrencyDisplayWidget*>       K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets) == 0x000020, "Wrong size on WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets, ReturnValue) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplaySaleWidgets::K2Node_MakeArray_Array' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.GetCurrencyDisplayWidgets
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets final
{
public:
	TArray<class UHWCurrencyDisplayWidget*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference)
	TArray<class UHWCurrencyDisplayWidget*>       K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets) == 0x000020, "Wrong size on WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets, ReturnValue) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_GetCurrencyDisplayWidgets::K2Node_MakeArray_Array' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.GetDividerSaleWidgets
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference)
	TArray<class UWidget*>                        K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets) == 0x000020, "Wrong size on WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets, ReturnValue) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_GetDividerSaleWidgets::K2Node_MakeArray_Array' has a wrong offset!");

// Function WBP_S_CurrencyPriceDisplay.WBP_S_CurrencyPriceDisplay_C.GetDividerWidgets
// 0x0020 (0x0020 - 0x0000)
struct WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference)
	TArray<class UWidget*>                        K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets) == 0x000008, "Wrong alignment on WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets");
static_assert(sizeof(WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets) == 0x000020, "Wrong size on WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets, ReturnValue) == 0x000000, "Member 'WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'WBP_S_CurrencyPriceDisplay_C_GetDividerWidgets::K2Node_MakeArray_Array' has a wrong offset!");

}

