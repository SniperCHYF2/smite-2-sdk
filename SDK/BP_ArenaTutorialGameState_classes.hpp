#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArenaTutorialGameState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BP_ArenaGameState_classes.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ArenaTutorialGameState.BP_ArenaTutorialGameState_C
// 0x0048 (0x0A40 - 0x09F8)
class ABP_ArenaTutorialGameState_C final : public ABP_ArenaGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ArenaTutorialGameState_C;        // 0x09F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_NPE_GuideComponent_C*               BP_NPE_GuideComponent;                             // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NPE_Stage_C*>                NPEStages;                                         // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_NPE_Guide_C*                        NPEGuide;                                          // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  AIDirectives;                                      // 0x0A20(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ArenaTutorialGameState(int32 EntryPoint);
	void GetActiveNPEStage(struct FGameplayTag* ActiveStageTag);
	void GetAssociatedRoles(TArray<ECharacterRole>* Roles);
	void GetNPEAIDirectives(struct FGameplayTagContainer* AIDirectives_0);
	void GetNPEGuide(class ABP_NPE_Guide_C** GuideActor);
	void GetNPEStages(TArray<class ABP_NPE_Stage_C*>* Stages);
	void GetObjectiveTimeRemaining(double* TimeRemaining);
	void NPEGuideStageActivation();
	void ReceiveBeginPlay();
	void SetActiveNPEStage(const struct FGameplayTag& ActiveStage);
	void SetNPEAIDirectives(const struct FGameplayTag& NewAIDirective, bool ClearPreviousDirectives);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ArenaTutorialGameState_C">();
	}
	static class ABP_ArenaTutorialGameState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ArenaTutorialGameState_C>();
	}
};
static_assert(alignof(ABP_ArenaTutorialGameState_C) == 0x000008, "Wrong alignment on ABP_ArenaTutorialGameState_C");
static_assert(sizeof(ABP_ArenaTutorialGameState_C) == 0x000A40, "Wrong size on ABP_ArenaTutorialGameState_C");
static_assert(offsetof(ABP_ArenaTutorialGameState_C, UberGraphFrame_BP_ArenaTutorialGameState_C) == 0x0009F8, "Member 'ABP_ArenaTutorialGameState_C::UberGraphFrame_BP_ArenaTutorialGameState_C' has a wrong offset!");
static_assert(offsetof(ABP_ArenaTutorialGameState_C, BP_NPE_GuideComponent) == 0x000A00, "Member 'ABP_ArenaTutorialGameState_C::BP_NPE_GuideComponent' has a wrong offset!");
static_assert(offsetof(ABP_ArenaTutorialGameState_C, NPEStages) == 0x000A08, "Member 'ABP_ArenaTutorialGameState_C::NPEStages' has a wrong offset!");
static_assert(offsetof(ABP_ArenaTutorialGameState_C, NPEGuide) == 0x000A18, "Member 'ABP_ArenaTutorialGameState_C::NPEGuide' has a wrong offset!");
static_assert(offsetof(ABP_ArenaTutorialGameState_C, AIDirectives) == 0x000A20, "Member 'ABP_ArenaTutorialGameState_C::AIDirectives' has a wrong offset!");

}

