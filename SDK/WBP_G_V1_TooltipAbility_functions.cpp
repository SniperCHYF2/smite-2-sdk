#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V1_TooltipAbility

#include "Basic.hpp"

#include "WBP_G_V1_TooltipAbility_classes.hpp"
#include "WBP_G_V1_TooltipAbility_parameters.hpp"


namespace SDK
{

// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.AddedDescriptionLine
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHWTooltipWidget_AbilityDescription*AddedLine                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipAbility_C::AddedDescriptionLine(class UHWTooltipWidget_AbilityDescription* AddedLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "AddedDescriptionLine");

	Params::WBP_G_V1_TooltipAbility_C_AddedDescriptionLine Parms{};

	Parms.AddedLine = AddedLine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.AddedDetailLine
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHWTooltipWidget_AbilityDetail*   AddedLine                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipAbility_C::AddedDetailLine(class UHWTooltipWidget_AbilityDetail* AddedLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "AddedDetailLine");

	Params::WBP_G_V1_TooltipAbility_C_AddedDetailLine Parms{};

	Parms.AddedLine = AddedLine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.AddedDividerLine
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHWWidget*                        AddedLine                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipAbility_C::AddedDividerLine(class UHWWidget* AddedLine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "AddedDividerLine");

	Params::WBP_G_V1_TooltipAbility_C_AddedDividerLine Parms{};

	Parms.AddedLine = AddedLine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.DisplayIcon
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TSoftObjectPtr<class UTexture2D>& Icon                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)

void UWBP_G_V1_TooltipAbility_C::DisplayIcon(const TSoftObjectPtr<class UTexture2D>& Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "DisplayIcon");

	Params::WBP_G_V1_TooltipAbility_C_DisplayIcon Parms{};

	Parms.Icon = Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.DisplayRange
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_G_V1_TooltipAbility_C::DisplayRange(float Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "DisplayRange");

	Params::WBP_G_V1_TooltipAbility_C_DisplayRange Parms{};

	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_V1_TooltipAbility.WBP_G_V1_TooltipAbility_C.DisplayTitle
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_G_V1_TooltipAbility_C::DisplayTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_V1_TooltipAbility_C", "DisplayTitle");

	Params::WBP_G_V1_TooltipAbility_C_DisplayTitle Parms{};

	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}

}

