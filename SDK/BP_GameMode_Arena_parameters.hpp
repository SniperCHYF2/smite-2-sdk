#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_Arena

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_GameMode_Arena.BP_GameMode_Arena_C.ExecuteUbergraph_BP_GameMode_Arena
// 0x0010 (0x0010 - 0x0000)
struct BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_MaxTickets;                           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Team;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Tickets;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena) == 0x000004, "Wrong alignment on BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena");
static_assert(sizeof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena) == 0x000010, "Wrong size on BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena");
static_assert(offsetof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena, EntryPoint) == 0x000000, "Member 'BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena, K2Node_Event_MaxTickets) == 0x000004, "Member 'BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena::K2Node_Event_MaxTickets' has a wrong offset!");
static_assert(offsetof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena, K2Node_Event_Team) == 0x000008, "Member 'BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena::K2Node_Event_Team' has a wrong offset!");
static_assert(offsetof(BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena, K2Node_Event_Tickets) == 0x00000C, "Member 'BP_GameMode_Arena_C_ExecuteUbergraph_BP_GameMode_Arena::K2Node_Event_Tickets' has a wrong offset!");

// Function BP_GameMode_Arena.BP_GameMode_Arena_C.SetTicketMaximum
// 0x0004 (0x0004 - 0x0000)
struct BP_GameMode_Arena_C_SetTicketMaximum final
{
public:
	int32                                         MaxTickets;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameMode_Arena_C_SetTicketMaximum) == 0x000004, "Wrong alignment on BP_GameMode_Arena_C_SetTicketMaximum");
static_assert(sizeof(BP_GameMode_Arena_C_SetTicketMaximum) == 0x000004, "Wrong size on BP_GameMode_Arena_C_SetTicketMaximum");
static_assert(offsetof(BP_GameMode_Arena_C_SetTicketMaximum, MaxTickets) == 0x000000, "Member 'BP_GameMode_Arena_C_SetTicketMaximum::MaxTickets' has a wrong offset!");

// Function BP_GameMode_Arena.BP_GameMode_Arena_C.UpdateTicketCount
// 0x0008 (0x0008 - 0x0000)
struct BP_GameMode_Arena_C_UpdateTicketCount final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Tickets;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameMode_Arena_C_UpdateTicketCount) == 0x000004, "Wrong alignment on BP_GameMode_Arena_C_UpdateTicketCount");
static_assert(sizeof(BP_GameMode_Arena_C_UpdateTicketCount) == 0x000008, "Wrong size on BP_GameMode_Arena_C_UpdateTicketCount");
static_assert(offsetof(BP_GameMode_Arena_C_UpdateTicketCount, Team) == 0x000000, "Member 'BP_GameMode_Arena_C_UpdateTicketCount::Team' has a wrong offset!");
static_assert(offsetof(BP_GameMode_Arena_C_UpdateTicketCount, Tickets) == 0x000004, "Member 'BP_GameMode_Arena_C_UpdateTicketCount::Tickets' has a wrong offset!");

}

