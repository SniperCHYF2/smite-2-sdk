#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_Prototype_Tutorial_ProgressTracker_Item

#include "Basic.hpp"

#include "WBP_G_Prototype_Tutorial_ProgressTracker_Item_classes.hpp"
#include "WBP_G_Prototype_Tutorial_ProgressTracker_Item_parameters.hpp"


namespace SDK
{

// Function WBP_G_Prototype_Tutorial_ProgressTracker_Item.WBP_G_Prototype_Tutorial_ProgressTracker_Item_C.InitializeNPEQuestProgressItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   Goal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FText&                      Description                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<struct FS_NPE_QuestConfig_SubObjective>&Objectives                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_G_Prototype_Tutorial_ProgressTracker_Item_C::InitializeNPEQuestProgressItem(const class FText& Title, int32 Goal, const class FText& Description, TArray<struct FS_NPE_QuestConfig_SubObjective>& Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_Prototype_Tutorial_ProgressTracker_Item_C", "InitializeNPEQuestProgressItem");

	Params::WBP_G_Prototype_Tutorial_ProgressTracker_Item_C_InitializeNPEQuestProgressItem Parms{};

	Parms.Title = std::move(Title);
	Parms.Goal = Goal;
	Parms.Description = std::move(Description);
	Parms.Objectives = std::move(Objectives);

	UObject::ProcessEvent(Func, &Parms);

	Objectives = std::move(Parms.Objectives);
}


// Function WBP_G_Prototype_Tutorial_ProgressTracker_Item.WBP_G_Prototype_Tutorial_ProgressTracker_Item_C.UpdateQuestObjectiveCompletion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsCompleted                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_G_Prototype_Tutorial_ProgressTracker_Item_C::UpdateQuestObjectiveCompletion(const struct FGameplayTag& ObjectiveTag, bool bIsCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_Prototype_Tutorial_ProgressTracker_Item_C", "UpdateQuestObjectiveCompletion");

	Params::WBP_G_Prototype_Tutorial_ProgressTracker_Item_C_UpdateQuestObjectiveCompletion Parms{};

	Parms.ObjectiveTag = std::move(ObjectiveTag);
	Parms.bIsCompleted = bIsCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_G_Prototype_Tutorial_ProgressTracker_Item.WBP_G_Prototype_Tutorial_ProgressTracker_Item_C.UpdateQuestObjectiveProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              ObjectiveTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UWBP_G_Prototype_Tutorial_ProgressTracker_Item_C::UpdateQuestObjectiveProgress(int32 Progress, const struct FGameplayTag& ObjectiveTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_G_Prototype_Tutorial_ProgressTracker_Item_C", "UpdateQuestObjectiveProgress");

	Params::WBP_G_Prototype_Tutorial_ProgressTracker_Item_C_UpdateQuestObjectiveProgress Parms{};

	Parms.Progress = Progress;
	Parms.ObjectiveTag = std::move(ObjectiveTag);

	UObject::ProcessEvent(Func, &Parms);
}

}

