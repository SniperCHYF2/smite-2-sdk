#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V2_TabScreen

#include "Basic.hpp"

#include "RallyHereStart_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.BP_OnHandleBackAction
// 0x0004 (0x0004 - 0x0000)
struct WBP_G_V2_TabScreen_C_BP_OnHandleBackAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_OnHandleBackAction_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveViewRoute_ReturnValue;              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction) == 0x000001, "Wrong alignment on WBP_G_V2_TabScreen_C_BP_OnHandleBackAction");
static_assert(sizeof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction) == 0x000004, "Wrong size on WBP_G_V2_TabScreen_C_BP_OnHandleBackAction");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction, ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_BP_OnHandleBackAction::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction, CallFunc_BP_OnHandleBackAction_ReturnValue) == 0x000001, "Member 'WBP_G_V2_TabScreen_C_BP_OnHandleBackAction::CallFunc_BP_OnHandleBackAction_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction, CallFunc_IsVisible_ReturnValue) == 0x000002, "Member 'WBP_G_V2_TabScreen_C_BP_OnHandleBackAction::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_OnHandleBackAction, CallFunc_RemoveViewRoute_ReturnValue) == 0x000003, "Member 'WBP_G_V2_TabScreen_C_BP_OnHandleBackAction::CallFunc_RemoveViewRoute_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.DoHover
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_TabScreen_C_DoHover final
{
public:
	class AHWBaseHUD*                             CallFunc_GetLocalHUDAsBase_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_DoHover) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_DoHover");
static_assert(sizeof(WBP_G_V2_TabScreen_C_DoHover) == 0x000010, "Wrong size on WBP_G_V2_TabScreen_C_DoHover");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoHover, CallFunc_GetLocalHUDAsBase_ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_DoHover::CallFunc_GetLocalHUDAsBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoHover, CallFunc_GetCurrentInputState_ReturnValue) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_DoHover::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoHover, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WBP_G_V2_TabScreen_C_DoHover::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.DoUnhover
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_TabScreen_C_DoUnhover final
{
public:
	class AHWBaseHUD*                             CallFunc_GetLocalHUDAsBase_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_DoUnhover) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_DoUnhover");
static_assert(sizeof(WBP_G_V2_TabScreen_C_DoUnhover) == 0x000010, "Wrong size on WBP_G_V2_TabScreen_C_DoUnhover");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoUnhover, CallFunc_GetLocalHUDAsBase_ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_DoUnhover::CallFunc_GetLocalHUDAsBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoUnhover, CallFunc_GetCurrentInputState_ReturnValue) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_DoUnhover::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_DoUnhover, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WBP_G_V2_TabScreen_C_DoUnhover::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.ExecuteUbergraph_WBP_G_V2_TabScreen
// 0x0004 (0x0004 - 0x0000)
struct WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen) == 0x000004, "Wrong alignment on WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen");
static_assert(sizeof(WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen) == 0x000004, "Wrong size on WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen, EntryPoint) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_ExecuteUbergraph_WBP_G_V2_TabScreen::EntryPoint' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.InitializeWidget
// 0x0058 (0x0058 - 0x0000)
struct WBP_G_V2_TabScreen_C_InitializeWidget final
{
public:
	TDelegate<void(bool bVisible)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetVersionAndMatchDisplayString_ReturnValue; // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void(bool bVisible)>                K2Node_CreateDelegate_OutputDelegate_1;            // 0x0020(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	TDelegate<void(bool bVisible)>                K2Node_CreateDelegate_OutputDelegate_2;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_InitializeWidget");
static_assert(sizeof(WBP_G_V2_TabScreen_C_InitializeWidget) == 0x000058, "Wrong size on WBP_G_V2_TabScreen_C_InitializeWidget");
static_assert(offsetof(WBP_G_V2_TabScreen_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_InitializeWidget, CallFunc_GetVersionAndMatchDisplayString_ReturnValue) == 0x000010, "Member 'WBP_G_V2_TabScreen_C_InitializeWidget::CallFunc_GetVersionAndMatchDisplayString_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000020, "Member 'WBP_G_V2_TabScreen_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_InitializeWidget, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'WBP_G_V2_TabScreen_C_InitializeWidget::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_InitializeWidget, K2Node_CreateDelegate_OutputDelegate_2) == 0x000048, "Member 'WBP_G_V2_TabScreen_C_InitializeWidget::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.NavigateBack
// 0x0003 (0x0003 - 0x0000)
struct WBP_G_V2_TabScreen_C_NavigateBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveViewRoute_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NavigateBack_ReturnValue;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_NavigateBack) == 0x000001, "Wrong alignment on WBP_G_V2_TabScreen_C_NavigateBack");
static_assert(sizeof(WBP_G_V2_TabScreen_C_NavigateBack) == 0x000003, "Wrong size on WBP_G_V2_TabScreen_C_NavigateBack");
static_assert(offsetof(WBP_G_V2_TabScreen_C_NavigateBack, ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_NavigateBack::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_NavigateBack, CallFunc_RemoveViewRoute_ReturnValue) == 0x000001, "Member 'WBP_G_V2_TabScreen_C_NavigateBack::CallFunc_RemoveViewRoute_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_NavigateBack, CallFunc_NavigateBack_ReturnValue) == 0x000002, "Member 'WBP_G_V2_TabScreen_C_NavigateBack::CallFunc_NavigateBack_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.OnEnableFullNavigationUpdated
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated final
{
public:
	bool                                          bFullNavigationEnabled;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated) == 0x000001, "Wrong alignment on WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated");
static_assert(sizeof(WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated) == 0x000001, "Wrong size on WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated, bFullNavigationEnabled) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_OnEnableFullNavigationUpdated::bFullNavigationEnabled' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.OnSelectedTabChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_TabScreen_C_OnSelectedTabChanged final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWTabChangeCause                             Cause;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged) == 0x000004, "Wrong alignment on WBP_G_V2_TabScreen_C_OnSelectedTabChanged");
static_assert(sizeof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged) == 0x000008, "Wrong size on WBP_G_V2_TabScreen_C_OnSelectedTabChanged");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged, TabIndex) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_OnSelectedTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged, Cause) == 0x000004, "Member 'WBP_G_V2_TabScreen_C_OnSelectedTabChanged::Cause' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000005, "Member 'WBP_G_V2_TabScreen_C_OnSelectedTabChanged::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000006, "Member 'WBP_G_V2_TabScreen_C_OnSelectedTabChanged::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_OnSelectedTabChanged, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000007, "Member 'WBP_G_V2_TabScreen_C_OnSelectedTabChanged::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.ProcessViewInput
// 0x0338 (0x0338 - 0x0000)
struct WBP_G_V2_TabScreen_C_ProcessViewInput final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            ReturnValue;                                       // 0x0010(0x00B8)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTabActive_ReturnValue;                  // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTabActive_ReturnValue_1;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_ProcessViewInput_ReturnValue;             // 0x00D0(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0188(0x00B8)()
	int32                                         Temp_int_Variable;                                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue;              // 0x0248(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue;       // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_253[0x5];                                      // 0x0253(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0258(0x00B8)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_312[0x2];                                      // 0x0312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue_1;            // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetActiveWidget_ReturnValue_2;            // 0x0320(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_2;      // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x032A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x032B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_GameplayTag_ReturnValue_1;     // 0x0331(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0332(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0333(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_ProcessViewInput) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_ProcessViewInput");
static_assert(sizeof(WBP_G_V2_TabScreen_C_ProcessViewInput) == 0x000338, "Wrong size on WBP_G_V2_TabScreen_C_ProcessViewInput");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, InputTag) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::InputTag' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, TriggerEvent) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::TriggerEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, ReturnValue) == 0x000010, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, Temp_bool_Variable) == 0x0000C8, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_IsTabActive_ReturnValue) == 0x0000C9, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_IsTabActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_IsTabActive_ReturnValue_1) == 0x0000CA, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_IsTabActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_ProcessViewInput_ReturnValue) == 0x0000D0, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_ProcessViewInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_Handled_ReturnValue) == 0x000188, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, Temp_int_Variable) == 0x000240, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_GetActiveWidget_ReturnValue) == 0x000248, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_GetActiveWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000250, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000251, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_EqualEqual_GameplayTag_ReturnValue) == 0x000252, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_EqualEqual_GameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_Handled_ReturnValue_1) == 0x000258, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_BooleanAND_ReturnValue) == 0x000310, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_BooleanAND_ReturnValue_1) == 0x000311, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, Temp_int_Variable_1) == 0x000314, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_GetActiveWidget_ReturnValue_1) == 0x000318, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_GetActiveWidget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_GetActiveWidget_ReturnValue_2) == 0x000320, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_GetActiveWidget_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000328, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_NotEqual_ObjectObject_ReturnValue_2) == 0x000329, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_NotEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, Temp_bool_Variable_1) == 0x00032A, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, K2Node_Select_Default) == 0x00032B, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, K2Node_Select_Default_1) == 0x00032C, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000330, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_EqualEqual_GameplayTag_ReturnValue_1) == 0x000331, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_EqualEqual_GameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_BooleanAND_ReturnValue_2) == 0x000332, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_ProcessViewInput, CallFunc_BooleanAND_ReturnValue_3) == 0x000333, "Member 'WBP_G_V2_TabScreen_C_ProcessViewInput::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.StartHideSequence
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_TabScreen_C_StartHideSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_StartHideSequence) == 0x000004, "Wrong alignment on WBP_G_V2_TabScreen_C_StartHideSequence");
static_assert(sizeof(WBP_G_V2_TabScreen_C_StartHideSequence) == 0x000010, "Wrong size on WBP_G_V2_TabScreen_C_StartHideSequence");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartHideSequence, FromRoute) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_StartHideSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartHideSequence, ToRoute) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_StartHideSequence::ToRoute' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.StartShowSequence
// 0x0040 (0x0040 - 0x0000)
struct WBP_G_V2_TabScreen_C_StartShowSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetPendingRouteData_Data;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPendingRouteData_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWInputViewRouteData*                  K2Node_DynamicCast_AsHWInput_View_Route_Data;      // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTabActive_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_StartShowSequence) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_StartShowSequence");
static_assert(sizeof(WBP_G_V2_TabScreen_C_StartShowSequence) == 0x000040, "Wrong size on WBP_G_V2_TabScreen_C_StartShowSequence");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, FromRoute) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, ToRoute) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::ToRoute' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, Temp_int_Variable) == 0x000010, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, CallFunc_GetPendingRouteData_Data) == 0x000018, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::CallFunc_GetPendingRouteData_Data' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, CallFunc_GetPendingRouteData_ReturnValue) == 0x000020, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::CallFunc_GetPendingRouteData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, K2Node_DynamicCast_AsHWInput_View_Route_Data) == 0x000028, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::K2Node_DynamicCast_AsHWInput_View_Route_Data' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, Temp_int_Variable_1) == 0x000034, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000038, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, Temp_bool_Variable) == 0x000039, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, CallFunc_IsTabActive_ReturnValue) == 0x00003A, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::CallFunc_IsTabActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_StartShowSequence, K2Node_Select_Default) == 0x00003C, "Member 'WBP_G_V2_TabScreen_C_StartShowSequence::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.UpdateNavigationTipText
// 0x0038 (0x0038 - 0x0000)
struct WBP_G_V2_TabScreen_C_UpdateNavigationTipText final
{
public:
	float                                         Temp_real_Variable;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_2;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFullNavigationEnabled_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWBaseHUD*                             CallFunc_GetLocalHUDAsBase_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERH_INPUT_STATE                               CallFunc_GetCurrentInputState_ReturnValue;         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_UpdateNavigationTipText");
static_assert(sizeof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText) == 0x000038, "Wrong size on WBP_G_V2_TabScreen_C_UpdateNavigationTipText");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_real_Variable) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_real_Variable_1) == 0x000004, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_bool_Variable) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_real_Variable_2) == 0x00000C, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_bool_Variable_1) == 0x000010, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_byte_Variable) == 0x000011, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, Temp_bool_Variable_2) == 0x000013, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_IsHovered_ReturnValue) == 0x000014, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, K2Node_Select_Default) == 0x000018, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_IsFullNavigationEnabled_ReturnValue) == 0x00001C, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_IsFullNavigationEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_GetLocalHUDAsBase_ReturnValue) == 0x000020, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_GetLocalHUDAsBase_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_GetCurrentInputState_ReturnValue) == 0x000029, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_GetCurrentInputState_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00002A, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, K2Node_Select_Default_1) == 0x00002C, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_UpdateNavigationTipText, K2Node_Select_Default_2) == 0x000030, "Member 'WBP_G_V2_TabScreen_C_UpdateNavigationTipText::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.BP_GetDesiredFocusTarget
// 0x0048 (0x0048 - 0x0000)
struct WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Temp_object_Variable;                              // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetActiveWidgetIndex_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFullNavigationEnabled_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetDesiredFocusTarget_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget) == 0x000048, "Wrong size on WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, Temp_int_Variable) == 0x000008, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, Temp_object_Variable) == 0x000010, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, Temp_bool_Variable) == 0x000018, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, Temp_object_Variable_1) == 0x000020, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, CallFunc_GetActiveWidgetIndex_ReturnValue) == 0x000028, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::CallFunc_GetActiveWidgetIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, CallFunc_IsFullNavigationEnabled_ReturnValue) == 0x00002C, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::CallFunc_IsFullNavigationEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, CallFunc_GetDesiredFocusTarget_ReturnValue) == 0x000030, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::CallFunc_GetDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, K2Node_Select_Default) == 0x000038, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget, K2Node_Select_Default_1) == 0x000040, "Member 'WBP_G_V2_TabScreen_C_BP_GetDesiredFocusTarget::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_G_V2_TabScreen.WBP_G_V2_TabScreen_C.GetTabBarWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_TabScreen_C_GetTabBarWidget final
{
public:
	class UHWTabBarWidget*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_TabScreen_C_GetTabBarWidget) == 0x000008, "Wrong alignment on WBP_G_V2_TabScreen_C_GetTabBarWidget");
static_assert(sizeof(WBP_G_V2_TabScreen_C_GetTabBarWidget) == 0x000008, "Wrong size on WBP_G_V2_TabScreen_C_GetTabBarWidget");
static_assert(offsetof(WBP_G_V2_TabScreen_C_GetTabBarWidget, ReturnValue) == 0x000000, "Member 'WBP_G_V2_TabScreen_C_GetTabBarWidget::ReturnValue' has a wrong offset!");

}

