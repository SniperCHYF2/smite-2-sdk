#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleStandard_Pickup

#include "Basic.hpp"

#include "BP_Interactable_classes.hpp"
#include "Engine_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleStandard_Pickup.BP_BattleStandard_Pickup_C
// 0x00F8 (0x03C0 - 0x02C8)
class ABP_BattleStandard_Pickup_C final : public ABP_Interactable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BattleStandard_Pickup_C;         // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   flag;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWNiagaraComponent*                    VFX;                                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWDisplayInfoComponent*                HWDisplayInfo;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   base;                                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EHWSmiteTeamId                                Team;                                              // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_Fountain_C>          Fountain;                                          // 0x02F8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class AActor>                  Objective;                                         // 0x0320(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Flag;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UGameplayEffect>            BattleStandardEffectOrder;                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsPickedUp;                                        // 0x0358(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRespawning;                                      // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RespawnTimer;                                      // 0x0360(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTime;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EHWSmiteTeamId Team, class AActor* InstigatorActor)> OnBattleStandardPickedUp; // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsEnabled;                                         // 0x0380(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EHWSmiteTeamId Team)> OnBattleStandardExpired;                     // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           StandardTimer;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnBattleStandardStateChanged;                      // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AHWCharacter_Base*                      MarkedTarget;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BattleStandardEffectChaos;                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BallistaMarkClosestLaneObjective(EHWSmiteTeamId TeamToDamage, class AActor* DamageInstigator);
	void BindOnPickupEvents(class UHWAbilitySystemComponent* InstigatorASC);
	void BndEvt__BP_BattleStandard_Pickup_BP_InteractableComponent_K2Node_ComponentBoundEvent_1_OnInteractionEventDel__DelegateSignature(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator);
	void ExecuteUbergraph_BP_BattleStandard_Pickup(int32 EntryPoint);
	void Multicast_NewMarkedTarget(class AHWCharacter_Base* NewTarget);
	void OnBattleStandardDurationExpired_Chaos();
	void OnBattleStandardDurationExpired_Order();
	void OnBattleStandardHolderDied(const struct FDamageEventData& DeathEventData);
	void OnEnteredFountainWithFlag(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnRep_IsEnabled();
	void OnRep_IsPickedUp();
	void OnRep_MarkedTarget();
	void OnRespawnTimerFinished();
	void PickupLogic(class AActor* InstigatorActor);
	void ReceiveBeginPlay();
	void RemoveFlagFromPlayer(class UHWAbilitySystemComponent* PlayerASC, bool* WasRemoved);
	void RespawnFlag(float RespawnTime_0);
	void SetClientVisuals();
	void SetClientVisualsFriendlyEnemyColors();
	void SpawnFlag();
	void ToggleInteract();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleStandard_Pickup_C">();
	}
	static class ABP_BattleStandard_Pickup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleStandard_Pickup_C>();
	}
};
static_assert(alignof(ABP_BattleStandard_Pickup_C) == 0x000008, "Wrong alignment on ABP_BattleStandard_Pickup_C");
static_assert(sizeof(ABP_BattleStandard_Pickup_C) == 0x0003C0, "Wrong size on ABP_BattleStandard_Pickup_C");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, UberGraphFrame_BP_BattleStandard_Pickup_C) == 0x0002C8, "Member 'ABP_BattleStandard_Pickup_C::UberGraphFrame_BP_BattleStandard_Pickup_C' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, flag) == 0x0002D0, "Member 'ABP_BattleStandard_Pickup_C::flag' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, VFX) == 0x0002D8, "Member 'ABP_BattleStandard_Pickup_C::VFX' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, HWDisplayInfo) == 0x0002E0, "Member 'ABP_BattleStandard_Pickup_C::HWDisplayInfo' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, base) == 0x0002E8, "Member 'ABP_BattleStandard_Pickup_C::base' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, Team) == 0x0002F0, "Member 'ABP_BattleStandard_Pickup_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, Fountain) == 0x0002F8, "Member 'ABP_BattleStandard_Pickup_C::Fountain' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, Objective) == 0x000320, "Member 'ABP_BattleStandard_Pickup_C::Objective' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, DMI_Flag) == 0x000348, "Member 'ABP_BattleStandard_Pickup_C::DMI_Flag' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, BattleStandardEffectOrder) == 0x000350, "Member 'ABP_BattleStandard_Pickup_C::BattleStandardEffectOrder' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, IsPickedUp) == 0x000358, "Member 'ABP_BattleStandard_Pickup_C::IsPickedUp' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, IsRespawning) == 0x000359, "Member 'ABP_BattleStandard_Pickup_C::IsRespawning' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, RespawnTimer) == 0x000360, "Member 'ABP_BattleStandard_Pickup_C::RespawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, RespawnTime) == 0x000368, "Member 'ABP_BattleStandard_Pickup_C::RespawnTime' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, OnBattleStandardPickedUp) == 0x000370, "Member 'ABP_BattleStandard_Pickup_C::OnBattleStandardPickedUp' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, IsEnabled) == 0x000380, "Member 'ABP_BattleStandard_Pickup_C::IsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, OnBattleStandardExpired) == 0x000388, "Member 'ABP_BattleStandard_Pickup_C::OnBattleStandardExpired' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, StandardTimer) == 0x000398, "Member 'ABP_BattleStandard_Pickup_C::StandardTimer' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, OnBattleStandardStateChanged) == 0x0003A0, "Member 'ABP_BattleStandard_Pickup_C::OnBattleStandardStateChanged' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, MarkedTarget) == 0x0003B0, "Member 'ABP_BattleStandard_Pickup_C::MarkedTarget' has a wrong offset!");
static_assert(offsetof(ABP_BattleStandard_Pickup_C, BattleStandardEffectChaos) == 0x0003B8, "Member 'ABP_BattleStandard_Pickup_C::BattleStandardEffectChaos' has a wrong offset!");

}

