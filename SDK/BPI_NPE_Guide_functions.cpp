#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPE_Guide

#include "Basic.hpp"

#include "BPI_NPE_Guide_classes.hpp"
#include "BPI_NPE_Guide_parameters.hpp"


namespace SDK
{

// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetActiveNPEStage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag*                    ActiveStageTag                                         (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void IBPI_NPE_Guide_C::GetActiveNPEStage(struct FGameplayTag* ActiveStageTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetActiveNPEStage");

	Params::BPI_NPE_Guide_C_GetActiveNPEStage Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ActiveStageTag != nullptr)
		*ActiveStageTag = std::move(Parms.ActiveStageTag);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetAssociatedRoles
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<ECharacterRole>*                 Roles                                                  (Parm, OutParm)

void IBPI_NPE_Guide_C::GetAssociatedRoles(TArray<ECharacterRole>* Roles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetAssociatedRoles");

	Params::BPI_NPE_Guide_C_GetAssociatedRoles Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Roles != nullptr)
		*Roles = std::move(Parms.Roles);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEAIDirectives
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTagContainer*           AIDirectives                                           (Parm, OutParm)

void IBPI_NPE_Guide_C::GetNPEAIDirectives(struct FGameplayTagContainer* AIDirectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetNPEAIDirectives");

	Params::BPI_NPE_Guide_C_GetNPEAIDirectives Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AIDirectives != nullptr)
		*AIDirectives = std::move(Parms.AIDirectives);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEGuide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_NPE_Guide_C**                 GuideActor                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NPE_Guide_C::GetNPEGuide(class ABP_NPE_Guide_C** GuideActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetNPEGuide");

	Params::BPI_NPE_Guide_C_GetNPEGuide Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (GuideActor != nullptr)
		*GuideActor = Parms.GuideActor;
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetNPEStages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_NPE_Stage_C*>*         Stages                                                 (Parm, OutParm)

void IBPI_NPE_Guide_C::GetNPEStages(TArray<class ABP_NPE_Stage_C*>* Stages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetNPEStages");

	Params::BPI_NPE_Guide_C_GetNPEStages Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Stages != nullptr)
		*Stages = std::move(Parms.Stages);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.GetObjectiveTimeRemaining
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 TimeRemaining                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPE_Guide_C::GetObjectiveTimeRemaining(double* TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "GetObjectiveTimeRemaining");

	Params::BPI_NPE_Guide_C_GetObjectiveTimeRemaining Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (TimeRemaining != nullptr)
		*TimeRemaining = Parms.TimeRemaining;
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.NPEGuideStageActivation
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPE_Guide_C::NPEGuideStageActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "NPEGuideStageActivation");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.SetActiveNPEStage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              ActiveStage                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void IBPI_NPE_Guide_C::SetActiveNPEStage(const struct FGameplayTag& ActiveStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "SetActiveNPEStage");

	Params::BPI_NPE_Guide_C_SetActiveNPEStage Parms{};

	Parms.ActiveStage = std::move(ActiveStage);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPE_Guide.BPI_NPE_Guide_C.SetNPEAIDirectives
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewAIDirective                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool                                    ClearPreviousDirectives                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPE_Guide_C::SetNPEAIDirectives(const struct FGameplayTag& NewAIDirective, bool ClearPreviousDirectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPE_Guide_C", "SetNPEAIDirectives");

	Params::BPI_NPE_Guide_C_SetNPEAIDirectives Parms{};

	Parms.NewAIDirective = std::move(NewAIDirective);
	Parms.ClearPreviousDirectives = ClearPreviousDirectives;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

