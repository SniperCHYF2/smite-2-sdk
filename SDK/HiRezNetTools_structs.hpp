#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HiRezNetTools

#include "Basic.hpp"

#include "NetCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct HiRezNetTools.ReplicatedLogItem
// 0x0001 (0x0001 - 0x0000)
struct FReplicatedLogItem final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedLogItem) == 0x000001, "Wrong alignment on FReplicatedLogItem");
static_assert(sizeof(FReplicatedLogItem) == 0x000001, "Wrong size on FReplicatedLogItem");

// ScriptStruct HiRezNetTools.ReplicatedLog
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FReplicatedLog final
{
public:
	int32                                         MaxEntryReplication;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHistory;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TailRepIndex;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadRepIndex;                                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemArrayTail;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemArrayHead;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x58];                                      // 0x0018(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedLog) == 0x000008, "Wrong alignment on FReplicatedLog");
static_assert(sizeof(FReplicatedLog) == 0x000070, "Wrong size on FReplicatedLog");
static_assert(offsetof(FReplicatedLog, MaxEntryReplication) == 0x000000, "Member 'FReplicatedLog::MaxEntryReplication' has a wrong offset!");
static_assert(offsetof(FReplicatedLog, MaxHistory) == 0x000004, "Member 'FReplicatedLog::MaxHistory' has a wrong offset!");
static_assert(offsetof(FReplicatedLog, TailRepIndex) == 0x000008, "Member 'FReplicatedLog::TailRepIndex' has a wrong offset!");
static_assert(offsetof(FReplicatedLog, HeadRepIndex) == 0x00000C, "Member 'FReplicatedLog::HeadRepIndex' has a wrong offset!");
static_assert(offsetof(FReplicatedLog, ItemArrayTail) == 0x000010, "Member 'FReplicatedLog::ItemArrayTail' has a wrong offset!");
static_assert(offsetof(FReplicatedLog, ItemArrayHead) == 0x000014, "Member 'FReplicatedLog::ItemArrayHead' has a wrong offset!");

// ScriptStruct HiRezNetTools.RepPreloaderItem
// 0x002C (0x0038 - 0x000C)
struct alignas(0x08) FRepPreloaderItem final : public FFastArraySerializerItem
{
public:
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BundleName;                                        // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEntryWasReplicated;                               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25[0x13];                                      // 0x0025(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepPreloaderItem) == 0x000008, "Wrong alignment on FRepPreloaderItem");
static_assert(sizeof(FRepPreloaderItem) == 0x000038, "Wrong size on FRepPreloaderItem");
static_assert(offsetof(FRepPreloaderItem, PrimaryAssetId) == 0x00000C, "Member 'FRepPreloaderItem::PrimaryAssetId' has a wrong offset!");
static_assert(offsetof(FRepPreloaderItem, BundleName) == 0x00001C, "Member 'FRepPreloaderItem::BundleName' has a wrong offset!");
static_assert(offsetof(FRepPreloaderItem, bEntryWasReplicated) == 0x000024, "Member 'FRepPreloaderItem::bEntryWasReplicated' has a wrong offset!");

// ScriptStruct HiRezNetTools.ReplicatedPreloader
// 0x00D8 (0x01E0 - 0x0108)
struct FReplicatedPreloader final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x50];                                     // 0x0108(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRepPreloaderItem>              RepArray;                                          // 0x0158(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                           AlwaysIncludeBundles;                              // 0x0168(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPrivate)
	uint8                                         Pad_178[0x68];                                     // 0x0178(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedPreloader) == 0x000008, "Wrong alignment on FReplicatedPreloader");
static_assert(sizeof(FReplicatedPreloader) == 0x0001E0, "Wrong size on FReplicatedPreloader");
static_assert(offsetof(FReplicatedPreloader, RepArray) == 0x000158, "Member 'FReplicatedPreloader::RepArray' has a wrong offset!");
static_assert(offsetof(FReplicatedPreloader, AlwaysIncludeBundles) == 0x000168, "Member 'FReplicatedPreloader::AlwaysIncludeBundles' has a wrong offset!");

}

