#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_NPC_Ward

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_NPC_Ward.ABP_NPC_Ward_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_NPC_Ward_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_NPC_Ward_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_NPC_Ward_C_AnimGraph");
static_assert(sizeof(ABP_NPC_Ward_C_AnimGraph) == 0x000010, "Wrong size on ABP_NPC_Ward_C_AnimGraph");
static_assert(offsetof(ABP_NPC_Ward_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_NPC_Ward_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_NPC_Ward.ABP_NPC_Ward_C.ExecuteUbergraph_ABP_NPC_Ward
// 0x0028 (0x0028 - 0x0000)
struct ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_RelativeDirection;                    // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_HealthPercent;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward) == 0x000008, "Wrong alignment on ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward");
static_assert(sizeof(ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward) == 0x000028, "Wrong size on ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward");
static_assert(offsetof(ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward, EntryPoint) == 0x000000, "Member 'ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward, K2Node_Event_RelativeDirection) == 0x000008, "Member 'ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward::K2Node_Event_RelativeDirection' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward, K2Node_Event_HealthPercent) == 0x000020, "Member 'ABP_NPC_Ward_C_ExecuteUbergraph_ABP_NPC_Ward::K2Node_Event_HealthPercent' has a wrong offset!");

// Function ABP_NPC_Ward.ABP_NPC_Ward_C.PlayHitReaction
// 0x0020 (0x0020 - 0x0000)
struct ABP_NPC_Ward_C_PlayHitReaction final
{
public:
	struct FVector                                RelativeDirection;                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthPercent;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_NPC_Ward_C_PlayHitReaction) == 0x000008, "Wrong alignment on ABP_NPC_Ward_C_PlayHitReaction");
static_assert(sizeof(ABP_NPC_Ward_C_PlayHitReaction) == 0x000020, "Wrong size on ABP_NPC_Ward_C_PlayHitReaction");
static_assert(offsetof(ABP_NPC_Ward_C_PlayHitReaction, RelativeDirection) == 0x000000, "Member 'ABP_NPC_Ward_C_PlayHitReaction::RelativeDirection' has a wrong offset!");
static_assert(offsetof(ABP_NPC_Ward_C_PlayHitReaction, HealthPercent) == 0x000018, "Member 'ABP_NPC_Ward_C_PlayHitReaction::HealthPercent' has a wrong offset!");

}

