#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBP_WindSprite_01

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DBP_WindSprite_01.DBP_WindSprite_01_C
// 0x00A0 (0x0568 - 0x04C8)
class ADBP_WindSprite_01_C final : public AHWDeployable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWNiagaraComponent*                    ExpirationVFX;                                     // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MS_WindSprite_Persistent;                          // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWNiagaraComponent*                    HWNiagara;                                         // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHWDisplayInfoComponent*                HWDisplayInfo;                                     // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractableComponent_C*            BP_InteractableComponent;                          // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      InteractInstigator;                                // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UHWAbilitySystemComponent*>      ActiveInstigators;                                 // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UAudioComponent*                        SpawnedSound;                                      // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              WindSpriteUsed;                                    // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UHWAbilitySystemComponent*              InteractInstigatorASC;                             // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpriteTimerHandle;                                 // 0x0540(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PreventInteractTags;                               // 0x0548(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BndEvt__DBP_WindSprite_01_BP_InteractableComponent_K2Node_ComponentBoundEvent_0_OnInteractionEventDel__DelegateSignature(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator_0);
	void BndEvt__DBP_WindSprite_01_Sphere_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__DBP_WindSprite_01_Sphere_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void DestroySprite();
	void ExecuteUbergraph_DBP_WindSprite_01(int32 EntryPoint);
	void SpawnInteractAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DBP_WindSprite_01_C">();
	}
	static class ADBP_WindSprite_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADBP_WindSprite_01_C>();
	}
};
static_assert(alignof(ADBP_WindSprite_01_C) == 0x000008, "Wrong alignment on ADBP_WindSprite_01_C");
static_assert(sizeof(ADBP_WindSprite_01_C) == 0x000568, "Wrong size on ADBP_WindSprite_01_C");
static_assert(offsetof(ADBP_WindSprite_01_C, UberGraphFrame) == 0x0004C8, "Member 'ADBP_WindSprite_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, ExpirationVFX) == 0x0004D0, "Member 'ADBP_WindSprite_01_C::ExpirationVFX' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, MS_WindSprite_Persistent) == 0x0004D8, "Member 'ADBP_WindSprite_01_C::MS_WindSprite_Persistent' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, HWNiagara) == 0x0004E0, "Member 'ADBP_WindSprite_01_C::HWNiagara' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, Sphere) == 0x0004E8, "Member 'ADBP_WindSprite_01_C::Sphere' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, HWDisplayInfo) == 0x0004F0, "Member 'ADBP_WindSprite_01_C::HWDisplayInfo' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, BP_InteractableComponent) == 0x0004F8, "Member 'ADBP_WindSprite_01_C::BP_InteractableComponent' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, Scene) == 0x000500, "Member 'ADBP_WindSprite_01_C::Scene' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, InteractInstigator) == 0x000508, "Member 'ADBP_WindSprite_01_C::InteractInstigator' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, ActiveInstigators) == 0x000510, "Member 'ADBP_WindSprite_01_C::ActiveInstigators' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, SpawnedSound) == 0x000520, "Member 'ADBP_WindSprite_01_C::SpawnedSound' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, WindSpriteUsed) == 0x000528, "Member 'ADBP_WindSprite_01_C::WindSpriteUsed' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, InteractInstigatorASC) == 0x000538, "Member 'ADBP_WindSprite_01_C::InteractInstigatorASC' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, SpriteTimerHandle) == 0x000540, "Member 'ADBP_WindSprite_01_C::SpriteTimerHandle' has a wrong offset!");
static_assert(offsetof(ADBP_WindSprite_01_C, PreventInteractTags) == 0x000548, "Member 'ADBP_WindSprite_01_C::PreventInteractTags' has a wrong offset!");

}

