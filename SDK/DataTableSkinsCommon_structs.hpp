#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataTableSkinsCommon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum DataTableSkinsCommon.AssetAdditionalInfoType
// NumValues: 0x0007
enum class EAssetAdditionalInfoType : uint32
{
	Invalid                                  = 0,
	Montage                                  = 1,
	Sequence                                 = 2,
	BlendSpace                               = 3,
	AimOffset                                = 4,
	Pose                                     = 5,
	AssetAdditionalInfoType_MAX              = 6,
};

// Enum DataTableSkinsCommon.EMaterialSkinType
// NumValues: 0x0008
enum class EMaterialSkinType : uint8
{
	Material                                 = 0,
	InstanceDataMine                         = 1,
	ForcedInstanceDataMine                   = 2,
	FloatParam                               = 3,
	VectorParam                              = 4,
	TextureParam                             = 5,
	Invalid                                  = 6,
	EMaterialSkinType_MAX                    = 7,
};

// ScriptStruct DataTableSkinsCommon.AssetRequestKey
// 0x001C (0x001C - 0x0000)
struct FAssetRequestKey final
{
public:
	struct FGameplayTag                           SourceId;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DesiredAsset;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSkinKeyword;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SkinKeyword;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAssetRequestKey) == 0x000004, "Wrong alignment on FAssetRequestKey");
static_assert(sizeof(FAssetRequestKey) == 0x00001C, "Wrong size on FAssetRequestKey");
static_assert(offsetof(FAssetRequestKey, SourceId) == 0x000000, "Member 'FAssetRequestKey::SourceId' has a wrong offset!");
static_assert(offsetof(FAssetRequestKey, DesiredAsset) == 0x000008, "Member 'FAssetRequestKey::DesiredAsset' has a wrong offset!");
static_assert(offsetof(FAssetRequestKey, bUseSkinKeyword) == 0x000010, "Member 'FAssetRequestKey::bUseSkinKeyword' has a wrong offset!");
static_assert(offsetof(FAssetRequestKey, SkinKeyword) == 0x000014, "Member 'FAssetRequestKey::SkinKeyword' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.MaterialSkinInfo
// 0x001C (0x001C - 0x0000)
struct FMaterialSkinInfo final
{
public:
	class FName                                   Prefix;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialSlot;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialSkinType                             SkinType;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParamName;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValid;                                            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialSkinInfo) == 0x000004, "Wrong alignment on FMaterialSkinInfo");
static_assert(sizeof(FMaterialSkinInfo) == 0x00001C, "Wrong size on FMaterialSkinInfo");
static_assert(offsetof(FMaterialSkinInfo, Prefix) == 0x000000, "Member 'FMaterialSkinInfo::Prefix' has a wrong offset!");
static_assert(offsetof(FMaterialSkinInfo, MaterialSlot) == 0x000008, "Member 'FMaterialSkinInfo::MaterialSlot' has a wrong offset!");
static_assert(offsetof(FMaterialSkinInfo, SkinType) == 0x00000C, "Member 'FMaterialSkinInfo::SkinType' has a wrong offset!");
static_assert(offsetof(FMaterialSkinInfo, ParamName) == 0x000010, "Member 'FMaterialSkinInfo::ParamName' has a wrong offset!");
static_assert(offsetof(FMaterialSkinInfo, bValid) == 0x000018, "Member 'FMaterialSkinInfo::bValid' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.AssetTableRow
// 0x0068 (0x0070 - 0x0008)
struct FAssetTableRow : public FTableRowBase
{
public:
	class UAnimAdditionalInfo*                    AnimationAssetAdditionalInfo;                      // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetRequestKey                       AssetKey;                                          // 0x0010(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bool;                                              // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         float_0;                                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LinearColor;                                       // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int;                                               // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NameField;                                         // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMaterialSkinInfo                      MaterialSkinInfo;                                  // 0x0050(0x001C)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAssetTableRow) == 0x000008, "Wrong alignment on FAssetTableRow");
static_assert(sizeof(FAssetTableRow) == 0x000070, "Wrong size on FAssetTableRow");
static_assert(offsetof(FAssetTableRow, AnimationAssetAdditionalInfo) == 0x000008, "Member 'FAssetTableRow::AnimationAssetAdditionalInfo' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, AssetKey) == 0x000010, "Member 'FAssetTableRow::AssetKey' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, Bool) == 0x00002C, "Member 'FAssetTableRow::Bool' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, float_0) == 0x000030, "Member 'FAssetTableRow::float_0' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, LinearColor) == 0x000034, "Member 'FAssetTableRow::LinearColor' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, Int) == 0x000044, "Member 'FAssetTableRow::Int' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, NameField) == 0x000048, "Member 'FAssetTableRow::NameField' has a wrong offset!");
static_assert(offsetof(FAssetTableRow, MaterialSkinInfo) == 0x000050, "Member 'FAssetTableRow::MaterialSkinInfo' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.SoftAssetTableRow
// 0x0190 (0x0200 - 0x0070)
struct FSoftAssetTableRow final : public FAssetTableRow
{
public:
	TSoftObjectPtr<class UAnimationAsset>         AnimationAsset;                                    // 0x0070(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaSoundSource>        MetaSoundSource;                                   // 0x0098(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMesh;                                      // 0x00C0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPhysicsAsset>           PhysicsAsset;                                      // 0x00E8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             StaticMesh;                                        // 0x0110(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraSystem;                                     // 0x0138(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      MaterialInterface;                                 // 0x0160(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0188(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Class;                                             // 0x01B0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataAsset>              DataAsset;                                         // 0x01D8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoftAssetTableRow) == 0x000008, "Wrong alignment on FSoftAssetTableRow");
static_assert(sizeof(FSoftAssetTableRow) == 0x000200, "Wrong size on FSoftAssetTableRow");
static_assert(offsetof(FSoftAssetTableRow, AnimationAsset) == 0x000070, "Member 'FSoftAssetTableRow::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, MetaSoundSource) == 0x000098, "Member 'FSoftAssetTableRow::MetaSoundSource' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, SkeletalMesh) == 0x0000C0, "Member 'FSoftAssetTableRow::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, PhysicsAsset) == 0x0000E8, "Member 'FSoftAssetTableRow::PhysicsAsset' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, StaticMesh) == 0x000110, "Member 'FSoftAssetTableRow::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, NiagaraSystem) == 0x000138, "Member 'FSoftAssetTableRow::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, MaterialInterface) == 0x000160, "Member 'FSoftAssetTableRow::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, Texture) == 0x000188, "Member 'FSoftAssetTableRow::Texture' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, Class) == 0x0001B0, "Member 'FSoftAssetTableRow::Class' has a wrong offset!");
static_assert(offsetof(FSoftAssetTableRow, DataAsset) == 0x0001D8, "Member 'FSoftAssetTableRow::DataAsset' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.DataTableInfo
// 0x0058 (0x0058 - 0x0000)
struct FDataTableInfo final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TablePriority;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      SkinTagQuery;                                      // 0x0010(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDataTableInfo) == 0x000008, "Wrong alignment on FDataTableInfo");
static_assert(sizeof(FDataTableInfo) == 0x000058, "Wrong size on FDataTableInfo");
static_assert(offsetof(FDataTableInfo, DataTable) == 0x000000, "Member 'FDataTableInfo::DataTable' has a wrong offset!");
static_assert(offsetof(FDataTableInfo, TablePriority) == 0x000008, "Member 'FDataTableInfo::TablePriority' has a wrong offset!");
static_assert(offsetof(FDataTableInfo, SkinTagQuery) == 0x000010, "Member 'FDataTableInfo::SkinTagQuery' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.HardAssetTableRow
// 0x0050 (0x00C0 - 0x0070)
struct FHardAssetTableRow final : public FAssetTableRow
{
public:
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMetaSoundSource*                       MetaSoundSource;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAsset;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MaterialInterface;                                 // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Class;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             DataAsset;                                         // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHardAssetTableRow) == 0x000008, "Wrong alignment on FHardAssetTableRow");
static_assert(sizeof(FHardAssetTableRow) == 0x0000C0, "Wrong size on FHardAssetTableRow");
static_assert(offsetof(FHardAssetTableRow, AnimationAsset) == 0x000070, "Member 'FHardAssetTableRow::AnimationAsset' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, MetaSoundSource) == 0x000078, "Member 'FHardAssetTableRow::MetaSoundSource' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, SkeletalMesh) == 0x000080, "Member 'FHardAssetTableRow::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, PhysicsAsset) == 0x000088, "Member 'FHardAssetTableRow::PhysicsAsset' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, StaticMesh) == 0x000090, "Member 'FHardAssetTableRow::StaticMesh' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, NiagaraSystem) == 0x000098, "Member 'FHardAssetTableRow::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, MaterialInterface) == 0x0000A0, "Member 'FHardAssetTableRow::MaterialInterface' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, Texture) == 0x0000A8, "Member 'FHardAssetTableRow::Texture' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, Class) == 0x0000B0, "Member 'FHardAssetTableRow::Class' has a wrong offset!");
static_assert(offsetof(FHardAssetTableRow, DataAsset) == 0x0000B8, "Member 'FHardAssetTableRow::DataAsset' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.DynamicSkinTableMapEntry
// 0x0018 (0x0018 - 0x0000)
struct FDynamicSkinTableMapEntry final
{
public:
	class UDynamicSkinTable*                      Table;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDynamicSkinTableMapEntry) == 0x000008, "Wrong alignment on FDynamicSkinTableMapEntry");
static_assert(sizeof(FDynamicSkinTableMapEntry) == 0x000018, "Wrong size on FDynamicSkinTableMapEntry");
static_assert(offsetof(FDynamicSkinTableMapEntry, Table) == 0x000000, "Member 'FDynamicSkinTableMapEntry::Table' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.CachedRowsEntry
// 0x00D0 (0x00D0 - 0x0000)
struct FCachedRowsEntry final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHardAssetTableRow                     Row;                                               // 0x0008(0x00C0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCachedRowsEntry) == 0x000008, "Wrong alignment on FCachedRowsEntry");
static_assert(sizeof(FCachedRowsEntry) == 0x0000D0, "Wrong size on FCachedRowsEntry");
static_assert(offsetof(FCachedRowsEntry, Priority) == 0x000000, "Member 'FCachedRowsEntry::Priority' has a wrong offset!");
static_assert(offsetof(FCachedRowsEntry, Row) == 0x000008, "Member 'FCachedRowsEntry::Row' has a wrong offset!");
static_assert(offsetof(FCachedRowsEntry, RowName) == 0x0000C8, "Member 'FCachedRowsEntry::RowName' has a wrong offset!");

// ScriptStruct DataTableSkinsCommon.SkinUpdateTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FSkinUpdateTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkinUpdateTickFunction) == 0x000008, "Wrong alignment on FSkinUpdateTickFunction");
static_assert(sizeof(FSkinUpdateTickFunction) == 0x000030, "Wrong size on FSkinUpdateTickFunction");

// ScriptStruct DataTableSkinsCommon.SkinStaticMeshUpdateTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FSkinStaticMeshUpdateTickFunction final : public FTickFunction
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkinStaticMeshUpdateTickFunction) == 0x000008, "Wrong alignment on FSkinStaticMeshUpdateTickFunction");
static_assert(sizeof(FSkinStaticMeshUpdateTickFunction) == 0x000030, "Wrong size on FSkinStaticMeshUpdateTickFunction");

}

