#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_CheckForCharacterStuck

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_CheckForCharacterStuck.BTS_CheckForCharacterStuck_C
// 0x0078 (0x0110 - 0x0098)
class UBTS_CheckForCharacterStuck_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        ArriveDistance;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 DestinationBlackboardKey;                          // 0x00A8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 StuckTimerBlackboardKey;                           // 0x00D0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector                                LastLocation;                                      // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTS_CheckForCharacterStuck(int32 EntryPoint);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_CheckForCharacterStuck_C">();
	}
	static class UBTS_CheckForCharacterStuck_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_CheckForCharacterStuck_C>();
	}
};
static_assert(alignof(UBTS_CheckForCharacterStuck_C) == 0x000008, "Wrong alignment on UBTS_CheckForCharacterStuck_C");
static_assert(sizeof(UBTS_CheckForCharacterStuck_C) == 0x000110, "Wrong size on UBTS_CheckForCharacterStuck_C");
static_assert(offsetof(UBTS_CheckForCharacterStuck_C, UberGraphFrame) == 0x000098, "Member 'UBTS_CheckForCharacterStuck_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_CheckForCharacterStuck_C, ArriveDistance) == 0x0000A0, "Member 'UBTS_CheckForCharacterStuck_C::ArriveDistance' has a wrong offset!");
static_assert(offsetof(UBTS_CheckForCharacterStuck_C, DestinationBlackboardKey) == 0x0000A8, "Member 'UBTS_CheckForCharacterStuck_C::DestinationBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTS_CheckForCharacterStuck_C, StuckTimerBlackboardKey) == 0x0000D0, "Member 'UBTS_CheckForCharacterStuck_C::StuckTimerBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTS_CheckForCharacterStuck_C, LastLocation) == 0x0000F8, "Member 'UBTS_CheckForCharacterStuck_C::LastLocation' has a wrong offset!");

}

