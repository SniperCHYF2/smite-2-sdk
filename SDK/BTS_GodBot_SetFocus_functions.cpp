#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_GodBot_SetFocus

#include "Basic.hpp"

#include "BTS_GodBot_SetFocus_classes.hpp"
#include "BTS_GodBot_SetFocus_parameters.hpp"


namespace SDK
{

// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.CanFocusCurrentTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           CurrentTargetActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanTarget                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::CanFocusCurrentTarget(class AActor* CurrentTargetActor, class AActor* ControlledPawn, class AAIController* OwnerController, bool* CanTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "CanFocusCurrentTarget");

	Params::BTS_GodBot_SetFocus_C_CanFocusCurrentTarget Parms{};

	Parms.CurrentTargetActor = CurrentTargetActor;
	Parms.ControlledPawn = ControlledPawn;
	Parms.OwnerController = OwnerController;

	UObject::ProcessEvent(Func, &Parms);

	if (CanTarget != nullptr)
		*CanTarget = Parms.CanTarget;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.DetectRapidDirectionChange
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    InController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            InPawn                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::DetectRapidDirectionChange(class AAIController* InController, class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "DetectRapidDirectionChange");

	Params::BTS_GodBot_SetFocus_C_DetectRapidDirectionChange Parms{};

	Parms.InController = InController;
	Parms.InPawn = InPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.DirectionChangeCooldownFinished
// (Public, BlueprintCallable, BlueprintEvent)

void UBTS_GodBot_SetFocus_C::DirectionChangeCooldownFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "DirectionChangeCooldownFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.DrawDebug
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OwnerPawn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DrawDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::DrawDebug(class AAIController* OwnerController, class AActor* OwnerPawn, float DrawDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "DrawDebug");

	Params::BTS_GodBot_SetFocus_C_DrawDebug Parms{};

	Parms.OwnerController = OwnerController;
	Parms.OwnerPawn = OwnerPawn;
	Parms.DrawDuration = DrawDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ExecuteUbergraph_BTS_GodBot_SetFocus
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::ExecuteUbergraph_BTS_GodBot_SetFocus(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "ExecuteUbergraph_BTS_GodBot_SetFocus");

	Params::BTS_GodBot_SetFocus_C_ExecuteUbergraph_BTS_GodBot_SetFocus Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.IsActorStealthToMe
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            OwnedPawn                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           InActor                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsStealthed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::IsActorStealthToMe(class APawn* OwnedPawn, class AActor* InActor, bool* IsStealthed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "IsActorStealthToMe");

	Params::BTS_GodBot_SetFocus_C_IsActorStealthToMe Parms{};

	Parms.OwnedPawn = OwnedPawn;
	Parms.InActor = InActor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsStealthed != nullptr)
		*IsStealthed = Parms.IsStealthed;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.OnAbilityPhaseChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UHWAbilitySystemComponent*        AbilitySystem                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayAbilitySpecHandle&AbilityHandle                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTagContainer&     AbilityTags                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// const EAbilityFlowPhase                 PrevPhase                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const EAbilityFlowPhase                 NextPhase                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::OnAbilityPhaseChanged(class UHWAbilitySystemComponent* AbilitySystem, const struct FGameplayAbilitySpecHandle& AbilityHandle, const struct FGameplayTagContainer& AbilityTags, const EAbilityFlowPhase PrevPhase, const EAbilityFlowPhase NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "OnAbilityPhaseChanged");

	Params::BTS_GodBot_SetFocus_C_OnAbilityPhaseChanged Parms{};

	Parms.AbilitySystem = AbilitySystem;
	Parms.AbilityHandle = std::move(AbilityHandle);
	Parms.AbilityTags = std::move(AbilityTags);
	Parms.PrevPhase = PrevPhase;
	Parms.NextPhase = NextPhase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveActivationAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "ReceiveActivationAI");

	Params::BTS_GodBot_SetFocus_C_ReceiveActivationAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveDeactivationAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "ReceiveDeactivationAI");

	Params::BTS_GodBot_SetFocus_C_ReceiveDeactivationAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "ReceiveTickAI");

	Params::BTS_GodBot_SetFocus_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.SetNewFocus
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::SetNewFocus(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "SetNewFocus");

	Params::BTS_GodBot_SetFocus_C_SetNewFocus Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusCurrentTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::TryFocusCurrentTarget(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "TryFocusCurrentTarget");

	Params::BTS_GodBot_SetFocus_C_TryFocusCurrentTarget Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusEnemyTower
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::TryFocusEnemyTower(class AAIController* OwnerController, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "TryFocusEnemyTower");

	Params::BTS_GodBot_SetFocus_C_TryFocusEnemyTower Parms{};

	Parms.OwnerController = OwnerController;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusForwardMovement
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::TryFocusForwardMovement(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "TryFocusForwardMovement");

	Params::BTS_GodBot_SetFocus_C_TryFocusForwardMovement Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusOnAllyGod
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::TryFocusOnAllyGod(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "TryFocusOnAllyGod");

	Params::BTS_GodBot_SetFocus_C_TryFocusOnAllyGod Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTS_GodBot_SetFocus.BTS_GodBot_SetFocus_C.TryFocusTowardEnemy
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTS_GodBot_SetFocus_C::TryFocusTowardEnemy(class AAIController* OwnerController, class APawn* ControlledPawn, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTS_GodBot_SetFocus_C", "TryFocusTowardEnemy");

	Params::BTS_GodBot_SetFocus_C_TryFocusTowardEnemy Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

