#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V1_Minimap

#include "Basic.hpp"

#include "RallyHereStart_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonInput_structs.hpp"
#include "HemingwayUI_classes.hpp"
#include "UMG_structs.hpp"
#include "EnhancedInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_G_V1_Minimap.WBP_G_V1_Minimap_C
// 0x0058 (0x0960 - 0x0908)
class UWBP_G_V1_Minimap_C final : public UHWMinimapWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0908(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_S_MultiPromptWidget_C*             BluePing;                                          // 0x0910(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_S_MultiPromptWidget_C*             ExitPrompt;                                        // 0x0918(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWHorizontalBox*                       GamepadPrompts_HorizontalBox;                      // 0x0920(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               MapBase;                                           // 0x0928(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               MinimapContainer;                                  // 0x0930(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWMinimapMinionCanvasWidget*           MinionBlipCanvas;                                  // 0x0938(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWScaleBox*                            ModiferScaleBox;                                   // 0x0940(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               PingCursor;                                        // 0x0948(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_S_MultiPromptWidget_C*             RedPing;                                           // 0x0950(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_S_MultiPromptWidget_C*             YellowPing;                                        // 0x0958(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void DisplayMapTexture(const TSoftObjectPtr<class UTexture2D>& MapTexture);
	void ExecuteUbergraph_WBP_G_V1_Minimap(int32 EntryPoint);
	float GetCustomModifierValue(const class FName& InCustomModifierName);
	void GetPingBounds(struct FVector2D* PingBounds);
	void HandleActiveInputModeChanged(ECommonInputMode InputMode);
	void HandleCurrentInputStateChanged(ERH_INPUT_STATE InputState);
	void HandleCustomModifierUpdated(const struct FHWUIStyleLocalCustomModifier& InCustomModifier);
	void HandleTogglePingCursor(bool bIsPingCursorActive);
	void InitializeWidget();
	void Input_MovePing(const struct FInputActionValue& InputActionValue);
	void MinimapFlippedChanged();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void UninitializeWidget();
	void UpdateVisionHighlightMaterial();

	class UWidget* BP_GetDesiredFocusTarget() const;
	struct FVector2D GetGamepadPingLocation() const;
	float GetMinimapScale() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_G_V1_Minimap_C">();
	}
	static class UWBP_G_V1_Minimap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_G_V1_Minimap_C>();
	}
};
static_assert(alignof(UWBP_G_V1_Minimap_C) == 0x000008, "Wrong alignment on UWBP_G_V1_Minimap_C");
static_assert(sizeof(UWBP_G_V1_Minimap_C) == 0x000960, "Wrong size on UWBP_G_V1_Minimap_C");
static_assert(offsetof(UWBP_G_V1_Minimap_C, UberGraphFrame) == 0x000908, "Member 'UWBP_G_V1_Minimap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, BluePing) == 0x000910, "Member 'UWBP_G_V1_Minimap_C::BluePing' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, ExitPrompt) == 0x000918, "Member 'UWBP_G_V1_Minimap_C::ExitPrompt' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, GamepadPrompts_HorizontalBox) == 0x000920, "Member 'UWBP_G_V1_Minimap_C::GamepadPrompts_HorizontalBox' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, MapBase) == 0x000928, "Member 'UWBP_G_V1_Minimap_C::MapBase' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, MinimapContainer) == 0x000930, "Member 'UWBP_G_V1_Minimap_C::MinimapContainer' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, MinionBlipCanvas) == 0x000938, "Member 'UWBP_G_V1_Minimap_C::MinionBlipCanvas' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, ModiferScaleBox) == 0x000940, "Member 'UWBP_G_V1_Minimap_C::ModiferScaleBox' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, PingCursor) == 0x000948, "Member 'UWBP_G_V1_Minimap_C::PingCursor' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, RedPing) == 0x000950, "Member 'UWBP_G_V1_Minimap_C::RedPing' has a wrong offset!");
static_assert(offsetof(UWBP_G_V1_Minimap_C, YellowPing) == 0x000958, "Member 'UWBP_G_V1_Minimap_C::YellowPing' has a wrong offset!");

}

