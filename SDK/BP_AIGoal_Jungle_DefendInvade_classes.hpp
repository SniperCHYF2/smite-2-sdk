#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_Jungle_DefendInvade

#include "Basic.hpp"

#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_Jungle_DefendInvade.BP_AIGoal_Jungle_DefendInvade_C
// 0x0028 (0x0110 - 0x00E8)
class UBP_AIGoal_Jungle_DefendInvade_C final : public UHWAIGoal
{
public:
	float                                         Max_Damaged_by_Time;                               // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AllLaneIds;                                        // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly)
	float                                         Max_Distance_from_Lane;                            // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TooCloseDistance;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckPreconditionsBP(class AHWAIController* InController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_Jungle_DefendInvade_C">();
	}
	static class UBP_AIGoal_Jungle_DefendInvade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_Jungle_DefendInvade_C>();
	}
};
static_assert(alignof(UBP_AIGoal_Jungle_DefendInvade_C) == 0x000008, "Wrong alignment on UBP_AIGoal_Jungle_DefendInvade_C");
static_assert(sizeof(UBP_AIGoal_Jungle_DefendInvade_C) == 0x000110, "Wrong size on UBP_AIGoal_Jungle_DefendInvade_C");
static_assert(offsetof(UBP_AIGoal_Jungle_DefendInvade_C, Max_Damaged_by_Time) == 0x0000E8, "Member 'UBP_AIGoal_Jungle_DefendInvade_C::Max_Damaged_by_Time' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Jungle_DefendInvade_C, AllLaneIds) == 0x0000F0, "Member 'UBP_AIGoal_Jungle_DefendInvade_C::AllLaneIds' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Jungle_DefendInvade_C, Max_Distance_from_Lane) == 0x000100, "Member 'UBP_AIGoal_Jungle_DefendInvade_C::Max_Distance_from_Lane' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Jungle_DefendInvade_C, TooCloseDistance) == 0x000108, "Member 'UBP_AIGoal_Jungle_DefendInvade_C::TooCloseDistance' has a wrong offset!");

}

