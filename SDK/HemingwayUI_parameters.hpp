#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HemingwayUI

#include "Basic.hpp"

#include "HemingwayUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "Hemingway_structs.hpp"
#include "RallyHereAPI_structs.hpp"
#include "AIModule_structs.hpp"
#include "BanPickDraftCommon_structs.hpp"
#include "RallyHereIntegration_structs.hpp"
#include "CommonInput_structs.hpp"
#include "Engine_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "InputCore_structs.hpp"
#include "DataTableSkinsCommon_structs.hpp"
#include "Slate_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function HemingwayUI.HWAccoladeStompAssessorBase.ShouldStomp
// 0x0200 (0x0200 - 0x0000)
struct HWAccoladeStompAssessorBase_ShouldStomp final
{
public:
	struct FHWAccoladeDisplayData                 Accolade1Data;                                     // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWAccoladeDisplayData                 Accolade2Data;                                     // 0x00A0(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWAccoladeConfig                      Accolade1Config;                                   // 0x0140(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWAccoladeConfig                      Accolade2Config;                                   // 0x0198(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHWGameHUD*                             GameHUD;                                           // 0x01F0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAccoladeStompAssessorBase_ShouldStomp) == 0x000008, "Wrong alignment on HWAccoladeStompAssessorBase_ShouldStomp");
static_assert(sizeof(HWAccoladeStompAssessorBase_ShouldStomp) == 0x000200, "Wrong size on HWAccoladeStompAssessorBase_ShouldStomp");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, Accolade1Data) == 0x000000, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::Accolade1Data' has a wrong offset!");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, Accolade2Data) == 0x0000A0, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::Accolade2Data' has a wrong offset!");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, Accolade1Config) == 0x000140, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::Accolade1Config' has a wrong offset!");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, Accolade2Config) == 0x000198, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::Accolade2Config' has a wrong offset!");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, GameHUD) == 0x0001F0, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::GameHUD' has a wrong offset!");
static_assert(offsetof(HWAccoladeStompAssessorBase_ShouldStomp, ReturnValue) == 0x0001F8, "Member 'HWAccoladeStompAssessorBase_ShouldStomp::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.AddNamedWidget
// 0x0020 (0x0020 - 0x0000)
struct HWWidget_AddNamedWidget final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWNamedWidget                         Data;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_AddNamedWidget) == 0x000008, "Wrong alignment on HWWidget_AddNamedWidget");
static_assert(sizeof(HWWidget_AddNamedWidget) == 0x000020, "Wrong size on HWWidget_AddNamedWidget");
static_assert(offsetof(HWWidget_AddNamedWidget, Name_0) == 0x000000, "Member 'HWWidget_AddNamedWidget::Name_0' has a wrong offset!");
static_assert(offsetof(HWWidget_AddNamedWidget, Data) == 0x000008, "Member 'HWWidget_AddNamedWidget::Data' has a wrong offset!");

// Function HemingwayUI.HWWidget.BP_OnHandleSelectAction
// 0x0001 (0x0001 - 0x0000)
struct HWWidget_BP_OnHandleSelectAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_BP_OnHandleSelectAction) == 0x000001, "Wrong alignment on HWWidget_BP_OnHandleSelectAction");
static_assert(sizeof(HWWidget_BP_OnHandleSelectAction) == 0x000001, "Wrong size on HWWidget_BP_OnHandleSelectAction");
static_assert(offsetof(HWWidget_BP_OnHandleSelectAction, ReturnValue) == 0x000000, "Member 'HWWidget_BP_OnHandleSelectAction::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetCustomModifierValue
// 0x000C (0x000C - 0x0000)
struct HWWidget_GetCustomModifierValue final
{
public:
	class FName                                   InCustomModifierName;                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetCustomModifierValue) == 0x000004, "Wrong alignment on HWWidget_GetCustomModifierValue");
static_assert(sizeof(HWWidget_GetCustomModifierValue) == 0x00000C, "Wrong size on HWWidget_GetCustomModifierValue");
static_assert(offsetof(HWWidget_GetCustomModifierValue, InCustomModifierName) == 0x000000, "Member 'HWWidget_GetCustomModifierValue::InCustomModifierName' has a wrong offset!");
static_assert(offsetof(HWWidget_GetCustomModifierValue, ReturnValue) == 0x000008, "Member 'HWWidget_GetCustomModifierValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.HandleCustomModifierUpdated
// 0x0068 (0x0068 - 0x0000)
struct HWWidget_HandleCustomModifierUpdated final
{
public:
	struct FHWUIStyleLocalCustomModifier          InCustomModifier;                                  // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_HandleCustomModifierUpdated) == 0x000008, "Wrong alignment on HWWidget_HandleCustomModifierUpdated");
static_assert(sizeof(HWWidget_HandleCustomModifierUpdated) == 0x000068, "Wrong size on HWWidget_HandleCustomModifierUpdated");
static_assert(offsetof(HWWidget_HandleCustomModifierUpdated, InCustomModifier) == 0x000000, "Member 'HWWidget_HandleCustomModifierUpdated::InCustomModifier' has a wrong offset!");

// Function HemingwayUI.HWWidget.HandleViewRedirect
// 0x0010 (0x0010 - 0x0000)
struct HWWidget_HandleViewRedirect final
{
public:
	class UHWViewRedirectContext*                 RedirectContext;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWidget_HandleViewRedirect) == 0x000008, "Wrong alignment on HWWidget_HandleViewRedirect");
static_assert(sizeof(HWWidget_HandleViewRedirect) == 0x000010, "Wrong size on HWWidget_HandleViewRedirect");
static_assert(offsetof(HWWidget_HandleViewRedirect, RedirectContext) == 0x000000, "Member 'HWWidget_HandleViewRedirect::RedirectContext' has a wrong offset!");
static_assert(offsetof(HWWidget_HandleViewRedirect, ReturnValue) == 0x000008, "Member 'HWWidget_HandleViewRedirect::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.InvalidateLayout
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_InvalidateLayout final
{
public:
	class UWidget*                                WidgetToInvalidate;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_InvalidateLayout) == 0x000008, "Wrong alignment on HWWidget_InvalidateLayout");
static_assert(sizeof(HWWidget_InvalidateLayout) == 0x000008, "Wrong size on HWWidget_InvalidateLayout");
static_assert(offsetof(HWWidget_InvalidateLayout, WidgetToInvalidate) == 0x000000, "Member 'HWWidget_InvalidateLayout::WidgetToInvalidate' has a wrong offset!");

// Function HemingwayUI.HWWidget.InvalidateOnChildrenChanged
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_InvalidateOnChildrenChanged final
{
public:
	class UWidget*                                WidgetToInvalidate;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_InvalidateOnChildrenChanged) == 0x000008, "Wrong alignment on HWWidget_InvalidateOnChildrenChanged");
static_assert(sizeof(HWWidget_InvalidateOnChildrenChanged) == 0x000008, "Wrong size on HWWidget_InvalidateOnChildrenChanged");
static_assert(offsetof(HWWidget_InvalidateOnChildrenChanged, WidgetToInvalidate) == 0x000000, "Member 'HWWidget_InvalidateOnChildrenChanged::WidgetToInvalidate' has a wrong offset!");

// Function HemingwayUI.HWWidget.InvalidatePaint
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_InvalidatePaint final
{
public:
	class UWidget*                                WidgetToInvalidate;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_InvalidatePaint) == 0x000008, "Wrong alignment on HWWidget_InvalidatePaint");
static_assert(sizeof(HWWidget_InvalidatePaint) == 0x000008, "Wrong size on HWWidget_InvalidatePaint");
static_assert(offsetof(HWWidget_InvalidatePaint, WidgetToInvalidate) == 0x000000, "Member 'HWWidget_InvalidatePaint::WidgetToInvalidate' has a wrong offset!");

// Function HemingwayUI.HWWidget.OverrideBackDisplayName
// 0x0018 (0x0018 - 0x0000)
struct HWWidget_OverrideBackDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_OverrideBackDisplayName) == 0x000008, "Wrong alignment on HWWidget_OverrideBackDisplayName");
static_assert(sizeof(HWWidget_OverrideBackDisplayName) == 0x000018, "Wrong size on HWWidget_OverrideBackDisplayName");
static_assert(offsetof(HWWidget_OverrideBackDisplayName, DisplayName) == 0x000000, "Member 'HWWidget_OverrideBackDisplayName::DisplayName' has a wrong offset!");

// Function HemingwayUI.HWWidget.OverrideSelectDisplayName
// 0x0018 (0x0018 - 0x0000)
struct HWWidget_OverrideSelectDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_OverrideSelectDisplayName) == 0x000008, "Wrong alignment on HWWidget_OverrideSelectDisplayName");
static_assert(sizeof(HWWidget_OverrideSelectDisplayName) == 0x000018, "Wrong size on HWWidget_OverrideSelectDisplayName");
static_assert(offsetof(HWWidget_OverrideSelectDisplayName, DisplayName) == 0x000000, "Member 'HWWidget_OverrideSelectDisplayName::DisplayName' has a wrong offset!");

// Function HemingwayUI.HWWidget.PopTopRouteFromLayer
// 0x000C (0x000C - 0x0000)
struct HWWidget_PopTopRouteFromLayer final
{
public:
	struct FGameplayTag                           ReferenceRouteTag;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWidget_PopTopRouteFromLayer) == 0x000004, "Wrong alignment on HWWidget_PopTopRouteFromLayer");
static_assert(sizeof(HWWidget_PopTopRouteFromLayer) == 0x00000C, "Wrong size on HWWidget_PopTopRouteFromLayer");
static_assert(offsetof(HWWidget_PopTopRouteFromLayer, ReferenceRouteTag) == 0x000000, "Member 'HWWidget_PopTopRouteFromLayer::ReferenceRouteTag' has a wrong offset!");
static_assert(offsetof(HWWidget_PopTopRouteFromLayer, bForceTransition) == 0x000008, "Member 'HWWidget_PopTopRouteFromLayer::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWWidget_PopTopRouteFromLayer, ReturnValue) == 0x000009, "Member 'HWWidget_PopTopRouteFromLayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.RemoveNamedWidget
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_RemoveNamedWidget final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_RemoveNamedWidget) == 0x000004, "Wrong alignment on HWWidget_RemoveNamedWidget");
static_assert(sizeof(HWWidget_RemoveNamedWidget) == 0x000008, "Wrong size on HWWidget_RemoveNamedWidget");
static_assert(offsetof(HWWidget_RemoveNamedWidget, Name_0) == 0x000000, "Member 'HWWidget_RemoveNamedWidget::Name_0' has a wrong offset!");

// Function HemingwayUI.HWWidget.ReplaceWithDefaultRoute
// 0x0002 (0x0002 - 0x0000)
struct HWWidget_ReplaceWithDefaultRoute final
{
public:
	bool                                          bForceTransition;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_ReplaceWithDefaultRoute) == 0x000001, "Wrong alignment on HWWidget_ReplaceWithDefaultRoute");
static_assert(sizeof(HWWidget_ReplaceWithDefaultRoute) == 0x000002, "Wrong size on HWWidget_ReplaceWithDefaultRoute");
static_assert(offsetof(HWWidget_ReplaceWithDefaultRoute, bForceTransition) == 0x000000, "Member 'HWWidget_ReplaceWithDefaultRoute::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWWidget_ReplaceWithDefaultRoute, ReturnValue) == 0x000001, "Member 'HWWidget_ReplaceWithDefaultRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.ReplaceWithRoute
// 0x0020 (0x0020 - 0x0000)
struct HWWidget_ReplaceWithRoute final
{
public:
	struct FGameplayTag                           NewRouteTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RouteData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWidget_ReplaceWithRoute) == 0x000008, "Wrong alignment on HWWidget_ReplaceWithRoute");
static_assert(sizeof(HWWidget_ReplaceWithRoute) == 0x000020, "Wrong size on HWWidget_ReplaceWithRoute");
static_assert(offsetof(HWWidget_ReplaceWithRoute, NewRouteTag) == 0x000000, "Member 'HWWidget_ReplaceWithRoute::NewRouteTag' has a wrong offset!");
static_assert(offsetof(HWWidget_ReplaceWithRoute, bForceTransition) == 0x000008, "Member 'HWWidget_ReplaceWithRoute::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWWidget_ReplaceWithRoute, RouteData) == 0x000010, "Member 'HWWidget_ReplaceWithRoute::RouteData' has a wrong offset!");
static_assert(offsetof(HWWidget_ReplaceWithRoute, ReturnValue) == 0x000018, "Member 'HWWidget_ReplaceWithRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.ToggleRoute
// 0x0020 (0x0020 - 0x0000)
struct HWWidget_ToggleRoute final
{
public:
	struct FGameplayTag                           InRouteTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RouteData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWidget_ToggleRoute) == 0x000008, "Wrong alignment on HWWidget_ToggleRoute");
static_assert(sizeof(HWWidget_ToggleRoute) == 0x000020, "Wrong size on HWWidget_ToggleRoute");
static_assert(offsetof(HWWidget_ToggleRoute, InRouteTag) == 0x000000, "Member 'HWWidget_ToggleRoute::InRouteTag' has a wrong offset!");
static_assert(offsetof(HWWidget_ToggleRoute, bForceTransition) == 0x000008, "Member 'HWWidget_ToggleRoute::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWWidget_ToggleRoute, RouteData) == 0x000010, "Member 'HWWidget_ToggleRoute::RouteData' has a wrong offset!");
static_assert(offsetof(HWWidget_ToggleRoute, ReturnValue) == 0x000018, "Member 'HWWidget_ToggleRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.TriggerAlertByWidgetGeometry
// 0x0058 (0x0058 - 0x0000)
struct HWWidget_TriggerAlertByWidgetGeometry final
{
public:
	struct FGameplayTag                           AlertTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Coordinates;                                       // 0x0040(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWidget_TriggerAlertByWidgetGeometry) == 0x000008, "Wrong alignment on HWWidget_TriggerAlertByWidgetGeometry");
static_assert(sizeof(HWWidget_TriggerAlertByWidgetGeometry) == 0x000058, "Wrong size on HWWidget_TriggerAlertByWidgetGeometry");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetGeometry, AlertTag) == 0x000000, "Member 'HWWidget_TriggerAlertByWidgetGeometry::AlertTag' has a wrong offset!");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetGeometry, ReferenceGeometry) == 0x000008, "Member 'HWWidget_TriggerAlertByWidgetGeometry::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetGeometry, Coordinates) == 0x000040, "Member 'HWWidget_TriggerAlertByWidgetGeometry::Coordinates' has a wrong offset!");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetGeometry, Duration) == 0x000050, "Member 'HWWidget_TriggerAlertByWidgetGeometry::Duration' has a wrong offset!");

// Function HemingwayUI.HWWidget.TriggerAlertByWidgetName
// 0x0014 (0x0014 - 0x0000)
struct HWWidget_TriggerAlertByWidgetName final
{
public:
	struct FGameplayTag                           AlertTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WidgetName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_TriggerAlertByWidgetName) == 0x000004, "Wrong alignment on HWWidget_TriggerAlertByWidgetName");
static_assert(sizeof(HWWidget_TriggerAlertByWidgetName) == 0x000014, "Wrong size on HWWidget_TriggerAlertByWidgetName");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetName, AlertTag) == 0x000000, "Member 'HWWidget_TriggerAlertByWidgetName::AlertTag' has a wrong offset!");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetName, WidgetName) == 0x000008, "Member 'HWWidget_TriggerAlertByWidgetName::WidgetName' has a wrong offset!");
static_assert(offsetof(HWWidget_TriggerAlertByWidgetName, Duration) == 0x000010, "Member 'HWWidget_TriggerAlertByWidgetName::Duration' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetActiveHUDLayoutPreset
// 0x0001 (0x0001 - 0x0000)
struct HWWidget_GetActiveHUDLayoutPreset final
{
public:
	EHWHUDLayoutPreset                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetActiveHUDLayoutPreset) == 0x000001, "Wrong alignment on HWWidget_GetActiveHUDLayoutPreset");
static_assert(sizeof(HWWidget_GetActiveHUDLayoutPreset) == 0x000001, "Wrong size on HWWidget_GetActiveHUDLayoutPreset");
static_assert(offsetof(HWWidget_GetActiveHUDLayoutPreset, ReturnValue) == 0x000000, "Member 'HWWidget_GetActiveHUDLayoutPreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetBaseHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetBaseHUDWidget final
{
public:
	class UHWBaseHUDWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetBaseHUDWidget) == 0x000008, "Wrong alignment on HWWidget_GetBaseHUDWidget");
static_assert(sizeof(HWWidget_GetBaseHUDWidget) == 0x000008, "Wrong size on HWWidget_GetBaseHUDWidget");
static_assert(offsetof(HWWidget_GetBaseHUDWidget, ReturnValue) == 0x000000, "Member 'HWWidget_GetBaseHUDWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetCurrentInputState
// 0x0001 (0x0001 - 0x0000)
struct HWWidget_GetCurrentInputState final
{
public:
	ERH_INPUT_STATE                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetCurrentInputState) == 0x000001, "Wrong alignment on HWWidget_GetCurrentInputState");
static_assert(sizeof(HWWidget_GetCurrentInputState) == 0x000001, "Wrong size on HWWidget_GetCurrentInputState");
static_assert(offsetof(HWWidget_GetCurrentInputState, ReturnValue) == 0x000000, "Member 'HWWidget_GetCurrentInputState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetDefaultSelectDisplayName
// 0x0018 (0x0018 - 0x0000)
struct HWWidget_GetDefaultSelectDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetDefaultSelectDisplayName) == 0x000008, "Wrong alignment on HWWidget_GetDefaultSelectDisplayName");
static_assert(sizeof(HWWidget_GetDefaultSelectDisplayName) == 0x000018, "Wrong size on HWWidget_GetDefaultSelectDisplayName");
static_assert(offsetof(HWWidget_GetDefaultSelectDisplayName, ReturnValue) == 0x000000, "Member 'HWWidget_GetDefaultSelectDisplayName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsBase
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsBase final
{
public:
	class AHWBaseHUD*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsBase) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsBase");
static_assert(sizeof(HWWidget_GetLocalHUDAsBase) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsBase");
static_assert(offsetof(HWWidget_GetLocalHUDAsBase, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsBase::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsClient
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsClient final
{
public:
	class AHWClientHUD*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsClient) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsClient");
static_assert(sizeof(HWWidget_GetLocalHUDAsClient) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsClient");
static_assert(offsetof(HWWidget_GetLocalHUDAsClient, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsClient::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsDraftLobby
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsDraftLobby final
{
public:
	class AHWDraftLobbyHUD*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsDraftLobby) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsDraftLobby");
static_assert(sizeof(HWWidget_GetLocalHUDAsDraftLobby) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsDraftLobby");
static_assert(offsetof(HWWidget_GetLocalHUDAsDraftLobby, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsDraftLobby::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsGame
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsGame final
{
public:
	class AHWGameHUD*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsGame) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsGame");
static_assert(sizeof(HWWidget_GetLocalHUDAsGame) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsGame");
static_assert(offsetof(HWWidget_GetLocalHUDAsGame, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsGame::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsLobby
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsLobby final
{
public:
	class AHWLobbyHUD*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsLobby) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsLobby");
static_assert(sizeof(HWWidget_GetLocalHUDAsLobby) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsLobby");
static_assert(offsetof(HWWidget_GetLocalHUDAsLobby, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsLobby::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsRHCommon
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsRHCommon final
{
public:
	class ARHHUDCommon*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsRHCommon) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsRHCommon");
static_assert(sizeof(HWWidget_GetLocalHUDAsRHCommon) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsRHCommon");
static_assert(offsetof(HWWidget_GetLocalHUDAsRHCommon, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsRHCommon::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDAsSpectator
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDAsSpectator final
{
public:
	class AHWSpectatorHUD*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDAsSpectator) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDAsSpectator");
static_assert(sizeof(HWWidget_GetLocalHUDAsSpectator) == 0x000008, "Wrong size on HWWidget_GetLocalHUDAsSpectator");
static_assert(offsetof(HWWidget_GetLocalHUDAsSpectator, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDAsSpectator::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalHUDWorld
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalHUDWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalHUDWorld) == 0x000008, "Wrong alignment on HWWidget_GetLocalHUDWorld");
static_assert(sizeof(HWWidget_GetLocalHUDWorld) == 0x000008, "Wrong size on HWWidget_GetLocalHUDWorld");
static_assert(offsetof(HWWidget_GetLocalHUDWorld, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalHUDWorld::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalPlayer final
{
public:
	class ULocalPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalPlayer) == 0x000008, "Wrong alignment on HWWidget_GetLocalPlayer");
static_assert(sizeof(HWWidget_GetLocalPlayer) == 0x000008, "Wrong size on HWWidget_GetLocalPlayer");
static_assert(offsetof(HWWidget_GetLocalPlayer, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalPlayerController final
{
public:
	class AHWPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalPlayerController) == 0x000008, "Wrong alignment on HWWidget_GetLocalPlayerController");
static_assert(sizeof(HWWidget_GetLocalPlayerController) == 0x000008, "Wrong size on HWWidget_GetLocalPlayerController");
static_assert(offsetof(HWWidget_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalPlayerInfo final
{
public:
	class UHWPlayerInfo*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalPlayerInfo) == 0x000008, "Wrong alignment on HWWidget_GetLocalPlayerInfo");
static_assert(sizeof(HWWidget_GetLocalPlayerInfo) == 0x000008, "Wrong size on HWWidget_GetLocalPlayerInfo");
static_assert(offsetof(HWWidget_GetLocalPlayerInfo, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalPlayerInfo::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetLocalPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetLocalPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetLocalPlayerState) == 0x000008, "Wrong alignment on HWWidget_GetLocalPlayerState");
static_assert(sizeof(HWWidget_GetLocalPlayerState) == 0x000008, "Wrong size on HWWidget_GetLocalPlayerState");
static_assert(offsetof(HWWidget_GetLocalPlayerState, ReturnValue) == 0x000000, "Member 'HWWidget_GetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetNavigationStitchEntry
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetNavigationStitchEntry final
{
public:
	class UPanelWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetNavigationStitchEntry) == 0x000008, "Wrong alignment on HWWidget_GetNavigationStitchEntry");
static_assert(sizeof(HWWidget_GetNavigationStitchEntry) == 0x000008, "Wrong size on HWWidget_GetNavigationStitchEntry");
static_assert(offsetof(HWWidget_GetNavigationStitchEntry, ReturnValue) == 0x000000, "Member 'HWWidget_GetNavigationStitchEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetViewRedirectOnBackTag
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetViewRedirectOnBackTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetViewRedirectOnBackTag) == 0x000004, "Wrong alignment on HWWidget_GetViewRedirectOnBackTag");
static_assert(sizeof(HWWidget_GetViewRedirectOnBackTag) == 0x000008, "Wrong size on HWWidget_GetViewRedirectOnBackTag");
static_assert(offsetof(HWWidget_GetViewRedirectOnBackTag, ReturnValue) == 0x000000, "Member 'HWWidget_GetViewRedirectOnBackTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidget.GetWidgetToFade
// 0x0008 (0x0008 - 0x0000)
struct HWWidget_GetWidgetToFade final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidget_GetWidgetToFade) == 0x000008, "Wrong alignment on HWWidget_GetWidgetToFade");
static_assert(sizeof(HWWidget_GetWidgetToFade) == 0x000008, "Wrong size on HWWidget_GetWidgetToFade");
static_assert(offsetof(HWWidget_GetWidgetToFade, ReturnValue) == 0x000000, "Member 'HWWidget_GetWidgetToFade::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionBlipWidget.SetMinionBlipType
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapMinionBlipWidget_SetMinionBlipType final
{
public:
	EHWMinionBlipType                             MinionType;                                        // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionBlipWidget_SetMinionBlipType) == 0x000001, "Wrong alignment on HWMinimapMinionBlipWidget_SetMinionBlipType");
static_assert(sizeof(HWMinimapMinionBlipWidget_SetMinionBlipType) == 0x000001, "Wrong size on HWMinimapMinionBlipWidget_SetMinionBlipType");
static_assert(offsetof(HWMinimapMinionBlipWidget_SetMinionBlipType, MinionType) == 0x000000, "Member 'HWMinimapMinionBlipWidget_SetMinionBlipType::MinionType' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionBlipWidget.SetTeamColoration
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapMinionBlipWidget_SetTeamColoration final
{
public:
	bool                                          bFriendly;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionBlipWidget_SetTeamColoration) == 0x000001, "Wrong alignment on HWMinimapMinionBlipWidget_SetTeamColoration");
static_assert(sizeof(HWMinimapMinionBlipWidget_SetTeamColoration) == 0x000001, "Wrong size on HWMinimapMinionBlipWidget_SetTeamColoration");
static_assert(offsetof(HWMinimapMinionBlipWidget_SetTeamColoration, bFriendly) == 0x000000, "Member 'HWMinimapMinionBlipWidget_SetTeamColoration::bFriendly' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionBlipWidget.ToggleFireStateDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapMinionBlipWidget_ToggleFireStateDisplay final
{
public:
	bool                                          bInIsFireMinion;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionBlipWidget_ToggleFireStateDisplay) == 0x000001, "Wrong alignment on HWMinimapMinionBlipWidget_ToggleFireStateDisplay");
static_assert(sizeof(HWMinimapMinionBlipWidget_ToggleFireStateDisplay) == 0x000001, "Wrong size on HWMinimapMinionBlipWidget_ToggleFireStateDisplay");
static_assert(offsetof(HWMinimapMinionBlipWidget_ToggleFireStateDisplay, bInIsFireMinion) == 0x000000, "Member 'HWMinimapMinionBlipWidget_ToggleFireStateDisplay::bInIsFireMinion' has a wrong offset!");

// Function HemingwayUI.HWAnimatedGridPanel.SetEntryIndex
// 0x0010 (0x0010 - 0x0000)
struct HWAnimatedGridPanel_SetEntryIndex final
{
public:
	class UHWWidget*                              SetWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Entry;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAnimatedGridPanel_SetEntryIndex) == 0x000008, "Wrong alignment on HWAnimatedGridPanel_SetEntryIndex");
static_assert(sizeof(HWAnimatedGridPanel_SetEntryIndex) == 0x000010, "Wrong size on HWAnimatedGridPanel_SetEntryIndex");
static_assert(offsetof(HWAnimatedGridPanel_SetEntryIndex, SetWidget) == 0x000000, "Member 'HWAnimatedGridPanel_SetEntryIndex::SetWidget' has a wrong offset!");
static_assert(offsetof(HWAnimatedGridPanel_SetEntryIndex, Entry) == 0x000008, "Member 'HWAnimatedGridPanel_SetEntryIndex::Entry' has a wrong offset!");

// Function HemingwayUI.HWAnimatedGridPanel.SwapWidgetData
// 0x0010 (0x0010 - 0x0000)
struct HWAnimatedGridPanel_SwapWidgetData final
{
public:
	class UHWWidget*                              WidgetOne;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              WidgetTwo;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAnimatedGridPanel_SwapWidgetData) == 0x000008, "Wrong alignment on HWAnimatedGridPanel_SwapWidgetData");
static_assert(sizeof(HWAnimatedGridPanel_SwapWidgetData) == 0x000010, "Wrong size on HWAnimatedGridPanel_SwapWidgetData");
static_assert(offsetof(HWAnimatedGridPanel_SwapWidgetData, WidgetOne) == 0x000000, "Member 'HWAnimatedGridPanel_SwapWidgetData::WidgetOne' has a wrong offset!");
static_assert(offsetof(HWAnimatedGridPanel_SwapWidgetData, WidgetTwo) == 0x000008, "Member 'HWAnimatedGridPanel_SwapWidgetData::WidgetTwo' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.AddedEditableEntry
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorWidget_AddedEditableEntry final
{
public:
	class UHWHUDEditorEditableEntry*              AddedEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_AddedEditableEntry) == 0x000008, "Wrong alignment on HWHUDEditorWidget_AddedEditableEntry");
static_assert(sizeof(HWHUDEditorWidget_AddedEditableEntry) == 0x000008, "Wrong size on HWHUDEditorWidget_AddedEditableEntry");
static_assert(offsetof(HWHUDEditorWidget_AddedEditableEntry, AddedEntry) == 0x000000, "Member 'HWHUDEditorWidget_AddedEditableEntry::AddedEntry' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.HandleEditableEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorWidget_HandleEditableEntrySelected final
{
public:
	class UHWHUDEditorEditableEntry*              EditableEntry;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_HandleEditableEntrySelected) == 0x000008, "Wrong alignment on HWHUDEditorWidget_HandleEditableEntrySelected");
static_assert(sizeof(HWHUDEditorWidget_HandleEditableEntrySelected) == 0x000008, "Wrong size on HWHUDEditorWidget_HandleEditableEntrySelected");
static_assert(offsetof(HWHUDEditorWidget_HandleEditableEntrySelected, EditableEntry) == 0x000000, "Member 'HWHUDEditorWidget_HandleEditableEntrySelected::EditableEntry' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.RemovedEditableEntry
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorWidget_RemovedEditableEntry final
{
public:
	class UHWHUDEditorEditableEntry*              RemovedEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_RemovedEditableEntry) == 0x000008, "Wrong alignment on HWHUDEditorWidget_RemovedEditableEntry");
static_assert(sizeof(HWHUDEditorWidget_RemovedEditableEntry) == 0x000008, "Wrong size on HWHUDEditorWidget_RemovedEditableEntry");
static_assert(offsetof(HWHUDEditorWidget_RemovedEditableEntry, RemovedEntry) == 0x000000, "Member 'HWHUDEditorWidget_RemovedEditableEntry::RemovedEntry' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.SelectedEntryChanged
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorWidget_SelectedEntryChanged final
{
public:
	class UHWHUDEditorEditableEntry*              NewSelectedEntry;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_SelectedEntryChanged) == 0x000008, "Wrong alignment on HWHUDEditorWidget_SelectedEntryChanged");
static_assert(sizeof(HWHUDEditorWidget_SelectedEntryChanged) == 0x000008, "Wrong size on HWHUDEditorWidget_SelectedEntryChanged");
static_assert(offsetof(HWHUDEditorWidget_SelectedEntryChanged, NewSelectedEntry) == 0x000000, "Member 'HWHUDEditorWidget_SelectedEntryChanged::NewSelectedEntry' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.SetGlobalColorModifier
// 0x0018 (0x0018 - 0x0000)
struct HWHUDEditorWidget_SetGlobalColorModifier final
{
public:
	struct FGameplayTag                           ColorTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_SetGlobalColorModifier) == 0x000004, "Wrong alignment on HWHUDEditorWidget_SetGlobalColorModifier");
static_assert(sizeof(HWHUDEditorWidget_SetGlobalColorModifier) == 0x000018, "Wrong size on HWHUDEditorWidget_SetGlobalColorModifier");
static_assert(offsetof(HWHUDEditorWidget_SetGlobalColorModifier, ColorTag) == 0x000000, "Member 'HWHUDEditorWidget_SetGlobalColorModifier::ColorTag' has a wrong offset!");
static_assert(offsetof(HWHUDEditorWidget_SetGlobalColorModifier, Color) == 0x000008, "Member 'HWHUDEditorWidget_SetGlobalColorModifier::Color' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.SetGlobalScaleModifier
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorWidget_SetGlobalScaleModifier final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_SetGlobalScaleModifier) == 0x000004, "Wrong alignment on HWHUDEditorWidget_SetGlobalScaleModifier");
static_assert(sizeof(HWHUDEditorWidget_SetGlobalScaleModifier) == 0x000004, "Wrong size on HWHUDEditorWidget_SetGlobalScaleModifier");
static_assert(offsetof(HWHUDEditorWidget_SetGlobalScaleModifier, NewScale) == 0x000000, "Member 'HWHUDEditorWidget_SetGlobalScaleModifier::NewScale' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.UpdateHasUnsavedChanges
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorWidget_UpdateHasUnsavedChanges final
{
public:
	bool                                          bHasUnsavedChanges;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_UpdateHasUnsavedChanges) == 0x000001, "Wrong alignment on HWHUDEditorWidget_UpdateHasUnsavedChanges");
static_assert(sizeof(HWHUDEditorWidget_UpdateHasUnsavedChanges) == 0x000001, "Wrong size on HWHUDEditorWidget_UpdateHasUnsavedChanges");
static_assert(offsetof(HWHUDEditorWidget_UpdateHasUnsavedChanges, bHasUnsavedChanges) == 0x000000, "Member 'HWHUDEditorWidget_UpdateHasUnsavedChanges::bHasUnsavedChanges' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorWidget.GetSelectedEntry
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorWidget_GetSelectedEntry final
{
public:
	class UHWHUDEditorEditableEntry*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorWidget_GetSelectedEntry) == 0x000008, "Wrong alignment on HWHUDEditorWidget_GetSelectedEntry");
static_assert(sizeof(HWHUDEditorWidget_GetSelectedEntry) == 0x000008, "Wrong size on HWHUDEditorWidget_GetSelectedEntry");
static_assert(offsetof(HWHUDEditorWidget_GetSelectedEntry, ReturnValue) == 0x000000, "Member 'HWHUDEditorWidget_GetSelectedEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.PopulateWithBuffData
// 0x0008 (0x0008 - 0x0000)
struct HWBuffWidget_PopulateWithBuffData final
{
public:
	const class UHWGameplayEffectUIBuffData*      BuffData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_PopulateWithBuffData) == 0x000008, "Wrong alignment on HWBuffWidget_PopulateWithBuffData");
static_assert(sizeof(HWBuffWidget_PopulateWithBuffData) == 0x000008, "Wrong size on HWBuffWidget_PopulateWithBuffData");
static_assert(offsetof(HWBuffWidget_PopulateWithBuffData, BuffData) == 0x000000, "Member 'HWBuffWidget_PopulateWithBuffData::BuffData' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.SetBuffEndTime
// 0x0004 (0x0004 - 0x0000)
struct HWBuffWidget_SetBuffEndTime final
{
public:
	float                                         InEndTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_SetBuffEndTime) == 0x000004, "Wrong alignment on HWBuffWidget_SetBuffEndTime");
static_assert(sizeof(HWBuffWidget_SetBuffEndTime) == 0x000004, "Wrong size on HWBuffWidget_SetBuffEndTime");
static_assert(offsetof(HWBuffWidget_SetBuffEndTime, InEndTime) == 0x000000, "Member 'HWBuffWidget_SetBuffEndTime::InEndTime' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.SetBuffStacks
// 0x0004 (0x0004 - 0x0000)
struct HWBuffWidget_SetBuffStacks final
{
public:
	int32                                         InStackCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_SetBuffStacks) == 0x000004, "Wrong alignment on HWBuffWidget_SetBuffStacks");
static_assert(sizeof(HWBuffWidget_SetBuffStacks) == 0x000004, "Wrong size on HWBuffWidget_SetBuffStacks");
static_assert(offsetof(HWBuffWidget_SetBuffStacks, InStackCount) == 0x000000, "Member 'HWBuffWidget_SetBuffStacks::InStackCount' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.SetBuffWidgetType
// 0x0001 (0x0001 - 0x0000)
struct HWBuffWidget_SetBuffWidgetType final
{
public:
	EHWBuffWidgetType                             BuffWidgetType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_SetBuffWidgetType) == 0x000001, "Wrong alignment on HWBuffWidget_SetBuffWidgetType");
static_assert(sizeof(HWBuffWidget_SetBuffWidgetType) == 0x000001, "Wrong size on HWBuffWidget_SetBuffWidgetType");
static_assert(offsetof(HWBuffWidget_SetBuffWidgetType, BuffWidgetType) == 0x000000, "Member 'HWBuffWidget_SetBuffWidgetType::BuffWidgetType' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWBuffWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWBuffWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWBuffWidget_ShowTooltip");
static_assert(sizeof(HWBuffWidget_ShowTooltip) == 0x000010, "Wrong size on HWBuffWidget_ShowTooltip");
static_assert(offsetof(HWBuffWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWBuffWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWBuffWidget_ShowTooltip, Axis) == 0x000008, "Member 'HWBuffWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.GetCurrentBuffData
// 0x0008 (0x0008 - 0x0000)
struct HWBuffWidget_GetCurrentBuffData final
{
public:
	const class UHWGameplayEffectUIBuffData*      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_GetCurrentBuffData) == 0x000008, "Wrong alignment on HWBuffWidget_GetCurrentBuffData");
static_assert(sizeof(HWBuffWidget_GetCurrentBuffData) == 0x000008, "Wrong size on HWBuffWidget_GetCurrentBuffData");
static_assert(offsetof(HWBuffWidget_GetCurrentBuffData, ReturnValue) == 0x000000, "Member 'HWBuffWidget_GetCurrentBuffData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBuffWidget.GetTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct HWBuffWidget_GetTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBuffWidget_GetTimeRemaining) == 0x000004, "Wrong alignment on HWBuffWidget_GetTimeRemaining");
static_assert(sizeof(HWBuffWidget_GetTimeRemaining) == 0x000004, "Wrong size on HWBuffWidget_GetTimeRemaining");
static_assert(offsetof(HWBuffWidget_GetTimeRemaining, ReturnValue) == 0x000000, "Member 'HWBuffWidget_GetTimeRemaining::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.CharacterItemChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_CharacterItemChanged final
{
public:
	const class UHWCharacterItem*                 NewCharacterItem;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_CharacterItemChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_CharacterItemChanged");
static_assert(sizeof(HWCharacterWidget_CharacterItemChanged) == 0x000008, "Wrong size on HWCharacterWidget_CharacterItemChanged");
static_assert(offsetof(HWCharacterWidget_CharacterItemChanged, NewCharacterItem) == 0x000000, "Member 'HWCharacterWidget_CharacterItemChanged::NewCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.CharacterOwnerChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_CharacterOwnerChanged final
{
public:
	class AHWCharacter_Base*                      NewCharacterOwner;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_CharacterOwnerChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_CharacterOwnerChanged");
static_assert(sizeof(HWCharacterWidget_CharacterOwnerChanged) == 0x000008, "Wrong size on HWCharacterWidget_CharacterOwnerChanged");
static_assert(offsetof(HWCharacterWidget_CharacterOwnerChanged, NewCharacterOwner) == 0x000000, "Member 'HWCharacterWidget_CharacterOwnerChanged::NewCharacterOwner' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.CharacterTeamUpdated
// 0x0002 (0x0002 - 0x0000)
struct HWCharacterWidget_CharacterTeamUpdated final
{
public:
	struct FGenericTeamId                         GenericTeamId;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 AttitudeTowardsLocal;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_CharacterTeamUpdated) == 0x000001, "Wrong alignment on HWCharacterWidget_CharacterTeamUpdated");
static_assert(sizeof(HWCharacterWidget_CharacterTeamUpdated) == 0x000002, "Wrong size on HWCharacterWidget_CharacterTeamUpdated");
static_assert(offsetof(HWCharacterWidget_CharacterTeamUpdated, GenericTeamId) == 0x000000, "Member 'HWCharacterWidget_CharacterTeamUpdated::GenericTeamId' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_CharacterTeamUpdated, AttitudeTowardsLocal) == 0x000001, "Member 'HWCharacterWidget_CharacterTeamUpdated::AttitudeTowardsLocal' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.CharacterUpdateSuppressChanged
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_CharacterUpdateSuppressChanged final
{
public:
	bool                                          bNewUpdatesAreSuppressed;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_CharacterUpdateSuppressChanged) == 0x000001, "Wrong alignment on HWCharacterWidget_CharacterUpdateSuppressChanged");
static_assert(sizeof(HWCharacterWidget_CharacterUpdateSuppressChanged) == 0x000001, "Wrong size on HWCharacterWidget_CharacterUpdateSuppressChanged");
static_assert(offsetof(HWCharacterWidget_CharacterUpdateSuppressChanged, bNewUpdatesAreSuppressed) == 0x000000, "Member 'HWCharacterWidget_CharacterUpdateSuppressChanged::bNewUpdatesAreSuppressed' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.DisconnectionStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_DisconnectionStateChanged final
{
public:
	bool                                          bDisconnected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_DisconnectionStateChanged) == 0x000001, "Wrong alignment on HWCharacterWidget_DisconnectionStateChanged");
static_assert(sizeof(HWCharacterWidget_DisconnectionStateChanged) == 0x000001, "Wrong size on HWCharacterWidget_DisconnectionStateChanged");
static_assert(offsetof(HWCharacterWidget_DisconnectionStateChanged, bDisconnected) == 0x000000, "Member 'HWCharacterWidget_DisconnectionStateChanged::bDisconnected' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.DisplayCharacterRespawnState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_DisplayCharacterRespawnState final
{
public:
	bool                                          bIsAlive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingRespawnTime;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_DisplayCharacterRespawnState) == 0x000004, "Wrong alignment on HWCharacterWidget_DisplayCharacterRespawnState");
static_assert(sizeof(HWCharacterWidget_DisplayCharacterRespawnState) == 0x000008, "Wrong size on HWCharacterWidget_DisplayCharacterRespawnState");
static_assert(offsetof(HWCharacterWidget_DisplayCharacterRespawnState, bIsAlive) == 0x000000, "Member 'HWCharacterWidget_DisplayCharacterRespawnState::bIsAlive' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_DisplayCharacterRespawnState, RemainingRespawnTime) == 0x000004, "Member 'HWCharacterWidget_DisplayCharacterRespawnState::RemainingRespawnTime' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterAbilitySystemUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleCharacterAbilitySystemUpdated final
{
public:
	class UHWAbilitySystemComponent*              AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWAbilitySystemComponent*              OldAbilitySystem;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleCharacterAbilitySystemUpdated) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterAbilitySystemUpdated");
static_assert(sizeof(HWCharacterWidget_HandleCharacterAbilitySystemUpdated) == 0x000010, "Wrong size on HWCharacterWidget_HandleCharacterAbilitySystemUpdated");
static_assert(offsetof(HWCharacterWidget_HandleCharacterAbilitySystemUpdated, AbilitySystem) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterAbilitySystemUpdated::AbilitySystem' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleCharacterAbilitySystemUpdated, OldAbilitySystem) == 0x000008, "Member 'HWCharacterWidget_HandleCharacterAbilitySystemUpdated::OldAbilitySystem' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterDied
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleCharacterDied final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnTimerDuration;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterWidget_HandleCharacterDied) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterDied");
static_assert(sizeof(HWCharacterWidget_HandleCharacterDied) == 0x000010, "Wrong size on HWCharacterWidget_HandleCharacterDied");
static_assert(offsetof(HWCharacterWidget_HandleCharacterDied, CharacterAbilitySystemActor) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterDied::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleCharacterDied, RespawnTimerDuration) == 0x000008, "Member 'HWCharacterWidget_HandleCharacterDied::RespawnTimerDuration' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterItemChanged
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterWidget_HandleCharacterItemChanged final
{
public:
	TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 NewCharacterItem;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleCharacterItemChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterItemChanged");
static_assert(sizeof(HWCharacterWidget_HandleCharacterItemChanged) == 0x000018, "Wrong size on HWCharacterWidget_HandleCharacterItemChanged");
static_assert(offsetof(HWCharacterWidget_HandleCharacterItemChanged, LoadoutOwner) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterItemChanged::LoadoutOwner' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleCharacterItemChanged, NewCharacterItem) == 0x000010, "Member 'HWCharacterWidget_HandleCharacterItemChanged::NewCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterOwnerChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleCharacterOwnerChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacter_Base*                      NewCharacterOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleCharacterOwnerChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterOwnerChanged");
static_assert(sizeof(HWCharacterWidget_HandleCharacterOwnerChanged) == 0x000010, "Wrong size on HWCharacterWidget_HandleCharacterOwnerChanged");
static_assert(offsetof(HWCharacterWidget_HandleCharacterOwnerChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterOwnerChanged::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleCharacterOwnerChanged, NewCharacterOwner) == 0x000008, "Member 'HWCharacterWidget_HandleCharacterOwnerChanged::NewCharacterOwner' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterRespawned
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_HandleCharacterRespawned final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleCharacterRespawned) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterRespawned");
static_assert(sizeof(HWCharacterWidget_HandleCharacterRespawned) == 0x000008, "Wrong size on HWCharacterWidget_HandleCharacterRespawned");
static_assert(offsetof(HWCharacterWidget_HandleCharacterRespawned, CharacterAbilitySystemActor) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterRespawned::CharacterAbilitySystemActor' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleCharacterTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleCharacterTeamUpdated final
{
public:
	class AHWCharacterAbilitySystemActor*         OwningAbilitySystemActor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamState*                           InTeamState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleCharacterTeamUpdated) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleCharacterTeamUpdated");
static_assert(sizeof(HWCharacterWidget_HandleCharacterTeamUpdated) == 0x000010, "Wrong size on HWCharacterWidget_HandleCharacterTeamUpdated");
static_assert(offsetof(HWCharacterWidget_HandleCharacterTeamUpdated, OwningAbilitySystemActor) == 0x000000, "Member 'HWCharacterWidget_HandleCharacterTeamUpdated::OwningAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleCharacterTeamUpdated, InTeamState) == 0x000008, "Member 'HWCharacterWidget_HandleCharacterTeamUpdated::InTeamState' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleInventoryManagerChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleInventoryManagerChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryManagerComponent*           NewInventoryManager;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleInventoryManagerChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleInventoryManagerChanged");
static_assert(sizeof(HWCharacterWidget_HandleInventoryManagerChanged) == 0x000010, "Wrong size on HWCharacterWidget_HandleInventoryManagerChanged");
static_assert(offsetof(HWCharacterWidget_HandleInventoryManagerChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWCharacterWidget_HandleInventoryManagerChanged::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleInventoryManagerChanged, NewInventoryManager) == 0x000008, "Member 'HWCharacterWidget_HandleInventoryManagerChanged::NewInventoryManager' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleLocalOwnerMinimapUpdate
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_HandleLocalOwnerMinimapUpdate final
{
public:
	class UHWVisibilityComponent*                 VisibilityComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleLocalOwnerMinimapUpdate) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleLocalOwnerMinimapUpdate");
static_assert(sizeof(HWCharacterWidget_HandleLocalOwnerMinimapUpdate) == 0x000008, "Wrong size on HWCharacterWidget_HandleLocalOwnerMinimapUpdate");
static_assert(offsetof(HWCharacterWidget_HandleLocalOwnerMinimapUpdate, VisibilityComponent) == 0x000000, "Member 'HWCharacterWidget_HandleLocalOwnerMinimapUpdate::VisibilityComponent' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleLocalPlayerStateReceived
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_HandleLocalPlayerStateReceived final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleLocalPlayerStateReceived) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleLocalPlayerStateReceived");
static_assert(sizeof(HWCharacterWidget_HandleLocalPlayerStateReceived) == 0x000008, "Wrong size on HWCharacterWidget_HandleLocalPlayerStateReceived");
static_assert(offsetof(HWCharacterWidget_HandleLocalPlayerStateReceived, PlayerState) == 0x000000, "Member 'HWCharacterWidget_HandleLocalPlayerStateReceived::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWCharacterWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWCharacterWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWCharacterWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWCharacterWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWCharacterWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandlePlayerStateAbilitySystemActorChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged");
static_assert(sizeof(HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged) == 0x000010, "Wrong size on HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged");
static_assert(offsetof(HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged, PlayerState) == 0x000000, "Member 'HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged, NewABSActor) == 0x000008, "Member 'HWCharacterWidget_HandlePlayerStateAbilitySystemActorChanged::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandlePlayerStateOnAIOvertakeStatusChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOvertakenByAI;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged");
static_assert(sizeof(HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged) == 0x000010, "Wrong size on HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged");
static_assert(offsetof(HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged, PlayerState) == 0x000000, "Member 'HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged, bIsOvertakenByAI) == 0x000008, "Member 'HWCharacterWidget_HandlePlayerStateOnAIOvertakeStatusChanged::bIsOvertakenByAI' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleTrackedCharacterPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged final
{
public:
	class AHWCharacter_Base*                      OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         NewPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged");
static_assert(sizeof(HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged) == 0x000010, "Wrong size on HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged");
static_assert(offsetof(HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged, OwnerCharacter) == 0x000000, "Member 'HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged, NewPlayerState) == 0x000008, "Member 'HWCharacterWidget_HandleTrackedCharacterPlayerStateChanged::NewPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.HandleVisibilityComponentUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_HandleVisibilityComponentUpdated final
{
public:
	class UHWVisibilityComponent*                 VisibilityComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_HandleVisibilityComponentUpdated) == 0x000008, "Wrong alignment on HWCharacterWidget_HandleVisibilityComponentUpdated");
static_assert(sizeof(HWCharacterWidget_HandleVisibilityComponentUpdated) == 0x000008, "Wrong size on HWCharacterWidget_HandleVisibilityComponentUpdated");
static_assert(offsetof(HWCharacterWidget_HandleVisibilityComponentUpdated, VisibilityComponent) == 0x000000, "Member 'HWCharacterWidget_HandleVisibilityComponentUpdated::VisibilityComponent' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.InventoryManagerUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_InventoryManagerUpdated final
{
public:
	class UHWInventoryManagerComponent*           NewInventoryManager;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_InventoryManagerUpdated) == 0x000008, "Wrong alignment on HWCharacterWidget_InventoryManagerUpdated");
static_assert(sizeof(HWCharacterWidget_InventoryManagerUpdated) == 0x000008, "Wrong size on HWCharacterWidget_InventoryManagerUpdated");
static_assert(offsetof(HWCharacterWidget_InventoryManagerUpdated, NewInventoryManager) == 0x000000, "Member 'HWCharacterWidget_InventoryManagerUpdated::NewInventoryManager' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.OnLocalTeamUpdated
// 0x0002 (0x0002 - 0x0000)
struct HWCharacterWidget_OnLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 AttitudeTowardsLocal;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_OnLocalTeamUpdated) == 0x000001, "Wrong alignment on HWCharacterWidget_OnLocalTeamUpdated");
static_assert(sizeof(HWCharacterWidget_OnLocalTeamUpdated) == 0x000002, "Wrong size on HWCharacterWidget_OnLocalTeamUpdated");
static_assert(offsetof(HWCharacterWidget_OnLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWCharacterWidget_OnLocalTeamUpdated::TeamId' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_OnLocalTeamUpdated, AttitudeTowardsLocal) == 0x000001, "Member 'HWCharacterWidget_OnLocalTeamUpdated::AttitudeTowardsLocal' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.TrackByCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_TrackByCharacter final
{
public:
	class AHWCharacter_Base*                      Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_TrackByCharacter) == 0x000008, "Wrong alignment on HWCharacterWidget_TrackByCharacter");
static_assert(sizeof(HWCharacterWidget_TrackByCharacter) == 0x000008, "Wrong size on HWCharacterWidget_TrackByCharacter");
static_assert(offsetof(HWCharacterWidget_TrackByCharacter, Character) == 0x000000, "Member 'HWCharacterWidget_TrackByCharacter::Character' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.TrackByPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_TrackByPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_TrackByPlayerState) == 0x000008, "Wrong alignment on HWCharacterWidget_TrackByPlayerState");
static_assert(sizeof(HWCharacterWidget_TrackByPlayerState) == 0x000008, "Wrong size on HWCharacterWidget_TrackByPlayerState");
static_assert(offsetof(HWCharacterWidget_TrackByPlayerState, InPlayerState) == 0x000000, "Member 'HWCharacterWidget_TrackByPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.TrackedABSActorChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_TrackedABSActorChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_TrackedABSActorChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_TrackedABSActorChanged");
static_assert(sizeof(HWCharacterWidget_TrackedABSActorChanged) == 0x000008, "Wrong size on HWCharacterWidget_TrackedABSActorChanged");
static_assert(offsetof(HWCharacterWidget_TrackedABSActorChanged, NewABSActor) == 0x000000, "Member 'HWCharacterWidget_TrackedABSActorChanged::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.TrackedCharacterChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_TrackedCharacterChanged final
{
public:
	class AHWCharacter_Base*                      NewCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_TrackedCharacterChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_TrackedCharacterChanged");
static_assert(sizeof(HWCharacterWidget_TrackedCharacterChanged) == 0x000008, "Wrong size on HWCharacterWidget_TrackedCharacterChanged");
static_assert(offsetof(HWCharacterWidget_TrackedCharacterChanged, NewCharacter) == 0x000000, "Member 'HWCharacterWidget_TrackedCharacterChanged::NewCharacter' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.TrackedPlayerStateChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_TrackedPlayerStateChanged final
{
public:
	class AHWPlayerState*                         NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_TrackedPlayerStateChanged) == 0x000008, "Wrong alignment on HWCharacterWidget_TrackedPlayerStateChanged");
static_assert(sizeof(HWCharacterWidget_TrackedPlayerStateChanged) == 0x000008, "Wrong size on HWCharacterWidget_TrackedPlayerStateChanged");
static_assert(offsetof(HWCharacterWidget_TrackedPlayerStateChanged, NewPlayerState) == 0x000000, "Member 'HWCharacterWidget_TrackedPlayerStateChanged::NewPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.UpdateCharacterRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterWidget_UpdateCharacterRespawnTime final
{
public:
	float                                         RemainingRespawnTime;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_UpdateCharacterRespawnTime) == 0x000004, "Wrong alignment on HWCharacterWidget_UpdateCharacterRespawnTime");
static_assert(sizeof(HWCharacterWidget_UpdateCharacterRespawnTime) == 0x000004, "Wrong size on HWCharacterWidget_UpdateCharacterRespawnTime");
static_assert(offsetof(HWCharacterWidget_UpdateCharacterRespawnTime, RemainingRespawnTime) == 0x000000, "Member 'HWCharacterWidget_UpdateCharacterRespawnTime::RemainingRespawnTime' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.AreUpdatesSuppressed
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_AreUpdatesSuppressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_AreUpdatesSuppressed) == 0x000001, "Wrong alignment on HWCharacterWidget_AreUpdatesSuppressed");
static_assert(sizeof(HWCharacterWidget_AreUpdatesSuppressed) == 0x000001, "Wrong size on HWCharacterWidget_AreUpdatesSuppressed");
static_assert(offsetof(HWCharacterWidget_AreUpdatesSuppressed, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_AreUpdatesSuppressed::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetAttributeWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_GetAttributeWidgets final
{
public:
	TArray<class UHWGameplayAttributeWidget*>     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetAttributeWidgets) == 0x000008, "Wrong alignment on HWCharacterWidget_GetAttributeWidgets");
static_assert(sizeof(HWCharacterWidget_GetAttributeWidgets) == 0x000010, "Wrong size on HWCharacterWidget_GetAttributeWidgets");
static_assert(offsetof(HWCharacterWidget_GetAttributeWidgets, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetAttributeWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterOwner
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetCharacterOwner final
{
public:
	class AHWCharacter_Base*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterOwner) == 0x000008, "Wrong alignment on HWCharacterWidget_GetCharacterOwner");
static_assert(sizeof(HWCharacterWidget_GetCharacterOwner) == 0x000008, "Wrong size on HWCharacterWidget_GetCharacterOwner");
static_assert(offsetof(HWCharacterWidget_GetCharacterOwner, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterOwner::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterRemainingRespawnPercent
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterWidget_GetCharacterRemainingRespawnPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterRemainingRespawnPercent) == 0x000004, "Wrong alignment on HWCharacterWidget_GetCharacterRemainingRespawnPercent");
static_assert(sizeof(HWCharacterWidget_GetCharacterRemainingRespawnPercent) == 0x000004, "Wrong size on HWCharacterWidget_GetCharacterRemainingRespawnPercent");
static_assert(offsetof(HWCharacterWidget_GetCharacterRemainingRespawnPercent, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterRemainingRespawnPercent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterRemainingRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterWidget_GetCharacterRemainingRespawnTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterRemainingRespawnTime) == 0x000004, "Wrong alignment on HWCharacterWidget_GetCharacterRemainingRespawnTime");
static_assert(sizeof(HWCharacterWidget_GetCharacterRemainingRespawnTime) == 0x000004, "Wrong size on HWCharacterWidget_GetCharacterRemainingRespawnTime");
static_assert(offsetof(HWCharacterWidget_GetCharacterRemainingRespawnTime, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterRemainingRespawnTime::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterTeam
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetCharacterTeam final
{
public:
	class AHWTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterTeam) == 0x000008, "Wrong alignment on HWCharacterWidget_GetCharacterTeam");
static_assert(sizeof(HWCharacterWidget_GetCharacterTeam) == 0x000008, "Wrong size on HWCharacterWidget_GetCharacterTeam");
static_assert(offsetof(HWCharacterWidget_GetCharacterTeam, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_GetCharacterTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterTeamId) == 0x000001, "Wrong alignment on HWCharacterWidget_GetCharacterTeamId");
static_assert(sizeof(HWCharacterWidget_GetCharacterTeamId) == 0x000001, "Wrong size on HWCharacterWidget_GetCharacterTeamId");
static_assert(offsetof(HWCharacterWidget_GetCharacterTeamId, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCharacterWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_GetCharacterWidgets final
{
public:
	TArray<class UHWCharacterWidget*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCharacterWidgets) == 0x000008, "Wrong alignment on HWCharacterWidget_GetCharacterWidgets");
static_assert(sizeof(HWCharacterWidget_GetCharacterWidgets) == 0x000010, "Wrong size on HWCharacterWidget_GetCharacterWidgets");
static_assert(offsetof(HWCharacterWidget_GetCharacterWidgets, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCharacterWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetCurrentCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetCurrentCharacterItem final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetCurrentCharacterItem) == 0x000008, "Wrong alignment on HWCharacterWidget_GetCurrentCharacterItem");
static_assert(sizeof(HWCharacterWidget_GetCurrentCharacterItem) == 0x000008, "Wrong size on HWCharacterWidget_GetCurrentCharacterItem");
static_assert(offsetof(HWCharacterWidget_GetCurrentCharacterItem, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetCurrentCharacterItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetEffectWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterWidget_GetEffectWidgets final
{
public:
	TArray<class UHWGameplayEffectWidget*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetEffectWidgets) == 0x000008, "Wrong alignment on HWCharacterWidget_GetEffectWidgets");
static_assert(sizeof(HWCharacterWidget_GetEffectWidgets) == 0x000010, "Wrong size on HWCharacterWidget_GetEffectWidgets");
static_assert(offsetof(HWCharacterWidget_GetEffectWidgets, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetEffectWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTeamAttitudeTowardsLocal
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_GetTeamAttitudeTowardsLocal final
{
public:
	ETeamAttitude                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTeamAttitudeTowardsLocal) == 0x000001, "Wrong alignment on HWCharacterWidget_GetTeamAttitudeTowardsLocal");
static_assert(sizeof(HWCharacterWidget_GetTeamAttitudeTowardsLocal) == 0x000001, "Wrong size on HWCharacterWidget_GetTeamAttitudeTowardsLocal");
static_assert(offsetof(HWCharacterWidget_GetTeamAttitudeTowardsLocal, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTeamAttitudeTowardsLocal::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTextureFromItem
// 0x0030 (0x0030 - 0x0000)
struct HWCharacterWidget_GetTextureFromItem final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTextureFromItem) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTextureFromItem");
static_assert(sizeof(HWCharacterWidget_GetTextureFromItem) == 0x000030, "Wrong size on HWCharacterWidget_GetTextureFromItem");
static_assert(offsetof(HWCharacterWidget_GetTextureFromItem, GameplayTag) == 0x000000, "Member 'HWCharacterWidget_GetTextureFromItem::GameplayTag' has a wrong offset!");
static_assert(offsetof(HWCharacterWidget_GetTextureFromItem, ReturnValue) == 0x000008, "Member 'HWCharacterWidget_GetTextureFromItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTrackedABSActor
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetTrackedABSActor final
{
public:
	class AHWCharacterAbilitySystemActor*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTrackedABSActor) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTrackedABSActor");
static_assert(sizeof(HWCharacterWidget_GetTrackedABSActor) == 0x000008, "Wrong size on HWCharacterWidget_GetTrackedABSActor");
static_assert(offsetof(HWCharacterWidget_GetTrackedABSActor, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTrackedABSActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTrackedASC
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetTrackedASC final
{
public:
	class UHWAbilitySystemComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTrackedASC) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTrackedASC");
static_assert(sizeof(HWCharacterWidget_GetTrackedASC) == 0x000008, "Wrong size on HWCharacterWidget_GetTrackedASC");
static_assert(offsetof(HWCharacterWidget_GetTrackedASC, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTrackedASC::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTrackedCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetTrackedCharacter final
{
public:
	class AHWCharacter_Base*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTrackedCharacter) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTrackedCharacter");
static_assert(sizeof(HWCharacterWidget_GetTrackedCharacter) == 0x000008, "Wrong size on HWCharacterWidget_GetTrackedCharacter");
static_assert(offsetof(HWCharacterWidget_GetTrackedCharacter, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTrackedCharacter::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTrackedInventoryManager
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetTrackedInventoryManager final
{
public:
	class UHWInventoryManagerComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTrackedInventoryManager) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTrackedInventoryManager");
static_assert(sizeof(HWCharacterWidget_GetTrackedInventoryManager) == 0x000008, "Wrong size on HWCharacterWidget_GetTrackedInventoryManager");
static_assert(offsetof(HWCharacterWidget_GetTrackedInventoryManager, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTrackedInventoryManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetTrackedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetTrackedPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetTrackedPlayerState) == 0x000008, "Wrong alignment on HWCharacterWidget_GetTrackedPlayerState");
static_assert(sizeof(HWCharacterWidget_GetTrackedPlayerState) == 0x000008, "Wrong size on HWCharacterWidget_GetTrackedPlayerState");
static_assert(offsetof(HWCharacterWidget_GetTrackedPlayerState, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetTrackedPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.GetVisibilityComponent
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterWidget_GetVisibilityComponent final
{
public:
	class UHWVisibilityComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_GetVisibilityComponent) == 0x000008, "Wrong alignment on HWCharacterWidget_GetVisibilityComponent");
static_assert(sizeof(HWCharacterWidget_GetVisibilityComponent) == 0x000008, "Wrong size on HWCharacterWidget_GetVisibilityComponent");
static_assert(offsetof(HWCharacterWidget_GetVisibilityComponent, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_GetVisibilityComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterWidget.IsOnLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterWidget_IsOnLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterWidget_IsOnLocalPlayer) == 0x000001, "Wrong alignment on HWCharacterWidget_IsOnLocalPlayer");
static_assert(sizeof(HWCharacterWidget_IsOnLocalPlayer) == 0x000001, "Wrong size on HWCharacterWidget_IsOnLocalPlayer");
static_assert(offsetof(HWCharacterWidget_IsOnLocalPlayer, ReturnValue) == 0x000000, "Member 'HWCharacterWidget_IsOnLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.GetPlayerNameGeometry
// 0x0038 (0x0038 - 0x0000)
struct HWScoreboardPlayerWidget_GetPlayerNameGeometry final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_GetPlayerNameGeometry) == 0x000004, "Wrong alignment on HWScoreboardPlayerWidget_GetPlayerNameGeometry");
static_assert(sizeof(HWScoreboardPlayerWidget_GetPlayerNameGeometry) == 0x000038, "Wrong size on HWScoreboardPlayerWidget_GetPlayerNameGeometry");
static_assert(offsetof(HWScoreboardPlayerWidget_GetPlayerNameGeometry, ReturnValue) == 0x000000, "Member 'HWScoreboardPlayerWidget_GetPlayerNameGeometry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.HandlePlayerStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerStatsTracker*                  PlayerStatsTracker;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated");
static_assert(sizeof(HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated) == 0x000010, "Wrong size on HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated, PlayerState) == 0x000000, "Member 'HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated, PlayerStatsTracker) == 0x000008, "Member 'HWScoreboardPlayerWidget_HandlePlayerStatsTrackerReplicated::PlayerStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.HandlePlayerTotalGoldUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldTotalGold;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotalGold;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated) == 0x000008, "Wrong alignment on HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated");
static_assert(sizeof(HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated) == 0x000010, "Wrong size on HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated, PlayerState) == 0x000000, "Member 'HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated, OldTotalGold) == 0x000008, "Member 'HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated::OldTotalGold' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated, NewTotalGold) == 0x00000C, "Member 'HWScoreboardPlayerWidget_HandlePlayerTotalGoldUpdated::NewTotalGold' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.HandlePlayerUuidReplicated
// 0x0018 (0x0018 - 0x0000)
struct HWScoreboardPlayerWidget_HandlePlayerUuidReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NewUuid;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_HandlePlayerUuidReplicated) == 0x000008, "Wrong alignment on HWScoreboardPlayerWidget_HandlePlayerUuidReplicated");
static_assert(sizeof(HWScoreboardPlayerWidget_HandlePlayerUuidReplicated) == 0x000018, "Wrong size on HWScoreboardPlayerWidget_HandlePlayerUuidReplicated");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerUuidReplicated, PlayerState) == 0x000000, "Member 'HWScoreboardPlayerWidget_HandlePlayerUuidReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_HandlePlayerUuidReplicated, NewUuid) == 0x000008, "Member 'HWScoreboardPlayerWidget_HandlePlayerUuidReplicated::NewUuid' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.OnGodPortraitSelected
// 0x0002 (0x0002 - 0x0000)
struct HWScoreboardPlayerWidget_OnGodPortraitSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHover;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_OnGodPortraitSelected) == 0x000001, "Wrong alignment on HWScoreboardPlayerWidget_OnGodPortraitSelected");
static_assert(sizeof(HWScoreboardPlayerWidget_OnGodPortraitSelected) == 0x000002, "Wrong size on HWScoreboardPlayerWidget_OnGodPortraitSelected");
static_assert(offsetof(HWScoreboardPlayerWidget_OnGodPortraitSelected, bSelected) == 0x000000, "Member 'HWScoreboardPlayerWidget_OnGodPortraitSelected::bSelected' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_OnGodPortraitSelected, bIsHover) == 0x000001, "Member 'HWScoreboardPlayerWidget_OnGodPortraitSelected::bIsHover' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.SetVoiceChatState
// 0x0003 (0x0003 - 0x0000)
struct HWScoreboardPlayerWidget_SetVoiceChatState final
{
public:
	bool                                          bInVoiceChannel;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_SetVoiceChatState) == 0x000001, "Wrong alignment on HWScoreboardPlayerWidget_SetVoiceChatState");
static_assert(sizeof(HWScoreboardPlayerWidget_SetVoiceChatState) == 0x000003, "Wrong size on HWScoreboardPlayerWidget_SetVoiceChatState");
static_assert(offsetof(HWScoreboardPlayerWidget_SetVoiceChatState, bInVoiceChannel) == 0x000000, "Member 'HWScoreboardPlayerWidget_SetVoiceChatState::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_SetVoiceChatState, bIsTalking) == 0x000001, "Member 'HWScoreboardPlayerWidget_SetVoiceChatState::bIsTalking' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_SetVoiceChatState, bIsMuted) == 0x000002, "Member 'HWScoreboardPlayerWidget_SetVoiceChatState::bIsMuted' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.UpdatePlayerName
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardPlayerWidget_UpdatePlayerName final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_UpdatePlayerName) == 0x000008, "Wrong alignment on HWScoreboardPlayerWidget_UpdatePlayerName");
static_assert(sizeof(HWScoreboardPlayerWidget_UpdatePlayerName) == 0x000008, "Wrong size on HWScoreboardPlayerWidget_UpdatePlayerName");
static_assert(offsetof(HWScoreboardPlayerWidget_UpdatePlayerName, PlayerInfo) == 0x000000, "Member 'HWScoreboardPlayerWidget_UpdatePlayerName::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.UpdatePlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        NewPlatform;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong alignment on HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon");
static_assert(sizeof(HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong size on HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon");
static_assert(offsetof(HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon, NewPlatform) == 0x000000, "Member 'HWScoreboardPlayerWidget_UpdatePlayerPlatformIcon::NewPlatform' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.UpdateTotalGold
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardPlayerWidget_UpdateTotalGold final
{
public:
	int32                                         OldTotalGold;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTotalGold;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_UpdateTotalGold) == 0x000004, "Wrong alignment on HWScoreboardPlayerWidget_UpdateTotalGold");
static_assert(sizeof(HWScoreboardPlayerWidget_UpdateTotalGold) == 0x000008, "Wrong size on HWScoreboardPlayerWidget_UpdateTotalGold");
static_assert(offsetof(HWScoreboardPlayerWidget_UpdateTotalGold, OldTotalGold) == 0x000000, "Member 'HWScoreboardPlayerWidget_UpdateTotalGold::OldTotalGold' has a wrong offset!");
static_assert(offsetof(HWScoreboardPlayerWidget_UpdateTotalGold, NewTotalGold) == 0x000004, "Member 'HWScoreboardPlayerWidget_UpdateTotalGold::NewTotalGold' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.GetPlayerTotalGold
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardPlayerWidget_GetPlayerTotalGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_GetPlayerTotalGold) == 0x000004, "Wrong alignment on HWScoreboardPlayerWidget_GetPlayerTotalGold");
static_assert(sizeof(HWScoreboardPlayerWidget_GetPlayerTotalGold) == 0x000004, "Wrong size on HWScoreboardPlayerWidget_GetPlayerTotalGold");
static_assert(offsetof(HWScoreboardPlayerWidget_GetPlayerTotalGold, ReturnValue) == 0x000000, "Member 'HWScoreboardPlayerWidget_GetPlayerTotalGold::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.GetTrackedPlayerGuid
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardPlayerWidget_GetTrackedPlayerGuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_GetTrackedPlayerGuid) == 0x000004, "Wrong alignment on HWScoreboardPlayerWidget_GetTrackedPlayerGuid");
static_assert(sizeof(HWScoreboardPlayerWidget_GetTrackedPlayerGuid) == 0x000010, "Wrong size on HWScoreboardPlayerWidget_GetTrackedPlayerGuid");
static_assert(offsetof(HWScoreboardPlayerWidget_GetTrackedPlayerGuid, ReturnValue) == 0x000000, "Member 'HWScoreboardPlayerWidget_GetTrackedPlayerGuid::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardPlayerWidget.GetTrackedPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardPlayerWidget_GetTrackedPlayerInfo final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardPlayerWidget_GetTrackedPlayerInfo) == 0x000008, "Wrong alignment on HWScoreboardPlayerWidget_GetTrackedPlayerInfo");
static_assert(sizeof(HWScoreboardPlayerWidget_GetTrackedPlayerInfo) == 0x000008, "Wrong size on HWScoreboardPlayerWidget_GetTrackedPlayerInfo");
static_assert(offsetof(HWScoreboardPlayerWidget_GetTrackedPlayerInfo, ReturnValue) == 0x000000, "Member 'HWScoreboardPlayerWidget_GetTrackedPlayerInfo::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.HandlePlayerStateReceivedCharacterSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult) == 0x000008, "Wrong alignment on HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult) == 0x000018, "Wrong size on HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult, TradeResult) == 0x000010, "Member 'HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult, TimerId) == 0x000011, "Member 'HWCharacterSwapPopupEntryWidget_HandlePlayerStateReceivedCharacterSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_SetPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_SetPlayerState) == 0x000008, "Wrong alignment on HWCharacterSwapPopupEntryWidget_SetPlayerState");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_SetPlayerState) == 0x000008, "Wrong size on HWCharacterSwapPopupEntryWidget_SetPlayerState");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.CanLocalPlayerClaimEntry
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry) == 0x000001, "Wrong alignment on HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry) == 0x000001, "Wrong size on HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_CanLocalPlayerClaimEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.GetEntryCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_GetEntryCharacter final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_GetEntryCharacter) == 0x000008, "Wrong alignment on HWCharacterSwapPopupEntryWidget_GetEntryCharacter");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_GetEntryCharacter) == 0x000008, "Wrong size on HWCharacterSwapPopupEntryWidget_GetEntryCharacter");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_GetEntryCharacter, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_GetEntryCharacter::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_GetPlayerName) == 0x000008, "Wrong alignment on HWCharacterSwapPopupEntryWidget_GetPlayerName");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_GetPlayerName) == 0x000010, "Wrong size on HWCharacterSwapPopupEntryWidget_GetPlayerName");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_GetPlayerName, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_GetPlayerName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_GetPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_GetPlayerState) == 0x000008, "Wrong alignment on HWCharacterSwapPopupEntryWidget_GetPlayerState");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_GetPlayerState) == 0x000008, "Wrong size on HWCharacterSwapPopupEntryWidget_GetPlayerState");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupEntryWidget.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterSwapPopupEntryWidget_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupEntryWidget_IsLocalPlayer) == 0x000001, "Wrong alignment on HWCharacterSwapPopupEntryWidget_IsLocalPlayer");
static_assert(sizeof(HWCharacterSwapPopupEntryWidget_IsLocalPlayer) == 0x000001, "Wrong size on HWCharacterSwapPopupEntryWidget_IsLocalPlayer");
static_assert(offsetof(HWCharacterSwapPopupEntryWidget_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupEntryWidget_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.ConfigurePips
// 0x0010 (0x0010 - 0x0000)
struct HWPassiveMeterWidget_ConfigurePips final
{
public:
	TArray<class UHWPassiveMeterPip*>             PipList;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_ConfigurePips) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_ConfigurePips");
static_assert(sizeof(HWPassiveMeterWidget_ConfigurePips) == 0x000010, "Wrong size on HWPassiveMeterWidget_ConfigurePips");
static_assert(offsetof(HWPassiveMeterWidget_ConfigurePips, PipList) == 0x000000, "Member 'HWPassiveMeterWidget_ConfigurePips::PipList' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.HandleOnDataFieldRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_HandleOnDataFieldRemoved final
{
public:
	struct FGameplayTag                           RemovedFieldTag;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_HandleOnDataFieldRemoved) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_HandleOnDataFieldRemoved");
static_assert(sizeof(HWPassiveMeterWidget_HandleOnDataFieldRemoved) == 0x000008, "Wrong size on HWPassiveMeterWidget_HandleOnDataFieldRemoved");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnDataFieldRemoved, RemovedFieldTag) == 0x000000, "Member 'HWPassiveMeterWidget_HandleOnDataFieldRemoved::RemovedFieldTag' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.HandleOnDataFieldUpdated
// 0x0020 (0x0020 - 0x0000)
struct HWPassiveMeterWidget_HandleOnDataFieldUpdated final
{
public:
	struct FHWPassiveMeterDataField               UpdatedDataField;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_HandleOnDataFieldUpdated) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_HandleOnDataFieldUpdated");
static_assert(sizeof(HWPassiveMeterWidget_HandleOnDataFieldUpdated) == 0x000020, "Wrong size on HWPassiveMeterWidget_HandleOnDataFieldUpdated");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnDataFieldUpdated, UpdatedDataField) == 0x000000, "Member 'HWPassiveMeterWidget_HandleOnDataFieldUpdated::UpdatedDataField' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.HandleOnFilledPipsChanged
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_HandleOnFilledPipsChanged final
{
public:
	int32                                         OldFilledPips;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewFilledPips;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_HandleOnFilledPipsChanged) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_HandleOnFilledPipsChanged");
static_assert(sizeof(HWPassiveMeterWidget_HandleOnFilledPipsChanged) == 0x000008, "Wrong size on HWPassiveMeterWidget_HandleOnFilledPipsChanged");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnFilledPipsChanged, OldFilledPips) == 0x000000, "Member 'HWPassiveMeterWidget_HandleOnFilledPipsChanged::OldFilledPips' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnFilledPipsChanged, NewFilledPips) == 0x000004, "Member 'HWPassiveMeterWidget_HandleOnFilledPipsChanged::NewFilledPips' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.HandleOnLargePipDataChanged
// 0x0040 (0x0040 - 0x0000)
struct HWPassiveMeterWidget_HandleOnLargePipDataChanged final
{
public:
	struct FHWPassiveMeterLargePipData            OldLargePipData;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWPassiveMeterLargePipData            NewLargePipData;                                   // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_HandleOnLargePipDataChanged) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_HandleOnLargePipDataChanged");
static_assert(sizeof(HWPassiveMeterWidget_HandleOnLargePipDataChanged) == 0x000040, "Wrong size on HWPassiveMeterWidget_HandleOnLargePipDataChanged");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnLargePipDataChanged, OldLargePipData) == 0x000000, "Member 'HWPassiveMeterWidget_HandleOnLargePipDataChanged::OldLargePipData' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnLargePipDataChanged, NewLargePipData) == 0x000020, "Member 'HWPassiveMeterWidget_HandleOnLargePipDataChanged::NewLargePipData' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.HandleOnMeterFillChanged
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_HandleOnMeterFillChanged final
{
public:
	float                                         OldMeterFill;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMeterFill;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_HandleOnMeterFillChanged) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_HandleOnMeterFillChanged");
static_assert(sizeof(HWPassiveMeterWidget_HandleOnMeterFillChanged) == 0x000008, "Wrong size on HWPassiveMeterWidget_HandleOnMeterFillChanged");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnMeterFillChanged, OldMeterFill) == 0x000000, "Member 'HWPassiveMeterWidget_HandleOnMeterFillChanged::OldMeterFill' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidget_HandleOnMeterFillChanged, NewMeterFill) == 0x000004, "Member 'HWPassiveMeterWidget_HandleOnMeterFillChanged::NewMeterFill' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.InitializePassiveMeterWidget
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_InitializePassiveMeterWidget final
{
public:
	class UHWPassiveMeterComponent*               InPassiveMeterComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_InitializePassiveMeterWidget) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_InitializePassiveMeterWidget");
static_assert(sizeof(HWPassiveMeterWidget_InitializePassiveMeterWidget) == 0x000008, "Wrong size on HWPassiveMeterWidget_InitializePassiveMeterWidget");
static_assert(offsetof(HWPassiveMeterWidget_InitializePassiveMeterWidget, InPassiveMeterComponent) == 0x000000, "Member 'HWPassiveMeterWidget_InitializePassiveMeterWidget::InPassiveMeterComponent' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.OnPassiveGameplayTagEvent
// 0x000C (0x000C - 0x0000)
struct HWPassiveMeterWidget_OnPassiveGameplayTagEvent final
{
public:
	struct FGameplayTag                           EventGameplayTag;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stack;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_OnPassiveGameplayTagEvent) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_OnPassiveGameplayTagEvent");
static_assert(sizeof(HWPassiveMeterWidget_OnPassiveGameplayTagEvent) == 0x00000C, "Wrong size on HWPassiveMeterWidget_OnPassiveGameplayTagEvent");
static_assert(offsetof(HWPassiveMeterWidget_OnPassiveGameplayTagEvent, EventGameplayTag) == 0x000000, "Member 'HWPassiveMeterWidget_OnPassiveGameplayTagEvent::EventGameplayTag' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidget_OnPassiveGameplayTagEvent, Stack) == 0x000008, "Member 'HWPassiveMeterWidget_OnPassiveGameplayTagEvent::Stack' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.OnPipWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_OnPipWidgetAdded final
{
public:
	class UHWPassiveMeterPip*                     PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_OnPipWidgetAdded) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_OnPipWidgetAdded");
static_assert(sizeof(HWPassiveMeterWidget_OnPipWidgetAdded) == 0x000008, "Wrong size on HWPassiveMeterWidget_OnPipWidgetAdded");
static_assert(offsetof(HWPassiveMeterWidget_OnPipWidgetAdded, PipWidget) == 0x000000, "Member 'HWPassiveMeterWidget_OnPipWidgetAdded::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.OnPipWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_OnPipWidgetRemoved final
{
public:
	class UHWPassiveMeterPip*                     PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_OnPipWidgetRemoved) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_OnPipWidgetRemoved");
static_assert(sizeof(HWPassiveMeterWidget_OnPipWidgetRemoved) == 0x000008, "Wrong size on HWPassiveMeterWidget_OnPipWidgetRemoved");
static_assert(offsetof(HWPassiveMeterWidget_OnPipWidgetRemoved, PipWidget) == 0x000000, "Member 'HWPassiveMeterWidget_OnPipWidgetRemoved::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.SetShowMeter
// 0x0001 (0x0001 - 0x0000)
struct HWPassiveMeterWidget_SetShowMeter final
{
public:
	bool                                          bInShowMeter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_SetShowMeter) == 0x000001, "Wrong alignment on HWPassiveMeterWidget_SetShowMeter");
static_assert(sizeof(HWPassiveMeterWidget_SetShowMeter) == 0x000001, "Wrong size on HWPassiveMeterWidget_SetShowMeter");
static_assert(offsetof(HWPassiveMeterWidget_SetShowMeter, bInShowMeter) == 0x000000, "Member 'HWPassiveMeterWidget_SetShowMeter::bInShowMeter' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.SetTotalPips
// 0x0004 (0x0004 - 0x0000)
struct HWPassiveMeterWidget_SetTotalPips final
{
public:
	int32                                         InTotalPips;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_SetTotalPips) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_SetTotalPips");
static_assert(sizeof(HWPassiveMeterWidget_SetTotalPips) == 0x000004, "Wrong size on HWPassiveMeterWidget_SetTotalPips");
static_assert(offsetof(HWPassiveMeterWidget_SetTotalPips, InTotalPips) == 0x000000, "Member 'HWPassiveMeterWidget_SetTotalPips::InTotalPips' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.UpdatePipsFilledCount
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_UpdatePipsFilledCount final
{
public:
	int32                                         FilledPipCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPipCount;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_UpdatePipsFilledCount) == 0x000004, "Wrong alignment on HWPassiveMeterWidget_UpdatePipsFilledCount");
static_assert(sizeof(HWPassiveMeterWidget_UpdatePipsFilledCount) == 0x000008, "Wrong size on HWPassiveMeterWidget_UpdatePipsFilledCount");
static_assert(offsetof(HWPassiveMeterWidget_UpdatePipsFilledCount, FilledPipCount) == 0x000000, "Member 'HWPassiveMeterWidget_UpdatePipsFilledCount::FilledPipCount' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidget_UpdatePipsFilledCount, TotalPipCount) == 0x000004, "Member 'HWPassiveMeterWidget_UpdatePipsFilledCount::TotalPipCount' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidget.GetPassiveMeterComponent
// 0x0008 (0x0008 - 0x0000)
struct HWPassiveMeterWidget_GetPassiveMeterComponent final
{
public:
	class UHWPassiveMeterComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidget_GetPassiveMeterComponent) == 0x000008, "Wrong alignment on HWPassiveMeterWidget_GetPassiveMeterComponent");
static_assert(sizeof(HWPassiveMeterWidget_GetPassiveMeterComponent) == 0x000008, "Wrong size on HWPassiveMeterWidget_GetPassiveMeterComponent");
static_assert(offsetof(HWPassiveMeterWidget_GetPassiveMeterComponent, ReturnValue) == 0x000000, "Member 'HWPassiveMeterWidget_GetPassiveMeterComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupProposalEntryWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupProposalEntryWidget_SetPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupProposalEntryWidget_SetPlayerState) == 0x000008, "Wrong alignment on HWCharacterSwapPopupProposalEntryWidget_SetPlayerState");
static_assert(sizeof(HWCharacterSwapPopupProposalEntryWidget_SetPlayerState) == 0x000008, "Wrong size on HWCharacterSwapPopupProposalEntryWidget_SetPlayerState");
static_assert(offsetof(HWCharacterSwapPopupProposalEntryWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupProposalEntryWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupProposalEntryWidget.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer) == 0x000001, "Wrong alignment on HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer");
static_assert(sizeof(HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer) == 0x000001, "Wrong size on HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer");
static_assert(offsetof(HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'HWCharacterSwapPopupProposalEntryWidget_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGridPanel.GetFirstVisibleChild
// 0x0008 (0x0008 - 0x0000)
struct HWGridPanel_GetFirstVisibleChild final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGridPanel_GetFirstVisibleChild) == 0x000008, "Wrong alignment on HWGridPanel_GetFirstVisibleChild");
static_assert(sizeof(HWGridPanel_GetFirstVisibleChild) == 0x000008, "Wrong size on HWGridPanel_GetFirstVisibleChild");
static_assert(offsetof(HWGridPanel_GetFirstVisibleChild, ReturnValue) == 0x000000, "Member 'HWGridPanel_GetFirstVisibleChild::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGridPanel.GetNumberOfRows
// 0x0004 (0x0004 - 0x0000)
struct HWGridPanel_GetNumberOfRows final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGridPanel_GetNumberOfRows) == 0x000004, "Wrong alignment on HWGridPanel_GetNumberOfRows");
static_assert(sizeof(HWGridPanel_GetNumberOfRows) == 0x000004, "Wrong size on HWGridPanel_GetNumberOfRows");
static_assert(offsetof(HWGridPanel_GetNumberOfRows, ReturnValue) == 0x000000, "Member 'HWGridPanel_GetNumberOfRows::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.AddEntries
// 0x0018 (0x0018 - 0x0000)
struct HWSortableGridPanel_AddEntries final
{
public:
	TArray<class UHWWidget*>                      Entries;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bSort;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSortableGridPanel_AddEntries) == 0x000008, "Wrong alignment on HWSortableGridPanel_AddEntries");
static_assert(sizeof(HWSortableGridPanel_AddEntries) == 0x000018, "Wrong size on HWSortableGridPanel_AddEntries");
static_assert(offsetof(HWSortableGridPanel_AddEntries, Entries) == 0x000000, "Member 'HWSortableGridPanel_AddEntries::Entries' has a wrong offset!");
static_assert(offsetof(HWSortableGridPanel_AddEntries, bSort) == 0x000010, "Member 'HWSortableGridPanel_AddEntries::bSort' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.AddEntry
// 0x0010 (0x0010 - 0x0000)
struct HWSortableGridPanel_AddEntry final
{
public:
	class UHWWidget*                              EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSort;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSortableGridPanel_AddEntry) == 0x000008, "Wrong alignment on HWSortableGridPanel_AddEntry");
static_assert(sizeof(HWSortableGridPanel_AddEntry) == 0x000010, "Wrong size on HWSortableGridPanel_AddEntry");
static_assert(offsetof(HWSortableGridPanel_AddEntry, EntryWidget) == 0x000000, "Member 'HWSortableGridPanel_AddEntry::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWSortableGridPanel_AddEntry, bSort) == 0x000008, "Member 'HWSortableGridPanel_AddEntry::bSort' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.AddUninitializedEntries
// 0x0018 (0x0018 - 0x0000)
struct HWSortableGridPanel_AddUninitializedEntries final
{
public:
	int32                                         EntryCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSort;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWWidget*>                      ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_AddUninitializedEntries) == 0x000008, "Wrong alignment on HWSortableGridPanel_AddUninitializedEntries");
static_assert(sizeof(HWSortableGridPanel_AddUninitializedEntries) == 0x000018, "Wrong size on HWSortableGridPanel_AddUninitializedEntries");
static_assert(offsetof(HWSortableGridPanel_AddUninitializedEntries, EntryCount) == 0x000000, "Member 'HWSortableGridPanel_AddUninitializedEntries::EntryCount' has a wrong offset!");
static_assert(offsetof(HWSortableGridPanel_AddUninitializedEntries, bSort) == 0x000004, "Member 'HWSortableGridPanel_AddUninitializedEntries::bSort' has a wrong offset!");
static_assert(offsetof(HWSortableGridPanel_AddUninitializedEntries, ReturnValue) == 0x000008, "Member 'HWSortableGridPanel_AddUninitializedEntries::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.GridEntryAdded
// 0x0008 (0x0008 - 0x0000)
struct HWSortableGridPanel_GridEntryAdded final
{
public:
	class UHWWidget*                              AddedEntry;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_GridEntryAdded) == 0x000008, "Wrong alignment on HWSortableGridPanel_GridEntryAdded");
static_assert(sizeof(HWSortableGridPanel_GridEntryAdded) == 0x000008, "Wrong size on HWSortableGridPanel_GridEntryAdded");
static_assert(offsetof(HWSortableGridPanel_GridEntryAdded, AddedEntry) == 0x000000, "Member 'HWSortableGridPanel_GridEntryAdded::AddedEntry' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.GridEntryRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWSortableGridPanel_GridEntryRemoved final
{
public:
	class UHWWidget*                              RemovedEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_GridEntryRemoved) == 0x000008, "Wrong alignment on HWSortableGridPanel_GridEntryRemoved");
static_assert(sizeof(HWSortableGridPanel_GridEntryRemoved) == 0x000008, "Wrong size on HWSortableGridPanel_GridEntryRemoved");
static_assert(offsetof(HWSortableGridPanel_GridEntryRemoved, RemovedEntry) == 0x000000, "Member 'HWSortableGridPanel_GridEntryRemoved::RemovedEntry' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.RemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct HWSortableGridPanel_RemoveEntry final
{
public:
	class UHWWidget*                              Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_RemoveEntry) == 0x000008, "Wrong alignment on HWSortableGridPanel_RemoveEntry");
static_assert(sizeof(HWSortableGridPanel_RemoveEntry) == 0x000008, "Wrong size on HWSortableGridPanel_RemoveEntry");
static_assert(offsetof(HWSortableGridPanel_RemoveEntry, Entry) == 0x000000, "Member 'HWSortableGridPanel_RemoveEntry::Entry' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.SetDisplayInReverseOrder
// 0x0001 (0x0001 - 0x0000)
struct HWSortableGridPanel_SetDisplayInReverseOrder final
{
public:
	bool                                          bInDisplayInReverseOrder;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_SetDisplayInReverseOrder) == 0x000001, "Wrong alignment on HWSortableGridPanel_SetDisplayInReverseOrder");
static_assert(sizeof(HWSortableGridPanel_SetDisplayInReverseOrder) == 0x000001, "Wrong size on HWSortableGridPanel_SetDisplayInReverseOrder");
static_assert(offsetof(HWSortableGridPanel_SetDisplayInReverseOrder, bInDisplayInReverseOrder) == 0x000000, "Member 'HWSortableGridPanel_SetDisplayInReverseOrder::bInDisplayInReverseOrder' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.SetEntryPadding
// 0x0010 (0x0010 - 0x0000)
struct HWSortableGridPanel_SetEntryPadding final
{
public:
	struct FMargin                                Padding;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_SetEntryPadding) == 0x000004, "Wrong alignment on HWSortableGridPanel_SetEntryPadding");
static_assert(sizeof(HWSortableGridPanel_SetEntryPadding) == 0x000010, "Wrong size on HWSortableGridPanel_SetEntryPadding");
static_assert(offsetof(HWSortableGridPanel_SetEntryPadding, Padding) == 0x000000, "Member 'HWSortableGridPanel_SetEntryPadding::Padding' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.SetLength
// 0x0004 (0x0004 - 0x0000)
struct HWSortableGridPanel_SetLength final
{
public:
	int32                                         InLength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_SetLength) == 0x000004, "Wrong alignment on HWSortableGridPanel_SetLength");
static_assert(sizeof(HWSortableGridPanel_SetLength) == 0x000004, "Wrong size on HWSortableGridPanel_SetLength");
static_assert(offsetof(HWSortableGridPanel_SetLength, InLength) == 0x000000, "Member 'HWSortableGridPanel_SetLength::InLength' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.SetOrientation
// 0x0001 (0x0001 - 0x0000)
struct HWSortableGridPanel_SetOrientation final
{
public:
	EOrientation                                  InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_SetOrientation) == 0x000001, "Wrong alignment on HWSortableGridPanel_SetOrientation");
static_assert(sizeof(HWSortableGridPanel_SetOrientation) == 0x000001, "Wrong size on HWSortableGridPanel_SetOrientation");
static_assert(offsetof(HWSortableGridPanel_SetOrientation, InOrientation) == 0x000000, "Member 'HWSortableGridPanel_SetOrientation::InOrientation' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.SetSortOrder
// 0x0001 (0x0001 - 0x0000)
struct HWSortableGridPanel_SetSortOrder final
{
public:
	EHWSortableGridSortOrder                      NewSortOrder;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_SetSortOrder) == 0x000001, "Wrong alignment on HWSortableGridPanel_SetSortOrder");
static_assert(sizeof(HWSortableGridPanel_SetSortOrder) == 0x000001, "Wrong size on HWSortableGridPanel_SetSortOrder");
static_assert(offsetof(HWSortableGridPanel_SetSortOrder, NewSortOrder) == 0x000000, "Member 'HWSortableGridPanel_SetSortOrder::NewSortOrder' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.GetDisplayInReverseOrder
// 0x0001 (0x0001 - 0x0000)
struct HWSortableGridPanel_GetDisplayInReverseOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_GetDisplayInReverseOrder) == 0x000001, "Wrong alignment on HWSortableGridPanel_GetDisplayInReverseOrder");
static_assert(sizeof(HWSortableGridPanel_GetDisplayInReverseOrder) == 0x000001, "Wrong size on HWSortableGridPanel_GetDisplayInReverseOrder");
static_assert(offsetof(HWSortableGridPanel_GetDisplayInReverseOrder, ReturnValue) == 0x000000, "Member 'HWSortableGridPanel_GetDisplayInReverseOrder::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSortableGridPanel.GetEntries
// 0x0010 (0x0010 - 0x0000)
struct HWSortableGridPanel_GetEntries final
{
public:
	TArray<class UHWWidget*>                      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSortableGridPanel_GetEntries) == 0x000008, "Wrong alignment on HWSortableGridPanel_GetEntries");
static_assert(sizeof(HWSortableGridPanel_GetEntries) == 0x000010, "Wrong size on HWSortableGridPanel_GetEntries");
static_assert(offsetof(HWSortableGridPanel_GetEntries, ReturnValue) == 0x000000, "Member 'HWSortableGridPanel_GetEntries::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.GetEntryWithCharacter
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWCharacterSwapPopupEntryWidget*       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter, CharacterItem) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter, ReturnValue) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_GetEntryWithCharacter::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleCharacterSwapTradeAccepted
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeAccepted::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleCharacterSwapTradeDeclined
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeDeclined::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleCharacterSwapTradeRequested
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeRequested::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleCharacterSwapTradeTimedOut
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleCharacterSwapTradeTimedOut::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered final
{
public:
	class UHWCharacterSwapPopupEntryWidget*       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered, CharacterItem) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonHovered::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected final
{
public:
	class UHWCharacterSwapPopupEntryWidget*       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected, CharacterItem) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonSelected::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleEntryButtonUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered final
{
public:
	class UHWCharacterSwapPopupEntryWidget*       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered, EntryWidget) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered, CharacterItem) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleEntryButtonUnhovered::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleLocalPlayerStateDraftCharacterChoiceReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 Choice;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated, PlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated, Choice) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateDraftCharacterChoiceReplicated::Choice' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleLocalPlayerStateReceivedCharacterSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult) == 0x000018, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TradeResult) == 0x000010, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TimerId) == 0x000011, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleLocalPlayerStateRejectedTradeListUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated final
{
public:
	TArray<class AHWPlayerState*>                 RejectedTradeList;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated, RejectedTradeList) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated::RejectedTradeList' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated, PlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandlePlayerStateReplicated::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleProposeTradeButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected) == 0x000008, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected, CharacterItem) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleProposeTradeButtonSelected::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleTeamPlayerStateDraftCharacterChoiceReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 Choice;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated, PlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated, Choice) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateDraftCharacterChoiceReplicated::Choice' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.HandleTeamPlayerStateReceivedCharacterSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult) == 0x000018, "Wrong size on HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult, TargetPlayerState) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult, TradeResult) == 0x000010, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult, TimerId) == 0x000011, "Member 'HWCharacterSwapPopupScreenWidget_HandleTeamPlayerStateReceivedCharacterSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWCharacterSwapPopupScreenWidget.CanDeclineTradeWith
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith final
{
public:
	class AHWPlayerState*                         TradePlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith) == 0x000008, "Wrong alignment on HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith");
static_assert(sizeof(HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith) == 0x000010, "Wrong size on HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith, TradePlayerState) == 0x000000, "Member 'HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith::TradePlayerState' has a wrong offset!");
static_assert(offsetof(HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith, ReturnValue) == 0x000008, "Member 'HWCharacterSwapPopupScreenWidget_CanDeclineTradeWith::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatEntryWidget.SetChatData
// 0x0060 (0x0060 - 0x0000)
struct HWChatEntryWidget_SetChatData final
{
public:
	struct FHWChatEntry                           InChatData;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatEntryWidget_SetChatData) == 0x000008, "Wrong alignment on HWChatEntryWidget_SetChatData");
static_assert(sizeof(HWChatEntryWidget_SetChatData) == 0x000060, "Wrong size on HWChatEntryWidget_SetChatData");
static_assert(offsetof(HWChatEntryWidget_SetChatData, InChatData) == 0x000000, "Member 'HWChatEntryWidget_SetChatData::InChatData' has a wrong offset!");

// Function HemingwayUI.HWChatEntryWidget.GetDecoratedMessageString
// 0x0010 (0x0010 - 0x0000)
struct HWChatEntryWidget_GetDecoratedMessageString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatEntryWidget_GetDecoratedMessageString) == 0x000008, "Wrong alignment on HWChatEntryWidget_GetDecoratedMessageString");
static_assert(sizeof(HWChatEntryWidget_GetDecoratedMessageString) == 0x000010, "Wrong size on HWChatEntryWidget_GetDecoratedMessageString");
static_assert(offsetof(HWChatEntryWidget_GetDecoratedMessageString, ReturnValue) == 0x000000, "Member 'HWChatEntryWidget_GetDecoratedMessageString::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatEntryWidget.SetPlayerNameColorTag
// 0x0008 (0x0008 - 0x0000)
struct HWChatEntryWidget_SetPlayerNameColorTag final
{
public:
	struct FGameplayTag                           PlayerNameColorTag;                                // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatEntryWidget_SetPlayerNameColorTag) == 0x000004, "Wrong alignment on HWChatEntryWidget_SetPlayerNameColorTag");
static_assert(sizeof(HWChatEntryWidget_SetPlayerNameColorTag) == 0x000008, "Wrong size on HWChatEntryWidget_SetPlayerNameColorTag");
static_assert(offsetof(HWChatEntryWidget_SetPlayerNameColorTag, PlayerNameColorTag) == 0x000000, "Member 'HWChatEntryWidget_SetPlayerNameColorTag::PlayerNameColorTag' has a wrong offset!");

// Function HemingwayUI.HWChatEntryWidget.ShouldDisplayEntry
// 0x0001 (0x0001 - 0x0000)
struct HWChatEntryWidget_ShouldDisplayEntry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatEntryWidget_ShouldDisplayEntry) == 0x000001, "Wrong alignment on HWChatEntryWidget_ShouldDisplayEntry");
static_assert(sizeof(HWChatEntryWidget_ShouldDisplayEntry) == 0x000001, "Wrong size on HWChatEntryWidget_ShouldDisplayEntry");
static_assert(offsetof(HWChatEntryWidget_ShouldDisplayEntry, ReturnValue) == 0x000000, "Member 'HWChatEntryWidget_ShouldDisplayEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.AddChatEntryToWindow
// 0x0060 (0x0060 - 0x0000)
struct HWChatWindowWidget_AddChatEntryToWindow final
{
public:
	struct FHWChatEntry                           ChatEntry;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_AddChatEntryToWindow) == 0x000008, "Wrong alignment on HWChatWindowWidget_AddChatEntryToWindow");
static_assert(sizeof(HWChatWindowWidget_AddChatEntryToWindow) == 0x000060, "Wrong size on HWChatWindowWidget_AddChatEntryToWindow");
static_assert(offsetof(HWChatWindowWidget_AddChatEntryToWindow, ChatEntry) == 0x000000, "Member 'HWChatWindowWidget_AddChatEntryToWindow::ChatEntry' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleChatEntryReceived
// 0x0060 (0x0060 - 0x0000)
struct HWChatWindowWidget_HandleChatEntryReceived final
{
public:
	struct FHWChatEntry                           ChatEntry;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandleChatEntryReceived) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandleChatEntryReceived");
static_assert(sizeof(HWChatWindowWidget_HandleChatEntryReceived) == 0x000060, "Wrong size on HWChatWindowWidget_HandleChatEntryReceived");
static_assert(offsetof(HWChatWindowWidget_HandleChatEntryReceived, ChatEntry) == 0x000000, "Member 'HWChatWindowWidget_HandleChatEntryReceived::ChatEntry' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleChatEntrySanitized
// 0x0078 (0x0078 - 0x0000)
struct HWChatWindowWidget_HandleChatEntrySanitized final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SanitizedMessage;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWChatEntry                           ChatEntry;                                         // 0x0018(0x0060)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandleChatEntrySanitized) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandleChatEntrySanitized");
static_assert(sizeof(HWChatWindowWidget_HandleChatEntrySanitized) == 0x000078, "Wrong size on HWChatWindowWidget_HandleChatEntrySanitized");
static_assert(offsetof(HWChatWindowWidget_HandleChatEntrySanitized, bSuccess) == 0x000000, "Member 'HWChatWindowWidget_HandleChatEntrySanitized::bSuccess' has a wrong offset!");
static_assert(offsetof(HWChatWindowWidget_HandleChatEntrySanitized, SanitizedMessage) == 0x000008, "Member 'HWChatWindowWidget_HandleChatEntrySanitized::SanitizedMessage' has a wrong offset!");
static_assert(offsetof(HWChatWindowWidget_HandleChatEntrySanitized, ChatEntry) == 0x000018, "Member 'HWChatWindowWidget_HandleChatEntrySanitized::ChatEntry' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleChatManagerReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWChatWindowWidget_HandleChatManagerReplicated final
{
public:
	class AHWChatManager*                         ChatManager;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandleChatManagerReplicated) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandleChatManagerReplicated");
static_assert(sizeof(HWChatWindowWidget_HandleChatManagerReplicated) == 0x000008, "Wrong size on HWChatWindowWidget_HandleChatManagerReplicated");
static_assert(offsetof(HWChatWindowWidget_HandleChatManagerReplicated, ChatManager) == 0x000000, "Member 'HWChatWindowWidget_HandleChatManagerReplicated::ChatManager' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleChatTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWChatWindowWidget_HandleChatTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWChatWindowWidget_HandleChatTextCommitted) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandleChatTextCommitted");
static_assert(sizeof(HWChatWindowWidget_HandleChatTextCommitted) == 0x000020, "Wrong size on HWChatWindowWidget_HandleChatTextCommitted");
static_assert(offsetof(HWChatWindowWidget_HandleChatTextCommitted, Text) == 0x000000, "Member 'HWChatWindowWidget_HandleChatTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWChatWindowWidget_HandleChatTextCommitted, CommitMethod) == 0x000018, "Member 'HWChatWindowWidget_HandleChatTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleInvokeVGSAction
// 0x0008 (0x0008 - 0x0000)
struct HWChatWindowWidget_HandleInvokeVGSAction final
{
public:
	struct FGameplayTag                           ActionId;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandleInvokeVGSAction) == 0x000004, "Wrong alignment on HWChatWindowWidget_HandleInvokeVGSAction");
static_assert(sizeof(HWChatWindowWidget_HandleInvokeVGSAction) == 0x000008, "Wrong size on HWChatWindowWidget_HandleInvokeVGSAction");
static_assert(offsetof(HWChatWindowWidget_HandleInvokeVGSAction, ActionId) == 0x000000, "Member 'HWChatWindowWidget_HandleInvokeVGSAction::ActionId' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWChatWindowWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWChatWindowWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWChatWindowWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWChatWindowWidget_HandlePlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWChatWindowWidget_HandlePlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.HandleVGSManagerReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWChatWindowWidget_HandleVGSManagerReplicated final
{
public:
	class AHWVGSManager*                          VGSManager;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_HandleVGSManagerReplicated) == 0x000008, "Wrong alignment on HWChatWindowWidget_HandleVGSManagerReplicated");
static_assert(sizeof(HWChatWindowWidget_HandleVGSManagerReplicated) == 0x000008, "Wrong size on HWChatWindowWidget_HandleVGSManagerReplicated");
static_assert(offsetof(HWChatWindowWidget_HandleVGSManagerReplicated, VGSManager) == 0x000000, "Member 'HWChatWindowWidget_HandleVGSManagerReplicated::VGSManager' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.SetChatState
// 0x0001 (0x0001 - 0x0000)
struct HWChatWindowWidget_SetChatState final
{
public:
	EHWChatWindowState                            ChatState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_SetChatState) == 0x000001, "Wrong alignment on HWChatWindowWidget_SetChatState");
static_assert(sizeof(HWChatWindowWidget_SetChatState) == 0x000001, "Wrong size on HWChatWindowWidget_SetChatState");
static_assert(offsetof(HWChatWindowWidget_SetChatState, ChatState) == 0x000000, "Member 'HWChatWindowWidget_SetChatState::ChatState' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.GetDesiredFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct HWChatWindowWidget_GetDesiredFadeOutTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_GetDesiredFadeOutTime) == 0x000004, "Wrong alignment on HWChatWindowWidget_GetDesiredFadeOutTime");
static_assert(sizeof(HWChatWindowWidget_GetDesiredFadeOutTime) == 0x000004, "Wrong size on HWChatWindowWidget_GetDesiredFadeOutTime");
static_assert(offsetof(HWChatWindowWidget_GetDesiredFadeOutTime, ReturnValue) == 0x000000, "Member 'HWChatWindowWidget_GetDesiredFadeOutTime::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.IsInDraftLobby
// 0x0001 (0x0001 - 0x0000)
struct HWChatWindowWidget_IsInDraftLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_IsInDraftLobby) == 0x000001, "Wrong alignment on HWChatWindowWidget_IsInDraftLobby");
static_assert(sizeof(HWChatWindowWidget_IsInDraftLobby) == 0x000001, "Wrong size on HWChatWindowWidget_IsInDraftLobby");
static_assert(offsetof(HWChatWindowWidget_IsInDraftLobby, ReturnValue) == 0x000000, "Member 'HWChatWindowWidget_IsInDraftLobby::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.IsInEndOfMatchLobby
// 0x0001 (0x0001 - 0x0000)
struct HWChatWindowWidget_IsInEndOfMatchLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_IsInEndOfMatchLobby) == 0x000001, "Wrong alignment on HWChatWindowWidget_IsInEndOfMatchLobby");
static_assert(sizeof(HWChatWindowWidget_IsInEndOfMatchLobby) == 0x000001, "Wrong size on HWChatWindowWidget_IsInEndOfMatchLobby");
static_assert(offsetof(HWChatWindowWidget_IsInEndOfMatchLobby, ReturnValue) == 0x000000, "Member 'HWChatWindowWidget_IsInEndOfMatchLobby::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWChatWindowWidget.IsTextEntryEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWChatWindowWidget_IsTextEntryEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWChatWindowWidget_IsTextEntryEnabled) == 0x000001, "Wrong alignment on HWChatWindowWidget_IsTextEntryEnabled");
static_assert(sizeof(HWChatWindowWidget_IsTextEntryEnabled) == 0x000001, "Wrong size on HWChatWindowWidget_IsTextEntryEnabled");
static_assert(offsetof(HWChatWindowWidget_IsTextEntryEnabled, ReturnValue) == 0x000000, "Member 'HWChatWindowWidget_IsTextEntryEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCombatLogWidget.HandleClientDamageEvent
// 0x0070 (0x0070 - 0x0000)
struct HWCombatLogWidget_HandleClientDamageEvent final
{
public:
	struct FHWCombatEvent                         CombatEvent;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCombatLogWidget_HandleClientDamageEvent) == 0x000008, "Wrong alignment on HWCombatLogWidget_HandleClientDamageEvent");
static_assert(sizeof(HWCombatLogWidget_HandleClientDamageEvent) == 0x000070, "Wrong size on HWCombatLogWidget_HandleClientDamageEvent");
static_assert(offsetof(HWCombatLogWidget_HandleClientDamageEvent, CombatEvent) == 0x000000, "Member 'HWCombatLogWidget_HandleClientDamageEvent::CombatEvent' has a wrong offset!");

// Function HemingwayUI.HWCombatLogWidget.SetIsCombatLogOpened
// 0x0001 (0x0001 - 0x0000)
struct HWCombatLogWidget_SetIsCombatLogOpened final
{
public:
	bool                                          bInIsOpened;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCombatLogWidget_SetIsCombatLogOpened) == 0x000001, "Wrong alignment on HWCombatLogWidget_SetIsCombatLogOpened");
static_assert(sizeof(HWCombatLogWidget_SetIsCombatLogOpened) == 0x000001, "Wrong size on HWCombatLogWidget_SetIsCombatLogOpened");
static_assert(offsetof(HWCombatLogWidget_SetIsCombatLogOpened, bInIsOpened) == 0x000000, "Member 'HWCombatLogWidget_SetIsCombatLogOpened::bInIsOpened' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.HandleIsEnemySet
// 0x0001 (0x0001 - 0x0000)
struct HWTopStatEntryWidget_HandleIsEnemySet final
{
public:
	bool                                          bIsEnemy;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_HandleIsEnemySet) == 0x000001, "Wrong alignment on HWTopStatEntryWidget_HandleIsEnemySet");
static_assert(sizeof(HWTopStatEntryWidget_HandleIsEnemySet) == 0x000001, "Wrong size on HWTopStatEntryWidget_HandleIsEnemySet");
static_assert(offsetof(HWTopStatEntryWidget_HandleIsEnemySet, bIsEnemy) == 0x000000, "Member 'HWTopStatEntryWidget_HandleIsEnemySet::bIsEnemy' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.HandlePlayerUuidReplicated
// 0x0018 (0x0018 - 0x0000)
struct HWTopStatEntryWidget_HandlePlayerUuidReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NewUuid;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_HandlePlayerUuidReplicated) == 0x000008, "Wrong alignment on HWTopStatEntryWidget_HandlePlayerUuidReplicated");
static_assert(sizeof(HWTopStatEntryWidget_HandlePlayerUuidReplicated) == 0x000018, "Wrong size on HWTopStatEntryWidget_HandlePlayerUuidReplicated");
static_assert(offsetof(HWTopStatEntryWidget_HandlePlayerUuidReplicated, PlayerState) == 0x000000, "Member 'HWTopStatEntryWidget_HandlePlayerUuidReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWTopStatEntryWidget_HandlePlayerUuidReplicated, NewUuid) == 0x000008, "Member 'HWTopStatEntryWidget_HandlePlayerUuidReplicated::NewUuid' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.OnTopPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct HWTopStatEntryWidget_OnTopPlayerChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_OnTopPlayerChanged) == 0x000008, "Wrong alignment on HWTopStatEntryWidget_OnTopPlayerChanged");
static_assert(sizeof(HWTopStatEntryWidget_OnTopPlayerChanged) == 0x000008, "Wrong size on HWTopStatEntryWidget_OnTopPlayerChanged");
static_assert(offsetof(HWTopStatEntryWidget_OnTopPlayerChanged, PlayerState) == 0x000000, "Member 'HWTopStatEntryWidget_OnTopPlayerChanged::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.UpdatePlayerName
// 0x0008 (0x0008 - 0x0000)
struct HWTopStatEntryWidget_UpdatePlayerName final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_UpdatePlayerName) == 0x000008, "Wrong alignment on HWTopStatEntryWidget_UpdatePlayerName");
static_assert(sizeof(HWTopStatEntryWidget_UpdatePlayerName) == 0x000008, "Wrong size on HWTopStatEntryWidget_UpdatePlayerName");
static_assert(offsetof(HWTopStatEntryWidget_UpdatePlayerName, PlayerInfo) == 0x000000, "Member 'HWTopStatEntryWidget_UpdatePlayerName::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.UpdatePlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWTopStatEntryWidget_UpdatePlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        NewPlatform;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong alignment on HWTopStatEntryWidget_UpdatePlayerPlatformIcon");
static_assert(sizeof(HWTopStatEntryWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong size on HWTopStatEntryWidget_UpdatePlayerPlatformIcon");
static_assert(offsetof(HWTopStatEntryWidget_UpdatePlayerPlatformIcon, NewPlatform) == 0x000000, "Member 'HWTopStatEntryWidget_UpdatePlayerPlatformIcon::NewPlatform' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.UpdateTopStatPlayer
// 0x0008 (0x0008 - 0x0000)
struct HWTopStatEntryWidget_UpdateTopStatPlayer final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_UpdateTopStatPlayer) == 0x000008, "Wrong alignment on HWTopStatEntryWidget_UpdateTopStatPlayer");
static_assert(sizeof(HWTopStatEntryWidget_UpdateTopStatPlayer) == 0x000008, "Wrong size on HWTopStatEntryWidget_UpdateTopStatPlayer");
static_assert(offsetof(HWTopStatEntryWidget_UpdateTopStatPlayer, PlayerState) == 0x000000, "Member 'HWTopStatEntryWidget_UpdateTopStatPlayer::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWTopStatEntryWidget.UpdateTrackedTeam
// 0x0010 (0x0010 - 0x0000)
struct HWTopStatEntryWidget_UpdateTrackedTeam final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StatTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatEntryWidget_UpdateTrackedTeam) == 0x000008, "Wrong alignment on HWTopStatEntryWidget_UpdateTrackedTeam");
static_assert(sizeof(HWTopStatEntryWidget_UpdateTrackedTeam) == 0x000010, "Wrong size on HWTopStatEntryWidget_UpdateTrackedTeam");
static_assert(offsetof(HWTopStatEntryWidget_UpdateTrackedTeam, TeamState) == 0x000000, "Member 'HWTopStatEntryWidget_UpdateTrackedTeam::TeamState' has a wrong offset!");
static_assert(offsetof(HWTopStatEntryWidget_UpdateTrackedTeam, StatTag) == 0x000008, "Member 'HWTopStatEntryWidget_UpdateTrackedTeam::StatTag' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapEntryWidget.HandleDamageBundleSet
// 0x0078 (0x0078 - 0x0000)
struct HWDeathRecapEntryWidget_HandleDamageBundleSet final
{
public:
	struct FHWDeathRecapDamageBundle              DeathRecapBundle;                                  // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         HighestDamageValue;                                // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDeathRecapEntryWidget_HandleDamageBundleSet) == 0x000008, "Wrong alignment on HWDeathRecapEntryWidget_HandleDamageBundleSet");
static_assert(sizeof(HWDeathRecapEntryWidget_HandleDamageBundleSet) == 0x000078, "Wrong size on HWDeathRecapEntryWidget_HandleDamageBundleSet");
static_assert(offsetof(HWDeathRecapEntryWidget_HandleDamageBundleSet, DeathRecapBundle) == 0x000000, "Member 'HWDeathRecapEntryWidget_HandleDamageBundleSet::DeathRecapBundle' has a wrong offset!");
static_assert(offsetof(HWDeathRecapEntryWidget_HandleDamageBundleSet, HighestDamageValue) == 0x000070, "Member 'HWDeathRecapEntryWidget_HandleDamageBundleSet::HighestDamageValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.AnimateNumber
// 0x00E8 (0x00E8 - 0x0000)
struct HWFloatingTextWidget_AnimateNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x00E0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_AnimateNumber) == 0x000008, "Wrong alignment on HWFloatingTextWidget_AnimateNumber");
static_assert(sizeof(HWFloatingTextWidget_AnimateNumber) == 0x0000E8, "Wrong size on HWFloatingTextWidget_AnimateNumber");
static_assert(offsetof(HWFloatingTextWidget_AnimateNumber, Number) == 0x000000, "Member 'HWFloatingTextWidget_AnimateNumber::Number' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_AnimateNumber, Parameters) == 0x000008, "Member 'HWFloatingTextWidget_AnimateNumber::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_AnimateNumber, OwnerActor) == 0x0000E0, "Member 'HWFloatingTextWidget_AnimateNumber::OwnerActor' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.ApplyFontSize
// 0x0004 (0x0004 - 0x0000)
struct HWFloatingTextWidget_ApplyFontSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_ApplyFontSize) == 0x000004, "Wrong alignment on HWFloatingTextWidget_ApplyFontSize");
static_assert(sizeof(HWFloatingTextWidget_ApplyFontSize) == 0x000004, "Wrong size on HWFloatingTextWidget_ApplyFontSize");
static_assert(offsetof(HWFloatingTextWidget_ApplyFontSize, Size) == 0x000000, "Member 'HWFloatingTextWidget_ApplyFontSize::Size' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetDisplayOffset
// 0x00F0 (0x00F0 - 0x0000)
struct HWFloatingTextWidget_GetDisplayOffset final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x00D8(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x00DC(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextWidget_GetDisplayOffset) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetDisplayOffset");
static_assert(sizeof(HWFloatingTextWidget_GetDisplayOffset) == 0x0000F0, "Wrong size on HWFloatingTextWidget_GetDisplayOffset");
static_assert(offsetof(HWFloatingTextWidget_GetDisplayOffset, Parameters) == 0x000000, "Member 'HWFloatingTextWidget_GetDisplayOffset::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetDisplayOffset, Index_0) == 0x0000D8, "Member 'HWFloatingTextWidget_GetDisplayOffset::Index_0' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetDisplayOffset, ReturnValue) == 0x0000DC, "Member 'HWFloatingTextWidget_GetDisplayOffset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetSourceObject
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextWidget_GetSourceObject final
{
public:
	const class UObject*                          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_GetSourceObject) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetSourceObject");
static_assert(sizeof(HWFloatingTextWidget_GetSourceObject) == 0x000008, "Wrong size on HWFloatingTextWidget_GetSourceObject");
static_assert(offsetof(HWFloatingTextWidget_GetSourceObject, ReturnValue) == 0x000000, "Member 'HWFloatingTextWidget_GetSourceObject::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.SetHideTimer
// 0x0004 (0x0004 - 0x0000)
struct HWFloatingTextWidget_SetHideTimer final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_SetHideTimer) == 0x000004, "Wrong alignment on HWFloatingTextWidget_SetHideTimer");
static_assert(sizeof(HWFloatingTextWidget_SetHideTimer) == 0x000004, "Wrong size on HWFloatingTextWidget_SetHideTimer");
static_assert(offsetof(HWFloatingTextWidget_SetHideTimer, Delay) == 0x000000, "Member 'HWFloatingTextWidget_SetHideTimer::Delay' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.UpdateNumber
// 0x00E8 (0x00E8 - 0x0000)
struct HWFloatingTextWidget_UpdateNumber final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x00E0(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_UpdateNumber) == 0x000008, "Wrong alignment on HWFloatingTextWidget_UpdateNumber");
static_assert(sizeof(HWFloatingTextWidget_UpdateNumber) == 0x0000E8, "Wrong size on HWFloatingTextWidget_UpdateNumber");
static_assert(offsetof(HWFloatingTextWidget_UpdateNumber, Number) == 0x000000, "Member 'HWFloatingTextWidget_UpdateNumber::Number' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_UpdateNumber, Parameters) == 0x000008, "Member 'HWFloatingTextWidget_UpdateNumber::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_UpdateNumber, OwnerActor) == 0x0000E0, "Member 'HWFloatingTextWidget_UpdateNumber::OwnerActor' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetInstigatorAttitude
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextWidget_GetInstigatorAttitude final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextWidget_GetInstigatorAttitude) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetInstigatorAttitude");
static_assert(sizeof(HWFloatingTextWidget_GetInstigatorAttitude) == 0x0000E0, "Wrong size on HWFloatingTextWidget_GetInstigatorAttitude");
static_assert(offsetof(HWFloatingTextWidget_GetInstigatorAttitude, Parameters) == 0x000000, "Member 'HWFloatingTextWidget_GetInstigatorAttitude::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetInstigatorAttitude, ReturnValue) == 0x0000D8, "Member 'HWFloatingTextWidget_GetInstigatorAttitude::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetIsDamageImmune
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextWidget_GetIsDamageImmune final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextWidget_GetIsDamageImmune) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetIsDamageImmune");
static_assert(sizeof(HWFloatingTextWidget_GetIsDamageImmune) == 0x0000E0, "Wrong size on HWFloatingTextWidget_GetIsDamageImmune");
static_assert(offsetof(HWFloatingTextWidget_GetIsDamageImmune, Parameters) == 0x000000, "Member 'HWFloatingTextWidget_GetIsDamageImmune::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetIsDamageImmune, ReturnValue) == 0x0000D8, "Member 'HWFloatingTextWidget_GetIsDamageImmune::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetPoolTag
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextWidget_GetPoolTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_GetPoolTag) == 0x000004, "Wrong alignment on HWFloatingTextWidget_GetPoolTag");
static_assert(sizeof(HWFloatingTextWidget_GetPoolTag) == 0x000008, "Wrong size on HWFloatingTextWidget_GetPoolTag");
static_assert(offsetof(HWFloatingTextWidget_GetPoolTag, ReturnValue) == 0x000000, "Member 'HWFloatingTextWidget_GetPoolTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetRandomStartPosition
// 0x0010 (0x0010 - 0x0000)
struct HWFloatingTextWidget_GetRandomStartPosition final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_GetRandomStartPosition) == 0x000004, "Wrong alignment on HWFloatingTextWidget_GetRandomStartPosition");
static_assert(sizeof(HWFloatingTextWidget_GetRandomStartPosition) == 0x000010, "Wrong size on HWFloatingTextWidget_GetRandomStartPosition");
static_assert(offsetof(HWFloatingTextWidget_GetRandomStartPosition, ReturnValue) == 0x000000, "Member 'HWFloatingTextWidget_GetRandomStartPosition::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetSourceGameplayAbility
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextWidget_GetSourceGameplayAbility final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UHWGameplayAbility*               ReturnValue;                                       // 0x00D8(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextWidget_GetSourceGameplayAbility) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetSourceGameplayAbility");
static_assert(sizeof(HWFloatingTextWidget_GetSourceGameplayAbility) == 0x0000E0, "Wrong size on HWFloatingTextWidget_GetSourceGameplayAbility");
static_assert(offsetof(HWFloatingTextWidget_GetSourceGameplayAbility, Parameters) == 0x000000, "Member 'HWFloatingTextWidget_GetSourceGameplayAbility::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetSourceGameplayAbility, ReturnValue) == 0x0000D8, "Member 'HWFloatingTextWidget_GetSourceGameplayAbility::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextWidget.GetTextOverrideType
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextWidget_GetTextOverrideType final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EHWFloatingTextOverrideType                   ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextWidget_GetTextOverrideType) == 0x000008, "Wrong alignment on HWFloatingTextWidget_GetTextOverrideType");
static_assert(sizeof(HWFloatingTextWidget_GetTextOverrideType) == 0x0000E0, "Wrong size on HWFloatingTextWidget_GetTextOverrideType");
static_assert(offsetof(HWFloatingTextWidget_GetTextOverrideType, Parameters) == 0x000000, "Member 'HWFloatingTextWidget_GetTextOverrideType::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextWidget_GetTextOverrideType, ReturnValue) == 0x0000D8, "Member 'HWFloatingTextWidget_GetTextOverrideType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.HandleCharacterDied
// 0x0010 (0x0010 - 0x0000)
struct HWDeathRecapWidget_HandleCharacterDied final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnTimerDuration;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDeathRecapWidget_HandleCharacterDied) == 0x000008, "Wrong alignment on HWDeathRecapWidget_HandleCharacterDied");
static_assert(sizeof(HWDeathRecapWidget_HandleCharacterDied) == 0x000010, "Wrong size on HWDeathRecapWidget_HandleCharacterDied");
static_assert(offsetof(HWDeathRecapWidget_HandleCharacterDied, CharacterAbilitySystemActor) == 0x000000, "Member 'HWDeathRecapWidget_HandleCharacterDied::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWDeathRecapWidget_HandleCharacterDied, RespawnTimerDuration) == 0x000008, "Member 'HWDeathRecapWidget_HandleCharacterDied::RespawnTimerDuration' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.HandleClientDamageEvent
// 0x0070 (0x0070 - 0x0000)
struct HWDeathRecapWidget_HandleClientDamageEvent final
{
public:
	struct FHWCombatEvent                         CombatEvent;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDeathRecapWidget_HandleClientDamageEvent) == 0x000008, "Wrong alignment on HWDeathRecapWidget_HandleClientDamageEvent");
static_assert(sizeof(HWDeathRecapWidget_HandleClientDamageEvent) == 0x000070, "Wrong size on HWDeathRecapWidget_HandleClientDamageEvent");
static_assert(offsetof(HWDeathRecapWidget_HandleClientDamageEvent, CombatEvent) == 0x000000, "Member 'HWDeathRecapWidget_HandleClientDamageEvent::CombatEvent' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.HandleDamageBreakdownReceived
// 0x0010 (0x0010 - 0x0000)
struct HWDeathRecapWidget_HandleDamageBreakdownReceived final
{
public:
	float                                         TotalDamage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDamage;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicalDamage;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrueDamage;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDeathRecapWidget_HandleDamageBreakdownReceived) == 0x000004, "Wrong alignment on HWDeathRecapWidget_HandleDamageBreakdownReceived");
static_assert(sizeof(HWDeathRecapWidget_HandleDamageBreakdownReceived) == 0x000010, "Wrong size on HWDeathRecapWidget_HandleDamageBreakdownReceived");
static_assert(offsetof(HWDeathRecapWidget_HandleDamageBreakdownReceived, TotalDamage) == 0x000000, "Member 'HWDeathRecapWidget_HandleDamageBreakdownReceived::TotalDamage' has a wrong offset!");
static_assert(offsetof(HWDeathRecapWidget_HandleDamageBreakdownReceived, PhysicalDamage) == 0x000004, "Member 'HWDeathRecapWidget_HandleDamageBreakdownReceived::PhysicalDamage' has a wrong offset!");
static_assert(offsetof(HWDeathRecapWidget_HandleDamageBreakdownReceived, MagicalDamage) == 0x000008, "Member 'HWDeathRecapWidget_HandleDamageBreakdownReceived::MagicalDamage' has a wrong offset!");
static_assert(offsetof(HWDeathRecapWidget_HandleDamageBreakdownReceived, TrueDamage) == 0x00000C, "Member 'HWDeathRecapWidget_HandleDamageBreakdownReceived::TrueDamage' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.HandleLocalPlayerStateReceived
// 0x0008 (0x0008 - 0x0000)
struct HWDeathRecapWidget_HandleLocalPlayerStateReceived final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDeathRecapWidget_HandleLocalPlayerStateReceived) == 0x000008, "Wrong alignment on HWDeathRecapWidget_HandleLocalPlayerStateReceived");
static_assert(sizeof(HWDeathRecapWidget_HandleLocalPlayerStateReceived) == 0x000008, "Wrong size on HWDeathRecapWidget_HandleLocalPlayerStateReceived");
static_assert(offsetof(HWDeathRecapWidget_HandleLocalPlayerStateReceived, PlayerState) == 0x000000, "Member 'HWDeathRecapWidget_HandleLocalPlayerStateReceived::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.HandlePlayerStateAbilitySystemActorChanged
// 0x0010 (0x0010 - 0x0000)
struct HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged) == 0x000008, "Wrong alignment on HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged");
static_assert(sizeof(HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged) == 0x000010, "Wrong size on HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged");
static_assert(offsetof(HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged, PlayerState) == 0x000000, "Member 'HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged, NewABSActor) == 0x000008, "Member 'HWDeathRecapWidget_HandlePlayerStateAbilitySystemActorChanged::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWDeathRecapWidget.SetDeathRecapOpen
// 0x0001 (0x0001 - 0x0000)
struct HWDeathRecapWidget_SetDeathRecapOpen final
{
public:
	bool                                          bInIsOpened;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDeathRecapWidget_SetDeathRecapOpen) == 0x000001, "Wrong alignment on HWDeathRecapWidget_SetDeathRecapOpen");
static_assert(sizeof(HWDeathRecapWidget_SetDeathRecapOpen) == 0x000001, "Wrong size on HWDeathRecapWidget_SetDeathRecapOpen");
static_assert(offsetof(HWDeathRecapWidget_SetDeathRecapOpen, bInIsOpened) == 0x000000, "Member 'HWDeathRecapWidget_SetDeathRecapOpen::bInIsOpened' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.DisplayCharacterStatEntry
// 0x00A0 (0x00A0 - 0x0000)
struct HWItemStoreItemFilterEntry_DisplayCharacterStatEntry final
{
public:
	struct FHWDataDisplay_CharacterStat           CharacterStatData;                                 // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_DisplayCharacterStatEntry) == 0x000008, "Wrong alignment on HWItemStoreItemFilterEntry_DisplayCharacterStatEntry");
static_assert(sizeof(HWItemStoreItemFilterEntry_DisplayCharacterStatEntry) == 0x0000A0, "Wrong size on HWItemStoreItemFilterEntry_DisplayCharacterStatEntry");
static_assert(offsetof(HWItemStoreItemFilterEntry_DisplayCharacterStatEntry, CharacterStatData) == 0x000000, "Member 'HWItemStoreItemFilterEntry_DisplayCharacterStatEntry::CharacterStatData' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.DisplayKeywordEntry
// 0x00F0 (0x00F0 - 0x0000)
struct HWItemStoreItemFilterEntry_DisplayKeywordEntry final
{
public:
	struct FHWDataDisplay_Keyword                 KeywordData;                                       // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_DisplayKeywordEntry) == 0x000008, "Wrong alignment on HWItemStoreItemFilterEntry_DisplayKeywordEntry");
static_assert(sizeof(HWItemStoreItemFilterEntry_DisplayKeywordEntry) == 0x0000F0, "Wrong size on HWItemStoreItemFilterEntry_DisplayKeywordEntry");
static_assert(offsetof(HWItemStoreItemFilterEntry_DisplayKeywordEntry, KeywordData) == 0x000000, "Member 'HWItemStoreItemFilterEntry_DisplayKeywordEntry::KeywordData' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.GetIsExclusive
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterEntry_GetIsExclusive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_GetIsExclusive) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_GetIsExclusive");
static_assert(sizeof(HWItemStoreItemFilterEntry_GetIsExclusive) == 0x000001, "Wrong size on HWItemStoreItemFilterEntry_GetIsExclusive");
static_assert(offsetof(HWItemStoreItemFilterEntry_GetIsExclusive, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterEntry_GetIsExclusive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterEntry_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_GetIsSelected) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_GetIsSelected");
static_assert(sizeof(HWItemStoreItemFilterEntry_GetIsSelected) == 0x000001, "Wrong size on HWItemStoreItemFilterEntry_GetIsSelected");
static_assert(offsetof(HWItemStoreItemFilterEntry_GetIsSelected, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterEntry_GetIsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.SetFilterEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterEntry_SetFilterEnabled final
{
public:
	bool                                          bFilterEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_SetFilterEnabled) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_SetFilterEnabled");
static_assert(sizeof(HWItemStoreItemFilterEntry_SetFilterEnabled) == 0x000001, "Wrong size on HWItemStoreItemFilterEntry_SetFilterEnabled");
static_assert(offsetof(HWItemStoreItemFilterEntry_SetFilterEnabled, bFilterEnabled) == 0x000000, "Member 'HWItemStoreItemFilterEntry_SetFilterEnabled::bFilterEnabled' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.SetIsSelected
// 0x0002 (0x0002 - 0x0000)
struct HWItemStoreItemFilterEntry_SetIsSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClearFilter;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_SetIsSelected) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_SetIsSelected");
static_assert(sizeof(HWItemStoreItemFilterEntry_SetIsSelected) == 0x000002, "Wrong size on HWItemStoreItemFilterEntry_SetIsSelected");
static_assert(offsetof(HWItemStoreItemFilterEntry_SetIsSelected, bNewSelected) == 0x000000, "Member 'HWItemStoreItemFilterEntry_SetIsSelected::bNewSelected' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemFilterEntry_SetIsSelected, bShouldClearFilter) == 0x000001, "Member 'HWItemStoreItemFilterEntry_SetIsSelected::bShouldClearFilter' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.SetToggleEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterEntry_SetToggleEnabled final
{
public:
	bool                                          bSetEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_SetToggleEnabled) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_SetToggleEnabled");
static_assert(sizeof(HWItemStoreItemFilterEntry_SetToggleEnabled) == 0x000001, "Wrong size on HWItemStoreItemFilterEntry_SetToggleEnabled");
static_assert(offsetof(HWItemStoreItemFilterEntry_SetToggleEnabled, bSetEnabled) == 0x000000, "Member 'HWItemStoreItemFilterEntry_SetToggleEnabled::bSetEnabled' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterEntry_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreItemFilterEntry_UpdateLayout");
static_assert(sizeof(HWItemStoreItemFilterEntry_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreItemFilterEntry_UpdateLayout");
static_assert(offsetof(HWItemStoreItemFilterEntry_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreItemFilterEntry_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.GetFilterName
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemFilterEntry_GetFilterName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_GetFilterName) == 0x000008, "Wrong alignment on HWItemStoreItemFilterEntry_GetFilterName");
static_assert(sizeof(HWItemStoreItemFilterEntry_GetFilterName) == 0x000018, "Wrong size on HWItemStoreItemFilterEntry_GetFilterName");
static_assert(offsetof(HWItemStoreItemFilterEntry_GetFilterName, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterEntry_GetFilterName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterEntry.GetFilterTag
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemFilterEntry_GetFilterTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterEntry_GetFilterTag) == 0x000004, "Wrong alignment on HWItemStoreItemFilterEntry_GetFilterTag");
static_assert(sizeof(HWItemStoreItemFilterEntry_GetFilterTag) == 0x000008, "Wrong size on HWItemStoreItemFilterEntry_GetFilterTag");
static_assert(offsetof(HWItemStoreItemFilterEntry_GetFilterTag, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterEntry_GetFilterTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugBaseWidget.LoadPreset
// 0x0008 (0x0008 - 0x0000)
struct HWDebugBaseWidget_LoadPreset final
{
public:
	class UHWDebugSavePreset*                     Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugBaseWidget_LoadPreset) == 0x000008, "Wrong alignment on HWDebugBaseWidget_LoadPreset");
static_assert(sizeof(HWDebugBaseWidget_LoadPreset) == 0x000008, "Wrong size on HWDebugBaseWidget_LoadPreset");
static_assert(offsetof(HWDebugBaseWidget_LoadPreset, Preset) == 0x000000, "Member 'HWDebugBaseWidget_LoadPreset::Preset' has a wrong offset!");

// Function HemingwayUI.HWDebugBaseWidget.UpdatePreset
// 0x0008 (0x0008 - 0x0000)
struct HWDebugBaseWidget_UpdatePreset final
{
public:
	class UHWDebugSavePreset*                     Preset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugBaseWidget_UpdatePreset) == 0x000008, "Wrong alignment on HWDebugBaseWidget_UpdatePreset");
static_assert(sizeof(HWDebugBaseWidget_UpdatePreset) == 0x000008, "Wrong size on HWDebugBaseWidget_UpdatePreset");
static_assert(offsetof(HWDebugBaseWidget_UpdatePreset, Preset) == 0x000000, "Member 'HWDebugBaseWidget_UpdatePreset::Preset' has a wrong offset!");

// Function HemingwayUI.HWDebugBaseWidget.GetActivePreset
// 0x0008 (0x0008 - 0x0000)
struct HWDebugBaseWidget_GetActivePreset final
{
public:
	class UHWDebugSavePreset*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugBaseWidget_GetActivePreset) == 0x000008, "Wrong alignment on HWDebugBaseWidget_GetActivePreset");
static_assert(sizeof(HWDebugBaseWidget_GetActivePreset) == 0x000008, "Wrong size on HWDebugBaseWidget_GetActivePreset");
static_assert(offsetof(HWDebugBaseWidget_GetActivePreset, ReturnValue) == 0x000000, "Member 'HWDebugBaseWidget_GetActivePreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugBaseWidget.GetLocalCheatComponent
// 0x0008 (0x0008 - 0x0000)
struct HWDebugBaseWidget_GetLocalCheatComponent final
{
public:
	class UHWCheatComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugBaseWidget_GetLocalCheatComponent) == 0x000008, "Wrong alignment on HWDebugBaseWidget_GetLocalCheatComponent");
static_assert(sizeof(HWDebugBaseWidget_GetLocalCheatComponent) == 0x000008, "Wrong size on HWDebugBaseWidget_GetLocalCheatComponent");
static_assert(offsetof(HWDebugBaseWidget_GetLocalCheatComponent, ReturnValue) == 0x000000, "Member 'HWDebugBaseWidget_GetLocalCheatComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugBaseWidget.GetLogger
// 0x0008 (0x0008 - 0x0000)
struct HWDebugBaseWidget_GetLogger final
{
public:
	class UHWDebugLoggerWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugBaseWidget_GetLogger) == 0x000008, "Wrong alignment on HWDebugBaseWidget_GetLogger");
static_assert(sizeof(HWDebugBaseWidget_GetLogger) == 0x000008, "Wrong size on HWDebugBaseWidget_GetLogger");
static_assert(offsetof(HWDebugBaseWidget_GetLogger, ReturnValue) == 0x000000, "Member 'HWDebugBaseWidget_GetLogger::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTextBlock.SetFontColorStyleTag
// 0x0008 (0x0008 - 0x0000)
struct HWTextBlock_SetFontColorStyleTag final
{
public:
	struct FGameplayTag                           NewStyleTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTextBlock_SetFontColorStyleTag) == 0x000004, "Wrong alignment on HWTextBlock_SetFontColorStyleTag");
static_assert(sizeof(HWTextBlock_SetFontColorStyleTag) == 0x000008, "Wrong size on HWTextBlock_SetFontColorStyleTag");
static_assert(offsetof(HWTextBlock_SetFontColorStyleTag, NewStyleTag) == 0x000000, "Member 'HWTextBlock_SetFontColorStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWTextBlock.SetFontStyleTag
// 0x0008 (0x0008 - 0x0000)
struct HWTextBlock_SetFontStyleTag final
{
public:
	struct FGameplayTag                           NewStyleTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTextBlock_SetFontStyleTag) == 0x000004, "Wrong alignment on HWTextBlock_SetFontStyleTag");
static_assert(sizeof(HWTextBlock_SetFontStyleTag) == 0x000008, "Wrong size on HWTextBlock_SetFontStyleTag");
static_assert(offsetof(HWTextBlock_SetFontStyleTag, NewStyleTag) == 0x000000, "Member 'HWTextBlock_SetFontStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWTextBlock.SetWrapTextAt
// 0x0004 (0x0004 - 0x0000)
struct HWTextBlock_SetWrapTextAt final
{
public:
	float                                         InWrapTextAt;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTextBlock_SetWrapTextAt) == 0x000004, "Wrong alignment on HWTextBlock_SetWrapTextAt");
static_assert(sizeof(HWTextBlock_SetWrapTextAt) == 0x000004, "Wrong size on HWTextBlock_SetWrapTextAt");
static_assert(offsetof(HWTextBlock_SetWrapTextAt, InWrapTextAt) == 0x000000, "Member 'HWTextBlock_SetWrapTextAt::InWrapTextAt' has a wrong offset!");

// Function HemingwayUI.HWDebug_BotsWidget.ActivateAbility
// 0x000C (0x000C - 0x0000)
struct HWDebug_BotsWidget_ActivateAbility final
{
public:
	int32                                         AbilityNumber;                                     // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaitTime;                                          // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_BotsWidget_ActivateAbility) == 0x000004, "Wrong alignment on HWDebug_BotsWidget_ActivateAbility");
static_assert(sizeof(HWDebug_BotsWidget_ActivateAbility) == 0x00000C, "Wrong size on HWDebug_BotsWidget_ActivateAbility");
static_assert(offsetof(HWDebug_BotsWidget_ActivateAbility, AbilityNumber) == 0x000000, "Member 'HWDebug_BotsWidget_ActivateAbility::AbilityNumber' has a wrong offset!");
static_assert(offsetof(HWDebug_BotsWidget_ActivateAbility, WaitTime) == 0x000004, "Member 'HWDebug_BotsWidget_ActivateAbility::WaitTime' has a wrong offset!");
static_assert(offsetof(HWDebug_BotsWidget_ActivateAbility, Count) == 0x000008, "Member 'HWDebug_BotsWidget_ActivateAbility::Count' has a wrong offset!");

// Function HemingwayUI.HWDebug_BotsWidget.ChangeCameraMode
// 0x0001 (0x0001 - 0x0000)
struct HWDebug_BotsWidget_ChangeCameraMode final
{
public:
	EHWCameraMode                                 Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_BotsWidget_ChangeCameraMode) == 0x000001, "Wrong alignment on HWDebug_BotsWidget_ChangeCameraMode");
static_assert(sizeof(HWDebug_BotsWidget_ChangeCameraMode) == 0x000001, "Wrong size on HWDebug_BotsWidget_ChangeCameraMode");
static_assert(offsetof(HWDebug_BotsWidget_ChangeCameraMode, Mode) == 0x000000, "Member 'HWDebug_BotsWidget_ChangeCameraMode::Mode' has a wrong offset!");

// Function HemingwayUI.HWDebug_BotsWidget.SpawnBot
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_BotsWidget_SpawnBot final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_BotsWidget_SpawnBot) == 0x000004, "Wrong alignment on HWDebug_BotsWidget_SpawnBot");
static_assert(sizeof(HWDebug_BotsWidget_SpawnBot) == 0x000008, "Wrong size on HWDebug_BotsWidget_SpawnBot");
static_assert(offsetof(HWDebug_BotsWidget_SpawnBot, Team) == 0x000000, "Member 'HWDebug_BotsWidget_SpawnBot::Team' has a wrong offset!");
static_assert(offsetof(HWDebug_BotsWidget_SpawnBot, Level) == 0x000004, "Member 'HWDebug_BotsWidget_SpawnBot::Level' has a wrong offset!");

// Function HemingwayUI.HWDebug_BotsWidget.UpdateSkinList
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_BotsWidget_UpdateSkinList final
{
public:
	class FString                                 GodName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_BotsWidget_UpdateSkinList) == 0x000008, "Wrong alignment on HWDebug_BotsWidget_UpdateSkinList");
static_assert(sizeof(HWDebug_BotsWidget_UpdateSkinList) == 0x000010, "Wrong size on HWDebug_BotsWidget_UpdateSkinList");
static_assert(offsetof(HWDebug_BotsWidget_UpdateSkinList, GodName) == 0x000000, "Member 'HWDebug_BotsWidget_UpdateSkinList::GodName' has a wrong offset!");

// Function HemingwayUI.HWDebug_CommandsWidget.AddNewButton
// 0x0020 (0x0020 - 0x0000)
struct HWDebug_CommandsWidget_AddNewButton final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_CommandsWidget_AddNewButton) == 0x000008, "Wrong alignment on HWDebug_CommandsWidget_AddNewButton");
static_assert(sizeof(HWDebug_CommandsWidget_AddNewButton) == 0x000020, "Wrong size on HWDebug_CommandsWidget_AddNewButton");
static_assert(offsetof(HWDebug_CommandsWidget_AddNewButton, Name_0) == 0x000000, "Member 'HWDebug_CommandsWidget_AddNewButton::Name_0' has a wrong offset!");
static_assert(offsetof(HWDebug_CommandsWidget_AddNewButton, Command) == 0x000010, "Member 'HWDebug_CommandsWidget_AddNewButton::Command' has a wrong offset!");

// Function HemingwayUI.HWDebug_CommandsWidget.UpdateCommandButtons
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_CommandsWidget_UpdateCommandButtons final
{
public:
	class FString                                 CommandCategory;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_CommandsWidget_UpdateCommandButtons) == 0x000008, "Wrong alignment on HWDebug_CommandsWidget_UpdateCommandButtons");
static_assert(sizeof(HWDebug_CommandsWidget_UpdateCommandButtons) == 0x000010, "Wrong size on HWDebug_CommandsWidget_UpdateCommandButtons");
static_assert(offsetof(HWDebug_CommandsWidget_UpdateCommandButtons, CommandCategory) == 0x000000, "Member 'HWDebug_CommandsWidget_UpdateCommandButtons::CommandCategory' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceEntryWidget.UpdateButtonState
// 0x0002 (0x0002 - 0x0000)
struct HWDraftLobbyChoiceEntryWidget_UpdateButtonState final
{
public:
	EHWChoiceButtonState                          DesiredButtonState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBeDisabled;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceEntryWidget_UpdateButtonState) == 0x000001, "Wrong alignment on HWDraftLobbyChoiceEntryWidget_UpdateButtonState");
static_assert(sizeof(HWDraftLobbyChoiceEntryWidget_UpdateButtonState) == 0x000002, "Wrong size on HWDraftLobbyChoiceEntryWidget_UpdateButtonState");
static_assert(offsetof(HWDraftLobbyChoiceEntryWidget_UpdateButtonState, DesiredButtonState) == 0x000000, "Member 'HWDraftLobbyChoiceEntryWidget_UpdateButtonState::DesiredButtonState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceEntryWidget_UpdateButtonState, bShouldBeDisabled) == 0x000001, "Member 'HWDraftLobbyChoiceEntryWidget_UpdateButtonState::bShouldBeDisabled' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleDraftChoiceDoubleClicked
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked final
{
public:
	struct FDraftChoice                           DraftChoice;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked, DraftChoice) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleDraftChoiceDoubleClicked::DraftChoice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleDraftChoiceHovered
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered final
{
public:
	struct FDraftChoice                           DraftChoice;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered, DraftChoice) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleDraftChoiceHovered::DraftChoice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleDraftChoiceSelected
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected final
{
public:
	struct FDraftChoice                           DraftChoice;                                       // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected, DraftChoice) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleDraftChoiceSelected::DraftChoice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleFilterSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged final
{
public:
	class FText                                   SearchText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged) == 0x000018, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged, SearchText) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleFilterSearchTextChanged::SearchText' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleFilterSortChanged
// 0x0002 (0x0002 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged final
{
public:
	EHWFilterSortMethod                           FilterMethod;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertSort;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged) == 0x000001, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged) == 0x000002, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged, FilterMethod) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged::FilterMethod' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged, bInvertSort) == 0x000001, "Member 'HWDraftLobbyChoiceGridWidget_HandleFilterSortChanged::bInvertSort' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleLocalPlayerDraftChoiceReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 Choice;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated, PlayerState) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated, Choice) == 0x000008, "Member 'HWDraftLobbyChoiceGridWidget_HandleLocalPlayerDraftChoiceReplicated::Choice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandlePlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.AllowExpandedGrid
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_AllowExpandedGrid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_AllowExpandedGrid) == 0x000001, "Wrong alignment on HWDraftLobbyChoiceGridWidget_AllowExpandedGrid");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_AllowExpandedGrid) == 0x000001, "Wrong size on HWDraftLobbyChoiceGridWidget_AllowExpandedGrid");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_AllowExpandedGrid, ReturnValue) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_AllowExpandedGrid::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.FindChoiceWidgetWithChoiceData
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData final
{
public:
	struct FDraftChoice                           ChoiceData;                                        // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UHWDraftLobbyChoiceEntryWidget*         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData) == 0x000018, "Wrong size on HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData, ChoiceData) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData::ChoiceData' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData, ReturnValue) == 0x000010, "Member 'HWDraftLobbyChoiceGridWidget_FindChoiceWidgetWithChoiceData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.GetExpandGridPromptWidget
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget final
{
public:
	class UHWMultiPromptWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget) == 0x000008, "Wrong size on HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget, ReturnValue) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_GetExpandGridPromptWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleGridChoiceNavigationDown
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown final
{
public:
	EUINavigation                                 NavDirection;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown, NavDirection) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown::NavDirection' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown, ReturnValue) == 0x000008, "Member 'HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationDown::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.HandleGridChoiceNavigationUp
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp final
{
public:
	EUINavigation                                 NavDirection;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp) == 0x000008, "Wrong alignment on HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp) == 0x000010, "Wrong size on HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp, NavDirection) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp::NavDirection' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp, ReturnValue) == 0x000008, "Member 'HWDraftLobbyChoiceGridWidget_HandleGridChoiceNavigationUp::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyChoiceGridWidget.ShouldShowBenchChoices
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices) == 0x000001, "Wrong alignment on HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices");
static_assert(sizeof(HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices) == 0x000001, "Wrong size on HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices");
static_assert(offsetof(HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices, ReturnValue) == 0x000000, "Member 'HWDraftLobbyChoiceGridWidget_ShouldShowBenchChoices::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyOverallStatusWidget.HandleDraftTaskCompleted
// 0x0048 (0x0048 - 0x0000)
struct HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted final
{
public:
	struct FDraftTask                             CompletedTask;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted) == 0x000008, "Wrong alignment on HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted");
static_assert(sizeof(HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted) == 0x000048, "Wrong size on HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted, CompletedTask) == 0x000000, "Member 'HWDraftLobbyOverallStatusWidget_HandleDraftTaskCompleted::CompletedTask' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyOverallStatusWidget.HandleOnPhaseConfigChanged
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged) == 0x000004, "Wrong alignment on HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged");
static_assert(sizeof(HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged) == 0x000010, "Wrong size on HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged, PhaseTag) == 0x000000, "Member 'HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged, PhaseStartTime) == 0x000008, "Member 'HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged, PhaseDuration) == 0x00000C, "Member 'HWDraftLobbyOverallStatusWidget_HandleOnPhaseConfigChanged::PhaseDuration' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyOverallStatusWidget.HandlePlayerControllerTeamChanged
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged) == 0x000008, "Wrong alignment on HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged");
static_assert(sizeof(HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged) == 0x000010, "Wrong size on HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged, Controller) == 0x000000, "Member 'HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged::Controller' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged, TeamId) == 0x000008, "Member 'HWDraftLobbyOverallStatusWidget_HandlePlayerControllerTeamChanged::TeamId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyOverallStatusWidget.SetGameModeInfo
// 0x0100 (0x0100 - 0x0000)
struct HWDraftLobbyOverallStatusWidget_SetGameModeInfo final
{
public:
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bUseAltName;                                       // 0x00F8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyOverallStatusWidget_SetGameModeInfo) == 0x000008, "Wrong alignment on HWDraftLobbyOverallStatusWidget_SetGameModeInfo");
static_assert(sizeof(HWDraftLobbyOverallStatusWidget_SetGameModeInfo) == 0x000100, "Wrong size on HWDraftLobbyOverallStatusWidget_SetGameModeInfo");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_SetGameModeInfo, GameModeInfo) == 0x000000, "Member 'HWDraftLobbyOverallStatusWidget_SetGameModeInfo::GameModeInfo' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyOverallStatusWidget_SetGameModeInfo, bUseAltName) == 0x0000F8, "Member 'HWDraftLobbyOverallStatusWidget_SetGameModeInfo::bUseAltName' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleChangeRoleFilterAction
// 0x0004 (0x0004 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction) == 0x000004, "Wrong alignment on HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction) == 0x000004, "Wrong size on HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction, Direction) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleChangeRoleFilterAction::Direction' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleDraftChoicesChanged
// 0x0020 (0x0020 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleDraftChoicesChanged final
{
public:
	TArray<class UObject*>                        RemovedChoices;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AddedOrUpdatedChoices;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleDraftChoicesChanged) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleDraftChoicesChanged");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleDraftChoicesChanged) == 0x000020, "Wrong size on HWDraftLobbyScreenWidget_HandleDraftChoicesChanged");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleDraftChoicesChanged, RemovedChoices) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleDraftChoicesChanged::RemovedChoices' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleDraftChoicesChanged, AddedOrUpdatedChoices) == 0x000010, "Member 'HWDraftLobbyScreenWidget_HandleDraftChoicesChanged::AddedOrUpdatedChoices' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_HandleInputStateChanged");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_HandleInputStateChanged");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleLocalPlayerDraftChoiceReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 Choice;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated) == 0x000010, "Wrong size on HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated, PlayerState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated, Choice) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerDraftChoiceReplicated::Choice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleLocalPlayerStateReceivedCharacterSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult) == 0x000018, "Wrong size on HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TargetPlayerState) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TradeResult) == 0x000010, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult, TimerId) == 0x000011, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedCharacterSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleLocalPlayerStateReceivedRoleSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult) == 0x000018, "Wrong size on HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TargetPlayerState) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TradeResult) == 0x000010, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TimerId) == 0x000011, "Member 'HWDraftLobbyScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleLockInProgress
// 0x0004 (0x0004 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleLockInProgress final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleLockInProgress) == 0x000004, "Wrong alignment on HWDraftLobbyScreenWidget_HandleLockInProgress");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleLockInProgress) == 0x000004, "Wrong size on HWDraftLobbyScreenWidget_HandleLockInProgress");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleLockInProgress, Percent) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleLockInProgress::Percent' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleOnOrderSuccess
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleOnOrderSuccess final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleOnOrderSuccess) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleOnOrderSuccess");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleOnOrderSuccess) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_HandleOnOrderSuccess");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleOnOrderSuccess, StoreItem) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleOnOrderSuccess::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleOnPhaseConfigChanged
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged) == 0x000004, "Wrong alignment on HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged) == 0x000010, "Wrong size on HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged, PhaseTag) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged, PhaseStartTime) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged, PhaseDuration) == 0x00000C, "Member 'HWDraftLobbyScreenWidget_HandleOnPhaseConfigChanged::PhaseDuration' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandlePlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandlePlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleSkinSelectEntryHovered
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered) == 0x000010, "Wrong size on HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered, EntryWidget) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered, InventoryItem) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleSkinSelectEntryHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleSkinSelectEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected) == 0x000010, "Wrong size on HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected, EntryWidget) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected, InventoryItem) == 0x000008, "Member 'HWDraftLobbyScreenWidget_HandleSkinSelectEntrySelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.HandleTransitionInfoTagChanged
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged final
{
public:
	struct FGameplayTag                           TransitionInfoTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged) == 0x000004, "Wrong alignment on HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged");
static_assert(sizeof(HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged");
static_assert(offsetof(HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged, TransitionInfoTag) == 0x000000, "Member 'HWDraftLobbyScreenWidget_HandleTransitionInfoTagChanged::TransitionInfoTag' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.LocalPlayerLockedInCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter final
{
public:
	const class UHWCharacterItem*                 InLockedInCharacterItem;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter");
static_assert(sizeof(HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter");
static_assert(offsetof(HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter, InLockedInCharacterItem) == 0x000000, "Member 'HWDraftLobbyScreenWidget_LocalPlayerLockedInCharacter::InLockedInCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.LocalPlayerLockedInSkin
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin final
{
public:
	class UHWSkinItem*                            InLockedInSkinItem;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin");
static_assert(sizeof(HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin");
static_assert(offsetof(HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin, InLockedInSkinItem) == 0x000000, "Member 'HWDraftLobbyScreenWidget_LocalPlayerLockedInSkin::InLockedInSkinItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.OnBoundSkinSelectDraftActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed");
static_assert(sizeof(HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed");
static_assert(offsetof(HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed, DestroyedActor) == 0x000000, "Member 'HWDraftLobbyScreenWidget_OnBoundSkinSelectDraftActorDestroyed::DestroyedActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.SetSkinSelectDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_SetSkinSelectDraftActor final
{
public:
	class ADraftReplicatedActor*                  InNewDraftActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_SetSkinSelectDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_SetSkinSelectDraftActor");
static_assert(sizeof(HWDraftLobbyScreenWidget_SetSkinSelectDraftActor) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_SetSkinSelectDraftActor");
static_assert(offsetof(HWDraftLobbyScreenWidget_SetSkinSelectDraftActor, InNewDraftActor) == 0x000000, "Member 'HWDraftLobbyScreenWidget_SetSkinSelectDraftActor::InNewDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.SetVoiceChatState
// 0x0014 (0x0014 - 0x0000)
struct HWDraftLobbyScreenWidget_SetVoiceChatState final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVoiceChannel;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyScreenWidget_SetVoiceChatState) == 0x000004, "Wrong alignment on HWDraftLobbyScreenWidget_SetVoiceChatState");
static_assert(sizeof(HWDraftLobbyScreenWidget_SetVoiceChatState) == 0x000014, "Wrong size on HWDraftLobbyScreenWidget_SetVoiceChatState");
static_assert(offsetof(HWDraftLobbyScreenWidget_SetVoiceChatState, PlayerUuid) == 0x000000, "Member 'HWDraftLobbyScreenWidget_SetVoiceChatState::PlayerUuid' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_SetVoiceChatState, bInVoiceChannel) == 0x000010, "Member 'HWDraftLobbyScreenWidget_SetVoiceChatState::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_SetVoiceChatState, bIsTalking) == 0x000011, "Member 'HWDraftLobbyScreenWidget_SetVoiceChatState::bIsTalking' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_SetVoiceChatState, bIsMuted) == 0x000012, "Member 'HWDraftLobbyScreenWidget_SetVoiceChatState::bIsMuted' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.ShouldRegisteActivateBoostAction
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction");
static_assert(sizeof(HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction");
static_assert(offsetof(HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_ShouldRegisteActivateBoostAction::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.ShouldRegisterAspectAction
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_ShouldRegisterAspectAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_ShouldRegisterAspectAction) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_ShouldRegisterAspectAction");
static_assert(sizeof(HWDraftLobbyScreenWidget_ShouldRegisterAspectAction) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_ShouldRegisterAspectAction");
static_assert(offsetof(HWDraftLobbyScreenWidget_ShouldRegisterAspectAction, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_ShouldRegisterAspectAction::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.ShouldRegisteRerollGodAction
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction");
static_assert(sizeof(HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction");
static_assert(offsetof(HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_ShouldRegisteRerollGodAction::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.ShouldRegisterTradeRoleAction
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction");
static_assert(sizeof(HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction");
static_assert(offsetof(HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_ShouldRegisterTradeRoleAction::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.SkinSelectDraftActorAddedToOwner
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner final
{
public:
	class ADraftReplicatedActor*                  NewDraftActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner");
static_assert(sizeof(HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner");
static_assert(offsetof(HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner, NewDraftActor) == 0x000000, "Member 'HWDraftLobbyScreenWidget_SkinSelectDraftActorAddedToOwner::NewDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.SkinSelectTaskCompleted
// 0x0048 (0x0048 - 0x0000)
struct HWDraftLobbyScreenWidget_SkinSelectTaskCompleted final
{
public:
	struct FDraftTask                             CompletedTask;                                     // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_SkinSelectTaskCompleted) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_SkinSelectTaskCompleted");
static_assert(sizeof(HWDraftLobbyScreenWidget_SkinSelectTaskCompleted) == 0x000048, "Wrong size on HWDraftLobbyScreenWidget_SkinSelectTaskCompleted");
static_assert(offsetof(HWDraftLobbyScreenWidget_SkinSelectTaskCompleted, CompletedTask) == 0x000000, "Member 'HWDraftLobbyScreenWidget_SkinSelectTaskCompleted::CompletedTask' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToCharacterDraft
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToCharacterDraft final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToCharacterDraft) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToCharacterDraft");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToCharacterDraft) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToCharacterDraft");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToCharacterDraft, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToCharacterDraft::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToClosingLobby
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToClosingLobby final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToClosingLobby) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToClosingLobby");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToClosingLobby) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToClosingLobby");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToClosingLobby, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToClosingLobby::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToDraftState
// 0x0002 (0x0002 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToDraftState final
{
public:
	EHWDraftLobbyWidgetState                      DesiredDraftState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToDraftState) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToDraftState");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToDraftState) == 0x000002, "Wrong size on HWDraftLobbyScreenWidget_TransitionToDraftState");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToDraftState, DesiredDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToDraftState::DesiredDraftState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToDraftState, bForce) == 0x000001, "Member 'HWDraftLobbyScreenWidget_TransitionToDraftState::bForce' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToEndDraftEarly
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToEndDraftEarly final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToEndDraftEarly) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToEndDraftEarly");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToEndDraftEarly) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToEndDraftEarly");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToEndDraftEarly, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToEndDraftEarly::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToNoDraft
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToNoDraft final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToNoDraft) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToNoDraft");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToNoDraft) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToNoDraft");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToNoDraft, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToNoDraft::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToSetup
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToSetup final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToSetup) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToSetup");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToSetup) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToSetup");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToSetup, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToSetup::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.TransitionToSkinDraft
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_TransitionToSkinDraft final
{
public:
	EHWDraftLobbyWidgetState                      PreviousDraftState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_TransitionToSkinDraft) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_TransitionToSkinDraft");
static_assert(sizeof(HWDraftLobbyScreenWidget_TransitionToSkinDraft) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_TransitionToSkinDraft");
static_assert(offsetof(HWDraftLobbyScreenWidget_TransitionToSkinDraft, PreviousDraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_TransitionToSkinDraft::PreviousDraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.UpdateGameModeDisplay
// 0x00F8 (0x00F8 - 0x0000)
struct HWDraftLobbyScreenWidget_UpdateGameModeDisplay final
{
public:
	struct FHWGameModeInfo                        InGameModeInfo;                                    // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_UpdateGameModeDisplay) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_UpdateGameModeDisplay");
static_assert(sizeof(HWDraftLobbyScreenWidget_UpdateGameModeDisplay) == 0x0000F8, "Wrong size on HWDraftLobbyScreenWidget_UpdateGameModeDisplay");
static_assert(offsetof(HWDraftLobbyScreenWidget_UpdateGameModeDisplay, InGameModeInfo) == 0x000000, "Member 'HWDraftLobbyScreenWidget_UpdateGameModeDisplay::InGameModeInfo' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.UpdateLocalPlayerDraftingState
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState final
{
public:
	EHWPlayerDraftingState                        DraftState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState) == 0x000001, "Wrong alignment on HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState");
static_assert(sizeof(HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState) == 0x000001, "Wrong size on HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState");
static_assert(offsetof(HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState, DraftState) == 0x000000, "Member 'HWDraftLobbyScreenWidget_UpdateLocalPlayerDraftingState::DraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.GetLocalPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_GetLocalPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_GetLocalPlayerState) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_GetLocalPlayerState");
static_assert(sizeof(HWDraftLobbyScreenWidget_GetLocalPlayerState) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_GetLocalPlayerState");
static_assert(offsetof(HWDraftLobbyScreenWidget_GetLocalPlayerState, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_GetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyScreenWidget.GetSkinSelectDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyScreenWidget_GetSkinSelectDraftActor final
{
public:
	class ADraftReplicatedActor*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyScreenWidget_GetSkinSelectDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyScreenWidget_GetSkinSelectDraftActor");
static_assert(sizeof(HWDraftLobbyScreenWidget_GetSkinSelectDraftActor) == 0x000008, "Wrong size on HWDraftLobbyScreenWidget_GetSkinSelectDraftActor");
static_assert(offsetof(HWDraftLobbyScreenWidget_GetSkinSelectDraftActor, ReturnValue) == 0x000000, "Member 'HWDraftLobbyScreenWidget_GetSkinSelectDraftActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.DisplayEquipment
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemEntry_DisplayEquipment final
{
public:
	const class UHWEquipmentItem*                 EquipmentInfo;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_DisplayEquipment) == 0x000008, "Wrong alignment on HWItemStoreItemEntry_DisplayEquipment");
static_assert(sizeof(HWItemStoreItemEntry_DisplayEquipment) == 0x000008, "Wrong size on HWItemStoreItemEntry_DisplayEquipment");
static_assert(offsetof(HWItemStoreItemEntry_DisplayEquipment, EquipmentInfo) == 0x000000, "Member 'HWItemStoreItemEntry_DisplayEquipment::EquipmentInfo' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.DisplayOwnership
// 0x0002 (0x0002 - 0x0000)
struct HWItemStoreItemEntry_DisplayOwnership final
{
public:
	bool                                          IsOwned;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnique;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_DisplayOwnership) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_DisplayOwnership");
static_assert(sizeof(HWItemStoreItemEntry_DisplayOwnership) == 0x000002, "Wrong size on HWItemStoreItemEntry_DisplayOwnership");
static_assert(offsetof(HWItemStoreItemEntry_DisplayOwnership, IsOwned) == 0x000000, "Member 'HWItemStoreItemEntry_DisplayOwnership::IsOwned' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemEntry_DisplayOwnership, IsUnique) == 0x000001, "Member 'HWItemStoreItemEntry_DisplayOwnership::IsUnique' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.InventoryChanged
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreItemEntry_InventoryChanged final
{
public:
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreItemEntry_InventoryChanged) == 0x000008, "Wrong alignment on HWItemStoreItemEntry_InventoryChanged");
static_assert(sizeof(HWItemStoreItemEntry_InventoryChanged) == 0x000010, "Wrong size on HWItemStoreItemEntry_InventoryChanged");
static_assert(offsetof(HWItemStoreItemEntry_InventoryChanged, EquipmentInstance) == 0x000000, "Member 'HWItemStoreItemEntry_InventoryChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemEntry_InventoryChanged, InventoryChangeReason) == 0x000008, "Member 'HWItemStoreItemEntry_InventoryChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.Populate
// 0x0038 (0x0038 - 0x0000)
struct HWItemStoreItemEntry_Populate final
{
public:
	struct FHWItemStoreItemInfo                   ItemConfig;                                        // 0x0000(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_Populate) == 0x000008, "Wrong alignment on HWItemStoreItemEntry_Populate");
static_assert(sizeof(HWItemStoreItemEntry_Populate) == 0x000038, "Wrong size on HWItemStoreItemEntry_Populate");
static_assert(offsetof(HWItemStoreItemEntry_Populate, ItemConfig) == 0x000000, "Member 'HWItemStoreItemEntry_Populate::ItemConfig' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.SetCurrentGold
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreItemEntry_SetCurrentGold final
{
public:
	float                                         GoldValue;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_SetCurrentGold) == 0x000004, "Wrong alignment on HWItemStoreItemEntry_SetCurrentGold");
static_assert(sizeof(HWItemStoreItemEntry_SetCurrentGold) == 0x000004, "Wrong size on HWItemStoreItemEntry_SetCurrentGold");
static_assert(offsetof(HWItemStoreItemEntry_SetCurrentGold, GoldValue) == 0x000000, "Member 'HWItemStoreItemEntry_SetCurrentGold::GoldValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.SetListeners
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_SetListeners final
{
public:
	bool                                          bEnableListeners;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_SetListeners) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_SetListeners");
static_assert(sizeof(HWItemStoreItemEntry_SetListeners) == 0x000001, "Wrong size on HWItemStoreItemEntry_SetListeners");
static_assert(offsetof(HWItemStoreItemEntry_SetListeners, bEnableListeners) == 0x000000, "Member 'HWItemStoreItemEntry_SetListeners::bEnableListeners' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.SetPrice
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreItemEntry_SetPrice final
{
public:
	int32                                         NewItemPrice;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_SetPrice) == 0x000004, "Wrong alignment on HWItemStoreItemEntry_SetPrice");
static_assert(sizeof(HWItemStoreItemEntry_SetPrice) == 0x000004, "Wrong size on HWItemStoreItemEntry_SetPrice");
static_assert(offsetof(HWItemStoreItemEntry_SetPrice, NewItemPrice) == 0x000000, "Member 'HWItemStoreItemEntry_SetPrice::NewItemPrice' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_SetSelected final
{
public:
	bool                                          bNewIsSelected;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_SetSelected) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_SetSelected");
static_assert(sizeof(HWItemStoreItemEntry_SetSelected) == 0x000001, "Wrong size on HWItemStoreItemEntry_SetSelected");
static_assert(offsetof(HWItemStoreItemEntry_SetSelected, bNewIsSelected) == 0x000000, "Member 'HWItemStoreItemEntry_SetSelected::bNewIsSelected' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreItemEntry_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowContextBar;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreItemEntry_ShowTooltip) == 0x000008, "Wrong alignment on HWItemStoreItemEntry_ShowTooltip");
static_assert(sizeof(HWItemStoreItemEntry_ShowTooltip) == 0x000010, "Wrong size on HWItemStoreItemEntry_ShowTooltip");
static_assert(offsetof(HWItemStoreItemEntry_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWItemStoreItemEntry_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemEntry_ShowTooltip, bShowContextBar) == 0x000008, "Member 'HWItemStoreItemEntry_ShowTooltip::bShowContextBar' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemEntry_ShowTooltip, Axis) == 0x000009, "Member 'HWItemStoreItemEntry_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.UpdateDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_UpdateDetailLevel final
{
public:
	EHWItemStoreGridDetailLevel                   DetailLevel;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_UpdateDetailLevel) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_UpdateDetailLevel");
static_assert(sizeof(HWItemStoreItemEntry_UpdateDetailLevel) == 0x000001, "Wrong size on HWItemStoreItemEntry_UpdateDetailLevel");
static_assert(offsetof(HWItemStoreItemEntry_UpdateDetailLevel, DetailLevel) == 0x000000, "Member 'HWItemStoreItemEntry_UpdateDetailLevel::DetailLevel' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_UpdateLayout");
static_assert(sizeof(HWItemStoreItemEntry_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreItemEntry_UpdateLayout");
static_assert(offsetof(HWItemStoreItemEntry_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreItemEntry_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.CanPurchase
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_CanPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_CanPurchase) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_CanPurchase");
static_assert(sizeof(HWItemStoreItemEntry_CanPurchase) == 0x000001, "Wrong size on HWItemStoreItemEntry_CanPurchase");
static_assert(offsetof(HWItemStoreItemEntry_CanPurchase, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_CanPurchase::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.GetCurrentGold
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreItemEntry_GetCurrentGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_GetCurrentGold) == 0x000004, "Wrong alignment on HWItemStoreItemEntry_GetCurrentGold");
static_assert(sizeof(HWItemStoreItemEntry_GetCurrentGold) == 0x000004, "Wrong size on HWItemStoreItemEntry_GetCurrentGold");
static_assert(offsetof(HWItemStoreItemEntry_GetCurrentGold, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_GetCurrentGold::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.GetEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemEntry_GetEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_GetEquipmentItem) == 0x000008, "Wrong alignment on HWItemStoreItemEntry_GetEquipmentItem");
static_assert(sizeof(HWItemStoreItemEntry_GetEquipmentItem) == 0x000008, "Wrong size on HWItemStoreItemEntry_GetEquipmentItem");
static_assert(offsetof(HWItemStoreItemEntry_GetEquipmentItem, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_GetEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.GetIsOwned
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_GetIsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_GetIsOwned) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_GetIsOwned");
static_assert(sizeof(HWItemStoreItemEntry_GetIsOwned) == 0x000001, "Wrong size on HWItemStoreItemEntry_GetIsOwned");
static_assert(offsetof(HWItemStoreItemEntry_GetIsOwned, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_GetIsOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.GetIsUnique
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_GetIsUnique final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_GetIsUnique) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_GetIsUnique");
static_assert(sizeof(HWItemStoreItemEntry_GetIsUnique) == 0x000001, "Wrong size on HWItemStoreItemEntry_GetIsUnique");
static_assert(offsetof(HWItemStoreItemEntry_GetIsUnique, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_GetIsUnique::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.GetPrice
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreItemEntry_GetPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_GetPrice) == 0x000004, "Wrong alignment on HWItemStoreItemEntry_GetPrice");
static_assert(sizeof(HWItemStoreItemEntry_GetPrice) == 0x000004, "Wrong size on HWItemStoreItemEntry_GetPrice");
static_assert(offsetof(HWItemStoreItemEntry_GetPrice, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_GetPrice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemEntry.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemEntry_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemEntry_IsSelected) == 0x000001, "Wrong alignment on HWItemStoreItemEntry_IsSelected");
static_assert(sizeof(HWItemStoreItemEntry_IsSelected) == 0x000001, "Wrong size on HWItemStoreItemEntry_IsSelected");
static_assert(offsetof(HWItemStoreItemEntry_IsSelected, ReturnValue) == 0x000000, "Member 'HWItemStoreItemEntry_IsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.SetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_SetDraftActor final
{
public:
	class ADraftReplicatedActor*                  InDraftActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_SetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_SetDraftActor");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_SetDraftActor) == 0x000008, "Wrong size on HWDraftLobbySkinSelectEntryWidget_SetDraftActor");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_SetDraftActor, InDraftActor) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_SetDraftActor::InDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.SetDraftChoice
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_SetDraftChoice final
{
public:
	struct FDraftChoice                           InDraftChoice;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_SetDraftChoice) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_SetDraftChoice");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_SetDraftChoice) == 0x000010, "Wrong size on HWDraftLobbySkinSelectEntryWidget_SetDraftChoice");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_SetDraftChoice, InDraftChoice) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_SetDraftChoice::InDraftChoice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.SetEntrySelected
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_SetEntrySelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_SetEntrySelected) == 0x000001, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_SetEntrySelected");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_SetEntrySelected) == 0x000001, "Wrong size on HWDraftLobbySkinSelectEntryWidget_SetEntrySelected");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_SetEntrySelected, bSelected) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_SetEntrySelected::bSelected' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.GetDraftActorSkinChoice
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice final
{
public:
	const class UHWSkinItem*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice) == 0x000008, "Wrong size on HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice, ReturnValue) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_GetDraftActorSkinChoice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.GetDraftChoice
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_GetDraftChoice final
{
public:
	struct FDraftChoice                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_GetDraftChoice) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_GetDraftChoice");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_GetDraftChoice) == 0x000010, "Wrong size on HWDraftLobbySkinSelectEntryWidget_GetDraftChoice");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_GetDraftChoice, ReturnValue) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_GetDraftChoice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectEntryWidget.IsSelectedDraftSkinChoice
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice) == 0x000001, "Wrong alignment on HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice");
static_assert(sizeof(HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice) == 0x000001, "Wrong size on HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice");
static_assert(offsetof(HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice, ReturnValue) == 0x000000, "Member 'HWDraftLobbySkinSelectEntryWidget_IsSelectedDraftSkinChoice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.AddInputHandlerWidgetToStack
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUD_AddInputHandlerWidgetToStack final
{
public:
	class UHWWidget*                              WidgetToAdd;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWBaseHUD_AddInputHandlerWidgetToStack) == 0x000008, "Wrong alignment on HWBaseHUD_AddInputHandlerWidgetToStack");
static_assert(sizeof(HWBaseHUD_AddInputHandlerWidgetToStack) == 0x000010, "Wrong size on HWBaseHUD_AddInputHandlerWidgetToStack");
static_assert(offsetof(HWBaseHUD_AddInputHandlerWidgetToStack, WidgetToAdd) == 0x000000, "Member 'HWBaseHUD_AddInputHandlerWidgetToStack::WidgetToAdd' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_AddInputHandlerWidgetToStack, ReturnValue) == 0x000008, "Member 'HWBaseHUD_AddInputHandlerWidgetToStack::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.CreateDebugHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_CreateDebugHUDWidget final
{
public:
	class UHWDebugHUDWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_CreateDebugHUDWidget) == 0x000008, "Wrong alignment on HWBaseHUD_CreateDebugHUDWidget");
static_assert(sizeof(HWBaseHUD_CreateDebugHUDWidget) == 0x000008, "Wrong size on HWBaseHUD_CreateDebugHUDWidget");
static_assert(offsetof(HWBaseHUD_CreateDebugHUDWidget, ReturnValue) == 0x000000, "Member 'HWBaseHUD_CreateDebugHUDWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GamePhaseChanged
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GamePhaseChanged final
{
public:
	struct FGameplayTag                           NewPhaseTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GamePhaseChanged) == 0x000004, "Wrong alignment on HWBaseHUD_GamePhaseChanged");
static_assert(sizeof(HWBaseHUD_GamePhaseChanged) == 0x000008, "Wrong size on HWBaseHUD_GamePhaseChanged");
static_assert(offsetof(HWBaseHUD_GamePhaseChanged, NewPhaseTag) == 0x000000, "Member 'HWBaseHUD_GamePhaseChanged::NewPhaseTag' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.HandleGamePhaseChanged
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUD_HandleGamePhaseChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_HandleGamePhaseChanged) == 0x000004, "Wrong alignment on HWBaseHUD_HandleGamePhaseChanged");
static_assert(sizeof(HWBaseHUD_HandleGamePhaseChanged) == 0x000010, "Wrong size on HWBaseHUD_HandleGamePhaseChanged");
static_assert(offsetof(HWBaseHUD_HandleGamePhaseChanged, PhaseTag) == 0x000000, "Member 'HWBaseHUD_HandleGamePhaseChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_HandleGamePhaseChanged, PhaseStartTime) == 0x000008, "Member 'HWBaseHUD_HandleGamePhaseChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_HandleGamePhaseChanged, PhaseDuration) == 0x00000C, "Member 'HWBaseHUD_HandleGamePhaseChanged::PhaseDuration' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWBaseHUD_HandlePlayerStateReplicated");
static_assert(sizeof(HWBaseHUD_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWBaseHUD_HandlePlayerStateReplicated");
static_assert(offsetof(HWBaseHUD_HandlePlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWBaseHUD_HandlePlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.LoadDevHUD
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_LoadDevHUD final
{
public:
	class FName                                   DevHUDName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_LoadDevHUD) == 0x000004, "Wrong alignment on HWBaseHUD_LoadDevHUD");
static_assert(sizeof(HWBaseHUD_LoadDevHUD) == 0x000008, "Wrong size on HWBaseHUD_LoadDevHUD");
static_assert(offsetof(HWBaseHUD_LoadDevHUD, DevHUDName) == 0x000000, "Member 'HWBaseHUD_LoadDevHUD::DevHUDName' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.RemoveInputHandlerWidgetFromStack
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUD_RemoveInputHandlerWidgetFromStack final
{
public:
	class UHWWidget*                              WidgetToRemove;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWBaseHUD_RemoveInputHandlerWidgetFromStack) == 0x000008, "Wrong alignment on HWBaseHUD_RemoveInputHandlerWidgetFromStack");
static_assert(sizeof(HWBaseHUD_RemoveInputHandlerWidgetFromStack) == 0x000010, "Wrong size on HWBaseHUD_RemoveInputHandlerWidgetFromStack");
static_assert(offsetof(HWBaseHUD_RemoveInputHandlerWidgetFromStack, WidgetToRemove) == 0x000000, "Member 'HWBaseHUD_RemoveInputHandlerWidgetFromStack::WidgetToRemove' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_RemoveInputHandlerWidgetFromStack, ReturnValue) == 0x000008, "Member 'HWBaseHUD_RemoveInputHandlerWidgetFromStack::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetActiveInputMode
// 0x0001 (0x0001 - 0x0000)
struct HWBaseHUD_GetActiveInputMode final
{
public:
	ECommonInputMode                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetActiveInputMode) == 0x000001, "Wrong alignment on HWBaseHUD_GetActiveInputMode");
static_assert(sizeof(HWBaseHUD_GetActiveInputMode) == 0x000001, "Wrong size on HWBaseHUD_GetActiveInputMode");
static_assert(offsetof(HWBaseHUD_GetActiveInputMode, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetActiveInputMode::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetBaseHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetBaseHUDWidget final
{
public:
	class UHWBaseHUDWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetBaseHUDWidget) == 0x000008, "Wrong alignment on HWBaseHUD_GetBaseHUDWidget");
static_assert(sizeof(HWBaseHUD_GetBaseHUDWidget) == 0x000008, "Wrong size on HWBaseHUD_GetBaseHUDWidget");
static_assert(offsetof(HWBaseHUD_GetBaseHUDWidget, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetBaseHUDWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetCommonMaterialAnimation
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUD_GetCommonMaterialAnimation final
{
public:
	struct FGameplayTag                           MaterialTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetCommonMaterialAnimation) == 0x000008, "Wrong alignment on HWBaseHUD_GetCommonMaterialAnimation");
static_assert(sizeof(HWBaseHUD_GetCommonMaterialAnimation) == 0x000010, "Wrong size on HWBaseHUD_GetCommonMaterialAnimation");
static_assert(offsetof(HWBaseHUD_GetCommonMaterialAnimation, MaterialTag) == 0x000000, "Member 'HWBaseHUD_GetCommonMaterialAnimation::MaterialTag' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_GetCommonMaterialAnimation, ReturnValue) == 0x000008, "Member 'HWBaseHUD_GetCommonMaterialAnimation::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetCurrentPhaseTag
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetCurrentPhaseTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetCurrentPhaseTag) == 0x000004, "Wrong alignment on HWBaseHUD_GetCurrentPhaseTag");
static_assert(sizeof(HWBaseHUD_GetCurrentPhaseTag) == 0x000008, "Wrong size on HWBaseHUD_GetCurrentPhaseTag");
static_assert(offsetof(HWBaseHUD_GetCurrentPhaseTag, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetCurrentPhaseTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetDevHUDTable
// 0x0028 (0x0028 - 0x0000)
struct HWBaseHUD_GetDevHUDTable final
{
public:
	TSoftObjectPtr<class UDataTable>              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetDevHUDTable) == 0x000008, "Wrong alignment on HWBaseHUD_GetDevHUDTable");
static_assert(sizeof(HWBaseHUD_GetDevHUDTable) == 0x000028, "Wrong size on HWBaseHUD_GetDevHUDTable");
static_assert(offsetof(HWBaseHUD_GetDevHUDTable, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetDevHUDTable::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetHWViewManager
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetHWViewManager final
{
public:
	class UHWViewManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetHWViewManager) == 0x000008, "Wrong alignment on HWBaseHUD_GetHWViewManager");
static_assert(sizeof(HWBaseHUD_GetHWViewManager) == 0x000008, "Wrong size on HWBaseHUD_GetHWViewManager");
static_assert(offsetof(HWBaseHUD_GetHWViewManager, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetHWViewManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetInputPlatformSettings
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetInputPlatformSettings final
{
public:
	class UHWInputPlatformSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetInputPlatformSettings) == 0x000008, "Wrong alignment on HWBaseHUD_GetInputPlatformSettings");
static_assert(sizeof(HWBaseHUD_GetInputPlatformSettings) == 0x000008, "Wrong size on HWBaseHUD_GetInputPlatformSettings");
static_assert(offsetof(HWBaseHUD_GetInputPlatformSettings, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetInputPlatformSettings::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetIsHUDShown
// 0x0001 (0x0001 - 0x0000)
struct HWBaseHUD_GetIsHUDShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetIsHUDShown) == 0x000001, "Wrong alignment on HWBaseHUD_GetIsHUDShown");
static_assert(sizeof(HWBaseHUD_GetIsHUDShown) == 0x000001, "Wrong size on HWBaseHUD_GetIsHUDShown");
static_assert(offsetof(HWBaseHUD_GetIsHUDShown, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetIsHUDShown::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetLoadedGameModeDefaultObject
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetLoadedGameModeDefaultObject final
{
public:
	const class AHWGameMode*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetLoadedGameModeDefaultObject) == 0x000008, "Wrong alignment on HWBaseHUD_GetLoadedGameModeDefaultObject");
static_assert(sizeof(HWBaseHUD_GetLoadedGameModeDefaultObject) == 0x000008, "Wrong size on HWBaseHUD_GetLoadedGameModeDefaultObject");
static_assert(offsetof(HWBaseHUD_GetLoadedGameModeDefaultObject, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetLoadedGameModeDefaultObject::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetLoadedGameModeTag
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetLoadedGameModeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetLoadedGameModeTag) == 0x000004, "Wrong alignment on HWBaseHUD_GetLoadedGameModeTag");
static_assert(sizeof(HWBaseHUD_GetLoadedGameModeTag) == 0x000008, "Wrong size on HWBaseHUD_GetLoadedGameModeTag");
static_assert(offsetof(HWBaseHUD_GetLoadedGameModeTag, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetLoadedGameModeTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetLocalPlayerController final
{
public:
	class AHWPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetLocalPlayerController) == 0x000008, "Wrong alignment on HWBaseHUD_GetLocalPlayerController");
static_assert(sizeof(HWBaseHUD_GetLocalPlayerController) == 0x000008, "Wrong size on HWBaseHUD_GetLocalPlayerController");
static_assert(offsetof(HWBaseHUD_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetLocalPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetLocalPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetLocalPlayerState) == 0x000008, "Wrong alignment on HWBaseHUD_GetLocalPlayerState");
static_assert(sizeof(HWBaseHUD_GetLocalPlayerState) == 0x000008, "Wrong size on HWBaseHUD_GetLocalPlayerState");
static_assert(offsetof(HWBaseHUD_GetLocalPlayerState, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetPlayerSettingsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetPlayerSettingsSubsystem final
{
public:
	class UHWPlayerSettingsSubsystem*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetPlayerSettingsSubsystem) == 0x000008, "Wrong alignment on HWBaseHUD_GetPlayerSettingsSubsystem");
static_assert(sizeof(HWBaseHUD_GetPlayerSettingsSubsystem) == 0x000008, "Wrong size on HWBaseHUD_GetPlayerSettingsSubsystem");
static_assert(offsetof(HWBaseHUD_GetPlayerSettingsSubsystem, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetPlayerSettingsSubsystem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetSystemSettingsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetSystemSettingsSubsystem final
{
public:
	class UHWSystemSettingsSubsystem*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetSystemSettingsSubsystem) == 0x000008, "Wrong alignment on HWBaseHUD_GetSystemSettingsSubsystem");
static_assert(sizeof(HWBaseHUD_GetSystemSettingsSubsystem) == 0x000008, "Wrong size on HWBaseHUD_GetSystemSettingsSubsystem");
static_assert(offsetof(HWBaseHUD_GetSystemSettingsSubsystem, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetSystemSettingsSubsystem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetTooltipWidgetManager
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetTooltipWidgetManager final
{
public:
	class UHWTooltipWidgetManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetTooltipWidgetManager) == 0x000008, "Wrong alignment on HWBaseHUD_GetTooltipWidgetManager");
static_assert(sizeof(HWBaseHUD_GetTooltipWidgetManager) == 0x000008, "Wrong size on HWBaseHUD_GetTooltipWidgetManager");
static_assert(offsetof(HWBaseHUD_GetTooltipWidgetManager, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetTooltipWidgetManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.GetTopInputHandlerWidget
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUD_GetTopInputHandlerWidget final
{
public:
	class UHWWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_GetTopInputHandlerWidget) == 0x000008, "Wrong alignment on HWBaseHUD_GetTopInputHandlerWidget");
static_assert(sizeof(HWBaseHUD_GetTopInputHandlerWidget) == 0x000008, "Wrong size on HWBaseHUD_GetTopInputHandlerWidget");
static_assert(offsetof(HWBaseHUD_GetTopInputHandlerWidget, ReturnValue) == 0x000000, "Member 'HWBaseHUD_GetTopInputHandlerWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.IsActorInLocalPlayerLOS
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUD_IsActorInLocalPlayerLOS final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreTarget;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWBaseHUD_IsActorInLocalPlayerLOS) == 0x000008, "Wrong alignment on HWBaseHUD_IsActorInLocalPlayerLOS");
static_assert(sizeof(HWBaseHUD_IsActorInLocalPlayerLOS) == 0x000010, "Wrong size on HWBaseHUD_IsActorInLocalPlayerLOS");
static_assert(offsetof(HWBaseHUD_IsActorInLocalPlayerLOS, TargetActor) == 0x000000, "Member 'HWBaseHUD_IsActorInLocalPlayerLOS::TargetActor' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_IsActorInLocalPlayerLOS, bIgnoreTarget) == 0x000008, "Member 'HWBaseHUD_IsActorInLocalPlayerLOS::bIgnoreTarget' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_IsActorInLocalPlayerLOS, ReturnValue) == 0x000009, "Member 'HWBaseHUD_IsActorInLocalPlayerLOS::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.IsLocationInLocalPlayerLOS
// 0x0028 (0x0028 - 0x0000)
struct HWBaseHUD_IsLocationInLocalPlayerLOS final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ignoreActor;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWBaseHUD_IsLocationInLocalPlayerLOS) == 0x000008, "Wrong alignment on HWBaseHUD_IsLocationInLocalPlayerLOS");
static_assert(sizeof(HWBaseHUD_IsLocationInLocalPlayerLOS) == 0x000028, "Wrong size on HWBaseHUD_IsLocationInLocalPlayerLOS");
static_assert(offsetof(HWBaseHUD_IsLocationInLocalPlayerLOS, Location) == 0x000000, "Member 'HWBaseHUD_IsLocationInLocalPlayerLOS::Location' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_IsLocationInLocalPlayerLOS, ignoreActor) == 0x000018, "Member 'HWBaseHUD_IsLocationInLocalPlayerLOS::ignoreActor' has a wrong offset!");
static_assert(offsetof(HWBaseHUD_IsLocationInLocalPlayerLOS, ReturnValue) == 0x000020, "Member 'HWBaseHUD_IsLocationInLocalPlayerLOS::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUD.ShouldShowCallouts
// 0x0001 (0x0001 - 0x0000)
struct HWBaseHUD_ShouldShowCallouts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUD_ShouldShowCallouts) == 0x000001, "Wrong alignment on HWBaseHUD_ShouldShowCallouts");
static_assert(sizeof(HWBaseHUD_ShouldShowCallouts) == 0x000001, "Wrong size on HWBaseHUD_ShouldShowCallouts");
static_assert(offsetof(HWBaseHUD_ShouldShowCallouts, ReturnValue) == 0x000000, "Member 'HWBaseHUD_ShouldShowCallouts::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyHUD.GetLocalTeam
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyHUD_GetLocalTeam final
{
public:
	class AHWTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyHUD_GetLocalTeam) == 0x000008, "Wrong alignment on HWDraftLobbyHUD_GetLocalTeam");
static_assert(sizeof(HWDraftLobbyHUD_GetLocalTeam) == 0x000008, "Wrong size on HWDraftLobbyHUD_GetLocalTeam");
static_assert(offsetof(HWDraftLobbyHUD_GetLocalTeam, ReturnValue) == 0x000000, "Member 'HWDraftLobbyHUD_GetLocalTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyHUD.GetLocalTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyHUD_GetLocalTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyHUD_GetLocalTeamId) == 0x000001, "Wrong alignment on HWDraftLobbyHUD_GetLocalTeamId");
static_assert(sizeof(HWDraftLobbyHUD_GetLocalTeamId) == 0x000001, "Wrong size on HWDraftLobbyHUD_GetLocalTeamId");
static_assert(offsetof(HWDraftLobbyHUD_GetLocalTeamId, ReturnValue) == 0x000000, "Member 'HWDraftLobbyHUD_GetLocalTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyHUD.GetTeam
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyHUD_GetTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyHUD_GetTeam) == 0x000008, "Wrong alignment on HWDraftLobbyHUD_GetTeam");
static_assert(sizeof(HWDraftLobbyHUD_GetTeam) == 0x000010, "Wrong size on HWDraftLobbyHUD_GetTeam");
static_assert(offsetof(HWDraftLobbyHUD_GetTeam, TeamId) == 0x000000, "Member 'HWDraftLobbyHUD_GetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyHUD_GetTeam, ReturnValue) == 0x000008, "Member 'HWDraftLobbyHUD_GetTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.HandleSkinChoicesChanged
// 0x0020 (0x0020 - 0x0000)
struct HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged final
{
public:
	TArray<class UObject*>                        RemovedChoices;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        AddedOrUpdatedChoices;                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged) == 0x000020, "Wrong size on HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged, RemovedChoices) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged::RemovedChoices' has a wrong offset!");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged, AddedOrUpdatedChoices) == 0x000010, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinChoicesChanged::AddedOrUpdatedChoices' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.HandleSkinEntryHovered
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered) == 0x000010, "Wrong size on HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered, EntryWidget) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered, InventoryItem) == 0x000008, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntryHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.HandleSkinEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected) == 0x000010, "Wrong size on HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected, EntryWidget) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected, InventoryItem) == 0x000008, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntrySelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.HandleSkinEntryUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered) == 0x000010, "Wrong size on HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered, InventoryItem) == 0x000008, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinEntryUnhovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.HandleSkinVariantRequestSelect
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect final
{
public:
	class UHWStoreItemDisplayWidget*              PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect) == 0x000008, "Wrong size on HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect, PipWidget) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_HandleSkinVariantRequestSelect::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.SelectSkinEntryWithItem
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem final
{
public:
	class UHWInventoryItem*                       BaseInventoryItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       VariantInventoryItem;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem) == 0x000010, "Wrong size on HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem, BaseInventoryItem) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem::BaseInventoryItem' has a wrong offset!");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem, VariantInventoryItem) == 0x000008, "Member 'HWDraftLobbySkinSelectWidget_SelectSkinEntryWithItem::VariantInventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.SetCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectWidget_SetCharacterItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_SetCharacterItem) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_SetCharacterItem");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_SetCharacterItem) == 0x000008, "Wrong size on HWDraftLobbySkinSelectWidget_SetCharacterItem");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_SetCharacterItem, InCharacterItem) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_SetCharacterItem::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.SetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectWidget_SetDraftActor final
{
public:
	class ADraftReplicatedActor*                  InDraftActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_SetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_SetDraftActor");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_SetDraftActor) == 0x000008, "Wrong size on HWDraftLobbySkinSelectWidget_SetDraftActor");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_SetDraftActor, InDraftActor) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_SetDraftActor::InDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.GetDisplayedSkinItem
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem final
{
public:
	class UHWSkinItem*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem) == 0x000008, "Wrong size on HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem, ReturnValue) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_GetDisplayedSkinItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbySkinSelectWidget.GetEquippedSkinEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget final
{
public:
	class UHWDraftLobbySkinSelectEntryWidget*     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget) == 0x000008, "Wrong alignment on HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget");
static_assert(sizeof(HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget) == 0x000008, "Wrong size on HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget");
static_assert(offsetof(HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget, ReturnValue) == 0x000000, "Member 'HWDraftLobbySkinSelectWidget_GetEquippedSkinEntryWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.CreatePlayerWidgetFor
// 0x0028 (0x0028 - 0x0000)
struct HWDraftLobbyTeamWidget_CreatePlayerWidgetFor final
{
public:
	struct FHWPersistentPlayerId                  PlayerId;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_CreatePlayerWidgetFor) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_CreatePlayerWidgetFor");
static_assert(sizeof(HWDraftLobbyTeamWidget_CreatePlayerWidgetFor) == 0x000028, "Wrong size on HWDraftLobbyTeamWidget_CreatePlayerWidgetFor");
static_assert(offsetof(HWDraftLobbyTeamWidget_CreatePlayerWidgetFor, PlayerId) == 0x000000, "Member 'HWDraftLobbyTeamWidget_CreatePlayerWidgetFor::PlayerId' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_CreatePlayerWidgetFor, ReturnValue) == 0x000020, "Member 'HWDraftLobbyTeamWidget_CreatePlayerWidgetFor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.GetTeamNumber
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyTeamWidget_GetTeamNumber final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_GetTeamNumber) == 0x000001, "Wrong alignment on HWDraftLobbyTeamWidget_GetTeamNumber");
static_assert(sizeof(HWDraftLobbyTeamWidget_GetTeamNumber) == 0x000001, "Wrong size on HWDraftLobbyTeamWidget_GetTeamNumber");
static_assert(offsetof(HWDraftLobbyTeamWidget_GetTeamNumber, ReturnValue) == 0x000000, "Member 'HWDraftLobbyTeamWidget_GetTeamNumber::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OnActiveSessionChanged
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyTeamWidget_OnActiveSessionChanged final
{
public:
	class URH_JoinedSession*                      OldSession;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_JoinedSession*                      NewSession;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_OnActiveSessionChanged) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_OnActiveSessionChanged");
static_assert(sizeof(HWDraftLobbyTeamWidget_OnActiveSessionChanged) == 0x000010, "Wrong size on HWDraftLobbyTeamWidget_OnActiveSessionChanged");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnActiveSessionChanged, OldSession) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OnActiveSessionChanged::OldSession' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnActiveSessionChanged, NewSession) == 0x000008, "Member 'HWDraftLobbyTeamWidget_OnActiveSessionChanged::NewSession' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OnGamePhaseEnded
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_OnGamePhaseEnded final
{
public:
	struct FGameplayTag                           CurrentPhase;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_OnGamePhaseEnded) == 0x000004, "Wrong alignment on HWDraftLobbyTeamWidget_OnGamePhaseEnded");
static_assert(sizeof(HWDraftLobbyTeamWidget_OnGamePhaseEnded) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_OnGamePhaseEnded");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnGamePhaseEnded, CurrentPhase) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OnGamePhaseEnded::CurrentPhase' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OnGameStatePhaseStarted
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_OnGameStatePhaseStarted final
{
public:
	struct FGameplayTag                           NewPhase;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_OnGameStatePhaseStarted) == 0x000004, "Wrong alignment on HWDraftLobbyTeamWidget_OnGameStatePhaseStarted");
static_assert(sizeof(HWDraftLobbyTeamWidget_OnGameStatePhaseStarted) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_OnGameStatePhaseStarted");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnGameStatePhaseStarted, NewPhase) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OnGameStatePhaseStarted::NewPhase' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OnPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_OnPlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_OnPlayerStateReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_OnPlayerStateReplicated");
static_assert(sizeof(HWDraftLobbyTeamWidget_OnPlayerStateReplicated) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_OnPlayerStateReplicated");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnPlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OnPlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OnTeamAddedToGameState
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_OnTeamAddedToGameState final
{
public:
	class AHWTeamState*                           inTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_OnTeamAddedToGameState) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_OnTeamAddedToGameState");
static_assert(sizeof(HWDraftLobbyTeamWidget_OnTeamAddedToGameState) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_OnTeamAddedToGameState");
static_assert(offsetof(HWDraftLobbyTeamWidget_OnTeamAddedToGameState, inTeam) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OnTeamAddedToGameState::inTeam' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.OwnerTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyTeamWidget_OwnerTeamUpdated final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyTeamWidget_OwnerTeamUpdated) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_OwnerTeamUpdated");
static_assert(sizeof(HWDraftLobbyTeamWidget_OwnerTeamUpdated) == 0x000010, "Wrong size on HWDraftLobbyTeamWidget_OwnerTeamUpdated");
static_assert(offsetof(HWDraftLobbyTeamWidget_OwnerTeamUpdated, Controller) == 0x000000, "Member 'HWDraftLobbyTeamWidget_OwnerTeamUpdated::Controller' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_OwnerTeamUpdated, TeamId) == 0x000008, "Member 'HWDraftLobbyTeamWidget_OwnerTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.SetAutoTeamConfig
// 0x0002 (0x0002 - 0x0000)
struct HWDraftLobbyTeamWidget_SetAutoTeamConfig final
{
public:
	EHWAutoRegisterTeamType                       InAutoTeamType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         InTeamNum;                                         // 0x0001(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_SetAutoTeamConfig) == 0x000001, "Wrong alignment on HWDraftLobbyTeamWidget_SetAutoTeamConfig");
static_assert(sizeof(HWDraftLobbyTeamWidget_SetAutoTeamConfig) == 0x000002, "Wrong size on HWDraftLobbyTeamWidget_SetAutoTeamConfig");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetAutoTeamConfig, InAutoTeamType) == 0x000000, "Member 'HWDraftLobbyTeamWidget_SetAutoTeamConfig::InAutoTeamType' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetAutoTeamConfig, InTeamNum) == 0x000001, "Member 'HWDraftLobbyTeamWidget_SetAutoTeamConfig::InTeamNum' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.SetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_SetDraftActor final
{
public:
	class ADraftReplicatedActor*                  InDraftActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_SetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_SetDraftActor");
static_assert(sizeof(HWDraftLobbyTeamWidget_SetDraftActor) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_SetDraftActor");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetDraftActor, InDraftActor) == 0x000000, "Member 'HWDraftLobbyTeamWidget_SetDraftActor::InDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.SetPanelWidget
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyTeamWidget_SetPanelWidget final
{
public:
	class UHWUniformGridPanel*                    InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_SetPanelWidget) == 0x000008, "Wrong alignment on HWDraftLobbyTeamWidget_SetPanelWidget");
static_assert(sizeof(HWDraftLobbyTeamWidget_SetPanelWidget) == 0x000008, "Wrong size on HWDraftLobbyTeamWidget_SetPanelWidget");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetPanelWidget, InPanel) == 0x000000, "Member 'HWDraftLobbyTeamWidget_SetPanelWidget::InPanel' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyTeamWidget_SetTeam final
{
public:
	struct FGenericTeamId                         NewTeamNumber;                                     // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyTeamWidget_SetTeam) == 0x000001, "Wrong alignment on HWDraftLobbyTeamWidget_SetTeam");
static_assert(sizeof(HWDraftLobbyTeamWidget_SetTeam) == 0x000001, "Wrong size on HWDraftLobbyTeamWidget_SetTeam");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetTeam, NewTeamNumber) == 0x000000, "Member 'HWDraftLobbyTeamWidget_SetTeam::NewTeamNumber' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyTeamWidget.SetVoiceChatState
// 0x0014 (0x0014 - 0x0000)
struct HWDraftLobbyTeamWidget_SetVoiceChatState final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVoiceChannel;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyTeamWidget_SetVoiceChatState) == 0x000004, "Wrong alignment on HWDraftLobbyTeamWidget_SetVoiceChatState");
static_assert(sizeof(HWDraftLobbyTeamWidget_SetVoiceChatState) == 0x000014, "Wrong size on HWDraftLobbyTeamWidget_SetVoiceChatState");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetVoiceChatState, PlayerUuid) == 0x000000, "Member 'HWDraftLobbyTeamWidget_SetVoiceChatState::PlayerUuid' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetVoiceChatState, bInVoiceChannel) == 0x000010, "Member 'HWDraftLobbyTeamWidget_SetVoiceChatState::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetVoiceChatState, bIsTalking) == 0x000011, "Member 'HWDraftLobbyTeamWidget_SetVoiceChatState::bIsTalking' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyTeamWidget_SetVoiceChatState, bIsMuted) == 0x000012, "Member 'HWDraftLobbyTeamWidget_SetVoiceChatState::bIsMuted' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.GetPlayerStat
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEndOfMatchLobbyDetailsStat*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat) == 0x000010, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat, StatTag) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat::StatTag' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat, ReturnValue) == 0x000008, "Member 'HWEndOfMatchLobbyDetailsPlayer_GetPlayerStat::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.HandleStatHovered
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered final
{
public:
	int32                                         RowNumber;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered) == 0x000008, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered, RowNumber) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered::RowNumber' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered, bIsHovered) == 0x000004, "Member 'HWEndOfMatchLobbyDetailsPlayer_HandleStatHovered::bIsHovered' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem) == 0x000008, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem, InCharacterItem) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetCharacterItem::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetIsEnemy
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy final
{
public:
	bool                                          bInIsEnemy;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy, bInIsEnemy) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetIsEnemy::bInIsEnemy' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetPlayer
// 0x0018 (0x0018 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetPlayer final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InPlayerUUID;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetPlayer) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetPlayer");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetPlayer) == 0x000018, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetPlayer");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetPlayer, PlayerInfo) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetPlayer::PlayerInfo' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetPlayer, InPlayerUUID) == 0x000008, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetPlayer::InPlayerUUID' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo) == 0x000008, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo, PlayerInfo) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetPlayerInfo::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetPlayerStats
// 0x0050 (0x0050 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats final
{
public:
	TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat> PlayerDetails;                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats) == 0x000050, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats, PlayerDetails) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetPlayerStats::PlayerDetails' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.SetStatsHovered
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighlightAll;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered) == 0x000008, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered, Row) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered::Row' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered, bIsHovered) == 0x000004, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered::bIsHovered' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered, bHighlightAll) == 0x000005, "Member 'HWEndOfMatchLobbyDetailsPlayer_SetStatsHovered::bHighlightAll' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsPlayer.UpdatePlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        PlatformType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon");
static_assert(sizeof(HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon");
static_assert(offsetof(HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon, PlatformType) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsPlayer_UpdatePlayerPlatformIcon::PlatformType' has a wrong offset!");

// Function HemingwayUI.HWComboBoxEntry.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWComboBoxEntry_SetIsSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBoxEntry_SetIsSelected) == 0x000001, "Wrong alignment on HWComboBoxEntry_SetIsSelected");
static_assert(sizeof(HWComboBoxEntry_SetIsSelected) == 0x000001, "Wrong size on HWComboBoxEntry_SetIsSelected");
static_assert(offsetof(HWComboBoxEntry_SetIsSelected, bIsSelected) == 0x000000, "Member 'HWComboBoxEntry_SetIsSelected::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWComboBoxEntry.SetText
// 0x0018 (0x0018 - 0x0000)
struct HWComboBoxEntry_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBoxEntry_SetText) == 0x000008, "Wrong alignment on HWComboBoxEntry_SetText");
static_assert(sizeof(HWComboBoxEntry_SetText) == 0x000018, "Wrong size on HWComboBoxEntry_SetText");
static_assert(offsetof(HWComboBoxEntry_SetText, InText) == 0x000000, "Member 'HWComboBoxEntry_SetText::InText' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.GetRow
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_GetRow final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_GetRow) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_GetRow");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_GetRow) == 0x000004, "Wrong size on HWEndOfMatchLobbyDetailsStat_GetRow");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_GetRow, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_GetRow::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.GetStatTag
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_GetStatTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_GetStatTag) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_GetStatTag");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_GetStatTag) == 0x000008, "Wrong size on HWEndOfMatchLobbyDetailsStat_GetStatTag");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_GetStatTag, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_GetStatTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.GetStatValue
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_GetStatValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_GetStatValue) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_GetStatValue");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_GetStatValue) == 0x000004, "Wrong size on HWEndOfMatchLobbyDetailsStat_GetStatValue");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_GetStatValue, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_GetStatValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.HandleIsBestInStat
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat final
{
public:
	bool                                          bIsBestInStat;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat, bIsBestInStat) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_HandleIsBestInStat::bIsBestInStat' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.HandleStatHovered
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_HandleStatHovered final
{
public:
	bool                                          bIsHovered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_HandleStatHovered) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_HandleStatHovered");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_HandleStatHovered) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsStat_HandleStatHovered");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_HandleStatHovered, bIsHovered) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_HandleStatHovered::bIsHovered' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.HandleStatSet
// 0x0028 (0x0028 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_HandleStatSet final
{
public:
	struct FGameplayTag                           InStatTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InStatText;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InStatValue;                                       // 0x0020(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_HandleStatSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_HandleStatSet");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_HandleStatSet) == 0x000028, "Wrong size on HWEndOfMatchLobbyDetailsStat_HandleStatSet");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_HandleStatSet, InStatTag) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_HandleStatSet::InStatTag' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_HandleStatSet, InStatText) == 0x000008, "Member 'HWEndOfMatchLobbyDetailsStat_HandleStatSet::InStatText' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_HandleStatSet, InStatValue) == 0x000020, "Member 'HWEndOfMatchLobbyDetailsStat_HandleStatSet::InStatValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.SetIsEnemy
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_SetIsEnemy final
{
public:
	bool                                          bIsEnemy;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_SetIsEnemy) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_SetIsEnemy");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_SetIsEnemy) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsStat_SetIsEnemy");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_SetIsEnemy, bIsEnemy) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_SetIsEnemy::bIsEnemy' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsStat.SetRow
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyDetailsStat_SetRow final
{
public:
	int32                                         InRow;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsStat_SetRow) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyDetailsStat_SetRow");
static_assert(sizeof(HWEndOfMatchLobbyDetailsStat_SetRow) == 0x000004, "Wrong size on HWEndOfMatchLobbyDetailsStat_SetRow");
static_assert(offsetof(HWEndOfMatchLobbyDetailsStat_SetRow, InRow) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsStat_SetRow::InRow' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsTeam.CreatePlayerWidget
// 0x0058 (0x0058 - 0x0000)
struct HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget final
{
public:
	TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat> TagToTextMap;                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UHWEndOfMatchLobbyDetailsPlayer*        ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget");
static_assert(sizeof(HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget) == 0x000058, "Wrong size on HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget, TagToTextMap) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget::TagToTextMap' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget, ReturnValue) == 0x000050, "Member 'HWEndOfMatchLobbyDetailsTeam_CreatePlayerWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsTeam.DetermineHighestInStat
// 0x0020 (0x0020 - 0x0000)
struct HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat final
{
public:
	struct FHWEndOfMatchBestInStat                BestInStat;                                        // 0x0000(0x0018)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0018(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat");
static_assert(sizeof(HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat) == 0x000020, "Wrong size on HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat, BestInStat) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat::BestInStat' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat, Tag) == 0x000018, "Member 'HWEndOfMatchLobbyDetailsTeam_DetermineHighestInStat::Tag' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsTeam.GetPlayerWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets final
{
public:
	TArray<class UHWEndOfMatchLobbyDetailsPlayer*> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets");
static_assert(sizeof(HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets) == 0x000010, "Wrong size on HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsTeam_GetPlayerWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsTeam.GetTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsTeam_GetTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsTeam_GetTeamId) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsTeam_GetTeamId");
static_assert(sizeof(HWEndOfMatchLobbyDetailsTeam_GetTeamId) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsTeam_GetTeamId");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_GetTeamId, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsTeam_GetTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsTeam.SetTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsTeam_SetTeamId final
{
public:
	struct FGenericTeamId                         InTeamId;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsTeam_SetTeamId) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsTeam_SetTeamId");
static_assert(sizeof(HWEndOfMatchLobbyDetailsTeam_SetTeamId) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsTeam_SetTeamId");
static_assert(offsetof(HWEndOfMatchLobbyDetailsTeam_SetTeamId, InTeamId) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsTeam_SetTeamId::InTeamId' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.AddPlayerMatchDetails
// 0x0060 (0x0060 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails final
{
public:
	TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat> StatToTextMap;                        // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0050(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEndOfMatchLobbyDetailsPlayer*        ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails) == 0x000060, "Wrong size on HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails, StatToTextMap) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails::StatToTextMap' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails, TeamId) == 0x000050, "Member 'HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails::TeamId' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails, ReturnValue) == 0x000058, "Member 'HWEndOfMatchLobbyDetailsWidget_AddPlayerMatchDetails::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.GetSupportedStats
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_GetSupportedStats final
{
public:
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_GetSupportedStats) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_GetSupportedStats");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_GetSupportedStats) == 0x000010, "Wrong size on HWEndOfMatchLobbyDetailsWidget_GetSupportedStats");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_GetSupportedStats, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_GetSupportedStats::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.GetTextFormatForStat
// 0x0020 (0x0020 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat) == 0x000020, "Wrong size on HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat, StatTag) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat::StatTag' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat, ReturnValue) == 0x000008, "Member 'HWEndOfMatchLobbyDetailsWidget_GetTextFormatForStat::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.HandlePlayerStatHovered
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered final
{
public:
	class UHWEndOfMatchLobbyDetailsPlayer*        PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatRow;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered) == 0x000010, "Wrong size on HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered, PlayerWidget) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered, StatRow) == 0x000008, "Member 'HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered::StatRow' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered, bIsHovered) == 0x00000C, "Member 'HWEndOfMatchLobbyDetailsWidget_HandlePlayerStatHovered::bIsHovered' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.HandleStatNamesSet
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet final
{
public:
	TArray<class FText>                           StatNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet) == 0x000010, "Wrong size on HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet, StatNames) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_HandleStatNamesSet::StatNames' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.SetEnemyTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId, TeamId) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_SetEnemyTeamId::TeamId' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyDetailsWidget.SetFriendlyTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId");
static_assert(sizeof(HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId) == 0x000001, "Wrong size on HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId");
static_assert(offsetof(HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId, TeamId) == 0x000000, "Member 'HWEndOfMatchLobbyDetailsWidget_SetFriendlyTeamId::TeamId' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.DisplayCanEquipmentItemBeUpgraded
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded final
{
public:
	bool                                          bCanBeUpgraded;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded");
static_assert(sizeof(HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded");
static_assert(offsetof(HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded, bCanBeUpgraded) == 0x000000, "Member 'HWInventoryEquipmentWidget_DisplayCanEquipmentItemBeUpgraded::bCanBeUpgraded' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.DisplayEquipment
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryEquipmentWidget_DisplayEquipment final
{
public:
	const class UHWEquipmentItem*                 EquipmentInfo;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_DisplayEquipment) == 0x000008, "Wrong alignment on HWInventoryEquipmentWidget_DisplayEquipment");
static_assert(sizeof(HWInventoryEquipmentWidget_DisplayEquipment) == 0x000008, "Wrong size on HWInventoryEquipmentWidget_DisplayEquipment");
static_assert(offsetof(HWInventoryEquipmentWidget_DisplayEquipment, EquipmentInfo) == 0x000000, "Member 'HWInventoryEquipmentWidget_DisplayEquipment::EquipmentInfo' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.DisplayIconOverride
// 0x0028 (0x0028 - 0x0000)
struct HWInventoryEquipmentWidget_DisplayIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_DisplayIconOverride) == 0x000008, "Wrong alignment on HWInventoryEquipmentWidget_DisplayIconOverride");
static_assert(sizeof(HWInventoryEquipmentWidget_DisplayIconOverride) == 0x000028, "Wrong size on HWInventoryEquipmentWidget_DisplayIconOverride");
static_assert(offsetof(HWInventoryEquipmentWidget_DisplayIconOverride, Texture) == 0x000000, "Member 'HWInventoryEquipmentWidget_DisplayIconOverride::Texture' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.DisplayIsEquipmentItemComplete
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete");
static_assert(sizeof(HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete");
static_assert(offsetof(HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete, bIsComplete) == 0x000000, "Member 'HWInventoryEquipmentWidget_DisplayIsEquipmentItemComplete::bIsComplete' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.HandleIconOverrideSet
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryEquipmentWidget_HandleIconOverrideSet final
{
public:
	struct FGameplayTag                           OverrideTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_HandleIconOverrideSet) == 0x000004, "Wrong alignment on HWInventoryEquipmentWidget_HandleIconOverrideSet");
static_assert(sizeof(HWInventoryEquipmentWidget_HandleIconOverrideSet) == 0x000008, "Wrong size on HWInventoryEquipmentWidget_HandleIconOverrideSet");
static_assert(offsetof(HWInventoryEquipmentWidget_HandleIconOverrideSet, OverrideTag) == 0x000000, "Member 'HWInventoryEquipmentWidget_HandleIconOverrideSet::OverrideTag' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWInventoryEquipmentWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.SetDisplayOrientation
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_SetDisplayOrientation final
{
public:
	EHWOrientation                                InOrientation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_SetDisplayOrientation) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_SetDisplayOrientation");
static_assert(sizeof(HWInventoryEquipmentWidget_SetDisplayOrientation) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_SetDisplayOrientation");
static_assert(offsetof(HWInventoryEquipmentWidget_SetDisplayOrientation, InOrientation) == 0x000000, "Member 'HWInventoryEquipmentWidget_SetDisplayOrientation::InOrientation' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.SetShouldGlowOnEmpty
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_SetShouldGlowOnEmpty final
{
public:
	bool                                          bNewShouldGlow;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_SetShouldGlowOnEmpty) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_SetShouldGlowOnEmpty");
static_assert(sizeof(HWInventoryEquipmentWidget_SetShouldGlowOnEmpty) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_SetShouldGlowOnEmpty");
static_assert(offsetof(HWInventoryEquipmentWidget_SetShouldGlowOnEmpty, bNewShouldGlow) == 0x000000, "Member 'HWInventoryEquipmentWidget_SetShouldGlowOnEmpty::bNewShouldGlow' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.SetShouldShowStates
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_SetShouldShowStates final
{
public:
	bool                                          bInShouldShowStates;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_SetShouldShowStates) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_SetShouldShowStates");
static_assert(sizeof(HWInventoryEquipmentWidget_SetShouldShowStates) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_SetShouldShowStates");
static_assert(offsetof(HWInventoryEquipmentWidget_SetShouldShowStates, bInShouldShowStates) == 0x000000, "Member 'HWInventoryEquipmentWidget_SetShouldShowStates::bInShouldShowStates' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWInventoryEquipmentWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowContextBar;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWInventoryEquipmentWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWInventoryEquipmentWidget_ShowTooltip");
static_assert(sizeof(HWInventoryEquipmentWidget_ShowTooltip) == 0x000010, "Wrong size on HWInventoryEquipmentWidget_ShowTooltip");
static_assert(offsetof(HWInventoryEquipmentWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWInventoryEquipmentWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWInventoryEquipmentWidget_ShowTooltip, bShowContextBar) == 0x000008, "Member 'HWInventoryEquipmentWidget_ShowTooltip::bShowContextBar' has a wrong offset!");
static_assert(offsetof(HWInventoryEquipmentWidget_ShowTooltip, Axis) == 0x000009, "Member 'HWInventoryEquipmentWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.GetEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryEquipmentWidget_GetEquipmentInstance final
{
public:
	class UHWEquipmentInstance*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_GetEquipmentInstance) == 0x000008, "Wrong alignment on HWInventoryEquipmentWidget_GetEquipmentInstance");
static_assert(sizeof(HWInventoryEquipmentWidget_GetEquipmentInstance) == 0x000008, "Wrong size on HWInventoryEquipmentWidget_GetEquipmentInstance");
static_assert(offsetof(HWInventoryEquipmentWidget_GetEquipmentInstance, ReturnValue) == 0x000000, "Member 'HWInventoryEquipmentWidget_GetEquipmentInstance::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.GetEquipmentSlot
// 0x000C (0x000C - 0x0000)
struct HWInventoryEquipmentWidget_GetEquipmentSlot final
{
public:
	struct FHWInventorySlot                       ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_GetEquipmentSlot) == 0x000004, "Wrong alignment on HWInventoryEquipmentWidget_GetEquipmentSlot");
static_assert(sizeof(HWInventoryEquipmentWidget_GetEquipmentSlot) == 0x00000C, "Wrong size on HWInventoryEquipmentWidget_GetEquipmentSlot");
static_assert(offsetof(HWInventoryEquipmentWidget_GetEquipmentSlot, ReturnValue) == 0x000000, "Member 'HWInventoryEquipmentWidget_GetEquipmentSlot::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.GetIsSwappingActive
// 0x0001 (0x0001 - 0x0000)
struct HWInventoryEquipmentWidget_GetIsSwappingActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_GetIsSwappingActive) == 0x000001, "Wrong alignment on HWInventoryEquipmentWidget_GetIsSwappingActive");
static_assert(sizeof(HWInventoryEquipmentWidget_GetIsSwappingActive) == 0x000001, "Wrong size on HWInventoryEquipmentWidget_GetIsSwappingActive");
static_assert(offsetof(HWInventoryEquipmentWidget_GetIsSwappingActive, ReturnValue) == 0x000000, "Member 'HWInventoryEquipmentWidget_GetIsSwappingActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInventoryEquipmentWidget.GetOwnerASC
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryEquipmentWidget_GetOwnerASC final
{
public:
	class UHWAbilitySystemComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryEquipmentWidget_GetOwnerASC) == 0x000008, "Wrong alignment on HWInventoryEquipmentWidget_GetOwnerASC");
static_assert(sizeof(HWInventoryEquipmentWidget_GetOwnerASC) == 0x000008, "Wrong size on HWInventoryEquipmentWidget_GetOwnerASC");
static_assert(offsetof(HWInventoryEquipmentWidget_GetOwnerASC, ReturnValue) == 0x000000, "Member 'HWInventoryEquipmentWidget_GetOwnerASC::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.AmmoEquipIconOverride
// 0x0028 (0x0028 - 0x0000)
struct HWActivatableEquipmentWidget_AmmoEquipIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              OverrideTexture;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_AmmoEquipIconOverride) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_AmmoEquipIconOverride");
static_assert(sizeof(HWActivatableEquipmentWidget_AmmoEquipIconOverride) == 0x000028, "Wrong size on HWActivatableEquipmentWidget_AmmoEquipIconOverride");
static_assert(offsetof(HWActivatableEquipmentWidget_AmmoEquipIconOverride, OverrideTexture) == 0x000000, "Member 'HWActivatableEquipmentWidget_AmmoEquipIconOverride::OverrideTexture' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityCost
// 0x0058 (0x0058 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityCost final
{
public:
	struct FGameplayAttribute                     CostAttribute;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cost;                                              // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   textFormat;                                        // 0x0040(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityCost) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityCost");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityCost) == 0x000058, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityCost");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityCost, CostAttribute) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityCost::CostAttribute' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityCost, Cost) == 0x000038, "Member 'HWActivatableEquipmentWidget_DisplayAbilityCost::Cost' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityCost, textFormat) == 0x000040, "Member 'HWActivatableEquipmentWidget_DisplayAbilityCost::textFormat' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityCostMet
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityCostMet final
{
public:
	bool                                          bCostIsMet;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityCostMet) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityCostMet");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityCostMet) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityCostMet");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityCostMet, bCostIsMet) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityCostMet::bCostIsMet' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityPhase_Aiming
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming, PreviousPhase) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityPhase_Aiming::PreviousPhase' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityPhase_Fired
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired, PreviousPhase) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityPhase_Fired::PreviousPhase' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityPhase_Inactive
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive, PreviousPhase) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityPhase_Inactive::PreviousPhase' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAbilityPhase_PreFire
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire, PreviousPhase) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAbilityPhase_PreFire::PreviousPhase' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayAmmo
// 0x000C (0x000C - 0x0000)
struct HWActivatableEquipmentWidget_DisplayAmmo final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasEnough;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCount;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayAmmo) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_DisplayAmmo");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayAmmo) == 0x00000C, "Wrong size on HWActivatableEquipmentWidget_DisplayAmmo");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAmmo, AmmoCount) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayAmmo::AmmoCount' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAmmo, bHasEnough) == 0x000004, "Member 'HWActivatableEquipmentWidget_DisplayAmmo::bHasEnough' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayAmmo, MaxCount) == 0x000008, "Member 'HWActivatableEquipmentWidget_DisplayAmmo::MaxCount' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayCanLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayCanLevelUp final
{
public:
	bool                                          bCanLevelUp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayCanLevelUp) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayCanLevelUp");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayCanLevelUp) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayCanLevelUp");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayCanLevelUp, bCanLevelUp) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayCanLevelUp::bCanLevelUp' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayEquipmentMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel final
{
public:
	int32                                         MaxLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel) == 0x000004, "Wrong size on HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel, MaxLevel) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayEquipmentMaxLevel::MaxLevel' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayInputTag
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayInputTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayInputTag) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_DisplayInputTag");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayInputTag) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_DisplayInputTag");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayInputTag, Tag) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayInputTag::Tag' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayRefireState
// 0x0010 (0x0010 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayRefireState final
{
public:
	bool                                          bIsRefireIsActive;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWEquipmentComponentSettings_Refireable* RefireSettings;                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayRefireState) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_DisplayRefireState");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayRefireState) == 0x000010, "Wrong size on HWActivatableEquipmentWidget_DisplayRefireState");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayRefireState, bIsRefireIsActive) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayRefireState::bIsRefireIsActive' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayRefireState, RefireSettings) == 0x000008, "Member 'HWActivatableEquipmentWidget_DisplayRefireState::RefireSettings' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayShowPrimaryRecommendation
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation, bShouldShow) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayShowPrimaryRecommendation::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.DisplayStackCount
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_DisplayStackCount final
{
public:
	int32                                         StackCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStackCount;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_DisplayStackCount) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_DisplayStackCount");
static_assert(sizeof(HWActivatableEquipmentWidget_DisplayStackCount) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_DisplayStackCount");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayStackCount, StackCount) == 0x000000, "Member 'HWActivatableEquipmentWidget_DisplayStackCount::StackCount' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_DisplayStackCount, MaxStackCount) == 0x000004, "Member 'HWActivatableEquipmentWidget_DisplayStackCount::MaxStackCount' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleAbilityAmmoChanged
// 0x0010 (0x0010 - 0x0000)
struct HWActivatableEquipmentWidget_HandleAbilityAmmoChanged final
{
public:
	const class UHWEquipmentInstance*             SourceEquipmentInstance;                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAmmo;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAmmo;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleAbilityAmmoChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleAbilityAmmoChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleAbilityAmmoChanged) == 0x000010, "Wrong size on HWActivatableEquipmentWidget_HandleAbilityAmmoChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityAmmoChanged, SourceEquipmentInstance) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleAbilityAmmoChanged::SourceEquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityAmmoChanged, OldAmmo) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleAbilityAmmoChanged::OldAmmo' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityAmmoChanged, NewAmmo) == 0x00000C, "Member 'HWActivatableEquipmentWidget_HandleAbilityAmmoChanged::NewAmmo' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleAbilityPhaseChanged
// 0x0038 (0x0038 - 0x0000)
struct HWActivatableEquipmentWidget_HandleAbilityPhaseChanged final
{
public:
	class UHWAbilitySystemComponent*              AbilitySystem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0010(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EAbilityFlowPhase                             PrevPhase;                                         // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityFlowPhase                             NextPhase;                                         // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleAbilityPhaseChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged) == 0x000038, "Wrong size on HWActivatableEquipmentWidget_HandleAbilityPhaseChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged, AbilitySystem) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleAbilityPhaseChanged::AbilitySystem' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged, AbilityHandle) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleAbilityPhaseChanged::AbilityHandle' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged, AbilityTags) == 0x000010, "Member 'HWActivatableEquipmentWidget_HandleAbilityPhaseChanged::AbilityTags' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged, PrevPhase) == 0x000030, "Member 'HWActivatableEquipmentWidget_HandleAbilityPhaseChanged::PrevPhase' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAbilityPhaseChanged, NextPhase) == 0x000031, "Member 'HWActivatableEquipmentWidget_HandleAbilityPhaseChanged::NextPhase' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleAmmoChanged
// 0x0018 (0x0018 - 0x0000)
struct HWActivatableEquipmentWidget_HandleAmmoChanged final
{
public:
	class UHWEquipmentComponent_Ammo*             AmmoComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentComponentSettings_Ammo* AmmoSettings;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousAmmoCount;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAmmoCount;                                      // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleAmmoChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleAmmoChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleAmmoChanged) == 0x000018, "Wrong size on HWActivatableEquipmentWidget_HandleAmmoChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAmmoChanged, AmmoComponent) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleAmmoChanged::AmmoComponent' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAmmoChanged, AmmoSettings) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleAmmoChanged::AmmoSettings' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAmmoChanged, PreviousAmmoCount) == 0x000010, "Member 'HWActivatableEquipmentWidget_HandleAmmoChanged::PreviousAmmoCount' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleAmmoChanged, NewAmmoCount) == 0x000014, "Member 'HWActivatableEquipmentWidget_HandleAmmoChanged::NewAmmoCount' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleEquipmentComponentsInitialized
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized final
{
public:
	class UHWEquipmentInstance*                   InEquipmentInstance;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized, InEquipmentInstance) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleEquipmentComponentsInitialized::InEquipmentInstance' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleEquipmentLevelChanged
// 0x0010 (0x0010 - 0x0000)
struct HWActivatableEquipmentWidget_HandleEquipmentLevelChanged final
{
public:
	class UHWEquipmentInstance*                   InEquipmentInstance;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousLevel;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleEquipmentLevelChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleEquipmentLevelChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleEquipmentLevelChanged) == 0x000010, "Wrong size on HWActivatableEquipmentWidget_HandleEquipmentLevelChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleEquipmentLevelChanged, InEquipmentInstance) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleEquipmentLevelChanged::InEquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleEquipmentLevelChanged, PreviousLevel) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleEquipmentLevelChanged::PreviousLevel' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleRefireStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HWActivatableEquipmentWidget_HandleRefireStateChanged final
{
public:
	class UHWEquipmentComponent_Refireable*       RefireComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRefireWindowActive;                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RefireWindowTime;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleRefireStateChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleRefireStateChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleRefireStateChanged) == 0x000010, "Wrong size on HWActivatableEquipmentWidget_HandleRefireStateChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleRefireStateChanged, RefireComponent) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleRefireStateChanged::RefireComponent' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleRefireStateChanged, bIsRefireWindowActive) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleRefireStateChanged::bIsRefireWindowActive' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleRefireStateChanged, RefireWindowTime) == 0x00000C, "Member 'HWActivatableEquipmentWidget_HandleRefireStateChanged::RefireWindowTime' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HandleStackChanged
// 0x0010 (0x0010 - 0x0000)
struct HWActivatableEquipmentWidget_HandleStackChanged final
{
public:
	class UHWEquipmentInstance*                   OwningEquipment;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentComponent_Stacks*           StackComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HandleStackChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_HandleStackChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_HandleStackChanged) == 0x000010, "Wrong size on HWActivatableEquipmentWidget_HandleStackChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleStackChanged, OwningEquipment) == 0x000000, "Member 'HWActivatableEquipmentWidget_HandleStackChanged::OwningEquipment' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HandleStackChanged, StackComponent) == 0x000008, "Member 'HWActivatableEquipmentWidget_HandleStackChanged::StackComponent' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.OnEquipmentInputTagUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated final
{
public:
	class UHWEquipmentInstance*                   Equipment;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InputTag;                                          // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InDisplayInputTag;                                 // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated");
static_assert(sizeof(HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated) == 0x000018, "Wrong size on HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated");
static_assert(offsetof(HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated, Equipment) == 0x000000, "Member 'HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated::Equipment' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated, InputTag) == 0x000008, "Member 'HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated::InputTag' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated, InDisplayInputTag) == 0x000010, "Member 'HWActivatableEquipmentWidget_OnEquipmentInputTagUpdated::InDisplayInputTag' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.OnParentEquipmentInstanceChanged
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged final
{
public:
	class UHWEquipmentComponent_ChildEquipment*   ChildEquipmentComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged");
static_assert(sizeof(HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged");
static_assert(offsetof(HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged, ChildEquipmentComponent) == 0x000000, "Member 'HWActivatableEquipmentWidget_OnParentEquipmentInstanceChanged::ChildEquipmentComponent' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.OnPrimaryBuildUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWActivatableEquipmentWidget_OnPrimaryBuildUpdated final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BuildGuid;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_OnPrimaryBuildUpdated) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_OnPrimaryBuildUpdated");
static_assert(sizeof(HWActivatableEquipmentWidget_OnPrimaryBuildUpdated) == 0x000018, "Wrong size on HWActivatableEquipmentWidget_OnPrimaryBuildUpdated");
static_assert(offsetof(HWActivatableEquipmentWidget_OnPrimaryBuildUpdated, InGodItem) == 0x000000, "Member 'HWActivatableEquipmentWidget_OnPrimaryBuildUpdated::InGodItem' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_OnPrimaryBuildUpdated, BuildGuid) == 0x000008, "Member 'HWActivatableEquipmentWidget_OnPrimaryBuildUpdated::BuildGuid' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.CanActivateEquipmentAtLevel
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel");
static_assert(sizeof(HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel");
static_assert(offsetof(HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel, Level) == 0x000000, "Member 'HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel::Level' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel, ReturnValue) == 0x000004, "Member 'HWActivatableEquipmentWidget_CanActivateEquipmentAtLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.CanEquipmentLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_CanEquipmentLevelUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_CanEquipmentLevelUp) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_CanEquipmentLevelUp");
static_assert(sizeof(HWActivatableEquipmentWidget_CanEquipmentLevelUp) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_CanEquipmentLevelUp");
static_assert(offsetof(HWActivatableEquipmentWidget_CanEquipmentLevelUp, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_CanEquipmentLevelUp::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.CheckAbilityCost
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_CheckAbilityCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_CheckAbilityCost) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_CheckAbilityCost");
static_assert(sizeof(HWActivatableEquipmentWidget_CheckAbilityCost) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_CheckAbilityCost");
static_assert(offsetof(HWActivatableEquipmentWidget_CheckAbilityCost, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_CheckAbilityCost::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.GetEquipmentLevel
// 0x0004 (0x0004 - 0x0000)
struct HWActivatableEquipmentWidget_GetEquipmentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_GetEquipmentLevel) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_GetEquipmentLevel");
static_assert(sizeof(HWActivatableEquipmentWidget_GetEquipmentLevel) == 0x000004, "Wrong size on HWActivatableEquipmentWidget_GetEquipmentLevel");
static_assert(offsetof(HWActivatableEquipmentWidget_GetEquipmentLevel, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_GetEquipmentLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.GetGameplayAbility
// 0x0008 (0x0008 - 0x0000)
struct HWActivatableEquipmentWidget_GetGameplayAbility final
{
public:
	class UHWGameplayAbility*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_GetGameplayAbility) == 0x000008, "Wrong alignment on HWActivatableEquipmentWidget_GetGameplayAbility");
static_assert(sizeof(HWActivatableEquipmentWidget_GetGameplayAbility) == 0x000008, "Wrong size on HWActivatableEquipmentWidget_GetGameplayAbility");
static_assert(offsetof(HWActivatableEquipmentWidget_GetGameplayAbility, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_GetGameplayAbility::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.GetRefireDuration
// 0x0004 (0x0004 - 0x0000)
struct HWActivatableEquipmentWidget_GetRefireDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_GetRefireDuration) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_GetRefireDuration");
static_assert(sizeof(HWActivatableEquipmentWidget_GetRefireDuration) == 0x000004, "Wrong size on HWActivatableEquipmentWidget_GetRefireDuration");
static_assert(offsetof(HWActivatableEquipmentWidget_GetRefireDuration, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_GetRefireDuration::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.GetRefireTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct HWActivatableEquipmentWidget_GetRefireTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_GetRefireTimeRemaining) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_GetRefireTimeRemaining");
static_assert(sizeof(HWActivatableEquipmentWidget_GetRefireTimeRemaining) == 0x000004, "Wrong size on HWActivatableEquipmentWidget_GetRefireTimeRemaining");
static_assert(offsetof(HWActivatableEquipmentWidget_GetRefireTimeRemaining, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_GetRefireTimeRemaining::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HasAbilityTypeTag
// 0x000C (0x000C - 0x0000)
struct HWActivatableEquipmentWidget_HasAbilityTypeTag final
{
public:
	struct FGameplayTag                           AbilityTypeTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWActivatableEquipmentWidget_HasAbilityTypeTag) == 0x000004, "Wrong alignment on HWActivatableEquipmentWidget_HasAbilityTypeTag");
static_assert(sizeof(HWActivatableEquipmentWidget_HasAbilityTypeTag) == 0x00000C, "Wrong size on HWActivatableEquipmentWidget_HasAbilityTypeTag");
static_assert(offsetof(HWActivatableEquipmentWidget_HasAbilityTypeTag, AbilityTypeTag) == 0x000000, "Member 'HWActivatableEquipmentWidget_HasAbilityTypeTag::AbilityTypeTag' has a wrong offset!");
static_assert(offsetof(HWActivatableEquipmentWidget_HasAbilityTypeTag, ReturnValue) == 0x000008, "Member 'HWActivatableEquipmentWidget_HasAbilityTypeTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWActivatableEquipmentWidget.HasTalent
// 0x0001 (0x0001 - 0x0000)
struct HWActivatableEquipmentWidget_HasTalent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWActivatableEquipmentWidget_HasTalent) == 0x000001, "Wrong alignment on HWActivatableEquipmentWidget_HasTalent");
static_assert(sizeof(HWActivatableEquipmentWidget_HasTalent) == 0x000001, "Wrong size on HWActivatableEquipmentWidget_HasTalent");
static_assert(offsetof(HWActivatableEquipmentWidget_HasTalent, ReturnValue) == 0x000000, "Member 'HWActivatableEquipmentWidget_HasTalent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameMenuWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGameMenuWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameMenuWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWGameMenuWidget_HandleInputStateChanged");
static_assert(sizeof(HWGameMenuWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWGameMenuWidget_HandleInputStateChanged");
static_assert(offsetof(HWGameMenuWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWGameMenuWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWGameMenuWidget.HandlePlayerInputRebuilt
// 0x0001 (0x0001 - 0x0000)
struct HWGameMenuWidget_HandlePlayerInputRebuilt final
{
public:
	EHWInputHardwareType                          CurrentHardwareType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameMenuWidget_HandlePlayerInputRebuilt) == 0x000001, "Wrong alignment on HWGameMenuWidget_HandlePlayerInputRebuilt");
static_assert(sizeof(HWGameMenuWidget_HandlePlayerInputRebuilt) == 0x000001, "Wrong size on HWGameMenuWidget_HandlePlayerInputRebuilt");
static_assert(offsetof(HWGameMenuWidget_HandlePlayerInputRebuilt, CurrentHardwareType) == 0x000000, "Member 'HWGameMenuWidget_HandlePlayerInputRebuilt::CurrentHardwareType' has a wrong offset!");

// Function HemingwayUI.HWGameMenuWidget.SetAbilityInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGameMenuWidget_SetAbilityInfoVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameMenuWidget_SetAbilityInfoVisibility) == 0x000001, "Wrong alignment on HWGameMenuWidget_SetAbilityInfoVisibility");
static_assert(sizeof(HWGameMenuWidget_SetAbilityInfoVisibility) == 0x000001, "Wrong size on HWGameMenuWidget_SetAbilityInfoVisibility");
static_assert(offsetof(HWGameMenuWidget_SetAbilityInfoVisibility, bIsVisible) == 0x000000, "Member 'HWGameMenuWidget_SetAbilityInfoVisibility::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWTeamBarWidget.EntryWidgetCreated
// 0x0010 (0x0010 - 0x0000)
struct HWTeamBarWidget_EntryWidgetCreated final
{
public:
	class UHWTeamBarEntryWidget*                  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUniformGridSlot*                       GridSlot;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTeamBarWidget_EntryWidgetCreated) == 0x000008, "Wrong alignment on HWTeamBarWidget_EntryWidgetCreated");
static_assert(sizeof(HWTeamBarWidget_EntryWidgetCreated) == 0x000010, "Wrong size on HWTeamBarWidget_EntryWidgetCreated");
static_assert(offsetof(HWTeamBarWidget_EntryWidgetCreated, EntryWidget) == 0x000000, "Member 'HWTeamBarWidget_EntryWidgetCreated::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWTeamBarWidget_EntryWidgetCreated, GridSlot) == 0x000008, "Member 'HWTeamBarWidget_EntryWidgetCreated::GridSlot' has a wrong offset!");

// Function HemingwayUI.HWTeamBarWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWTeamBarWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTeamBarWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWTeamBarWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWTeamBarWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWTeamBarWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWTeamBarWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWTeamBarWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWTeamBarWidget.SetTeamLayoutOrientation
// 0x0001 (0x0001 - 0x0000)
struct HWTeamBarWidget_SetTeamLayoutOrientation final
{
public:
	EHWTeamLayoutOrientation                      NewOrientation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTeamBarWidget_SetTeamLayoutOrientation) == 0x000001, "Wrong alignment on HWTeamBarWidget_SetTeamLayoutOrientation");
static_assert(sizeof(HWTeamBarWidget_SetTeamLayoutOrientation) == 0x000001, "Wrong size on HWTeamBarWidget_SetTeamLayoutOrientation");
static_assert(offsetof(HWTeamBarWidget_SetTeamLayoutOrientation, NewOrientation) == 0x000000, "Member 'HWTeamBarWidget_SetTeamLayoutOrientation::NewOrientation' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectHandleReplaced
// 0x0410 (0x0410 - 0x0000)
struct HWGameplayEffectWidget_EffectHandleReplaced final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            OldHandle;                                         // 0x0400(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            NewHandle;                                         // 0x0408(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_EffectHandleReplaced) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectHandleReplaced");
static_assert(sizeof(HWGameplayEffectWidget_EffectHandleReplaced) == 0x000410, "Wrong size on HWGameplayEffectWidget_EffectHandleReplaced");
static_assert(offsetof(HWGameplayEffectWidget_EffectHandleReplaced, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectHandleReplaced::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectHandleReplaced, OldHandle) == 0x000400, "Member 'HWGameplayEffectWidget_EffectHandleReplaced::OldHandle' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectHandleReplaced, NewHandle) == 0x000408, "Member 'HWGameplayEffectWidget_EffectHandleReplaced::NewHandle' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectInhibitionChanged
// 0x0408 (0x0408 - 0x0000)
struct HWGameplayEffectWidget_EffectInhibitionChanged final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsInhibited;                                      // 0x0400(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayEffectWidget_EffectInhibitionChanged) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectInhibitionChanged");
static_assert(sizeof(HWGameplayEffectWidget_EffectInhibitionChanged) == 0x000408, "Wrong size on HWGameplayEffectWidget_EffectInhibitionChanged");
static_assert(offsetof(HWGameplayEffectWidget_EffectInhibitionChanged, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectInhibitionChanged::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectInhibitionChanged, bIsInhibited) == 0x000400, "Member 'HWGameplayEffectWidget_EffectInhibitionChanged::bIsInhibited' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectStackChanged
// 0x0408 (0x0408 - 0x0000)
struct HWGameplayEffectWidget_EffectStackChanged final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PreviousStackCount;                                // 0x0400(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStackCount;                                     // 0x0404(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_EffectStackChanged) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectStackChanged");
static_assert(sizeof(HWGameplayEffectWidget_EffectStackChanged) == 0x000408, "Wrong size on HWGameplayEffectWidget_EffectStackChanged");
static_assert(offsetof(HWGameplayEffectWidget_EffectStackChanged, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectStackChanged::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectStackChanged, PreviousStackCount) == 0x000400, "Member 'HWGameplayEffectWidget_EffectStackChanged::PreviousStackCount' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectStackChanged, NewStackCount) == 0x000404, "Member 'HWGameplayEffectWidget_EffectStackChanged::NewStackCount' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectTimeChanged
// 0x0408 (0x0408 - 0x0000)
struct HWGameplayEffectWidget_EffectTimeChanged final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         NewStartTime;                                      // 0x0400(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDuration;                                       // 0x0404(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_EffectTimeChanged) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectTimeChanged");
static_assert(sizeof(HWGameplayEffectWidget_EffectTimeChanged) == 0x000408, "Wrong size on HWGameplayEffectWidget_EffectTimeChanged");
static_assert(offsetof(HWGameplayEffectWidget_EffectTimeChanged, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectTimeChanged::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectTimeChanged, NewStartTime) == 0x000400, "Member 'HWGameplayEffectWidget_EffectTimeChanged::NewStartTime' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectTimeChanged, NewDuration) == 0x000404, "Member 'HWGameplayEffectWidget_EffectTimeChanged::NewDuration' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectTrackEnded
// 0x0700 (0x0700 - 0x0000)
struct HWGameplayEffectWidget_EffectTrackEnded final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_EffectTrackEnded) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectTrackEnded");
static_assert(sizeof(HWGameplayEffectWidget_EffectTrackEnded) == 0x000700, "Wrong size on HWGameplayEffectWidget_EffectTrackEnded");
static_assert(offsetof(HWGameplayEffectWidget_EffectTrackEnded, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectTrackEnded::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectTrackEnded, EffectData) == 0x000400, "Member 'HWGameplayEffectWidget_EffectTrackEnded::EffectData' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.EffectTrackStarted
// 0x0700 (0x0700 - 0x0000)
struct HWGameplayEffectWidget_EffectTrackStarted final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_EffectTrackStarted) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_EffectTrackStarted");
static_assert(sizeof(HWGameplayEffectWidget_EffectTrackStarted) == 0x000700, "Wrong size on HWGameplayEffectWidget_EffectTrackStarted");
static_assert(offsetof(HWGameplayEffectWidget_EffectTrackStarted, ActiveEffect) == 0x000000, "Member 'HWGameplayEffectWidget_EffectTrackStarted::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_EffectTrackStarted, EffectData) == 0x000400, "Member 'HWGameplayEffectWidget_EffectTrackStarted::EffectData' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleActiveGameplayEffectAdded
// 0x02B8 (0x02B8 - 0x0000)
struct HWGameplayEffectWidget_HandleActiveGameplayEffectAdded final
{
public:
	class UAbilitySystemComponent*                ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectSpec                    EffectSpec;                                        // 0x0008(0x02A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x02B0(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_HandleActiveGameplayEffectAdded) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_HandleActiveGameplayEffectAdded");
static_assert(sizeof(HWGameplayEffectWidget_HandleActiveGameplayEffectAdded) == 0x0002B8, "Wrong size on HWGameplayEffectWidget_HandleActiveGameplayEffectAdded");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectAdded, ASC) == 0x000000, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectAdded::ASC' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectAdded, EffectSpec) == 0x000008, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectAdded::EffectSpec' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectAdded, EffectHandle) == 0x0002B0, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectAdded::EffectHandle' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleActiveGameplayEffectInhibitionChange
// 0x000C (0x000C - 0x0000)
struct HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange final
{
public:
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInhibited;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange) == 0x000004, "Wrong alignment on HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange");
static_assert(sizeof(HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange) == 0x00000C, "Wrong size on HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange, EffectHandle) == 0x000000, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange::EffectHandle' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange, bIsInhibited) == 0x000008, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectInhibitionChange::bIsInhibited' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleActiveGameplayEffectRemoved_Info
// 0x0028 (0x0028 - 0x0000)
struct HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info final
{
public:
	struct FGameplayEffectRemovalInfo             RemovalInfo;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info");
static_assert(sizeof(HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info) == 0x000028, "Wrong size on HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info, RemovalInfo) == 0x000000, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectRemoved_Info::RemovalInfo' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleActiveGameplayEffectStackChange
// 0x0010 (0x0010 - 0x0000)
struct HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange final
{
public:
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStackCount;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousStackCount;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange) == 0x000004, "Wrong alignment on HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange");
static_assert(sizeof(HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange) == 0x000010, "Wrong size on HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange, EffectHandle) == 0x000000, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange::EffectHandle' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange, NewStackCount) == 0x000008, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange::NewStackCount' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange, PreviousStackCount) == 0x00000C, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectStackChange::PreviousStackCount' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleActiveGameplayEffectTimeChange
// 0x0010 (0x0010 - 0x0000)
struct HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange final
{
public:
	struct FActiveGameplayEffectHandle            EffectHandle;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewStartTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDuration;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange) == 0x000004, "Wrong alignment on HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange");
static_assert(sizeof(HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange) == 0x000010, "Wrong size on HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange, EffectHandle) == 0x000000, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange::EffectHandle' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange, NewStartTime) == 0x000008, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange::NewStartTime' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange, NewDuration) == 0x00000C, "Member 'HWGameplayEffectWidget_HandleActiveGameplayEffectTimeChange::NewDuration' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.HandleAnyGameplayEffectRemoved
// 0x0400 (0x0400 - 0x0000)
struct HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved final
{
public:
	struct FActiveGameplayEffect                  ActiveGameplayEffect;                              // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved");
static_assert(sizeof(HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved) == 0x000400, "Wrong size on HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved");
static_assert(offsetof(HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved, ActiveGameplayEffect) == 0x000000, "Member 'HWGameplayEffectWidget_HandleAnyGameplayEffectRemoved::ActiveGameplayEffect' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.SetAndTrackNewEffects
// 0x0040 (0x0040 - 0x0000)
struct HWGameplayEffectWidget_SetAndTrackNewEffects final
{
public:
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NewGameplayTags;                                   // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffectUIData>> NewClasses;                                     // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayEffectWidget_SetAndTrackNewEffects) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_SetAndTrackNewEffects");
static_assert(sizeof(HWGameplayEffectWidget_SetAndTrackNewEffects) == 0x000040, "Wrong size on HWGameplayEffectWidget_SetAndTrackNewEffects");
static_assert(offsetof(HWGameplayEffectWidget_SetAndTrackNewEffects, ASC) == 0x000000, "Member 'HWGameplayEffectWidget_SetAndTrackNewEffects::ASC' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_SetAndTrackNewEffects, NewGameplayTags) == 0x000008, "Member 'HWGameplayEffectWidget_SetAndTrackNewEffects::NewGameplayTags' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_SetAndTrackNewEffects, NewClasses) == 0x000028, "Member 'HWGameplayEffectWidget_SetAndTrackNewEffects::NewClasses' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_SetAndTrackNewEffects, bAppend) == 0x000038, "Member 'HWGameplayEffectWidget_SetAndTrackNewEffects::bAppend' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.SetNewTrackedEffectClasses
// 0x0018 (0x0018 - 0x0000)
struct HWGameplayEffectWidget_SetNewTrackedEffectClasses final
{
public:
	TArray<TSubclassOf<class UGameplayEffectUIData>> NewClasses;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayEffectWidget_SetNewTrackedEffectClasses) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_SetNewTrackedEffectClasses");
static_assert(sizeof(HWGameplayEffectWidget_SetNewTrackedEffectClasses) == 0x000018, "Wrong size on HWGameplayEffectWidget_SetNewTrackedEffectClasses");
static_assert(offsetof(HWGameplayEffectWidget_SetNewTrackedEffectClasses, NewClasses) == 0x000000, "Member 'HWGameplayEffectWidget_SetNewTrackedEffectClasses::NewClasses' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_SetNewTrackedEffectClasses, bAppend) == 0x000010, "Member 'HWGameplayEffectWidget_SetNewTrackedEffectClasses::bAppend' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.SetNewTrackedEffectTags
// 0x0028 (0x0028 - 0x0000)
struct HWGameplayEffectWidget_SetNewTrackedEffectTags final
{
public:
	struct FGameplayTagContainer                  NewGameplayTags;                                   // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayEffectWidget_SetNewTrackedEffectTags) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_SetNewTrackedEffectTags");
static_assert(sizeof(HWGameplayEffectWidget_SetNewTrackedEffectTags) == 0x000028, "Wrong size on HWGameplayEffectWidget_SetNewTrackedEffectTags");
static_assert(offsetof(HWGameplayEffectWidget_SetNewTrackedEffectTags, NewGameplayTags) == 0x000000, "Member 'HWGameplayEffectWidget_SetNewTrackedEffectTags::NewGameplayTags' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectWidget_SetNewTrackedEffectTags, bAppend) == 0x000020, "Member 'HWGameplayEffectWidget_SetNewTrackedEffectTags::bAppend' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.TrackEffects
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectWidget_TrackEffects final
{
public:
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_TrackEffects) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_TrackEffects");
static_assert(sizeof(HWGameplayEffectWidget_TrackEffects) == 0x000008, "Wrong size on HWGameplayEffectWidget_TrackEffects");
static_assert(offsetof(HWGameplayEffectWidget_TrackEffects, ASC) == 0x000000, "Member 'HWGameplayEffectWidget_TrackEffects::ASC' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.GetActiveEffectsCount
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectWidget_GetActiveEffectsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_GetActiveEffectsCount) == 0x000004, "Wrong alignment on HWGameplayEffectWidget_GetActiveEffectsCount");
static_assert(sizeof(HWGameplayEffectWidget_GetActiveEffectsCount) == 0x000004, "Wrong size on HWGameplayEffectWidget_GetActiveEffectsCount");
static_assert(offsetof(HWGameplayEffectWidget_GetActiveEffectsCount, ReturnValue) == 0x000000, "Member 'HWGameplayEffectWidget_GetActiveEffectsCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectWidget.GetTrackedEffectMatchedTags
// 0x0020 (0x0020 - 0x0000)
struct HWGameplayEffectWidget_GetTrackedEffectMatchedTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectWidget_GetTrackedEffectMatchedTags) == 0x000008, "Wrong alignment on HWGameplayEffectWidget_GetTrackedEffectMatchedTags");
static_assert(sizeof(HWGameplayEffectWidget_GetTrackedEffectMatchedTags) == 0x000020, "Wrong size on HWGameplayEffectWidget_GetTrackedEffectMatchedTags");
static_assert(offsetof(HWGameplayEffectWidget_GetTrackedEffectMatchedTags, ReturnValue) == 0x000000, "Member 'HWGameplayEffectWidget_GetTrackedEffectMatchedTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHardCCFeedbackWidget.ToggleFeedback
// 0x0001 (0x0001 - 0x0000)
struct HWHardCCFeedbackWidget_ToggleFeedback final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHardCCFeedbackWidget_ToggleFeedback) == 0x000001, "Wrong alignment on HWHardCCFeedbackWidget_ToggleFeedback");
static_assert(sizeof(HWHardCCFeedbackWidget_ToggleFeedback) == 0x000001, "Wrong size on HWHardCCFeedbackWidget_ToggleFeedback");
static_assert(offsetof(HWHardCCFeedbackWidget_ToggleFeedback, bOn) == 0x000000, "Member 'HWHardCCFeedbackWidget_ToggleFeedback::bOn' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.AddCategoryItems
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_AddCategoryItems final
{
public:
	class UHWItemStoreItemFixedCategoryWidget*    Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_AddCategoryItems) == 0x000008, "Wrong alignment on HWItemStoreCategorizedItemListWidget_AddCategoryItems");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_AddCategoryItems) == 0x000008, "Wrong size on HWItemStoreCategorizedItemListWidget_AddCategoryItems");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_AddCategoryItems, Widget) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_AddCategoryItems::Widget' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.GetSearchItemInfos
// 0x0028 (0x0028 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_GetSearchItemInfos final
{
public:
	class FText                                   SearchText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UItemInfoContainer*>             ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_GetSearchItemInfos) == 0x000008, "Wrong alignment on HWItemStoreCategorizedItemListWidget_GetSearchItemInfos");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_GetSearchItemInfos) == 0x000028, "Wrong size on HWItemStoreCategorizedItemListWidget_GetSearchItemInfos");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_GetSearchItemInfos, SearchText) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_GetSearchItemInfos::SearchText' has a wrong offset!");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_GetSearchItemInfos, ReturnValue) == 0x000018, "Member 'HWItemStoreCategorizedItemListWidget_GetSearchItemInfos::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.OnSelectItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_OnSelectItem final
{
public:
	const class UHWEquipmentItem*                 SelectedEquipmentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_OnSelectItem) == 0x000008, "Wrong alignment on HWItemStoreCategorizedItemListWidget_OnSelectItem");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_OnSelectItem) == 0x000008, "Wrong size on HWItemStoreCategorizedItemListWidget_OnSelectItem");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_OnSelectItem, SelectedEquipmentItem) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_OnSelectItem::SelectedEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.Populate
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_Populate final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_Populate) == 0x000008, "Wrong alignment on HWItemStoreCategorizedItemListWidget_Populate");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_Populate) == 0x000008, "Wrong size on HWItemStoreCategorizedItemListWidget_Populate");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_Populate, CharacterItem) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_Populate::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.UpdateFilterLabels
// 0x0048 (0x0048 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_UpdateFilterLabels final
{
public:
	class FText                                   LeftLabel;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   CenterLabel;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   RightLabel;                                        // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_UpdateFilterLabels) == 0x000008, "Wrong alignment on HWItemStoreCategorizedItemListWidget_UpdateFilterLabels");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_UpdateFilterLabels) == 0x000048, "Wrong size on HWItemStoreCategorizedItemListWidget_UpdateFilterLabels");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_UpdateFilterLabels, LeftLabel) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_UpdateFilterLabels::LeftLabel' has a wrong offset!");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_UpdateFilterLabels, CenterLabel) == 0x000018, "Member 'HWItemStoreCategorizedItemListWidget_UpdateFilterLabels::CenterLabel' has a wrong offset!");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_UpdateFilterLabels, RightLabel) == 0x000030, "Member 'HWItemStoreCategorizedItemListWidget_UpdateFilterLabels::RightLabel' has a wrong offset!");

// Function HemingwayUI.HWItemStoreCategorizedItemListWidget.UpdateGold
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreCategorizedItemListWidget_UpdateGold final
{
public:
	float                                         GoldValue;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreCategorizedItemListWidget_UpdateGold) == 0x000004, "Wrong alignment on HWItemStoreCategorizedItemListWidget_UpdateGold");
static_assert(sizeof(HWItemStoreCategorizedItemListWidget_UpdateGold) == 0x000004, "Wrong size on HWItemStoreCategorizedItemListWidget_UpdateGold");
static_assert(offsetof(HWItemStoreCategorizedItemListWidget_UpdateGold, GoldValue) == 0x000000, "Member 'HWItemStoreCategorizedItemListWidget_UpdateGold::GoldValue' has a wrong offset!");

// Function HemingwayUI.HWSurrenderPipWidget.DisplayVoteState
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderPipWidget_DisplayVoteState final
{
public:
	EHWVoteState                                  VoteState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderPipWidget_DisplayVoteState) == 0x000001, "Wrong alignment on HWSurrenderPipWidget_DisplayVoteState");
static_assert(sizeof(HWSurrenderPipWidget_DisplayVoteState) == 0x000001, "Wrong size on HWSurrenderPipWidget_DisplayVoteState");
static_assert(offsetof(HWSurrenderPipWidget_DisplayVoteState, VoteState) == 0x000000, "Member 'HWSurrenderPipWidget_DisplayVoteState::VoteState' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListEntryWidget.HandleSetIsFavoriteBuildResult
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InGodBuildId;                                      // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNowFavorite;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult) == 0x000004, "Wrong alignment on HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult");
static_assert(sizeof(HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult) == 0x000018, "Wrong size on HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult, bSuccess) == 0x000000, "Member 'HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult, InGodBuildId) == 0x000004, "Member 'HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult::InGodBuildId' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult, bIsNowFavorite) == 0x000014, "Member 'HWGodBuilderBuildsListEntryWidget_HandleSetIsFavoriteBuildResult::bIsNowFavorite' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListEntryWidget.OnLocalPlayerPinnedBuildUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BuildGuid;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated");
static_assert(sizeof(HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated) == 0x000018, "Wrong size on HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated, GodItem) == 0x000000, "Member 'HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated, BuildGuid) == 0x000008, "Member 'HWGodBuilderBuildsListEntryWidget_OnLocalPlayerPinnedBuildUpdated::BuildGuid' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListEntryWidget.SetDisplayedGodBuild
// 0x0190 (0x0190 - 0x0000)
struct HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild final
{
public:
	struct FHWGodBuild                            InGodBuild;                                        // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild");
static_assert(sizeof(HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild) == 0x000190, "Wrong size on HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild, InGodBuild) == 0x000000, "Member 'HWGodBuilderBuildsListEntryWidget_SetDisplayedGodBuild::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListEntryWidget.GetGodItemForDisplayedBuild
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild");
static_assert(sizeof(HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild) == 0x000008, "Wrong size on HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild");
static_assert(offsetof(HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild, ReturnValue) == 0x000000, "Member 'HWGodBuilderBuildsListEntryWidget_GetGodItemForDisplayedBuild::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipableEquipmentWidget.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWTooltipableEquipmentWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipableEquipmentWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWTooltipableEquipmentWidget_ShowTooltip");
static_assert(sizeof(HWTooltipableEquipmentWidget_ShowTooltip) == 0x000010, "Wrong size on HWTooltipableEquipmentWidget_ShowTooltip");
static_assert(offsetof(HWTooltipableEquipmentWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWTooltipableEquipmentWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWTooltipableEquipmentWidget_ShowTooltip, Axis) == 0x000008, "Member 'HWTooltipableEquipmentWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWInhandEquipmentWidget.UpdateImage
// 0x0030 (0x0030 - 0x0000)
struct HWInhandEquipmentWidget_UpdateImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AttackTypeTag;                                     // 0x0028(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInhandEquipmentWidget_UpdateImage) == 0x000008, "Wrong alignment on HWInhandEquipmentWidget_UpdateImage");
static_assert(sizeof(HWInhandEquipmentWidget_UpdateImage) == 0x000030, "Wrong size on HWInhandEquipmentWidget_UpdateImage");
static_assert(offsetof(HWInhandEquipmentWidget_UpdateImage, Icon) == 0x000000, "Member 'HWInhandEquipmentWidget_UpdateImage::Icon' has a wrong offset!");
static_assert(offsetof(HWInhandEquipmentWidget_UpdateImage, AttackTypeTag) == 0x000028, "Member 'HWInhandEquipmentWidget_UpdateImage::AttackTypeTag' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenEntryWidget.GetMatchInfo
// 0x0078 (0x0078 - 0x0000)
struct HWMatchHistoryScreenEntryWidget_GetMatchInfo final
{
public:
	struct FHWPlayerMatchData                     ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenEntryWidget_GetMatchInfo) == 0x000008, "Wrong alignment on HWMatchHistoryScreenEntryWidget_GetMatchInfo");
static_assert(sizeof(HWMatchHistoryScreenEntryWidget_GetMatchInfo) == 0x000078, "Wrong size on HWMatchHistoryScreenEntryWidget_GetMatchInfo");
static_assert(offsetof(HWMatchHistoryScreenEntryWidget_GetMatchInfo, ReturnValue) == 0x000000, "Member 'HWMatchHistoryScreenEntryWidget_GetMatchInfo::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenEntryWidget.SetMatchInfo
// 0x0078 (0x0078 - 0x0000)
struct HWMatchHistoryScreenEntryWidget_SetMatchInfo final
{
public:
	struct FHWPlayerMatchData                     MatchInfo;                                         // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenEntryWidget_SetMatchInfo) == 0x000008, "Wrong alignment on HWMatchHistoryScreenEntryWidget_SetMatchInfo");
static_assert(sizeof(HWMatchHistoryScreenEntryWidget_SetMatchInfo) == 0x000078, "Wrong size on HWMatchHistoryScreenEntryWidget_SetMatchInfo");
static_assert(offsetof(HWMatchHistoryScreenEntryWidget_SetMatchInfo, MatchInfo) == 0x000000, "Member 'HWMatchHistoryScreenEntryWidget_SetMatchInfo::MatchInfo' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.CreateMatchEntryWidget
// 0x0260 (0x0260 - 0x0000)
struct HWMatchHistoryScreenWidget_CreateMatchEntryWidget final
{
public:
	struct FRHAPI_MatchPlayerWithMatch            MatchHistoryInfo;                                  // 0x0000(0x0258)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UHWMatchHistoryScreenEntryWidget*       ReturnValue;                                       // 0x0258(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_CreateMatchEntryWidget) == 0x000008, "Wrong alignment on HWMatchHistoryScreenWidget_CreateMatchEntryWidget");
static_assert(sizeof(HWMatchHistoryScreenWidget_CreateMatchEntryWidget) == 0x000260, "Wrong size on HWMatchHistoryScreenWidget_CreateMatchEntryWidget");
static_assert(offsetof(HWMatchHistoryScreenWidget_CreateMatchEntryWidget, MatchHistoryInfo) == 0x000000, "Member 'HWMatchHistoryScreenWidget_CreateMatchEntryWidget::MatchHistoryInfo' has a wrong offset!");
static_assert(offsetof(HWMatchHistoryScreenWidget_CreateMatchEntryWidget, ReturnValue) == 0x000258, "Member 'HWMatchHistoryScreenWidget_CreateMatchEntryWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.HandlePlayerMatchesUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated final
{
public:
	class URH_PlayerInfoSubobject*                PlayerMatches;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated) == 0x000008, "Wrong alignment on HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated");
static_assert(sizeof(HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated) == 0x000008, "Wrong size on HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated");
static_assert(offsetof(HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated, PlayerMatches) == 0x000000, "Member 'HWMatchHistoryScreenWidget_HandlePlayerMatchesUpdated::PlayerMatches' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.OnGamemodeChanged
// 0x0008 (0x0008 - 0x0000)
struct HWMatchHistoryScreenWidget_OnGamemodeChanged final
{
public:
	struct FGameplayTag                           GameModeInfoTag;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_OnGamemodeChanged) == 0x000004, "Wrong alignment on HWMatchHistoryScreenWidget_OnGamemodeChanged");
static_assert(sizeof(HWMatchHistoryScreenWidget_OnGamemodeChanged) == 0x000008, "Wrong size on HWMatchHistoryScreenWidget_OnGamemodeChanged");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnGamemodeChanged, GameModeInfoTag) == 0x000000, "Member 'HWMatchHistoryScreenWidget_OnGamemodeChanged::GameModeInfoTag' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.OnMatchEntrySelected
// 0x0080 (0x0080 - 0x0000)
struct HWMatchHistoryScreenWidget_OnMatchEntrySelected final
{
public:
	class UHWMatchHistoryScreenEntryWidget*       EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWPlayerMatchData                     MatchInfo;                                         // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_OnMatchEntrySelected) == 0x000008, "Wrong alignment on HWMatchHistoryScreenWidget_OnMatchEntrySelected");
static_assert(sizeof(HWMatchHistoryScreenWidget_OnMatchEntrySelected) == 0x000080, "Wrong size on HWMatchHistoryScreenWidget_OnMatchEntrySelected");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnMatchEntrySelected, EntryWidget) == 0x000000, "Member 'HWMatchHistoryScreenWidget_OnMatchEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnMatchEntrySelected, MatchInfo) == 0x000008, "Member 'HWMatchHistoryScreenWidget_OnMatchEntrySelected::MatchInfo' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.OnSelectedMatchLoaded
// 0x0218 (0x0218 - 0x0000)
struct HWMatchHistoryScreenWidget_OnSelectedMatchLoaded final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchWithPlayers                SearchResult;                                      // 0x0008(0x0168)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRH_ErrorInfo                          ErrorInfo;                                         // 0x0170(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_OnSelectedMatchLoaded) == 0x000008, "Wrong alignment on HWMatchHistoryScreenWidget_OnSelectedMatchLoaded");
static_assert(sizeof(HWMatchHistoryScreenWidget_OnSelectedMatchLoaded) == 0x000218, "Wrong size on HWMatchHistoryScreenWidget_OnSelectedMatchLoaded");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnSelectedMatchLoaded, bSuccess) == 0x000000, "Member 'HWMatchHistoryScreenWidget_OnSelectedMatchLoaded::bSuccess' has a wrong offset!");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnSelectedMatchLoaded, SearchResult) == 0x000008, "Member 'HWMatchHistoryScreenWidget_OnSelectedMatchLoaded::SearchResult' has a wrong offset!");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnSelectedMatchLoaded, ErrorInfo) == 0x000170, "Member 'HWMatchHistoryScreenWidget_OnSelectedMatchLoaded::ErrorInfo' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.OnTimespanChanged
// 0x0001 (0x0001 - 0x0000)
struct HWMatchHistoryScreenWidget_OnTimespanChanged final
{
public:
	EHWSupportedTimespans                         NewTimespan;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_OnTimespanChanged) == 0x000001, "Wrong alignment on HWMatchHistoryScreenWidget_OnTimespanChanged");
static_assert(sizeof(HWMatchHistoryScreenWidget_OnTimespanChanged) == 0x000001, "Wrong size on HWMatchHistoryScreenWidget_OnTimespanChanged");
static_assert(offsetof(HWMatchHistoryScreenWidget_OnTimespanChanged, NewTimespan) == 0x000000, "Member 'HWMatchHistoryScreenWidget_OnTimespanChanged::NewTimespan' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.PopulateMatchDetailsWithPlayer
// 0x0128 (0x0128 - 0x0000)
struct HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer final
{
public:
	struct FRHAPI_MatchPlayerResponse             MatchPlayerResponse;                               // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              Duration;                                          // 0x0120(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer) == 0x000008, "Wrong alignment on HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer");
static_assert(sizeof(HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer) == 0x000128, "Wrong size on HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer");
static_assert(offsetof(HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer, MatchPlayerResponse) == 0x000000, "Member 'HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer::MatchPlayerResponse' has a wrong offset!");
static_assert(offsetof(HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer, Duration) == 0x000120, "Member 'HWMatchHistoryScreenWidget_PopulateMatchDetailsWithPlayer::Duration' has a wrong offset!");

// Function HemingwayUI.HWMatchHistoryScreenWidget.SetIsLoading
// 0x0001 (0x0001 - 0x0000)
struct HWMatchHistoryScreenWidget_SetIsLoading final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMatchHistoryScreenWidget_SetIsLoading) == 0x000001, "Wrong alignment on HWMatchHistoryScreenWidget_SetIsLoading");
static_assert(sizeof(HWMatchHistoryScreenWidget_SetIsLoading) == 0x000001, "Wrong size on HWMatchHistoryScreenWidget_SetIsLoading");
static_assert(offsetof(HWMatchHistoryScreenWidget_SetIsLoading, bIsLoading) == 0x000000, "Member 'HWMatchHistoryScreenWidget_SetIsLoading::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.CTAStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWCallToActionDisplayWidget_CTAStateUpdated final
{
public:
	bool                                          bIsCTAActive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_CTAStateUpdated) == 0x000001, "Wrong alignment on HWCallToActionDisplayWidget_CTAStateUpdated");
static_assert(sizeof(HWCallToActionDisplayWidget_CTAStateUpdated) == 0x000001, "Wrong size on HWCallToActionDisplayWidget_CTAStateUpdated");
static_assert(offsetof(HWCallToActionDisplayWidget_CTAStateUpdated, bIsCTAActive) == 0x000000, "Member 'HWCallToActionDisplayWidget_CTAStateUpdated::bIsCTAActive' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.HandleCTAActiveChildrenCountChanged
// 0x0004 (0x0004 - 0x0000)
struct HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged final
{
public:
	int32                                         ActiveChildrenCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged) == 0x000004, "Wrong alignment on HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged");
static_assert(sizeof(HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged) == 0x000004, "Wrong size on HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged");
static_assert(offsetof(HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged, ActiveChildrenCount) == 0x000000, "Member 'HWCallToActionDisplayWidget_HandleCTAActiveChildrenCountChanged::ActiveChildrenCount' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.HandleCTASeenAmountChanged
// 0x0008 (0x0008 - 0x0000)
struct HWCallToActionDisplayWidget_HandleCTASeenAmountChanged final
{
public:
	int32                                         InventoryAmount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeenAmount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_HandleCTASeenAmountChanged) == 0x000004, "Wrong alignment on HWCallToActionDisplayWidget_HandleCTASeenAmountChanged");
static_assert(sizeof(HWCallToActionDisplayWidget_HandleCTASeenAmountChanged) == 0x000008, "Wrong size on HWCallToActionDisplayWidget_HandleCTASeenAmountChanged");
static_assert(offsetof(HWCallToActionDisplayWidget_HandleCTASeenAmountChanged, InventoryAmount) == 0x000000, "Member 'HWCallToActionDisplayWidget_HandleCTASeenAmountChanged::InventoryAmount' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_HandleCTASeenAmountChanged, SeenAmount) == 0x000004, "Member 'HWCallToActionDisplayWidget_HandleCTASeenAmountChanged::SeenAmount' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.HandleCTAStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWCallToActionDisplayWidget_HandleCTAStateChanged final
{
public:
	bool                                          bIsCTAActive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_HandleCTAStateChanged) == 0x000001, "Wrong alignment on HWCallToActionDisplayWidget_HandleCTAStateChanged");
static_assert(sizeof(HWCallToActionDisplayWidget_HandleCTAStateChanged) == 0x000001, "Wrong size on HWCallToActionDisplayWidget_HandleCTAStateChanged");
static_assert(offsetof(HWCallToActionDisplayWidget_HandleCTAStateChanged, bIsCTAActive) == 0x000000, "Member 'HWCallToActionDisplayWidget_HandleCTAStateChanged::bIsCTAActive' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.ListenToCTAPath
// 0x0018 (0x0018 - 0x0000)
struct HWCallToActionDisplayWidget_ListenToCTAPath final
{
public:
	TArray<class FName>                           InCTAPath;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EHWCallToActionListenType                     ListenType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCallToActionDisplayWidget_ListenToCTAPath) == 0x000008, "Wrong alignment on HWCallToActionDisplayWidget_ListenToCTAPath");
static_assert(sizeof(HWCallToActionDisplayWidget_ListenToCTAPath) == 0x000018, "Wrong size on HWCallToActionDisplayWidget_ListenToCTAPath");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPath, InCTAPath) == 0x000000, "Member 'HWCallToActionDisplayWidget_ListenToCTAPath::InCTAPath' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPath, ListenType) == 0x000010, "Member 'HWCallToActionDisplayWidget_ListenToCTAPath::ListenType' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.ListenToCTAPathByItem
// 0x0018 (0x0018 - 0x0000)
struct HWCallToActionDisplayWidget_ListenToCTAPathByItem final
{
public:
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionListenType                     ListenType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Preffix;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Suffix;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWCharacterItem*                 CharacterContext;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_ListenToCTAPathByItem) == 0x000008, "Wrong alignment on HWCallToActionDisplayWidget_ListenToCTAPathByItem");
static_assert(sizeof(HWCallToActionDisplayWidget_ListenToCTAPathByItem) == 0x000018, "Wrong size on HWCallToActionDisplayWidget_ListenToCTAPathByItem");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItem, InventoryItem) == 0x000000, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItem::InventoryItem' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItem, ListenType) == 0x000008, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItem::ListenType' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItem, Preffix) == 0x000009, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItem::Preffix' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItem, Suffix) == 0x00000A, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItem::Suffix' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItem, CharacterContext) == 0x000010, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItem::CharacterContext' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.ListenToCTAPathByItemPtr
// 0x0038 (0x0038 - 0x0000)
struct HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        InventoryItemPtr;                                  // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionListenType                     ListenType;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Preffix;                                           // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Suffix;                                            // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWCharacterItem*                 CharacterContext;                                  // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr) == 0x000008, "Wrong alignment on HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr");
static_assert(sizeof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr) == 0x000038, "Wrong size on HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr, InventoryItemPtr) == 0x000000, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr::InventoryItemPtr' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr, ListenType) == 0x000028, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr::ListenType' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr, Preffix) == 0x000029, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr::Preffix' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr, Suffix) == 0x00002A, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr::Suffix' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr, CharacterContext) == 0x000030, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByItemPtr::CharacterContext' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.ListenToCTAPathByLootId
// 0x0018 (0x0018 - 0x0000)
struct HWCallToActionDisplayWidget_ListenToCTAPathByLootId final
{
public:
	struct FRH_LootId                             LootId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionListenType                     ListenType;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Preffix;                                           // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCallToActionAffixPath                      Suffix;                                            // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId) == 0x000004, "Wrong alignment on HWCallToActionDisplayWidget_ListenToCTAPathByLootId");
static_assert(sizeof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId) == 0x000018, "Wrong size on HWCallToActionDisplayWidget_ListenToCTAPathByLootId");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId, LootId) == 0x000000, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByLootId::LootId' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId, ListenType) == 0x000014, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByLootId::ListenType' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId, Preffix) == 0x000015, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByLootId::Preffix' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_ListenToCTAPathByLootId, Suffix) == 0x000016, "Member 'HWCallToActionDisplayWidget_ListenToCTAPathByLootId::Suffix' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.SetCTAAndChildrenSeen
// 0x0001 (0x0001 - 0x0000)
struct HWCallToActionDisplayWidget_SetCTAAndChildrenSeen final
{
public:
	ERH_INPUT_STATE                               RequiredInputState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_SetCTAAndChildrenSeen) == 0x000001, "Wrong alignment on HWCallToActionDisplayWidget_SetCTAAndChildrenSeen");
static_assert(sizeof(HWCallToActionDisplayWidget_SetCTAAndChildrenSeen) == 0x000001, "Wrong size on HWCallToActionDisplayWidget_SetCTAAndChildrenSeen");
static_assert(offsetof(HWCallToActionDisplayWidget_SetCTAAndChildrenSeen, RequiredInputState) == 0x000000, "Member 'HWCallToActionDisplayWidget_SetCTAAndChildrenSeen::RequiredInputState' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.SetCTASeen
// 0x0008 (0x0008 - 0x0000)
struct HWCallToActionDisplayWidget_SetCTASeen final
{
public:
	int32                                         SeenAmount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERH_INPUT_STATE                               RequiredInputState;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCallToActionDisplayWidget_SetCTASeen) == 0x000004, "Wrong alignment on HWCallToActionDisplayWidget_SetCTASeen");
static_assert(sizeof(HWCallToActionDisplayWidget_SetCTASeen) == 0x000008, "Wrong size on HWCallToActionDisplayWidget_SetCTASeen");
static_assert(offsetof(HWCallToActionDisplayWidget_SetCTASeen, SeenAmount) == 0x000000, "Member 'HWCallToActionDisplayWidget_SetCTASeen::SeenAmount' has a wrong offset!");
static_assert(offsetof(HWCallToActionDisplayWidget_SetCTASeen, RequiredInputState) == 0x000004, "Member 'HWCallToActionDisplayWidget_SetCTASeen::RequiredInputState' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.SetIsCTAActive
// 0x0001 (0x0001 - 0x0000)
struct HWCallToActionDisplayWidget_SetIsCTAActive final
{
public:
	bool                                          bIsCTAActive;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_SetIsCTAActive) == 0x000001, "Wrong alignment on HWCallToActionDisplayWidget_SetIsCTAActive");
static_assert(sizeof(HWCallToActionDisplayWidget_SetIsCTAActive) == 0x000001, "Wrong size on HWCallToActionDisplayWidget_SetIsCTAActive");
static_assert(offsetof(HWCallToActionDisplayWidget_SetIsCTAActive, bIsCTAActive) == 0x000000, "Member 'HWCallToActionDisplayWidget_SetIsCTAActive::bIsCTAActive' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.GetCurrentCTAPath
// 0x0010 (0x0010 - 0x0000)
struct HWCallToActionDisplayWidget_GetCurrentCTAPath final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_GetCurrentCTAPath) == 0x000008, "Wrong alignment on HWCallToActionDisplayWidget_GetCurrentCTAPath");
static_assert(sizeof(HWCallToActionDisplayWidget_GetCurrentCTAPath) == 0x000010, "Wrong size on HWCallToActionDisplayWidget_GetCurrentCTAPath");
static_assert(offsetof(HWCallToActionDisplayWidget_GetCurrentCTAPath, ReturnValue) == 0x000000, "Member 'HWCallToActionDisplayWidget_GetCurrentCTAPath::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCallToActionDisplayWidget.IsCTAActive
// 0x0001 (0x0001 - 0x0000)
struct HWCallToActionDisplayWidget_IsCTAActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCallToActionDisplayWidget_IsCTAActive) == 0x000001, "Wrong alignment on HWCallToActionDisplayWidget_IsCTAActive");
static_assert(sizeof(HWCallToActionDisplayWidget_IsCTAActive) == 0x000001, "Wrong size on HWCallToActionDisplayWidget_IsCTAActive");
static_assert(offsetof(HWCallToActionDisplayWidget_IsCTAActive, ReturnValue) == 0x000000, "Member 'HWCallToActionDisplayWidget_IsCTAActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEscMenuWidget.MoveToView
// 0x000C (0x000C - 0x0000)
struct HWEscMenuWidget_MoveToView final
{
public:
	struct FGameplayTag                           TargetViewName;                                    // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseEscMenu;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEscMenuWidget_MoveToView) == 0x000004, "Wrong alignment on HWEscMenuWidget_MoveToView");
static_assert(sizeof(HWEscMenuWidget_MoveToView) == 0x00000C, "Wrong size on HWEscMenuWidget_MoveToView");
static_assert(offsetof(HWEscMenuWidget_MoveToView, TargetViewName) == 0x000000, "Member 'HWEscMenuWidget_MoveToView::TargetViewName' has a wrong offset!");
static_assert(offsetof(HWEscMenuWidget_MoveToView, bCloseEscMenu) == 0x000008, "Member 'HWEscMenuWidget_MoveToView::bCloseEscMenu' has a wrong offset!");

// Function HemingwayUI.HWEscMenuWidget.IsMatchmadeSession
// 0x0001 (0x0001 - 0x0000)
struct HWEscMenuWidget_IsMatchmadeSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEscMenuWidget_IsMatchmadeSession) == 0x000001, "Wrong alignment on HWEscMenuWidget_IsMatchmadeSession");
static_assert(sizeof(HWEscMenuWidget_IsMatchmadeSession) == 0x000001, "Wrong size on HWEscMenuWidget_IsMatchmadeSession");
static_assert(offsetof(HWEscMenuWidget_IsMatchmadeSession, ReturnValue) == 0x000000, "Member 'HWEscMenuWidget_IsMatchmadeSession::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEscMenuWidget.IsStandaloneSession
// 0x0001 (0x0001 - 0x0000)
struct HWEscMenuWidget_IsStandaloneSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEscMenuWidget_IsStandaloneSession) == 0x000001, "Wrong alignment on HWEscMenuWidget_IsStandaloneSession");
static_assert(sizeof(HWEscMenuWidget_IsStandaloneSession) == 0x000001, "Wrong size on HWEscMenuWidget_IsStandaloneSession");
static_assert(offsetof(HWEscMenuWidget_IsStandaloneSession, ReturnValue) == 0x000000, "Member 'HWEscMenuWidget_IsStandaloneSession::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.BLUEPRINT_CheckShouldShowPanels
// 0x0020 (0x0020 - 0x0000)
struct HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels final
{
public:
	TArray<class URHNewsRotatorData*>             Panels;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)> Delegate;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels");
static_assert(sizeof(HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels) == 0x000020, "Wrong size on HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels");
static_assert(offsetof(HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels, Panels) == 0x000000, "Member 'HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels::Panels' has a wrong offset!");
static_assert(offsetof(HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels, Delegate) == 0x000010, "Member 'HWNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels::Delegate' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.BLUEPRINT_GetPanelDataAsync
// 0x0014 (0x0014 - 0x0000)
struct HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync final
{
public:
	TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)> Delegate;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnseenOnly;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync) == 0x000004, "Wrong alignment on HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync");
static_assert(sizeof(HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync) == 0x000014, "Wrong size on HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync");
static_assert(offsetof(HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync, Delegate) == 0x000000, "Member 'HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync::Delegate' has a wrong offset!");
static_assert(offsetof(HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync, bUnseenOnly) == 0x000010, "Member 'HWNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync::bUnseenOnly' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.GetMainHeaderText
// 0x0018 (0x0018 - 0x0000)
struct HWNewsRotatorWidget_GetMainHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_GetMainHeaderText) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_GetMainHeaderText");
static_assert(sizeof(HWNewsRotatorWidget_GetMainHeaderText) == 0x000018, "Wrong size on HWNewsRotatorWidget_GetMainHeaderText");
static_assert(offsetof(HWNewsRotatorWidget_GetMainHeaderText, ReturnValue) == 0x000000, "Member 'HWNewsRotatorWidget_GetMainHeaderText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.OnJsonChanged
// 0x0010 (0x0010 - 0x0000)
struct HWNewsRotatorWidget_OnJsonChanged final
{
public:
	class FString                                 JsonName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_OnJsonChanged) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_OnJsonChanged");
static_assert(sizeof(HWNewsRotatorWidget_OnJsonChanged) == 0x000010, "Wrong size on HWNewsRotatorWidget_OnJsonChanged");
static_assert(offsetof(HWNewsRotatorWidget_OnJsonChanged, JsonName) == 0x000000, "Member 'HWNewsRotatorWidget_OnJsonChanged::JsonName' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.OnNewsPanelClicked
// 0x0008 (0x0008 - 0x0000)
struct HWNewsRotatorWidget_OnNewsPanelClicked final
{
public:
	class URHNewsRotatorData*                     Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_OnNewsPanelClicked) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_OnNewsPanelClicked");
static_assert(sizeof(HWNewsRotatorWidget_OnNewsPanelClicked) == 0x000008, "Wrong size on HWNewsRotatorWidget_OnNewsPanelClicked");
static_assert(offsetof(HWNewsRotatorWidget_OnNewsPanelClicked, Panel) == 0x000000, "Member 'HWNewsRotatorWidget_OnNewsPanelClicked::Panel' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.SetPanelAsSeen
// 0x0008 (0x0008 - 0x0000)
struct HWNewsRotatorWidget_SetPanelAsSeen final
{
public:
	class URHNewsRotatorData*                     Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_SetPanelAsSeen) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_SetPanelAsSeen");
static_assert(sizeof(HWNewsRotatorWidget_SetPanelAsSeen) == 0x000008, "Wrong size on HWNewsRotatorWidget_SetPanelAsSeen");
static_assert(offsetof(HWNewsRotatorWidget_SetPanelAsSeen, Panel) == 0x000000, "Member 'HWNewsRotatorWidget_SetPanelAsSeen::Panel' has a wrong offset!");

// Function HemingwayUI.HWNewsRotatorWidget.GetNewsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct HWNewsRotatorWidget_GetNewsSubsystem final
{
public:
	class URHNewsSubsystem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewsRotatorWidget_GetNewsSubsystem) == 0x000008, "Wrong alignment on HWNewsRotatorWidget_GetNewsSubsystem");
static_assert(sizeof(HWNewsRotatorWidget_GetNewsSubsystem) == 0x000008, "Wrong size on HWNewsRotatorWidget_GetNewsSubsystem");
static_assert(offsetof(HWNewsRotatorWidget_GetNewsSubsystem, ReturnValue) == 0x000000, "Member 'HWNewsRotatorWidget_GetNewsSubsystem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWObjectiveHealthbarWidget.SetCharacterDisplay
// 0x0010 (0x0010 - 0x0000)
struct HWObjectiveHealthbarWidget_SetCharacterDisplay final
{
public:
	const class AHWCharacter_Base*                Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWObjectiveHealthbarWidget_SetCharacterDisplay) == 0x000008, "Wrong alignment on HWObjectiveHealthbarWidget_SetCharacterDisplay");
static_assert(sizeof(HWObjectiveHealthbarWidget_SetCharacterDisplay) == 0x000010, "Wrong size on HWObjectiveHealthbarWidget_SetCharacterDisplay");
static_assert(offsetof(HWObjectiveHealthbarWidget_SetCharacterDisplay, Character) == 0x000000, "Member 'HWObjectiveHealthbarWidget_SetCharacterDisplay::Character' has a wrong offset!");
static_assert(offsetof(HWObjectiveHealthbarWidget_SetCharacterDisplay, CharacterItem) == 0x000008, "Member 'HWObjectiveHealthbarWidget_SetCharacterDisplay::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWDisplayInfoEffectWidget.OnDisplayInfoAdded
// 0x0030 (0x0030 - 0x0000)
struct HWDisplayInfoEffectWidget_OnDisplayInfoAdded final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDisplayInfoEffectWidget_OnDisplayInfoAdded) == 0x000008, "Wrong alignment on HWDisplayInfoEffectWidget_OnDisplayInfoAdded");
static_assert(sizeof(HWDisplayInfoEffectWidget_OnDisplayInfoAdded) == 0x000030, "Wrong size on HWDisplayInfoEffectWidget_OnDisplayInfoAdded");
static_assert(offsetof(HWDisplayInfoEffectWidget_OnDisplayInfoAdded, InDisplayInfo) == 0x000000, "Member 'HWDisplayInfoEffectWidget_OnDisplayInfoAdded::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWDisplayInfoEffectWidget.OnDisplayInfoRemoved
// 0x0030 (0x0030 - 0x0000)
struct HWDisplayInfoEffectWidget_OnDisplayInfoRemoved final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDisplayInfoEffectWidget_OnDisplayInfoRemoved) == 0x000008, "Wrong alignment on HWDisplayInfoEffectWidget_OnDisplayInfoRemoved");
static_assert(sizeof(HWDisplayInfoEffectWidget_OnDisplayInfoRemoved) == 0x000030, "Wrong size on HWDisplayInfoEffectWidget_OnDisplayInfoRemoved");
static_assert(offsetof(HWDisplayInfoEffectWidget_OnDisplayInfoRemoved, InDisplayInfo) == 0x000000, "Member 'HWDisplayInfoEffectWidget_OnDisplayInfoRemoved::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterPip.SetPipFilled
// 0x0001 (0x0001 - 0x0000)
struct HWPassiveMeterPip_SetPipFilled final
{
public:
	bool                                          bInFilled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterPip_SetPipFilled) == 0x000001, "Wrong alignment on HWPassiveMeterPip_SetPipFilled");
static_assert(sizeof(HWPassiveMeterPip_SetPipFilled) == 0x000001, "Wrong size on HWPassiveMeterPip_SetPipFilled");
static_assert(offsetof(HWPassiveMeterPip_SetPipFilled, bInFilled) == 0x000000, "Member 'HWPassiveMeterPip_SetPipFilled::bInFilled' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterPip.SetPipIndex
// 0x0004 (0x0004 - 0x0000)
struct HWPassiveMeterPip_SetPipIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterPip_SetPipIndex) == 0x000004, "Wrong alignment on HWPassiveMeterPip_SetPipIndex");
static_assert(sizeof(HWPassiveMeterPip_SetPipIndex) == 0x000004, "Wrong size on HWPassiveMeterPip_SetPipIndex");
static_assert(offsetof(HWPassiveMeterPip_SetPipIndex, Index_0) == 0x000000, "Member 'HWPassiveMeterPip_SetPipIndex::Index_0' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterPip.GetIsFilled
// 0x0001 (0x0001 - 0x0000)
struct HWPassiveMeterPip_GetIsFilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterPip_GetIsFilled) == 0x000001, "Wrong alignment on HWPassiveMeterPip_GetIsFilled");
static_assert(sizeof(HWPassiveMeterPip_GetIsFilled) == 0x000001, "Wrong size on HWPassiveMeterPip_GetIsFilled");
static_assert(offsetof(HWPassiveMeterPip_GetIsFilled, ReturnValue) == 0x000000, "Member 'HWPassiveMeterPip_GetIsFilled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterPip.GetPipIndex
// 0x0004 (0x0004 - 0x0000)
struct HWPassiveMeterPip_GetPipIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterPip_GetPipIndex) == 0x000004, "Wrong alignment on HWPassiveMeterPip_GetPipIndex");
static_assert(sizeof(HWPassiveMeterPip_GetPipIndex) == 0x000004, "Wrong size on HWPassiveMeterPip_GetPipIndex");
static_assert(offsetof(HWPassiveMeterPip_GetPipIndex, ReturnValue) == 0x000000, "Member 'HWPassiveMeterPip_GetPipIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.AddBuildEntry
// 0x0068 (0x0068 - 0x0000)
struct HWGodBuilderBuildEditorWidget_AddBuildEntry final
{
public:
	struct FHWGodBuildEntry                       InBuildEntry;                                      // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_AddBuildEntry) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_AddBuildEntry");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_AddBuildEntry) == 0x000068, "Wrong size on HWGodBuilderBuildEditorWidget_AddBuildEntry");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_AddBuildEntry, InBuildEntry) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_AddBuildEntry::InBuildEntry' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleAbilityOrderButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked final
{
public:
	class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked) == 0x000008, "Wrong size on HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleAbilityOrderButtonClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleAbilityOrderIconHovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered) == 0x000004, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered) == 0x000004, "Wrong size on HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered, AbilityIndex) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconHovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleAbilityOrderIconUnovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered) == 0x000004, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered) == 0x000004, "Wrong size on HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered, AbilityIndex) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleAbilityOrderIconUnovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildEntryHovered
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryWidget*   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered) == 0x000008, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildEntryHovered::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildEntryRemoved
// 0x0070 (0x0070 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved final
{
public:
	const class UHWGodBuilderBuildDisplayEntryWidget* EntryWidget;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodBuildEntry                       InGodBuildEntry;                                   // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved) == 0x000070, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved, InGodBuildEntry) == 0x000008, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildEntryRemoved::InGodBuildEntry' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildItemEntryHovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered) == 0x000030, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildItemEntryRightClicked
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked) == 0x000030, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildItemEntrySelected
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected) == 0x000030, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleBuildItemEntryUnhovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered) == 0x000030, "Wrong size on HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildEditorWidget_HandleBuildItemEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleDescTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleDescTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleDescTextCommitted) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleDescTextCommitted");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleDescTextCommitted) == 0x000020, "Wrong size on HWGodBuilderBuildEditorWidget_HandleDescTextCommitted");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleDescTextCommitted, Text) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleDescTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleDescTextCommitted, CommitMethod) == 0x000018, "Member 'HWGodBuilderBuildEditorWidget_HandleDescTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleEntryScrollBoxScrolled
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled) == 0x000004, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled) == 0x000004, "Wrong size on HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled, CurrentOffset) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleEntryScrollBoxScrolled::CurrentOffset' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.HandleTitleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted) == 0x000008, "Wrong alignment on HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted) == 0x000020, "Wrong size on HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted, Text) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted, CommitMethod) == 0x000018, "Member 'HWGodBuilderBuildEditorWidget_HandleTitleTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.SetBuildMode
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderBuildEditorWidget_SetBuildMode final
{
public:
	struct FGameplayTag                           InBuildMode;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_SetBuildMode) == 0x000004, "Wrong alignment on HWGodBuilderBuildEditorWidget_SetBuildMode");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_SetBuildMode) == 0x000008, "Wrong size on HWGodBuilderBuildEditorWidget_SetBuildMode");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_SetBuildMode, InBuildMode) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_SetBuildMode::InBuildMode' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.SetBuildRole
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildEditorWidget_SetBuildRole final
{
public:
	ECharacterRole                                InBuildRole;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_SetBuildRole) == 0x000001, "Wrong alignment on HWGodBuilderBuildEditorWidget_SetBuildRole");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_SetBuildRole) == 0x000001, "Wrong size on HWGodBuilderBuildEditorWidget_SetBuildRole");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_SetBuildRole, InBuildRole) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_SetBuildRole::InBuildRole' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.SetEntriesExpanded
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildEditorWidget_SetEntriesExpanded final
{
public:
	bool                                          bInIsExpanded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_SetEntriesExpanded) == 0x000001, "Wrong alignment on HWGodBuilderBuildEditorWidget_SetEntriesExpanded");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_SetEntriesExpanded) == 0x000001, "Wrong size on HWGodBuilderBuildEditorWidget_SetEntriesExpanded");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_SetEntriesExpanded, bInIsExpanded) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_SetEntriesExpanded::bInIsExpanded' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildEditorWidget.GetEntriesExpanded
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildEditorWidget_GetEntriesExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildEditorWidget_GetEntriesExpanded) == 0x000001, "Wrong alignment on HWGodBuilderBuildEditorWidget_GetEntriesExpanded");
static_assert(sizeof(HWGodBuilderBuildEditorWidget_GetEntriesExpanded) == 0x000001, "Wrong size on HWGodBuilderBuildEditorWidget_GetEntriesExpanded");
static_assert(offsetof(HWGodBuilderBuildEditorWidget_GetEntriesExpanded, ReturnValue) == 0x000000, "Member 'HWGodBuilderBuildEditorWidget_GetEntriesExpanded::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.RemoveBuff
// 0x0400 (0x0400 - 0x0000)
struct HWPersistentBuffBar_RemoveBuff final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_RemoveBuff) == 0x000008, "Wrong alignment on HWPersistentBuffBar_RemoveBuff");
static_assert(sizeof(HWPersistentBuffBar_RemoveBuff) == 0x000400, "Wrong size on HWPersistentBuffBar_RemoveBuff");
static_assert(offsetof(HWPersistentBuffBar_RemoveBuff, ActiveEffect) == 0x000000, "Member 'HWPersistentBuffBar_RemoveBuff::ActiveEffect' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct HWPersistentBuffBar_SetHorizontalAlignment final
{
public:
	EHWHorizontalAlignment                        InAlignment;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_SetHorizontalAlignment) == 0x000001, "Wrong alignment on HWPersistentBuffBar_SetHorizontalAlignment");
static_assert(sizeof(HWPersistentBuffBar_SetHorizontalAlignment) == 0x000001, "Wrong size on HWPersistentBuffBar_SetHorizontalAlignment");
static_assert(offsetof(HWPersistentBuffBar_SetHorizontalAlignment, InAlignment) == 0x000000, "Member 'HWPersistentBuffBar_SetHorizontalAlignment::InAlignment' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.SetNumColumns
// 0x0004 (0x0004 - 0x0000)
struct HWPersistentBuffBar_SetNumColumns final
{
public:
	int32                                         InNumColumns;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_SetNumColumns) == 0x000004, "Wrong alignment on HWPersistentBuffBar_SetNumColumns");
static_assert(sizeof(HWPersistentBuffBar_SetNumColumns) == 0x000004, "Wrong size on HWPersistentBuffBar_SetNumColumns");
static_assert(offsetof(HWPersistentBuffBar_SetNumColumns, InNumColumns) == 0x000000, "Member 'HWPersistentBuffBar_SetNumColumns::InNumColumns' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.SetNumRows
// 0x0004 (0x0004 - 0x0000)
struct HWPersistentBuffBar_SetNumRows final
{
public:
	int32                                         InNumRows;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_SetNumRows) == 0x000004, "Wrong alignment on HWPersistentBuffBar_SetNumRows");
static_assert(sizeof(HWPersistentBuffBar_SetNumRows) == 0x000004, "Wrong size on HWPersistentBuffBar_SetNumRows");
static_assert(offsetof(HWPersistentBuffBar_SetNumRows, InNumRows) == 0x000000, "Member 'HWPersistentBuffBar_SetNumRows::InNumRows' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct HWPersistentBuffBar_SetVerticalAlignment final
{
public:
	EHWVerticalAlignment                          InAlignment;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_SetVerticalAlignment) == 0x000001, "Wrong alignment on HWPersistentBuffBar_SetVerticalAlignment");
static_assert(sizeof(HWPersistentBuffBar_SetVerticalAlignment) == 0x000001, "Wrong size on HWPersistentBuffBar_SetVerticalAlignment");
static_assert(offsetof(HWPersistentBuffBar_SetVerticalAlignment, InAlignment) == 0x000000, "Member 'HWPersistentBuffBar_SetVerticalAlignment::InAlignment' has a wrong offset!");

// Function HemingwayUI.HWPersistentBuffBar.GetVisibleBuffWidget
// 0x0410 (0x0410 - 0x0000)
struct HWPersistentBuffBar_GetVisibleBuffWidget final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         OutWidgetIndex;                                    // 0x0400(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWBuffWidget*                          ReturnValue;                                       // 0x0408(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentBuffBar_GetVisibleBuffWidget) == 0x000008, "Wrong alignment on HWPersistentBuffBar_GetVisibleBuffWidget");
static_assert(sizeof(HWPersistentBuffBar_GetVisibleBuffWidget) == 0x000410, "Wrong size on HWPersistentBuffBar_GetVisibleBuffWidget");
static_assert(offsetof(HWPersistentBuffBar_GetVisibleBuffWidget, ActiveEffect) == 0x000000, "Member 'HWPersistentBuffBar_GetVisibleBuffWidget::ActiveEffect' has a wrong offset!");
static_assert(offsetof(HWPersistentBuffBar_GetVisibleBuffWidget, OutWidgetIndex) == 0x000400, "Member 'HWPersistentBuffBar_GetVisibleBuffWidget::OutWidgetIndex' has a wrong offset!");
static_assert(offsetof(HWPersistentBuffBar_GetVisibleBuffWidget, ReturnValue) == 0x000408, "Member 'HWPersistentBuffBar_GetVisibleBuffWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQueueTimerWidget.OnBackfillInfoUpdated
// 0x0014 (0x0014 - 0x0000)
struct HWQueueTimerWidget_OnBackfillInfoUpdated final
{
public:
	struct FHWBackfillQueueInfo                   QueueInfo;                                         // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueTimerWidget_OnBackfillInfoUpdated) == 0x000004, "Wrong alignment on HWQueueTimerWidget_OnBackfillInfoUpdated");
static_assert(sizeof(HWQueueTimerWidget_OnBackfillInfoUpdated) == 0x000014, "Wrong size on HWQueueTimerWidget_OnBackfillInfoUpdated");
static_assert(offsetof(HWQueueTimerWidget_OnBackfillInfoUpdated, QueueInfo) == 0x000000, "Member 'HWQueueTimerWidget_OnBackfillInfoUpdated::QueueInfo' has a wrong offset!");

// Function HemingwayUI.HWQueueTimerWidget.GetSelectedQueueDetails
// 0x01A0 (0x01A0 - 0x0000)
struct HWQueueTimerWidget_GetSelectedQueueDetails final
{
public:
	struct FRHQueueDetails                        OutQueueDetails;                                   // 0x0000(0x0198)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0198(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWQueueTimerWidget_GetSelectedQueueDetails) == 0x000008, "Wrong alignment on HWQueueTimerWidget_GetSelectedQueueDetails");
static_assert(sizeof(HWQueueTimerWidget_GetSelectedQueueDetails) == 0x0001A0, "Wrong size on HWQueueTimerWidget_GetSelectedQueueDetails");
static_assert(offsetof(HWQueueTimerWidget_GetSelectedQueueDetails, OutQueueDetails) == 0x000000, "Member 'HWQueueTimerWidget_GetSelectedQueueDetails::OutQueueDetails' has a wrong offset!");
static_assert(offsetof(HWQueueTimerWidget_GetSelectedQueueDetails, ReturnValue) == 0x000198, "Member 'HWQueueTimerWidget_GetSelectedQueueDetails::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.BlockedChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGameplayEffectBlockedWidget_BlockedChanged final
{
public:
	struct FGameplayTag                           OldBlockedReason;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewBlockedReason;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_BlockedChanged) == 0x000004, "Wrong alignment on HWGameplayEffectBlockedWidget_BlockedChanged");
static_assert(sizeof(HWGameplayEffectBlockedWidget_BlockedChanged) == 0x000010, "Wrong size on HWGameplayEffectBlockedWidget_BlockedChanged");
static_assert(offsetof(HWGameplayEffectBlockedWidget_BlockedChanged, OldBlockedReason) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_BlockedChanged::OldBlockedReason' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectBlockedWidget_BlockedChanged, NewBlockedReason) == 0x000008, "Member 'HWGameplayEffectBlockedWidget_BlockedChanged::NewBlockedReason' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.BlockedFinished
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockedWidget_BlockedFinished final
{
public:
	struct FGameplayTag                           OldBlockedReason;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_BlockedFinished) == 0x000004, "Wrong alignment on HWGameplayEffectBlockedWidget_BlockedFinished");
static_assert(sizeof(HWGameplayEffectBlockedWidget_BlockedFinished) == 0x000008, "Wrong size on HWGameplayEffectBlockedWidget_BlockedFinished");
static_assert(offsetof(HWGameplayEffectBlockedWidget_BlockedFinished, OldBlockedReason) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_BlockedFinished::OldBlockedReason' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.BlockedStarted
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockedWidget_BlockedStarted final
{
public:
	struct FGameplayTag                           BlockedReason;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_BlockedStarted) == 0x000004, "Wrong alignment on HWGameplayEffectBlockedWidget_BlockedStarted");
static_assert(sizeof(HWGameplayEffectBlockedWidget_BlockedStarted) == 0x000008, "Wrong size on HWGameplayEffectBlockedWidget_BlockedStarted");
static_assert(offsetof(HWGameplayEffectBlockedWidget_BlockedStarted, BlockedReason) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_BlockedStarted::BlockedReason' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.OnTrackingEquipmentChanged
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged final
{
public:
	class UHWEquipmentInstance*                   EquipmentChanged;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged) == 0x000008, "Wrong alignment on HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged");
static_assert(sizeof(HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged) == 0x000008, "Wrong size on HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged");
static_assert(offsetof(HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged, EquipmentChanged) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_OnTrackingEquipmentChanged::EquipmentChanged' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.GetCurrentBlockedReason
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockedWidget_GetCurrentBlockedReason final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_GetCurrentBlockedReason) == 0x000004, "Wrong alignment on HWGameplayEffectBlockedWidget_GetCurrentBlockedReason");
static_assert(sizeof(HWGameplayEffectBlockedWidget_GetCurrentBlockedReason) == 0x000008, "Wrong size on HWGameplayEffectBlockedWidget_GetCurrentBlockedReason");
static_assert(offsetof(HWGameplayEffectBlockedWidget_GetCurrentBlockedReason, ReturnValue) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_GetCurrentBlockedReason::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockedWidget.IsBlockedActive
// 0x0001 (0x0001 - 0x0000)
struct HWGameplayEffectBlockedWidget_IsBlockedActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockedWidget_IsBlockedActive) == 0x000001, "Wrong alignment on HWGameplayEffectBlockedWidget_IsBlockedActive");
static_assert(sizeof(HWGameplayEffectBlockedWidget_IsBlockedActive) == 0x000001, "Wrong size on HWGameplayEffectBlockedWidget_IsBlockedActive");
static_assert(offsetof(HWGameplayEffectBlockedWidget_IsBlockedActive, ReturnValue) == 0x000000, "Member 'HWGameplayEffectBlockedWidget_IsBlockedActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQuickPlayWidget.OnBackfillInfoUpdated
// 0x0014 (0x0014 - 0x0000)
struct HWQuickPlayWidget_OnBackfillInfoUpdated final
{
public:
	struct FHWBackfillQueueInfo                   BackfillQueueInfo;                                 // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQuickPlayWidget_OnBackfillInfoUpdated) == 0x000004, "Wrong alignment on HWQuickPlayWidget_OnBackfillInfoUpdated");
static_assert(sizeof(HWQuickPlayWidget_OnBackfillInfoUpdated) == 0x000014, "Wrong size on HWQuickPlayWidget_OnBackfillInfoUpdated");
static_assert(offsetof(HWQuickPlayWidget_OnBackfillInfoUpdated, BackfillQueueInfo) == 0x000000, "Member 'HWQuickPlayWidget_OnBackfillInfoUpdated::BackfillQueueInfo' has a wrong offset!");

// Function HemingwayUI.HWQuickPlayWidget.GetHighestAllowedSR
// 0x0004 (0x0004 - 0x0000)
struct HWQuickPlayWidget_GetHighestAllowedSR final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQuickPlayWidget_GetHighestAllowedSR) == 0x000004, "Wrong alignment on HWQuickPlayWidget_GetHighestAllowedSR");
static_assert(sizeof(HWQuickPlayWidget_GetHighestAllowedSR) == 0x000004, "Wrong size on HWQuickPlayWidget_GetHighestAllowedSR");
static_assert(offsetof(HWQuickPlayWidget_GetHighestAllowedSR, ReturnValue) == 0x000000, "Member 'HWQuickPlayWidget_GetHighestAllowedSR::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQuickPlayWidget.GetMaxSRDifference
// 0x0004 (0x0004 - 0x0000)
struct HWQuickPlayWidget_GetMaxSRDifference final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQuickPlayWidget_GetMaxSRDifference) == 0x000004, "Wrong alignment on HWQuickPlayWidget_GetMaxSRDifference");
static_assert(sizeof(HWQuickPlayWidget_GetMaxSRDifference) == 0x000004, "Wrong size on HWQuickPlayWidget_GetMaxSRDifference");
static_assert(offsetof(HWQuickPlayWidget_GetMaxSRDifference, ReturnValue) == 0x000000, "Member 'HWQuickPlayWidget_GetMaxSRDifference::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWResourceManager.PopulateResourceBar
// 0x0008 (0x0008 - 0x0000)
struct HWResourceManager_PopulateResourceBar final
{
public:
	struct FGameplayTag                           ResourceTags;                                      // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWResourceManager_PopulateResourceBar) == 0x000004, "Wrong alignment on HWResourceManager_PopulateResourceBar");
static_assert(sizeof(HWResourceManager_PopulateResourceBar) == 0x000008, "Wrong size on HWResourceManager_PopulateResourceBar");
static_assert(offsetof(HWResourceManager_PopulateResourceBar, ResourceTags) == 0x000000, "Member 'HWResourceManager_PopulateResourceBar::ResourceTags' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceButton.OnRolesFetched
// 0x0060 (0x0060 - 0x0000)
struct HWRolePreferenceButton_OnRolesFetched final
{
public:
	struct FHWRolePreferenceData                  RolePreferenceData;                                // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWRolePreferenceButton_OnRolesFetched) == 0x000008, "Wrong alignment on HWRolePreferenceButton_OnRolesFetched");
static_assert(sizeof(HWRolePreferenceButton_OnRolesFetched) == 0x000060, "Wrong size on HWRolePreferenceButton_OnRolesFetched");
static_assert(offsetof(HWRolePreferenceButton_OnRolesFetched, RolePreferenceData) == 0x000000, "Member 'HWRolePreferenceButton_OnRolesFetched::RolePreferenceData' has a wrong offset!");
static_assert(offsetof(HWRolePreferenceButton_OnRolesFetched, bSuccess) == 0x000058, "Member 'HWRolePreferenceButton_OnRolesFetched::bSuccess' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceButton.SetIsLoading
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreferenceButton_SetIsLoading final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceButton_SetIsLoading) == 0x000001, "Wrong alignment on HWRolePreferenceButton_SetIsLoading");
static_assert(sizeof(HWRolePreferenceButton_SetIsLoading) == 0x000001, "Wrong size on HWRolePreferenceButton_SetIsLoading");
static_assert(offsetof(HWRolePreferenceButton_SetIsLoading, bIsLoading) == 0x000000, "Member 'HWRolePreferenceButton_SetIsLoading::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceTag.HandleRoleSet
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreferenceTag_HandleRoleSet final
{
public:
	ECharacterRole                                CharacterRole;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceTag_HandleRoleSet) == 0x000001, "Wrong alignment on HWRolePreferenceTag_HandleRoleSet");
static_assert(sizeof(HWRolePreferenceTag_HandleRoleSet) == 0x000001, "Wrong size on HWRolePreferenceTag_HandleRoleSet");
static_assert(offsetof(HWRolePreferenceTag_HandleRoleSet, CharacterRole) == 0x000000, "Member 'HWRolePreferenceTag_HandleRoleSet::CharacterRole' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.CollectRolePreferenceData
// 0x0058 (0x0058 - 0x0000)
struct HWRolePreferenceWidget_CollectRolePreferenceData final
{
public:
	struct FHWRolePreferenceData                  ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceWidget_CollectRolePreferenceData) == 0x000008, "Wrong alignment on HWRolePreferenceWidget_CollectRolePreferenceData");
static_assert(sizeof(HWRolePreferenceWidget_CollectRolePreferenceData) == 0x000058, "Wrong size on HWRolePreferenceWidget_CollectRolePreferenceData");
static_assert(offsetof(HWRolePreferenceWidget_CollectRolePreferenceData, ReturnValue) == 0x000000, "Member 'HWRolePreferenceWidget_CollectRolePreferenceData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.GetIsFillEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreferenceWidget_GetIsFillEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceWidget_GetIsFillEnabled) == 0x000001, "Wrong alignment on HWRolePreferenceWidget_GetIsFillEnabled");
static_assert(sizeof(HWRolePreferenceWidget_GetIsFillEnabled) == 0x000001, "Wrong size on HWRolePreferenceWidget_GetIsFillEnabled");
static_assert(offsetof(HWRolePreferenceWidget_GetIsFillEnabled, ReturnValue) == 0x000000, "Member 'HWRolePreferenceWidget_GetIsFillEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.OnLoginPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct HWRolePreferenceWidget_OnLoginPlayerChanged final
{
public:
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceWidget_OnLoginPlayerChanged) == 0x000008, "Wrong alignment on HWRolePreferenceWidget_OnLoginPlayerChanged");
static_assert(sizeof(HWRolePreferenceWidget_OnLoginPlayerChanged) == 0x000008, "Wrong size on HWRolePreferenceWidget_OnLoginPlayerChanged");
static_assert(offsetof(HWRolePreferenceWidget_OnLoginPlayerChanged, LocalPlayer) == 0x000000, "Member 'HWRolePreferenceWidget_OnLoginPlayerChanged::LocalPlayer' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.OnRoleEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct HWRolePreferenceWidget_OnRoleEntrySelected final
{
public:
	class UHWRolePreference_EntryWidget*          SelectedWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceWidget_OnRoleEntrySelected) == 0x000008, "Wrong alignment on HWRolePreferenceWidget_OnRoleEntrySelected");
static_assert(sizeof(HWRolePreferenceWidget_OnRoleEntrySelected) == 0x000008, "Wrong size on HWRolePreferenceWidget_OnRoleEntrySelected");
static_assert(offsetof(HWRolePreferenceWidget_OnRoleEntrySelected, SelectedWidget) == 0x000000, "Member 'HWRolePreferenceWidget_OnRoleEntrySelected::SelectedWidget' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.OnRolesFetched
// 0x0060 (0x0060 - 0x0000)
struct HWRolePreferenceWidget_OnRolesFetched final
{
public:
	struct FHWRolePreferenceData                  RolePreferenceData;                                // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWRolePreferenceWidget_OnRolesFetched) == 0x000008, "Wrong alignment on HWRolePreferenceWidget_OnRolesFetched");
static_assert(sizeof(HWRolePreferenceWidget_OnRolesFetched) == 0x000060, "Wrong size on HWRolePreferenceWidget_OnRolesFetched");
static_assert(offsetof(HWRolePreferenceWidget_OnRolesFetched, RolePreferenceData) == 0x000000, "Member 'HWRolePreferenceWidget_OnRolesFetched::RolePreferenceData' has a wrong offset!");
static_assert(offsetof(HWRolePreferenceWidget_OnRolesFetched, bSuccess) == 0x000058, "Member 'HWRolePreferenceWidget_OnRolesFetched::bSuccess' has a wrong offset!");

// Function HemingwayUI.HWRolePreferenceWidget.PopulateDefaultRoles
// 0x0058 (0x0058 - 0x0000)
struct HWRolePreferenceWidget_PopulateDefaultRoles final
{
public:
	struct FHWRolePreferenceData                  RolePreferenceData;                                // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreferenceWidget_PopulateDefaultRoles) == 0x000008, "Wrong alignment on HWRolePreferenceWidget_PopulateDefaultRoles");
static_assert(sizeof(HWRolePreferenceWidget_PopulateDefaultRoles) == 0x000058, "Wrong size on HWRolePreferenceWidget_PopulateDefaultRoles");
static_assert(offsetof(HWRolePreferenceWidget_PopulateDefaultRoles, RolePreferenceData) == 0x000000, "Member 'HWRolePreferenceWidget_PopulateDefaultRoles::RolePreferenceData' has a wrong offset!");

// Function HemingwayUI.HWAccoladeDisplayerWidget.PlayAccolade
// 0x0090 (0x0090 - 0x0000)
struct HWAccoladeDisplayerWidget_PlayAccolade final
{
public:
	struct FGameplayTag                           AccoladeTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        AccoladeContext;                                   // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeDisplayerWidget_PlayAccolade) == 0x000008, "Wrong alignment on HWAccoladeDisplayerWidget_PlayAccolade");
static_assert(sizeof(HWAccoladeDisplayerWidget_PlayAccolade) == 0x000090, "Wrong size on HWAccoladeDisplayerWidget_PlayAccolade");
static_assert(offsetof(HWAccoladeDisplayerWidget_PlayAccolade, AccoladeTag) == 0x000000, "Member 'HWAccoladeDisplayerWidget_PlayAccolade::AccoladeTag' has a wrong offset!");
static_assert(offsetof(HWAccoladeDisplayerWidget_PlayAccolade, AccoladeContext) == 0x000008, "Member 'HWAccoladeDisplayerWidget_PlayAccolade::AccoladeContext' has a wrong offset!");

// Function HemingwayUI.HWRolePreference_EntryWidget.GetCharacterRole
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreference_EntryWidget_GetCharacterRole final
{
public:
	ECharacterRole                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreference_EntryWidget_GetCharacterRole) == 0x000001, "Wrong alignment on HWRolePreference_EntryWidget_GetCharacterRole");
static_assert(sizeof(HWRolePreference_EntryWidget_GetCharacterRole) == 0x000001, "Wrong size on HWRolePreference_EntryWidget_GetCharacterRole");
static_assert(offsetof(HWRolePreference_EntryWidget_GetCharacterRole, ReturnValue) == 0x000000, "Member 'HWRolePreference_EntryWidget_GetCharacterRole::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRolePreference_EntryWidget.GetPriorityIndex
// 0x0004 (0x0004 - 0x0000)
struct HWRolePreference_EntryWidget_GetPriorityIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreference_EntryWidget_GetPriorityIndex) == 0x000004, "Wrong alignment on HWRolePreference_EntryWidget_GetPriorityIndex");
static_assert(sizeof(HWRolePreference_EntryWidget_GetPriorityIndex) == 0x000004, "Wrong size on HWRolePreference_EntryWidget_GetPriorityIndex");
static_assert(offsetof(HWRolePreference_EntryWidget_GetPriorityIndex, ReturnValue) == 0x000000, "Member 'HWRolePreference_EntryWidget_GetPriorityIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRolePreference_EntryWidget.HandleIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreference_EntryWidget_HandleIsSelected final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreference_EntryWidget_HandleIsSelected) == 0x000001, "Wrong alignment on HWRolePreference_EntryWidget_HandleIsSelected");
static_assert(sizeof(HWRolePreference_EntryWidget_HandleIsSelected) == 0x000001, "Wrong size on HWRolePreference_EntryWidget_HandleIsSelected");
static_assert(offsetof(HWRolePreference_EntryWidget_HandleIsSelected, bIsSelected) == 0x000000, "Member 'HWRolePreference_EntryWidget_HandleIsSelected::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWRolePreference_EntryWidget.SetRolePreference
// 0x0001 (0x0001 - 0x0000)
struct HWRolePreference_EntryWidget_SetRolePreference final
{
public:
	ECharacterRole                                PreferredRole;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRolePreference_EntryWidget_SetRolePreference) == 0x000001, "Wrong alignment on HWRolePreference_EntryWidget_SetRolePreference");
static_assert(sizeof(HWRolePreference_EntryWidget_SetRolePreference) == 0x000001, "Wrong size on HWRolePreference_EntryWidget_SetRolePreference");
static_assert(offsetof(HWRolePreference_EntryWidget_SetRolePreference, PreferredRole) == 0x000000, "Member 'HWRolePreference_EntryWidget_SetRolePreference::PreferredRole' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesListWidget.HandleAbilityEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected final
{
public:
	const class UHWGodAbilityEntryWidget*         EntryWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected");
static_assert(sizeof(HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected) == 0x000008, "Wrong size on HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected");
static_assert(offsetof(HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderAbilitiesListWidget_HandleAbilityEntrySelected::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWSegmentedShieldWidget.HandleOnShieldInstanceHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged final
{
public:
	class UHWShieldInstance*                      ShieldInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged) == 0x000008, "Wrong alignment on HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged");
static_assert(sizeof(HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged) == 0x000010, "Wrong size on HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged");
static_assert(offsetof(HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged, ShieldInstance) == 0x000000, "Member 'HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged::ShieldInstance' has a wrong offset!");
static_assert(offsetof(HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged, NewHealth) == 0x000008, "Member 'HWSegmentedShieldWidget_HandleOnShieldInstanceHealthChanged::NewHealth' has a wrong offset!");

// Function HemingwayUI.HWSegmentedShieldWidget.HandleOnShieldListUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWSegmentedShieldWidget_HandleOnShieldListUpdated final
{
public:
	class UHWShieldManagerComponent*              ShieldManagerComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedShieldWidget_HandleOnShieldListUpdated) == 0x000008, "Wrong alignment on HWSegmentedShieldWidget_HandleOnShieldListUpdated");
static_assert(sizeof(HWSegmentedShieldWidget_HandleOnShieldListUpdated) == 0x000008, "Wrong size on HWSegmentedShieldWidget_HandleOnShieldListUpdated");
static_assert(offsetof(HWSegmentedShieldWidget_HandleOnShieldListUpdated, ShieldManagerComponent) == 0x000000, "Member 'HWSegmentedShieldWidget_HandleOnShieldListUpdated::ShieldManagerComponent' has a wrong offset!");

// Function HemingwayUI.HWSegmentedShieldWidget.HandleShieldManagerUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWSegmentedShieldWidget_HandleShieldManagerUpdated final
{
public:
	class UHWShieldManagerComponent*              ShieldManagerComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedShieldWidget_HandleShieldManagerUpdated) == 0x000008, "Wrong alignment on HWSegmentedShieldWidget_HandleShieldManagerUpdated");
static_assert(sizeof(HWSegmentedShieldWidget_HandleShieldManagerUpdated) == 0x000008, "Wrong size on HWSegmentedShieldWidget_HandleShieldManagerUpdated");
static_assert(offsetof(HWSegmentedShieldWidget_HandleShieldManagerUpdated, ShieldManagerComponent) == 0x000000, "Member 'HWSegmentedShieldWidget_HandleShieldManagerUpdated::ShieldManagerComponent' has a wrong offset!");

// Function HemingwayUI.HWSegmentedShieldWidget.GetSegmentsContainer
// 0x0008 (0x0008 - 0x0000)
struct HWSegmentedShieldWidget_GetSegmentsContainer final
{
public:
	class UHWHorizontalBox*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedShieldWidget_GetSegmentsContainer) == 0x000008, "Wrong alignment on HWSegmentedShieldWidget_GetSegmentsContainer");
static_assert(sizeof(HWSegmentedShieldWidget_GetSegmentsContainer) == 0x000008, "Wrong size on HWSegmentedShieldWidget_GetSegmentsContainer");
static_assert(offsetof(HWSegmentedShieldWidget_GetSegmentsContainer, ReturnValue) == 0x000000, "Member 'HWSegmentedShieldWidget_GetSegmentsContainer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.AttributeTrackEnded
// 0x0038 (0x0038 - 0x0000)
struct HWGameplayAttributeWidget_AttributeTrackEnded final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeWidget_AttributeTrackEnded) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_AttributeTrackEnded");
static_assert(sizeof(HWGameplayAttributeWidget_AttributeTrackEnded) == 0x000038, "Wrong size on HWGameplayAttributeWidget_AttributeTrackEnded");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeTrackEnded, Attribute) == 0x000000, "Member 'HWGameplayAttributeWidget_AttributeTrackEnded::Attribute' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.AttributeTrackStarted
// 0x0040 (0x0040 - 0x0000)
struct HWGameplayAttributeWidget_AttributeTrackStarted final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialValue;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayAttributeWidget_AttributeTrackStarted) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_AttributeTrackStarted");
static_assert(sizeof(HWGameplayAttributeWidget_AttributeTrackStarted) == 0x000040, "Wrong size on HWGameplayAttributeWidget_AttributeTrackStarted");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeTrackStarted, Attribute) == 0x000000, "Member 'HWGameplayAttributeWidget_AttributeTrackStarted::Attribute' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeTrackStarted, InitialValue) == 0x000038, "Member 'HWGameplayAttributeWidget_AttributeTrackStarted::InitialValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.AttributeValueChanged
// 0x0040 (0x0040 - 0x0000)
struct HWGameplayAttributeWidget_AttributeValueChanged final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeWidget_AttributeValueChanged) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_AttributeValueChanged");
static_assert(sizeof(HWGameplayAttributeWidget_AttributeValueChanged) == 0x000040, "Wrong size on HWGameplayAttributeWidget_AttributeValueChanged");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeValueChanged, Attribute) == 0x000000, "Member 'HWGameplayAttributeWidget_AttributeValueChanged::Attribute' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeValueChanged, OldValue) == 0x000038, "Member 'HWGameplayAttributeWidget_AttributeValueChanged::OldValue' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_AttributeValueChanged, NewValue) == 0x00003C, "Member 'HWGameplayAttributeWidget_AttributeValueChanged::NewValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.SetAndTrackNewAttributes
// 0x0020 (0x0020 - 0x0000)
struct HWGameplayAttributeWidget_SetAndTrackNewAttributes final
{
public:
	TArray<struct FGameplayAttribute>             NewAttributes;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayAttributeWidget_SetAndTrackNewAttributes) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_SetAndTrackNewAttributes");
static_assert(sizeof(HWGameplayAttributeWidget_SetAndTrackNewAttributes) == 0x000020, "Wrong size on HWGameplayAttributeWidget_SetAndTrackNewAttributes");
static_assert(offsetof(HWGameplayAttributeWidget_SetAndTrackNewAttributes, NewAttributes) == 0x000000, "Member 'HWGameplayAttributeWidget_SetAndTrackNewAttributes::NewAttributes' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_SetAndTrackNewAttributes, ASC) == 0x000010, "Member 'HWGameplayAttributeWidget_SetAndTrackNewAttributes::ASC' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_SetAndTrackNewAttributes, bAppend) == 0x000018, "Member 'HWGameplayAttributeWidget_SetAndTrackNewAttributes::bAppend' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.SetNewTrackedAttributes
// 0x0018 (0x0018 - 0x0000)
struct HWGameplayAttributeWidget_SetNewTrackedAttributes final
{
public:
	TArray<struct FGameplayAttribute>             NewAttributes;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayAttributeWidget_SetNewTrackedAttributes) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_SetNewTrackedAttributes");
static_assert(sizeof(HWGameplayAttributeWidget_SetNewTrackedAttributes) == 0x000018, "Wrong size on HWGameplayAttributeWidget_SetNewTrackedAttributes");
static_assert(offsetof(HWGameplayAttributeWidget_SetNewTrackedAttributes, NewAttributes) == 0x000000, "Member 'HWGameplayAttributeWidget_SetNewTrackedAttributes::NewAttributes' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_SetNewTrackedAttributes, bAppend) == 0x000010, "Member 'HWGameplayAttributeWidget_SetNewTrackedAttributes::bAppend' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.SetUpdateSuppressedByVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility final
{
public:
	bool                                          bShouldSuppress;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility) == 0x000001, "Wrong alignment on HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility");
static_assert(sizeof(HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility) == 0x000001, "Wrong size on HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility");
static_assert(offsetof(HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility, bShouldSuppress) == 0x000000, "Member 'HWGameplayAttributeWidget_SetUpdateSuppressedByVisibility::bShouldSuppress' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.TrackAttributes
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayAttributeWidget_TrackAttributes final
{
public:
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeWidget_TrackAttributes) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_TrackAttributes");
static_assert(sizeof(HWGameplayAttributeWidget_TrackAttributes) == 0x000008, "Wrong size on HWGameplayAttributeWidget_TrackAttributes");
static_assert(offsetof(HWGameplayAttributeWidget_TrackAttributes, ASC) == 0x000000, "Member 'HWGameplayAttributeWidget_TrackAttributes::ASC' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeWidget.GetTrackedAttributeValue
// 0x0040 (0x0040 - 0x0000)
struct HWGameplayAttributeWidget_GetTrackedAttributeValue final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameplayAttributeWidget_GetTrackedAttributeValue) == 0x000008, "Wrong alignment on HWGameplayAttributeWidget_GetTrackedAttributeValue");
static_assert(sizeof(HWGameplayAttributeWidget_GetTrackedAttributeValue) == 0x000040, "Wrong size on HWGameplayAttributeWidget_GetTrackedAttributeValue");
static_assert(offsetof(HWGameplayAttributeWidget_GetTrackedAttributeValue, Attribute) == 0x000000, "Member 'HWGameplayAttributeWidget_GetTrackedAttributeValue::Attribute' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeWidget_GetTrackedAttributeValue, ReturnValue) == 0x000038, "Member 'HWGameplayAttributeWidget_GetTrackedAttributeValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.SetFixedMaxValue
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeProgressBar_SetFixedMaxValue final
{
public:
	float                                         NewMaxValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_SetFixedMaxValue) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_SetFixedMaxValue");
static_assert(sizeof(HWGameplayAttributeProgressBar_SetFixedMaxValue) == 0x000004, "Wrong size on HWGameplayAttributeProgressBar_SetFixedMaxValue");
static_assert(offsetof(HWGameplayAttributeProgressBar_SetFixedMaxValue, NewMaxValue) == 0x000000, "Member 'HWGameplayAttributeProgressBar_SetFixedMaxValue::NewMaxValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.SetFixedMaxValueAndOffset
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset final
{
public:
	float                                         NewMaxValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset");
static_assert(sizeof(HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset) == 0x000008, "Wrong size on HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset");
static_assert(offsetof(HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset, NewMaxValue) == 0x000000, "Member 'HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset::NewMaxValue' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset, Offset) == 0x000004, "Member 'HWGameplayAttributeProgressBar_SetFixedMaxValueAndOffset::Offset' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.SetValueOffset
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeProgressBar_SetValueOffset final
{
public:
	float                                         Offset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_SetValueOffset) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_SetValueOffset");
static_assert(sizeof(HWGameplayAttributeProgressBar_SetValueOffset) == 0x000004, "Wrong size on HWGameplayAttributeProgressBar_SetValueOffset");
static_assert(offsetof(HWGameplayAttributeProgressBar_SetValueOffset, Offset) == 0x000000, "Member 'HWGameplayAttributeProgressBar_SetValueOffset::Offset' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.UpdateProgressBar
// 0x000C (0x000C - 0x0000)
struct HWGameplayAttributeProgressBar_UpdateProgressBar final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_UpdateProgressBar) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_UpdateProgressBar");
static_assert(sizeof(HWGameplayAttributeProgressBar_UpdateProgressBar) == 0x00000C, "Wrong size on HWGameplayAttributeProgressBar_UpdateProgressBar");
static_assert(offsetof(HWGameplayAttributeProgressBar_UpdateProgressBar, Percentage) == 0x000000, "Member 'HWGameplayAttributeProgressBar_UpdateProgressBar::Percentage' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeProgressBar_UpdateProgressBar, Value) == 0x000004, "Member 'HWGameplayAttributeProgressBar_UpdateProgressBar::Value' has a wrong offset!");
static_assert(offsetof(HWGameplayAttributeProgressBar_UpdateProgressBar, MaxValue) == 0x000008, "Member 'HWGameplayAttributeProgressBar_UpdateProgressBar::MaxValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.UpdateValuePerTime
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeProgressBar_UpdateValuePerTime final
{
public:
	float                                         ValuePerTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_UpdateValuePerTime) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_UpdateValuePerTime");
static_assert(sizeof(HWGameplayAttributeProgressBar_UpdateValuePerTime) == 0x000004, "Wrong size on HWGameplayAttributeProgressBar_UpdateValuePerTime");
static_assert(offsetof(HWGameplayAttributeProgressBar_UpdateValuePerTime, ValuePerTime) == 0x000000, "Member 'HWGameplayAttributeProgressBar_UpdateValuePerTime::ValuePerTime' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeProgressBar.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeProgressBar_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeProgressBar_GetMaxValue) == 0x000004, "Wrong alignment on HWGameplayAttributeProgressBar_GetMaxValue");
static_assert(sizeof(HWGameplayAttributeProgressBar_GetMaxValue) == 0x000004, "Wrong size on HWGameplayAttributeProgressBar_GetMaxValue");
static_assert(offsetof(HWGameplayAttributeProgressBar_GetMaxValue, ReturnValue) == 0x000000, "Member 'HWGameplayAttributeProgressBar_GetMaxValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsConfigAsset.GetSettingDescription
// 0x0018 (0x0018 - 0x0000)
struct HWSettingsConfigAsset_GetSettingDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsConfigAsset_GetSettingDescription) == 0x000008, "Wrong alignment on HWSettingsConfigAsset_GetSettingDescription");
static_assert(sizeof(HWSettingsConfigAsset_GetSettingDescription) == 0x000018, "Wrong size on HWSettingsConfigAsset_GetSettingDescription");
static_assert(offsetof(HWSettingsConfigAsset_GetSettingDescription, ReturnValue) == 0x000000, "Member 'HWSettingsConfigAsset_GetSettingDescription::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsConfigAsset.GetSettingName
// 0x0018 (0x0018 - 0x0000)
struct HWSettingsConfigAsset_GetSettingName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsConfigAsset_GetSettingName) == 0x000008, "Wrong alignment on HWSettingsConfigAsset_GetSettingName");
static_assert(sizeof(HWSettingsConfigAsset_GetSettingName) == 0x000018, "Wrong size on HWSettingsConfigAsset_GetSettingName");
static_assert(offsetof(HWSettingsConfigAsset_GetSettingName, ReturnValue) == 0x000000, "Member 'HWSettingsConfigAsset_GetSettingName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.ExecuteOnHovered
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsEntryWidget_ExecuteOnHovered final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_ExecuteOnHovered) == 0x000001, "Wrong alignment on HWSettingsEntryWidget_ExecuteOnHovered");
static_assert(sizeof(HWSettingsEntryWidget_ExecuteOnHovered) == 0x000001, "Wrong size on HWSettingsEntryWidget_ExecuteOnHovered");
static_assert(offsetof(HWSettingsEntryWidget_ExecuteOnHovered, IsHovered_0) == 0x000000, "Member 'HWSettingsEntryWidget_ExecuteOnHovered::IsHovered_0' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.HandleNavigateLeft
// 0x0010 (0x0010 - 0x0000)
struct HWSettingsEntryWidget_HandleNavigateLeft final
{
public:
	EUINavigation                                 Nav;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_HandleNavigateLeft) == 0x000008, "Wrong alignment on HWSettingsEntryWidget_HandleNavigateLeft");
static_assert(sizeof(HWSettingsEntryWidget_HandleNavigateLeft) == 0x000010, "Wrong size on HWSettingsEntryWidget_HandleNavigateLeft");
static_assert(offsetof(HWSettingsEntryWidget_HandleNavigateLeft, Nav) == 0x000000, "Member 'HWSettingsEntryWidget_HandleNavigateLeft::Nav' has a wrong offset!");
static_assert(offsetof(HWSettingsEntryWidget_HandleNavigateLeft, ReturnValue) == 0x000008, "Member 'HWSettingsEntryWidget_HandleNavigateLeft::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.HandleNavigateRight
// 0x0010 (0x0010 - 0x0000)
struct HWSettingsEntryWidget_HandleNavigateRight final
{
public:
	EUINavigation                                 Nav;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_HandleNavigateRight) == 0x000008, "Wrong alignment on HWSettingsEntryWidget_HandleNavigateRight");
static_assert(sizeof(HWSettingsEntryWidget_HandleNavigateRight) == 0x000010, "Wrong size on HWSettingsEntryWidget_HandleNavigateRight");
static_assert(offsetof(HWSettingsEntryWidget_HandleNavigateRight, Nav) == 0x000000, "Member 'HWSettingsEntryWidget_HandleNavigateRight::Nav' has a wrong offset!");
static_assert(offsetof(HWSettingsEntryWidget_HandleNavigateRight, ReturnValue) == 0x000008, "Member 'HWSettingsEntryWidget_HandleNavigateRight::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.IsApplied
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsEntryWidget_IsApplied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_IsApplied) == 0x000001, "Wrong alignment on HWSettingsEntryWidget_IsApplied");
static_assert(sizeof(HWSettingsEntryWidget_IsApplied) == 0x000001, "Wrong size on HWSettingsEntryWidget_IsApplied");
static_assert(offsetof(HWSettingsEntryWidget_IsApplied, ReturnValue) == 0x000000, "Member 'HWSettingsEntryWidget_IsApplied::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.IsSaved
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsEntryWidget_IsSaved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_IsSaved) == 0x000001, "Wrong alignment on HWSettingsEntryWidget_IsSaved");
static_assert(sizeof(HWSettingsEntryWidget_IsSaved) == 0x000001, "Wrong size on HWSettingsEntryWidget_IsSaved");
static_assert(offsetof(HWSettingsEntryWidget_IsSaved, ReturnValue) == 0x000000, "Member 'HWSettingsEntryWidget_IsSaved::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsEntryWidget.OnSettingsInfoValueChanged
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsEntryWidget_OnSettingsInfoValueChanged final
{
public:
	bool                                          bChangedExternally;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsEntryWidget_OnSettingsInfoValueChanged) == 0x000001, "Wrong alignment on HWSettingsEntryWidget_OnSettingsInfoValueChanged");
static_assert(sizeof(HWSettingsEntryWidget_OnSettingsInfoValueChanged) == 0x000001, "Wrong size on HWSettingsEntryWidget_OnSettingsInfoValueChanged");
static_assert(offsetof(HWSettingsEntryWidget_OnSettingsInfoValueChanged, bChangedExternally) == 0x000000, "Member 'HWSettingsEntryWidget_OnSettingsInfoValueChanged::bChangedExternally' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.AddKeyBinderCategory
// 0x0018 (0x0018 - 0x0000)
struct HWKeyBinderWidget_AddKeyBinderCategory final
{
public:
	class FText                                   InCategoryName;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_AddKeyBinderCategory) == 0x000008, "Wrong alignment on HWKeyBinderWidget_AddKeyBinderCategory");
static_assert(sizeof(HWKeyBinderWidget_AddKeyBinderCategory) == 0x000018, "Wrong size on HWKeyBinderWidget_AddKeyBinderCategory");
static_assert(offsetof(HWKeyBinderWidget_AddKeyBinderCategory, InCategoryName) == 0x000000, "Member 'HWKeyBinderWidget_AddKeyBinderCategory::InCategoryName' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.AddKeyBinderEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWKeyBinderWidget_AddKeyBinderEntryWidget final
{
public:
	class UHWKeyBinderEntryWidget*                EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_AddKeyBinderEntryWidget) == 0x000008, "Wrong alignment on HWKeyBinderWidget_AddKeyBinderEntryWidget");
static_assert(sizeof(HWKeyBinderWidget_AddKeyBinderEntryWidget) == 0x000008, "Wrong size on HWKeyBinderWidget_AddKeyBinderEntryWidget");
static_assert(offsetof(HWKeyBinderWidget_AddKeyBinderEntryWidget, EntryWidget) == 0x000000, "Member 'HWKeyBinderWidget_AddKeyBinderEntryWidget::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.DisplayMappingName
// 0x0018 (0x0018 - 0x0000)
struct HWKeyBinderWidget_DisplayMappingName final
{
public:
	class FText                                   MappingName;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_DisplayMappingName) == 0x000008, "Wrong alignment on HWKeyBinderWidget_DisplayMappingName");
static_assert(sizeof(HWKeyBinderWidget_DisplayMappingName) == 0x000018, "Wrong size on HWKeyBinderWidget_DisplayMappingName");
static_assert(offsetof(HWKeyBinderWidget_DisplayMappingName, MappingName) == 0x000000, "Member 'HWKeyBinderWidget_DisplayMappingName::MappingName' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.DisplayPresetOptions
// 0x0028 (0x0028 - 0x0000)
struct HWKeyBinderWidget_DisplayPresetOptions final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SelectedOption;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_DisplayPresetOptions) == 0x000008, "Wrong alignment on HWKeyBinderWidget_DisplayPresetOptions");
static_assert(sizeof(HWKeyBinderWidget_DisplayPresetOptions) == 0x000028, "Wrong size on HWKeyBinderWidget_DisplayPresetOptions");
static_assert(offsetof(HWKeyBinderWidget_DisplayPresetOptions, Options) == 0x000000, "Member 'HWKeyBinderWidget_DisplayPresetOptions::Options' has a wrong offset!");
static_assert(offsetof(HWKeyBinderWidget_DisplayPresetOptions, SelectedOption) == 0x000010, "Member 'HWKeyBinderWidget_DisplayPresetOptions::SelectedOption' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWKeyBinderWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWKeyBinderWidget_HandleInputStateChanged");
static_assert(sizeof(HWKeyBinderWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWKeyBinderWidget_HandleInputStateChanged");
static_assert(offsetof(HWKeyBinderWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWKeyBinderWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.SelectPreset
// 0x0010 (0x0010 - 0x0000)
struct HWKeyBinderWidget_SelectPreset final
{
public:
	class FString                                 PresetDisplayName;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_SelectPreset) == 0x000008, "Wrong alignment on HWKeyBinderWidget_SelectPreset");
static_assert(sizeof(HWKeyBinderWidget_SelectPreset) == 0x000010, "Wrong size on HWKeyBinderWidget_SelectPreset");
static_assert(offsetof(HWKeyBinderWidget_SelectPreset, PresetDisplayName) == 0x000000, "Member 'HWKeyBinderWidget_SelectPreset::PresetDisplayName' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.SetShouldCaptureKeyDowns
// 0x0002 (0x0002 - 0x0000)
struct HWKeyBinderWidget_SetShouldCaptureKeyDowns final
{
public:
	bool                                          bNewShouldCaptureKeyDowns;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCapturingGamepadKeys;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_SetShouldCaptureKeyDowns) == 0x000001, "Wrong alignment on HWKeyBinderWidget_SetShouldCaptureKeyDowns");
static_assert(sizeof(HWKeyBinderWidget_SetShouldCaptureKeyDowns) == 0x000002, "Wrong size on HWKeyBinderWidget_SetShouldCaptureKeyDowns");
static_assert(offsetof(HWKeyBinderWidget_SetShouldCaptureKeyDowns, bNewShouldCaptureKeyDowns) == 0x000000, "Member 'HWKeyBinderWidget_SetShouldCaptureKeyDowns::bNewShouldCaptureKeyDowns' has a wrong offset!");
static_assert(offsetof(HWKeyBinderWidget_SetShouldCaptureKeyDowns, bIsCapturingGamepadKeys) == 0x000001, "Member 'HWKeyBinderWidget_SetShouldCaptureKeyDowns::bIsCapturingGamepadKeys' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.UnappliedKeybindingsUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWKeyBinderWidget_UnappliedKeybindingsUpdated final
{
public:
	bool                                          bNewHasUnappliedKeybindings;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_UnappliedKeybindingsUpdated) == 0x000001, "Wrong alignment on HWKeyBinderWidget_UnappliedKeybindingsUpdated");
static_assert(sizeof(HWKeyBinderWidget_UnappliedKeybindingsUpdated) == 0x000001, "Wrong size on HWKeyBinderWidget_UnappliedKeybindingsUpdated");
static_assert(offsetof(HWKeyBinderWidget_UnappliedKeybindingsUpdated, bNewHasUnappliedKeybindings) == 0x000000, "Member 'HWKeyBinderWidget_UnappliedKeybindingsUpdated::bNewHasUnappliedKeybindings' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.GetMappingContextComponent
// 0x0008 (0x0008 - 0x0000)
struct HWKeyBinderWidget_GetMappingContextComponent final
{
public:
	class UHWMappingContextComponent*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_GetMappingContextComponent) == 0x000008, "Wrong alignment on HWKeyBinderWidget_GetMappingContextComponent");
static_assert(sizeof(HWKeyBinderWidget_GetMappingContextComponent) == 0x000008, "Wrong size on HWKeyBinderWidget_GetMappingContextComponent");
static_assert(offsetof(HWKeyBinderWidget_GetMappingContextComponent, ReturnValue) == 0x000000, "Member 'HWKeyBinderWidget_GetMappingContextComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderWidget.HasUnappliedKeybindings
// 0x0001 (0x0001 - 0x0000)
struct HWKeyBinderWidget_HasUnappliedKeybindings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderWidget_HasUnappliedKeybindings) == 0x000001, "Wrong alignment on HWKeyBinderWidget_HasUnappliedKeybindings");
static_assert(sizeof(HWKeyBinderWidget_HasUnappliedKeybindings) == 0x000001, "Wrong size on HWKeyBinderWidget_HasUnappliedKeybindings");
static_assert(offsetof(HWKeyBinderWidget_HasUnappliedKeybindings, ReturnValue) == 0x000000, "Member 'HWKeyBinderWidget_HasUnappliedKeybindings::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsPageConfigAsset.GetPageDesc
// 0x0018 (0x0018 - 0x0000)
struct HWSettingsPageConfigAsset_GetPageDesc final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsPageConfigAsset_GetPageDesc) == 0x000008, "Wrong alignment on HWSettingsPageConfigAsset_GetPageDesc");
static_assert(sizeof(HWSettingsPageConfigAsset_GetPageDesc) == 0x000018, "Wrong size on HWSettingsPageConfigAsset_GetPageDesc");
static_assert(offsetof(HWSettingsPageConfigAsset_GetPageDesc, ReturnValue) == 0x000000, "Member 'HWSettingsPageConfigAsset_GetPageDesc::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsPageConfigAsset.GetPageName
// 0x0018 (0x0018 - 0x0000)
struct HWSettingsPageConfigAsset_GetPageName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsPageConfigAsset_GetPageName) == 0x000008, "Wrong alignment on HWSettingsPageConfigAsset_GetPageName");
static_assert(sizeof(HWSettingsPageConfigAsset_GetPageName) == 0x000018, "Wrong size on HWSettingsPageConfigAsset_GetPageName");
static_assert(offsetof(HWSettingsPageConfigAsset_GetPageName, ReturnValue) == 0x000000, "Member 'HWSettingsPageConfigAsset_GetPageName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingConditionAssessor.IsDisplayConditionMet
// 0x0018 (0x0018 - 0x0000)
struct HWSettingConditionAssessor_IsDisplayConditionMet final
{
public:
	const class UHWSettingsConfigAsset*           SettingsConfigAsset;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARHHUDCommon*                     HUD;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSettingConditionAssessor_IsDisplayConditionMet) == 0x000008, "Wrong alignment on HWSettingConditionAssessor_IsDisplayConditionMet");
static_assert(sizeof(HWSettingConditionAssessor_IsDisplayConditionMet) == 0x000018, "Wrong size on HWSettingConditionAssessor_IsDisplayConditionMet");
static_assert(offsetof(HWSettingConditionAssessor_IsDisplayConditionMet, SettingsConfigAsset) == 0x000000, "Member 'HWSettingConditionAssessor_IsDisplayConditionMet::SettingsConfigAsset' has a wrong offset!");
static_assert(offsetof(HWSettingConditionAssessor_IsDisplayConditionMet, HUD) == 0x000008, "Member 'HWSettingConditionAssessor_IsDisplayConditionMet::HUD' has a wrong offset!");
static_assert(offsetof(HWSettingConditionAssessor_IsDisplayConditionMet, ReturnValue) == 0x000010, "Member 'HWSettingConditionAssessor_IsDisplayConditionMet::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.AddPurchaseQuantity
// 0x0004 (0x0004 - 0x0000)
struct HWPurchaseConfirmWidget_AddPurchaseQuantity final
{
public:
	int32                                         QuantityIncrement;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_AddPurchaseQuantity) == 0x000004, "Wrong alignment on HWPurchaseConfirmWidget_AddPurchaseQuantity");
static_assert(sizeof(HWPurchaseConfirmWidget_AddPurchaseQuantity) == 0x000004, "Wrong size on HWPurchaseConfirmWidget_AddPurchaseQuantity");
static_assert(offsetof(HWPurchaseConfirmWidget_AddPurchaseQuantity, QuantityIncrement) == 0x000000, "Member 'HWPurchaseConfirmWidget_AddPurchaseQuantity::QuantityIncrement' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.BroadcastPurchaseConfirmResult
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult final
{
public:
	EHWPurchaseConfirmResult                      Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult");
static_assert(sizeof(HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult");
static_assert(offsetof(HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult, Result) == 0x000000, "Member 'HWPurchaseConfirmWidget_BroadcastPurchaseConfirmResult::Result' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.DisplayItem
// 0x0010 (0x0010 - 0x0000)
struct HWPurchaseConfirmWidget_DisplayItem final
{
public:
	class UHWCollectionItem*                      Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPurchaseConfirmWidget_DisplayItem) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_DisplayItem");
static_assert(sizeof(HWPurchaseConfirmWidget_DisplayItem) == 0x000010, "Wrong size on HWPurchaseConfirmWidget_DisplayItem");
static_assert(offsetof(HWPurchaseConfirmWidget_DisplayItem, Item) == 0x000000, "Member 'HWPurchaseConfirmWidget_DisplayItem::Item' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_DisplayItem, Quantity) == 0x000008, "Member 'HWPurchaseConfirmWidget_DisplayItem::Quantity' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.DisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct HWPurchaseConfirmWidget_DisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_DisplayPrice) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_DisplayPrice");
static_assert(sizeof(HWPurchaseConfirmWidget_DisplayPrice) == 0x000010, "Wrong size on HWPurchaseConfirmWidget_DisplayPrice");
static_assert(offsetof(HWPurchaseConfirmWidget_DisplayPrice, PriceItem) == 0x000000, "Member 'HWPurchaseConfirmWidget_DisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_DisplayPrice, PriceGroup) == 0x000008, "Member 'HWPurchaseConfirmWidget_DisplayPrice::PriceGroup' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_HandleInputStateChanged");
static_assert(sizeof(HWPurchaseConfirmWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_HandleInputStateChanged");
static_assert(offsetof(HWPurchaseConfirmWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWPurchaseConfirmWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.HandlePurchaseConfirmResultUpdate
// 0x00B8 (0x00B8 - 0x0000)
struct HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate final
{
public:
	struct FEventReply                            ReturnValue;                                       // 0x0000(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate");
static_assert(sizeof(HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate) == 0x0000B8, "Wrong size on HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate");
static_assert(offsetof(HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_HandlePurchaseConfirmResultUpdate::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.OnDisplayUpsellItem
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_OnDisplayUpsellItem final
{
public:
	const class UHWCollectionItem*                UpsellItem;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_OnDisplayUpsellItem) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_OnDisplayUpsellItem");
static_assert(sizeof(HWPurchaseConfirmWidget_OnDisplayUpsellItem) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_OnDisplayUpsellItem");
static_assert(offsetof(HWPurchaseConfirmWidget_OnDisplayUpsellItem, UpsellItem) == 0x000000, "Member 'HWPurchaseConfirmWidget_OnDisplayUpsellItem::UpsellItem' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.OnPurchasePossibleRequestResponse
// 0x0010 (0x0010 - 0x0000)
struct HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse");
static_assert(sizeof(HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse) == 0x000010, "Wrong size on HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse");
static_assert(offsetof(HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse, bSuccess) == 0x000000, "Member 'HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse, PriceItem) == 0x000008, "Member 'HWPurchaseConfirmWidget_OnPurchasePossibleRequestResponse::PriceItem' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.OnPurchaseRequestResponse
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_OnPurchaseRequestResponse final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_OnPurchaseRequestResponse) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_OnPurchaseRequestResponse");
static_assert(sizeof(HWPurchaseConfirmWidget_OnPurchaseRequestResponse) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_OnPurchaseRequestResponse");
static_assert(offsetof(HWPurchaseConfirmWidget_OnPurchaseRequestResponse, bSuccess) == 0x000000, "Member 'HWPurchaseConfirmWidget_OnPurchaseRequestResponse::bSuccess' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.OpenCurrencyPurchaseScreen
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen");
static_assert(sizeof(HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen");
static_assert(offsetof(HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen, PriceItem) == 0x000000, "Member 'HWPurchaseConfirmWidget_OpenCurrencyPurchaseScreen::PriceItem' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.RequestPurchase
// 0x001C (0x001C - 0x0000)
struct HWPurchaseConfirmWidget_RequestPurchase final
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrencyId;                                        // 0x0004(0x0014)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_RequestPurchase) == 0x000004, "Wrong alignment on HWPurchaseConfirmWidget_RequestPurchase");
static_assert(sizeof(HWPurchaseConfirmWidget_RequestPurchase) == 0x00001C, "Wrong size on HWPurchaseConfirmWidget_RequestPurchase");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchase, CurrencyType) == 0x000000, "Member 'HWPurchaseConfirmWidget_RequestPurchase::CurrencyType' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchase, CurrencyId) == 0x000004, "Member 'HWPurchaseConfirmWidget_RequestPurchase::CurrencyId' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchase, Quantity) == 0x000018, "Member 'HWPurchaseConfirmWidget_RequestPurchase::Quantity' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.RequestPurchasePossible
// 0x001C (0x001C - 0x0000)
struct HWPurchaseConfirmWidget_RequestPurchasePossible final
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrencyId;                                        // 0x0004(0x0014)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_RequestPurchasePossible) == 0x000004, "Wrong alignment on HWPurchaseConfirmWidget_RequestPurchasePossible");
static_assert(sizeof(HWPurchaseConfirmWidget_RequestPurchasePossible) == 0x00001C, "Wrong size on HWPurchaseConfirmWidget_RequestPurchasePossible");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchasePossible, CurrencyType) == 0x000000, "Member 'HWPurchaseConfirmWidget_RequestPurchasePossible::CurrencyType' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchasePossible, CurrencyId) == 0x000004, "Member 'HWPurchaseConfirmWidget_RequestPurchasePossible::CurrencyId' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_RequestPurchasePossible, Quantity) == 0x000018, "Member 'HWPurchaseConfirmWidget_RequestPurchasePossible::Quantity' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.UpdatePurchaseQuantityDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay final
{
public:
	int32                                         NewQuantity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalItemQuantity;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay) == 0x000004, "Wrong alignment on HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay");
static_assert(sizeof(HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay");
static_assert(offsetof(HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay, NewQuantity) == 0x000000, "Member 'HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay::NewQuantity' has a wrong offset!");
static_assert(offsetof(HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay, TotalItemQuantity) == 0x000004, "Member 'HWPurchaseConfirmWidget_UpdatePurchaseQuantityDisplay::TotalItemQuantity' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.CanChangePurchaseQuantity
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_CanChangePurchaseQuantity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_CanChangePurchaseQuantity) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_CanChangePurchaseQuantity");
static_assert(sizeof(HWPurchaseConfirmWidget_CanChangePurchaseQuantity) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_CanChangePurchaseQuantity");
static_assert(offsetof(HWPurchaseConfirmWidget_CanChangePurchaseQuantity, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_CanChangePurchaseQuantity::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.GetCollectionItem
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_GetCollectionItem final
{
public:
	class UHWCollectionItem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_GetCollectionItem) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_GetCollectionItem");
static_assert(sizeof(HWPurchaseConfirmWidget_GetCollectionItem) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_GetCollectionItem");
static_assert(offsetof(HWPurchaseConfirmWidget_GetCollectionItem, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_GetCollectionItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.GetCollectionType
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_GetCollectionType final
{
public:
	EHWCollectionItemType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_GetCollectionType) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_GetCollectionType");
static_assert(sizeof(HWPurchaseConfirmWidget_GetCollectionType) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_GetCollectionType");
static_assert(offsetof(HWPurchaseConfirmWidget_GetCollectionType, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_GetCollectionType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.GetItemAcquireQuantity
// 0x0004 (0x0004 - 0x0000)
struct HWPurchaseConfirmWidget_GetItemAcquireQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_GetItemAcquireQuantity) == 0x000004, "Wrong alignment on HWPurchaseConfirmWidget_GetItemAcquireQuantity");
static_assert(sizeof(HWPurchaseConfirmWidget_GetItemAcquireQuantity) == 0x000004, "Wrong size on HWPurchaseConfirmWidget_GetItemAcquireQuantity");
static_assert(offsetof(HWPurchaseConfirmWidget_GetItemAcquireQuantity, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_GetItemAcquireQuantity::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.GetStoreItem
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_GetStoreItem final
{
public:
	class URHStoreItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_GetStoreItem) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_GetStoreItem");
static_assert(sizeof(HWPurchaseConfirmWidget_GetStoreItem) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_GetStoreItem");
static_assert(offsetof(HWPurchaseConfirmWidget_GetStoreItem, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_GetStoreItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.GetUpsellPurchaseConfirmWidget
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget final
{
public:
	class UHWPurchaseConfirmWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget");
static_assert(sizeof(HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget) == 0x000008, "Wrong size on HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget");
static_assert(offsetof(HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_GetUpsellPurchaseConfirmWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidget.IsPriceReductionPurchase
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidget_IsPriceReductionPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidget_IsPriceReductionPurchase) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidget_IsPriceReductionPurchase");
static_assert(sizeof(HWPurchaseConfirmWidget_IsPriceReductionPurchase) == 0x000001, "Wrong size on HWPurchaseConfirmWidget_IsPriceReductionPurchase");
static_assert(offsetof(HWPurchaseConfirmWidget_IsPriceReductionPurchase, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidget_IsPriceReductionPurchase::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAscensionPassPurchaseConfirmWidget.UpdatedRouteData
// 0x0008 (0x0008 - 0x0000)
struct HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData final
{
public:
	const class UHWAscensionPassPurchaseConfirmRouteData* Data;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData) == 0x000008, "Wrong alignment on HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData");
static_assert(sizeof(HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData) == 0x000008, "Wrong size on HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData");
static_assert(offsetof(HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData, Data) == 0x000000, "Member 'HWAscensionPassPurchaseConfirmWidget_UpdatedRouteData::Data' has a wrong offset!");

// Function HemingwayUI.HWAscensionPassPurchaseConfirmWidget.UpdateFoundersUpsell
// 0x0001 (0x0001 - 0x0000)
struct HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell final
{
public:
	bool                                          bShouldShowUpsell;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell) == 0x000001, "Wrong alignment on HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell");
static_assert(sizeof(HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell) == 0x000001, "Wrong size on HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell");
static_assert(offsetof(HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell, bShouldShowUpsell) == 0x000000, "Member 'HWAscensionPassPurchaseConfirmWidget_UpdateFoundersUpsell::bShouldShowUpsell' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.PipWidgetAdded
// 0x0010 (0x0010 - 0x0000)
struct HWEquipmentLevelBarWidget_PipWidgetAdded final
{
public:
	class UHWImage*                               Pip;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEquipmentLevelBarWidget_PipWidgetAdded) == 0x000008, "Wrong alignment on HWEquipmentLevelBarWidget_PipWidgetAdded");
static_assert(sizeof(HWEquipmentLevelBarWidget_PipWidgetAdded) == 0x000010, "Wrong size on HWEquipmentLevelBarWidget_PipWidgetAdded");
static_assert(offsetof(HWEquipmentLevelBarWidget_PipWidgetAdded, Pip) == 0x000000, "Member 'HWEquipmentLevelBarWidget_PipWidgetAdded::Pip' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarWidget_PipWidgetAdded, Level) == 0x000008, "Member 'HWEquipmentLevelBarWidget_PipWidgetAdded::Level' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.PipWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelBarWidget_PipWidgetRemoved final
{
public:
	class UHWImage*                               Pip;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_PipWidgetRemoved) == 0x000008, "Wrong alignment on HWEquipmentLevelBarWidget_PipWidgetRemoved");
static_assert(sizeof(HWEquipmentLevelBarWidget_PipWidgetRemoved) == 0x000008, "Wrong size on HWEquipmentLevelBarWidget_PipWidgetRemoved");
static_assert(offsetof(HWEquipmentLevelBarWidget_PipWidgetRemoved, Pip) == 0x000000, "Member 'HWEquipmentLevelBarWidget_PipWidgetRemoved::Pip' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.SetCurrentAndMaxLevel
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel final
{
public:
	int32                                         InCurrentLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMaxLevel;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel) == 0x000008, "Wrong size on HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel, InCurrentLevel) == 0x000000, "Member 'HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel::InCurrentLevel' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel, InMaxLevel) == 0x000004, "Member 'HWEquipmentLevelBarWidget_SetCurrentAndMaxLevel::InMaxLevel' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.SetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct HWEquipmentLevelBarWidget_SetCurrentLevel final
{
public:
	int32                                         InCurrentLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_SetCurrentLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_SetCurrentLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_SetCurrentLevel) == 0x000004, "Wrong size on HWEquipmentLevelBarWidget_SetCurrentLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetCurrentLevel, InCurrentLevel) == 0x000000, "Member 'HWEquipmentLevelBarWidget_SetCurrentLevel::InCurrentLevel' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.SetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct HWEquipmentLevelBarWidget_SetMaxLevel final
{
public:
	int32                                         InMaxLevel;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_SetMaxLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_SetMaxLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_SetMaxLevel) == 0x000004, "Wrong size on HWEquipmentLevelBarWidget_SetMaxLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetMaxLevel, InMaxLevel) == 0x000000, "Member 'HWEquipmentLevelBarWidget_SetMaxLevel::InMaxLevel' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.SetPipColor
// 0x000C (0x000C - 0x0000)
struct HWEquipmentLevelBarWidget_SetPipColor final
{
public:
	int32                                         PipLevel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ColorTag;                                          // 0x0004(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_SetPipColor) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_SetPipColor");
static_assert(sizeof(HWEquipmentLevelBarWidget_SetPipColor) == 0x00000C, "Wrong size on HWEquipmentLevelBarWidget_SetPipColor");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetPipColor, PipLevel) == 0x000000, "Member 'HWEquipmentLevelBarWidget_SetPipColor::PipLevel' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetPipColor, ColorTag) == 0x000004, "Member 'HWEquipmentLevelBarWidget_SetPipColor::ColorTag' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.SetPipColors
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelBarWidget_SetPipColors final
{
public:
	struct FGameplayTag                           ColorTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_SetPipColors) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_SetPipColors");
static_assert(sizeof(HWEquipmentLevelBarWidget_SetPipColors) == 0x000008, "Wrong size on HWEquipmentLevelBarWidget_SetPipColors");
static_assert(offsetof(HWEquipmentLevelBarWidget_SetPipColors, ColorTag) == 0x000000, "Member 'HWEquipmentLevelBarWidget_SetPipColors::ColorTag' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.GetCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct HWEquipmentLevelBarWidget_GetCurrentLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_GetCurrentLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_GetCurrentLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_GetCurrentLevel) == 0x000004, "Wrong size on HWEquipmentLevelBarWidget_GetCurrentLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_GetCurrentLevel, ReturnValue) == 0x000000, "Member 'HWEquipmentLevelBarWidget_GetCurrentLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.GetMaxLevel
// 0x0004 (0x0004 - 0x0000)
struct HWEquipmentLevelBarWidget_GetMaxLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_GetMaxLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_GetMaxLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_GetMaxLevel) == 0x000004, "Wrong size on HWEquipmentLevelBarWidget_GetMaxLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_GetMaxLevel, ReturnValue) == 0x000000, "Member 'HWEquipmentLevelBarWidget_GetMaxLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarWidget.GetStartingLevel
// 0x0004 (0x0004 - 0x0000)
struct HWEquipmentLevelBarWidget_GetStartingLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarWidget_GetStartingLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarWidget_GetStartingLevel");
static_assert(sizeof(HWEquipmentLevelBarWidget_GetStartingLevel) == 0x000004, "Wrong size on HWEquipmentLevelBarWidget_GetStartingLevel");
static_assert(offsetof(HWEquipmentLevelBarWidget_GetStartingLevel, ReturnValue) == 0x000000, "Member 'HWEquipmentLevelBarWidget_GetStartingLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarCustomWidget.SetCurrentLevelWithPipOverride
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride final
{
public:
	int32                                         InCurrentLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPipConfigIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride) == 0x000004, "Wrong alignment on HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride");
static_assert(sizeof(HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride) == 0x000008, "Wrong size on HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride, InCurrentLevel) == 0x000000, "Member 'HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride::InCurrentLevel' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride, CustomPipConfigIndex) == 0x000004, "Member 'HWEquipmentLevelBarCustomWidget_SetCurrentLevelWithPipOverride::CustomPipConfigIndex' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarCustomWidget.SetOverrideConfigToPip
// 0x0010 (0x0010 - 0x0000)
struct HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip final
{
public:
	class UHWImage*                               Pip;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPipConfigIndex;                              // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip) == 0x000008, "Wrong alignment on HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip");
static_assert(sizeof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip) == 0x000010, "Wrong size on HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip, Pip) == 0x000000, "Member 'HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip::Pip' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip, CustomPipConfigIndex) == 0x000008, "Member 'HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPip::CustomPipConfigIndex' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelBarCustomWidget.SetOverrideConfigToPipLevel
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel final
{
public:
	int32                                         PipLevel;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomPipConfigIndex;                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel) == 0x000004, "Wrong alignment on HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel");
static_assert(sizeof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel) == 0x000008, "Wrong size on HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel, PipLevel) == 0x000000, "Member 'HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel::PipLevel' has a wrong offset!");
static_assert(offsetof(HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel, CustomPipConfigIndex) == 0x000004, "Member 'HWEquipmentLevelBarCustomWidget_SetOverrideConfigToPipLevel::CustomPipConfigIndex' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIInputHandler.ProcessViewInput
// 0x00C8 (0x00C8 - 0x0000)
struct HWInterface_UIInputHandler_ProcessViewInput final
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            ReturnValue;                                       // 0x0010(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIInputHandler_ProcessViewInput) == 0x000008, "Wrong alignment on HWInterface_UIInputHandler_ProcessViewInput");
static_assert(sizeof(HWInterface_UIInputHandler_ProcessViewInput) == 0x0000C8, "Wrong size on HWInterface_UIInputHandler_ProcessViewInput");
static_assert(offsetof(HWInterface_UIInputHandler_ProcessViewInput, InputTag) == 0x000000, "Member 'HWInterface_UIInputHandler_ProcessViewInput::InputTag' has a wrong offset!");
static_assert(offsetof(HWInterface_UIInputHandler_ProcessViewInput, TriggerEvent) == 0x000008, "Member 'HWInterface_UIInputHandler_ProcessViewInput::TriggerEvent' has a wrong offset!");
static_assert(offsetof(HWInterface_UIInputHandler_ProcessViewInput, ReturnValue) == 0x000010, "Member 'HWInterface_UIInputHandler_ProcessViewInput::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIInputHandler.GetCustomInputMappingContext
// 0x0010 (0x0010 - 0x0000)
struct HWInterface_UIInputHandler_GetCustomInputMappingContext final
{
public:
	int32                                         MappingContextPriority;                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIInputHandler_GetCustomInputMappingContext) == 0x000008, "Wrong alignment on HWInterface_UIInputHandler_GetCustomInputMappingContext");
static_assert(sizeof(HWInterface_UIInputHandler_GetCustomInputMappingContext) == 0x000010, "Wrong size on HWInterface_UIInputHandler_GetCustomInputMappingContext");
static_assert(offsetof(HWInterface_UIInputHandler_GetCustomInputMappingContext, MappingContextPriority) == 0x000000, "Member 'HWInterface_UIInputHandler_GetCustomInputMappingContext::MappingContextPriority' has a wrong offset!");
static_assert(offsetof(HWInterface_UIInputHandler_GetCustomInputMappingContext, ReturnValue) == 0x000008, "Member 'HWInterface_UIInputHandler_GetCustomInputMappingContext::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIInputHandler.IsExclusive
// 0x0001 (0x0001 - 0x0000)
struct HWInterface_UIInputHandler_IsExclusive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIInputHandler_IsExclusive) == 0x000001, "Wrong alignment on HWInterface_UIInputHandler_IsExclusive");
static_assert(sizeof(HWInterface_UIInputHandler_IsExclusive) == 0x000001, "Wrong size on HWInterface_UIInputHandler_IsExclusive");
static_assert(offsetof(HWInterface_UIInputHandler_IsExclusive, ReturnValue) == 0x000000, "Member 'HWInterface_UIInputHandler_IsExclusive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIInputHandler.ShouldOverrideAllowedInputCategories
// 0x0002 (0x0002 - 0x0000)
struct HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories final
{
public:
	EHWAllowedInputCategory                       OutAllowedInputCategories;                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories) == 0x000001, "Wrong alignment on HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories");
static_assert(sizeof(HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories) == 0x000002, "Wrong size on HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories");
static_assert(offsetof(HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories, OutAllowedInputCategories) == 0x000000, "Member 'HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories::OutAllowedInputCategories' has a wrong offset!");
static_assert(offsetof(HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories, ReturnValue) == 0x000001, "Member 'HWInterface_UIInputHandler_ShouldOverrideAllowedInputCategories::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIInputHandler.ShouldOverrideAnalogNavigationEnabled
// 0x0002 (0x0002 - 0x0000)
struct HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled final
{
public:
	bool                                          bOutAnalogNavigationEnabled;                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled) == 0x000001, "Wrong alignment on HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled");
static_assert(sizeof(HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled) == 0x000002, "Wrong size on HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled");
static_assert(offsetof(HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled, bOutAnalogNavigationEnabled) == 0x000000, "Member 'HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled::bOutAnalogNavigationEnabled' has a wrong offset!");
static_assert(offsetof(HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled, ReturnValue) == 0x000001, "Member 'HWInterface_UIInputHandler_ShouldOverrideAnalogNavigationEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.HandleSelectedTabChanged
// 0x0010 (0x0010 - 0x0000)
struct HWTabScreen_HandleSelectedTabChanged final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabScreen_HandleSelectedTabChanged) == 0x000008, "Wrong alignment on HWTabScreen_HandleSelectedTabChanged");
static_assert(sizeof(HWTabScreen_HandleSelectedTabChanged) == 0x000010, "Wrong size on HWTabScreen_HandleSelectedTabChanged");
static_assert(offsetof(HWTabScreen_HandleSelectedTabChanged, TabBarWidget) == 0x000000, "Member 'HWTabScreen_HandleSelectedTabChanged::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWTabScreen_HandleSelectedTabChanged, TabIndex) == 0x000008, "Member 'HWTabScreen_HandleSelectedTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabScreen_HandleSelectedTabChanged, Cause) == 0x00000C, "Member 'HWTabScreen_HandleSelectedTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.OnContextMenuVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_OnContextMenuVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_OnContextMenuVisibilityChanged) == 0x000001, "Wrong alignment on HWTabScreen_OnContextMenuVisibilityChanged");
static_assert(sizeof(HWTabScreen_OnContextMenuVisibilityChanged) == 0x000001, "Wrong size on HWTabScreen_OnContextMenuVisibilityChanged");
static_assert(offsetof(HWTabScreen_OnContextMenuVisibilityChanged, bVisible) == 0x000000, "Member 'HWTabScreen_OnContextMenuVisibilityChanged::bVisible' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.OnEnableFullNavigationUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_OnEnableFullNavigationUpdated final
{
public:
	bool                                          bFullNavigationEnabled;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_OnEnableFullNavigationUpdated) == 0x000001, "Wrong alignment on HWTabScreen_OnEnableFullNavigationUpdated");
static_assert(sizeof(HWTabScreen_OnEnableFullNavigationUpdated) == 0x000001, "Wrong size on HWTabScreen_OnEnableFullNavigationUpdated");
static_assert(offsetof(HWTabScreen_OnEnableFullNavigationUpdated, bFullNavigationEnabled) == 0x000000, "Member 'HWTabScreen_OnEnableFullNavigationUpdated::bFullNavigationEnabled' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.OnGodWidgetVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_OnGodWidgetVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_OnGodWidgetVisibilityChanged) == 0x000001, "Wrong alignment on HWTabScreen_OnGodWidgetVisibilityChanged");
static_assert(sizeof(HWTabScreen_OnGodWidgetVisibilityChanged) == 0x000001, "Wrong size on HWTabScreen_OnGodWidgetVisibilityChanged");
static_assert(offsetof(HWTabScreen_OnGodWidgetVisibilityChanged, bVisible) == 0x000000, "Member 'HWTabScreen_OnGodWidgetVisibilityChanged::bVisible' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.OnReportPlayerMenuVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_OnReportPlayerMenuVisibilityChanged final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_OnReportPlayerMenuVisibilityChanged) == 0x000001, "Wrong alignment on HWTabScreen_OnReportPlayerMenuVisibilityChanged");
static_assert(sizeof(HWTabScreen_OnReportPlayerMenuVisibilityChanged) == 0x000001, "Wrong size on HWTabScreen_OnReportPlayerMenuVisibilityChanged");
static_assert(offsetof(HWTabScreen_OnReportPlayerMenuVisibilityChanged, bVisible) == 0x000000, "Member 'HWTabScreen_OnReportPlayerMenuVisibilityChanged::bVisible' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.OnSelectedTabChanged
// 0x0008 (0x0008 - 0x0000)
struct HWTabScreen_OnSelectedTabChanged final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabScreen_OnSelectedTabChanged) == 0x000004, "Wrong alignment on HWTabScreen_OnSelectedTabChanged");
static_assert(sizeof(HWTabScreen_OnSelectedTabChanged) == 0x000008, "Wrong size on HWTabScreen_OnSelectedTabChanged");
static_assert(offsetof(HWTabScreen_OnSelectedTabChanged, TabIndex) == 0x000000, "Member 'HWTabScreen_OnSelectedTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabScreen_OnSelectedTabChanged, Cause) == 0x000004, "Member 'HWTabScreen_OnSelectedTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.SetEnableFullNavigation
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_SetEnableFullNavigation final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_SetEnableFullNavigation) == 0x000001, "Wrong alignment on HWTabScreen_SetEnableFullNavigation");
static_assert(sizeof(HWTabScreen_SetEnableFullNavigation) == 0x000001, "Wrong size on HWTabScreen_SetEnableFullNavigation");
static_assert(offsetof(HWTabScreen_SetEnableFullNavigation, bInEnabled) == 0x000000, "Member 'HWTabScreen_SetEnableFullNavigation::bInEnabled' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.GetTabBarWidget
// 0x0008 (0x0008 - 0x0000)
struct HWTabScreen_GetTabBarWidget final
{
public:
	class UHWTabBarWidget*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_GetTabBarWidget) == 0x000008, "Wrong alignment on HWTabScreen_GetTabBarWidget");
static_assert(sizeof(HWTabScreen_GetTabBarWidget) == 0x000008, "Wrong size on HWTabScreen_GetTabBarWidget");
static_assert(offsetof(HWTabScreen_GetTabBarWidget, ReturnValue) == 0x000000, "Member 'HWTabScreen_GetTabBarWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.IsContextMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_IsContextMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_IsContextMenuVisible) == 0x000001, "Wrong alignment on HWTabScreen_IsContextMenuVisible");
static_assert(sizeof(HWTabScreen_IsContextMenuVisible) == 0x000001, "Wrong size on HWTabScreen_IsContextMenuVisible");
static_assert(offsetof(HWTabScreen_IsContextMenuVisible, ReturnValue) == 0x000000, "Member 'HWTabScreen_IsContextMenuVisible::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.IsFullNavigationEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_IsFullNavigationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_IsFullNavigationEnabled) == 0x000001, "Wrong alignment on HWTabScreen_IsFullNavigationEnabled");
static_assert(sizeof(HWTabScreen_IsFullNavigationEnabled) == 0x000001, "Wrong size on HWTabScreen_IsFullNavigationEnabled");
static_assert(offsetof(HWTabScreen_IsFullNavigationEnabled, ReturnValue) == 0x000000, "Member 'HWTabScreen_IsFullNavigationEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabScreen.IsReportMenuVisible
// 0x0001 (0x0001 - 0x0000)
struct HWTabScreen_IsReportMenuVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabScreen_IsReportMenuVisible) == 0x000001, "Wrong alignment on HWTabScreen_IsReportMenuVisible");
static_assert(sizeof(HWTabScreen_IsReportMenuVisible) == 0x000001, "Wrong size on HWTabScreen_IsReportMenuVisible");
static_assert(offsetof(HWTabScreen_IsReportMenuVisible, ReturnValue) == 0x000000, "Member 'HWTabScreen_IsReportMenuVisible::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTopStatsTeamWidget.HandleTeamStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamStatsTracker*                    StatsTracker;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated");
static_assert(sizeof(HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated) == 0x000010, "Wrong size on HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated, TeamState) == 0x000000, "Member 'HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated::TeamState' has a wrong offset!");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated, StatsTracker) == 0x000008, "Member 'HWTopStatsTeamWidget_HandleTeamStatsTrackerReplicated::StatsTracker' has a wrong offset!");

// Function HemingwayUI.HWTopStatsTeamWidget.HandleTopStatUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWTopStatsTeamWidget_HandleTopStatUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StatTag_0;                                         // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         PlayerState;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsTeamWidget_HandleTopStatUpdated) == 0x000008, "Wrong alignment on HWTopStatsTeamWidget_HandleTopStatUpdated");
static_assert(sizeof(HWTopStatsTeamWidget_HandleTopStatUpdated) == 0x000018, "Wrong size on HWTopStatsTeamWidget_HandleTopStatUpdated");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTopStatUpdated, TeamState) == 0x000000, "Member 'HWTopStatsTeamWidget_HandleTopStatUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTopStatUpdated, StatTag_0) == 0x000008, "Member 'HWTopStatsTeamWidget_HandleTopStatUpdated::StatTag_0' has a wrong offset!");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTopStatUpdated, PlayerState) == 0x000010, "Member 'HWTopStatsTeamWidget_HandleTopStatUpdated::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWTopStatsTeamWidget.HandleTrackedStatSet
// 0x0008 (0x0008 - 0x0000)
struct HWTopStatsTeamWidget_HandleTrackedStatSet final
{
public:
	struct FGameplayTag                           NewStatTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsTeamWidget_HandleTrackedStatSet) == 0x000004, "Wrong alignment on HWTopStatsTeamWidget_HandleTrackedStatSet");
static_assert(sizeof(HWTopStatsTeamWidget_HandleTrackedStatSet) == 0x000008, "Wrong size on HWTopStatsTeamWidget_HandleTrackedStatSet");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTrackedStatSet, NewStatTag) == 0x000000, "Member 'HWTopStatsTeamWidget_HandleTrackedStatSet::NewStatTag' has a wrong offset!");

// Function HemingwayUI.HWTopStatsTeamWidget.HandleTrackedTeamAdded
// 0x0008 (0x0008 - 0x0000)
struct HWTopStatsTeamWidget_HandleTrackedTeamAdded final
{
public:
	class AHWTeamState*                           NewTeamState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsTeamWidget_HandleTrackedTeamAdded) == 0x000008, "Wrong alignment on HWTopStatsTeamWidget_HandleTrackedTeamAdded");
static_assert(sizeof(HWTopStatsTeamWidget_HandleTrackedTeamAdded) == 0x000008, "Wrong size on HWTopStatsTeamWidget_HandleTrackedTeamAdded");
static_assert(offsetof(HWTopStatsTeamWidget_HandleTrackedTeamAdded, NewTeamState) == 0x000000, "Member 'HWTopStatsTeamWidget_HandleTrackedTeamAdded::NewTeamState' has a wrong offset!");

// Function HemingwayUI.HWTopStatsTeamWidget.GetTrackedTeam
// 0x0010 (0x0010 - 0x0000)
struct HWTopStatsTeamWidget_GetTrackedTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsTeamWidget_GetTrackedTeam) == 0x000008, "Wrong alignment on HWTopStatsTeamWidget_GetTrackedTeam");
static_assert(sizeof(HWTopStatsTeamWidget_GetTrackedTeam) == 0x000010, "Wrong size on HWTopStatsTeamWidget_GetTrackedTeam");
static_assert(offsetof(HWTopStatsTeamWidget_GetTrackedTeam, TeamId) == 0x000000, "Member 'HWTopStatsTeamWidget_GetTrackedTeam::TeamId' has a wrong offset!");
static_assert(offsetof(HWTopStatsTeamWidget_GetTrackedTeam, ReturnValue) == 0x000008, "Member 'HWTopStatsTeamWidget_GetTrackedTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTopStatsWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWTopStatsWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWTopStatsWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWTopStatsWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWTopStatsWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWTopStatsWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWTopStatsWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWTopStatsWidget.SetIsTopStatsOpened
// 0x0001 (0x0001 - 0x0000)
struct HWTopStatsWidget_SetIsTopStatsOpened final
{
public:
	bool                                          bInIsOpened;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTopStatsWidget_SetIsTopStatsOpened) == 0x000001, "Wrong alignment on HWTopStatsWidget_SetIsTopStatsOpened");
static_assert(sizeof(HWTopStatsWidget_SetIsTopStatsOpened) == 0x000001, "Wrong size on HWTopStatsWidget_SetIsTopStatsOpened");
static_assert(offsetof(HWTopStatsWidget_SetIsTopStatsOpened, bInIsOpened) == 0x000000, "Member 'HWTopStatsWidget_SetIsTopStatsOpened::bInIsOpened' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptBaseWidget.SetDisplayInfoData
// 0x0008 (0x0008 - 0x0000)
struct HWAbilityPromptBaseWidget_SetDisplayInfoData final
{
public:
	class UHWDisplayInfoData*                     DisplayInfoData;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptBaseWidget_SetDisplayInfoData) == 0x000008, "Wrong alignment on HWAbilityPromptBaseWidget_SetDisplayInfoData");
static_assert(sizeof(HWAbilityPromptBaseWidget_SetDisplayInfoData) == 0x000008, "Wrong size on HWAbilityPromptBaseWidget_SetDisplayInfoData");
static_assert(offsetof(HWAbilityPromptBaseWidget_SetDisplayInfoData, DisplayInfoData) == 0x000000, "Member 'HWAbilityPromptBaseWidget_SetDisplayInfoData::DisplayInfoData' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptBaseWidget.GetAssociatedActor
// 0x0008 (0x0008 - 0x0000)
struct HWAbilityPromptBaseWidget_GetAssociatedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptBaseWidget_GetAssociatedActor) == 0x000008, "Wrong alignment on HWAbilityPromptBaseWidget_GetAssociatedActor");
static_assert(sizeof(HWAbilityPromptBaseWidget_GetAssociatedActor) == 0x000008, "Wrong size on HWAbilityPromptBaseWidget_GetAssociatedActor");
static_assert(offsetof(HWAbilityPromptBaseWidget_GetAssociatedActor, ReturnValue) == 0x000000, "Member 'HWAbilityPromptBaseWidget_GetAssociatedActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialWidget.HandleRadialMenuEntryHovered
// 0x0050 (0x0050 - 0x0000)
struct HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered) == 0x000008, "Wrong alignment on HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered");
static_assert(sizeof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered) == 0x000050, "Wrong size on HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered, EntryWidget) == 0x000000, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered, EntryData) == 0x000008, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntryHovered::EntryData' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialWidget.HandleRadialMenuEntrySelected
// 0x0050 (0x0050 - 0x0000)
struct HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected) == 0x000008, "Wrong alignment on HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected");
static_assert(sizeof(HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected) == 0x000050, "Wrong size on HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected, EntryWidget) == 0x000000, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected, EntryData) == 0x000008, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntrySelected::EntryData' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialWidget.HandleRadialMenuEntryUnhovered
// 0x0050 (0x0050 - 0x0000)
struct HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered) == 0x000008, "Wrong alignment on HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered");
static_assert(sizeof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered) == 0x000050, "Wrong size on HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered, EntryData) == 0x000008, "Member 'HWAbilityPromptRadialWidget_HandleRadialMenuEntryUnhovered::EntryData' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.HandlePlayerStateReceivedRoleSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult) == 0x000008, "Wrong alignment on HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult");
static_assert(sizeof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult) == 0x000018, "Wrong size on HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult");
static_assert(offsetof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult, TargetPlayerState) == 0x000008, "Member 'HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult, TradeResult) == 0x000010, "Member 'HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult, TimerId) == 0x000011, "Member 'HWTradePopupEntryWidget_HandlePlayerStateReceivedRoleSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWTradePopupEntryWidget_SetPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_SetPlayerState) == 0x000008, "Wrong alignment on HWTradePopupEntryWidget_SetPlayerState");
static_assert(sizeof(HWTradePopupEntryWidget_SetPlayerState) == 0x000008, "Wrong size on HWTradePopupEntryWidget_SetPlayerState");
static_assert(offsetof(HWTradePopupEntryWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'HWTradePopupEntryWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.CanLocalPlayerClaimEntry
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupEntryWidget_CanLocalPlayerClaimEntry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_CanLocalPlayerClaimEntry) == 0x000001, "Wrong alignment on HWTradePopupEntryWidget_CanLocalPlayerClaimEntry");
static_assert(sizeof(HWTradePopupEntryWidget_CanLocalPlayerClaimEntry) == 0x000001, "Wrong size on HWTradePopupEntryWidget_CanLocalPlayerClaimEntry");
static_assert(offsetof(HWTradePopupEntryWidget_CanLocalPlayerClaimEntry, ReturnValue) == 0x000000, "Member 'HWTradePopupEntryWidget_CanLocalPlayerClaimEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.GetEntryRole
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupEntryWidget_GetEntryRole final
{
public:
	ECharacterRole                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_GetEntryRole) == 0x000001, "Wrong alignment on HWTradePopupEntryWidget_GetEntryRole");
static_assert(sizeof(HWTradePopupEntryWidget_GetEntryRole) == 0x000001, "Wrong size on HWTradePopupEntryWidget_GetEntryRole");
static_assert(offsetof(HWTradePopupEntryWidget_GetEntryRole, ReturnValue) == 0x000000, "Member 'HWTradePopupEntryWidget_GetEntryRole::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupEntryWidget_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_GetPlayerName) == 0x000008, "Wrong alignment on HWTradePopupEntryWidget_GetPlayerName");
static_assert(sizeof(HWTradePopupEntryWidget_GetPlayerName) == 0x000010, "Wrong size on HWTradePopupEntryWidget_GetPlayerName");
static_assert(offsetof(HWTradePopupEntryWidget_GetPlayerName, ReturnValue) == 0x000000, "Member 'HWTradePopupEntryWidget_GetPlayerName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWTradePopupEntryWidget_GetPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_GetPlayerState) == 0x000008, "Wrong alignment on HWTradePopupEntryWidget_GetPlayerState");
static_assert(sizeof(HWTradePopupEntryWidget_GetPlayerState) == 0x000008, "Wrong size on HWTradePopupEntryWidget_GetPlayerState");
static_assert(offsetof(HWTradePopupEntryWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'HWTradePopupEntryWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupEntryWidget.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupEntryWidget_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupEntryWidget_IsLocalPlayer) == 0x000001, "Wrong alignment on HWTradePopupEntryWidget_IsLocalPlayer");
static_assert(sizeof(HWTradePopupEntryWidget_IsLocalPlayer) == 0x000001, "Wrong size on HWTradePopupEntryWidget_IsLocalPlayer");
static_assert(offsetof(HWTradePopupEntryWidget_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'HWTradePopupEntryWidget_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupProposalEntryWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWTradePopupProposalEntryWidget_SetPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupProposalEntryWidget_SetPlayerState) == 0x000008, "Wrong alignment on HWTradePopupProposalEntryWidget_SetPlayerState");
static_assert(sizeof(HWTradePopupProposalEntryWidget_SetPlayerState) == 0x000008, "Wrong size on HWTradePopupProposalEntryWidget_SetPlayerState");
static_assert(offsetof(HWTradePopupProposalEntryWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'HWTradePopupProposalEntryWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupProposalEntryWidget.IsLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupProposalEntryWidget_IsLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupProposalEntryWidget_IsLocalPlayer) == 0x000001, "Wrong alignment on HWTradePopupProposalEntryWidget_IsLocalPlayer");
static_assert(sizeof(HWTradePopupProposalEntryWidget_IsLocalPlayer) == 0x000001, "Wrong size on HWTradePopupProposalEntryWidget_IsLocalPlayer");
static_assert(offsetof(HWTradePopupProposalEntryWidget_IsLocalPlayer, ReturnValue) == 0x000000, "Member 'HWTradePopupProposalEntryWidget_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleEntryButtonHovered final
{
public:
	class UHWTradePopupEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRole                                CharacterRole;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_HandleEntryButtonHovered) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleEntryButtonHovered");
static_assert(sizeof(HWTradePopupScreenWidget_HandleEntryButtonHovered) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleEntryButtonHovered");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonHovered, CharacterRole) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleEntryButtonHovered::CharacterRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleEntryButtonSelected final
{
public:
	class UHWTradePopupEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRole                                CharacterRole;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_HandleEntryButtonSelected) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleEntryButtonSelected");
static_assert(sizeof(HWTradePopupScreenWidget_HandleEntryButtonSelected) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleEntryButtonSelected");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonSelected, CharacterRole) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleEntryButtonSelected::CharacterRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleEntryButtonUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleEntryButtonUnhovered final
{
public:
	class UHWTradePopupEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRole                                CharacterRole;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_HandleEntryButtonUnhovered) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleEntryButtonUnhovered");
static_assert(sizeof(HWTradePopupScreenWidget_HandleEntryButtonUnhovered) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleEntryButtonUnhovered");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonUnhovered, EntryWidget) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleEntryButtonUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleEntryButtonUnhovered, CharacterRole) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleEntryButtonUnhovered::CharacterRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleLocalPlayerStateAssignedRoleChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged final
{
public:
	ECharacterRole                                AssignedRole;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged) == 0x000001, "Wrong alignment on HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged");
static_assert(sizeof(HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged) == 0x000001, "Wrong size on HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged, AssignedRole) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateAssignedRoleChanged::AssignedRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleLocalPlayerStateReceivedRoleSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult");
static_assert(sizeof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult) == 0x000018, "Wrong size on HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TradeResult) == 0x000010, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult, TimerId) == 0x000011, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateReceivedRoleSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleLocalPlayerStateRejectedTradeListUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated final
{
public:
	TArray<class AHWPlayerState*>                 RejectedTradeList;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated");
static_assert(sizeof(HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated");
static_assert(offsetof(HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated, RejectedTradeList) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleLocalPlayerStateRejectedTradeListUpdated::RejectedTradeList' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWTradePopupScreenWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWTradePopupScreenWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWTradePopupScreenWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWTradePopupScreenWidget_HandlePlayerStateReplicated, PlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandlePlayerStateReplicated::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleProposeTradeButtonSelected
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupScreenWidget_HandleProposeTradeButtonSelected final
{
public:
	ECharacterRole                                CharacterRole;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleProposeTradeButtonSelected) == 0x000001, "Wrong alignment on HWTradePopupScreenWidget_HandleProposeTradeButtonSelected");
static_assert(sizeof(HWTradePopupScreenWidget_HandleProposeTradeButtonSelected) == 0x000001, "Wrong size on HWTradePopupScreenWidget_HandleProposeTradeButtonSelected");
static_assert(offsetof(HWTradePopupScreenWidget_HandleProposeTradeButtonSelected, CharacterRole) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleProposeTradeButtonSelected::CharacterRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleRoleSwapTradeAccepted
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted");
static_assert(sizeof(HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeAccepted::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleRoleSwapTradeDeclined
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined");
static_assert(sizeof(HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeDeclined::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleRoleSwapTradeRequested
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleRoleSwapTradeRequested final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleRoleSwapTradeRequested) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleRoleSwapTradeRequested");
static_assert(sizeof(HWTradePopupScreenWidget_HandleRoleSwapTradeRequested) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleRoleSwapTradeRequested");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeRequested, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeRequested::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeRequested, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeRequested::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleRoleSwapTradeTimedOut
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut");
static_assert(sizeof(HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut) == 0x000010, "Wrong size on HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleRoleSwapTradeTimedOut::TargetPlayerState' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleTeamPlayerStateAssignedRoleChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged final
{
public:
	ECharacterRole                                AssignedRole;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged) == 0x000001, "Wrong alignment on HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged");
static_assert(sizeof(HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged) == 0x000001, "Wrong size on HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged");
static_assert(offsetof(HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged, AssignedRole) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleTeamPlayerStateAssignedRoleChanged::AssignedRole' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.HandleTeamPlayerStateReceivedRoleSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult");
static_assert(sizeof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult) == 0x000018, "Wrong size on HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult");
static_assert(offsetof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult, TargetPlayerState) == 0x000008, "Member 'HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult, TradeResult) == 0x000010, "Member 'HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult, TimerId) == 0x000011, "Member 'HWTradePopupScreenWidget_HandleTeamPlayerStateReceivedRoleSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWTradePopupScreenWidget.CanDeclineTradeWith
// 0x0010 (0x0010 - 0x0000)
struct HWTradePopupScreenWidget_CanDeclineTradeWith final
{
public:
	class AHWPlayerState*                         TradePlayerState;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTradePopupScreenWidget_CanDeclineTradeWith) == 0x000008, "Wrong alignment on HWTradePopupScreenWidget_CanDeclineTradeWith");
static_assert(sizeof(HWTradePopupScreenWidget_CanDeclineTradeWith) == 0x000010, "Wrong size on HWTradePopupScreenWidget_CanDeclineTradeWith");
static_assert(offsetof(HWTradePopupScreenWidget_CanDeclineTradeWith, TradePlayerState) == 0x000000, "Member 'HWTradePopupScreenWidget_CanDeclineTradeWith::TradePlayerState' has a wrong offset!");
static_assert(offsetof(HWTradePopupScreenWidget_CanDeclineTradeWith, ReturnValue) == 0x000008, "Member 'HWTradePopupScreenWidget_CanDeclineTradeWith::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelPipWidget.SetIsFilled
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentLevelPipWidget_SetIsFilled final
{
public:
	bool                                          bNewIsFilled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelPipWidget_SetIsFilled) == 0x000001, "Wrong alignment on HWEquipmentLevelPipWidget_SetIsFilled");
static_assert(sizeof(HWEquipmentLevelPipWidget_SetIsFilled) == 0x000001, "Wrong size on HWEquipmentLevelPipWidget_SetIsFilled");
static_assert(offsetof(HWEquipmentLevelPipWidget_SetIsFilled, bNewIsFilled) == 0x000000, "Member 'HWEquipmentLevelPipWidget_SetIsFilled::bNewIsFilled' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelPipWidget.SetPipColor
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentLevelPipWidget_SetPipColor final
{
public:
	struct FGameplayTag                           ColorTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelPipWidget_SetPipColor) == 0x000004, "Wrong alignment on HWEquipmentLevelPipWidget_SetPipColor");
static_assert(sizeof(HWEquipmentLevelPipWidget_SetPipColor) == 0x000008, "Wrong size on HWEquipmentLevelPipWidget_SetPipColor");
static_assert(offsetof(HWEquipmentLevelPipWidget_SetPipColor, ColorTag) == 0x000000, "Member 'HWEquipmentLevelPipWidget_SetPipColor::ColorTag' has a wrong offset!");

// Function HemingwayUI.HWEquipmentLevelPipWidget.GetIsFilled
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentLevelPipWidget_GetIsFilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentLevelPipWidget_GetIsFilled) == 0x000001, "Wrong alignment on HWEquipmentLevelPipWidget_GetIsFilled");
static_assert(sizeof(HWEquipmentLevelPipWidget_GetIsFilled) == 0x000001, "Wrong size on HWEquipmentLevelPipWidget_GetIsFilled");
static_assert(offsetof(HWEquipmentLevelPipWidget_GetIsFilled, ReturnValue) == 0x000000, "Member 'HWEquipmentLevelPipWidget_GetIsFilled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleCachedTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWScoreboardTeamWidget_HandleCachedTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_HandleCachedTeamUpdated) == 0x000001, "Wrong alignment on HWScoreboardTeamWidget_HandleCachedTeamUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleCachedTeamUpdated) == 0x000001, "Wrong size on HWScoreboardTeamWidget_HandleCachedTeamUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleCachedTeamUpdated, TeamId) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleCachedTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleFireGiantKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleFireGiantKillsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireGiantKills;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleFireGiantKillsUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleFireGiantKillsUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleFireGiantKillsUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleFireGiantKillsUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleFireGiantKillsUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleFireGiantKillsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleFireGiantKillsUpdated, FireGiantKills) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleFireGiantKillsUpdated::FireGiantKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleGoldFuryKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldFuryKills;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated, GoldFuryKills) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleGoldFuryKillsUpdated::GoldFuryKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleTeamAssistsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleTeamAssistsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamAssists;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleTeamAssistsUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleTeamAssistsUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleTeamAssistsUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleTeamAssistsUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamAssistsUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleTeamAssistsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamAssistsUpdated, TeamAssists) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleTeamAssistsUpdated::TeamAssists' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleTeamDeathsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleTeamDeathsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamDeaths;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleTeamDeathsUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleTeamDeathsUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleTeamDeathsUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleTeamDeathsUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamDeathsUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleTeamDeathsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamDeathsUpdated, TeamDeaths) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleTeamDeathsUpdated::TeamDeaths' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleTeamGoldEarnedUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamGoldEarned;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated, TeamGoldEarned) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleTeamGoldEarnedUpdated::TeamGoldEarned' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleTeamKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleTeamKillsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamKills;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardTeamWidget_HandleTeamKillsUpdated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleTeamKillsUpdated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleTeamKillsUpdated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleTeamKillsUpdated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamKillsUpdated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleTeamKillsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamKillsUpdated, TeamKills) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleTeamKillsUpdated::TeamKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.HandleTeamStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamStatsTracker*                    TeamStatsTracker;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated");
static_assert(sizeof(HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated) == 0x000010, "Wrong size on HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated, TeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated::TeamState' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated, TeamStatsTracker) == 0x000008, "Member 'HWScoreboardTeamWidget_HandleTeamStatsTrackerReplicated::TeamStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.OnPlayerMuteSelected
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_OnPlayerMuteSelected final
{
public:
	class UHWScoreboardPlayerWidget*              PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         SelectedPlayer;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_OnPlayerMuteSelected) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_OnPlayerMuteSelected");
static_assert(sizeof(HWScoreboardTeamWidget_OnPlayerMuteSelected) == 0x000010, "Wrong size on HWScoreboardTeamWidget_OnPlayerMuteSelected");
static_assert(offsetof(HWScoreboardTeamWidget_OnPlayerMuteSelected, PlayerWidget) == 0x000000, "Member 'HWScoreboardTeamWidget_OnPlayerMuteSelected::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardTeamWidget_OnPlayerMuteSelected, SelectedPlayer) == 0x000008, "Member 'HWScoreboardTeamWidget_OnPlayerMuteSelected::SelectedPlayer' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.TeamMemberAdded
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardTeamWidget_TeamMemberAdded final
{
public:
	class UHWScoreboardPlayerWidget*              TeamMemberWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_TeamMemberAdded) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_TeamMemberAdded");
static_assert(sizeof(HWScoreboardTeamWidget_TeamMemberAdded) == 0x000008, "Wrong size on HWScoreboardTeamWidget_TeamMemberAdded");
static_assert(offsetof(HWScoreboardTeamWidget_TeamMemberAdded, TeamMemberWidget) == 0x000000, "Member 'HWScoreboardTeamWidget_TeamMemberAdded::TeamMemberWidget' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedFireGiantKills
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedFireGiantKills final
{
public:
	int32                                         FireGiantKills;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedFireGiantKills) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedFireGiantKills");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedFireGiantKills) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedFireGiantKills");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedFireGiantKills, FireGiantKills) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedFireGiantKills::FireGiantKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedGoldFuryKills
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedGoldFuryKills final
{
public:
	int32                                         GoldFuryKills;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedGoldFuryKills) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedGoldFuryKills");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedGoldFuryKills) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedGoldFuryKills");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedGoldFuryKills, GoldFuryKills) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedGoldFuryKills::GoldFuryKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedTotalAssists
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedTotalAssists final
{
public:
	int32                                         TotalAssists;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedTotalAssists) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedTotalAssists");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedTotalAssists) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedTotalAssists");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedTotalAssists, TotalAssists) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedTotalAssists::TotalAssists' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedTotalDeaths
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedTotalDeaths final
{
public:
	int32                                         TotalDeaths;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedTotalDeaths) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedTotalDeaths");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedTotalDeaths) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedTotalDeaths");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedTotalDeaths, TotalDeaths) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedTotalDeaths::TotalDeaths' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedTotalGold
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedTotalGold final
{
public:
	int32                                         TeamGoldEarned;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedTotalGold) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedTotalGold");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedTotalGold) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedTotalGold");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedTotalGold, TeamGoldEarned) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedTotalGold::TeamGoldEarned' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedTotalKills
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedTotalKills final
{
public:
	int32                                         TotalKills;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedTotalKills) == 0x000004, "Wrong alignment on HWScoreboardTeamWidget_UpdatedTotalKills");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedTotalKills) == 0x000004, "Wrong size on HWScoreboardTeamWidget_UpdatedTotalKills");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedTotalKills, TotalKills) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedTotalKills::TotalKills' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.UpdatedTrackedTeam
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardTeamWidget_UpdatedTrackedTeam final
{
public:
	class AHWTeamState*                           NewTeamState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_UpdatedTrackedTeam) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_UpdatedTrackedTeam");
static_assert(sizeof(HWScoreboardTeamWidget_UpdatedTrackedTeam) == 0x000008, "Wrong size on HWScoreboardTeamWidget_UpdatedTrackedTeam");
static_assert(offsetof(HWScoreboardTeamWidget_UpdatedTrackedTeam, NewTeamState) == 0x000000, "Member 'HWScoreboardTeamWidget_UpdatedTrackedTeam::NewTeamState' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.GetPlayerWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardTeamWidget_GetPlayerWidgets final
{
public:
	TArray<class UHWScoreboardPlayerWidget*>      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_GetPlayerWidgets) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_GetPlayerWidgets");
static_assert(sizeof(HWScoreboardTeamWidget_GetPlayerWidgets) == 0x000010, "Wrong size on HWScoreboardTeamWidget_GetPlayerWidgets");
static_assert(offsetof(HWScoreboardTeamWidget_GetPlayerWidgets, ReturnValue) == 0x000000, "Member 'HWScoreboardTeamWidget_GetPlayerWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardTeamWidget.GetTrackedTeam
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardTeamWidget_GetTrackedTeam final
{
public:
	class AHWTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardTeamWidget_GetTrackedTeam) == 0x000008, "Wrong alignment on HWScoreboardTeamWidget_GetTrackedTeam");
static_assert(sizeof(HWScoreboardTeamWidget_GetTrackedTeam) == 0x000008, "Wrong size on HWScoreboardTeamWidget_GetTrackedTeam");
static_assert(offsetof(HWScoreboardTeamWidget_GetTrackedTeam, ReturnValue) == 0x000000, "Member 'HWScoreboardTeamWidget_GetTrackedTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.CloseMenu
// 0x0001 (0x0001 - 0x0000)
struct HWVGSWidget_CloseMenu final
{
public:
	bool                                          bBroadcast;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_CloseMenu) == 0x000001, "Wrong alignment on HWVGSWidget_CloseMenu");
static_assert(sizeof(HWVGSWidget_CloseMenu) == 0x000001, "Wrong size on HWVGSWidget_CloseMenu");
static_assert(offsetof(HWVGSWidget_CloseMenu, bBroadcast) == 0x000000, "Member 'HWVGSWidget_CloseMenu::bBroadcast' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.GetEntriesForMenu
// 0x0020 (0x0020 - 0x0000)
struct HWVGSWidget_GetEntriesForMenu final
{
public:
	struct FGameplayTag                           MenuId;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWVGSUIEntry>                  OutMenuEntries;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWVGSWidget_GetEntriesForMenu) == 0x000008, "Wrong alignment on HWVGSWidget_GetEntriesForMenu");
static_assert(sizeof(HWVGSWidget_GetEntriesForMenu) == 0x000020, "Wrong size on HWVGSWidget_GetEntriesForMenu");
static_assert(offsetof(HWVGSWidget_GetEntriesForMenu, MenuId) == 0x000000, "Member 'HWVGSWidget_GetEntriesForMenu::MenuId' has a wrong offset!");
static_assert(offsetof(HWVGSWidget_GetEntriesForMenu, OutMenuEntries) == 0x000008, "Member 'HWVGSWidget_GetEntriesForMenu::OutMenuEntries' has a wrong offset!");
static_assert(offsetof(HWVGSWidget_GetEntriesForMenu, ReturnValue) == 0x000018, "Member 'HWVGSWidget_GetEntriesForMenu::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWVGSWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWVGSWidget_HandleInputStateChanged");
static_assert(sizeof(HWVGSWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWVGSWidget_HandleInputStateChanged");
static_assert(offsetof(HWVGSWidget_HandleInputStateChanged, NewState) == 0x000000, "Member 'HWVGSWidget_HandleInputStateChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.HandlePlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWVGSWidget_HandlePlayerStateReplicated final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong alignment on HWVGSWidget_HandlePlayerStateReplicated");
static_assert(sizeof(HWVGSWidget_HandlePlayerStateReplicated) == 0x000008, "Wrong size on HWVGSWidget_HandlePlayerStateReplicated");
static_assert(offsetof(HWVGSWidget_HandlePlayerStateReplicated, InPlayerState) == 0x000000, "Member 'HWVGSWidget_HandlePlayerStateReplicated::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.HandleVGSManagerReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWVGSWidget_HandleVGSManagerReplicated final
{
public:
	class AHWVGSManager*                          VGSManager;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_HandleVGSManagerReplicated) == 0x000008, "Wrong alignment on HWVGSWidget_HandleVGSManagerReplicated");
static_assert(sizeof(HWVGSWidget_HandleVGSManagerReplicated) == 0x000008, "Wrong size on HWVGSWidget_HandleVGSManagerReplicated");
static_assert(offsetof(HWVGSWidget_HandleVGSManagerReplicated, VGSManager) == 0x000000, "Member 'HWVGSWidget_HandleVGSManagerReplicated::VGSManager' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.HandleVGSMenuIdUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWVGSWidget_HandleVGSMenuIdUpdated final
{
public:
	struct FGameplayTag                           MenuId;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_HandleVGSMenuIdUpdated) == 0x000004, "Wrong alignment on HWVGSWidget_HandleVGSMenuIdUpdated");
static_assert(sizeof(HWVGSWidget_HandleVGSMenuIdUpdated) == 0x000008, "Wrong size on HWVGSWidget_HandleVGSMenuIdUpdated");
static_assert(offsetof(HWVGSWidget_HandleVGSMenuIdUpdated, MenuId) == 0x000000, "Member 'HWVGSWidget_HandleVGSMenuIdUpdated::MenuId' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.OpenMenu
// 0x0020 (0x0020 - 0x0000)
struct HWVGSWidget_OpenMenu final
{
public:
	struct FGameplayTag                           MenuId;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWVGSUIEntry>                  OutMenuEntries;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWVGSWidget_OpenMenu) == 0x000008, "Wrong alignment on HWVGSWidget_OpenMenu");
static_assert(sizeof(HWVGSWidget_OpenMenu) == 0x000020, "Wrong size on HWVGSWidget_OpenMenu");
static_assert(offsetof(HWVGSWidget_OpenMenu, MenuId) == 0x000000, "Member 'HWVGSWidget_OpenMenu::MenuId' has a wrong offset!");
static_assert(offsetof(HWVGSWidget_OpenMenu, OutMenuEntries) == 0x000008, "Member 'HWVGSWidget_OpenMenu::OutMenuEntries' has a wrong offset!");
static_assert(offsetof(HWVGSWidget_OpenMenu, ReturnValue) == 0x000018, "Member 'HWVGSWidget_OpenMenu::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.GetVGSInputContext
// 0x0008 (0x0008 - 0x0000)
struct HWVGSWidget_GetVGSInputContext final
{
public:
	const class UInputMappingContext*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_GetVGSInputContext) == 0x000008, "Wrong alignment on HWVGSWidget_GetVGSInputContext");
static_assert(sizeof(HWVGSWidget_GetVGSInputContext) == 0x000008, "Wrong size on HWVGSWidget_GetVGSInputContext");
static_assert(offsetof(HWVGSWidget_GetVGSInputContext, ReturnValue) == 0x000000, "Member 'HWVGSWidget_GetVGSInputContext::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWVGSWidget.GetVGSManager
// 0x0008 (0x0008 - 0x0000)
struct HWVGSWidget_GetVGSManager final
{
public:
	class AHWVGSManager*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVGSWidget_GetVGSManager) == 0x000008, "Wrong alignment on HWVGSWidget_GetVGSManager");
static_assert(sizeof(HWVGSWidget_GetVGSManager) == 0x000008, "Wrong size on HWVGSWidget_GetVGSManager");
static_assert(offsetof(HWVGSWidget_GetVGSManager, ReturnValue) == 0x000000, "Member 'HWVGSWidget_GetVGSManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.DisplayPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerInfoDisplayWidget_DisplayPlayerLevel final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_DisplayPlayerLevel) == 0x000004, "Wrong alignment on HWPlayerInfoDisplayWidget_DisplayPlayerLevel");
static_assert(sizeof(HWPlayerInfoDisplayWidget_DisplayPlayerLevel) == 0x000004, "Wrong size on HWPlayerInfoDisplayWidget_DisplayPlayerLevel");
static_assert(offsetof(HWPlayerInfoDisplayWidget_DisplayPlayerLevel, PlayerLevel) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_DisplayPlayerLevel::PlayerLevel' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.GetPlayerPlatform
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerInfoDisplayWidget_GetPlayerPlatform final
{
public:
	TDelegate<void(ERHPlatformDisplayType PlatformType)> Delegate;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_GetPlayerPlatform) == 0x000004, "Wrong alignment on HWPlayerInfoDisplayWidget_GetPlayerPlatform");
static_assert(sizeof(HWPlayerInfoDisplayWidget_GetPlayerPlatform) == 0x000010, "Wrong size on HWPlayerInfoDisplayWidget_GetPlayerPlatform");
static_assert(offsetof(HWPlayerInfoDisplayWidget_GetPlayerPlatform, Delegate) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_GetPlayerPlatform::Delegate' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.OnPartyMemberChanged
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerInfoDisplayWidget_OnPartyMemberChanged final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_OnPartyMemberChanged) == 0x000004, "Wrong alignment on HWPlayerInfoDisplayWidget_OnPartyMemberChanged");
static_assert(sizeof(HWPlayerInfoDisplayWidget_OnPartyMemberChanged) == 0x000010, "Wrong size on HWPlayerInfoDisplayWidget_OnPartyMemberChanged");
static_assert(offsetof(HWPlayerInfoDisplayWidget_OnPartyMemberChanged, PlayerUuid) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_OnPartyMemberChanged::PlayerUuid' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.OnPlayerPresenceUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated final
{
public:
	class URH_PlayerInfoSubobject*                PlayerPresence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated) == 0x000008, "Wrong alignment on HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated");
static_assert(sizeof(HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated) == 0x000008, "Wrong size on HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated");
static_assert(offsetof(HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated, PlayerPresence) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_OnPlayerPresenceUpdated::PlayerPresence' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.RHUpdateFriends
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerInfoDisplayWidget_RHUpdateFriends final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_RHUpdateFriends) == 0x000008, "Wrong alignment on HWPlayerInfoDisplayWidget_RHUpdateFriends");
static_assert(sizeof(HWPlayerInfoDisplayWidget_RHUpdateFriends) == 0x000008, "Wrong size on HWPlayerInfoDisplayWidget_RHUpdateFriends");
static_assert(offsetof(HWPlayerInfoDisplayWidget_RHUpdateFriends, Friend) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_RHUpdateFriends::Friend' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.SetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerInfoDisplayWidget_SetPlayerInfo final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_SetPlayerInfo) == 0x000008, "Wrong alignment on HWPlayerInfoDisplayWidget_SetPlayerInfo");
static_assert(sizeof(HWPlayerInfoDisplayWidget_SetPlayerInfo) == 0x000008, "Wrong size on HWPlayerInfoDisplayWidget_SetPlayerInfo");
static_assert(offsetof(HWPlayerInfoDisplayWidget_SetPlayerInfo, PlayerInfo) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_SetPlayerInfo::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.GetPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerInfoDisplayWidget_GetPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_GetPlayerLevel) == 0x000004, "Wrong alignment on HWPlayerInfoDisplayWidget_GetPlayerLevel");
static_assert(sizeof(HWPlayerInfoDisplayWidget_GetPlayerLevel) == 0x000004, "Wrong size on HWPlayerInfoDisplayWidget_GetPlayerLevel");
static_assert(offsetof(HWPlayerInfoDisplayWidget_GetPlayerLevel, ReturnValue) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_GetPlayerLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInfoDisplayWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerInfoDisplayWidget_GetPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInfoDisplayWidget_GetPlayerState) == 0x000008, "Wrong alignment on HWPlayerInfoDisplayWidget_GetPlayerState");
static_assert(sizeof(HWPlayerInfoDisplayWidget_GetPlayerState) == 0x000008, "Wrong size on HWPlayerInfoDisplayWidget_GetPlayerState");
static_assert(offsetof(HWPlayerInfoDisplayWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'HWPlayerInfoDisplayWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShowContextMenu
// 0x0040 (0x0040 - 0x0000)
struct HWPlayerContextMenuWidget_ShowContextMenu final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShowContextMenu) == 0x000008, "Wrong alignment on HWPlayerContextMenuWidget_ShowContextMenu");
static_assert(sizeof(HWPlayerContextMenuWidget_ShowContextMenu) == 0x000040, "Wrong size on HWPlayerContextMenuWidget_ShowContextMenu");
static_assert(offsetof(HWPlayerContextMenuWidget_ShowContextMenu, PlayerInfo) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShowContextMenu::PlayerInfo' has a wrong offset!");
static_assert(offsetof(HWPlayerContextMenuWidget_ShowContextMenu, ReferenceGeometry) == 0x000008, "Member 'HWPlayerContextMenuWidget_ShowContextMenu::ReferenceGeometry' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.GetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerContextMenuWidget_GetPlayerInfo final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_GetPlayerInfo) == 0x000008, "Wrong alignment on HWPlayerContextMenuWidget_GetPlayerInfo");
static_assert(sizeof(HWPlayerContextMenuWidget_GetPlayerInfo) == 0x000008, "Wrong size on HWPlayerContextMenuWidget_GetPlayerInfo");
static_assert(offsetof(HWPlayerContextMenuWidget_GetPlayerInfo, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowActivateBoostButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowActivateBoostButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowActivateBoostButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowActivateBoostButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowActivateBoostButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowActivateBoostButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowActivateBoostButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowActivateBoostButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowMuteAllButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowMuteAllButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowMuteAllButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowMuteAllButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowMuteAllButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowMuteAllButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowMuteAllButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowMuteAllButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowMutePingsButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowMutePingsButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowMutePingsButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowMutePingsButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowMutePingsButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowMutePingsButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowMutePingsButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowMutePingsButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowMuteTextButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowMuteTextButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowMuteTextButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowMuteTextButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowMuteTextButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowMuteTextButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowMuteTextButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowMuteTextButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowMuteVGSButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowMuteVGSButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowMuteVGSButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowMuteVGSButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowMuteVGSButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowMuteVGSButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowMuteVGSButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowMuteVGSButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowMuteVoiceButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowMuteVoiceButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowReportButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowReportButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowReportButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowReportButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowReportButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowReportButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowReportButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowReportButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowTradeGodsButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowTradeGodsButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowTradeGodsButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowTradeGodsButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowTradeGodsButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowTradeGodsButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowTradeGodsButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowTradeGodsButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowTradeRolesButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowTradeRolesButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowTradeRolesButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowTradeRolesButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowTradeRolesButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowTradeRolesButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowTradeRolesButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowTradeRolesButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerContextMenuWidget.ShouldShowViewProfileButton
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerContextMenuWidget_ShouldShowViewProfileButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerContextMenuWidget_ShouldShowViewProfileButton) == 0x000001, "Wrong alignment on HWPlayerContextMenuWidget_ShouldShowViewProfileButton");
static_assert(sizeof(HWPlayerContextMenuWidget_ShouldShowViewProfileButton) == 0x000001, "Wrong size on HWPlayerContextMenuWidget_ShouldShowViewProfileButton");
static_assert(offsetof(HWPlayerContextMenuWidget_ShouldShowViewProfileButton, ReturnValue) == 0x000000, "Member 'HWPlayerContextMenuWidget_ShouldShowViewProfileButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuEntryWidget.SetEntryData
// 0x0048 (0x0048 - 0x0000)
struct HWRadialMenuEntryWidget_SetEntryData final
{
public:
	struct FHWRadialMenuPageEntry                 InEntryData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuEntryWidget_SetEntryData) == 0x000008, "Wrong alignment on HWRadialMenuEntryWidget_SetEntryData");
static_assert(sizeof(HWRadialMenuEntryWidget_SetEntryData) == 0x000048, "Wrong size on HWRadialMenuEntryWidget_SetEntryData");
static_assert(offsetof(HWRadialMenuEntryWidget_SetEntryData, InEntryData) == 0x000000, "Member 'HWRadialMenuEntryWidget_SetEntryData::InEntryData' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuEntryWidget.SetRadialSegmentInfo
// 0x0014 (0x0014 - 0x0000)
struct HWRadialMenuEntryWidget_SetRadialSegmentInfo final
{
public:
	float                                         MenuOuterRadius;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MenuInnerRadius;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntryOffset;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayDegrees;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayRotation;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuEntryWidget_SetRadialSegmentInfo) == 0x000004, "Wrong alignment on HWRadialMenuEntryWidget_SetRadialSegmentInfo");
static_assert(sizeof(HWRadialMenuEntryWidget_SetRadialSegmentInfo) == 0x000014, "Wrong size on HWRadialMenuEntryWidget_SetRadialSegmentInfo");
static_assert(offsetof(HWRadialMenuEntryWidget_SetRadialSegmentInfo, MenuOuterRadius) == 0x000000, "Member 'HWRadialMenuEntryWidget_SetRadialSegmentInfo::MenuOuterRadius' has a wrong offset!");
static_assert(offsetof(HWRadialMenuEntryWidget_SetRadialSegmentInfo, MenuInnerRadius) == 0x000004, "Member 'HWRadialMenuEntryWidget_SetRadialSegmentInfo::MenuInnerRadius' has a wrong offset!");
static_assert(offsetof(HWRadialMenuEntryWidget_SetRadialSegmentInfo, EntryOffset) == 0x000008, "Member 'HWRadialMenuEntryWidget_SetRadialSegmentInfo::EntryOffset' has a wrong offset!");
static_assert(offsetof(HWRadialMenuEntryWidget_SetRadialSegmentInfo, DisplayDegrees) == 0x00000C, "Member 'HWRadialMenuEntryWidget_SetRadialSegmentInfo::DisplayDegrees' has a wrong offset!");
static_assert(offsetof(HWRadialMenuEntryWidget_SetRadialSegmentInfo, DisplayRotation) == 0x000010, "Member 'HWRadialMenuEntryWidget_SetRadialSegmentInfo::DisplayRotation' has a wrong offset!");

// Function HemingwayUI.HWVoiceChatEntryWidget.SetTalkingPlayer
// 0x0008 (0x0008 - 0x0000)
struct HWVoiceChatEntryWidget_SetTalkingPlayer final
{
public:
	const class AHWPlayerState*                   PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVoiceChatEntryWidget_SetTalkingPlayer) == 0x000008, "Wrong alignment on HWVoiceChatEntryWidget_SetTalkingPlayer");
static_assert(sizeof(HWVoiceChatEntryWidget_SetTalkingPlayer) == 0x000008, "Wrong size on HWVoiceChatEntryWidget_SetTalkingPlayer");
static_assert(offsetof(HWVoiceChatEntryWidget_SetTalkingPlayer, PlayerState) == 0x000000, "Member 'HWVoiceChatEntryWidget_SetTalkingPlayer::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWVoiceChatEntryWidget.UpdateTalkingPlayerName
// 0x0008 (0x0008 - 0x0000)
struct HWVoiceChatEntryWidget_UpdateTalkingPlayerName final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVoiceChatEntryWidget_UpdateTalkingPlayerName) == 0x000008, "Wrong alignment on HWVoiceChatEntryWidget_UpdateTalkingPlayerName");
static_assert(sizeof(HWVoiceChatEntryWidget_UpdateTalkingPlayerName) == 0x000008, "Wrong size on HWVoiceChatEntryWidget_UpdateTalkingPlayerName");
static_assert(offsetof(HWVoiceChatEntryWidget_UpdateTalkingPlayerName, PlayerInfo) == 0x000000, "Member 'HWVoiceChatEntryWidget_UpdateTalkingPlayerName::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWVoiceChatEntryWidget.UpdateTalkingPlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        PlatformDisplayType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon) == 0x000001, "Wrong alignment on HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon");
static_assert(sizeof(HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon) == 0x000001, "Wrong size on HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon");
static_assert(offsetof(HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon, PlatformDisplayType) == 0x000000, "Member 'HWVoiceChatEntryWidget_UpdateTalkingPlayerPlatformIcon::PlatformDisplayType' has a wrong offset!");

// Function HemingwayUI.HWVoiceChatWidget.CreateVoiceChatEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWVoiceChatWidget_CreateVoiceChatEntryWidget final
{
public:
	class UHWVoiceChatEntryWidget*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWVoiceChatWidget_CreateVoiceChatEntryWidget) == 0x000008, "Wrong alignment on HWVoiceChatWidget_CreateVoiceChatEntryWidget");
static_assert(sizeof(HWVoiceChatWidget_CreateVoiceChatEntryWidget) == 0x000008, "Wrong size on HWVoiceChatWidget_CreateVoiceChatEntryWidget");
static_assert(offsetof(HWVoiceChatWidget_CreateVoiceChatEntryWidget, ReturnValue) == 0x000000, "Member 'HWVoiceChatWidget_CreateVoiceChatEntryWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCustomBotSelectorWidget.SetSelectedDifficulty
// 0x0001 (0x0001 - 0x0000)
struct HWCustomBotSelectorWidget_SetSelectedDifficulty final
{
public:
	EHWBotDifficulty                              InDifficulty;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomBotSelectorWidget_SetSelectedDifficulty) == 0x000001, "Wrong alignment on HWCustomBotSelectorWidget_SetSelectedDifficulty");
static_assert(sizeof(HWCustomBotSelectorWidget_SetSelectedDifficulty) == 0x000001, "Wrong size on HWCustomBotSelectorWidget_SetSelectedDifficulty");
static_assert(offsetof(HWCustomBotSelectorWidget_SetSelectedDifficulty, InDifficulty) == 0x000000, "Member 'HWCustomBotSelectorWidget_SetSelectedDifficulty::InDifficulty' has a wrong offset!");

// Function HemingwayUI.HWCustomBotSelectorWidget.UpdateDetailedGodDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWCustomBotSelectorWidget_UpdateDetailedGodDisplay final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomBotSelectorWidget_UpdateDetailedGodDisplay) == 0x000008, "Wrong alignment on HWCustomBotSelectorWidget_UpdateDetailedGodDisplay");
static_assert(sizeof(HWCustomBotSelectorWidget_UpdateDetailedGodDisplay) == 0x000008, "Wrong size on HWCustomBotSelectorWidget_UpdateDetailedGodDisplay");
static_assert(offsetof(HWCustomBotSelectorWidget_UpdateDetailedGodDisplay, GodItem) == 0x000000, "Member 'HWCustomBotSelectorWidget_UpdateDetailedGodDisplay::GodItem' has a wrong offset!");

// Function HemingwayUI.HWCustomBotSelectorWidget.GetAssociatedTeamNum
// 0x0004 (0x0004 - 0x0000)
struct HWCustomBotSelectorWidget_GetAssociatedTeamNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomBotSelectorWidget_GetAssociatedTeamNum) == 0x000004, "Wrong alignment on HWCustomBotSelectorWidget_GetAssociatedTeamNum");
static_assert(sizeof(HWCustomBotSelectorWidget_GetAssociatedTeamNum) == 0x000004, "Wrong size on HWCustomBotSelectorWidget_GetAssociatedTeamNum");
static_assert(offsetof(HWCustomBotSelectorWidget_GetAssociatedTeamNum, ReturnValue) == 0x000000, "Member 'HWCustomBotSelectorWidget_GetAssociatedTeamNum::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.DebugLogin
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_DebugLogin final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_DebugLogin) == 0x000008, "Wrong alignment on HWGameHUD_DebugLogin");
static_assert(sizeof(HWGameHUD_DebugLogin) == 0x000010, "Wrong size on HWGameHUD_DebugLogin");
static_assert(offsetof(HWGameHUD_DebugLogin, Name_0) == 0x000000, "Member 'HWGameHUD_DebugLogin::Name_0' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.HandleLocalAbilitySystemActorChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_HandleLocalAbilitySystemActorChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_HandleLocalAbilitySystemActorChanged) == 0x000008, "Wrong alignment on HWGameHUD_HandleLocalAbilitySystemActorChanged");
static_assert(sizeof(HWGameHUD_HandleLocalAbilitySystemActorChanged) == 0x000010, "Wrong size on HWGameHUD_HandleLocalAbilitySystemActorChanged");
static_assert(offsetof(HWGameHUD_HandleLocalAbilitySystemActorChanged, PlayerState) == 0x000000, "Member 'HWGameHUD_HandleLocalAbilitySystemActorChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(HWGameHUD_HandleLocalAbilitySystemActorChanged, NewABSActor) == 0x000008, "Member 'HWGameHUD_HandleLocalAbilitySystemActorChanged::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.HandlePlayerInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_HandlePlayerInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_HandlePlayerInputStateChanged) == 0x000001, "Wrong alignment on HWGameHUD_HandlePlayerInputStateChanged");
static_assert(sizeof(HWGameHUD_HandlePlayerInputStateChanged) == 0x000001, "Wrong size on HWGameHUD_HandlePlayerInputStateChanged");
static_assert(offsetof(HWGameHUD_HandlePlayerInputStateChanged, InputState) == 0x000000, "Member 'HWGameHUD_HandlePlayerInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.HandleTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_HandleTeamUpdated final
{
public:
	class AHWCharacterAbilitySystemActor*         OwningAbilitySystemActor;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamState*                           UpdatedTeam;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_HandleTeamUpdated) == 0x000008, "Wrong alignment on HWGameHUD_HandleTeamUpdated");
static_assert(sizeof(HWGameHUD_HandleTeamUpdated) == 0x000010, "Wrong size on HWGameHUD_HandleTeamUpdated");
static_assert(offsetof(HWGameHUD_HandleTeamUpdated, OwningAbilitySystemActor) == 0x000000, "Member 'HWGameHUD_HandleTeamUpdated::OwningAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWGameHUD_HandleTeamUpdated, UpdatedTeam) == 0x000008, "Member 'HWGameHUD_HandleTeamUpdated::UpdatedTeam' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.OverrideShowItemCooldowns
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_OverrideShowItemCooldowns final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_OverrideShowItemCooldowns) == 0x000001, "Wrong alignment on HWGameHUD_OverrideShowItemCooldowns");
static_assert(sizeof(HWGameHUD_OverrideShowItemCooldowns) == 0x000001, "Wrong size on HWGameHUD_OverrideShowItemCooldowns");
static_assert(offsetof(HWGameHUD_OverrideShowItemCooldowns, bShouldShow) == 0x000000, "Member 'HWGameHUD_OverrideShowItemCooldowns::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.SetAnalogNavigation
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_SetAnalogNavigation final
{
public:
	bool                                          bAllowAnalogNavigation;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_SetAnalogNavigation) == 0x000001, "Wrong alignment on HWGameHUD_SetAnalogNavigation");
static_assert(sizeof(HWGameHUD_SetAnalogNavigation) == 0x000001, "Wrong size on HWGameHUD_SetAnalogNavigation");
static_assert(offsetof(HWGameHUD_SetAnalogNavigation, bAllowAnalogNavigation) == 0x000000, "Member 'HWGameHUD_SetAnalogNavigation::bAllowAnalogNavigation' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.ShowMinutesForDurations
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_ShowMinutesForDurations final
{
public:
	bool                                          bInShowMinutes;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_ShowMinutesForDurations) == 0x000001, "Wrong alignment on HWGameHUD_ShowMinutesForDurations");
static_assert(sizeof(HWGameHUD_ShowMinutesForDurations) == 0x000001, "Wrong size on HWGameHUD_ShowMinutesForDurations");
static_assert(offsetof(HWGameHUD_ShowMinutesForDurations, bInShowMinutes) == 0x000000, "Member 'HWGameHUD_ShowMinutesForDurations::bInShowMinutes' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.TestAccolade
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_TestAccolade final
{
public:
	class FString                                 AccoladeTag;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_TestAccolade) == 0x000008, "Wrong alignment on HWGameHUD_TestAccolade");
static_assert(sizeof(HWGameHUD_TestAccolade) == 0x000010, "Wrong size on HWGameHUD_TestAccolade");
static_assert(offsetof(HWGameHUD_TestAccolade, AccoladeTag) == 0x000000, "Member 'HWGameHUD_TestAccolade::AccoladeTag' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.TestHelpTip
// 0x0018 (0x0018 - 0x0000)
struct HWGameHUD_TestHelpTip final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HelpTipTag;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_TestHelpTip) == 0x000008, "Wrong alignment on HWGameHUD_TestHelpTip");
static_assert(sizeof(HWGameHUD_TestHelpTip) == 0x000018, "Wrong size on HWGameHUD_TestHelpTip");
static_assert(offsetof(HWGameHUD_TestHelpTip, bShow) == 0x000000, "Member 'HWGameHUD_TestHelpTip::bShow' has a wrong offset!");
static_assert(offsetof(HWGameHUD_TestHelpTip, HelpTipTag) == 0x000008, "Member 'HWGameHUD_TestHelpTip::HelpTipTag' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetControlledAbilitySystemActor
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUD_GetControlledAbilitySystemActor final
{
public:
	class AHWCharacterAbilitySystemActor*         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetControlledAbilitySystemActor) == 0x000008, "Wrong alignment on HWGameHUD_GetControlledAbilitySystemActor");
static_assert(sizeof(HWGameHUD_GetControlledAbilitySystemActor) == 0x000008, "Wrong size on HWGameHUD_GetControlledAbilitySystemActor");
static_assert(offsetof(HWGameHUD_GetControlledAbilitySystemActor, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetControlledAbilitySystemActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetHelpTipWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUD_GetHelpTipWidget final
{
public:
	class UHWHelpTipWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetHelpTipWidget) == 0x000008, "Wrong alignment on HWGameHUD_GetHelpTipWidget");
static_assert(sizeof(HWGameHUD_GetHelpTipWidget) == 0x000008, "Wrong size on HWGameHUD_GetHelpTipWidget");
static_assert(offsetof(HWGameHUD_GetHelpTipWidget, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetHelpTipWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetHUDEditorLayoutManager
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUD_GetHUDEditorLayoutManager final
{
public:
	class UHWHUDEditorLayoutManager*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetHUDEditorLayoutManager) == 0x000008, "Wrong alignment on HWGameHUD_GetHUDEditorLayoutManager");
static_assert(sizeof(HWGameHUD_GetHUDEditorLayoutManager) == 0x000008, "Wrong size on HWGameHUD_GetHUDEditorLayoutManager");
static_assert(offsetof(HWGameHUD_GetHUDEditorLayoutManager, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetHUDEditorLayoutManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetLocalAttitudeTowardsActor
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_GetLocalAttitudeTowardsActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameHUD_GetLocalAttitudeTowardsActor) == 0x000008, "Wrong alignment on HWGameHUD_GetLocalAttitudeTowardsActor");
static_assert(sizeof(HWGameHUD_GetLocalAttitudeTowardsActor) == 0x000010, "Wrong size on HWGameHUD_GetLocalAttitudeTowardsActor");
static_assert(offsetof(HWGameHUD_GetLocalAttitudeTowardsActor, Actor) == 0x000000, "Member 'HWGameHUD_GetLocalAttitudeTowardsActor::Actor' has a wrong offset!");
static_assert(offsetof(HWGameHUD_GetLocalAttitudeTowardsActor, ReturnValue) == 0x000008, "Member 'HWGameHUD_GetLocalAttitudeTowardsActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetLocalAttitudeTowardsTeamId
// 0x0002 (0x0002 - 0x0000)
struct HWGameHUD_GetLocalAttitudeTowardsTeamId final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetLocalAttitudeTowardsTeamId) == 0x000001, "Wrong alignment on HWGameHUD_GetLocalAttitudeTowardsTeamId");
static_assert(sizeof(HWGameHUD_GetLocalAttitudeTowardsTeamId) == 0x000002, "Wrong size on HWGameHUD_GetLocalAttitudeTowardsTeamId");
static_assert(offsetof(HWGameHUD_GetLocalAttitudeTowardsTeamId, TeamId) == 0x000000, "Member 'HWGameHUD_GetLocalAttitudeTowardsTeamId::TeamId' has a wrong offset!");
static_assert(offsetof(HWGameHUD_GetLocalAttitudeTowardsTeamId, ReturnValue) == 0x000001, "Member 'HWGameHUD_GetLocalAttitudeTowardsTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetLocalTeam
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUD_GetLocalTeam final
{
public:
	class AHWTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetLocalTeam) == 0x000008, "Wrong alignment on HWGameHUD_GetLocalTeam");
static_assert(sizeof(HWGameHUD_GetLocalTeam) == 0x000008, "Wrong size on HWGameHUD_GetLocalTeam");
static_assert(offsetof(HWGameHUD_GetLocalTeam, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetLocalTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetLocalTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_GetLocalTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetLocalTeamId) == 0x000001, "Wrong alignment on HWGameHUD_GetLocalTeamId");
static_assert(sizeof(HWGameHUD_GetLocalTeamId) == 0x000001, "Wrong size on HWGameHUD_GetLocalTeamId");
static_assert(offsetof(HWGameHUD_GetLocalTeamId, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetLocalTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetNeutralTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_GetNeutralTeamId final
{
public:
	struct FGenericTeamId                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetNeutralTeamId) == 0x000001, "Wrong alignment on HWGameHUD_GetNeutralTeamId");
static_assert(sizeof(HWGameHUD_GetNeutralTeamId) == 0x000001, "Wrong size on HWGameHUD_GetNeutralTeamId");
static_assert(offsetof(HWGameHUD_GetNeutralTeamId, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetNeutralTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetOpposingTeamIds
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_GetOpposingTeamIds final
{
public:
	TArray<struct FGenericTeamId>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetOpposingTeamIds) == 0x000008, "Wrong alignment on HWGameHUD_GetOpposingTeamIds");
static_assert(sizeof(HWGameHUD_GetOpposingTeamIds) == 0x000010, "Wrong size on HWGameHUD_GetOpposingTeamIds");
static_assert(offsetof(HWGameHUD_GetOpposingTeamIds, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetOpposingTeamIds::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetShouldShowMinutesForDurations
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_GetShouldShowMinutesForDurations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetShouldShowMinutesForDurations) == 0x000001, "Wrong alignment on HWGameHUD_GetShouldShowMinutesForDurations");
static_assert(sizeof(HWGameHUD_GetShouldShowMinutesForDurations) == 0x000001, "Wrong size on HWGameHUD_GetShouldShowMinutesForDurations");
static_assert(offsetof(HWGameHUD_GetShouldShowMinutesForDurations, ReturnValue) == 0x000000, "Member 'HWGameHUD_GetShouldShowMinutesForDurations::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.GetTeam
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUD_GetTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_GetTeam) == 0x000008, "Wrong alignment on HWGameHUD_GetTeam");
static_assert(sizeof(HWGameHUD_GetTeam) == 0x000010, "Wrong size on HWGameHUD_GetTeam");
static_assert(offsetof(HWGameHUD_GetTeam, TeamId) == 0x000000, "Member 'HWGameHUD_GetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(HWGameHUD_GetTeam, ReturnValue) == 0x000008, "Member 'HWGameHUD_GetTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.IsAnalogNavigationEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_IsAnalogNavigationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_IsAnalogNavigationEnabled) == 0x000001, "Wrong alignment on HWGameHUD_IsAnalogNavigationEnabled");
static_assert(sizeof(HWGameHUD_IsAnalogNavigationEnabled) == 0x000001, "Wrong size on HWGameHUD_IsAnalogNavigationEnabled");
static_assert(offsetof(HWGameHUD_IsAnalogNavigationEnabled, ReturnValue) == 0x000000, "Member 'HWGameHUD_IsAnalogNavigationEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.IsPingCursorEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_IsPingCursorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_IsPingCursorEnabled) == 0x000001, "Wrong alignment on HWGameHUD_IsPingCursorEnabled");
static_assert(sizeof(HWGameHUD_IsPingCursorEnabled) == 0x000001, "Wrong size on HWGameHUD_IsPingCursorEnabled");
static_assert(offsetof(HWGameHUD_IsPingCursorEnabled, ReturnValue) == 0x000000, "Member 'HWGameHUD_IsPingCursorEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUD.IsSpectatorHUD
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUD_IsSpectatorHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUD_IsSpectatorHUD) == 0x000001, "Wrong alignment on HWGameHUD_IsSpectatorHUD");
static_assert(sizeof(HWGameHUD_IsSpectatorHUD) == 0x000001, "Wrong size on HWGameHUD_IsSpectatorHUD");
static_assert(offsetof(HWGameHUD_IsSpectatorHUD, ReturnValue) == 0x000000, "Member 'HWGameHUD_IsSpectatorHUD::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCustomGameLobby.UpdateDoNotTrack
// 0x0001 (0x0001 - 0x0000)
struct HWCustomGameLobby_UpdateDoNotTrack final
{
public:
	bool                                          bDoNotTrack;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomGameLobby_UpdateDoNotTrack) == 0x000001, "Wrong alignment on HWCustomGameLobby_UpdateDoNotTrack");
static_assert(sizeof(HWCustomGameLobby_UpdateDoNotTrack) == 0x000001, "Wrong size on HWCustomGameLobby_UpdateDoNotTrack");
static_assert(offsetof(HWCustomGameLobby_UpdateDoNotTrack, bDoNotTrack) == 0x000000, "Member 'HWCustomGameLobby_UpdateDoNotTrack::bDoNotTrack' has a wrong offset!");

// Function HemingwayUI.HWDynamicAnnouncementWidget.AddActiveAnnouncement
// 0x0018 (0x0018 - 0x0000)
struct HWDynamicAnnouncementWidget_AddActiveAnnouncement final
{
public:
	class FName                                   AnnouncementName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KV;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDynamicAnnouncementWidget_AddActiveAnnouncement) == 0x000008, "Wrong alignment on HWDynamicAnnouncementWidget_AddActiveAnnouncement");
static_assert(sizeof(HWDynamicAnnouncementWidget_AddActiveAnnouncement) == 0x000018, "Wrong size on HWDynamicAnnouncementWidget_AddActiveAnnouncement");
static_assert(offsetof(HWDynamicAnnouncementWidget_AddActiveAnnouncement, AnnouncementName) == 0x000000, "Member 'HWDynamicAnnouncementWidget_AddActiveAnnouncement::AnnouncementName' has a wrong offset!");
static_assert(offsetof(HWDynamicAnnouncementWidget_AddActiveAnnouncement, KV) == 0x000008, "Member 'HWDynamicAnnouncementWidget_AddActiveAnnouncement::KV' has a wrong offset!");

// Function HemingwayUI.HWDynamicAnnouncementWidget.RemoveActiveAnnouncement
// 0x0008 (0x0008 - 0x0000)
struct HWDynamicAnnouncementWidget_RemoveActiveAnnouncement final
{
public:
	class FName                                   AnnouncementName;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDynamicAnnouncementWidget_RemoveActiveAnnouncement) == 0x000004, "Wrong alignment on HWDynamicAnnouncementWidget_RemoveActiveAnnouncement");
static_assert(sizeof(HWDynamicAnnouncementWidget_RemoveActiveAnnouncement) == 0x000008, "Wrong size on HWDynamicAnnouncementWidget_RemoveActiveAnnouncement");
static_assert(offsetof(HWDynamicAnnouncementWidget_RemoveActiveAnnouncement, AnnouncementName) == 0x000000, "Member 'HWDynamicAnnouncementWidget_RemoveActiveAnnouncement::AnnouncementName' has a wrong offset!");

// Function HemingwayUI.HWDynamicAnnouncementWidget.UpdateDisplayedText
// 0x0018 (0x0018 - 0x0000)
struct HWDynamicAnnouncementWidget_UpdateDisplayedText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDynamicAnnouncementWidget_UpdateDisplayedText) == 0x000008, "Wrong alignment on HWDynamicAnnouncementWidget_UpdateDisplayedText");
static_assert(sizeof(HWDynamicAnnouncementWidget_UpdateDisplayedText) == 0x000018, "Wrong size on HWDynamicAnnouncementWidget_UpdateDisplayedText");
static_assert(offsetof(HWDynamicAnnouncementWidget_UpdateDisplayedText, InText) == 0x000000, "Member 'HWDynamicAnnouncementWidget_UpdateDisplayedText::InText' has a wrong offset!");

// Function HemingwayUI.HWCustomLobbyPlayer.SetBot
// 0x0018 (0x0018 - 0x0000)
struct HWCustomLobbyPlayer_SetBot final
{
public:
	struct FHWCustomBotConfig_Single              botConfig;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomLobbyPlayer_SetBot) == 0x000004, "Wrong alignment on HWCustomLobbyPlayer_SetBot");
static_assert(sizeof(HWCustomLobbyPlayer_SetBot) == 0x000018, "Wrong size on HWCustomLobbyPlayer_SetBot");
static_assert(offsetof(HWCustomLobbyPlayer_SetBot, botConfig) == 0x000000, "Member 'HWCustomLobbyPlayer_SetBot::botConfig' has a wrong offset!");

// Function HemingwayUI.HWMapButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct HWMapButton_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMapButton_SetSelected) == 0x000001, "Wrong alignment on HWMapButton_SetSelected");
static_assert(sizeof(HWMapButton_SetSelected) == 0x000001, "Wrong size on HWMapButton_SetSelected");
static_assert(offsetof(HWMapButton_SetSelected, bSelected) == 0x000000, "Member 'HWMapButton_SetSelected::bSelected' has a wrong offset!");

// Function HemingwayUI.HWMapSelectWidget.OnMapButtonAdded
// 0x0008 (0x0008 - 0x0000)
struct HWMapSelectWidget_OnMapButtonAdded final
{
public:
	class UHWMapButton*                           NewMapButton;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMapSelectWidget_OnMapButtonAdded) == 0x000008, "Wrong alignment on HWMapSelectWidget_OnMapButtonAdded");
static_assert(sizeof(HWMapSelectWidget_OnMapButtonAdded) == 0x000008, "Wrong size on HWMapSelectWidget_OnMapButtonAdded");
static_assert(offsetof(HWMapSelectWidget_OnMapButtonAdded, NewMapButton) == 0x000000, "Member 'HWMapSelectWidget_OnMapButtonAdded::NewMapButton' has a wrong offset!");

// Function HemingwayUI.HWMapSelectWidget.GetHWQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct HWMapSelectWidget_GetHWQueueDataFactory final
{
public:
	class UHWQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMapSelectWidget_GetHWQueueDataFactory) == 0x000008, "Wrong alignment on HWMapSelectWidget_GetHWQueueDataFactory");
static_assert(sizeof(HWMapSelectWidget_GetHWQueueDataFactory) == 0x000008, "Wrong size on HWMapSelectWidget_GetHWQueueDataFactory");
static_assert(offsetof(HWMapSelectWidget_GetHWQueueDataFactory, ReturnValue) == 0x000000, "Member 'HWMapSelectWidget_GetHWQueueDataFactory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.AddFilter
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreItemFilterWidget_AddFilter final
{
public:
	class UHWItemStoreItemFilterEntry*            FilterWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClearFilters;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreItemFilterWidget_AddFilter) == 0x000008, "Wrong alignment on HWItemStoreItemFilterWidget_AddFilter");
static_assert(sizeof(HWItemStoreItemFilterWidget_AddFilter) == 0x000010, "Wrong size on HWItemStoreItemFilterWidget_AddFilter");
static_assert(offsetof(HWItemStoreItemFilterWidget_AddFilter, FilterWidget) == 0x000000, "Member 'HWItemStoreItemFilterWidget_AddFilter::FilterWidget' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemFilterWidget_AddFilter, bShouldClearFilters) == 0x000008, "Member 'HWItemStoreItemFilterWidget_AddFilter::bShouldClearFilters' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.ClearFilters
// 0x0002 (0x0002 - 0x0000)
struct HWItemStoreItemFilterWidget_ClearFilters final
{
public:
	bool                                          bClearSearchText;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearRoles;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_ClearFilters) == 0x000001, "Wrong alignment on HWItemStoreItemFilterWidget_ClearFilters");
static_assert(sizeof(HWItemStoreItemFilterWidget_ClearFilters) == 0x000002, "Wrong size on HWItemStoreItemFilterWidget_ClearFilters");
static_assert(offsetof(HWItemStoreItemFilterWidget_ClearFilters, bClearSearchText) == 0x000000, "Member 'HWItemStoreItemFilterWidget_ClearFilters::bClearSearchText' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemFilterWidget_ClearFilters, bClearRoles) == 0x000001, "Member 'HWItemStoreItemFilterWidget_ClearFilters::bClearRoles' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.GetAllEntryTags
// 0x0020 (0x0020 - 0x0000)
struct HWItemStoreItemFilterWidget_GetAllEntryTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_GetAllEntryTags) == 0x000008, "Wrong alignment on HWItemStoreItemFilterWidget_GetAllEntryTags");
static_assert(sizeof(HWItemStoreItemFilterWidget_GetAllEntryTags) == 0x000020, "Wrong size on HWItemStoreItemFilterWidget_GetAllEntryTags");
static_assert(offsetof(HWItemStoreItemFilterWidget_GetAllEntryTags, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterWidget_GetAllEntryTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.PlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterWidget_PlayerInputTypeChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_PlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreItemFilterWidget_PlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreItemFilterWidget_PlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreItemFilterWidget_PlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreItemFilterWidget_PlayerInputTypeChanged, bIsGamepad) == 0x000000, "Member 'HWItemStoreItemFilterWidget_PlayerInputTypeChanged::bIsGamepad' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.RemoveFilter
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemFilterWidget_RemoveFilter final
{
public:
	class UHWItemStoreItemFilterEntry*            FilterWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_RemoveFilter) == 0x000008, "Wrong alignment on HWItemStoreItemFilterWidget_RemoveFilter");
static_assert(sizeof(HWItemStoreItemFilterWidget_RemoveFilter) == 0x000008, "Wrong size on HWItemStoreItemFilterWidget_RemoveFilter");
static_assert(offsetof(HWItemStoreItemFilterWidget_RemoveFilter, FilterWidget) == 0x000000, "Member 'HWItemStoreItemFilterWidget_RemoveFilter::FilterWidget' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterWidget_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreItemFilterWidget_UpdateLayout");
static_assert(sizeof(HWItemStoreItemFilterWidget_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreItemFilterWidget_UpdateLayout");
static_assert(offsetof(HWItemStoreItemFilterWidget_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreItemFilterWidget_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.GetEntryToFocus
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemFilterWidget_GetEntryToFocus final
{
public:
	const class UHWItemStoreItemFilterEntry*      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_GetEntryToFocus) == 0x000008, "Wrong alignment on HWItemStoreItemFilterWidget_GetEntryToFocus");
static_assert(sizeof(HWItemStoreItemFilterWidget_GetEntryToFocus) == 0x000008, "Wrong size on HWItemStoreItemFilterWidget_GetEntryToFocus");
static_assert(offsetof(HWItemStoreItemFilterWidget_GetEntryToFocus, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterWidget_GetEntryToFocus::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFilterWidget.HasActiveFilters
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemFilterWidget_HasActiveFilters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFilterWidget_HasActiveFilters) == 0x000001, "Wrong alignment on HWItemStoreItemFilterWidget_HasActiveFilters");
static_assert(sizeof(HWItemStoreItemFilterWidget_HasActiveFilters) == 0x000001, "Wrong size on HWItemStoreItemFilterWidget_HasActiveFilters");
static_assert(offsetof(HWItemStoreItemFilterWidget_HasActiveFilters, ReturnValue) == 0x000000, "Member 'HWItemStoreItemFilterWidget_HasActiveFilters::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreRoleFilterWidget.AddRoleFilter
// 0x0030 (0x0030 - 0x0000)
struct HWItemStoreRoleFilterWidget_AddRoleFilter final
{
public:
	struct FGameplayTag                           FilterTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FilterLabel;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHWAllItemListGroup>            CategorySortingTags;                               // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreRoleFilterWidget_AddRoleFilter) == 0x000008, "Wrong alignment on HWItemStoreRoleFilterWidget_AddRoleFilter");
static_assert(sizeof(HWItemStoreRoleFilterWidget_AddRoleFilter) == 0x000030, "Wrong size on HWItemStoreRoleFilterWidget_AddRoleFilter");
static_assert(offsetof(HWItemStoreRoleFilterWidget_AddRoleFilter, FilterTag) == 0x000000, "Member 'HWItemStoreRoleFilterWidget_AddRoleFilter::FilterTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreRoleFilterWidget_AddRoleFilter, FilterLabel) == 0x000008, "Member 'HWItemStoreRoleFilterWidget_AddRoleFilter::FilterLabel' has a wrong offset!");
static_assert(offsetof(HWItemStoreRoleFilterWidget_AddRoleFilter, CategorySortingTags) == 0x000020, "Member 'HWItemStoreRoleFilterWidget_AddRoleFilter::CategorySortingTags' has a wrong offset!");

// Function HemingwayUI.HWItemStoreRoleFilterWidget.RemoveRoleFilter
// 0x000C (0x000C - 0x0000)
struct HWItemStoreRoleFilterWidget_RemoveRoleFilter final
{
public:
	struct FGameplayTag                           FilterTag;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreRoleFilterWidget_RemoveRoleFilter) == 0x000004, "Wrong alignment on HWItemStoreRoleFilterWidget_RemoveRoleFilter");
static_assert(sizeof(HWItemStoreRoleFilterWidget_RemoveRoleFilter) == 0x00000C, "Wrong size on HWItemStoreRoleFilterWidget_RemoveRoleFilter");
static_assert(offsetof(HWItemStoreRoleFilterWidget_RemoveRoleFilter, FilterTag) == 0x000000, "Member 'HWItemStoreRoleFilterWidget_RemoveRoleFilter::FilterTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreRoleFilterWidget_RemoveRoleFilter, bShouldFilter) == 0x000008, "Member 'HWItemStoreRoleFilterWidget_RemoveRoleFilter::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardEntryWidget.DisplayAsItemReward
// 0x0010 (0x0010 - 0x0000)
struct HWDailyLoginRewardEntryWidget_DisplayAsItemReward final
{
public:
	const class UPlatformInventoryItem*           Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDailyLoginRewardEntryWidget_DisplayAsItemReward) == 0x000008, "Wrong alignment on HWDailyLoginRewardEntryWidget_DisplayAsItemReward");
static_assert(sizeof(HWDailyLoginRewardEntryWidget_DisplayAsItemReward) == 0x000010, "Wrong size on HWDailyLoginRewardEntryWidget_DisplayAsItemReward");
static_assert(offsetof(HWDailyLoginRewardEntryWidget_DisplayAsItemReward, Item) == 0x000000, "Member 'HWDailyLoginRewardEntryWidget_DisplayAsItemReward::Item' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardEntryWidget_DisplayAsItemReward, Quantity) == 0x000008, "Member 'HWDailyLoginRewardEntryWidget_DisplayAsItemReward::Quantity' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardEntryWidget.SetDay
// 0x0008 (0x0008 - 0x0000)
struct HWDailyLoginRewardEntryWidget_SetDay final
{
public:
	int32                                         DayNumber;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClaimed;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCurrentDay;                                     // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDailyLoginRewardEntryWidget_SetDay) == 0x000004, "Wrong alignment on HWDailyLoginRewardEntryWidget_SetDay");
static_assert(sizeof(HWDailyLoginRewardEntryWidget_SetDay) == 0x000008, "Wrong size on HWDailyLoginRewardEntryWidget_SetDay");
static_assert(offsetof(HWDailyLoginRewardEntryWidget_SetDay, DayNumber) == 0x000000, "Member 'HWDailyLoginRewardEntryWidget_SetDay::DayNumber' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardEntryWidget_SetDay, bIsClaimed) == 0x000004, "Member 'HWDailyLoginRewardEntryWidget_SetDay::bIsClaimed' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardEntryWidget_SetDay, bIsCurrentDay) == 0x000005, "Member 'HWDailyLoginRewardEntryWidget_SetDay::bIsCurrentDay' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPhaseTransitionWidget.DisplayTransitionTaskGroup
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup final
{
public:
	TArray<struct FDraftTask>                     TransitionTaskGroup;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup) == 0x000008, "Wrong alignment on HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup");
static_assert(sizeof(HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup) == 0x000010, "Wrong size on HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup");
static_assert(offsetof(HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup, TransitionTaskGroup) == 0x000000, "Member 'HWDraftLobbyPhaseTransitionWidget_DisplayTransitionTaskGroup::TransitionTaskGroup' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPhaseTransitionWidget.SetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPhaseTransitionWidget_SetDraftActor final
{
public:
	class ADraftReplicatedActor*                  InDraftActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPhaseTransitionWidget_SetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyPhaseTransitionWidget_SetDraftActor");
static_assert(sizeof(HWDraftLobbyPhaseTransitionWidget_SetDraftActor) == 0x000008, "Wrong size on HWDraftLobbyPhaseTransitionWidget_SetDraftActor");
static_assert(offsetof(HWDraftLobbyPhaseTransitionWidget_SetDraftActor, InDraftActor) == 0x000000, "Member 'HWDraftLobbyPhaseTransitionWidget_SetDraftActor::InDraftActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPhaseTransitionWidget.GetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPhaseTransitionWidget_GetDraftActor final
{
public:
	class ADraftReplicatedActor*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPhaseTransitionWidget_GetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyPhaseTransitionWidget_GetDraftActor");
static_assert(sizeof(HWDraftLobbyPhaseTransitionWidget_GetDraftActor) == 0x000008, "Wrong size on HWDraftLobbyPhaseTransitionWidget_GetDraftActor");
static_assert(offsetof(HWDraftLobbyPhaseTransitionWidget_GetDraftActor, ReturnValue) == 0x000000, "Member 'HWDraftLobbyPhaseTransitionWidget_GetDraftActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.CanClaimLoginRewardUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated final
{
public:
	bool                                          bCanClaim;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated) == 0x000001, "Wrong alignment on HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated");
static_assert(sizeof(HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated) == 0x000001, "Wrong size on HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated");
static_assert(offsetof(HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated, bCanClaim) == 0x000000, "Member 'HWDailyLoginRewardWidget_CanClaimLoginRewardUpdated::bCanClaim' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.DailyProgressUpdated
// 0x0004 (0x0004 - 0x0000)
struct HWDailyLoginRewardWidget_DailyProgressUpdated final
{
public:
	int32                                         ClaimedDays;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_DailyProgressUpdated) == 0x000004, "Wrong alignment on HWDailyLoginRewardWidget_DailyProgressUpdated");
static_assert(sizeof(HWDailyLoginRewardWidget_DailyProgressUpdated) == 0x000004, "Wrong size on HWDailyLoginRewardWidget_DailyProgressUpdated");
static_assert(offsetof(HWDailyLoginRewardWidget_DailyProgressUpdated, ClaimedDays) == 0x000000, "Member 'HWDailyLoginRewardWidget_DailyProgressUpdated::ClaimedDays' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.HandleInventoryCacheUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWDailyLoginRewardWidget_HandleInventoryCacheUpdated final
{
public:
	TArray<int32>                                 UpdatedItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_HandleInventoryCacheUpdated) == 0x000008, "Wrong alignment on HWDailyLoginRewardWidget_HandleInventoryCacheUpdated");
static_assert(sizeof(HWDailyLoginRewardWidget_HandleInventoryCacheUpdated) == 0x000018, "Wrong size on HWDailyLoginRewardWidget_HandleInventoryCacheUpdated");
static_assert(offsetof(HWDailyLoginRewardWidget_HandleInventoryCacheUpdated, UpdatedItems) == 0x000000, "Member 'HWDailyLoginRewardWidget_HandleInventoryCacheUpdated::UpdatedItems' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardWidget_HandleInventoryCacheUpdated, PlayerInfo) == 0x000010, "Member 'HWDailyLoginRewardWidget_HandleInventoryCacheUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.HandleLocalPlayerInfoReceived
// 0x0008 (0x0008 - 0x0000)
struct HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived) == 0x000008, "Wrong alignment on HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived");
static_assert(sizeof(HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived) == 0x000008, "Wrong size on HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived");
static_assert(offsetof(HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived, PlayerInfo) == 0x000000, "Member 'HWDailyLoginRewardWidget_HandleLocalPlayerInfoReceived::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.OnGetVendorLoot
// 0x0110 (0x0110 - 0x0000)
struct HWDailyLoginRewardWidget_OnGetVendorLoot final
{
public:
	int32                                         VendorId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRH_LootId>                     LootIds;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRHAPI_Vendor                          Vendor;                                            // 0x0018(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_OnGetVendorLoot) == 0x000008, "Wrong alignment on HWDailyLoginRewardWidget_OnGetVendorLoot");
static_assert(sizeof(HWDailyLoginRewardWidget_OnGetVendorLoot) == 0x000110, "Wrong size on HWDailyLoginRewardWidget_OnGetVendorLoot");
static_assert(offsetof(HWDailyLoginRewardWidget_OnGetVendorLoot, VendorId) == 0x000000, "Member 'HWDailyLoginRewardWidget_OnGetVendorLoot::VendorId' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardWidget_OnGetVendorLoot, LootIds) == 0x000008, "Member 'HWDailyLoginRewardWidget_OnGetVendorLoot::LootIds' has a wrong offset!");
static_assert(offsetof(HWDailyLoginRewardWidget_OnGetVendorLoot, Vendor) == 0x000018, "Member 'HWDailyLoginRewardWidget_OnGetVendorLoot::Vendor' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.CanClaimLoginReward
// 0x0001 (0x0001 - 0x0000)
struct HWDailyLoginRewardWidget_CanClaimLoginReward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_CanClaimLoginReward) == 0x000001, "Wrong alignment on HWDailyLoginRewardWidget_CanClaimLoginReward");
static_assert(sizeof(HWDailyLoginRewardWidget_CanClaimLoginReward) == 0x000001, "Wrong size on HWDailyLoginRewardWidget_CanClaimLoginReward");
static_assert(offsetof(HWDailyLoginRewardWidget_CanClaimLoginReward, ReturnValue) == 0x000000, "Member 'HWDailyLoginRewardWidget_CanClaimLoginReward::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.GetDailyLoginEntries
// 0x0010 (0x0010 - 0x0000)
struct HWDailyLoginRewardWidget_GetDailyLoginEntries final
{
public:
	TArray<class UHWDailyLoginRewardEntryWidget*> ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_GetDailyLoginEntries) == 0x000008, "Wrong alignment on HWDailyLoginRewardWidget_GetDailyLoginEntries");
static_assert(sizeof(HWDailyLoginRewardWidget_GetDailyLoginEntries) == 0x000010, "Wrong size on HWDailyLoginRewardWidget_GetDailyLoginEntries");
static_assert(offsetof(HWDailyLoginRewardWidget_GetDailyLoginEntries, ReturnValue) == 0x000000, "Member 'HWDailyLoginRewardWidget_GetDailyLoginEntries::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDailyLoginRewardWidget.IsClaimingReward
// 0x0001 (0x0001 - 0x0000)
struct HWDailyLoginRewardWidget_IsClaimingReward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDailyLoginRewardWidget_IsClaimingReward) == 0x000001, "Wrong alignment on HWDailyLoginRewardWidget_IsClaimingReward");
static_assert(sizeof(HWDailyLoginRewardWidget_IsClaimingReward) == 0x000001, "Wrong size on HWDailyLoginRewardWidget_IsClaimingReward");
static_assert(offsetof(HWDailyLoginRewardWidget_IsClaimingReward, ReturnValue) == 0x000000, "Member 'HWDailyLoginRewardWidget_IsClaimingReward::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFounderEditionsWidget.HandleInventoryCacheUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWFounderEditionsWidget_HandleInventoryCacheUpdated final
{
public:
	TArray<int32>                                 ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFounderEditionsWidget_HandleInventoryCacheUpdated) == 0x000008, "Wrong alignment on HWFounderEditionsWidget_HandleInventoryCacheUpdated");
static_assert(sizeof(HWFounderEditionsWidget_HandleInventoryCacheUpdated) == 0x000018, "Wrong size on HWFounderEditionsWidget_HandleInventoryCacheUpdated");
static_assert(offsetof(HWFounderEditionsWidget_HandleInventoryCacheUpdated, ItemIds) == 0x000000, "Member 'HWFounderEditionsWidget_HandleInventoryCacheUpdated::ItemIds' has a wrong offset!");
static_assert(offsetof(HWFounderEditionsWidget_HandleInventoryCacheUpdated, PlayerInfo) == 0x000010, "Member 'HWFounderEditionsWidget_HandleInventoryCacheUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWFounderEditionsWidget.PurchaseFoundersLevel
// 0x0001 (0x0001 - 0x0000)
struct HWFounderEditionsWidget_PurchaseFoundersLevel final
{
public:
	EHWFoundersOwnershipLevel                     LevelToPurchase;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFounderEditionsWidget_PurchaseFoundersLevel) == 0x000001, "Wrong alignment on HWFounderEditionsWidget_PurchaseFoundersLevel");
static_assert(sizeof(HWFounderEditionsWidget_PurchaseFoundersLevel) == 0x000001, "Wrong size on HWFounderEditionsWidget_PurchaseFoundersLevel");
static_assert(offsetof(HWFounderEditionsWidget_PurchaseFoundersLevel, LevelToPurchase) == 0x000000, "Member 'HWFounderEditionsWidget_PurchaseFoundersLevel::LevelToPurchase' has a wrong offset!");

// Function HemingwayUI.HWFounderEditionsWidget.UpdateFoundersLevelOffer
// 0x0010 (0x0010 - 0x0000)
struct HWFounderEditionsWidget_UpdateFoundersLevelOffer final
{
public:
	EHWFoundersOwnershipLevel                     OwnershipLevel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHPortalOffer*                         PortalOffer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFounderEditionsWidget_UpdateFoundersLevelOffer) == 0x000008, "Wrong alignment on HWFounderEditionsWidget_UpdateFoundersLevelOffer");
static_assert(sizeof(HWFounderEditionsWidget_UpdateFoundersLevelOffer) == 0x000010, "Wrong size on HWFounderEditionsWidget_UpdateFoundersLevelOffer");
static_assert(offsetof(HWFounderEditionsWidget_UpdateFoundersLevelOffer, OwnershipLevel) == 0x000000, "Member 'HWFounderEditionsWidget_UpdateFoundersLevelOffer::OwnershipLevel' has a wrong offset!");
static_assert(offsetof(HWFounderEditionsWidget_UpdateFoundersLevelOffer, PortalOffer) == 0x000008, "Member 'HWFounderEditionsWidget_UpdateFoundersLevelOffer::PortalOffer' has a wrong offset!");

// Function HemingwayUI.HWFounderEditionsWidget.UpdateFoundersOwnershipDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay final
{
public:
	EHWFoundersOwnershipLevel                     OwnershipLevel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay) == 0x000001, "Wrong alignment on HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay");
static_assert(sizeof(HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay) == 0x000001, "Wrong size on HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay");
static_assert(offsetof(HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay, OwnershipLevel) == 0x000000, "Member 'HWFounderEditionsWidget_UpdateFoundersOwnershipDisplay::OwnershipLevel' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.AddedDescriptionLine
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Ability_AddedDescriptionLine final
{
public:
	class UHWTooltipWidget_AbilityDescription*    AddedLine;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_AddedDescriptionLine) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_AddedDescriptionLine");
static_assert(sizeof(HWTooltipWidget_Ability_AddedDescriptionLine) == 0x000008, "Wrong size on HWTooltipWidget_Ability_AddedDescriptionLine");
static_assert(offsetof(HWTooltipWidget_Ability_AddedDescriptionLine, AddedLine) == 0x000000, "Member 'HWTooltipWidget_Ability_AddedDescriptionLine::AddedLine' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.AddedDetailLine
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Ability_AddedDetailLine final
{
public:
	class UHWTooltipWidget_AbilityDetail*         AddedLine;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_AddedDetailLine) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_AddedDetailLine");
static_assert(sizeof(HWTooltipWidget_Ability_AddedDetailLine) == 0x000008, "Wrong size on HWTooltipWidget_Ability_AddedDetailLine");
static_assert(offsetof(HWTooltipWidget_Ability_AddedDetailLine, AddedLine) == 0x000000, "Member 'HWTooltipWidget_Ability_AddedDetailLine::AddedLine' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.AddedDividerLine
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Ability_AddedDividerLine final
{
public:
	class UHWWidget*                              AddedLine;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_AddedDividerLine) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_AddedDividerLine");
static_assert(sizeof(HWTooltipWidget_Ability_AddedDividerLine) == 0x000008, "Wrong size on HWTooltipWidget_Ability_AddedDividerLine");
static_assert(offsetof(HWTooltipWidget_Ability_AddedDividerLine, AddedLine) == 0x000000, "Member 'HWTooltipWidget_Ability_AddedDividerLine::AddedLine' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.DisplayEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Ability_DisplayEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_DisplayEquipmentItem) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_DisplayEquipmentItem");
static_assert(sizeof(HWTooltipWidget_Ability_DisplayEquipmentItem) == 0x000008, "Wrong size on HWTooltipWidget_Ability_DisplayEquipmentItem");
static_assert(offsetof(HWTooltipWidget_Ability_DisplayEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWTooltipWidget_Ability_DisplayEquipmentItem::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.DisplayIcon
// 0x0028 (0x0028 - 0x0000)
struct HWTooltipWidget_Ability_DisplayIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_DisplayIcon) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_DisplayIcon");
static_assert(sizeof(HWTooltipWidget_Ability_DisplayIcon) == 0x000028, "Wrong size on HWTooltipWidget_Ability_DisplayIcon");
static_assert(offsetof(HWTooltipWidget_Ability_DisplayIcon, Icon) == 0x000000, "Member 'HWTooltipWidget_Ability_DisplayIcon::Icon' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.DisplayRange
// 0x0004 (0x0004 - 0x0000)
struct HWTooltipWidget_Ability_DisplayRange final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_DisplayRange) == 0x000004, "Wrong alignment on HWTooltipWidget_Ability_DisplayRange");
static_assert(sizeof(HWTooltipWidget_Ability_DisplayRange) == 0x000004, "Wrong size on HWTooltipWidget_Ability_DisplayRange");
static_assert(offsetof(HWTooltipWidget_Ability_DisplayRange, Range) == 0x000000, "Member 'HWTooltipWidget_Ability_DisplayRange::Range' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.DisplayTitle
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Ability_DisplayTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_DisplayTitle) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_DisplayTitle");
static_assert(sizeof(HWTooltipWidget_Ability_DisplayTitle) == 0x000018, "Wrong size on HWTooltipWidget_Ability_DisplayTitle");
static_assert(offsetof(HWTooltipWidget_Ability_DisplayTitle, Title) == 0x000000, "Member 'HWTooltipWidget_Ability_DisplayTitle::Title' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.DisplayType
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Ability_DisplayType final
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Ability_DisplayType) == 0x000004, "Wrong alignment on HWTooltipWidget_Ability_DisplayType");
static_assert(sizeof(HWTooltipWidget_Ability_DisplayType) == 0x000008, "Wrong size on HWTooltipWidget_Ability_DisplayType");
static_assert(offsetof(HWTooltipWidget_Ability_DisplayType, TypeTag) == 0x000000, "Member 'HWTooltipWidget_Ability_DisplayType::TypeTag' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Ability.Populate
// 0x0010 (0x0010 - 0x0000)
struct HWTooltipWidget_Ability_Populate final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidget_Ability_Populate) == 0x000008, "Wrong alignment on HWTooltipWidget_Ability_Populate");
static_assert(sizeof(HWTooltipWidget_Ability_Populate) == 0x000010, "Wrong size on HWTooltipWidget_Ability_Populate");
static_assert(offsetof(HWTooltipWidget_Ability_Populate, EquipmentItem) == 0x000000, "Member 'HWTooltipWidget_Ability_Populate::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_Ability_Populate, AbilityLevel) == 0x000008, "Member 'HWTooltipWidget_Ability_Populate::AbilityLevel' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsAbilityDetailModal.ToggleDetailModal
// 0x0002 (0x0002 - 0x0000)
struct HWGodDetailsAbilityDetailModal_ToggleDetailModal final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsAbilityDetailModal_ToggleDetailModal) == 0x000001, "Wrong alignment on HWGodDetailsAbilityDetailModal_ToggleDetailModal");
static_assert(sizeof(HWGodDetailsAbilityDetailModal_ToggleDetailModal) == 0x000002, "Wrong size on HWGodDetailsAbilityDetailModal_ToggleDetailModal");
static_assert(offsetof(HWGodDetailsAbilityDetailModal_ToggleDetailModal, bDisplay) == 0x000000, "Member 'HWGodDetailsAbilityDetailModal_ToggleDetailModal::bDisplay' has a wrong offset!");
static_assert(offsetof(HWGodDetailsAbilityDetailModal_ToggleDetailModal, ReturnValue) == 0x000001, "Member 'HWGodDetailsAbilityDetailModal_ToggleDetailModal::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsAbilityDetailModal.IsModalToggledOn
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsAbilityDetailModal_IsModalToggledOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsAbilityDetailModal_IsModalToggledOn) == 0x000001, "Wrong alignment on HWGodDetailsAbilityDetailModal_IsModalToggledOn");
static_assert(sizeof(HWGodDetailsAbilityDetailModal_IsModalToggledOn) == 0x000001, "Wrong size on HWGodDetailsAbilityDetailModal_IsModalToggledOn");
static_assert(offsetof(HWGodDetailsAbilityDetailModal_IsModalToggledOn, ReturnValue) == 0x000000, "Member 'HWGodDetailsAbilityDetailModal_IsModalToggledOn::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEventTextBuilderBase.BroadcastEventTextBuilt
// 0x0018 (0x0018 - 0x0000)
struct HWEventTextBuilderBase_BroadcastEventTextBuilt final
{
public:
	class FText                                   BuiltText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextBuilderBase_BroadcastEventTextBuilt) == 0x000008, "Wrong alignment on HWEventTextBuilderBase_BroadcastEventTextBuilt");
static_assert(sizeof(HWEventTextBuilderBase_BroadcastEventTextBuilt) == 0x000018, "Wrong size on HWEventTextBuilderBase_BroadcastEventTextBuilt");
static_assert(offsetof(HWEventTextBuilderBase_BroadcastEventTextBuilt, BuiltText) == 0x000000, "Member 'HWEventTextBuilderBase_BroadcastEventTextBuilt::BuiltText' has a wrong offset!");

// Function HemingwayUI.HWEventTextBuilderBase.BuildEventText
// 0x0098 (0x0098 - 0x0000)
struct HWEventTextBuilderBase_BuildEventText final
{
public:
	struct FGameplayTag                           EventTextTag;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AHWGameHUD*                       GameHUD;                                           // 0x0090(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextBuilderBase_BuildEventText) == 0x000008, "Wrong alignment on HWEventTextBuilderBase_BuildEventText");
static_assert(sizeof(HWEventTextBuilderBase_BuildEventText) == 0x000098, "Wrong size on HWEventTextBuilderBase_BuildEventText");
static_assert(offsetof(HWEventTextBuilderBase_BuildEventText, EventTextTag) == 0x000000, "Member 'HWEventTextBuilderBase_BuildEventText::EventTextTag' has a wrong offset!");
static_assert(offsetof(HWEventTextBuilderBase_BuildEventText, EventContext) == 0x000008, "Member 'HWEventTextBuilderBase_BuildEventText::EventContext' has a wrong offset!");
static_assert(offsetof(HWEventTextBuilderBase_BuildEventText, GameHUD) == 0x000090, "Member 'HWEventTextBuilderBase_BuildEventText::GameHUD' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsEntryWidget.SetGodItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsEntryWidget_SetGodItem final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldResetView;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsEntryWidget_SetGodItem) == 0x000008, "Wrong alignment on HWGodDetailsEntryWidget_SetGodItem");
static_assert(sizeof(HWGodDetailsEntryWidget_SetGodItem) == 0x000010, "Wrong size on HWGodDetailsEntryWidget_SetGodItem");
static_assert(offsetof(HWGodDetailsEntryWidget_SetGodItem, InGodItem) == 0x000000, "Member 'HWGodDetailsEntryWidget_SetGodItem::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsEntryWidget_SetGodItem, bShouldResetView) == 0x000008, "Member 'HWGodDetailsEntryWidget_SetGodItem::bShouldResetView' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsEntryWidget.ShouldShowEnterPracticePrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt) == 0x000001, "Wrong alignment on HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt");
static_assert(sizeof(HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt) == 0x000001, "Wrong size on HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt");
static_assert(offsetof(HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt, ReturnValue) == 0x000000, "Member 'HWGodDetailsEntryWidget_ShouldShowEnterPracticePrompt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsEntryWidget.ShouldShowToggleGodPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt) == 0x000001, "Wrong alignment on HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt");
static_assert(sizeof(HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt) == 0x000001, "Wrong size on HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt");
static_assert(offsetof(HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt, ReturnValue) == 0x000000, "Member 'HWGodDetailsEntryWidget_ShouldShowToggleGodPrompt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsEntryWidget.ShouldShowUnlockPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsEntryWidget_ShouldShowUnlockPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsEntryWidget_ShouldShowUnlockPrompt) == 0x000001, "Wrong alignment on HWGodDetailsEntryWidget_ShouldShowUnlockPrompt");
static_assert(sizeof(HWGodDetailsEntryWidget_ShouldShowUnlockPrompt) == 0x000001, "Wrong size on HWGodDetailsEntryWidget_ShouldShowUnlockPrompt");
static_assert(offsetof(HWGodDetailsEntryWidget_ShouldShowUnlockPrompt, ReturnValue) == 0x000000, "Member 'HWGodDetailsEntryWidget_ShouldShowUnlockPrompt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFPSDisplayWidget.UpdateFPS
// 0x0004 (0x0004 - 0x0000)
struct HWFPSDisplayWidget_UpdateFPS final
{
public:
	float                                         FPSCounter;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFPSDisplayWidget_UpdateFPS) == 0x000004, "Wrong alignment on HWFPSDisplayWidget_UpdateFPS");
static_assert(sizeof(HWFPSDisplayWidget_UpdateFPS) == 0x000004, "Wrong size on HWFPSDisplayWidget_UpdateFPS");
static_assert(offsetof(HWFPSDisplayWidget_UpdateFPS, FPSCounter) == 0x000000, "Member 'HWFPSDisplayWidget_UpdateFPS::FPSCounter' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderStatsDisplayEntryWidget.SetStatIcon
// 0x0028 (0x0028 - 0x0000)
struct HWGodBuilderStatsDisplayEntryWidget_SetStatIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              InStatIcon;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderStatsDisplayEntryWidget_SetStatIcon) == 0x000008, "Wrong alignment on HWGodBuilderStatsDisplayEntryWidget_SetStatIcon");
static_assert(sizeof(HWGodBuilderStatsDisplayEntryWidget_SetStatIcon) == 0x000028, "Wrong size on HWGodBuilderStatsDisplayEntryWidget_SetStatIcon");
static_assert(offsetof(HWGodBuilderStatsDisplayEntryWidget_SetStatIcon, InStatIcon) == 0x000000, "Member 'HWGodBuilderStatsDisplayEntryWidget_SetStatIcon::InStatIcon' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderStatsDisplayEntryWidget.SetStatValues
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderStatsDisplayEntryWidget_SetStatValues final
{
public:
	class FText                                   InValueFormat;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InBaseValue;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InChangeValue;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderStatsDisplayEntryWidget_SetStatValues) == 0x000008, "Wrong alignment on HWGodBuilderStatsDisplayEntryWidget_SetStatValues");
static_assert(sizeof(HWGodBuilderStatsDisplayEntryWidget_SetStatValues) == 0x000020, "Wrong size on HWGodBuilderStatsDisplayEntryWidget_SetStatValues");
static_assert(offsetof(HWGodBuilderStatsDisplayEntryWidget_SetStatValues, InValueFormat) == 0x000000, "Member 'HWGodBuilderStatsDisplayEntryWidget_SetStatValues::InValueFormat' has a wrong offset!");
static_assert(offsetof(HWGodBuilderStatsDisplayEntryWidget_SetStatValues, InBaseValue) == 0x000018, "Member 'HWGodBuilderStatsDisplayEntryWidget_SetStatValues::InBaseValue' has a wrong offset!");
static_assert(offsetof(HWGodBuilderStatsDisplayEntryWidget_SetStatValues, InChangeValue) == 0x00001C, "Member 'HWGodBuilderStatsDisplayEntryWidget_SetStatValues::InChangeValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderStatsDisplayEntryWidget.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderStatsDisplayEntryWidget_SetTitleText final
{
public:
	class FText                                   InTitleText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderStatsDisplayEntryWidget_SetTitleText) == 0x000008, "Wrong alignment on HWGodBuilderStatsDisplayEntryWidget_SetTitleText");
static_assert(sizeof(HWGodBuilderStatsDisplayEntryWidget_SetTitleText) == 0x000018, "Wrong size on HWGodBuilderStatsDisplayEntryWidget_SetTitleText");
static_assert(offsetof(HWGodBuilderStatsDisplayEntryWidget_SetTitleText, InTitleText) == 0x000000, "Member 'HWGodBuilderStatsDisplayEntryWidget_SetTitleText::InTitleText' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetPopupManager
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUDWidget_GetPopupManager final
{
public:
	class URHPopupManager*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetPopupManager) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetPopupManager");
static_assert(sizeof(HWBaseHUDWidget_GetPopupManager) == 0x000008, "Wrong size on HWBaseHUDWidget_GetPopupManager");
static_assert(offsetof(HWBaseHUDWidget_GetPopupManager, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetPopupManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.StartHUDNavigation
// 0x0001 (0x0001 - 0x0000)
struct HWBaseHUDWidget_StartHUDNavigation final
{
public:
	bool                                          bResetToFirstWidget;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_StartHUDNavigation) == 0x000001, "Wrong alignment on HWBaseHUDWidget_StartHUDNavigation");
static_assert(sizeof(HWBaseHUDWidget_StartHUDNavigation) == 0x000001, "Wrong size on HWBaseHUDWidget_StartHUDNavigation");
static_assert(offsetof(HWBaseHUDWidget_StartHUDNavigation, bResetToFirstWidget) == 0x000000, "Member 'HWBaseHUDWidget_StartHUDNavigation::bResetToFirstWidget' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetCanvasPanels
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUDWidget_GetCanvasPanels final
{
public:
	TArray<class UHWCanvasPanel*>                 ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetCanvasPanels) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetCanvasPanels");
static_assert(sizeof(HWBaseHUDWidget_GetCanvasPanels) == 0x000010, "Wrong size on HWBaseHUDWidget_GetCanvasPanels");
static_assert(offsetof(HWBaseHUDWidget_GetCanvasPanels, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetCanvasPanels::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetCurrentFocusedHUDNavWidget
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget final
{
public:
	class UHWWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget");
static_assert(sizeof(HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget) == 0x000008, "Wrong size on HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget");
static_assert(offsetof(HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetCurrentFocusedHUDNavWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetHUDNavigableWidgets
// 0x0018 (0x0018 - 0x0000)
struct HWBaseHUDWidget_GetHUDNavigableWidgets final
{
public:
	int32                                         ActiveWidgetIndex;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWWidget*>                      ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetHUDNavigableWidgets) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetHUDNavigableWidgets");
static_assert(sizeof(HWBaseHUDWidget_GetHUDNavigableWidgets) == 0x000018, "Wrong size on HWBaseHUDWidget_GetHUDNavigableWidgets");
static_assert(offsetof(HWBaseHUDWidget_GetHUDNavigableWidgets, ActiveWidgetIndex) == 0x000000, "Member 'HWBaseHUDWidget_GetHUDNavigableWidgets::ActiveWidgetIndex' has a wrong offset!");
static_assert(offsetof(HWBaseHUDWidget_GetHUDNavigableWidgets, ReturnValue) == 0x000008, "Member 'HWBaseHUDWidget_GetHUDNavigableWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetHWWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUDWidget_GetHWWidgets final
{
public:
	TArray<class UHWWidget*>                      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetHWWidgets) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetHWWidgets");
static_assert(sizeof(HWBaseHUDWidget_GetHWWidgets) == 0x000010, "Wrong size on HWBaseHUDWidget_GetHWWidgets");
static_assert(offsetof(HWBaseHUDWidget_GetHWWidgets, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetHWWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetScreenAlertManager
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUDWidget_GetScreenAlertManager final
{
public:
	class UHWScreenAlertManager*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetScreenAlertManager) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetScreenAlertManager");
static_assert(sizeof(HWBaseHUDWidget_GetScreenAlertManager) == 0x000008, "Wrong size on HWBaseHUDWidget_GetScreenAlertManager");
static_assert(offsetof(HWBaseHUDWidget_GetScreenAlertManager, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetScreenAlertManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetStickyWidgetsData
// 0x0010 (0x0010 - 0x0000)
struct HWBaseHUDWidget_GetStickyWidgetsData final
{
public:
	TArray<struct FStickyWidgetData>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetStickyWidgetsData) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetStickyWidgetsData");
static_assert(sizeof(HWBaseHUDWidget_GetStickyWidgetsData) == 0x000010, "Wrong size on HWBaseHUDWidget_GetStickyWidgetsData");
static_assert(offsetof(HWBaseHUDWidget_GetStickyWidgetsData, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetStickyWidgetsData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.GetTooltipWidgetManager
// 0x0008 (0x0008 - 0x0000)
struct HWBaseHUDWidget_GetTooltipWidgetManager final
{
public:
	class UHWTooltipWidgetManager*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_GetTooltipWidgetManager) == 0x000008, "Wrong alignment on HWBaseHUDWidget_GetTooltipWidgetManager");
static_assert(sizeof(HWBaseHUDWidget_GetTooltipWidgetManager) == 0x000008, "Wrong size on HWBaseHUDWidget_GetTooltipWidgetManager");
static_assert(offsetof(HWBaseHUDWidget_GetTooltipWidgetManager, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_GetTooltipWidgetManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWBaseHUDWidget.IsHUDNavigationActive
// 0x0001 (0x0001 - 0x0000)
struct HWBaseHUDWidget_IsHUDNavigationActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBaseHUDWidget_IsHUDNavigationActive) == 0x000001, "Wrong alignment on HWBaseHUDWidget_IsHUDNavigationActive");
static_assert(sizeof(HWBaseHUDWidget_IsHUDNavigationActive) == 0x000001, "Wrong size on HWBaseHUDWidget_IsHUDNavigationActive");
static_assert(offsetof(HWBaseHUDWidget_IsHUDNavigationActive, ReturnValue) == 0x000000, "Member 'HWBaseHUDWidget_IsHUDNavigationActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyHUDWidget.HasValidJoinedSession
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyHUDWidget_HasValidJoinedSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyHUDWidget_HasValidJoinedSession) == 0x000001, "Wrong alignment on HWDraftLobbyHUDWidget_HasValidJoinedSession");
static_assert(sizeof(HWDraftLobbyHUDWidget_HasValidJoinedSession) == 0x000001, "Wrong size on HWDraftLobbyHUDWidget_HasValidJoinedSession");
static_assert(offsetof(HWDraftLobbyHUDWidget_HasValidJoinedSession, ReturnValue) == 0x000000, "Member 'HWDraftLobbyHUDWidget_HasValidJoinedSession::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.DisplayButtonEquipStatus
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus final
{
public:
	EHWButtonEquipStatus                          ButtonStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus, ButtonStatus) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_DisplayButtonEquipStatus::ButtonStatus' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.DisplayCollectionItemStatus
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus final
{
public:
	EHWCollectionItemStatus                       ItemStatus;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus, ItemStatus) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_DisplayCollectionItemStatus::ItemStatus' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.DisplayCollectionType
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_DisplayCollectionType final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_DisplayCollectionType) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_DisplayCollectionType");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_DisplayCollectionType) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_DisplayCollectionType");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_DisplayCollectionType, CollectionType) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_DisplayCollectionType::CollectionType' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.DisplayPriceItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_DisplayPriceItem final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_DisplayPriceItem) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_DisplayPriceItem");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_DisplayPriceItem) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_DisplayPriceItem");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_DisplayPriceItem, PriceItem) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_DisplayPriceItem::PriceItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_DisplayPriceItem, PriceGroup) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_DisplayPriceItem::PriceGroup' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.EquipPreviewStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated final
{
public:
	bool                                          bIsInEquipPreview;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated, bIsInEquipPreview) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_EquipPreviewStateUpdated::bIsInEquipPreview' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.HandleActiveCollectionTabChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged, TabBarWidget) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged, TabIndex) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged, Cause) == 0x00000C, "Member 'HWGodDetailsGodCollectionWidget_HandleActiveCollectionTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.HandleEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.HandleEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.HandleEntryButtonUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered, InventoryItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_HandleEntryButtonUnhovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.OnBoolAppSettingChanged
// 0x000C (0x000C - 0x0000)
struct HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged final
{
public:
	struct FGameplayTag                           AppSettingTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged) == 0x000004, "Wrong alignment on HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged) == 0x00000C, "Wrong size on HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged, AppSettingTag) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged::AppSettingTag' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged, bValue) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_OnBoolAppSettingChanged::bValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.OnPlayerCardEquipPreviewStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged final
{
public:
	EHWPlayerCardEquipState                       EquipState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged, EquipState) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_OnPlayerCardEquipPreviewStateChanged::EquipState' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.PreviewInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_PreviewInventoryItem final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_PreviewInventoryItem) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_PreviewInventoryItem");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_PreviewInventoryItem) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_PreviewInventoryItem");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_PreviewInventoryItem, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_PreviewInventoryItem::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_PreviewInventoryItem, InventoryItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_PreviewInventoryItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.SetEquippedCollectionForGod
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCollectionItem*                InCollectionItem;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod, InGodItem) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod, InCollectionItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_SetEquippedCollectionForGod::InCollectionItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.UnequipCollectionItemForGod
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCollectionItem*                InCollectionItem;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod, InGodItem) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod, InCollectionItem) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_UnequipCollectionItemForGod::InCollectionItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.UpdateUnequipButtonDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay) == 0x000001, "Wrong alignment on HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay) == 0x000001, "Wrong size on HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay, bIsVisible) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_UpdateUnequipButtonDisplay::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.GetDefaultSkinForGod
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWSkinItem*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod, InGodItem) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod, ReturnValue) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_GetDefaultSkinForGod::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.GetEquippedSkinForGod
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWSkinItem*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod) == 0x000010, "Wrong size on HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod, InGodItem) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod, ReturnValue) == 0x000008, "Member 'HWGodDetailsGodCollectionWidget_GetEquippedSkinForGod::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.GetPreviewedInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem) == 0x000008, "Wrong size on HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem, ReturnValue) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_GetPreviewedInventoryItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodCollectionWidget.GetSelectedInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem) == 0x000008, "Wrong alignment on HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem");
static_assert(sizeof(HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem) == 0x000008, "Wrong size on HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem");
static_assert(offsetof(HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem, ReturnValue) == 0x000000, "Member 'HWGodDetailsGodCollectionWidget_GetSelectedInventoryItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEditableTextBox.GetCharacterCount
// 0x0004 (0x0004 - 0x0000)
struct HWEditableTextBox_GetCharacterCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEditableTextBox_GetCharacterCount) == 0x000004, "Wrong alignment on HWEditableTextBox_GetCharacterCount");
static_assert(sizeof(HWEditableTextBox_GetCharacterCount) == 0x000004, "Wrong size on HWEditableTextBox_GetCharacterCount");
static_assert(offsetof(HWEditableTextBox_GetCharacterCount, ReturnValue) == 0x000000, "Member 'HWEditableTextBox_GetCharacterCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEditableTextBox.GetCharacterLimit
// 0x0004 (0x0004 - 0x0000)
struct HWEditableTextBox_GetCharacterLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEditableTextBox_GetCharacterLimit) == 0x000004, "Wrong alignment on HWEditableTextBox_GetCharacterLimit");
static_assert(sizeof(HWEditableTextBox_GetCharacterLimit) == 0x000004, "Wrong size on HWEditableTextBox_GetCharacterLimit");
static_assert(offsetof(HWEditableTextBox_GetCharacterLimit, ReturnValue) == 0x000000, "Member 'HWEditableTextBox_GetCharacterLimit::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionProgressWidget.UpdateLevel
// 0x0058 (0x0058 - 0x0000)
struct HWGodAscensionProgressWidget_UpdateLevel final
{
public:
	TSoftObjectPtr<class UTexture2D>              TierCompletedIcon;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              CurrentTierGoalIcon;                               // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodAscensionProgressWidget_UpdateLevel) == 0x000008, "Wrong alignment on HWGodAscensionProgressWidget_UpdateLevel");
static_assert(sizeof(HWGodAscensionProgressWidget_UpdateLevel) == 0x000058, "Wrong size on HWGodAscensionProgressWidget_UpdateLevel");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateLevel, TierCompletedIcon) == 0x000000, "Member 'HWGodAscensionProgressWidget_UpdateLevel::TierCompletedIcon' has a wrong offset!");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateLevel, CurrentTierGoalIcon) == 0x000028, "Member 'HWGodAscensionProgressWidget_UpdateLevel::CurrentTierGoalIcon' has a wrong offset!");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateLevel, CurrentLevel) == 0x000050, "Member 'HWGodAscensionProgressWidget_UpdateLevel::CurrentLevel' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionProgressWidget.UpdateProgress
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionProgressWidget_UpdateProgress final
{
public:
	int32                                         TierCompleted;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoalValue;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalProgress;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionProgressWidget_UpdateProgress) == 0x000004, "Wrong alignment on HWGodAscensionProgressWidget_UpdateProgress");
static_assert(sizeof(HWGodAscensionProgressWidget_UpdateProgress) == 0x000010, "Wrong size on HWGodAscensionProgressWidget_UpdateProgress");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateProgress, TierCompleted) == 0x000000, "Member 'HWGodAscensionProgressWidget_UpdateProgress::TierCompleted' has a wrong offset!");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateProgress, StartValue) == 0x000004, "Member 'HWGodAscensionProgressWidget_UpdateProgress::StartValue' has a wrong offset!");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateProgress, GoalValue) == 0x000008, "Member 'HWGodAscensionProgressWidget_UpdateProgress::GoalValue' has a wrong offset!");
static_assert(offsetof(HWGodAscensionProgressWidget_UpdateProgress, TotalProgress) == 0x00000C, "Member 'HWGodAscensionProgressWidget_UpdateProgress::TotalProgress' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.GetCurrentSubSelectionIndex
// 0x0004 (0x0004 - 0x0000)
struct HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex) == 0x000004, "Wrong alignment on HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex) == 0x000004, "Wrong size on HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex, ReturnValue) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_GetCurrentSubSelectionIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackEntryWidget_HandleInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_HandleInputMethodChanged) == 0x000001, "Wrong alignment on HWGodAscensionTrackEntryWidget_HandleInputMethodChanged");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_HandleInputMethodChanged) == 0x000001, "Wrong size on HWGodAscensionTrackEntryWidget_HandleInputMethodChanged");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_HandleInputMethodChanged, NewInputType) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_HandleInputMethodChanged::NewInputType' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.NavigateSubItem
// 0x0004 (0x0004 - 0x0000)
struct HWGodAscensionTrackEntryWidget_NavigateSubItem final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_NavigateSubItem) == 0x000004, "Wrong alignment on HWGodAscensionTrackEntryWidget_NavigateSubItem");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_NavigateSubItem) == 0x000004, "Wrong size on HWGodAscensionTrackEntryWidget_NavigateSubItem");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_NavigateSubItem, Direction) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_NavigateSubItem::Direction' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.OnClaimOwnershipCheck
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck) == 0x000001, "Wrong alignment on HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck) == 0x000001, "Wrong size on HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck, bOwned) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_OnClaimOwnershipCheck::bOwned' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.OnRewardOwnershipCheck
// 0x0018 (0x0018 - 0x0000)
struct HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck) == 0x000008, "Wrong alignment on HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck) == 0x000018, "Wrong size on HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck, bOwned) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck::bOwned' has a wrong offset!");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck, InventoryItem) == 0x000008, "Member 'HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck::InventoryItem' has a wrong offset!");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck, Index_0) == 0x000010, "Member 'HWGodAscensionTrackEntryWidget_OnRewardOwnershipCheck::Index_0' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.OnSelectItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionTrackEntryWidget_OnSelectItem final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPlatformInventoryItem*           InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_OnSelectItem) == 0x000008, "Wrong alignment on HWGodAscensionTrackEntryWidget_OnSelectItem");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_OnSelectItem) == 0x000010, "Wrong size on HWGodAscensionTrackEntryWidget_OnSelectItem");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnSelectItem, EntryWidget) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_OnSelectItem::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_OnSelectItem, InventoryItem) == 0x000008, "Member 'HWGodAscensionTrackEntryWidget_OnSelectItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.UpdateAscensionPassOwnership
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership) == 0x000001, "Wrong alignment on HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership) == 0x000001, "Wrong size on HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership, bOwned) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_UpdateAscensionPassOwnership::bOwned' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.UpdateClaimVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackEntryWidget_UpdateClaimVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_UpdateClaimVisibility) == 0x000001, "Wrong alignment on HWGodAscensionTrackEntryWidget_UpdateClaimVisibility");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_UpdateClaimVisibility) == 0x000001, "Wrong size on HWGodAscensionTrackEntryWidget_UpdateClaimVisibility");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_UpdateClaimVisibility, bShow) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_UpdateClaimVisibility::bShow' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.UpdateSelectedHighlight
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight) == 0x000001, "Wrong alignment on HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight) == 0x000001, "Wrong size on HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight, bShow) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_UpdateSelectedHighlight::bShow' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackEntryWidget.UpdateTier
// 0x0004 (0x0004 - 0x0000)
struct HWGodAscensionTrackEntryWidget_UpdateTier final
{
public:
	int32                                         TierNumber;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackEntryWidget_UpdateTier) == 0x000004, "Wrong alignment on HWGodAscensionTrackEntryWidget_UpdateTier");
static_assert(sizeof(HWGodAscensionTrackEntryWidget_UpdateTier) == 0x000004, "Wrong size on HWGodAscensionTrackEntryWidget_UpdateTier");
static_assert(offsetof(HWGodAscensionTrackEntryWidget_UpdateTier, TierNumber) == 0x000000, "Member 'HWGodAscensionTrackEntryWidget_UpdateTier::TierNumber' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionPurchaseWidget.OnPurchaseItemSelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionPurchaseWidget_OnPurchaseItemSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionPurchaseWidget_OnPurchaseItemSelected) == 0x000008, "Wrong alignment on HWGodAscensionPurchaseWidget_OnPurchaseItemSelected");
static_assert(sizeof(HWGodAscensionPurchaseWidget_OnPurchaseItemSelected) == 0x000010, "Wrong size on HWGodAscensionPurchaseWidget_OnPurchaseItemSelected");
static_assert(offsetof(HWGodAscensionPurchaseWidget_OnPurchaseItemSelected, EntryWidget) == 0x000000, "Member 'HWGodAscensionPurchaseWidget_OnPurchaseItemSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodAscensionPurchaseWidget_OnPurchaseItemSelected, InventoryItem) == 0x000008, "Member 'HWGodAscensionPurchaseWidget_OnPurchaseItemSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionPurchaseWidget.SetSubListVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionPurchaseWidget_SetSubListVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionPurchaseWidget_SetSubListVisibility) == 0x000001, "Wrong alignment on HWGodAscensionPurchaseWidget_SetSubListVisibility");
static_assert(sizeof(HWGodAscensionPurchaseWidget_SetSubListVisibility) == 0x000001, "Wrong size on HWGodAscensionPurchaseWidget_SetSubListVisibility");
static_assert(offsetof(HWGodAscensionPurchaseWidget_SetSubListVisibility, bVisible) == 0x000000, "Member 'HWGodAscensionPurchaseWidget_SetSubListVisibility::bVisible' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionPurchaseWidget.UpdatePrice
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionPurchaseWidget_UpdatePrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionPurchaseWidget_UpdatePrice) == 0x000008, "Wrong alignment on HWGodAscensionPurchaseWidget_UpdatePrice");
static_assert(sizeof(HWGodAscensionPurchaseWidget_UpdatePrice) == 0x000010, "Wrong size on HWGodAscensionPurchaseWidget_UpdatePrice");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePrice, PriceItem) == 0x000000, "Member 'HWGodAscensionPurchaseWidget_UpdatePrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePrice, PriceGroup) == 0x000008, "Member 'HWGodAscensionPurchaseWidget_UpdatePrice::PriceGroup' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionPurchaseWidget.UpdatePurchasable
// 0x0028 (0x0028 - 0x0000)
struct HWGodAscensionPurchaseWidget_UpdatePurchasable final
{
public:
	bool                                          bAvailable;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWAscensionPurchaseRewardItem> InRewardItems;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URHStoreItem*                           PassItem;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 GodItemReference;                                  // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionPurchaseWidget_UpdatePurchasable) == 0x000008, "Wrong alignment on HWGodAscensionPurchaseWidget_UpdatePurchasable");
static_assert(sizeof(HWGodAscensionPurchaseWidget_UpdatePurchasable) == 0x000028, "Wrong size on HWGodAscensionPurchaseWidget_UpdatePurchasable");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePurchasable, bAvailable) == 0x000000, "Member 'HWGodAscensionPurchaseWidget_UpdatePurchasable::bAvailable' has a wrong offset!");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePurchasable, InRewardItems) == 0x000008, "Member 'HWGodAscensionPurchaseWidget_UpdatePurchasable::InRewardItems' has a wrong offset!");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePurchasable, PassItem) == 0x000018, "Member 'HWGodAscensionPurchaseWidget_UpdatePurchasable::PassItem' has a wrong offset!");
static_assert(offsetof(HWGodAscensionPurchaseWidget_UpdatePurchasable, GodItemReference) == 0x000020, "Member 'HWGodAscensionPurchaseWidget_UpdatePurchasable::GodItemReference' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.DisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct HWItemDisplayWidget_DisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCurrencyType                               CurrencyType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemDisplayWidget_DisplayPrice) == 0x000008, "Wrong alignment on HWItemDisplayWidget_DisplayPrice");
static_assert(sizeof(HWItemDisplayWidget_DisplayPrice) == 0x000010, "Wrong size on HWItemDisplayWidget_DisplayPrice");
static_assert(offsetof(HWItemDisplayWidget_DisplayPrice, PriceItem) == 0x000000, "Member 'HWItemDisplayWidget_DisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWItemDisplayWidget_DisplayPrice, CurrencyType) == 0x000008, "Member 'HWItemDisplayWidget_DisplayPrice::CurrencyType' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetCharacterContext
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_GetCharacterContext final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetCharacterContext) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetCharacterContext");
static_assert(sizeof(HWItemDisplayWidget_GetCharacterContext) == 0x000008, "Wrong size on HWItemDisplayWidget_GetCharacterContext");
static_assert(offsetof(HWItemDisplayWidget_GetCharacterContext, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetCharacterContext::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetNextVariantItem
// 0x0050 (0x0050 - 0x0000)
struct HWItemDisplayWidget_GetNextVariantItem final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        CurrentItem;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWInventoryItem>        ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetNextVariantItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetNextVariantItem");
static_assert(sizeof(HWItemDisplayWidget_GetNextVariantItem) == 0x000050, "Wrong size on HWItemDisplayWidget_GetNextVariantItem");
static_assert(offsetof(HWItemDisplayWidget_GetNextVariantItem, CurrentItem) == 0x000000, "Member 'HWItemDisplayWidget_GetNextVariantItem::CurrentItem' has a wrong offset!");
static_assert(offsetof(HWItemDisplayWidget_GetNextVariantItem, ReturnValue) == 0x000028, "Member 'HWItemDisplayWidget_GetNextVariantItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.OnSelectVariantItem
// 0x0030 (0x0030 - 0x0000)
struct HWItemDisplayWidget_OnSelectVariantItem final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        InVariantItem;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URHStoreItem*                     InStoreItem;                                       // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_OnSelectVariantItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_OnSelectVariantItem");
static_assert(sizeof(HWItemDisplayWidget_OnSelectVariantItem) == 0x000030, "Wrong size on HWItemDisplayWidget_OnSelectVariantItem");
static_assert(offsetof(HWItemDisplayWidget_OnSelectVariantItem, InVariantItem) == 0x000000, "Member 'HWItemDisplayWidget_OnSelectVariantItem::InVariantItem' has a wrong offset!");
static_assert(offsetof(HWItemDisplayWidget_OnSelectVariantItem, InStoreItem) == 0x000028, "Member 'HWItemDisplayWidget_OnSelectVariantItem::InStoreItem' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.RequestSelectFromStoreItemDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_RequestSelectFromStoreItemDisplay final
{
public:
	class UHWStoreItemDisplayWidget*              StoreItemDisplay;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_RequestSelectFromStoreItemDisplay) == 0x000008, "Wrong alignment on HWItemDisplayWidget_RequestSelectFromStoreItemDisplay");
static_assert(sizeof(HWItemDisplayWidget_RequestSelectFromStoreItemDisplay) == 0x000008, "Wrong size on HWItemDisplayWidget_RequestSelectFromStoreItemDisplay");
static_assert(offsetof(HWItemDisplayWidget_RequestSelectFromStoreItemDisplay, StoreItemDisplay) == 0x000000, "Member 'HWItemDisplayWidget_RequestSelectFromStoreItemDisplay::StoreItemDisplay' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SelectVariantItem
// 0x0028 (0x0028 - 0x0000)
struct HWItemDisplayWidget_SelectVariantItem final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        Item;                                              // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SelectVariantItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_SelectVariantItem");
static_assert(sizeof(HWItemDisplayWidget_SelectVariantItem) == 0x000028, "Wrong size on HWItemDisplayWidget_SelectVariantItem");
static_assert(offsetof(HWItemDisplayWidget_SelectVariantItem, Item) == 0x000000, "Member 'HWItemDisplayWidget_SelectVariantItem::Item' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetCharacterContext
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_SetCharacterContext final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetCharacterContext) == 0x000008, "Wrong alignment on HWItemDisplayWidget_SetCharacterContext");
static_assert(sizeof(HWItemDisplayWidget_SetCharacterContext) == 0x000008, "Wrong size on HWItemDisplayWidget_SetCharacterContext");
static_assert(offsetof(HWItemDisplayWidget_SetCharacterContext, InCharacterItem) == 0x000000, "Member 'HWItemDisplayWidget_SetCharacterContext::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetDisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_SetDisplayItem final
{
public:
	const class UHWInventoryItem*                 InInventoryItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetDisplayItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_SetDisplayItem");
static_assert(sizeof(HWItemDisplayWidget_SetDisplayItem) == 0x000008, "Wrong size on HWItemDisplayWidget_SetDisplayItem");
static_assert(offsetof(HWItemDisplayWidget_SetDisplayItem, InInventoryItem) == 0x000000, "Member 'HWItemDisplayWidget_SetDisplayItem::InInventoryItem' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetDisplayOwnershipIcons
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_SetDisplayOwnershipIcons final
{
public:
	bool                                          bInDisplayOwnershipIcons;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetDisplayOwnershipIcons) == 0x000001, "Wrong alignment on HWItemDisplayWidget_SetDisplayOwnershipIcons");
static_assert(sizeof(HWItemDisplayWidget_SetDisplayOwnershipIcons) == 0x000001, "Wrong size on HWItemDisplayWidget_SetDisplayOwnershipIcons");
static_assert(offsetof(HWItemDisplayWidget_SetDisplayOwnershipIcons, bInDisplayOwnershipIcons) == 0x000000, "Member 'HWItemDisplayWidget_SetDisplayOwnershipIcons::bInDisplayOwnershipIcons' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetIsEquipped
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_SetIsEquipped final
{
public:
	bool                                          bInIsEquipped;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetIsEquipped) == 0x000001, "Wrong alignment on HWItemDisplayWidget_SetIsEquipped");
static_assert(sizeof(HWItemDisplayWidget_SetIsEquipped) == 0x000001, "Wrong size on HWItemDisplayWidget_SetIsEquipped");
static_assert(offsetof(HWItemDisplayWidget_SetIsEquipped, bInIsEquipped) == 0x000000, "Member 'HWItemDisplayWidget_SetIsEquipped::bInIsEquipped' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetIsInteractable
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_SetIsInteractable final
{
public:
	bool                                          bInIsInteractable;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetIsInteractable) == 0x000001, "Wrong alignment on HWItemDisplayWidget_SetIsInteractable");
static_assert(sizeof(HWItemDisplayWidget_SetIsInteractable) == 0x000001, "Wrong size on HWItemDisplayWidget_SetIsInteractable");
static_assert(offsetof(HWItemDisplayWidget_SetIsInteractable, bInIsInteractable) == 0x000000, "Member 'HWItemDisplayWidget_SetIsInteractable::bInIsInteractable' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_SetIsSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetIsSelected) == 0x000001, "Wrong alignment on HWItemDisplayWidget_SetIsSelected");
static_assert(sizeof(HWItemDisplayWidget_SetIsSelected) == 0x000001, "Wrong size on HWItemDisplayWidget_SetIsSelected");
static_assert(offsetof(HWItemDisplayWidget_SetIsSelected, bInIsSelected) == 0x000000, "Member 'HWItemDisplayWidget_SetIsSelected::bInIsSelected' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetOverrideItemQuantity
// 0x0004 (0x0004 - 0x0000)
struct HWItemDisplayWidget_SetOverrideItemQuantity final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetOverrideItemQuantity) == 0x000004, "Wrong alignment on HWItemDisplayWidget_SetOverrideItemQuantity");
static_assert(sizeof(HWItemDisplayWidget_SetOverrideItemQuantity) == 0x000004, "Wrong size on HWItemDisplayWidget_SetOverrideItemQuantity");
static_assert(offsetof(HWItemDisplayWidget_SetOverrideItemQuantity, Quantity) == 0x000000, "Member 'HWItemDisplayWidget_SetOverrideItemQuantity::Quantity' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetPlayerInfoContext
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_SetPlayerInfoContext final
{
public:
	class URH_PlayerInfo*                         InPlayerInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetPlayerInfoContext) == 0x000008, "Wrong alignment on HWItemDisplayWidget_SetPlayerInfoContext");
static_assert(sizeof(HWItemDisplayWidget_SetPlayerInfoContext) == 0x000008, "Wrong size on HWItemDisplayWidget_SetPlayerInfoContext");
static_assert(offsetof(HWItemDisplayWidget_SetPlayerInfoContext, InPlayerInfo) == 0x000000, "Member 'HWItemDisplayWidget_SetPlayerInfoContext::InPlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.SetUseListView
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_SetUseListView final
{
public:
	bool                                          bInUseListView;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_SetUseListView) == 0x000001, "Wrong alignment on HWItemDisplayWidget_SetUseListView");
static_assert(sizeof(HWItemDisplayWidget_SetUseListView) == 0x000001, "Wrong size on HWItemDisplayWidget_SetUseListView");
static_assert(offsetof(HWItemDisplayWidget_SetUseListView, bInUseListView) == 0x000000, "Member 'HWItemDisplayWidget_SetUseListView::bInUseListView' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetDisplayedItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_GetDisplayedItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetDisplayedItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetDisplayedItem");
static_assert(sizeof(HWItemDisplayWidget_GetDisplayedItem) == 0x000008, "Wrong size on HWItemDisplayWidget_GetDisplayedItem");
static_assert(offsetof(HWItemDisplayWidget_GetDisplayedItem, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetDisplayedItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetDisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_GetDisplayItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetDisplayItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetDisplayItem");
static_assert(sizeof(HWItemDisplayWidget_GetDisplayItem) == 0x000008, "Wrong size on HWItemDisplayWidget_GetDisplayItem");
static_assert(offsetof(HWItemDisplayWidget_GetDisplayItem, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetDisplayItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetInitialSelectedVariantItem
// 0x0028 (0x0028 - 0x0000)
struct HWItemDisplayWidget_GetInitialSelectedVariantItem final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetInitialSelectedVariantItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetInitialSelectedVariantItem");
static_assert(sizeof(HWItemDisplayWidget_GetInitialSelectedVariantItem) == 0x000028, "Wrong size on HWItemDisplayWidget_GetInitialSelectedVariantItem");
static_assert(offsetof(HWItemDisplayWidget_GetInitialSelectedVariantItem, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetInitialSelectedVariantItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemDisplayWidget_GetIsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetIsSelected) == 0x000001, "Wrong alignment on HWItemDisplayWidget_GetIsSelected");
static_assert(sizeof(HWItemDisplayWidget_GetIsSelected) == 0x000001, "Wrong size on HWItemDisplayWidget_GetIsSelected");
static_assert(offsetof(HWItemDisplayWidget_GetIsSelected, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetIsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetPlayerInfoContext
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_GetPlayerInfoContext final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetPlayerInfoContext) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetPlayerInfoContext");
static_assert(sizeof(HWItemDisplayWidget_GetPlayerInfoContext) == 0x000008, "Wrong size on HWItemDisplayWidget_GetPlayerInfoContext");
static_assert(offsetof(HWItemDisplayWidget_GetPlayerInfoContext, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetPlayerInfoContext::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemDisplayWidget.GetSelectedVariantItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemDisplayWidget_GetSelectedVariantItem final
{
public:
	class UHWInventoryItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemDisplayWidget_GetSelectedVariantItem) == 0x000008, "Wrong alignment on HWItemDisplayWidget_GetSelectedVariantItem");
static_assert(sizeof(HWItemDisplayWidget_GetSelectedVariantItem) == 0x000008, "Wrong size on HWItemDisplayWidget_GetSelectedVariantItem");
static_assert(offsetof(HWItemDisplayWidget_GetSelectedVariantItem, ReturnValue) == 0x000000, "Member 'HWItemDisplayWidget_GetSelectedVariantItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.AddSubRewardItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionTrackItemDisplay_AddSubRewardItem final
{
public:
	const class UPlatformInventoryItem*           InventoryItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPremium;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_AddSubRewardItem) == 0x000008, "Wrong alignment on HWGodAscensionTrackItemDisplay_AddSubRewardItem");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_AddSubRewardItem) == 0x000010, "Wrong size on HWGodAscensionTrackItemDisplay_AddSubRewardItem");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_AddSubRewardItem, InventoryItem) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_AddSubRewardItem::InventoryItem' has a wrong offset!");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_AddSubRewardItem, bIsPremium) == 0x000008, "Member 'HWGodAscensionTrackItemDisplay_AddSubRewardItem::bIsPremium' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.OnSelectItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodAscensionTrackItemDisplay_OnSelectItem final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPlatformInventoryItem*           InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_OnSelectItem) == 0x000008, "Wrong alignment on HWGodAscensionTrackItemDisplay_OnSelectItem");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_OnSelectItem) == 0x000010, "Wrong size on HWGodAscensionTrackItemDisplay_OnSelectItem");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_OnSelectItem, EntryWidget) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_OnSelectItem::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_OnSelectItem, InventoryItem) == 0x000008, "Member 'HWGodAscensionTrackItemDisplay_OnSelectItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.SelectItem
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackItemDisplay_SelectItem final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_SelectItem) == 0x000001, "Wrong alignment on HWGodAscensionTrackItemDisplay_SelectItem");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_SelectItem) == 0x000001, "Wrong size on HWGodAscensionTrackItemDisplay_SelectItem");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_SelectItem, bSelected) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_SelectItem::bSelected' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.SetButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackItemDisplay_SetButtonEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_SetButtonEnabled) == 0x000001, "Wrong alignment on HWGodAscensionTrackItemDisplay_SetButtonEnabled");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_SetButtonEnabled) == 0x000001, "Wrong size on HWGodAscensionTrackItemDisplay_SetButtonEnabled");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_SetButtonEnabled, bEnable) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_SetButtonEnabled::bEnable' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.SetClaimable
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackItemDisplay_SetClaimable final
{
public:
	bool                                          bIsClaimable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_SetClaimable) == 0x000001, "Wrong alignment on HWGodAscensionTrackItemDisplay_SetClaimable");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_SetClaimable) == 0x000001, "Wrong size on HWGodAscensionTrackItemDisplay_SetClaimable");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_SetClaimable, bIsClaimable) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_SetClaimable::bIsClaimable' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.SetDisplayAsPremium
// 0x0001 (0x0001 - 0x0000)
struct HWGodAscensionTrackItemDisplay_SetDisplayAsPremium final
{
public:
	bool                                          bIsPremium;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_SetDisplayAsPremium) == 0x000001, "Wrong alignment on HWGodAscensionTrackItemDisplay_SetDisplayAsPremium");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_SetDisplayAsPremium) == 0x000001, "Wrong size on HWGodAscensionTrackItemDisplay_SetDisplayAsPremium");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_SetDisplayAsPremium, bIsPremium) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_SetDisplayAsPremium::bIsPremium' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.SetDisplayPlatformItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem final
{
public:
	const class UPlatformInventoryItem*           InPlatformItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem) == 0x000008, "Wrong alignment on HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem) == 0x000008, "Wrong size on HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem, InPlatformItem) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_SetDisplayPlatformItem::InPlatformItem' has a wrong offset!");

// Function HemingwayUI.HWGodAscensionTrackItemDisplay.GetDisplayPlatformItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem final
{
public:
	const class UPlatformInventoryItem*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem) == 0x000008, "Wrong alignment on HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem");
static_assert(sizeof(HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem) == 0x000008, "Wrong size on HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem");
static_assert(offsetof(HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem, ReturnValue) == 0x000000, "Member 'HWGodAscensionTrackItemDisplay_GetDisplayPlatformItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.HandleInputMethodChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodAscensionWidget_HandleInputMethodChanged final
{
public:
	ECommonInputType                              NewInputType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_HandleInputMethodChanged) == 0x000001, "Wrong alignment on HWGodDetailsGodAscensionWidget_HandleInputMethodChanged");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_HandleInputMethodChanged) == 0x000001, "Wrong size on HWGodDetailsGodAscensionWidget_HandleInputMethodChanged");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_HandleInputMethodChanged, NewInputType) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_HandleInputMethodChanged::NewInputType' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnAscensionPassOwnershipCheck
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           StoreItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck) == 0x000008, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck) == 0x000010, "Wrong size on HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck, bOwned) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck::bOwned' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck, StoreItem) == 0x000008, "Member 'HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipCheck::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnAscensionPassOwnershipUpdate
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate final
{
public:
	bool                                          bOwned;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate) == 0x000001, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate) == 0x000001, "Wrong size on HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate, bOwned) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnAscensionPassOwnershipUpdate::bOwned' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnClaimableUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnClaimableUpdated final
{
public:
	class UHWGodAscensionTrackEntryWidget*        EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnClaimableUpdated) == 0x000008, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnClaimableUpdated");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnClaimableUpdated) == 0x000008, "Wrong size on HWGodDetailsGodAscensionWidget_OnClaimableUpdated");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnClaimableUpdated, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnClaimableUpdated::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnClaimAscensionTrackReward
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward final
{
public:
	class UHWGodAscensionTrackEntryWidget*        EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward) == 0x000008, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward) == 0x000008, "Wrong size on HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnClaimAscensionTrackReward::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnClaimUpdate
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnClaimUpdate final
{
public:
	int32                                         ClaimableCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnClaimUpdate) == 0x000004, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnClaimUpdate");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnClaimUpdate) == 0x000004, "Wrong size on HWGodDetailsGodAscensionWidget_OnClaimUpdate");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnClaimUpdate, ClaimableCount) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnClaimUpdate::ClaimableCount' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnProgressUpdate
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnProgressUpdate final
{
public:
	int32                                         CurrentProgress;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextValue;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierCompleted;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnProgressUpdate) == 0x000004, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnProgressUpdate");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnProgressUpdate) == 0x000010, "Wrong size on HWGodDetailsGodAscensionWidget_OnProgressUpdate");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnProgressUpdate, CurrentProgress) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnProgressUpdate::CurrentProgress' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnProgressUpdate, StartValue) == 0x000004, "Member 'HWGodDetailsGodAscensionWidget_OnProgressUpdate::StartValue' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnProgressUpdate, NextValue) == 0x000008, "Member 'HWGodDetailsGodAscensionWidget_OnProgressUpdate::NextValue' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnProgressUpdate, TierCompleted) == 0x00000C, "Member 'HWGodDetailsGodAscensionWidget_OnProgressUpdate::TierCompleted' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnRepeatableCouponOwnedUpdate
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate) == 0x000004, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate) == 0x000004, "Wrong size on HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate, Count) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnedUpdate::Count' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnRepeatableCouponOwnershipCheck
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck final
{
public:
	int32                                         OwnedCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck) == 0x000004, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck) == 0x000004, "Wrong size on HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck, OwnedCount) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnRepeatableCouponOwnershipCheck::OwnedCount' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnRepeatableQuestCurrencyUpdate
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate final
{
public:
	TArray<struct FCurrencyRewardInfo>            CurrencyItems;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate) == 0x000008, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate) == 0x000010, "Wrong size on HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate, CurrencyItems) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnRepeatableQuestCurrencyUpdate::CurrencyItems' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodAscensionWidget.OnSelectAscensionTrackEntry
// 0x0018 (0x0018 - 0x0000)
struct HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry final
{
public:
	class UHWGodAscensionTrackEntryWidget*        EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPlatformInventoryItem*           InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URHStoreItem*                     StoreItem;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry) == 0x000008, "Wrong alignment on HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry");
static_assert(sizeof(HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry) == 0x000018, "Wrong size on HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry, InventoryItem) == 0x000008, "Member 'HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry::InventoryItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry, StoreItem) == 0x000010, "Member 'HWGodDetailsGodAscensionWidget_OnSelectAscensionTrackEntry::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.AddExclusiveModeFilterTag
// 0x0008 (0x0008 - 0x0000)
struct HWFilterWidget_AddExclusiveModeFilterTag final
{
public:
	struct FGameplayTag                           ModeFilterTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_AddExclusiveModeFilterTag) == 0x000004, "Wrong alignment on HWFilterWidget_AddExclusiveModeFilterTag");
static_assert(sizeof(HWFilterWidget_AddExclusiveModeFilterTag) == 0x000008, "Wrong size on HWFilterWidget_AddExclusiveModeFilterTag");
static_assert(offsetof(HWFilterWidget_AddExclusiveModeFilterTag, ModeFilterTag) == 0x000000, "Member 'HWFilterWidget_AddExclusiveModeFilterTag::ModeFilterTag' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.AddExclusiveRoleFilterTag
// 0x0008 (0x0008 - 0x0000)
struct HWFilterWidget_AddExclusiveRoleFilterTag final
{
public:
	struct FGameplayTag                           RoleFilterTag;                                     // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_AddExclusiveRoleFilterTag) == 0x000004, "Wrong alignment on HWFilterWidget_AddExclusiveRoleFilterTag");
static_assert(sizeof(HWFilterWidget_AddExclusiveRoleFilterTag) == 0x000008, "Wrong size on HWFilterWidget_AddExclusiveRoleFilterTag");
static_assert(offsetof(HWFilterWidget_AddExclusiveRoleFilterTag, RoleFilterTag) == 0x000000, "Member 'HWFilterWidget_AddExclusiveRoleFilterTag::RoleFilterTag' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.AddFilterTag
// 0x0008 (0x0008 - 0x0000)
struct HWFilterWidget_AddFilterTag final
{
public:
	struct FGameplayTag                           FilterTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_AddFilterTag) == 0x000004, "Wrong alignment on HWFilterWidget_AddFilterTag");
static_assert(sizeof(HWFilterWidget_AddFilterTag) == 0x000008, "Wrong size on HWFilterWidget_AddFilterTag");
static_assert(offsetof(HWFilterWidget_AddFilterTag, FilterTag) == 0x000000, "Member 'HWFilterWidget_AddFilterTag::FilterTag' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.RemoveFilterTag
// 0x0008 (0x0008 - 0x0000)
struct HWFilterWidget_RemoveFilterTag final
{
public:
	struct FGameplayTag                           FilterTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_RemoveFilterTag) == 0x000004, "Wrong alignment on HWFilterWidget_RemoveFilterTag");
static_assert(sizeof(HWFilterWidget_RemoveFilterTag) == 0x000008, "Wrong size on HWFilterWidget_RemoveFilterTag");
static_assert(offsetof(HWFilterWidget_RemoveFilterTag, FilterTag) == 0x000000, "Member 'HWFilterWidget_RemoveFilterTag::FilterTag' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.SetFilterSearchText
// 0x0018 (0x0018 - 0x0000)
struct HWFilterWidget_SetFilterSearchText final
{
public:
	class FText                                   InSearchText;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_SetFilterSearchText) == 0x000008, "Wrong alignment on HWFilterWidget_SetFilterSearchText");
static_assert(sizeof(HWFilterWidget_SetFilterSearchText) == 0x000018, "Wrong size on HWFilterWidget_SetFilterSearchText");
static_assert(offsetof(HWFilterWidget_SetFilterSearchText, InSearchText) == 0x000000, "Member 'HWFilterWidget_SetFilterSearchText::InSearchText' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.SetInvertSort
// 0x0001 (0x0001 - 0x0000)
struct HWFilterWidget_SetInvertSort final
{
public:
	bool                                          bShouldInvertSort;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_SetInvertSort) == 0x000001, "Wrong alignment on HWFilterWidget_SetInvertSort");
static_assert(sizeof(HWFilterWidget_SetInvertSort) == 0x000001, "Wrong size on HWFilterWidget_SetInvertSort");
static_assert(offsetof(HWFilterWidget_SetInvertSort, bShouldInvertSort) == 0x000000, "Member 'HWFilterWidget_SetInvertSort::bShouldInvertSort' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.SetSortMethod
// 0x0001 (0x0001 - 0x0000)
struct HWFilterWidget_SetSortMethod final
{
public:
	EHWFilterSortMethod                           NewSortMethod;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_SetSortMethod) == 0x000001, "Wrong alignment on HWFilterWidget_SetSortMethod");
static_assert(sizeof(HWFilterWidget_SetSortMethod) == 0x000001, "Wrong size on HWFilterWidget_SetSortMethod");
static_assert(offsetof(HWFilterWidget_SetSortMethod, NewSortMethod) == 0x000000, "Member 'HWFilterWidget_SetSortMethod::NewSortMethod' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.GetPantheonGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct HWFilterWidget_GetPantheonGameplayTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_GetPantheonGameplayTags) == 0x000008, "Wrong alignment on HWFilterWidget_GetPantheonGameplayTags");
static_assert(sizeof(HWFilterWidget_GetPantheonGameplayTags) == 0x000020, "Wrong size on HWFilterWidget_GetPantheonGameplayTags");
static_assert(offsetof(HWFilterWidget_GetPantheonGameplayTags, ReturnValue) == 0x000000, "Member 'HWFilterWidget_GetPantheonGameplayTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.GetShouldInvertSort
// 0x0001 (0x0001 - 0x0000)
struct HWFilterWidget_GetShouldInvertSort final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_GetShouldInvertSort) == 0x000001, "Wrong alignment on HWFilterWidget_GetShouldInvertSort");
static_assert(sizeof(HWFilterWidget_GetShouldInvertSort) == 0x000001, "Wrong size on HWFilterWidget_GetShouldInvertSort");
static_assert(offsetof(HWFilterWidget_GetShouldInvertSort, ReturnValue) == 0x000000, "Member 'HWFilterWidget_GetShouldInvertSort::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.GetSortMethod
// 0x0001 (0x0001 - 0x0000)
struct HWFilterWidget_GetSortMethod final
{
public:
	EHWFilterSortMethod                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_GetSortMethod) == 0x000001, "Wrong alignment on HWFilterWidget_GetSortMethod");
static_assert(sizeof(HWFilterWidget_GetSortMethod) == 0x000001, "Wrong size on HWFilterWidget_GetSortMethod");
static_assert(offsetof(HWFilterWidget_GetSortMethod, ReturnValue) == 0x000000, "Member 'HWFilterWidget_GetSortMethod::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFilterWidget.GetSpecializationGameplayTags
// 0x0020 (0x0020 - 0x0000)
struct HWFilterWidget_GetSpecializationGameplayTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFilterWidget_GetSpecializationGameplayTags) == 0x000008, "Wrong alignment on HWFilterWidget_GetSpecializationGameplayTags");
static_assert(sizeof(HWFilterWidget_GetSpecializationGameplayTags) == 0x000020, "Wrong size on HWFilterWidget_GetSpecializationGameplayTags");
static_assert(offsetof(HWFilterWidget_GetSpecializationGameplayTags, ReturnValue) == 0x000000, "Member 'HWFilterWidget_GetSpecializationGameplayTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleAbilitiesListEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected final
{
public:
	const class UHWGodAbilityEntryWidget*         EntryWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected) == 0x000008, "Wrong size on HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleAbilitiesListEntrySelected::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildCreatedResult
// 0x0198 (0x0198 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            InGodBuild;                                        // 0x0008(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult) == 0x000198, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult, InGodBuild) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildCreatedResult::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildDeletedResult
// 0x0198 (0x0198 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            InGodBuild;                                        // 0x0008(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult) == 0x000198, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult, InGodBuild) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildDeletedResult::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEditorAbilityIconHovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered) == 0x000004, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered) == 0x000004, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered, AbilityIndex) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconHovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEditorAbilityIconUnhovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered) == 0x000004, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered) == 0x000004, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered, AbilityIndex) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEditorAbilityIconUnhovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEditorFinalBuildUpdated
// 0x0068 (0x0068 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated final
{
public:
	struct FHWGodBuildEntry                       FinalBuildEntry;                                   // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated) == 0x000068, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated, FinalBuildEntry) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEditorFinalBuildUpdated::FinalBuildEntry' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEntryItemHovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered) == 0x000030, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEntryItemRightClicked
// 0x0030 (0x0030 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked) == 0x000030, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEntryItemSelected
// 0x0030 (0x0030 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected) == 0x000030, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemSelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildEntryItemUnhovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered) == 0x000030, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildEntryItemUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildSearchResult
// 0x0018 (0x0018 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildSearchResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWGodBuild>                    InGodBuilds;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildSearchResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildSearchResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildSearchResult) == 0x000018, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildSearchResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildSearchResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildSearchResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildSearchResult, InGodBuilds) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildSearchResult::InGodBuilds' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildsListEntryHovered
// 0x0198 (0x0198 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered final
{
public:
	class UHWGodBuilderBuildsListEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodBuild                            GodBuild;                                          // 0x0008(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered) == 0x000198, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered, GodBuild) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildsListEntryHovered::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildsListEntrySelected
// 0x0198 (0x0198 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected final
{
public:
	class UHWGodBuilderBuildsListEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodBuild                            GodBuild;                                          // 0x0008(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected) == 0x000198, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected, GodBuild) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildsListEntrySelected::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleBuildUpdatedResult
// 0x0240 (0x0240 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ErrorInfo                          ErrorInfo;                                         // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWGodBuild                            InGodBuild;                                        // 0x00B0(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult) == 0x000240, "Wrong size on HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult, ErrorInfo) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult::ErrorInfo' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult, InGodBuild) == 0x0000B0, "Member 'HWGodDetailsGodBuilderWidget_HandleBuildUpdatedResult::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleCopyToResult
// 0x0020 (0x0020 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleCopyToResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMessage;                                      // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleCopyToResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleCopyToResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleCopyToResult) == 0x000020, "Wrong size on HWGodDetailsGodBuilderWidget_HandleCopyToResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleCopyToResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleCopyToResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleCopyToResult, ErrorMessage) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleCopyToResult::ErrorMessage' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleFullGodBuildResult
// 0x0198 (0x0198 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            InGodBuild;                                        // 0x0008(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult) == 0x000198, "Wrong size on HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult, InGodBuild) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleFullGodBuildResult::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleItemDisplayItemSelected
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected final
{
public:
	const class UHWEquipmentItem*                 SelectedComponentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected) == 0x000008, "Wrong size on HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected, SelectedComponentItem) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleItemDisplayItemSelected::SelectedComponentItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleItemsListEntryHovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleItemsListEntryRightClicked
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleItemsListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleItemsListEntryUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleItemsListEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleModesListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected final
{
public:
	class UHWGodBuilderModesListEntryWidget*      EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EntryMode;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected, EntryMode) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleModesListEntrySelected::EntryMode' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleOnTabChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleOnTabChanged final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleOnTabChanged) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleOnTabChanged");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleOnTabChanged) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleOnTabChanged");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleOnTabChanged, TabBarWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleOnTabChanged::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleOnTabChanged, TabIndex) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleOnTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleOnTabChanged, Cause) == 0x00000C, "Member 'HWGodDetailsGodBuilderWidget_HandleOnTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleRolesListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected final
{
public:
	class UHWGodBuilderRolesListEntryWidget*      EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRole                                EntryRole;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected) == 0x000010, "Wrong size on HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected, EntryRole) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_HandleRolesListEntrySelected::EntryRole' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.HandleSetIsFavoriteBuildResult
// 0x0018 (0x0018 - 0x0000)
struct HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InGodBuildId;                                      // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNowFavorite;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult) == 0x000004, "Wrong alignment on HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult) == 0x000018, "Wrong size on HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult, bSuccess) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult, InGodBuildId) == 0x000004, "Member 'HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult::InGodBuildId' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult, bIsNowFavorite) == 0x000014, "Member 'HWGodDetailsGodBuilderWidget_HandleSetIsFavoriteBuildResult::bIsNowFavorite' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.OnLocalPlayerPinnedBuildUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BuildGuid;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated) == 0x000018, "Wrong size on HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated, InGodItem) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated::InGodItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated, BuildGuid) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_OnLocalPlayerPinnedBuildUpdated::BuildGuid' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.OnShowBuildError
// 0x0020 (0x0020 - 0x0000)
struct HWGodDetailsGodBuilderWidget_OnShowBuildError final
{
public:
	EHWGodBuilderError                            GodBuilderError;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InErrorText;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_OnShowBuildError) == 0x000008, "Wrong alignment on HWGodDetailsGodBuilderWidget_OnShowBuildError");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_OnShowBuildError) == 0x000020, "Wrong size on HWGodDetailsGodBuilderWidget_OnShowBuildError");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_OnShowBuildError, GodBuilderError) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_OnShowBuildError::GodBuilderError' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_OnShowBuildError, InErrorText) == 0x000008, "Member 'HWGodDetailsGodBuilderWidget_OnShowBuildError::InErrorText' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodBuilderWidget.SetGodBuilderState
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsGodBuilderWidget_SetGodBuilderState final
{
public:
	EHWGodBuilderState                            BuilderState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsGodBuilderWidget_SetGodBuilderState) == 0x000001, "Wrong alignment on HWGodDetailsGodBuilderWidget_SetGodBuilderState");
static_assert(sizeof(HWGodDetailsGodBuilderWidget_SetGodBuilderState) == 0x000001, "Wrong size on HWGodDetailsGodBuilderWidget_SetGodBuilderState");
static_assert(offsetof(HWGodDetailsGodBuilderWidget_SetGodBuilderState, BuilderState) == 0x000000, "Member 'HWGodDetailsGodBuilderWidget_SetGodBuilderState::BuilderState' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ArrangeUniformPanelElementWidgetsGrid
// 0x0020 (0x0020 - 0x0000)
struct HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid final
{
public:
	TArray<class UWidget*>                        ElementWidgets;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EHWOrientation                                SpanOrientation;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Width;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWHorizontalAlignment                        HorizontalAlignment;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWVerticalAlignment                          VerticalAlignment;                                 // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid) == 0x000008, "Wrong alignment on HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid");
static_assert(sizeof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid) == 0x000020, "Wrong size on HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid");
static_assert(offsetof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid, ElementWidgets) == 0x000000, "Member 'HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid::ElementWidgets' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid, SpanOrientation) == 0x000010, "Member 'HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid::SpanOrientation' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid, Width) == 0x000014, "Member 'HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid::Width' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid, HorizontalAlignment) == 0x000018, "Member 'HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid, VerticalAlignment) == 0x000019, "Member 'HWUILibrary_Core_ArrangeUniformPanelElementWidgetsGrid::VerticalAlignment' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.CanEnterJunglePracticeMode
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_CanEnterJunglePracticeMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_CanEnterJunglePracticeMode) == 0x000008, "Wrong alignment on HWUILibrary_Core_CanEnterJunglePracticeMode");
static_assert(sizeof(HWUILibrary_Core_CanEnterJunglePracticeMode) == 0x000010, "Wrong size on HWUILibrary_Core_CanEnterJunglePracticeMode");
static_assert(offsetof(HWUILibrary_Core_CanEnterJunglePracticeMode, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_CanEnterJunglePracticeMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_CanEnterJunglePracticeMode, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_CanEnterJunglePracticeMode::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ConstructPlaystyleDescriptorText
// 0x0070 (0x0070 - 0x0000)
struct HWUILibrary_Core_ConstructPlaystyleDescriptorText final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DescriptorTagsToMatch;                             // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ArchtypeParentTag;                                 // 0x0030(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DelimiterText;                                     // 0x0038(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   OutPlaystyleDescriptorText;                        // 0x0050(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_ConstructPlaystyleDescriptorText) == 0x000008, "Wrong alignment on HWUILibrary_Core_ConstructPlaystyleDescriptorText");
static_assert(sizeof(HWUILibrary_Core_ConstructPlaystyleDescriptorText) == 0x000070, "Wrong size on HWUILibrary_Core_ConstructPlaystyleDescriptorText");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, CharacterItem) == 0x000008, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, DescriptorTagsToMatch) == 0x000010, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::DescriptorTagsToMatch' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, ArchtypeParentTag) == 0x000030, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::ArchtypeParentTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, DelimiterText) == 0x000038, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::DelimiterText' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, OutPlaystyleDescriptorText) == 0x000050, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::OutPlaystyleDescriptorText' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConstructPlaystyleDescriptorText, ReturnValue) == 0x000068, "Member 'HWUILibrary_Core_ConstructPlaystyleDescriptorText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ConvertDistanceToDistComponents
// 0x0020 (0x0020 - 0x0000)
struct HWUILibrary_Core_ConvertDistanceToDistComponents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTotalMeters;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gigameters;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Megameters;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Kilometers;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Meters;                                            // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_ConvertDistanceToDistComponents) == 0x000008, "Wrong alignment on HWUILibrary_Core_ConvertDistanceToDistComponents");
static_assert(sizeof(HWUILibrary_Core_ConvertDistanceToDistComponents) == 0x000020, "Wrong size on HWUILibrary_Core_ConvertDistanceToDistComponents");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, InTotalMeters) == 0x000008, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::InTotalMeters' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, Gigameters) == 0x00000C, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::Gigameters' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, Megameters) == 0x000010, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::Megameters' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, Kilometers) == 0x000014, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::Kilometers' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDistanceToDistComponents, Meters) == 0x000018, "Member 'HWUILibrary_Core_ConvertDistanceToDistComponents::Meters' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ConvertDurationToTimeComponents
// 0x0020 (0x0020 - 0x0000)
struct HWUILibrary_Core_ConvertDurationToTimeComponents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTotalSeconds;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Years;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Days;                                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hours;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minutes;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_ConvertDurationToTimeComponents) == 0x000008, "Wrong alignment on HWUILibrary_Core_ConvertDurationToTimeComponents");
static_assert(sizeof(HWUILibrary_Core_ConvertDurationToTimeComponents) == 0x000020, "Wrong size on HWUILibrary_Core_ConvertDurationToTimeComponents");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, InTotalSeconds) == 0x000008, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::InTotalSeconds' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, Years) == 0x00000C, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::Years' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, Days) == 0x000010, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::Days' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, Hours) == 0x000014, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::Hours' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, Minutes) == 0x000018, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::Minutes' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertDurationToTimeComponents, Seconds) == 0x00001C, "Member 'HWUILibrary_Core_ConvertDurationToTimeComponents::Seconds' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ConvertQuantityToComponents
// 0x0020 (0x0020 - 0x0000)
struct HWUILibrary_Core_ConvertQuantityToComponents final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InQuantity;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Billions;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millions;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Thousands;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Units;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_ConvertQuantityToComponents) == 0x000008, "Wrong alignment on HWUILibrary_Core_ConvertQuantityToComponents");
static_assert(sizeof(HWUILibrary_Core_ConvertQuantityToComponents) == 0x000020, "Wrong size on HWUILibrary_Core_ConvertQuantityToComponents");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, InQuantity) == 0x000008, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::InQuantity' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, Billions) == 0x00000C, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::Billions' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, Millions) == 0x000010, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::Millions' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, Thousands) == 0x000014, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::Thousands' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ConvertQuantityToComponents, Units) == 0x000018, "Member 'HWUILibrary_Core_ConvertQuantityToComponents::Units' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_CopyToClipboard final
{
public:
	class FString                                 StringToCopy;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_CopyToClipboard) == 0x000008, "Wrong alignment on HWUILibrary_Core_CopyToClipboard");
static_assert(sizeof(HWUILibrary_Core_CopyToClipboard) == 0x000010, "Wrong size on HWUILibrary_Core_CopyToClipboard");
static_assert(offsetof(HWUILibrary_Core_CopyToClipboard, StringToCopy) == 0x000000, "Member 'HWUILibrary_Core_CopyToClipboard::StringToCopy' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.EnterJunglePracticeByGod
// 0x0060 (0x0060 - 0x0000)
struct HWUILibrary_Core_EnterJunglePracticeByGod final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PracticeModeTag;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x0010(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWSkinItem>             OptionalSkinItem;                                  // 0x0038(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_EnterJunglePracticeByGod) == 0x000008, "Wrong alignment on HWUILibrary_Core_EnterJunglePracticeByGod");
static_assert(sizeof(HWUILibrary_Core_EnterJunglePracticeByGod) == 0x000060, "Wrong size on HWUILibrary_Core_EnterJunglePracticeByGod");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeByGod, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_EnterJunglePracticeByGod::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeByGod, PracticeModeTag) == 0x000008, "Member 'HWUILibrary_Core_EnterJunglePracticeByGod::PracticeModeTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeByGod, CharacterItem) == 0x000010, "Member 'HWUILibrary_Core_EnterJunglePracticeByGod::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeByGod, OptionalSkinItem) == 0x000038, "Member 'HWUILibrary_Core_EnterJunglePracticeByGod::OptionalSkinItem' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.EnterJunglePracticeBySkin
// 0x0038 (0x0038 - 0x0000)
struct HWUILibrary_Core_EnterJunglePracticeBySkin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PracticeModeTag;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWSkinItem>             SkinItem;                                          // 0x0010(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_EnterJunglePracticeBySkin) == 0x000008, "Wrong alignment on HWUILibrary_Core_EnterJunglePracticeBySkin");
static_assert(sizeof(HWUILibrary_Core_EnterJunglePracticeBySkin) == 0x000038, "Wrong size on HWUILibrary_Core_EnterJunglePracticeBySkin");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeBySkin, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_EnterJunglePracticeBySkin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeBySkin, PracticeModeTag) == 0x000008, "Member 'HWUILibrary_Core_EnterJunglePracticeBySkin::PracticeModeTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EnterJunglePracticeBySkin, SkinItem) == 0x000010, "Member 'HWUILibrary_Core_EnterJunglePracticeBySkin::SkinItem' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.EuqalEqual_DraftChoice
// 0x0028 (0x0028 - 0x0000)
struct HWUILibrary_Core_EuqalEqual_DraftChoice final
{
public:
	struct FDraftChoice                           A;                                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDraftChoice                           B;                                                 // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_EuqalEqual_DraftChoice) == 0x000008, "Wrong alignment on HWUILibrary_Core_EuqalEqual_DraftChoice");
static_assert(sizeof(HWUILibrary_Core_EuqalEqual_DraftChoice) == 0x000028, "Wrong size on HWUILibrary_Core_EuqalEqual_DraftChoice");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftChoice, A) == 0x000000, "Member 'HWUILibrary_Core_EuqalEqual_DraftChoice::A' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftChoice, B) == 0x000010, "Member 'HWUILibrary_Core_EuqalEqual_DraftChoice::B' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftChoice, ReturnValue) == 0x000020, "Member 'HWUILibrary_Core_EuqalEqual_DraftChoice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.EuqalEqual_DraftTask
// 0x0098 (0x0098 - 0x0000)
struct HWUILibrary_Core_EuqalEqual_DraftTask final
{
public:
	struct FDraftTask                             A;                                                 // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FDraftTask                             B;                                                 // 0x0048(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_EuqalEqual_DraftTask) == 0x000008, "Wrong alignment on HWUILibrary_Core_EuqalEqual_DraftTask");
static_assert(sizeof(HWUILibrary_Core_EuqalEqual_DraftTask) == 0x000098, "Wrong size on HWUILibrary_Core_EuqalEqual_DraftTask");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftTask, A) == 0x000000, "Member 'HWUILibrary_Core_EuqalEqual_DraftTask::A' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftTask, B) == 0x000048, "Member 'HWUILibrary_Core_EuqalEqual_DraftTask::B' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_EuqalEqual_DraftTask, ReturnValue) == 0x000090, "Member 'HWUILibrary_Core_EuqalEqual_DraftTask::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.FindEquipmentItem
// 0x0050 (0x0050 - 0x0000)
struct HWUILibrary_Core_FindEquipmentItem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_ItemId                             InItemId;                                          // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWEquipmentItem>        OutEquipmentItem;                                  // 0x0020(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeHiddenItems;                               // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_FindEquipmentItem) == 0x000008, "Wrong alignment on HWUILibrary_Core_FindEquipmentItem");
static_assert(sizeof(HWUILibrary_Core_FindEquipmentItem) == 0x000050, "Wrong size on HWUILibrary_Core_FindEquipmentItem");
static_assert(offsetof(HWUILibrary_Core_FindEquipmentItem, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_FindEquipmentItem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_FindEquipmentItem, InItemId) == 0x000008, "Member 'HWUILibrary_Core_FindEquipmentItem::InItemId' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_FindEquipmentItem, OutEquipmentItem) == 0x000020, "Member 'HWUILibrary_Core_FindEquipmentItem::OutEquipmentItem' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_FindEquipmentItem, bIncludeHiddenItems) == 0x000048, "Member 'HWUILibrary_Core_FindEquipmentItem::bIncludeHiddenItems' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_FindEquipmentItem, ReturnValue) == 0x000049, "Member 'HWUILibrary_Core_FindEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetCachedProgressCountFromQuestEntry
// 0x00C0 (0x00C0 - 0x0000)
struct HWUILibrary_Core_GetCachedProgressCountFromQuestEntry final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGodQuestEntry                         InEntry;                                           // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00B8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_GetCachedProgressCountFromQuestEntry) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetCachedProgressCountFromQuestEntry");
static_assert(sizeof(HWUILibrary_Core_GetCachedProgressCountFromQuestEntry) == 0x0000C0, "Wrong size on HWUILibrary_Core_GetCachedProgressCountFromQuestEntry");
static_assert(offsetof(HWUILibrary_Core_GetCachedProgressCountFromQuestEntry, PlayerInfo) == 0x000000, "Member 'HWUILibrary_Core_GetCachedProgressCountFromQuestEntry::PlayerInfo' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetCachedProgressCountFromQuestEntry, InEntry) == 0x000008, "Member 'HWUILibrary_Core_GetCachedProgressCountFromQuestEntry::InEntry' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetCachedProgressCountFromQuestEntry, ReturnValue) == 0x0000B8, "Member 'HWUILibrary_Core_GetCachedProgressCountFromQuestEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetCertEnvironment
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_GetCertEnvironment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutFound;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetCertEnvironment) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetCertEnvironment");
static_assert(sizeof(HWUILibrary_Core_GetCertEnvironment) == 0x000010, "Wrong size on HWUILibrary_Core_GetCertEnvironment");
static_assert(offsetof(HWUILibrary_Core_GetCertEnvironment, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_GetCertEnvironment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetCertEnvironment, bOutFound) == 0x000008, "Member 'HWUILibrary_Core_GetCertEnvironment::bOutFound' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetCertEnvironment, ReturnValue) == 0x00000C, "Member 'HWUILibrary_Core_GetCertEnvironment::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetContainerDesiredFocusTarget
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_GetContainerDesiredFocusTarget final
{
public:
	const class UPanelWidget*                     PanelWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetContainerDesiredFocusTarget) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetContainerDesiredFocusTarget");
static_assert(sizeof(HWUILibrary_Core_GetContainerDesiredFocusTarget) == 0x000010, "Wrong size on HWUILibrary_Core_GetContainerDesiredFocusTarget");
static_assert(offsetof(HWUILibrary_Core_GetContainerDesiredFocusTarget, PanelWidget) == 0x000000, "Member 'HWUILibrary_Core_GetContainerDesiredFocusTarget::PanelWidget' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetContainerDesiredFocusTarget, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetContainerDesiredFocusTarget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetEngineVersionChangeList
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_GetEngineVersionChangeList final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetEngineVersionChangeList) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetEngineVersionChangeList");
static_assert(sizeof(HWUILibrary_Core_GetEngineVersionChangeList) == 0x000010, "Wrong size on HWUILibrary_Core_GetEngineVersionChangeList");
static_assert(offsetof(HWUILibrary_Core_GetEngineVersionChangeList, ReturnValue) == 0x000000, "Member 'HWUILibrary_Core_GetEngineVersionChangeList::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetRealTimeSecondsForUIMaterial
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_GetRealTimeSecondsForUIMaterial final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetRealTimeSecondsForUIMaterial) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetRealTimeSecondsForUIMaterial");
static_assert(sizeof(HWUILibrary_Core_GetRealTimeSecondsForUIMaterial) == 0x000010, "Wrong size on HWUILibrary_Core_GetRealTimeSecondsForUIMaterial");
static_assert(offsetof(HWUILibrary_Core_GetRealTimeSecondsForUIMaterial, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_GetRealTimeSecondsForUIMaterial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetRealTimeSecondsForUIMaterial, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetRealTimeSecondsForUIMaterial::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetRomanNumeralFromInt
// 0x0018 (0x0018 - 0x0000)
struct HWUILibrary_Core_GetRomanNumeralFromInt final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetRomanNumeralFromInt) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetRomanNumeralFromInt");
static_assert(sizeof(HWUILibrary_Core_GetRomanNumeralFromInt) == 0x000018, "Wrong size on HWUILibrary_Core_GetRomanNumeralFromInt");
static_assert(offsetof(HWUILibrary_Core_GetRomanNumeralFromInt, Number) == 0x000000, "Member 'HWUILibrary_Core_GetRomanNumeralFromInt::Number' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetRomanNumeralFromInt, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetRomanNumeralFromInt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetRootUserWidget
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_GetRootUserWidget final
{
public:
	const class UWidget*                          ChildWidget;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetRootUserWidget) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetRootUserWidget");
static_assert(sizeof(HWUILibrary_Core_GetRootUserWidget) == 0x000010, "Wrong size on HWUILibrary_Core_GetRootUserWidget");
static_assert(offsetof(HWUILibrary_Core_GetRootUserWidget, ChildWidget) == 0x000000, "Member 'HWUILibrary_Core_GetRootUserWidget::ChildWidget' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetRootUserWidget, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetRootUserWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetTeamBasedDisplayTextureForCharacterItem
// 0x0048 (0x0048 - 0x0000)
struct HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0008(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OrderTextureGameplayTag;                           // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChaosTextureGameplayTag;                           // 0x0014(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0020(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem");
static_assert(sizeof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem) == 0x000048, "Wrong size on HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem");
static_assert(offsetof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem, CharacterItem) == 0x000000, "Member 'HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem, TeamId) == 0x000008, "Member 'HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem::TeamId' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem, OrderTextureGameplayTag) == 0x00000C, "Member 'HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem::OrderTextureGameplayTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem, ChaosTextureGameplayTag) == 0x000014, "Member 'HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem::ChaosTextureGameplayTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem, ReturnValue) == 0x000020, "Member 'HWUILibrary_Core_GetTeamBasedDisplayTextureForCharacterItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetTimerTextFromSeconds
// 0x0020 (0x0020 - 0x0000)
struct HWUILibrary_Core_GetTimerTextFromSeconds final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowHour;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowMinute;                                 // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFractional;                                   // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroPad;                                          // 0x0007(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetTimerTextFromSeconds) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetTimerTextFromSeconds");
static_assert(sizeof(HWUILibrary_Core_GetTimerTextFromSeconds) == 0x000020, "Wrong size on HWUILibrary_Core_GetTimerTextFromSeconds");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, TimeInSeconds) == 0x000000, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::TimeInSeconds' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, bAlwaysShowHour) == 0x000004, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::bAlwaysShowHour' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, bAlwaysShowMinute) == 0x000005, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::bAlwaysShowMinute' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, bShowFractional) == 0x000006, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::bShowFractional' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, bZeroPad) == 0x000007, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::bZeroPad' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTimerTextFromSeconds, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetTimerTextFromSeconds::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetTrackerAwardTypeFromQuestEntry
// 0x00C0 (0x00C0 - 0x0000)
struct HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGodQuestEntry                         InEntry;                                           // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EHWQuestTrackerAwardType                      ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry");
static_assert(sizeof(HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry) == 0x0000C0, "Wrong size on HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry");
static_assert(offsetof(HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry, InEntry) == 0x000008, "Member 'HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry::InEntry' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry, ReturnValue) == 0x0000B8, "Member 'HWUILibrary_Core_GetTrackerAwardTypeFromQuestEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetTruncatedActiveSessionId
// 0x0018 (0x0018 - 0x0000)
struct HWUILibrary_Core_GetTruncatedActiveSessionId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetTruncatedActiveSessionId) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetTruncatedActiveSessionId");
static_assert(sizeof(HWUILibrary_Core_GetTruncatedActiveSessionId) == 0x000018, "Wrong size on HWUILibrary_Core_GetTruncatedActiveSessionId");
static_assert(offsetof(HWUILibrary_Core_GetTruncatedActiveSessionId, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_GetTruncatedActiveSessionId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetTruncatedActiveSessionId, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetTruncatedActiveSessionId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.GetVersionAndMatchDisplayString
// 0x0018 (0x0018 - 0x0000)
struct HWUILibrary_Core_GetVersionAndMatchDisplayString final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_GetVersionAndMatchDisplayString) == 0x000008, "Wrong alignment on HWUILibrary_Core_GetVersionAndMatchDisplayString");
static_assert(sizeof(HWUILibrary_Core_GetVersionAndMatchDisplayString) == 0x000018, "Wrong size on HWUILibrary_Core_GetVersionAndMatchDisplayString");
static_assert(offsetof(HWUILibrary_Core_GetVersionAndMatchDisplayString, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_GetVersionAndMatchDisplayString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_GetVersionAndMatchDisplayString, ReturnValue) == 0x000008, "Member 'HWUILibrary_Core_GetVersionAndMatchDisplayString::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.IsCharacterAscensionPassOwned
// 0x0018 (0x0018 - 0x0000)
struct HWUILibrary_Core_IsCharacterAscensionPassOwned final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_IsCharacterAscensionPassOwned) == 0x000008, "Wrong alignment on HWUILibrary_Core_IsCharacterAscensionPassOwned");
static_assert(sizeof(HWUILibrary_Core_IsCharacterAscensionPassOwned) == 0x000018, "Wrong size on HWUILibrary_Core_IsCharacterAscensionPassOwned");
static_assert(offsetof(HWUILibrary_Core_IsCharacterAscensionPassOwned, PlayerInfo) == 0x000000, "Member 'HWUILibrary_Core_IsCharacterAscensionPassOwned::PlayerInfo' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_IsCharacterAscensionPassOwned, CharacterItem) == 0x000008, "Member 'HWUILibrary_Core_IsCharacterAscensionPassOwned::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_IsCharacterAscensionPassOwned, ReturnValue) == 0x000010, "Member 'HWUILibrary_Core_IsCharacterAscensionPassOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.IsInEditor
// 0x0001 (0x0001 - 0x0000)
struct HWUILibrary_Core_IsInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_IsInEditor) == 0x000001, "Wrong alignment on HWUILibrary_Core_IsInEditor");
static_assert(sizeof(HWUILibrary_Core_IsInEditor) == 0x000001, "Wrong size on HWUILibrary_Core_IsInEditor");
static_assert(offsetof(HWUILibrary_Core_IsInEditor, ReturnValue) == 0x000000, "Member 'HWUILibrary_Core_IsInEditor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.IsLocalDraftTask
// 0x0058 (0x0058 - 0x0000)
struct HWUILibrary_Core_IsLocalDraftTask final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDraftTask                             DraftTask;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_IsLocalDraftTask) == 0x000008, "Wrong alignment on HWUILibrary_Core_IsLocalDraftTask");
static_assert(sizeof(HWUILibrary_Core_IsLocalDraftTask) == 0x000058, "Wrong size on HWUILibrary_Core_IsLocalDraftTask");
static_assert(offsetof(HWUILibrary_Core_IsLocalDraftTask, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_IsLocalDraftTask::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_IsLocalDraftTask, DraftTask) == 0x000008, "Member 'HWUILibrary_Core_IsLocalDraftTask::DraftTask' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_IsLocalDraftTask, ReturnValue) == 0x000050, "Member 'HWUILibrary_Core_IsLocalDraftTask::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.JoinTextArray
// 0x0040 (0x0040 - 0x0000)
struct HWUILibrary_Core_JoinTextArray final
{
public:
	TArray<class FText>                           Texts;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Delimiter;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_JoinTextArray) == 0x000008, "Wrong alignment on HWUILibrary_Core_JoinTextArray");
static_assert(sizeof(HWUILibrary_Core_JoinTextArray) == 0x000040, "Wrong size on HWUILibrary_Core_JoinTextArray");
static_assert(offsetof(HWUILibrary_Core_JoinTextArray, Texts) == 0x000000, "Member 'HWUILibrary_Core_JoinTextArray::Texts' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_JoinTextArray, Delimiter) == 0x000010, "Member 'HWUILibrary_Core_JoinTextArray::Delimiter' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_JoinTextArray, ReturnValue) == 0x000028, "Member 'HWUILibrary_Core_JoinTextArray::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.NotEqual_DraftChoice
// 0x0028 (0x0028 - 0x0000)
struct HWUILibrary_Core_NotEqual_DraftChoice final
{
public:
	struct FDraftChoice                           A;                                                 // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FDraftChoice                           B;                                                 // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_NotEqual_DraftChoice) == 0x000008, "Wrong alignment on HWUILibrary_Core_NotEqual_DraftChoice");
static_assert(sizeof(HWUILibrary_Core_NotEqual_DraftChoice) == 0x000028, "Wrong size on HWUILibrary_Core_NotEqual_DraftChoice");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftChoice, A) == 0x000000, "Member 'HWUILibrary_Core_NotEqual_DraftChoice::A' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftChoice, B) == 0x000010, "Member 'HWUILibrary_Core_NotEqual_DraftChoice::B' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftChoice, ReturnValue) == 0x000020, "Member 'HWUILibrary_Core_NotEqual_DraftChoice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.NotEqual_DraftTask
// 0x0098 (0x0098 - 0x0000)
struct HWUILibrary_Core_NotEqual_DraftTask final
{
public:
	struct FDraftTask                             A;                                                 // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FDraftTask                             B;                                                 // 0x0048(0x0048)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_NotEqual_DraftTask) == 0x000008, "Wrong alignment on HWUILibrary_Core_NotEqual_DraftTask");
static_assert(sizeof(HWUILibrary_Core_NotEqual_DraftTask) == 0x000098, "Wrong size on HWUILibrary_Core_NotEqual_DraftTask");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftTask, A) == 0x000000, "Member 'HWUILibrary_Core_NotEqual_DraftTask::A' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftTask, B) == 0x000048, "Member 'HWUILibrary_Core_NotEqual_DraftTask::B' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_NotEqual_DraftTask, ReturnValue) == 0x000090, "Member 'HWUILibrary_Core_NotEqual_DraftTask::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.PasteFromClipboard
// 0x0010 (0x0010 - 0x0000)
struct HWUILibrary_Core_PasteFromClipboard final
{
public:
	class FString                                 OutString;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_PasteFromClipboard) == 0x000008, "Wrong alignment on HWUILibrary_Core_PasteFromClipboard");
static_assert(sizeof(HWUILibrary_Core_PasteFromClipboard) == 0x000010, "Wrong size on HWUILibrary_Core_PasteFromClipboard");
static_assert(offsetof(HWUILibrary_Core_PasteFromClipboard, OutString) == 0x000000, "Member 'HWUILibrary_Core_PasteFromClipboard::OutString' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.Play2DSoundFromAnnouncerPack
// 0x0030 (0x0030 - 0x0000)
struct HWUILibrary_Core_Play2DSoundFromAnnouncerPack final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWAnnouncerPackItem*             InAnnouncerPack;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAssetRequestKey                       AssetKey;                                          // 0x0010(0x001C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_Play2DSoundFromAnnouncerPack) == 0x000008, "Wrong alignment on HWUILibrary_Core_Play2DSoundFromAnnouncerPack");
static_assert(sizeof(HWUILibrary_Core_Play2DSoundFromAnnouncerPack) == 0x000030, "Wrong size on HWUILibrary_Core_Play2DSoundFromAnnouncerPack");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromAnnouncerPack, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_Play2DSoundFromAnnouncerPack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromAnnouncerPack, InAnnouncerPack) == 0x000008, "Member 'HWUILibrary_Core_Play2DSoundFromAnnouncerPack::InAnnouncerPack' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromAnnouncerPack, AssetKey) == 0x000010, "Member 'HWUILibrary_Core_Play2DSoundFromAnnouncerPack::AssetKey' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.Play2DSoundFromSkinVoicePack
// 0x0018 (0x0018 - 0x0000)
struct HWUILibrary_Core_Play2DSoundFromSkinVoicePack final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWSkinItem*                      InSkin;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InVoiceRowName;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_Play2DSoundFromSkinVoicePack) == 0x000008, "Wrong alignment on HWUILibrary_Core_Play2DSoundFromSkinVoicePack");
static_assert(sizeof(HWUILibrary_Core_Play2DSoundFromSkinVoicePack) == 0x000018, "Wrong size on HWUILibrary_Core_Play2DSoundFromSkinVoicePack");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromSkinVoicePack, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_Play2DSoundFromSkinVoicePack::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromSkinVoicePack, InSkin) == 0x000008, "Member 'HWUILibrary_Core_Play2DSoundFromSkinVoicePack::InSkin' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_Play2DSoundFromSkinVoicePack, InVoiceRowName) == 0x000010, "Member 'HWUILibrary_Core_Play2DSoundFromSkinVoicePack::InVoiceRowName' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ReturnToMainLobbyFromEOML
// 0x0030 (0x0030 - 0x0000)
struct HWUILibrary_Core_ReturnToMainLobbyFromEOML final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  MainLobbyMap;                                      // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_ReturnToMainLobbyFromEOML) == 0x000008, "Wrong alignment on HWUILibrary_Core_ReturnToMainLobbyFromEOML");
static_assert(sizeof(HWUILibrary_Core_ReturnToMainLobbyFromEOML) == 0x000030, "Wrong size on HWUILibrary_Core_ReturnToMainLobbyFromEOML");
static_assert(offsetof(HWUILibrary_Core_ReturnToMainLobbyFromEOML, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ReturnToMainLobbyFromEOML::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ReturnToMainLobbyFromEOML, MainLobbyMap) == 0x000008, "Member 'HWUILibrary_Core_ReturnToMainLobbyFromEOML::MainLobbyMap' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.SanitizeRichText
// 0x0030 (0x0030 - 0x0000)
struct HWUILibrary_Core_SanitizeRichText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUILibrary_Core_SanitizeRichText) == 0x000008, "Wrong alignment on HWUILibrary_Core_SanitizeRichText");
static_assert(sizeof(HWUILibrary_Core_SanitizeRichText) == 0x000030, "Wrong size on HWUILibrary_Core_SanitizeRichText");
static_assert(offsetof(HWUILibrary_Core_SanitizeRichText, InText) == 0x000000, "Member 'HWUILibrary_Core_SanitizeRichText::InText' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_SanitizeRichText, ReturnValue) == 0x000018, "Member 'HWUILibrary_Core_SanitizeRichText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUILibrary_Core.ToggleHelpTipForTargeterGameplayCue
// 0x00F8 (0x00F8 - 0x0000)
struct HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GCParams;                                          // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OrderHelpTipTag;                                   // 0x00E0(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChaosHelpTipTag;                                   // 0x00E8(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggleOn;                                         // 0x00F0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue) == 0x000008, "Wrong alignment on HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue");
static_assert(sizeof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue) == 0x0000F8, "Wrong size on HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue");
static_assert(offsetof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue, WorldContextObject) == 0x000000, "Member 'HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue, GCParams) == 0x000008, "Member 'HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue::GCParams' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue, OrderHelpTipTag) == 0x0000E0, "Member 'HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue::OrderHelpTipTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue, ChaosHelpTipTag) == 0x0000E8, "Member 'HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue::ChaosHelpTipTag' has a wrong offset!");
static_assert(offsetof(HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue, bToggleOn) == 0x0000F0, "Member 'HWUILibrary_Core_ToggleHelpTipForTargeterGameplayCue::bToggleOn' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsGodOverviewWidget.GetKeywordDataFromPotentialTags
// 0x0118 (0x0118 - 0x0000)
struct HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags final
{
public:
	struct FGameplayTagContainer                  PotentialTags;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FHWDataDisplay_Keyword                 OutKeywordData;                                    // 0x0020(0x00F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags) == 0x000008, "Wrong alignment on HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags");
static_assert(sizeof(HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags) == 0x000118, "Wrong size on HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags");
static_assert(offsetof(HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags, PotentialTags) == 0x000000, "Member 'HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags::PotentialTags' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags, OutKeywordData) == 0x000020, "Member 'HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags::OutKeywordData' has a wrong offset!");
static_assert(offsetof(HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags, ReturnValue) == 0x000110, "Member 'HWGodDetailsGodOverviewWidget_GetKeywordDataFromPotentialTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Objective.DisplayText
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Objective_DisplayText final
{
public:
	TArray<class FText>                           TextList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidget_Objective_DisplayText) == 0x000008, "Wrong alignment on HWTooltipWidget_Objective_DisplayText");
static_assert(sizeof(HWTooltipWidget_Objective_DisplayText) == 0x000018, "Wrong size on HWTooltipWidget_Objective_DisplayText");
static_assert(offsetof(HWTooltipWidget_Objective_DisplayText, TextList) == 0x000000, "Member 'HWTooltipWidget_Objective_DisplayText::TextList' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_Objective_DisplayText, SelectedIndex) == 0x000010, "Member 'HWTooltipWidget_Objective_DisplayText::SelectedIndex' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Objective.Populate
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Objective_Populate final
{
public:
	TArray<class FText>                           TextList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidget_Objective_Populate) == 0x000008, "Wrong alignment on HWTooltipWidget_Objective_Populate");
static_assert(sizeof(HWTooltipWidget_Objective_Populate) == 0x000018, "Wrong size on HWTooltipWidget_Objective_Populate");
static_assert(offsetof(HWTooltipWidget_Objective_Populate, TextList) == 0x000000, "Member 'HWTooltipWidget_Objective_Populate::TextList' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_Objective_Populate, SelectedIndex) == 0x000010, "Member 'HWTooltipWidget_Objective_Populate::SelectedIndex' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.HandleRotatePreviewActionHeld
// 0x0008 (0x0008 - 0x0000)
struct HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld final
{
public:
	float                                         HoldPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld) == 0x000004, "Wrong alignment on HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld");
static_assert(sizeof(HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld) == 0x000008, "Wrong size on HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld");
static_assert(offsetof(HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld, HoldPercent) == 0x000000, "Member 'HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld::HoldPercent' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld, Direction) == 0x000004, "Member 'HWGodDetailsScreenWidget_HandleRotatePreviewActionHeld::Direction' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.OnActiveDetailsWidgetSet
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet) == 0x000008, "Wrong alignment on HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet");
static_assert(sizeof(HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet) == 0x000010, "Wrong size on HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet");
static_assert(offsetof(HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet, TabBarWidget) == 0x000000, "Member 'HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet, Index_0) == 0x000008, "Member 'HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet::Index_0' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet, Cause) == 0x00000C, "Member 'HWGodDetailsScreenWidget_OnActiveDetailsWidgetSet::Cause' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.OnChangeGodItem
// 0x0004 (0x0004 - 0x0000)
struct HWGodDetailsScreenWidget_OnChangeGodItem final
{
public:
	int32                                         OffsetFromCurrentGod;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_OnChangeGodItem) == 0x000004, "Wrong alignment on HWGodDetailsScreenWidget_OnChangeGodItem");
static_assert(sizeof(HWGodDetailsScreenWidget_OnChangeGodItem) == 0x000004, "Wrong size on HWGodDetailsScreenWidget_OnChangeGodItem");
static_assert(offsetof(HWGodDetailsScreenWidget_OnChangeGodItem, OffsetFromCurrentGod) == 0x000000, "Member 'HWGodDetailsScreenWidget_OnChangeGodItem::OffsetFromCurrentGod' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.SetActiveDetailsWidget
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsScreenWidget_SetActiveDetailsWidget final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodDetailsScreenWidget_SetActiveDetailsWidget) == 0x000008, "Wrong alignment on HWGodDetailsScreenWidget_SetActiveDetailsWidget");
static_assert(sizeof(HWGodDetailsScreenWidget_SetActiveDetailsWidget) == 0x000010, "Wrong size on HWGodDetailsScreenWidget_SetActiveDetailsWidget");
static_assert(offsetof(HWGodDetailsScreenWidget_SetActiveDetailsWidget, TabBarWidget) == 0x000000, "Member 'HWGodDetailsScreenWidget_SetActiveDetailsWidget::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_SetActiveDetailsWidget, Index_0) == 0x000008, "Member 'HWGodDetailsScreenWidget_SetActiveDetailsWidget::Index_0' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_SetActiveDetailsWidget, Cause) == 0x00000C, "Member 'HWGodDetailsScreenWidget_SetActiveDetailsWidget::Cause' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.UpdateGodItemUnlockPrice
// 0x0010 (0x0010 - 0x0000)
struct HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice) == 0x000008, "Wrong alignment on HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice");
static_assert(sizeof(HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice) == 0x000010, "Wrong size on HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice");
static_assert(offsetof(HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice, PriceItem) == 0x000000, "Member 'HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice, PriceGroupTag) == 0x000008, "Member 'HWGodDetailsScreenWidget_UpdateGodItemUnlockPrice::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.UpdateToggleGodPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsScreenWidget_UpdateToggleGodPrompt final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_UpdateToggleGodPrompt) == 0x000001, "Wrong alignment on HWGodDetailsScreenWidget_UpdateToggleGodPrompt");
static_assert(sizeof(HWGodDetailsScreenWidget_UpdateToggleGodPrompt) == 0x000001, "Wrong size on HWGodDetailsScreenWidget_UpdateToggleGodPrompt");
static_assert(offsetof(HWGodDetailsScreenWidget_UpdateToggleGodPrompt, bShow) == 0x000000, "Member 'HWGodDetailsScreenWidget_UpdateToggleGodPrompt::bShow' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.UpdateUnlockPromptVisibility
// 0x0002 (0x0002 - 0x0000)
struct HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility final
{
public:
	bool                                          bCurrentTabShouldShowPrompt;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCollectionItemStatus                       GodItemStatus;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility) == 0x000001, "Wrong alignment on HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility");
static_assert(sizeof(HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility) == 0x000002, "Wrong size on HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility");
static_assert(offsetof(HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility, bCurrentTabShouldShowPrompt) == 0x000000, "Member 'HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility::bCurrentTabShouldShowPrompt' has a wrong offset!");
static_assert(offsetof(HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility, GodItemStatus) == 0x000001, "Member 'HWGodDetailsScreenWidget_UpdateUnlockPromptVisibility::GodItemStatus' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.GetCurrentGodItemStatus
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsScreenWidget_GetCurrentGodItemStatus final
{
public:
	EHWCollectionItemStatus                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_GetCurrentGodItemStatus) == 0x000001, "Wrong alignment on HWGodDetailsScreenWidget_GetCurrentGodItemStatus");
static_assert(sizeof(HWGodDetailsScreenWidget_GetCurrentGodItemStatus) == 0x000001, "Wrong size on HWGodDetailsScreenWidget_GetCurrentGodItemStatus");
static_assert(offsetof(HWGodDetailsScreenWidget_GetCurrentGodItemStatus, ReturnValue) == 0x000000, "Member 'HWGodDetailsScreenWidget_GetCurrentGodItemStatus::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.ShouldCurrentTabShowEnterPracticePrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt) == 0x000001, "Wrong alignment on HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt");
static_assert(sizeof(HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt) == 0x000001, "Wrong size on HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt");
static_assert(offsetof(HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt, ReturnValue) == 0x000000, "Member 'HWGodDetailsScreenWidget_ShouldCurrentTabShowEnterPracticePrompt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodDetailsScreenWidget.ShouldCurrentTabShowUnlockPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt) == 0x000001, "Wrong alignment on HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt");
static_assert(sizeof(HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt) == 0x000001, "Wrong size on HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt");
static_assert(offsetof(HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt, ReturnValue) == 0x000000, "Member 'HWGodDetailsScreenWidget_ShouldCurrentTabShowUnlockPrompt::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.DisplayAbilityDescription
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Item_DisplayAbilityDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_DisplayAbilityDescription) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_DisplayAbilityDescription");
static_assert(sizeof(HWTooltipWidget_Item_DisplayAbilityDescription) == 0x000018, "Wrong size on HWTooltipWidget_Item_DisplayAbilityDescription");
static_assert(offsetof(HWTooltipWidget_Item_DisplayAbilityDescription, Description) == 0x000000, "Member 'HWTooltipWidget_Item_DisplayAbilityDescription::Description' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.DisplayDescription
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Item_DisplayDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_DisplayDescription) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_DisplayDescription");
static_assert(sizeof(HWTooltipWidget_Item_DisplayDescription) == 0x000018, "Wrong size on HWTooltipWidget_Item_DisplayDescription");
static_assert(offsetof(HWTooltipWidget_Item_DisplayDescription, Description) == 0x000000, "Member 'HWTooltipWidget_Item_DisplayDescription::Description' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.DisplayIcon
// 0x0028 (0x0028 - 0x0000)
struct HWTooltipWidget_Item_DisplayIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_DisplayIcon) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_DisplayIcon");
static_assert(sizeof(HWTooltipWidget_Item_DisplayIcon) == 0x000028, "Wrong size on HWTooltipWidget_Item_DisplayIcon");
static_assert(offsetof(HWTooltipWidget_Item_DisplayIcon, Icon) == 0x000000, "Member 'HWTooltipWidget_Item_DisplayIcon::Icon' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.DisplayTitle
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Item_DisplayTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_DisplayTitle) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_DisplayTitle");
static_assert(sizeof(HWTooltipWidget_Item_DisplayTitle) == 0x000018, "Wrong size on HWTooltipWidget_Item_DisplayTitle");
static_assert(offsetof(HWTooltipWidget_Item_DisplayTitle, Title) == 0x000000, "Member 'HWTooltipWidget_Item_DisplayTitle::Title' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.DisplayUniqueness
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidget_Item_DisplayUniqueness final
{
public:
	bool                                          bIsUnique;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_DisplayUniqueness) == 0x000001, "Wrong alignment on HWTooltipWidget_Item_DisplayUniqueness");
static_assert(sizeof(HWTooltipWidget_Item_DisplayUniqueness) == 0x000001, "Wrong size on HWTooltipWidget_Item_DisplayUniqueness");
static_assert(offsetof(HWTooltipWidget_Item_DisplayUniqueness, bIsUnique) == 0x000000, "Member 'HWTooltipWidget_Item_DisplayUniqueness::bIsUnique' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.Populate
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Item_Populate final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_Populate) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_Populate");
static_assert(sizeof(HWTooltipWidget_Item_Populate) == 0x000008, "Wrong size on HWTooltipWidget_Item_Populate");
static_assert(offsetof(HWTooltipWidget_Item_Populate, EquipmentItem) == 0x000000, "Member 'HWTooltipWidget_Item_Populate::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Item.StatLineAdded
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Item_StatLineAdded final
{
public:
	class UHWTooltipWidget_ItemStat*              Line;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Item_StatLineAdded) == 0x000008, "Wrong alignment on HWTooltipWidget_Item_StatLineAdded");
static_assert(sizeof(HWTooltipWidget_Item_StatLineAdded) == 0x000008, "Wrong size on HWTooltipWidget_Item_StatLineAdded");
static_assert(offsetof(HWTooltipWidget_Item_StatLineAdded, Line) == 0x000000, "Member 'HWTooltipWidget_Item_StatLineAdded::Line' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemDisplayWidget.HandleItemTreeItemComponentSelected
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected final
{
public:
	const class UHWEquipmentItem*                 SelectedComponentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected) == 0x000008, "Wrong alignment on HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected");
static_assert(sizeof(HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected) == 0x000008, "Wrong size on HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected");
static_assert(offsetof(HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected, SelectedComponentItem) == 0x000000, "Member 'HWGodBuilderItemDisplayWidget_HandleItemTreeItemComponentSelected::SelectedComponentItem' has a wrong offset!");

// Function HemingwayUI.HWComboBox.AddOptions
// 0x0020 (0x0020 - 0x0000)
struct HWComboBox_AddOptions final
{
public:
	TArray<struct FHWComboBoxOption>              InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   AutoSelectOption;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppend;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWComboBox_AddOptions) == 0x000008, "Wrong alignment on HWComboBox_AddOptions");
static_assert(sizeof(HWComboBox_AddOptions) == 0x000020, "Wrong size on HWComboBox_AddOptions");
static_assert(offsetof(HWComboBox_AddOptions, InOptions) == 0x000000, "Member 'HWComboBox_AddOptions::InOptions' has a wrong offset!");
static_assert(offsetof(HWComboBox_AddOptions, AutoSelectOption) == 0x000010, "Member 'HWComboBox_AddOptions::AutoSelectOption' has a wrong offset!");
static_assert(offsetof(HWComboBox_AddOptions, bAppend) == 0x000018, "Member 'HWComboBox_AddOptions::bAppend' has a wrong offset!");

// Function HemingwayUI.HWComboBox.HandleGenerateContentWidget
// 0x0010 (0x0010 - 0x0000)
struct HWComboBox_HandleGenerateContentWidget final
{
public:
	class FName                                   Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBox_HandleGenerateContentWidget) == 0x000008, "Wrong alignment on HWComboBox_HandleGenerateContentWidget");
static_assert(sizeof(HWComboBox_HandleGenerateContentWidget) == 0x000010, "Wrong size on HWComboBox_HandleGenerateContentWidget");
static_assert(offsetof(HWComboBox_HandleGenerateContentWidget, Item) == 0x000000, "Member 'HWComboBox_HandleGenerateContentWidget::Item' has a wrong offset!");
static_assert(offsetof(HWComboBox_HandleGenerateContentWidget, ReturnValue) == 0x000008, "Member 'HWComboBox_HandleGenerateContentWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWComboBox.HandleGenerateItemWidget
// 0x0010 (0x0010 - 0x0000)
struct HWComboBox_HandleGenerateItemWidget final
{
public:
	class FName                                   Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBox_HandleGenerateItemWidget) == 0x000008, "Wrong alignment on HWComboBox_HandleGenerateItemWidget");
static_assert(sizeof(HWComboBox_HandleGenerateItemWidget) == 0x000010, "Wrong size on HWComboBox_HandleGenerateItemWidget");
static_assert(offsetof(HWComboBox_HandleGenerateItemWidget, Item) == 0x000000, "Member 'HWComboBox_HandleGenerateItemWidget::Item' has a wrong offset!");
static_assert(offsetof(HWComboBox_HandleGenerateItemWidget, ReturnValue) == 0x000008, "Member 'HWComboBox_HandleGenerateItemWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWComboBox.HandleSelectionChangedEvent
// 0x000C (0x000C - 0x0000)
struct HWComboBox_HandleSelectionChangedEvent final
{
public:
	class FName                                   SelectedItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWComboBox_HandleSelectionChangedEvent) == 0x000004, "Wrong alignment on HWComboBox_HandleSelectionChangedEvent");
static_assert(sizeof(HWComboBox_HandleSelectionChangedEvent) == 0x00000C, "Wrong size on HWComboBox_HandleSelectionChangedEvent");
static_assert(offsetof(HWComboBox_HandleSelectionChangedEvent, SelectedItem) == 0x000000, "Member 'HWComboBox_HandleSelectionChangedEvent::SelectedItem' has a wrong offset!");
static_assert(offsetof(HWComboBox_HandleSelectionChangedEvent, SelectionType) == 0x000008, "Member 'HWComboBox_HandleSelectionChangedEvent::SelectionType' has a wrong offset!");

// Function HemingwayUI.HWComboBox.GetAvailableDefaultOptions
// 0x0010 (0x0010 - 0x0000)
struct HWComboBox_GetAvailableDefaultOptions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBox_GetAvailableDefaultOptions) == 0x000008, "Wrong alignment on HWComboBox_GetAvailableDefaultOptions");
static_assert(sizeof(HWComboBox_GetAvailableDefaultOptions) == 0x000010, "Wrong size on HWComboBox_GetAvailableDefaultOptions");
static_assert(offsetof(HWComboBox_GetAvailableDefaultOptions, ReturnValue) == 0x000000, "Member 'HWComboBox_GetAvailableDefaultOptions::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWComboBox.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct HWComboBox_GetOptions final
{
public:
	TArray<struct FHWComboBoxOption>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWComboBox_GetOptions) == 0x000008, "Wrong alignment on HWComboBox_GetOptions");
static_assert(sizeof(HWComboBox_GetOptions) == 0x000010, "Wrong size on HWComboBox_GetOptions");
static_assert(offsetof(HWComboBox_GetOptions, ReturnValue) == 0x000000, "Member 'HWComboBox_GetOptions::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenGodEntryWidget.SetGodItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodsScreenGodEntryWidget_SetGodItem final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenGodEntryWidget_SetGodItem) == 0x000008, "Wrong alignment on HWGodsScreenGodEntryWidget_SetGodItem");
static_assert(sizeof(HWGodsScreenGodEntryWidget_SetGodItem) == 0x000008, "Wrong size on HWGodsScreenGodEntryWidget_SetGodItem");
static_assert(offsetof(HWGodsScreenGodEntryWidget_SetGodItem, InGodItem) == 0x000000, "Member 'HWGodsScreenGodEntryWidget_SetGodItem::InGodItem' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenGodEntryWidget.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodsScreenGodEntryWidget_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenGodEntryWidget_SetSelected) == 0x000001, "Wrong alignment on HWGodsScreenGodEntryWidget_SetSelected");
static_assert(sizeof(HWGodsScreenGodEntryWidget_SetSelected) == 0x000001, "Wrong size on HWGodsScreenGodEntryWidget_SetSelected");
static_assert(offsetof(HWGodsScreenGodEntryWidget_SetSelected, bSelected) == 0x000000, "Member 'HWGodsScreenGodEntryWidget_SetSelected::bSelected' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenGodEntryWidget.GetTextureForExactGameplayTag
// 0x0030 (0x0030 - 0x0000)
struct HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag) == 0x000008, "Wrong alignment on HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag");
static_assert(sizeof(HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag) == 0x000030, "Wrong size on HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag");
static_assert(offsetof(HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag, GameplayTag) == 0x000000, "Member 'HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag, ReturnValue) == 0x000008, "Member 'HWGodsScreenGodEntryWidget_GetTextureForExactGameplayTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenGodEntryWidget.IsComingSoon
// 0x0001 (0x0001 - 0x0000)
struct HWGodsScreenGodEntryWidget_IsComingSoon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenGodEntryWidget_IsComingSoon) == 0x000001, "Wrong alignment on HWGodsScreenGodEntryWidget_IsComingSoon");
static_assert(sizeof(HWGodsScreenGodEntryWidget_IsComingSoon) == 0x000001, "Wrong size on HWGodsScreenGodEntryWidget_IsComingSoon");
static_assert(offsetof(HWGodsScreenGodEntryWidget_IsComingSoon, ReturnValue) == 0x000000, "Member 'HWGodsScreenGodEntryWidget_IsComingSoon::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenGodEntryWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodsScreenGodEntryWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenGodEntryWidget_IsSelected) == 0x000001, "Wrong alignment on HWGodsScreenGodEntryWidget_IsSelected");
static_assert(sizeof(HWGodsScreenGodEntryWidget_IsSelected) == 0x000001, "Wrong size on HWGodsScreenGodEntryWidget_IsSelected");
static_assert(offsetof(HWGodsScreenGodEntryWidget_IsSelected, ReturnValue) == 0x000000, "Member 'HWGodsScreenGodEntryWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.GetStoreItemForItem
// 0x0010 (0x0010 - 0x0000)
struct HWGodsScreenWidget_GetStoreItemForItem final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_GetStoreItemForItem) == 0x000008, "Wrong alignment on HWGodsScreenWidget_GetStoreItemForItem");
static_assert(sizeof(HWGodsScreenWidget_GetStoreItemForItem) == 0x000010, "Wrong size on HWGodsScreenWidget_GetStoreItemForItem");
static_assert(offsetof(HWGodsScreenWidget_GetStoreItemForItem, Item) == 0x000000, "Member 'HWGodsScreenWidget_GetStoreItemForItem::Item' has a wrong offset!");
static_assert(offsetof(HWGodsScreenWidget_GetStoreItemForItem, ReturnValue) == 0x000008, "Member 'HWGodsScreenWidget_GetStoreItemForItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.HandleFilterSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct HWGodsScreenWidget_HandleFilterSearchTextChanged final
{
public:
	class FText                                   SearchText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_HandleFilterSearchTextChanged) == 0x000008, "Wrong alignment on HWGodsScreenWidget_HandleFilterSearchTextChanged");
static_assert(sizeof(HWGodsScreenWidget_HandleFilterSearchTextChanged) == 0x000018, "Wrong size on HWGodsScreenWidget_HandleFilterSearchTextChanged");
static_assert(offsetof(HWGodsScreenWidget_HandleFilterSearchTextChanged, SearchText) == 0x000000, "Member 'HWGodsScreenWidget_HandleFilterSearchTextChanged::SearchText' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.HandleFilterSortChanged
// 0x0002 (0x0002 - 0x0000)
struct HWGodsScreenWidget_HandleFilterSortChanged final
{
public:
	EHWFilterSortMethod                           FilterMethod;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertSort;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_HandleFilterSortChanged) == 0x000001, "Wrong alignment on HWGodsScreenWidget_HandleFilterSortChanged");
static_assert(sizeof(HWGodsScreenWidget_HandleFilterSortChanged) == 0x000002, "Wrong size on HWGodsScreenWidget_HandleFilterSortChanged");
static_assert(offsetof(HWGodsScreenWidget_HandleFilterSortChanged, FilterMethod) == 0x000000, "Member 'HWGodsScreenWidget_HandleFilterSortChanged::FilterMethod' has a wrong offset!");
static_assert(offsetof(HWGodsScreenWidget_HandleFilterSortChanged, bInvertSort) == 0x000001, "Member 'HWGodsScreenWidget_HandleFilterSortChanged::bInvertSort' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.OnGodHovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodsScreenWidget_OnGodHovered final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWGodsScreenGodEntryWidget*      EntryWidget;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_OnGodHovered) == 0x000008, "Wrong alignment on HWGodsScreenWidget_OnGodHovered");
static_assert(sizeof(HWGodsScreenWidget_OnGodHovered) == 0x000010, "Wrong size on HWGodsScreenWidget_OnGodHovered");
static_assert(offsetof(HWGodsScreenWidget_OnGodHovered, GodItem) == 0x000000, "Member 'HWGodsScreenWidget_OnGodHovered::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodsScreenWidget_OnGodHovered, EntryWidget) == 0x000008, "Member 'HWGodsScreenWidget_OnGodHovered::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.OnGodSelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodsScreenWidget_OnGodSelected final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWGodsScreenGodEntryWidget*      EntryWidget;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_OnGodSelected) == 0x000008, "Wrong alignment on HWGodsScreenWidget_OnGodSelected");
static_assert(sizeof(HWGodsScreenWidget_OnGodSelected) == 0x000010, "Wrong size on HWGodsScreenWidget_OnGodSelected");
static_assert(offsetof(HWGodsScreenWidget_OnGodSelected, GodItem) == 0x000000, "Member 'HWGodsScreenWidget_OnGodSelected::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodsScreenWidget_OnGodSelected, EntryWidget) == 0x000008, "Member 'HWGodsScreenWidget_OnGodSelected::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodsScreenWidget.UpdateGodPackUpsell
// 0x0001 (0x0001 - 0x0000)
struct HWGodsScreenWidget_UpdateGodPackUpsell final
{
public:
	bool                                          bHasGodPack;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodsScreenWidget_UpdateGodPackUpsell) == 0x000001, "Wrong alignment on HWGodsScreenWidget_UpdateGodPackUpsell");
static_assert(sizeof(HWGodsScreenWidget_UpdateGodPackUpsell) == 0x000001, "Wrong size on HWGodsScreenWidget_UpdateGodPackUpsell");
static_assert(offsetof(HWGodsScreenWidget_UpdateGodPackUpsell, bHasGodPack) == 0x000000, "Member 'HWGodsScreenWidget_UpdateGodPackUpsell::bHasGodPack' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.AddPipWidgetToContainer
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_AddPipWidgetToContainer final
{
public:
	EHWVoteState                                  InitialState;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_AddPipWidgetToContainer) == 0x000001, "Wrong alignment on HWSurrenderWidget_AddPipWidgetToContainer");
static_assert(sizeof(HWSurrenderWidget_AddPipWidgetToContainer) == 0x000001, "Wrong size on HWSurrenderWidget_AddPipWidgetToContainer");
static_assert(offsetof(HWSurrenderWidget_AddPipWidgetToContainer, InitialState) == 0x000000, "Member 'HWSurrenderWidget_AddPipWidgetToContainer::InitialState' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.DisplayResult
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_DisplayResult final
{
public:
	EHWVoteResult                                 Result;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_DisplayResult) == 0x000001, "Wrong alignment on HWSurrenderWidget_DisplayResult");
static_assert(sizeof(HWSurrenderWidget_DisplayResult) == 0x000001, "Wrong size on HWSurrenderWidget_DisplayResult");
static_assert(offsetof(HWSurrenderWidget_DisplayResult, Result) == 0x000000, "Member 'HWSurrenderWidget_DisplayResult::Result' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.HandleOnHasSurrenderVotedUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated final
{
public:
	bool                                          bUpdatedHasSurrenderVoted;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated) == 0x000001, "Wrong alignment on HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated");
static_assert(sizeof(HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated) == 0x000001, "Wrong size on HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated");
static_assert(offsetof(HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated, bUpdatedHasSurrenderVoted) == 0x000000, "Member 'HWSurrenderWidget_HandleOnHasSurrenderVotedUpdated::bUpdatedHasSurrenderVoted' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.HandleOnSurrenderResolved
// 0x0010 (0x0010 - 0x0000)
struct HWSurrenderWidget_HandleOnSurrenderResolved final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWVoteResult                                 Result;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSurrenderWidget_HandleOnSurrenderResolved) == 0x000008, "Wrong alignment on HWSurrenderWidget_HandleOnSurrenderResolved");
static_assert(sizeof(HWSurrenderWidget_HandleOnSurrenderResolved) == 0x000010, "Wrong size on HWSurrenderWidget_HandleOnSurrenderResolved");
static_assert(offsetof(HWSurrenderWidget_HandleOnSurrenderResolved, TeamState) == 0x000000, "Member 'HWSurrenderWidget_HandleOnSurrenderResolved::TeamState' has a wrong offset!");
static_assert(offsetof(HWSurrenderWidget_HandleOnSurrenderResolved, Result) == 0x000008, "Member 'HWSurrenderWidget_HandleOnSurrenderResolved::Result' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.HandleOnSurrenderVotesUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWSurrenderWidget_HandleOnSurrenderVotesUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumYesVotes;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNoVotes;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_HandleOnSurrenderVotesUpdated) == 0x000008, "Wrong alignment on HWSurrenderWidget_HandleOnSurrenderVotesUpdated");
static_assert(sizeof(HWSurrenderWidget_HandleOnSurrenderVotesUpdated) == 0x000010, "Wrong size on HWSurrenderWidget_HandleOnSurrenderVotesUpdated");
static_assert(offsetof(HWSurrenderWidget_HandleOnSurrenderVotesUpdated, TeamState) == 0x000000, "Member 'HWSurrenderWidget_HandleOnSurrenderVotesUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWSurrenderWidget_HandleOnSurrenderVotesUpdated, NumYesVotes) == 0x000008, "Member 'HWSurrenderWidget_HandleOnSurrenderVotesUpdated::NumYesVotes' has a wrong offset!");
static_assert(offsetof(HWSurrenderWidget_HandleOnSurrenderVotesUpdated, NumNoVotes) == 0x00000C, "Member 'HWSurrenderWidget_HandleOnSurrenderVotesUpdated::NumNoVotes' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.OnPipWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWSurrenderWidget_OnPipWidgetAdded final
{
public:
	class UHWSurrenderPipWidget*                  PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_OnPipWidgetAdded) == 0x000008, "Wrong alignment on HWSurrenderWidget_OnPipWidgetAdded");
static_assert(sizeof(HWSurrenderWidget_OnPipWidgetAdded) == 0x000008, "Wrong size on HWSurrenderWidget_OnPipWidgetAdded");
static_assert(offsetof(HWSurrenderWidget_OnPipWidgetAdded, PipWidget) == 0x000000, "Member 'HWSurrenderWidget_OnPipWidgetAdded::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.OnPipWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWSurrenderWidget_OnPipWidgetRemoved final
{
public:
	class UHWSurrenderPipWidget*                  PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_OnPipWidgetRemoved) == 0x000008, "Wrong alignment on HWSurrenderWidget_OnPipWidgetRemoved");
static_assert(sizeof(HWSurrenderWidget_OnPipWidgetRemoved) == 0x000008, "Wrong size on HWSurrenderWidget_OnPipWidgetRemoved");
static_assert(offsetof(HWSurrenderWidget_OnPipWidgetRemoved, PipWidget) == 0x000000, "Member 'HWSurrenderWidget_OnPipWidgetRemoved::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.OnSurrenderDisplayToggled
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_OnSurrenderDisplayToggled final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_OnSurrenderDisplayToggled) == 0x000001, "Wrong alignment on HWSurrenderWidget_OnSurrenderDisplayToggled");
static_assert(sizeof(HWSurrenderWidget_OnSurrenderDisplayToggled) == 0x000001, "Wrong size on HWSurrenderWidget_OnSurrenderDisplayToggled");
static_assert(offsetof(HWSurrenderWidget_OnSurrenderDisplayToggled, bDisplay) == 0x000000, "Member 'HWSurrenderWidget_OnSurrenderDisplayToggled::bDisplay' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.ToggleDisplaySurrender
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_ToggleDisplaySurrender final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_ToggleDisplaySurrender) == 0x000001, "Wrong alignment on HWSurrenderWidget_ToggleDisplaySurrender");
static_assert(sizeof(HWSurrenderWidget_ToggleDisplaySurrender) == 0x000001, "Wrong size on HWSurrenderWidget_ToggleDisplaySurrender");
static_assert(offsetof(HWSurrenderWidget_ToggleDisplaySurrender, bDisplay) == 0x000000, "Member 'HWSurrenderWidget_ToggleDisplaySurrender::bDisplay' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.UpdateTimerDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWSurrenderWidget_UpdateTimerDisplay final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_UpdateTimerDisplay) == 0x000004, "Wrong alignment on HWSurrenderWidget_UpdateTimerDisplay");
static_assert(sizeof(HWSurrenderWidget_UpdateTimerDisplay) == 0x000008, "Wrong size on HWSurrenderWidget_UpdateTimerDisplay");
static_assert(offsetof(HWSurrenderWidget_UpdateTimerDisplay, TimeRemaining) == 0x000000, "Member 'HWSurrenderWidget_UpdateTimerDisplay::TimeRemaining' has a wrong offset!");
static_assert(offsetof(HWSurrenderWidget_UpdateTimerDisplay, TotalTime) == 0x000004, "Member 'HWSurrenderWidget_UpdateTimerDisplay::TotalTime' has a wrong offset!");

// Function HemingwayUI.HWSurrenderWidget.IsDisplaying
// 0x0001 (0x0001 - 0x0000)
struct HWSurrenderWidget_IsDisplaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSurrenderWidget_IsDisplaying) == 0x000001, "Wrong alignment on HWSurrenderWidget_IsDisplaying");
static_assert(sizeof(HWSurrenderWidget_IsDisplaying) == 0x000001, "Wrong size on HWSurrenderWidget_IsDisplaying");
static_assert(offsetof(HWSurrenderWidget_IsDisplaying, ReturnValue) == 0x000000, "Member 'HWSurrenderWidget_IsDisplaying::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenQuestWidget.AddQuest
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenQuestWidget_AddQuest final
{
public:
	const class UHWQuest*                         Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenQuestWidget_AddQuest) == 0x000008, "Wrong alignment on HWHomeScreenQuestWidget_AddQuest");
static_assert(sizeof(HWHomeScreenQuestWidget_AddQuest) == 0x000008, "Wrong size on HWHomeScreenQuestWidget_AddQuest");
static_assert(offsetof(HWHomeScreenQuestWidget_AddQuest, Quest) == 0x000000, "Member 'HWHomeScreenQuestWidget_AddQuest::Quest' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenQuestWidget.ClearQuest
// 0x0010 (0x0010 - 0x0000)
struct HWHomeScreenQuestWidget_ClearQuest final
{
public:
	const class UHWQuest*                         Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToBlockList;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWHomeScreenQuestWidget_ClearQuest) == 0x000008, "Wrong alignment on HWHomeScreenQuestWidget_ClearQuest");
static_assert(sizeof(HWHomeScreenQuestWidget_ClearQuest) == 0x000010, "Wrong size on HWHomeScreenQuestWidget_ClearQuest");
static_assert(offsetof(HWHomeScreenQuestWidget_ClearQuest, Quest) == 0x000000, "Member 'HWHomeScreenQuestWidget_ClearQuest::Quest' has a wrong offset!");
static_assert(offsetof(HWHomeScreenQuestWidget_ClearQuest, bAddToBlockList) == 0x000008, "Member 'HWHomeScreenQuestWidget_ClearQuest::bAddToBlockList' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenQuestWidget.HandleOnLocalPlayerInventoryLoaded
// 0x0018 (0x0018 - 0x0000)
struct HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded final
{
public:
	TArray<int32>                                 UpdatedInventoryIds;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded) == 0x000008, "Wrong alignment on HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded");
static_assert(sizeof(HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded) == 0x000018, "Wrong size on HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded");
static_assert(offsetof(HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded, UpdatedInventoryIds) == 0x000000, "Member 'HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded::UpdatedInventoryIds' has a wrong offset!");
static_assert(offsetof(HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded, PlayerInfo) == 0x000010, "Member 'HWHomeScreenQuestWidget_HandleOnLocalPlayerInventoryLoaded::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenQuestWidget.UpdateQuest
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenQuestWidget_UpdateQuest final
{
public:
	const class UHWQuest*                         Quest;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenQuestWidget_UpdateQuest) == 0x000008, "Wrong alignment on HWHomeScreenQuestWidget_UpdateQuest");
static_assert(sizeof(HWHomeScreenQuestWidget_UpdateQuest) == 0x000008, "Wrong size on HWHomeScreenQuestWidget_UpdateQuest");
static_assert(offsetof(HWHomeScreenQuestWidget_UpdateQuest, Quest) == 0x000000, "Member 'HWHomeScreenQuestWidget_UpdateQuest::Quest' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenQuestWidget.GetIfAutoClaimQuest
// 0x0001 (0x0001 - 0x0000)
struct HWHomeScreenQuestWidget_GetIfAutoClaimQuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenQuestWidget_GetIfAutoClaimQuest) == 0x000001, "Wrong alignment on HWHomeScreenQuestWidget_GetIfAutoClaimQuest");
static_assert(sizeof(HWHomeScreenQuestWidget_GetIfAutoClaimQuest) == 0x000001, "Wrong size on HWHomeScreenQuestWidget_GetIfAutoClaimQuest");
static_assert(offsetof(HWHomeScreenQuestWidget_GetIfAutoClaimQuest, ReturnValue) == 0x000000, "Member 'HWHomeScreenQuestWidget_GetIfAutoClaimQuest::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.DisplayAtPosition
// 0x003C (0x003C - 0x0000)
struct HWTooltipWidgetManager_DisplayAtPosition final
{
public:
	struct FGeometry                              ReferenceGeometry;                                 // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidgetManager_DisplayAtPosition) == 0x000004, "Wrong alignment on HWTooltipWidgetManager_DisplayAtPosition");
static_assert(sizeof(HWTooltipWidgetManager_DisplayAtPosition) == 0x00003C, "Wrong size on HWTooltipWidgetManager_DisplayAtPosition");
static_assert(offsetof(HWTooltipWidgetManager_DisplayAtPosition, ReferenceGeometry) == 0x000000, "Member 'HWTooltipWidgetManager_DisplayAtPosition::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayAtPosition, Axis) == 0x000038, "Member 'HWTooltipWidgetManager_DisplayAtPosition::Axis' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.DisplayFromEquipmentInstance
// 0x0050 (0x0050 - 0x0000)
struct HWTooltipWidgetManager_DisplayFromEquipmentInstance final
{
public:
	const class UHWEquipmentInstance*             EquipmentInstance;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidgetManager_DisplayFromEquipmentInstance) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_DisplayFromEquipmentInstance");
static_assert(sizeof(HWTooltipWidgetManager_DisplayFromEquipmentInstance) == 0x000050, "Wrong size on HWTooltipWidgetManager_DisplayFromEquipmentInstance");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentInstance, EquipmentInstance) == 0x000000, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentInstance::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentInstance, ASC) == 0x000008, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentInstance::ASC' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentInstance, ReferenceGeometry) == 0x000010, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentInstance::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentInstance, Axis) == 0x000048, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentInstance::Axis' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.DisplayFromEquipmentItem
// 0x0048 (0x0048 - 0x0000)
struct HWTooltipWidgetManager_DisplayFromEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityLevel;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x000C(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidgetManager_DisplayFromEquipmentItem) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_DisplayFromEquipmentItem");
static_assert(sizeof(HWTooltipWidgetManager_DisplayFromEquipmentItem) == 0x000048, "Wrong size on HWTooltipWidgetManager_DisplayFromEquipmentItem");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentItem::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentItem, AbilityLevel) == 0x000008, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentItem::AbilityLevel' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentItem, ReferenceGeometry) == 0x00000C, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentItem::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromEquipmentItem, Axis) == 0x000044, "Member 'HWTooltipWidgetManager_DisplayFromEquipmentItem::Axis' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.DisplayFromObjectiveData
// 0x0050 (0x0050 - 0x0000)
struct HWTooltipWidgetManager_DisplayFromObjectiveData final
{
public:
	TArray<class FText>                           TextList;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentSelection;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x0014(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x004C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidgetManager_DisplayFromObjectiveData) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_DisplayFromObjectiveData");
static_assert(sizeof(HWTooltipWidgetManager_DisplayFromObjectiveData) == 0x000050, "Wrong size on HWTooltipWidgetManager_DisplayFromObjectiveData");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromObjectiveData, TextList) == 0x000000, "Member 'HWTooltipWidgetManager_DisplayFromObjectiveData::TextList' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromObjectiveData, CurrentSelection) == 0x000010, "Member 'HWTooltipWidgetManager_DisplayFromObjectiveData::CurrentSelection' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromObjectiveData, ReferenceGeometry) == 0x000014, "Member 'HWTooltipWidgetManager_DisplayFromObjectiveData::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromObjectiveData, Axis) == 0x00004C, "Member 'HWTooltipWidgetManager_DisplayFromObjectiveData::Axis' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.DisplayFromUIBuffData
// 0x0048 (0x0048 - 0x0000)
struct HWTooltipWidgetManager_DisplayFromUIBuffData final
{
public:
	const class UHWGameplayEffectUIBuffData*      UIBuffData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidgetManager_DisplayFromUIBuffData) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_DisplayFromUIBuffData");
static_assert(sizeof(HWTooltipWidgetManager_DisplayFromUIBuffData) == 0x000048, "Wrong size on HWTooltipWidgetManager_DisplayFromUIBuffData");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromUIBuffData, UIBuffData) == 0x000000, "Member 'HWTooltipWidgetManager_DisplayFromUIBuffData::UIBuffData' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromUIBuffData, ReferenceGeometry) == 0x000008, "Member 'HWTooltipWidgetManager_DisplayFromUIBuffData::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_DisplayFromUIBuffData, Axis) == 0x000040, "Member 'HWTooltipWidgetManager_DisplayFromUIBuffData::Axis' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.HandleHUDNavigationFocusChanged
// 0x0010 (0x0010 - 0x0000)
struct HWTooltipWidgetManager_HandleHUDNavigationFocusChanged final
{
public:
	class UHWWidget*                              PreviousFocusedWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              NewFocusedWidget;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_HandleHUDNavigationFocusChanged) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_HandleHUDNavigationFocusChanged");
static_assert(sizeof(HWTooltipWidgetManager_HandleHUDNavigationFocusChanged) == 0x000010, "Wrong size on HWTooltipWidgetManager_HandleHUDNavigationFocusChanged");
static_assert(offsetof(HWTooltipWidgetManager_HandleHUDNavigationFocusChanged, PreviousFocusedWidget) == 0x000000, "Member 'HWTooltipWidgetManager_HandleHUDNavigationFocusChanged::PreviousFocusedWidget' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_HandleHUDNavigationFocusChanged, NewFocusedWidget) == 0x000008, "Member 'HWTooltipWidgetManager_HandleHUDNavigationFocusChanged::NewFocusedWidget' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWTooltipWidgetManager_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWTooltipWidgetManager_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWTooltipWidgetManager_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWTooltipWidgetManager_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.SetTooltipContainerVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_SetTooltipContainerVisibility final
{
public:
	bool                                          bNewIsVisible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_SetTooltipContainerVisibility) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_SetTooltipContainerVisibility");
static_assert(sizeof(HWTooltipWidgetManager_SetTooltipContainerVisibility) == 0x000001, "Wrong size on HWTooltipWidgetManager_SetTooltipContainerVisibility");
static_assert(offsetof(HWTooltipWidgetManager_SetTooltipContainerVisibility, bNewIsVisible) == 0x000000, "Member 'HWTooltipWidgetManager_SetTooltipContainerVisibility::bNewIsVisible' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.SetTooltipContextBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_SetTooltipContextBarVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_SetTooltipContextBarVisibility) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_SetTooltipContextBarVisibility");
static_assert(sizeof(HWTooltipWidgetManager_SetTooltipContextBarVisibility) == 0x000001, "Wrong size on HWTooltipWidgetManager_SetTooltipContextBarVisibility");
static_assert(offsetof(HWTooltipWidgetManager_SetTooltipContextBarVisibility, bVisible) == 0x000000, "Member 'HWTooltipWidgetManager_SetTooltipContextBarVisibility::bVisible' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.UpdatedInputState
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_UpdatedInputState final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_UpdatedInputState) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_UpdatedInputState");
static_assert(sizeof(HWTooltipWidgetManager_UpdatedInputState) == 0x000001, "Wrong size on HWTooltipWidgetManager_UpdatedInputState");
static_assert(offsetof(HWTooltipWidgetManager_UpdatedInputState, NewState) == 0x000000, "Member 'HWTooltipWidgetManager_UpdatedInputState::NewState' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.UpdatedTooltipBinding
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_UpdatedTooltipBinding final
{
public:
	bool                                          bShouldShowBindings;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_UpdatedTooltipBinding) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_UpdatedTooltipBinding");
static_assert(sizeof(HWTooltipWidgetManager_UpdatedTooltipBinding) == 0x000001, "Wrong size on HWTooltipWidgetManager_UpdatedTooltipBinding");
static_assert(offsetof(HWTooltipWidgetManager_UpdatedTooltipBinding, bShouldShowBindings) == 0x000000, "Member 'HWTooltipWidgetManager_UpdatedTooltipBinding::bShouldShowBindings' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.UpdatedTooltipDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_UpdatedTooltipDisplayMode final
{
public:
	EHWEquipmentItemTooltip_DisplayMode           DisplayMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_UpdatedTooltipDisplayMode) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_UpdatedTooltipDisplayMode");
static_assert(sizeof(HWTooltipWidgetManager_UpdatedTooltipDisplayMode) == 0x000001, "Wrong size on HWTooltipWidgetManager_UpdatedTooltipDisplayMode");
static_assert(offsetof(HWTooltipWidgetManager_UpdatedTooltipDisplayMode, DisplayMode) == 0x000000, "Member 'HWTooltipWidgetManager_UpdatedTooltipDisplayMode::DisplayMode' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.UpdatedTooltipPosition
// 0x0002 (0x0002 - 0x0000)
struct HWTooltipWidgetManager_UpdatedTooltipPosition final
{
public:
	bool                                          bIsTopHalf;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRightHalf;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_UpdatedTooltipPosition) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_UpdatedTooltipPosition");
static_assert(sizeof(HWTooltipWidgetManager_UpdatedTooltipPosition) == 0x000002, "Wrong size on HWTooltipWidgetManager_UpdatedTooltipPosition");
static_assert(offsetof(HWTooltipWidgetManager_UpdatedTooltipPosition, bIsTopHalf) == 0x000000, "Member 'HWTooltipWidgetManager_UpdatedTooltipPosition::bIsTopHalf' has a wrong offset!");
static_assert(offsetof(HWTooltipWidgetManager_UpdatedTooltipPosition, bIsRightHalf) == 0x000001, "Member 'HWTooltipWidgetManager_UpdatedTooltipPosition::bIsRightHalf' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.UpdateNavWidgetName
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidgetManager_UpdateNavWidgetName final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_UpdateNavWidgetName) == 0x000008, "Wrong alignment on HWTooltipWidgetManager_UpdateNavWidgetName");
static_assert(sizeof(HWTooltipWidgetManager_UpdateNavWidgetName) == 0x000018, "Wrong size on HWTooltipWidgetManager_UpdateNavWidgetName");
static_assert(offsetof(HWTooltipWidgetManager_UpdateNavWidgetName, Text) == 0x000000, "Member 'HWTooltipWidgetManager_UpdateNavWidgetName::Text' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.GetEquipmentItemTooltipDisplayMode
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode final
{
public:
	EHWEquipmentItemTooltip_DisplayMode           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode");
static_assert(sizeof(HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode) == 0x000001, "Wrong size on HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode");
static_assert(offsetof(HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode, ReturnValue) == 0x000000, "Member 'HWTooltipWidgetManager_GetEquipmentItemTooltipDisplayMode::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidgetManager.IsShowingTooltip
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidgetManager_IsShowingTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidgetManager_IsShowingTooltip) == 0x000001, "Wrong alignment on HWTooltipWidgetManager_IsShowingTooltip");
static_assert(sizeof(HWTooltipWidgetManager_IsShowingTooltip) == 0x000001, "Wrong size on HWTooltipWidgetManager_IsShowingTooltip");
static_assert(offsetof(HWTooltipWidgetManager_IsShowingTooltip, ReturnValue) == 0x000000, "Member 'HWTooltipWidgetManager_IsShowingTooltip::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.HandleHomeScreenSkinShowcaseUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated final
{
public:
	struct FGameplayTag                           InAppSettingTag;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InValues;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated) == 0x000008, "Wrong alignment on HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated");
static_assert(sizeof(HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated) == 0x000018, "Wrong size on HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated");
static_assert(offsetof(HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated, InAppSettingTag) == 0x000000, "Member 'HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated::InAppSettingTag' has a wrong offset!");
static_assert(offsetof(HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated, InValues) == 0x000008, "Member 'HWHomeScreenWidget_HandleHomeScreenSkinShowcaseUpdated::InValues' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.RequestSelectOption
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenWidget_RequestSelectOption final
{
public:
	class URHStoreItem*                           Option;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_RequestSelectOption) == 0x000008, "Wrong alignment on HWHomeScreenWidget_RequestSelectOption");
static_assert(sizeof(HWHomeScreenWidget_RequestSelectOption) == 0x000008, "Wrong size on HWHomeScreenWidget_RequestSelectOption");
static_assert(offsetof(HWHomeScreenWidget_RequestSelectOption, Option) == 0x000000, "Member 'HWHomeScreenWidget_RequestSelectOption::Option' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.UpdateDisplayedModelSkin
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenWidget_UpdateDisplayedModelSkin final
{
public:
	const class UHWSkinItem*                      InModelSkinItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_UpdateDisplayedModelSkin) == 0x000008, "Wrong alignment on HWHomeScreenWidget_UpdateDisplayedModelSkin");
static_assert(sizeof(HWHomeScreenWidget_UpdateDisplayedModelSkin) == 0x000008, "Wrong size on HWHomeScreenWidget_UpdateDisplayedModelSkin");
static_assert(offsetof(HWHomeScreenWidget_UpdateDisplayedModelSkin, InModelSkinItem) == 0x000000, "Member 'HWHomeScreenWidget_UpdateDisplayedModelSkin::InModelSkinItem' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.UpdateDisplayedOptions
// 0x0010 (0x0010 - 0x0000)
struct HWHomeScreenWidget_UpdateDisplayedOptions final
{
public:
	TArray<class URHStoreItem*>                   InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_UpdateDisplayedOptions) == 0x000008, "Wrong alignment on HWHomeScreenWidget_UpdateDisplayedOptions");
static_assert(sizeof(HWHomeScreenWidget_UpdateDisplayedOptions) == 0x000010, "Wrong size on HWHomeScreenWidget_UpdateDisplayedOptions");
static_assert(offsetof(HWHomeScreenWidget_UpdateDisplayedOptions, InOptions) == 0x000000, "Member 'HWHomeScreenWidget_UpdateDisplayedOptions::InOptions' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.UpdateDisplayedRedirect
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenWidget_UpdateDisplayedRedirect final
{
public:
	const class UHWCollectionItem*                InRedirectCollection;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_UpdateDisplayedRedirect) == 0x000008, "Wrong alignment on HWHomeScreenWidget_UpdateDisplayedRedirect");
static_assert(sizeof(HWHomeScreenWidget_UpdateDisplayedRedirect) == 0x000008, "Wrong size on HWHomeScreenWidget_UpdateDisplayedRedirect");
static_assert(offsetof(HWHomeScreenWidget_UpdateDisplayedRedirect, InRedirectCollection) == 0x000000, "Member 'HWHomeScreenWidget_UpdateDisplayedRedirect::InRedirectCollection' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenWidget_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_GetPartyManager) == 0x000008, "Wrong alignment on HWHomeScreenWidget_GetPartyManager");
static_assert(sizeof(HWHomeScreenWidget_GetPartyManager) == 0x000008, "Wrong size on HWHomeScreenWidget_GetPartyManager");
static_assert(offsetof(HWHomeScreenWidget_GetPartyManager, ReturnValue) == 0x000000, "Member 'HWHomeScreenWidget_GetPartyManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHomeScreenWidget.GetSkinItemToDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWHomeScreenWidget_GetSkinItemToDisplay final
{
public:
	const class UHWSkinItem*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHomeScreenWidget_GetSkinItemToDisplay) == 0x000008, "Wrong alignment on HWHomeScreenWidget_GetSkinItemToDisplay");
static_assert(sizeof(HWHomeScreenWidget_GetSkinItemToDisplay) == 0x000008, "Wrong size on HWHomeScreenWidget_GetSkinItemToDisplay");
static_assert(offsetof(HWHomeScreenWidget_GetSkinItemToDisplay, ReturnValue) == 0x000000, "Member 'HWHomeScreenWidget_GetSkinItemToDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleLocalModifierWidget.HandleCustomModifiersUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated final
{
public:
	struct FGameplayTag                           ModifierTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWUIStyleLocalCustomModifier>  CustomModifiers;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated) == 0x000008, "Wrong alignment on HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated");
static_assert(sizeof(HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated) == 0x000018, "Wrong size on HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated, ModifierTag) == 0x000000, "Member 'HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated::ModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated, CustomModifiers) == 0x000008, "Member 'HWUIStyleLocalModifierWidget_HandleCustomModifiersUpdated::CustomModifiers' has a wrong offset!");

// Function HemingwayUI.HWUIStyleLocalModifierWidget.HandleCustomModifierUpdated
// 0x0070 (0x0070 - 0x0000)
struct HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated final
{
public:
	struct FGameplayTag                           ModifierTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalCustomModifier          CustomModifier;                                    // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated) == 0x000008, "Wrong alignment on HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated");
static_assert(sizeof(HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated) == 0x000070, "Wrong size on HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated, ModifierTag) == 0x000000, "Member 'HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated::ModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated, CustomModifier) == 0x000008, "Member 'HWUIStyleLocalModifierWidget_HandleCustomModifierUpdated::CustomModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleLocalModifierWidget.HandleGenericModifierUpdated
// 0x0014 (0x0014 - 0x0000)
struct HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated final
{
public:
	struct FGameplayTag                           ModifierTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalGenericModifier         GenericModifier;                                   // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated) == 0x000004, "Wrong alignment on HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated");
static_assert(sizeof(HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated) == 0x000014, "Wrong size on HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated, ModifierTag) == 0x000000, "Member 'HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated::ModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated, GenericModifier) == 0x000008, "Member 'HWUIStyleLocalModifierWidget_HandleGenericModifierUpdated::GenericModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleLocalModifierWidget.HandleGlobalScaleUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated final
{
public:
	EHWUIStyleGlobalModifierType                  UpdatedModifier;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated) == 0x000001, "Wrong alignment on HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated");
static_assert(sizeof(HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated) == 0x000001, "Wrong size on HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated");
static_assert(offsetof(HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated, UpdatedModifier) == 0x000000, "Member 'HWUIStyleLocalModifierWidget_HandleGlobalScaleUpdated::UpdatedModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleLocalModifierWidget.GetLocalModifierTag
// 0x0008 (0x0008 - 0x0000)
struct HWUIStyleLocalModifierWidget_GetLocalModifierTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleLocalModifierWidget_GetLocalModifierTag) == 0x000004, "Wrong alignment on HWUIStyleLocalModifierWidget_GetLocalModifierTag");
static_assert(sizeof(HWUIStyleLocalModifierWidget_GetLocalModifierTag) == 0x000008, "Wrong size on HWUIStyleLocalModifierWidget_GetLocalModifierTag");
static_assert(offsetof(HWUIStyleLocalModifierWidget_GetLocalModifierTag, ReturnValue) == 0x000000, "Member 'HWUIStyleLocalModifierWidget_GetLocalModifierTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.HandleOrderReadyToDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_HandleOrderReadyToDisplay final
{
public:
	class URHOrder*                               Order;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_HandleOrderReadyToDisplay) == 0x000008, "Wrong alignment on HWClientHUD_HandleOrderReadyToDisplay");
static_assert(sizeof(HWClientHUD_HandleOrderReadyToDisplay) == 0x000008, "Wrong size on HWClientHUD_HandleOrderReadyToDisplay");
static_assert(offsetof(HWClientHUD_HandleOrderReadyToDisplay, Order) == 0x000000, "Member 'HWClientHUD_HandleOrderReadyToDisplay::Order' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.HandleRejoinedMatch
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_HandleRejoinedMatch final
{
public:
	class URH_JoinedSession*                      JoinedSession;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_HandleRejoinedMatch) == 0x000008, "Wrong alignment on HWClientHUD_HandleRejoinedMatch");
static_assert(sizeof(HWClientHUD_HandleRejoinedMatch) == 0x000008, "Wrong size on HWClientHUD_HandleRejoinedMatch");
static_assert(offsetof(HWClientHUD_HandleRejoinedMatch, JoinedSession) == 0x000000, "Member 'HWClientHUD_HandleRejoinedMatch::JoinedSession' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.OpenCurrencyPurchaseScreen
// 0x001C (0x001C - 0x0000)
struct HWClientHUD_OpenCurrencyPurchaseScreen final
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrencyId;                                        // 0x0004(0x0014)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWClientHUD_OpenCurrencyPurchaseScreen) == 0x000004, "Wrong alignment on HWClientHUD_OpenCurrencyPurchaseScreen");
static_assert(sizeof(HWClientHUD_OpenCurrencyPurchaseScreen) == 0x00001C, "Wrong size on HWClientHUD_OpenCurrencyPurchaseScreen");
static_assert(offsetof(HWClientHUD_OpenCurrencyPurchaseScreen, CurrencyType) == 0x000000, "Member 'HWClientHUD_OpenCurrencyPurchaseScreen::CurrencyType' has a wrong offset!");
static_assert(offsetof(HWClientHUD_OpenCurrencyPurchaseScreen, CurrencyId) == 0x000004, "Member 'HWClientHUD_OpenCurrencyPurchaseScreen::CurrencyId' has a wrong offset!");
static_assert(offsetof(HWClientHUD_OpenCurrencyPurchaseScreen, ReturnValue) == 0x000018, "Member 'HWClientHUD_OpenCurrencyPurchaseScreen::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.RemoveViewRoute
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_RemoveViewRoute final
{
public:
	struct FGameplayTag                           ViewTag;                                           // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_RemoveViewRoute) == 0x000004, "Wrong alignment on HWClientHUD_RemoveViewRoute");
static_assert(sizeof(HWClientHUD_RemoveViewRoute) == 0x000008, "Wrong size on HWClientHUD_RemoveViewRoute");
static_assert(offsetof(HWClientHUD_RemoveViewRoute, ViewTag) == 0x000000, "Member 'HWClientHUD_RemoveViewRoute::ViewTag' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.TryExecuteCrossLevelViewRedirect
// 0x0001 (0x0001 - 0x0000)
struct HWClientHUD_TryExecuteCrossLevelViewRedirect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_TryExecuteCrossLevelViewRedirect) == 0x000001, "Wrong alignment on HWClientHUD_TryExecuteCrossLevelViewRedirect");
static_assert(sizeof(HWClientHUD_TryExecuteCrossLevelViewRedirect) == 0x000001, "Wrong size on HWClientHUD_TryExecuteCrossLevelViewRedirect");
static_assert(offsetof(HWClientHUD_TryExecuteCrossLevelViewRedirect, ReturnValue) == 0x000000, "Member 'HWClientHUD_TryExecuteCrossLevelViewRedirect::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.GetCommonMaterialAnimation
// 0x0010 (0x0010 - 0x0000)
struct HWClientHUD_GetCommonMaterialAnimation final
{
public:
	struct FGameplayTag                           MaterialTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_GetCommonMaterialAnimation) == 0x000008, "Wrong alignment on HWClientHUD_GetCommonMaterialAnimation");
static_assert(sizeof(HWClientHUD_GetCommonMaterialAnimation) == 0x000010, "Wrong size on HWClientHUD_GetCommonMaterialAnimation");
static_assert(offsetof(HWClientHUD_GetCommonMaterialAnimation, MaterialTag) == 0x000000, "Member 'HWClientHUD_GetCommonMaterialAnimation::MaterialTag' has a wrong offset!");
static_assert(offsetof(HWClientHUD_GetCommonMaterialAnimation, ReturnValue) == 0x000008, "Member 'HWClientHUD_GetCommonMaterialAnimation::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.GetHWQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_GetHWQueueDataFactory final
{
public:
	class UHWQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_GetHWQueueDataFactory) == 0x000008, "Wrong alignment on HWClientHUD_GetHWQueueDataFactory");
static_assert(sizeof(HWClientHUD_GetHWQueueDataFactory) == 0x000008, "Wrong size on HWClientHUD_GetHWQueueDataFactory");
static_assert(offsetof(HWClientHUD_GetHWQueueDataFactory, ReturnValue) == 0x000000, "Member 'HWClientHUD_GetHWQueueDataFactory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.GetInputPlatformSettings
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_GetInputPlatformSettings final
{
public:
	class UHWInputPlatformSettings*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_GetInputPlatformSettings) == 0x000008, "Wrong alignment on HWClientHUD_GetInputPlatformSettings");
static_assert(sizeof(HWClientHUD_GetInputPlatformSettings) == 0x000008, "Wrong size on HWClientHUD_GetInputPlatformSettings");
static_assert(offsetof(HWClientHUD_GetInputPlatformSettings, ReturnValue) == 0x000000, "Member 'HWClientHUD_GetInputPlatformSettings::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.GetSettingsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct HWClientHUD_GetSettingsSubsystem final
{
public:
	class UHWPlayerSettingsSubsystem*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_GetSettingsSubsystem) == 0x000008, "Wrong alignment on HWClientHUD_GetSettingsSubsystem");
static_assert(sizeof(HWClientHUD_GetSettingsSubsystem) == 0x000008, "Wrong size on HWClientHUD_GetSettingsSubsystem");
static_assert(offsetof(HWClientHUD_GetSettingsSubsystem, ReturnValue) == 0x000000, "Member 'HWClientHUD_GetSettingsSubsystem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUD.IsPlayerLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct HWClientHUD_IsPlayerLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUD_IsPlayerLoggedIn) == 0x000001, "Wrong alignment on HWClientHUD_IsPlayerLoggedIn");
static_assert(sizeof(HWClientHUD_IsPlayerLoggedIn) == 0x000001, "Wrong size on HWClientHUD_IsPlayerLoggedIn");
static_assert(offsetof(HWClientHUD_IsPlayerLoggedIn, ReturnValue) == 0x000000, "Member 'HWClientHUD_IsPlayerLoggedIn::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.AddTestData
// 0x0040 (0x0040 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_AddTestData final
{
public:
	struct FHWEndOfMatchResultsProgressSource     TestData;                                          // 0x0000(0x0040)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_AddTestData) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_AddTestData");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_AddTestData) == 0x000040, "Wrong size on HWEndOfMatchLobbyResultsWidget_AddTestData");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_AddTestData, TestData) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_AddTestData::TestData' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandleAscensionUnlockRewardsAdded
// 0x0018 (0x0018 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded final
{
public:
	TArray<class UHWCollectionItem*>              MasteryRewardLevels;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded) == 0x000018, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded, MasteryRewardLevels) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded::MasteryRewardLevels' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded, CharacterItem) == 0x000010, "Member 'HWEndOfMatchLobbyResultsWidget_HandleAscensionUnlockRewardsAdded::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandleCharacterItemSet
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet) == 0x000008, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet, CharacterItem) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandleCharacterItemSet::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandleDisplayNameSet
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet) == 0x000010, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet, PlayerName) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandleDisplayNameSet::PlayerName' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandleMasteryRewardsAdded
// 0x0018 (0x0018 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded final
{
public:
	TArray<class UHWCollectionItem*>              MasteryRewardLevels;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded) == 0x000018, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded, MasteryRewardLevels) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded::MasteryRewardLevels' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded, CharacterItem) == 0x000010, "Member 'HWEndOfMatchLobbyResultsWidget_HandleMasteryRewardsAdded::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandlePlayerKDASet
// 0x000C (0x000C - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet final
{
public:
	float                                         Kills;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deaths;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Assists;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet) == 0x00000C, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet, Kills) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet::Kills' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet, Deaths) == 0x000004, "Member 'HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet::Deaths' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet, Assists) == 0x000008, "Member 'HWEndOfMatchLobbyResultsWidget_HandlePlayerKDASet::Assists' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandlePlayerNameColorSet
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet final
{
public:
	const class UHWCollectionItem*                PlayerTitle;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet) == 0x000008, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet, PlayerTitle) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandlePlayerNameColorSet::PlayerTitle' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.HandlePlayerTitleSet
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet final
{
public:
	const class UHWCollectionItem*                PlayerTitle;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet) == 0x000008, "Wrong size on HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet, PlayerTitle) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_HandlePlayerTitleSet::PlayerTitle' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.OnMatchFunRated
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_OnMatchFunRated final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_OnMatchFunRated) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_OnMatchFunRated");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_OnMatchFunRated) == 0x000004, "Wrong size on HWEndOfMatchLobbyResultsWidget_OnMatchFunRated");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_OnMatchFunRated, Rating) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_OnMatchFunRated::Rating' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.RankedAssetsLoaded
// 0x0050 (0x0050 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded final
{
public:
	TSoftObjectPtr<class UHWRankedConfig>         InRankedConfig;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWSkillRatingRankings>  InSkillRatingRankings;                             // 0x0028(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded) == 0x000050, "Wrong size on HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded, InRankedConfig) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded::InRankedConfig' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded, InSkillRatingRankings) == 0x000028, "Member 'HWEndOfMatchLobbyResultsWidget_RankedAssetsLoaded::InSkillRatingRankings' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.RankedConfigLoaded
// 0x0028 (0x0028 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded final
{
public:
	TSoftObjectPtr<class UHWRankedConfig>         InRankedConfig;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded) == 0x000028, "Wrong size on HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded, InRankedConfig) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_RankedConfigLoaded::InRankedConfig' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.RankTypesLoaded
// 0x0050 (0x0050 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_RankTypesLoaded final
{
public:
	TSoftObjectPtr<class UHWRankedConfig>         InRankedConfig;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              InRankTypeTable;                                   // 0x0028(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_RankTypesLoaded) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_RankTypesLoaded");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_RankTypesLoaded) == 0x000050, "Wrong size on HWEndOfMatchLobbyResultsWidget_RankTypesLoaded");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RankTypesLoaded, InRankedConfig) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_RankTypesLoaded::InRankedConfig' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RankTypesLoaded, InRankTypeTable) == 0x000028, "Member 'HWEndOfMatchLobbyResultsWidget_RankTypesLoaded::InRankTypeTable' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.RateMatchFun
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_RateMatchFun final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_RateMatchFun) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_RateMatchFun");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_RateMatchFun) == 0x000004, "Wrong size on HWEndOfMatchLobbyResultsWidget_RateMatchFun");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_RateMatchFun, Rating) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_RateMatchFun::Rating' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.TestRankedData
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_TestRankedData final
{
public:
	int32                                         StartingSR;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndingSR;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_TestRankedData) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_TestRankedData");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_TestRankedData) == 0x000008, "Wrong size on HWEndOfMatchLobbyResultsWidget_TestRankedData");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_TestRankedData, StartingSR) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_TestRankedData::StartingSR' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_TestRankedData, EndingSR) == 0x000004, "Member 'HWEndOfMatchLobbyResultsWidget_TestRankedData::EndingSR' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsWidget.GetQuestProgress
// 0x0050 (0x0050 - 0x0000)
struct HWEndOfMatchLobbyResultsWidget_GetQuestProgress final
{
public:
	const class UHWQuest*                         QuestItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWEndOfMatchResultsProgressSource     ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsWidget_GetQuestProgress) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsWidget_GetQuestProgress");
static_assert(sizeof(HWEndOfMatchLobbyResultsWidget_GetQuestProgress) == 0x000050, "Wrong size on HWEndOfMatchLobbyResultsWidget_GetQuestProgress");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_GetQuestProgress, QuestItem) == 0x000000, "Member 'HWEndOfMatchLobbyResultsWidget_GetQuestProgress::QuestItem' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_GetQuestProgress, CurrentProgress) == 0x000008, "Member 'HWEndOfMatchLobbyResultsWidget_GetQuestProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyResultsWidget_GetQuestProgress, ReturnValue) == 0x000010, "Member 'HWEndOfMatchLobbyResultsWidget_GetQuestProgress::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWClientHUDWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWClientHUDWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWClientHUDWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWClientHUDWidget_HandleInputStateChanged");
static_assert(sizeof(HWClientHUDWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWClientHUDWidget_HandleInputStateChanged");
static_assert(offsetof(HWClientHUDWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWClientHUDWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWClientHUDWidget.NativeHandleViewStateChanged
// 0x0014 (0x0014 - 0x0000)
struct HWClientHUDWidget_NativeHandleViewStateChanged final
{
public:
	struct FGameplayTag                           CurrentRoute;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PreviousRoute;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewManagerLayer                             Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWClientHUDWidget_NativeHandleViewStateChanged) == 0x000004, "Wrong alignment on HWClientHUDWidget_NativeHandleViewStateChanged");
static_assert(sizeof(HWClientHUDWidget_NativeHandleViewStateChanged) == 0x000014, "Wrong size on HWClientHUDWidget_NativeHandleViewStateChanged");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChanged, CurrentRoute) == 0x000000, "Member 'HWClientHUDWidget_NativeHandleViewStateChanged::CurrentRoute' has a wrong offset!");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChanged, PreviousRoute) == 0x000008, "Member 'HWClientHUDWidget_NativeHandleViewStateChanged::PreviousRoute' has a wrong offset!");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChanged, Layer) == 0x000010, "Member 'HWClientHUDWidget_NativeHandleViewStateChanged::Layer' has a wrong offset!");

// Function HemingwayUI.HWClientHUDWidget.NativeHandleViewStateChangeStarted
// 0x0014 (0x0014 - 0x0000)
struct HWClientHUDWidget_NativeHandleViewStateChangeStarted final
{
public:
	struct FGameplayTag                           CurrentRoute;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewRoute;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewManagerLayer                             Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWClientHUDWidget_NativeHandleViewStateChangeStarted) == 0x000004, "Wrong alignment on HWClientHUDWidget_NativeHandleViewStateChangeStarted");
static_assert(sizeof(HWClientHUDWidget_NativeHandleViewStateChangeStarted) == 0x000014, "Wrong size on HWClientHUDWidget_NativeHandleViewStateChangeStarted");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChangeStarted, CurrentRoute) == 0x000000, "Member 'HWClientHUDWidget_NativeHandleViewStateChangeStarted::CurrentRoute' has a wrong offset!");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChangeStarted, NewRoute) == 0x000008, "Member 'HWClientHUDWidget_NativeHandleViewStateChangeStarted::NewRoute' has a wrong offset!");
static_assert(offsetof(HWClientHUDWidget_NativeHandleViewStateChangeStarted, Layer) == 0x000010, "Member 'HWClientHUDWidget_NativeHandleViewStateChangeStarted::Layer' has a wrong offset!");

// Function HemingwayUI.HWCustomLobbyGameModeButton.DisplayGameModeInfo
// 0x0100 (0x0100 - 0x0000)
struct HWCustomLobbyGameModeButton_DisplayGameModeInfo final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0008(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomLobbyGameModeButton_DisplayGameModeInfo) == 0x000008, "Wrong alignment on HWCustomLobbyGameModeButton_DisplayGameModeInfo");
static_assert(sizeof(HWCustomLobbyGameModeButton_DisplayGameModeInfo) == 0x000100, "Wrong size on HWCustomLobbyGameModeButton_DisplayGameModeInfo");
static_assert(offsetof(HWCustomLobbyGameModeButton_DisplayGameModeInfo, bValid) == 0x000000, "Member 'HWCustomLobbyGameModeButton_DisplayGameModeInfo::bValid' has a wrong offset!");
static_assert(offsetof(HWCustomLobbyGameModeButton_DisplayGameModeInfo, GameModeInfo) == 0x000008, "Member 'HWCustomLobbyGameModeButton_DisplayGameModeInfo::GameModeInfo' has a wrong offset!");

// Function HemingwayUI.HWCustomLobbyGameModeButton.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct HWCustomLobbyGameModeButton_GetQueueDataFactory final
{
public:
	class UHWQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCustomLobbyGameModeButton_GetQueueDataFactory) == 0x000008, "Wrong alignment on HWCustomLobbyGameModeButton_GetQueueDataFactory");
static_assert(sizeof(HWCustomLobbyGameModeButton_GetQueueDataFactory) == 0x000008, "Wrong size on HWCustomLobbyGameModeButton_GetQueueDataFactory");
static_assert(offsetof(HWCustomLobbyGameModeButton_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'HWCustomLobbyGameModeButton_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveEffectWidget.DisplayDuration
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayPassiveEffectWidget_DisplayDuration final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveEffectWidget_DisplayDuration) == 0x000001, "Wrong alignment on HWWorldOverlayPassiveEffectWidget_DisplayDuration");
static_assert(sizeof(HWWorldOverlayPassiveEffectWidget_DisplayDuration) == 0x000001, "Wrong size on HWWorldOverlayPassiveEffectWidget_DisplayDuration");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_DisplayDuration, bShow) == 0x000000, "Member 'HWWorldOverlayPassiveEffectWidget_DisplayDuration::bShow' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveEffectWidget.DisplayStacks
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayPassiveEffectWidget_DisplayStacks final
{
public:
	int32                                         OldStackCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewStackCount;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveEffectWidget_DisplayStacks) == 0x000004, "Wrong alignment on HWWorldOverlayPassiveEffectWidget_DisplayStacks");
static_assert(sizeof(HWWorldOverlayPassiveEffectWidget_DisplayStacks) == 0x000008, "Wrong size on HWWorldOverlayPassiveEffectWidget_DisplayStacks");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_DisplayStacks, OldStackCount) == 0x000000, "Member 'HWWorldOverlayPassiveEffectWidget_DisplayStacks::OldStackCount' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_DisplayStacks, NewStackCount) == 0x000004, "Member 'HWWorldOverlayPassiveEffectWidget_DisplayStacks::NewStackCount' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveEffectWidget.GetDurationRemaining
// 0x0004 (0x0004 - 0x0000)
struct HWWorldOverlayPassiveEffectWidget_GetDurationRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveEffectWidget_GetDurationRemaining) == 0x000004, "Wrong alignment on HWWorldOverlayPassiveEffectWidget_GetDurationRemaining");
static_assert(sizeof(HWWorldOverlayPassiveEffectWidget_GetDurationRemaining) == 0x000004, "Wrong size on HWWorldOverlayPassiveEffectWidget_GetDurationRemaining");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_GetDurationRemaining, ReturnValue) == 0x000000, "Member 'HWWorldOverlayPassiveEffectWidget_GetDurationRemaining::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveEffectWidget.GetMaxDuration
// 0x0004 (0x0004 - 0x0000)
struct HWWorldOverlayPassiveEffectWidget_GetMaxDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveEffectWidget_GetMaxDuration) == 0x000004, "Wrong alignment on HWWorldOverlayPassiveEffectWidget_GetMaxDuration");
static_assert(sizeof(HWWorldOverlayPassiveEffectWidget_GetMaxDuration) == 0x000004, "Wrong size on HWWorldOverlayPassiveEffectWidget_GetMaxDuration");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_GetMaxDuration, ReturnValue) == 0x000000, "Member 'HWWorldOverlayPassiveEffectWidget_GetMaxDuration::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveEffectWidget.GetStackCount
// 0x0004 (0x0004 - 0x0000)
struct HWWorldOverlayPassiveEffectWidget_GetStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveEffectWidget_GetStackCount) == 0x000004, "Wrong alignment on HWWorldOverlayPassiveEffectWidget_GetStackCount");
static_assert(sizeof(HWWorldOverlayPassiveEffectWidget_GetStackCount) == 0x000004, "Wrong size on HWWorldOverlayPassiveEffectWidget_GetStackCount");
static_assert(offsetof(HWWorldOverlayPassiveEffectWidget_GetStackCount, ReturnValue) == 0x000000, "Member 'HWWorldOverlayPassiveEffectWidget_GetStackCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockStacksWidget.AddedBlockStackWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget final
{
public:
	class UHWWidget*                              BlockStackWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget) == 0x000008, "Wrong alignment on HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget");
static_assert(sizeof(HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget) == 0x000008, "Wrong size on HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget");
static_assert(offsetof(HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget, BlockStackWidget) == 0x000000, "Member 'HWGameplayEffectBlockStacksWidget_AddedBlockStackWidget::BlockStackWidget' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockStacksWidget.DisplayBlockStacks
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectBlockStacksWidget_DisplayBlockStacks final
{
public:
	int32                                         NewBlockStackCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockStacksWidget_DisplayBlockStacks) == 0x000004, "Wrong alignment on HWGameplayEffectBlockStacksWidget_DisplayBlockStacks");
static_assert(sizeof(HWGameplayEffectBlockStacksWidget_DisplayBlockStacks) == 0x000004, "Wrong size on HWGameplayEffectBlockStacksWidget_DisplayBlockStacks");
static_assert(offsetof(HWGameplayEffectBlockStacksWidget_DisplayBlockStacks, NewBlockStackCount) == 0x000000, "Member 'HWGameplayEffectBlockStacksWidget_DisplayBlockStacks::NewBlockStackCount' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockStacksWidget.RemovedBlockStackWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget final
{
public:
	class UHWWidget*                              BlockStackWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget) == 0x000008, "Wrong alignment on HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget");
static_assert(sizeof(HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget) == 0x000008, "Wrong size on HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget");
static_assert(offsetof(HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget, BlockStackWidget) == 0x000000, "Member 'HWGameplayEffectBlockStacksWidget_RemovedBlockStackWidget::BlockStackWidget' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectBlockStacksWidget.GetBlockStackCount
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectBlockStacksWidget_GetBlockStackCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectBlockStacksWidget_GetBlockStackCount) == 0x000004, "Wrong alignment on HWGameplayEffectBlockStacksWidget_GetBlockStackCount");
static_assert(sizeof(HWGameplayEffectBlockStacksWidget_GetBlockStackCount) == 0x000004, "Wrong size on HWGameplayEffectBlockStacksWidget_GetBlockStackCount");
static_assert(offsetof(HWGameplayEffectBlockStacksWidget_GetBlockStackCount, ReturnValue) == 0x000000, "Member 'HWGameplayEffectBlockStacksWidget_GetBlockStackCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGlobalEmoteEquipWidget.EquipToSlot
// 0x0004 (0x0004 - 0x0000)
struct HWGlobalEmoteEquipWidget_EquipToSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGlobalEmoteEquipWidget_EquipToSlot) == 0x000004, "Wrong alignment on HWGlobalEmoteEquipWidget_EquipToSlot");
static_assert(sizeof(HWGlobalEmoteEquipWidget_EquipToSlot) == 0x000004, "Wrong size on HWGlobalEmoteEquipWidget_EquipToSlot");
static_assert(offsetof(HWGlobalEmoteEquipWidget_EquipToSlot, SlotIndex) == 0x000000, "Member 'HWGlobalEmoteEquipWidget_EquipToSlot::SlotIndex' has a wrong offset!");

// Function HemingwayUI.HWGlobalEmoteEquipWidget.Populate
// 0x0010 (0x0010 - 0x0000)
struct HWGlobalEmoteEquipWidget_Populate final
{
public:
	TArray<class UHWGlobalEmoteSlotData*>         ListData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGlobalEmoteEquipWidget_Populate) == 0x000008, "Wrong alignment on HWGlobalEmoteEquipWidget_Populate");
static_assert(sizeof(HWGlobalEmoteEquipWidget_Populate) == 0x000010, "Wrong size on HWGlobalEmoteEquipWidget_Populate");
static_assert(offsetof(HWGlobalEmoteEquipWidget_Populate, ListData) == 0x000000, "Member 'HWGlobalEmoteEquipWidget_Populate::ListData' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.OnHUDDataFactoryInitialized
// 0x0008 (0x0008 - 0x0000)
struct HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized final
{
public:
	class UObject*                                DataFactory;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized) == 0x000008, "Wrong alignment on HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized");
static_assert(sizeof(HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized) == 0x000008, "Wrong size on HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized");
static_assert(offsetof(HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized, DataFactory) == 0x000000, "Member 'HWNewPlayerExpSubsystem_OnHUDDataFactoryInitialized::DataFactory' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.GetNPEArenaQueueId
// 0x0010 (0x0010 - 0x0000)
struct HWNewPlayerExpSubsystem_GetNPEArenaQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_GetNPEArenaQueueId) == 0x000008, "Wrong alignment on HWNewPlayerExpSubsystem_GetNPEArenaQueueId");
static_assert(sizeof(HWNewPlayerExpSubsystem_GetNPEArenaQueueId) == 0x000010, "Wrong size on HWNewPlayerExpSubsystem_GetNPEArenaQueueId");
static_assert(offsetof(HWNewPlayerExpSubsystem_GetNPEArenaQueueId, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_GetNPEArenaQueueId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.GetNPEConquestQueueId
// 0x0010 (0x0010 - 0x0000)
struct HWNewPlayerExpSubsystem_GetNPEConquestQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_GetNPEConquestQueueId) == 0x000008, "Wrong alignment on HWNewPlayerExpSubsystem_GetNPEConquestQueueId");
static_assert(sizeof(HWNewPlayerExpSubsystem_GetNPEConquestQueueId) == 0x000010, "Wrong size on HWNewPlayerExpSubsystem_GetNPEConquestQueueId");
static_assert(offsetof(HWNewPlayerExpSubsystem_GetNPEConquestQueueId, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_GetNPEConquestQueueId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.IsArenaTutorialRedirectEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled) == 0x000001, "Wrong alignment on HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled");
static_assert(sizeof(HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled) == 0x000001, "Wrong size on HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled");
static_assert(offsetof(HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_IsArenaTutorialRedirectEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.IsArenaVideoRedirectEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled) == 0x000001, "Wrong alignment on HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled");
static_assert(sizeof(HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled) == 0x000001, "Wrong size on HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled");
static_assert(offsetof(HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_IsArenaVideoRedirectEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.IsConquestTutorialRedirectEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled) == 0x000001, "Wrong alignment on HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled");
static_assert(sizeof(HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled) == 0x000001, "Wrong size on HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled");
static_assert(offsetof(HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_IsConquestTutorialRedirectEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWNewPlayerExpSubsystem.IsConquestVideoRedirectEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled) == 0x000001, "Wrong alignment on HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled");
static_assert(sizeof(HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled) == 0x000001, "Wrong size on HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled");
static_assert(offsetof(HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled, ReturnValue) == 0x000000, "Member 'HWNewPlayerExpSubsystem_IsConquestVideoRedirectEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.DisplayButtonEquipStatus
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus final
{
public:
	EHWButtonEquipStatus                          ButtonStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus) == 0x000001, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus) == 0x000001, "Wrong size on HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus, ButtonStatus) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_DisplayButtonEquipStatus::ButtonStatus' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.DisplayCollectionType
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType) == 0x000001, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType) == 0x000001, "Wrong size on HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType, CollectionType) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_DisplayCollectionType::CollectionType' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.HandleActiveCollectionTabChanged
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged) == 0x000010, "Wrong size on HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged, TabBarWidget) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged, TabIndex) == 0x000008, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged, Cause) == 0x00000C, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleActiveCollectionTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.HandleEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered) == 0x000010, "Wrong size on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.HandleEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected) == 0x000010, "Wrong size on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.HandleEntryButtonUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered) == 0x000010, "Wrong size on HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered, EntryWidget) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered, InventoryItem) == 0x000008, "Member 'HWPlayerProfileLoadoutScreenWidget_HandleEntryButtonUnhovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.OnLocalLoadoutChanged
// 0x00B8 (0x00B8 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged final
{
public:
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged) == 0x0000B8, "Wrong size on HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged, InPlayerLoadout) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_OnLocalLoadoutChanged::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.PreviewInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem) == 0x000008, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem) == 0x000010, "Wrong size on HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem, EntryWidget) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem, InventoryItem) == 0x000008, "Member 'HWPlayerProfileLoadoutScreenWidget_PreviewInventoryItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileLoadoutScreenWidget.UpdateUnequipButtonDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay) == 0x000001, "Wrong alignment on HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay");
static_assert(sizeof(HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay) == 0x000001, "Wrong size on HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay");
static_assert(offsetof(HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay, bIsVisible) == 0x000000, "Member 'HWPlayerProfileLoadoutScreenWidget_UpdateUnequipButtonDisplay::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.OnLeaderboardDataReady
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady final
{
public:
	struct FHWLeaderboardDataContainer            LeaderboardDataContainer;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady) == 0x000008, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady) == 0x000010, "Wrong size on HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady, LeaderboardDataContainer) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_OnLeaderboardDataReady::LeaderboardDataContainer' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.OnLeaderboardRequest
// 0x0028 (0x0028 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderboardId;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWLeaderboardDataContainer            LeaderboardDataContainer;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest) == 0x000008, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest) == 0x000028, "Wrong size on HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest, bSuccess) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest, LeaderboardId) == 0x000008, "Member 'HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest::LeaderboardId' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest, LeaderboardDataContainer) == 0x000018, "Member 'HWPlayerProfileRankLeaderboardWidget_OnLeaderboardRequest::LeaderboardDataContainer' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.OnLocalPlayerDataReady
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady final
{
public:
	const class UHWLeaderboardEntry*              LocalPlayerData;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady) == 0x000008, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady) == 0x000008, "Wrong size on HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady, LocalPlayerData) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_OnLocalPlayerDataReady::LocalPlayerData' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.OnPlayerPlatformUpdate
// 0x0018 (0x0018 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URH_PlayerPlatformInfo*>         Platforms;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate) == 0x000008, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate) == 0x000018, "Wrong size on HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate, bSuccess) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate, Platforms) == 0x000008, "Member 'HWPlayerProfileRankLeaderboardWidget_OnPlayerPlatformUpdate::Platforms' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.OnTabSelected
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_OnTabSelected final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_OnTabSelected) == 0x000004, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_OnTabSelected");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_OnTabSelected) == 0x000004, "Wrong size on HWPlayerProfileRankLeaderboardWidget_OnTabSelected");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_OnTabSelected, Index_0) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_OnTabSelected::Index_0' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankLeaderboardWidget.ShowLeaderboard
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard final
{
public:
	class FString                                 LeaderboardId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard) == 0x000008, "Wrong alignment on HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard");
static_assert(sizeof(HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard) == 0x000010, "Wrong size on HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard");
static_assert(offsetof(HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard, LeaderboardId) == 0x000000, "Member 'HWPlayerProfileRankLeaderboardWidget_ShowLeaderboard::LeaderboardId' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankScreenWidget.GetLeaderboardData
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileRankScreenWidget_GetLeaderboardData final
{
public:
	class FString                                 LeaderboardId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankScreenWidget_GetLeaderboardData) == 0x000008, "Wrong alignment on HWPlayerProfileRankScreenWidget_GetLeaderboardData");
static_assert(sizeof(HWPlayerProfileRankScreenWidget_GetLeaderboardData) == 0x000010, "Wrong size on HWPlayerProfileRankScreenWidget_GetLeaderboardData");
static_assert(offsetof(HWPlayerProfileRankScreenWidget_GetLeaderboardData, LeaderboardId) == 0x000000, "Member 'HWPlayerProfileRankScreenWidget_GetLeaderboardData::LeaderboardId' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankScreenWidget.OnLeaderboardRequest
// 0x0028 (0x0028 - 0x0000)
struct HWPlayerProfileRankScreenWidget_OnLeaderboardRequest final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderboardId;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWLeaderboardDataContainer            LeaderboardDataContainer;                          // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankScreenWidget_OnLeaderboardRequest) == 0x000008, "Wrong alignment on HWPlayerProfileRankScreenWidget_OnLeaderboardRequest");
static_assert(sizeof(HWPlayerProfileRankScreenWidget_OnLeaderboardRequest) == 0x000028, "Wrong size on HWPlayerProfileRankScreenWidget_OnLeaderboardRequest");
static_assert(offsetof(HWPlayerProfileRankScreenWidget_OnLeaderboardRequest, bSuccess) == 0x000000, "Member 'HWPlayerProfileRankScreenWidget_OnLeaderboardRequest::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileRankScreenWidget_OnLeaderboardRequest, LeaderboardId) == 0x000008, "Member 'HWPlayerProfileRankScreenWidget_OnLeaderboardRequest::LeaderboardId' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileRankScreenWidget_OnLeaderboardRequest, LeaderboardDataContainer) == 0x000018, "Member 'HWPlayerProfileRankScreenWidget_OnLeaderboardRequest::LeaderboardDataContainer' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileRankScreenWidget.OnLocalPlayerDataReady
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady final
{
public:
	const class UHWLeaderboardEntry*              LocalPlayerData;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady) == 0x000008, "Wrong alignment on HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady");
static_assert(sizeof(HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady) == 0x000008, "Wrong size on HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady");
static_assert(offsetof(HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady, LocalPlayerData) == 0x000000, "Member 'HWPlayerProfileRankScreenWidget_OnLocalPlayerDataReady::LocalPlayerData' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyResultsEntry.PopulateDisplay
// 0x0040 (0x0040 - 0x0000)
struct HWEndOfMatchLobbyResultsEntry_PopulateDisplay final
{
public:
	struct FHWEndOfMatchResultsProgressSource     ProgressData;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyResultsEntry_PopulateDisplay) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyResultsEntry_PopulateDisplay");
static_assert(sizeof(HWEndOfMatchLobbyResultsEntry_PopulateDisplay) == 0x000040, "Wrong size on HWEndOfMatchLobbyResultsEntry_PopulateDisplay");
static_assert(offsetof(HWEndOfMatchLobbyResultsEntry_PopulateDisplay, ProgressData) == 0x000000, "Member 'HWEndOfMatchLobbyResultsEntry_PopulateDisplay::ProgressData' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileScreenWidget.OnLocalLoadoutChanged
// 0x00B8 (0x00B8 - 0x0000)
struct HWPlayerProfileScreenWidget_OnLocalLoadoutChanged final
{
public:
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileScreenWidget_OnLocalLoadoutChanged) == 0x000008, "Wrong alignment on HWPlayerProfileScreenWidget_OnLocalLoadoutChanged");
static_assert(sizeof(HWPlayerProfileScreenWidget_OnLocalLoadoutChanged) == 0x0000B8, "Wrong size on HWPlayerProfileScreenWidget_OnLocalLoadoutChanged");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnLocalLoadoutChanged, InPlayerLoadout) == 0x000000, "Member 'HWPlayerProfileScreenWidget_OnLocalLoadoutChanged::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileScreenWidget.OnUpdatePlayerNameColorItem
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem final
{
public:
	const class UHWCollectionItem*                TitleItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem) == 0x000008, "Wrong alignment on HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem");
static_assert(sizeof(HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem) == 0x000008, "Wrong size on HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem, TitleItem) == 0x000000, "Member 'HWPlayerProfileScreenWidget_OnUpdatePlayerNameColorItem::TitleItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileScreenWidget.OnUpdateTitleItem
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerProfileScreenWidget_OnUpdateTitleItem final
{
public:
	const class UHWCollectionItem*                TitleItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileScreenWidget_OnUpdateTitleItem) == 0x000008, "Wrong alignment on HWPlayerProfileScreenWidget_OnUpdateTitleItem");
static_assert(sizeof(HWPlayerProfileScreenWidget_OnUpdateTitleItem) == 0x000008, "Wrong size on HWPlayerProfileScreenWidget_OnUpdateTitleItem");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdateTitleItem, TitleItem) == 0x000000, "Member 'HWPlayerProfileScreenWidget_OnUpdateTitleItem::TitleItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerProfileScreenWidget.OnUpdateXPProgress
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerProfileScreenWidget_OnUpdateXPProgress final
{
public:
	int32                                         CurrentProgress;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextValue;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerProfileScreenWidget_OnUpdateXPProgress) == 0x000004, "Wrong alignment on HWPlayerProfileScreenWidget_OnUpdateXPProgress");
static_assert(sizeof(HWPlayerProfileScreenWidget_OnUpdateXPProgress) == 0x000010, "Wrong size on HWPlayerProfileScreenWidget_OnUpdateXPProgress");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdateXPProgress, CurrentProgress) == 0x000000, "Member 'HWPlayerProfileScreenWidget_OnUpdateXPProgress::CurrentProgress' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdateXPProgress, StartValue) == 0x000004, "Member 'HWPlayerProfileScreenWidget_OnUpdateXPProgress::StartValue' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdateXPProgress, NextValue) == 0x000008, "Member 'HWPlayerProfileScreenWidget_OnUpdateXPProgress::NextValue' has a wrong offset!");
static_assert(offsetof(HWPlayerProfileScreenWidget_OnUpdateXPProgress, CurrentLevel) == 0x00000C, "Member 'HWPlayerProfileScreenWidget_OnUpdateXPProgress::CurrentLevel' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderModesListWidget.HandleModeEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderModesListWidget_HandleModeEntrySelected final
{
public:
	class UHWGodBuilderModesListEntryWidget*      EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EntryMode;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderModesListWidget_HandleModeEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderModesListWidget_HandleModeEntrySelected");
static_assert(sizeof(HWGodBuilderModesListWidget_HandleModeEntrySelected) == 0x000010, "Wrong size on HWGodBuilderModesListWidget_HandleModeEntrySelected");
static_assert(offsetof(HWGodBuilderModesListWidget_HandleModeEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderModesListWidget_HandleModeEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderModesListWidget_HandleModeEntrySelected, EntryMode) == 0x000008, "Member 'HWGodBuilderModesListWidget_HandleModeEntrySelected::EntryMode' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.DisplayCurrency
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyDisplayWidget_DisplayCurrency final
{
public:
	const class URHCurrency*                      CURRENCY;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoading;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCurrencyDisplayWidget_DisplayCurrency) == 0x000008, "Wrong alignment on HWCurrencyDisplayWidget_DisplayCurrency");
static_assert(sizeof(HWCurrencyDisplayWidget_DisplayCurrency) == 0x000010, "Wrong size on HWCurrencyDisplayWidget_DisplayCurrency");
static_assert(offsetof(HWCurrencyDisplayWidget_DisplayCurrency, CURRENCY) == 0x000000, "Member 'HWCurrencyDisplayWidget_DisplayCurrency::CURRENCY' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_DisplayCurrency, bIsLoading) == 0x000008, "Member 'HWCurrencyDisplayWidget_DisplayCurrency::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.DisplayCurrencyAmount
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyDisplayWidget_DisplayCurrencyAmount final
{
public:
	int32                                         NewAmount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLessThanOwned;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCurrencyDisplayWidget_DisplayCurrencyAmount) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_DisplayCurrencyAmount");
static_assert(sizeof(HWCurrencyDisplayWidget_DisplayCurrencyAmount) == 0x000008, "Wrong size on HWCurrencyDisplayWidget_DisplayCurrencyAmount");
static_assert(offsetof(HWCurrencyDisplayWidget_DisplayCurrencyAmount, NewAmount) == 0x000000, "Member 'HWCurrencyDisplayWidget_DisplayCurrencyAmount::NewAmount' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_DisplayCurrencyAmount, bIsLessThanOwned) == 0x000004, "Member 'HWCurrencyDisplayWidget_DisplayCurrencyAmount::bIsLessThanOwned' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.HandleInventoryCacheUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWCurrencyDisplayWidget_HandleInventoryCacheUpdated final
{
public:
	TArray<int32>                                 ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_HandleInventoryCacheUpdated) == 0x000008, "Wrong alignment on HWCurrencyDisplayWidget_HandleInventoryCacheUpdated");
static_assert(sizeof(HWCurrencyDisplayWidget_HandleInventoryCacheUpdated) == 0x000018, "Wrong size on HWCurrencyDisplayWidget_HandleInventoryCacheUpdated");
static_assert(offsetof(HWCurrencyDisplayWidget_HandleInventoryCacheUpdated, ItemIds) == 0x000000, "Member 'HWCurrencyDisplayWidget_HandleInventoryCacheUpdated::ItemIds' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_HandleInventoryCacheUpdated, PlayerInfo) == 0x000010, "Member 'HWCurrencyDisplayWidget_HandleInventoryCacheUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.OnDisplayedCurrenciesUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated final
{
public:
	struct FGameplayTag                           AppSettingTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CurrencyIds;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated) == 0x000008, "Wrong alignment on HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated");
static_assert(sizeof(HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated) == 0x000018, "Wrong size on HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated");
static_assert(offsetof(HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated, AppSettingTag) == 0x000000, "Member 'HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated::AppSettingTag' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated, CurrencyIds) == 0x000008, "Member 'HWCurrencyDisplayWidget_OnDisplayedCurrenciesUpdated::CurrencyIds' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.SetAmount
// 0x0004 (0x0004 - 0x0000)
struct HWCurrencyDisplayWidget_SetAmount final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_SetAmount) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_SetAmount");
static_assert(sizeof(HWCurrencyDisplayWidget_SetAmount) == 0x000004, "Wrong size on HWCurrencyDisplayWidget_SetAmount");
static_assert(offsetof(HWCurrencyDisplayWidget_SetAmount, Amount) == 0x000000, "Member 'HWCurrencyDisplayWidget_SetAmount::Amount' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.SetCurrency
// 0x0014 (0x0014 - 0x0000)
struct HWCurrencyDisplayWidget_SetCurrency final
{
public:
	struct FRH_ItemId                             CurrencyId;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_SetCurrency) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_SetCurrency");
static_assert(sizeof(HWCurrencyDisplayWidget_SetCurrency) == 0x000014, "Wrong size on HWCurrencyDisplayWidget_SetCurrency");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrency, CurrencyId) == 0x000000, "Member 'HWCurrencyDisplayWidget_SetCurrency::CurrencyId' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.SetCurrencyAndAmount
// 0x0018 (0x0018 - 0x0000)
struct HWCurrencyDisplayWidget_SetCurrencyAndAmount final
{
public:
	struct FRH_ItemId                             CurrencyId;                                        // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_SetCurrencyAndAmount) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_SetCurrencyAndAmount");
static_assert(sizeof(HWCurrencyDisplayWidget_SetCurrencyAndAmount) == 0x000018, "Wrong size on HWCurrencyDisplayWidget_SetCurrencyAndAmount");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrencyAndAmount, CurrencyId) == 0x000000, "Member 'HWCurrencyDisplayWidget_SetCurrencyAndAmount::CurrencyId' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrencyAndAmount, Amount) == 0x000014, "Member 'HWCurrencyDisplayWidget_SetCurrencyAndAmount::Amount' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.SetCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct HWCurrencyDisplayWidget_SetCurrencyType final
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_SetCurrencyType) == 0x000001, "Wrong alignment on HWCurrencyDisplayWidget_SetCurrencyType");
static_assert(sizeof(HWCurrencyDisplayWidget_SetCurrencyType) == 0x000001, "Wrong size on HWCurrencyDisplayWidget_SetCurrencyType");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrencyType, CurrencyType) == 0x000000, "Member 'HWCurrencyDisplayWidget_SetCurrencyType::CurrencyType' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.SetCurrencyTypeAndAmount
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount final
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount");
static_assert(sizeof(HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount) == 0x000008, "Wrong size on HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount, CurrencyType) == 0x000000, "Member 'HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount::CurrencyType' has a wrong offset!");
static_assert(offsetof(HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount, Amount) == 0x000004, "Member 'HWCurrencyDisplayWidget_SetCurrencyTypeAndAmount::Amount' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.UpdateIsCurrencyDisplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled final
{
public:
	bool                                          bIsCurrencyEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled) == 0x000001, "Wrong alignment on HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled");
static_assert(sizeof(HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled) == 0x000001, "Wrong size on HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled");
static_assert(offsetof(HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled, bIsCurrencyEnabled) == 0x000000, "Member 'HWCurrencyDisplayWidget_UpdateIsCurrencyDisplayEnabled::bIsCurrencyEnabled' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.GetDisplayedAmount
// 0x0004 (0x0004 - 0x0000)
struct HWCurrencyDisplayWidget_GetDisplayedAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_GetDisplayedAmount) == 0x000004, "Wrong alignment on HWCurrencyDisplayWidget_GetDisplayedAmount");
static_assert(sizeof(HWCurrencyDisplayWidget_GetDisplayedAmount) == 0x000004, "Wrong size on HWCurrencyDisplayWidget_GetDisplayedAmount");
static_assert(offsetof(HWCurrencyDisplayWidget_GetDisplayedAmount, ReturnValue) == 0x000000, "Member 'HWCurrencyDisplayWidget_GetDisplayedAmount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.GetDisplayedCurrency
// 0x0028 (0x0028 - 0x0000)
struct HWCurrencyDisplayWidget_GetDisplayedCurrency final
{
public:
	TSoftObjectPtr<class URHCurrency>             ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_GetDisplayedCurrency) == 0x000008, "Wrong alignment on HWCurrencyDisplayWidget_GetDisplayedCurrency");
static_assert(sizeof(HWCurrencyDisplayWidget_GetDisplayedCurrency) == 0x000028, "Wrong size on HWCurrencyDisplayWidget_GetDisplayedCurrency");
static_assert(offsetof(HWCurrencyDisplayWidget_GetDisplayedCurrency, ReturnValue) == 0x000000, "Member 'HWCurrencyDisplayWidget_GetDisplayedCurrency::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyDisplayWidget.GetDisplayedCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct HWCurrencyDisplayWidget_GetDisplayedCurrencyType final
{
public:
	EHWCurrencyType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyDisplayWidget_GetDisplayedCurrencyType) == 0x000001, "Wrong alignment on HWCurrencyDisplayWidget_GetDisplayedCurrencyType");
static_assert(sizeof(HWCurrencyDisplayWidget_GetDisplayedCurrencyType) == 0x000001, "Wrong size on HWCurrencyDisplayWidget_GetDisplayedCurrencyType");
static_assert(offsetof(HWCurrencyDisplayWidget_GetDisplayedCurrencyType, ReturnValue) == 0x000000, "Member 'HWCurrencyDisplayWidget_GetDisplayedCurrencyType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildEntry.AddItemWidget
// 0x0010 (0x0010 - 0x0000)
struct HWAutoBuyBuildEntry_AddItemWidget final
{
public:
	const class UHWAutoBuyBuildItemWidget*        NewItemWidget;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStartingItem;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAutoBuyBuildEntry_AddItemWidget) == 0x000008, "Wrong alignment on HWAutoBuyBuildEntry_AddItemWidget");
static_assert(sizeof(HWAutoBuyBuildEntry_AddItemWidget) == 0x000010, "Wrong size on HWAutoBuyBuildEntry_AddItemWidget");
static_assert(offsetof(HWAutoBuyBuildEntry_AddItemWidget, NewItemWidget) == 0x000000, "Member 'HWAutoBuyBuildEntry_AddItemWidget::NewItemWidget' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildEntry_AddItemWidget, bIsStartingItem) == 0x000008, "Member 'HWAutoBuyBuildEntry_AddItemWidget::bIsStartingItem' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildEntry.DisplayBuild
// 0x01B0 (0x01B0 - 0x0000)
struct HWAutoBuyBuildEntry_DisplayBuild final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWAutoGodBuild                        InAutoGodBuild;                                    // 0x0008(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTexture2D>>      InSoftAbilityIcons;                                // 0x01A0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildEntry_DisplayBuild) == 0x000008, "Wrong alignment on HWAutoBuyBuildEntry_DisplayBuild");
static_assert(sizeof(HWAutoBuyBuildEntry_DisplayBuild) == 0x0001B0, "Wrong size on HWAutoBuyBuildEntry_DisplayBuild");
static_assert(offsetof(HWAutoBuyBuildEntry_DisplayBuild, InCharacterItem) == 0x000000, "Member 'HWAutoBuyBuildEntry_DisplayBuild::InCharacterItem' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildEntry_DisplayBuild, InAutoGodBuild) == 0x000008, "Member 'HWAutoBuyBuildEntry_DisplayBuild::InAutoGodBuild' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildEntry_DisplayBuild, InSoftAbilityIcons) == 0x0001A0, "Member 'HWAutoBuyBuildEntry_DisplayBuild::InSoftAbilityIcons' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildEntry.SelectBuild
// 0x0001 (0x0001 - 0x0000)
struct HWAutoBuyBuildEntry_SelectBuild final
{
public:
	bool                                          bIsFinalSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildEntry_SelectBuild) == 0x000001, "Wrong alignment on HWAutoBuyBuildEntry_SelectBuild");
static_assert(sizeof(HWAutoBuyBuildEntry_SelectBuild) == 0x000001, "Wrong size on HWAutoBuyBuildEntry_SelectBuild");
static_assert(offsetof(HWAutoBuyBuildEntry_SelectBuild, bIsFinalSelection) == 0x000000, "Member 'HWAutoBuyBuildEntry_SelectBuild::bIsFinalSelection' has a wrong offset!");

// Function HemingwayUI.HWWalletCurrencyEntryWidget.DisplayBoost
// 0x0010 (0x0010 - 0x0000)
struct HWWalletCurrencyEntryWidget_DisplayBoost final
{
public:
	const class UHWCollectionItem*                Boost;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoading;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWalletCurrencyEntryWidget_DisplayBoost) == 0x000008, "Wrong alignment on HWWalletCurrencyEntryWidget_DisplayBoost");
static_assert(sizeof(HWWalletCurrencyEntryWidget_DisplayBoost) == 0x000010, "Wrong size on HWWalletCurrencyEntryWidget_DisplayBoost");
static_assert(offsetof(HWWalletCurrencyEntryWidget_DisplayBoost, Boost) == 0x000000, "Member 'HWWalletCurrencyEntryWidget_DisplayBoost::Boost' has a wrong offset!");
static_assert(offsetof(HWWalletCurrencyEntryWidget_DisplayBoost, bIsLoading) == 0x000008, "Member 'HWWalletCurrencyEntryWidget_DisplayBoost::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWWalletCurrencyEntryWidget.DisplayBoostDuration
// 0x0008 (0x0008 - 0x0000)
struct HWWalletCurrencyEntryWidget_DisplayBoostDuration final
{
public:
	struct FDateTime                              ExpirationDate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletCurrencyEntryWidget_DisplayBoostDuration) == 0x000008, "Wrong alignment on HWWalletCurrencyEntryWidget_DisplayBoostDuration");
static_assert(sizeof(HWWalletCurrencyEntryWidget_DisplayBoostDuration) == 0x000008, "Wrong size on HWWalletCurrencyEntryWidget_DisplayBoostDuration");
static_assert(offsetof(HWWalletCurrencyEntryWidget_DisplayBoostDuration, ExpirationDate) == 0x000000, "Member 'HWWalletCurrencyEntryWidget_DisplayBoostDuration::ExpirationDate' has a wrong offset!");

// Function HemingwayUI.HWWalletCurrencyEntryWidget.OnEntryWidgetFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged) == 0x000001, "Wrong alignment on HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged");
static_assert(sizeof(HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged) == 0x000001, "Wrong size on HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged");
static_assert(offsetof(HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged, bFocused) == 0x000000, "Member 'HWWalletCurrencyEntryWidget_OnEntryWidgetFocusChanged::bFocused' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.HandleAbilityOrderEntryHovered
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered final
{
public:
	class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered) == 0x000008, "Wrong size on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryHovered::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.HandleAbilityOrderEntryNavLeft
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft final
{
public:
	EUINavigation                                 NavigationDir;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft) == 0x000010, "Wrong size on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft, NavigationDir) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft::NavigationDir' has a wrong offset!");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft, ReturnValue) == 0x000008, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavLeft::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.HandleAbilityOrderEntryNavRight
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight final
{
public:
	EUINavigation                                 NavigationDir;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight) == 0x000010, "Wrong size on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight, NavigationDir) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight::NavigationDir' has a wrong offset!");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight, ReturnValue) == 0x000008, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntryNavRight::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.HandleAbilityOrderEntrySelected
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected final
{
public:
	class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected) == 0x000008, "Wrong size on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderEntrySelected::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.HandleAbilityOrderIconSelected
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected) == 0x000004, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected) == 0x000004, "Wrong size on HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected, AbilityIndex) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_HandleAbilityOrderIconSelected::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.OnAbilityEquipmentItemsLoaded
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded final
{
public:
	TArray<struct FHWAbilityItemSet>              InAbilitySet;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded) == 0x000010, "Wrong size on HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded, InAbilitySet) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_OnAbilityEquipmentItemsLoaded::InAbilitySet' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.SetAbilityOrderIndices
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices final
{
public:
	TArray<int32>                                 InAbilityOrderIndices;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices) == 0x000010, "Wrong size on HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices, InAbilityOrderIndices) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_SetAbilityOrderIndices::InAbilityOrderIndices' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.SetGodItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_SetGodItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_SetGodItem) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_SetGodItem");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_SetGodItem) == 0x000008, "Wrong size on HWGodBuilderAbilitiesOrderWidget_SetGodItem");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_SetGodItem, InCharacterItem) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_SetGodItem::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.SetIsEditable
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_SetIsEditable final
{
public:
	bool                                          bInIsEditable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_SetIsEditable) == 0x000001, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_SetIsEditable");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_SetIsEditable) == 0x000001, "Wrong size on HWGodBuilderAbilitiesOrderWidget_SetIsEditable");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_SetIsEditable, bInIsEditable) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_SetIsEditable::bInIsEditable' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderWidget.ShowTooltip
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderAbilitiesOrderWidget_ShowTooltip final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReferenceWidget;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowContextBar;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderWidget_ShowTooltip");
static_assert(sizeof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip) == 0x000018, "Wrong size on HWGodBuilderAbilitiesOrderWidget_ShowTooltip");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip, AbilityIndex) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderWidget_ShowTooltip::AbilityIndex' has a wrong offset!");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip, ReferenceWidget) == 0x000008, "Member 'HWGodBuilderAbilitiesOrderWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip, bShowContextBar) == 0x000010, "Member 'HWGodBuilderAbilitiesOrderWidget_ShowTooltip::bShowContextBar' has a wrong offset!");
static_assert(offsetof(HWGodBuilderAbilitiesOrderWidget_ShowTooltip, Axis) == 0x000011, "Member 'HWGodBuilderAbilitiesOrderWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.BP_UpdateCategoryDisplay
// 0x0030 (0x0030 - 0x0000)
struct HWWalletWidget_BP_UpdateCategoryDisplay final
{
public:
	struct FHWCurrencyCategory                    CategoryDetails;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_BP_UpdateCategoryDisplay) == 0x000008, "Wrong alignment on HWWalletWidget_BP_UpdateCategoryDisplay");
static_assert(sizeof(HWWalletWidget_BP_UpdateCategoryDisplay) == 0x000030, "Wrong size on HWWalletWidget_BP_UpdateCategoryDisplay");
static_assert(offsetof(HWWalletWidget_BP_UpdateCategoryDisplay, CategoryDetails) == 0x000000, "Member 'HWWalletWidget_BP_UpdateCategoryDisplay::CategoryDetails' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.ChangeCategory
// 0x0001 (0x0001 - 0x0000)
struct HWWalletWidget_ChangeCategory final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_ChangeCategory) == 0x000001, "Wrong alignment on HWWalletWidget_ChangeCategory");
static_assert(sizeof(HWWalletWidget_ChangeCategory) == 0x000001, "Wrong size on HWWalletWidget_ChangeCategory");
static_assert(offsetof(HWWalletWidget_ChangeCategory, bForward) == 0x000000, "Member 'HWWalletWidget_ChangeCategory::bForward' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.DisplayFocusedBooster
// 0x0008 (0x0008 - 0x0000)
struct HWWalletWidget_DisplayFocusedBooster final
{
public:
	class UHWCollectionItem*                      Booster;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_DisplayFocusedBooster) == 0x000008, "Wrong alignment on HWWalletWidget_DisplayFocusedBooster");
static_assert(sizeof(HWWalletWidget_DisplayFocusedBooster) == 0x000008, "Wrong size on HWWalletWidget_DisplayFocusedBooster");
static_assert(offsetof(HWWalletWidget_DisplayFocusedBooster, Booster) == 0x000000, "Member 'HWWalletWidget_DisplayFocusedBooster::Booster' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.DisplayFocusedCurrency
// 0x0008 (0x0008 - 0x0000)
struct HWWalletWidget_DisplayFocusedCurrency final
{
public:
	class URHCurrency*                            CURRENCY;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_DisplayFocusedCurrency) == 0x000008, "Wrong alignment on HWWalletWidget_DisplayFocusedCurrency");
static_assert(sizeof(HWWalletWidget_DisplayFocusedCurrency) == 0x000008, "Wrong size on HWWalletWidget_DisplayFocusedCurrency");
static_assert(offsetof(HWWalletWidget_DisplayFocusedCurrency, CURRENCY) == 0x000000, "Member 'HWWalletWidget_DisplayFocusedCurrency::CURRENCY' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.OnEntryWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWWalletWidget_OnEntryWidgetAdded final
{
public:
	class UHWWalletCurrencyEntryWidget*           AddedEntryWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_OnEntryWidgetAdded) == 0x000008, "Wrong alignment on HWWalletWidget_OnEntryWidgetAdded");
static_assert(sizeof(HWWalletWidget_OnEntryWidgetAdded) == 0x000008, "Wrong size on HWWalletWidget_OnEntryWidgetAdded");
static_assert(offsetof(HWWalletWidget_OnEntryWidgetAdded, AddedEntryWidget) == 0x000000, "Member 'HWWalletWidget_OnEntryWidgetAdded::AddedEntryWidget' has a wrong offset!");

// Function HemingwayUI.HWWalletWidget.OnEntryWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWWalletWidget_OnEntryWidgetRemoved final
{
public:
	class UHWWalletCurrencyEntryWidget*           RemovedEntryWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWalletWidget_OnEntryWidgetRemoved) == 0x000008, "Wrong alignment on HWWalletWidget_OnEntryWidgetRemoved");
static_assert(sizeof(HWWalletWidget_OnEntryWidgetRemoved) == 0x000008, "Wrong size on HWWalletWidget_OnEntryWidgetRemoved");
static_assert(offsetof(HWWalletWidget_OnEntryWidgetRemoved, RemovedEntryWidget) == 0x000000, "Member 'HWWalletWidget_OnEntryWidgetRemoved::RemovedEntryWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.AddIcon
// 0x0030 (0x0030 - 0x0000)
struct HWIconDisplayerBase_AddIcon final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_AddIcon) == 0x000008, "Wrong alignment on HWIconDisplayerBase_AddIcon");
static_assert(sizeof(HWIconDisplayerBase_AddIcon) == 0x000030, "Wrong size on HWIconDisplayerBase_AddIcon");
static_assert(offsetof(HWIconDisplayerBase_AddIcon, InDisplayInfo) == 0x000000, "Member 'HWIconDisplayerBase_AddIcon::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.HandleWidgetHideSequenceFinished
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_HandleWidgetHideSequenceFinished final
{
public:
	class URHWidget*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_HandleWidgetHideSequenceFinished) == 0x000008, "Wrong alignment on HWIconDisplayerBase_HandleWidgetHideSequenceFinished");
static_assert(sizeof(HWIconDisplayerBase_HandleWidgetHideSequenceFinished) == 0x000008, "Wrong size on HWIconDisplayerBase_HandleWidgetHideSequenceFinished");
static_assert(offsetof(HWIconDisplayerBase_HandleWidgetHideSequenceFinished, Widget) == 0x000000, "Member 'HWIconDisplayerBase_HandleWidgetHideSequenceFinished::Widget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.IconAdded
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_IconAdded final
{
public:
	class UHWIconDisplayBaseWidget*               IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_IconAdded) == 0x000008, "Wrong alignment on HWIconDisplayerBase_IconAdded");
static_assert(sizeof(HWIconDisplayerBase_IconAdded) == 0x000008, "Wrong size on HWIconDisplayerBase_IconAdded");
static_assert(offsetof(HWIconDisplayerBase_IconAdded, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_IconAdded::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.IconHidden
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_IconHidden final
{
public:
	class UHWIconDisplayBaseWidget*               IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_IconHidden) == 0x000008, "Wrong alignment on HWIconDisplayerBase_IconHidden");
static_assert(sizeof(HWIconDisplayerBase_IconHidden) == 0x000008, "Wrong size on HWIconDisplayerBase_IconHidden");
static_assert(offsetof(HWIconDisplayerBase_IconHidden, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_IconHidden::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.IconRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_IconRemoved final
{
public:
	class UHWIconDisplayBaseWidget*               IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_IconRemoved) == 0x000008, "Wrong alignment on HWIconDisplayerBase_IconRemoved");
static_assert(sizeof(HWIconDisplayerBase_IconRemoved) == 0x000008, "Wrong size on HWIconDisplayerBase_IconRemoved");
static_assert(offsetof(HWIconDisplayerBase_IconRemoved, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_IconRemoved::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.IconShown
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_IconShown final
{
public:
	class UHWIconDisplayBaseWidget*               IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_IconShown) == 0x000008, "Wrong alignment on HWIconDisplayerBase_IconShown");
static_assert(sizeof(HWIconDisplayerBase_IconShown) == 0x000008, "Wrong size on HWIconDisplayerBase_IconShown");
static_assert(offsetof(HWIconDisplayerBase_IconShown, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_IconShown::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.OnDisplayInfoHidden
// 0x0030 (0x0030 - 0x0000)
struct HWIconDisplayerBase_OnDisplayInfoHidden final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_OnDisplayInfoHidden) == 0x000008, "Wrong alignment on HWIconDisplayerBase_OnDisplayInfoHidden");
static_assert(sizeof(HWIconDisplayerBase_OnDisplayInfoHidden) == 0x000030, "Wrong size on HWIconDisplayerBase_OnDisplayInfoHidden");
static_assert(offsetof(HWIconDisplayerBase_OnDisplayInfoHidden, InDisplayInfo) == 0x000000, "Member 'HWIconDisplayerBase_OnDisplayInfoHidden::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.OnDisplayInfoRemoved
// 0x0030 (0x0030 - 0x0000)
struct HWIconDisplayerBase_OnDisplayInfoRemoved final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_OnDisplayInfoRemoved) == 0x000008, "Wrong alignment on HWIconDisplayerBase_OnDisplayInfoRemoved");
static_assert(sizeof(HWIconDisplayerBase_OnDisplayInfoRemoved) == 0x000030, "Wrong size on HWIconDisplayerBase_OnDisplayInfoRemoved");
static_assert(offsetof(HWIconDisplayerBase_OnDisplayInfoRemoved, InDisplayInfo) == 0x000000, "Member 'HWIconDisplayerBase_OnDisplayInfoRemoved::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.OnDisplayInfoShown
// 0x0030 (0x0030 - 0x0000)
struct HWIconDisplayerBase_OnDisplayInfoShown final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_OnDisplayInfoShown) == 0x000008, "Wrong alignment on HWIconDisplayerBase_OnDisplayInfoShown");
static_assert(sizeof(HWIconDisplayerBase_OnDisplayInfoShown) == 0x000030, "Wrong size on HWIconDisplayerBase_OnDisplayInfoShown");
static_assert(offsetof(HWIconDisplayerBase_OnDisplayInfoShown, InDisplayInfo) == 0x000000, "Member 'HWIconDisplayerBase_OnDisplayInfoShown::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.OnManualIconRemoval
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_OnManualIconRemoval final
{
public:
	const class UHWIconDisplayBaseWidget*         IconWidget;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_OnManualIconRemoval) == 0x000008, "Wrong alignment on HWIconDisplayerBase_OnManualIconRemoval");
static_assert(sizeof(HWIconDisplayerBase_OnManualIconRemoval) == 0x000008, "Wrong size on HWIconDisplayerBase_OnManualIconRemoval");
static_assert(offsetof(HWIconDisplayerBase_OnManualIconRemoval, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_OnManualIconRemoval::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.RemoveIcon
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_RemoveIcon final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWIconDisplayerBase_RemoveIcon) == 0x000004, "Wrong alignment on HWIconDisplayerBase_RemoveIcon");
static_assert(sizeof(HWIconDisplayerBase_RemoveIcon) == 0x000008, "Wrong size on HWIconDisplayerBase_RemoveIcon");
static_assert(offsetof(HWIconDisplayerBase_RemoveIcon, ID) == 0x000000, "Member 'HWIconDisplayerBase_RemoveIcon::ID' has a wrong offset!");
static_assert(offsetof(HWIconDisplayerBase_RemoveIcon, bForce) == 0x000004, "Member 'HWIconDisplayerBase_RemoveIcon::bForce' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayerBase.UpdateIcon
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayerBase_UpdateIcon final
{
public:
	class UHWIconDisplayBaseWidget*               IconWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayerBase_UpdateIcon) == 0x000008, "Wrong alignment on HWIconDisplayerBase_UpdateIcon");
static_assert(sizeof(HWIconDisplayerBase_UpdateIcon) == 0x000008, "Wrong size on HWIconDisplayerBase_UpdateIcon");
static_assert(offsetof(HWIconDisplayerBase_UpdateIcon, IconWidget) == 0x000000, "Member 'HWIconDisplayerBase_UpdateIcon::IconWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueInfoWidget.BP_DisplayQueueInfo
// 0x0290 (0x0290 - 0x0000)
struct HWQueueInfoWidget_BP_DisplayQueueInfo final
{
public:
	struct FRHQueueDetails                        QueueDetails;                                      // 0x0000(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0198(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueInfoWidget_BP_DisplayQueueInfo) == 0x000008, "Wrong alignment on HWQueueInfoWidget_BP_DisplayQueueInfo");
static_assert(sizeof(HWQueueInfoWidget_BP_DisplayQueueInfo) == 0x000290, "Wrong size on HWQueueInfoWidget_BP_DisplayQueueInfo");
static_assert(offsetof(HWQueueInfoWidget_BP_DisplayQueueInfo, QueueDetails) == 0x000000, "Member 'HWQueueInfoWidget_BP_DisplayQueueInfo::QueueDetails' has a wrong offset!");
static_assert(offsetof(HWQueueInfoWidget_BP_DisplayQueueInfo, GameModeInfo) == 0x000198, "Member 'HWQueueInfoWidget_BP_DisplayQueueInfo::GameModeInfo' has a wrong offset!");

// Function HemingwayUI.HWQueueInfoWidget.DisplayQueueInfoForQueueId
// 0x0018 (0x0018 - 0x0000)
struct HWQueueInfoWidget_DisplayQueueInfoForQueueId final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWQueueInfoWidget_DisplayQueueInfoForQueueId) == 0x000008, "Wrong alignment on HWQueueInfoWidget_DisplayQueueInfoForQueueId");
static_assert(sizeof(HWQueueInfoWidget_DisplayQueueInfoForQueueId) == 0x000018, "Wrong size on HWQueueInfoWidget_DisplayQueueInfoForQueueId");
static_assert(offsetof(HWQueueInfoWidget_DisplayQueueInfoForQueueId, QueueId) == 0x000000, "Member 'HWQueueInfoWidget_DisplayQueueInfoForQueueId::QueueId' has a wrong offset!");
static_assert(offsetof(HWQueueInfoWidget_DisplayQueueInfoForQueueId, ReturnValue) == 0x000010, "Member 'HWQueueInfoWidget_DisplayQueueInfoForQueueId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2EntryWidget.PopulateQueueDetails
// 0x0198 (0x0198 - 0x0000)
struct HWQueueSelectV2EntryWidget_PopulateQueueDetails final
{
public:
	struct FRHQueueDetails                        QueueDetails;                                      // 0x0000(0x0198)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2EntryWidget_PopulateQueueDetails) == 0x000008, "Wrong alignment on HWQueueSelectV2EntryWidget_PopulateQueueDetails");
static_assert(sizeof(HWQueueSelectV2EntryWidget_PopulateQueueDetails) == 0x000198, "Wrong size on HWQueueSelectV2EntryWidget_PopulateQueueDetails");
static_assert(offsetof(HWQueueSelectV2EntryWidget_PopulateQueueDetails, QueueDetails) == 0x000000, "Member 'HWQueueSelectV2EntryWidget_PopulateQueueDetails::QueueDetails' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2EntryWidget.GetQueueId
// 0x0010 (0x0010 - 0x0000)
struct HWQueueSelectV2EntryWidget_GetQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2EntryWidget_GetQueueId) == 0x000008, "Wrong alignment on HWQueueSelectV2EntryWidget_GetQueueId");
static_assert(sizeof(HWQueueSelectV2EntryWidget_GetQueueId) == 0x000010, "Wrong size on HWQueueSelectV2EntryWidget_GetQueueId");
static_assert(offsetof(HWQueueSelectV2EntryWidget_GetQueueId, ReturnValue) == 0x000000, "Member 'HWQueueSelectV2EntryWidget_GetQueueId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconSubsystem.GetCharacterStatsDataDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWIconSubsystem_GetCharacterStatsDataDisplay final
{
public:
	const class UHWDataDisplay_CharacterStats*    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconSubsystem_GetCharacterStatsDataDisplay) == 0x000008, "Wrong alignment on HWIconSubsystem_GetCharacterStatsDataDisplay");
static_assert(sizeof(HWIconSubsystem_GetCharacterStatsDataDisplay) == 0x000008, "Wrong size on HWIconSubsystem_GetCharacterStatsDataDisplay");
static_assert(offsetof(HWIconSubsystem_GetCharacterStatsDataDisplay, ReturnValue) == 0x000000, "Member 'HWIconSubsystem_GetCharacterStatsDataDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconSubsystem.GetKeywordsDataDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWIconSubsystem_GetKeywordsDataDisplay final
{
public:
	const class UHWDataDisplay_Keywords*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconSubsystem_GetKeywordsDataDisplay) == 0x000008, "Wrong alignment on HWIconSubsystem_GetKeywordsDataDisplay");
static_assert(sizeof(HWIconSubsystem_GetKeywordsDataDisplay) == 0x000008, "Wrong size on HWIconSubsystem_GetKeywordsDataDisplay");
static_assert(offsetof(HWIconSubsystem_GetKeywordsDataDisplay, ReturnValue) == 0x000000, "Member 'HWIconSubsystem_GetKeywordsDataDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleArenaTutorialEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleArenaTutorialEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleCasualEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleCasualEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleConquestTutorialEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleConquestTutorialEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleCoopArenaEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleCoopArenaEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleCoopConquestEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleCoopConquestEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleCoopEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleCoopEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleJunglePracticeEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleJunglePracticeEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandlePracticeButtonClicked
// 0x0018 (0x0018 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TransitionTag;                                     // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked) == 0x000018, "Wrong size on HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked, LevelName) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked::LevelName' has a wrong offset!");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked, TransitionTag) == 0x000010, "Member 'HWQueueSelectV2ScreenWidget_HandlePracticeButtonClicked::TransitionTag' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.HandleRankedEntryClicked
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_HandleRankedEntryClicked::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.JoinEntryQueue
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_JoinEntryQueue final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_JoinEntryQueue) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_JoinEntryQueue");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_JoinEntryQueue) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_JoinEntryQueue");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_JoinEntryQueue, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_JoinEntryQueue::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.SelectEntryQueue
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_SelectEntryQueue final
{
public:
	class UHWQueueSelectV2EntryWidget*            EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_SelectEntryQueue) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_SelectEntryQueue");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_SelectEntryQueue) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_SelectEntryQueue");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_SelectEntryQueue, EntryWidget) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_SelectEntryQueue::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.SetQueueSelectState
// 0x0001 (0x0001 - 0x0000)
struct HWQueueSelectV2ScreenWidget_SetQueueSelectState final
{
public:
	EHWQueueSelectState                           QueueSelectState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_SetQueueSelectState) == 0x000001, "Wrong alignment on HWQueueSelectV2ScreenWidget_SetQueueSelectState");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_SetQueueSelectState) == 0x000001, "Wrong size on HWQueueSelectV2ScreenWidget_SetQueueSelectState");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_SetQueueSelectState, QueueSelectState) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_SetQueueSelectState::QueueSelectState' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct HWQueueSelectV2ScreenWidget_GetQueueDataFactory final
{
public:
	class UHWQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_GetQueueDataFactory) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_GetQueueDataFactory");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_GetQueueDataFactory) == 0x000008, "Wrong size on HWQueueSelectV2ScreenWidget_GetQueueDataFactory");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWQueueSelectV2ScreenWidget.GetQueueSelectEntries
// 0x0010 (0x0010 - 0x0000)
struct HWQueueSelectV2ScreenWidget_GetQueueSelectEntries final
{
public:
	TArray<class UHWQueueSelectV2EntryWidget*>    OutQueueEntries;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWQueueSelectV2ScreenWidget_GetQueueSelectEntries) == 0x000008, "Wrong alignment on HWQueueSelectV2ScreenWidget_GetQueueSelectEntries");
static_assert(sizeof(HWQueueSelectV2ScreenWidget_GetQueueSelectEntries) == 0x000010, "Wrong size on HWQueueSelectV2ScreenWidget_GetQueueSelectEntries");
static_assert(offsetof(HWQueueSelectV2ScreenWidget_GetQueueSelectEntries, OutQueueEntries) == 0x000000, "Member 'HWQueueSelectV2ScreenWidget_GetQueueSelectEntries::OutQueueEntries' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.CopyStyles
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_CopyStyles final
{
public:
	TSubclassOf<class UHWButtonWidget>            ButtonToCopyFrom;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_CopyStyles) == 0x000008, "Wrong alignment on HWButtonWidget_CopyStyles");
static_assert(sizeof(HWButtonWidget_CopyStyles) == 0x000008, "Wrong size on HWButtonWidget_CopyStyles");
static_assert(offsetof(HWButtonWidget_CopyStyles, ButtonToCopyFrom) == 0x000000, "Member 'HWButtonWidget_CopyStyles::ButtonToCopyFrom' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.SetAsButtonState
// 0x0001 (0x0001 - 0x0000)
struct HWButtonWidget_SetAsButtonState final
{
public:
	bool                                          bIsButtonEnabled;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_SetAsButtonState) == 0x000001, "Wrong alignment on HWButtonWidget_SetAsButtonState");
static_assert(sizeof(HWButtonWidget_SetAsButtonState) == 0x000001, "Wrong size on HWButtonWidget_SetAsButtonState");
static_assert(offsetof(HWButtonWidget_SetAsButtonState, bIsButtonEnabled) == 0x000000, "Member 'HWButtonWidget_SetAsButtonState::bIsButtonEnabled' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.SetAsImageState
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_SetAsImageState final
{
public:
	struct FGameplayTag                           ImageState;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_SetAsImageState) == 0x000004, "Wrong alignment on HWButtonWidget_SetAsImageState");
static_assert(sizeof(HWButtonWidget_SetAsImageState) == 0x000008, "Wrong size on HWButtonWidget_SetAsImageState");
static_assert(offsetof(HWButtonWidget_SetAsImageState, ImageState) == 0x000000, "Member 'HWButtonWidget_SetAsImageState::ImageState' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.SetContentAlignment
// 0x0002 (0x0002 - 0x0000)
struct HWButtonWidget_SetContentAlignment final
{
public:
	EHorizontalAlignment                          Horizontal;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            Vertical;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_SetContentAlignment) == 0x000001, "Wrong alignment on HWButtonWidget_SetContentAlignment");
static_assert(sizeof(HWButtonWidget_SetContentAlignment) == 0x000002, "Wrong size on HWButtonWidget_SetContentAlignment");
static_assert(offsetof(HWButtonWidget_SetContentAlignment, Horizontal) == 0x000000, "Member 'HWButtonWidget_SetContentAlignment::Horizontal' has a wrong offset!");
static_assert(offsetof(HWButtonWidget_SetContentAlignment, Vertical) == 0x000001, "Member 'HWButtonWidget_SetContentAlignment::Vertical' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.UpdatedAsImageState
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_UpdatedAsImageState final
{
public:
	struct FGameplayTag                           ImageState;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_UpdatedAsImageState) == 0x000004, "Wrong alignment on HWButtonWidget_UpdatedAsImageState");
static_assert(sizeof(HWButtonWidget_UpdatedAsImageState) == 0x000008, "Wrong size on HWButtonWidget_UpdatedAsImageState");
static_assert(offsetof(HWButtonWidget_UpdatedAsImageState, ImageState) == 0x000000, "Member 'HWButtonWidget_UpdatedAsImageState::ImageState' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.UpdateVFX
// 0x0001 (0x0001 - 0x0000)
struct HWButtonWidget_UpdateVFX final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_UpdateVFX) == 0x000001, "Wrong alignment on HWButtonWidget_UpdateVFX");
static_assert(sizeof(HWButtonWidget_UpdateVFX) == 0x000001, "Wrong size on HWButtonWidget_UpdateVFX");
static_assert(offsetof(HWButtonWidget_UpdateVFX, bShouldShow) == 0x000000, "Member 'HWButtonWidget_UpdateVFX::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.GetCurrentImageState
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_GetCurrentImageState final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_GetCurrentImageState) == 0x000004, "Wrong alignment on HWButtonWidget_GetCurrentImageState");
static_assert(sizeof(HWButtonWidget_GetCurrentImageState) == 0x000008, "Wrong size on HWButtonWidget_GetCurrentImageState");
static_assert(offsetof(HWButtonWidget_GetCurrentImageState, ReturnValue) == 0x000000, "Member 'HWButtonWidget_GetCurrentImageState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.GetUMGButton
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_GetUMGButton final
{
public:
	class UHWButton*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_GetUMGButton) == 0x000008, "Wrong alignment on HWButtonWidget_GetUMGButton");
static_assert(sizeof(HWButtonWidget_GetUMGButton) == 0x000008, "Wrong size on HWButtonWidget_GetUMGButton");
static_assert(offsetof(HWButtonWidget_GetUMGButton, ReturnValue) == 0x000000, "Member 'HWButtonWidget_GetUMGButton::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.GetUMGImage
// 0x0008 (0x0008 - 0x0000)
struct HWButtonWidget_GetUMGImage final
{
public:
	class UHWImage*                               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_GetUMGImage) == 0x000008, "Wrong alignment on HWButtonWidget_GetUMGImage");
static_assert(sizeof(HWButtonWidget_GetUMGImage) == 0x000008, "Wrong size on HWButtonWidget_GetUMGImage");
static_assert(offsetof(HWButtonWidget_GetUMGImage, ReturnValue) == 0x000000, "Member 'HWButtonWidget_GetUMGImage::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.IsButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWButtonWidget_IsButtonEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_IsButtonEnabled) == 0x000001, "Wrong alignment on HWButtonWidget_IsButtonEnabled");
static_assert(sizeof(HWButtonWidget_IsButtonEnabled) == 0x000001, "Wrong size on HWButtonWidget_IsButtonEnabled");
static_assert(offsetof(HWButtonWidget_IsButtonEnabled, ReturnValue) == 0x000000, "Member 'HWButtonWidget_IsButtonEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWButtonWidget.IsDisplayingImageState
// 0x0001 (0x0001 - 0x0000)
struct HWButtonWidget_IsDisplayingImageState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButtonWidget_IsDisplayingImageState) == 0x000001, "Wrong alignment on HWButtonWidget_IsDisplayingImageState");
static_assert(sizeof(HWButtonWidget_IsDisplayingImageState) == 0x000001, "Wrong size on HWButtonWidget_IsDisplayingImageState");
static_assert(offsetof(HWButtonWidget_IsDisplayingImageState, ReturnValue) == 0x000000, "Member 'HWButtonWidget_IsDisplayingImageState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopContentButton.OnItemPriceUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopContentButton_OnItemPriceUpdated final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopContentButton_OnItemPriceUpdated) == 0x000008, "Wrong alignment on HWSeasonShopContentButton_OnItemPriceUpdated");
static_assert(sizeof(HWSeasonShopContentButton_OnItemPriceUpdated) == 0x000010, "Wrong size on HWSeasonShopContentButton_OnItemPriceUpdated");
static_assert(offsetof(HWSeasonShopContentButton_OnItemPriceUpdated, PriceItem) == 0x000000, "Member 'HWSeasonShopContentButton_OnItemPriceUpdated::PriceItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopContentButton_OnItemPriceUpdated, PriceGroupTag) == 0x000008, "Member 'HWSeasonShopContentButton_OnItemPriceUpdated::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopContentButton.PopulateContent
// 0x00B8 (0x00B8 - 0x0000)
struct HWSeasonShopContentButton_PopulateContent final
{
public:
	struct FHWSeasonShopItemWithCustomData        ShopItem;                                          // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsPreviewItem;                                    // 0x00A8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Page;                                              // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPremium;                                       // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSeasonShopContentButton_PopulateContent) == 0x000008, "Wrong alignment on HWSeasonShopContentButton_PopulateContent");
static_assert(sizeof(HWSeasonShopContentButton_PopulateContent) == 0x0000B8, "Wrong size on HWSeasonShopContentButton_PopulateContent");
static_assert(offsetof(HWSeasonShopContentButton_PopulateContent, ShopItem) == 0x000000, "Member 'HWSeasonShopContentButton_PopulateContent::ShopItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopContentButton_PopulateContent, bIsPreviewItem) == 0x0000A8, "Member 'HWSeasonShopContentButton_PopulateContent::bIsPreviewItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopContentButton_PopulateContent, Page) == 0x0000AC, "Member 'HWSeasonShopContentButton_PopulateContent::Page' has a wrong offset!");
static_assert(offsetof(HWSeasonShopContentButton_PopulateContent, bHasPremium) == 0x0000B0, "Member 'HWSeasonShopContentButton_PopulateContent::bHasPremium' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopContentButton.SetStoreItem
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopContentButton_SetStoreItem final
{
public:
	class URHStoreItem*                           InStoreItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InDisplayItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopContentButton_SetStoreItem) == 0x000008, "Wrong alignment on HWSeasonShopContentButton_SetStoreItem");
static_assert(sizeof(HWSeasonShopContentButton_SetStoreItem) == 0x000010, "Wrong size on HWSeasonShopContentButton_SetStoreItem");
static_assert(offsetof(HWSeasonShopContentButton_SetStoreItem, InStoreItem) == 0x000000, "Member 'HWSeasonShopContentButton_SetStoreItem::InStoreItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopContentButton_SetStoreItem, InDisplayItem) == 0x000008, "Member 'HWSeasonShopContentButton_SetStoreItem::InDisplayItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopHubWidget.GetSeasonItemFromId
// 0x0020 (0x0020 - 0x0000)
struct HWSeasonShopHubWidget_GetSeasonItemFromId final
{
public:
	struct FRH_LootId                             LootId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopHubWidget_GetSeasonItemFromId) == 0x000008, "Wrong alignment on HWSeasonShopHubWidget_GetSeasonItemFromId");
static_assert(sizeof(HWSeasonShopHubWidget_GetSeasonItemFromId) == 0x000020, "Wrong size on HWSeasonShopHubWidget_GetSeasonItemFromId");
static_assert(offsetof(HWSeasonShopHubWidget_GetSeasonItemFromId, LootId) == 0x000000, "Member 'HWSeasonShopHubWidget_GetSeasonItemFromId::LootId' has a wrong offset!");
static_assert(offsetof(HWSeasonShopHubWidget_GetSeasonItemFromId, ReturnValue) == 0x000018, "Member 'HWSeasonShopHubWidget_GetSeasonItemFromId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopHubWidget.PopulateSeasonButtons
// 0x0018 (0x0018 - 0x0000)
struct HWSeasonShopHubWidget_PopulateSeasonButtons final
{
public:
	class UPanelWidget*                           PanelWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URHStoreItem*>                   SeasonItems;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopHubWidget_PopulateSeasonButtons) == 0x000008, "Wrong alignment on HWSeasonShopHubWidget_PopulateSeasonButtons");
static_assert(sizeof(HWSeasonShopHubWidget_PopulateSeasonButtons) == 0x000018, "Wrong size on HWSeasonShopHubWidget_PopulateSeasonButtons");
static_assert(offsetof(HWSeasonShopHubWidget_PopulateSeasonButtons, PanelWidget) == 0x000000, "Member 'HWSeasonShopHubWidget_PopulateSeasonButtons::PanelWidget' has a wrong offset!");
static_assert(offsetof(HWSeasonShopHubWidget_PopulateSeasonButtons, SeasonItems) == 0x000008, "Member 'HWSeasonShopHubWidget_PopulateSeasonButtons::SeasonItems' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopHubWidget.PopulateSeasons
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopHubWidget_PopulateSeasons final
{
public:
	TArray<class URHStoreItem*>                   SeasonItems;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopHubWidget_PopulateSeasons) == 0x000008, "Wrong alignment on HWSeasonShopHubWidget_PopulateSeasons");
static_assert(sizeof(HWSeasonShopHubWidget_PopulateSeasons) == 0x000010, "Wrong size on HWSeasonShopHubWidget_PopulateSeasons");
static_assert(offsetof(HWSeasonShopHubWidget_PopulateSeasons, SeasonItems) == 0x000000, "Member 'HWSeasonShopHubWidget_PopulateSeasons::SeasonItems' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopItemDisplay.GetPriceForItem
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopItemDisplay_GetPriceForItem final
{
public:
	bool                                          bUseSeasonItem;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopItemDisplay_GetPriceForItem) == 0x000001, "Wrong alignment on HWSeasonShopItemDisplay_GetPriceForItem");
static_assert(sizeof(HWSeasonShopItemDisplay_GetPriceForItem) == 0x000001, "Wrong size on HWSeasonShopItemDisplay_GetPriceForItem");
static_assert(offsetof(HWSeasonShopItemDisplay_GetPriceForItem, bUseSeasonItem) == 0x000000, "Member 'HWSeasonShopItemDisplay_GetPriceForItem::bUseSeasonItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopItemDisplay.OnItemPriceUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopItemDisplay_OnItemPriceUpdated final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopItemDisplay_OnItemPriceUpdated) == 0x000008, "Wrong alignment on HWSeasonShopItemDisplay_OnItemPriceUpdated");
static_assert(sizeof(HWSeasonShopItemDisplay_OnItemPriceUpdated) == 0x000010, "Wrong size on HWSeasonShopItemDisplay_OnItemPriceUpdated");
static_assert(offsetof(HWSeasonShopItemDisplay_OnItemPriceUpdated, PriceItem) == 0x000000, "Member 'HWSeasonShopItemDisplay_OnItemPriceUpdated::PriceItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopItemDisplay_OnItemPriceUpdated, PriceGroupTag) == 0x000008, "Member 'HWSeasonShopItemDisplay_OnItemPriceUpdated::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopItemDisplay.PurchaseItem
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopItemDisplay_PurchaseItem final
{
public:
	bool                                          bUseSeasonItem;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopItemDisplay_PurchaseItem) == 0x000001, "Wrong alignment on HWSeasonShopItemDisplay_PurchaseItem");
static_assert(sizeof(HWSeasonShopItemDisplay_PurchaseItem) == 0x000001, "Wrong size on HWSeasonShopItemDisplay_PurchaseItem");
static_assert(offsetof(HWSeasonShopItemDisplay_PurchaseItem, bUseSeasonItem) == 0x000000, "Member 'HWSeasonShopItemDisplay_PurchaseItem::bUseSeasonItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopItemDisplay.SetStoreItem
// 0x0018 (0x0018 - 0x0000)
struct HWSeasonShopItemDisplay_SetStoreItem final
{
public:
	class URHStoreItem*                           InStoreItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryItem*                       InDisplayItem;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           InSeasonItem;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopItemDisplay_SetStoreItem) == 0x000008, "Wrong alignment on HWSeasonShopItemDisplay_SetStoreItem");
static_assert(sizeof(HWSeasonShopItemDisplay_SetStoreItem) == 0x000018, "Wrong size on HWSeasonShopItemDisplay_SetStoreItem");
static_assert(offsetof(HWSeasonShopItemDisplay_SetStoreItem, InStoreItem) == 0x000000, "Member 'HWSeasonShopItemDisplay_SetStoreItem::InStoreItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopItemDisplay_SetStoreItem, InDisplayItem) == 0x000008, "Member 'HWSeasonShopItemDisplay_SetStoreItem::InDisplayItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopItemDisplay_SetStoreItem, InSeasonItem) == 0x000010, "Member 'HWSeasonShopItemDisplay_SetStoreItem::InSeasonItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetCurrentPoints
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopMarketWidget_GetCurrentPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetCurrentPoints) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_GetCurrentPoints");
static_assert(sizeof(HWSeasonShopMarketWidget_GetCurrentPoints) == 0x000004, "Wrong size on HWSeasonShopMarketWidget_GetCurrentPoints");
static_assert(offsetof(HWSeasonShopMarketWidget_GetCurrentPoints, ReturnValue) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetCurrentPoints::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetDefaultPageIndex
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopMarketWidget_GetDefaultPageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetDefaultPageIndex) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_GetDefaultPageIndex");
static_assert(sizeof(HWSeasonShopMarketWidget_GetDefaultPageIndex) == 0x000004, "Wrong size on HWSeasonShopMarketWidget_GetDefaultPageIndex");
static_assert(offsetof(HWSeasonShopMarketWidget_GetDefaultPageIndex, ReturnValue) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetDefaultPageIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetItemsForSeasonPage
// 0x0020 (0x0020 - 0x0000)
struct HWSeasonShopMarketWidget_GetItemsForSeasonPage final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWSeasonShopItemWithCustomData> SeasonItems;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         OwnedCount;                                        // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSeasonShopMarketWidget_GetItemsForSeasonPage) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_GetItemsForSeasonPage");
static_assert(sizeof(HWSeasonShopMarketWidget_GetItemsForSeasonPage) == 0x000020, "Wrong size on HWSeasonShopMarketWidget_GetItemsForSeasonPage");
static_assert(offsetof(HWSeasonShopMarketWidget_GetItemsForSeasonPage, PageIndex) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetItemsForSeasonPage::PageIndex' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetItemsForSeasonPage, SeasonItems) == 0x000008, "Member 'HWSeasonShopMarketWidget_GetItemsForSeasonPage::SeasonItems' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetItemsForSeasonPage, OwnedCount) == 0x000018, "Member 'HWSeasonShopMarketWidget_GetItemsForSeasonPage::OwnedCount' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetItemsForSeasonPage, ReturnValue) == 0x00001C, "Member 'HWSeasonShopMarketWidget_GetItemsForSeasonPage::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetPointsRequiredForPage
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_GetPointsRequiredForPage final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetPointsRequiredForPage) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_GetPointsRequiredForPage");
static_assert(sizeof(HWSeasonShopMarketWidget_GetPointsRequiredForPage) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_GetPointsRequiredForPage");
static_assert(offsetof(HWSeasonShopMarketWidget_GetPointsRequiredForPage, PageIndex) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetPointsRequiredForPage::PageIndex' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetPointsRequiredForPage, ReturnValue) == 0x000004, "Member 'HWSeasonShopMarketWidget_GetPointsRequiredForPage::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetSeasonItemFromId
// 0x0020 (0x0020 - 0x0000)
struct HWSeasonShopMarketWidget_GetSeasonItemFromId final
{
public:
	struct FRH_LootId                             LootId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetSeasonItemFromId) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_GetSeasonItemFromId");
static_assert(sizeof(HWSeasonShopMarketWidget_GetSeasonItemFromId) == 0x000020, "Wrong size on HWSeasonShopMarketWidget_GetSeasonItemFromId");
static_assert(offsetof(HWSeasonShopMarketWidget_GetSeasonItemFromId, LootId) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetSeasonItemFromId::LootId' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetSeasonItemFromId, ReturnValue) == 0x000018, "Member 'HWSeasonShopMarketWidget_GetSeasonItemFromId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetSelectedSeason
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_GetSelectedSeason final
{
public:
	const class UHWSeasonItem*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetSelectedSeason) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_GetSelectedSeason");
static_assert(sizeof(HWSeasonShopMarketWidget_GetSelectedSeason) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_GetSelectedSeason");
static_assert(offsetof(HWSeasonShopMarketWidget_GetSelectedSeason, ReturnValue) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetSelectedSeason::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetStoreItemForItem
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopMarketWidget_GetStoreItemForItem final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetStoreItemForItem) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_GetStoreItemForItem");
static_assert(sizeof(HWSeasonShopMarketWidget_GetStoreItemForItem) == 0x000010, "Wrong size on HWSeasonShopMarketWidget_GetStoreItemForItem");
static_assert(offsetof(HWSeasonShopMarketWidget_GetStoreItemForItem, Item) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetStoreItemForItem::Item' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_GetStoreItemForItem, ReturnValue) == 0x000008, "Member 'HWSeasonShopMarketWidget_GetStoreItemForItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetTotalPagesCount
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopMarketWidget_GetTotalPagesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetTotalPagesCount) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_GetTotalPagesCount");
static_assert(sizeof(HWSeasonShopMarketWidget_GetTotalPagesCount) == 0x000004, "Wrong size on HWSeasonShopMarketWidget_GetTotalPagesCount");
static_assert(offsetof(HWSeasonShopMarketWidget_GetTotalPagesCount, ReturnValue) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetTotalPagesCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.GetUnlockedPagesCount
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopMarketWidget_GetUnlockedPagesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_GetUnlockedPagesCount) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_GetUnlockedPagesCount");
static_assert(sizeof(HWSeasonShopMarketWidget_GetUnlockedPagesCount) == 0x000004, "Wrong size on HWSeasonShopMarketWidget_GetUnlockedPagesCount");
static_assert(offsetof(HWSeasonShopMarketWidget_GetUnlockedPagesCount, ReturnValue) == 0x000000, "Member 'HWSeasonShopMarketWidget_GetUnlockedPagesCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.IsPageCompleted
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_IsPageCompleted final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSeasonShopMarketWidget_IsPageCompleted) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_IsPageCompleted");
static_assert(sizeof(HWSeasonShopMarketWidget_IsPageCompleted) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_IsPageCompleted");
static_assert(offsetof(HWSeasonShopMarketWidget_IsPageCompleted, PageIndex) == 0x000000, "Member 'HWSeasonShopMarketWidget_IsPageCompleted::PageIndex' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_IsPageCompleted, ReturnValue) == 0x000004, "Member 'HWSeasonShopMarketWidget_IsPageCompleted::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.IsSeasonPageUnlocked
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_IsSeasonPageUnlocked final
{
public:
	int32                                         PageIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSeasonShopMarketWidget_IsSeasonPageUnlocked) == 0x000004, "Wrong alignment on HWSeasonShopMarketWidget_IsSeasonPageUnlocked");
static_assert(sizeof(HWSeasonShopMarketWidget_IsSeasonPageUnlocked) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_IsSeasonPageUnlocked");
static_assert(offsetof(HWSeasonShopMarketWidget_IsSeasonPageUnlocked, PageIndex) == 0x000000, "Member 'HWSeasonShopMarketWidget_IsSeasonPageUnlocked::PageIndex' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_IsSeasonPageUnlocked, ReturnValue) == 0x000004, "Member 'HWSeasonShopMarketWidget_IsSeasonPageUnlocked::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.NavigateToNextPage
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopMarketWidget_NavigateToNextPage final
{
public:
	bool                                          NextPage;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_NavigateToNextPage) == 0x000001, "Wrong alignment on HWSeasonShopMarketWidget_NavigateToNextPage");
static_assert(sizeof(HWSeasonShopMarketWidget_NavigateToNextPage) == 0x000001, "Wrong size on HWSeasonShopMarketWidget_NavigateToNextPage");
static_assert(offsetof(HWSeasonShopMarketWidget_NavigateToNextPage, NextPage) == 0x000000, "Member 'HWSeasonShopMarketWidget_NavigateToNextPage::NextPage' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.NavigateToNextSeason
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopMarketWidget_NavigateToNextSeason final
{
public:
	bool                                          NextSeason;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_NavigateToNextSeason) == 0x000001, "Wrong alignment on HWSeasonShopMarketWidget_NavigateToNextSeason");
static_assert(sizeof(HWSeasonShopMarketWidget_NavigateToNextSeason) == 0x000001, "Wrong size on HWSeasonShopMarketWidget_NavigateToNextSeason");
static_assert(offsetof(HWSeasonShopMarketWidget_NavigateToNextSeason, NextSeason) == 0x000000, "Member 'HWSeasonShopMarketWidget_NavigateToNextSeason::NextSeason' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.OnSeasonPriceUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopMarketWidget_OnSeasonPriceUpdated final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_OnSeasonPriceUpdated) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_OnSeasonPriceUpdated");
static_assert(sizeof(HWSeasonShopMarketWidget_OnSeasonPriceUpdated) == 0x000010, "Wrong size on HWSeasonShopMarketWidget_OnSeasonPriceUpdated");
static_assert(offsetof(HWSeasonShopMarketWidget_OnSeasonPriceUpdated, PriceItem) == 0x000000, "Member 'HWSeasonShopMarketWidget_OnSeasonPriceUpdated::PriceItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_OnSeasonPriceUpdated, PriceGroupTag) == 0x000008, "Member 'HWSeasonShopMarketWidget_OnSeasonPriceUpdated::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.OnSeasonSet
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopMarketWidget_OnSeasonSet final
{
public:
	const class URHStoreItem*                     StoreItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWSeasonItem*                    SeasonItem;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_OnSeasonSet) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_OnSeasonSet");
static_assert(sizeof(HWSeasonShopMarketWidget_OnSeasonSet) == 0x000010, "Wrong size on HWSeasonShopMarketWidget_OnSeasonSet");
static_assert(offsetof(HWSeasonShopMarketWidget_OnSeasonSet, StoreItem) == 0x000000, "Member 'HWSeasonShopMarketWidget_OnSeasonSet::StoreItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_OnSeasonSet, SeasonItem) == 0x000008, "Member 'HWSeasonShopMarketWidget_OnSeasonSet::SeasonItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.PopulateGridPanel
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopMarketWidget_PopulateGridPanel final
{
public:
	class UHWSortableGridPanel*                   GridPanel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreviewPanel;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPremiumOwned;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSeasonShopMarketWidget_PopulateGridPanel) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_PopulateGridPanel");
static_assert(sizeof(HWSeasonShopMarketWidget_PopulateGridPanel) == 0x000010, "Wrong size on HWSeasonShopMarketWidget_PopulateGridPanel");
static_assert(offsetof(HWSeasonShopMarketWidget_PopulateGridPanel, GridPanel) == 0x000000, "Member 'HWSeasonShopMarketWidget_PopulateGridPanel::GridPanel' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_PopulateGridPanel, bIsPreviewPanel) == 0x000008, "Member 'HWSeasonShopMarketWidget_PopulateGridPanel::bIsPreviewPanel' has a wrong offset!");
static_assert(offsetof(HWSeasonShopMarketWidget_PopulateGridPanel, bIsPremiumOwned) == 0x000009, "Member 'HWSeasonShopMarketWidget_PopulateGridPanel::bIsPremiumOwned' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.PopulateShopPageButtons
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_PopulateShopPageButtons final
{
public:
	class UHWVerticalBox*                         VerticalBox;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_PopulateShopPageButtons) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_PopulateShopPageButtons");
static_assert(sizeof(HWSeasonShopMarketWidget_PopulateShopPageButtons) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_PopulateShopPageButtons");
static_assert(offsetof(HWSeasonShopMarketWidget_PopulateShopPageButtons, VerticalBox) == 0x000000, "Member 'HWSeasonShopMarketWidget_PopulateShopPageButtons::VerticalBox' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopMarketWidget.SetSelectedSeason
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopMarketWidget_SetSelectedSeason final
{
public:
	class URHStoreItem*                           InSeason;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopMarketWidget_SetSelectedSeason) == 0x000008, "Wrong alignment on HWSeasonShopMarketWidget_SetSelectedSeason");
static_assert(sizeof(HWSeasonShopMarketWidget_SetSelectedSeason) == 0x000008, "Wrong size on HWSeasonShopMarketWidget_SetSelectedSeason");
static_assert(offsetof(HWSeasonShopMarketWidget_SetSelectedSeason, InSeason) == 0x000000, "Member 'HWSeasonShopMarketWidget_SetSelectedSeason::InSeason' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.HandleWanderingMarketMultiplierActive
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive final
{
public:
	bool                                          bIsMultiplierActive;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive) == 0x000001, "Wrong alignment on HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive) == 0x000001, "Wrong size on HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive, bIsMultiplierActive) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_HandleWanderingMarketMultiplierActive::bIsMultiplierActive' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetCurrencyCap
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetCurrencyCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetCurrencyCap) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetCurrencyCap");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetCurrencyCap) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetCurrencyCap");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetCurrencyCap, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetCurrencyCap::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetCurrentCurrencyCount
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetCurrentCurrencyCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetCurrentLevelCap
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetCurrentLevelCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetCurrentLevelCap) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetCurrentLevelCap");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetCurrentLevelCap) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetCurrentLevelCap");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetCurrentLevelCap, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetCurrentLevelCap::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetCurrentLevelXp
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetCurrentLevelXp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetCurrentLevelXp) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetCurrentLevelXp");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetCurrentLevelXp) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetCurrentLevelXp");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetCurrentLevelXp, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetCurrentLevelXp::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetRewardTokenCount
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetRewardTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetRewardTokenCount) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetRewardTokenCount");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetRewardTokenCount) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetRewardTokenCount");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetRewardTokenCount, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetRewardTokenCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.GetXpCount
// 0x0004 (0x0004 - 0x0000)
struct HWSeasonShopQuestProgressWidget_GetXpCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_GetXpCount) == 0x000004, "Wrong alignment on HWSeasonShopQuestProgressWidget_GetXpCount");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_GetXpCount) == 0x000004, "Wrong size on HWSeasonShopQuestProgressWidget_GetXpCount");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_GetXpCount, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_GetXpCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopQuestProgressWidget.IsPreLevelXpCap
// 0x0001 (0x0001 - 0x0000)
struct HWSeasonShopQuestProgressWidget_IsPreLevelXpCap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopQuestProgressWidget_IsPreLevelXpCap) == 0x000001, "Wrong alignment on HWSeasonShopQuestProgressWidget_IsPreLevelXpCap");
static_assert(sizeof(HWSeasonShopQuestProgressWidget_IsPreLevelXpCap) == 0x000001, "Wrong size on HWSeasonShopQuestProgressWidget_IsPreLevelXpCap");
static_assert(offsetof(HWSeasonShopQuestProgressWidget_IsPreLevelXpCap, ReturnValue) == 0x000000, "Member 'HWSeasonShopQuestProgressWidget_IsPreLevelXpCap::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopSeasonButton.GetPriceForSeason
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopSeasonButton_GetPriceForSeason final
{
public:
	class URHStoreItem*                           SeasonItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopSeasonButton_GetPriceForSeason) == 0x000008, "Wrong alignment on HWSeasonShopSeasonButton_GetPriceForSeason");
static_assert(sizeof(HWSeasonShopSeasonButton_GetPriceForSeason) == 0x000008, "Wrong size on HWSeasonShopSeasonButton_GetPriceForSeason");
static_assert(offsetof(HWSeasonShopSeasonButton_GetPriceForSeason, SeasonItem) == 0x000000, "Member 'HWSeasonShopSeasonButton_GetPriceForSeason::SeasonItem' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopSeasonButton.OnItemPriceUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWSeasonShopSeasonButton_OnItemPriceUpdated final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopSeasonButton_OnItemPriceUpdated) == 0x000008, "Wrong alignment on HWSeasonShopSeasonButton_OnItemPriceUpdated");
static_assert(sizeof(HWSeasonShopSeasonButton_OnItemPriceUpdated) == 0x000010, "Wrong size on HWSeasonShopSeasonButton_OnItemPriceUpdated");
static_assert(offsetof(HWSeasonShopSeasonButton_OnItemPriceUpdated, PriceItem) == 0x000000, "Member 'HWSeasonShopSeasonButton_OnItemPriceUpdated::PriceItem' has a wrong offset!");
static_assert(offsetof(HWSeasonShopSeasonButton_OnItemPriceUpdated, PriceGroupTag) == 0x000008, "Member 'HWSeasonShopSeasonButton_OnItemPriceUpdated::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWSeasonShopSeasonButton.PopulateSeason
// 0x0008 (0x0008 - 0x0000)
struct HWSeasonShopSeasonButton_PopulateSeason final
{
public:
	class URHStoreItem*                           PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSeasonShopSeasonButton_PopulateSeason) == 0x000008, "Wrong alignment on HWSeasonShopSeasonButton_PopulateSeason");
static_assert(sizeof(HWSeasonShopSeasonButton_PopulateSeason) == 0x000008, "Wrong size on HWSeasonShopSeasonButton_PopulateSeason");
static_assert(offsetof(HWSeasonShopSeasonButton_PopulateSeason, PriceItem) == 0x000000, "Member 'HWSeasonShopSeasonButton_PopulateSeason::PriceItem' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetItemStoreLayout
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_GetItemStoreLayout final
{
public:
	EHWItemStoreLayoutType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetItemStoreLayout) == 0x000001, "Wrong alignment on HWGameHUDWidget_GetItemStoreLayout");
static_assert(sizeof(HWGameHUDWidget_GetItemStoreLayout) == 0x000001, "Wrong size on HWGameHUDWidget_GetItemStoreLayout");
static_assert(offsetof(HWGameHUDWidget_GetItemStoreLayout, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetItemStoreLayout::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HandleItemStoreLayoutChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_HandleItemStoreLayoutChanged final
{
public:
	EHWItemStoreLayoutType                        ItemStoreLayoutType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_HandleItemStoreLayoutChanged) == 0x000001, "Wrong alignment on HWGameHUDWidget_HandleItemStoreLayoutChanged");
static_assert(sizeof(HWGameHUDWidget_HandleItemStoreLayoutChanged) == 0x000001, "Wrong size on HWGameHUDWidget_HandleItemStoreLayoutChanged");
static_assert(offsetof(HWGameHUDWidget_HandleItemStoreLayoutChanged, ItemStoreLayoutType) == 0x000000, "Member 'HWGameHUDWidget_HandleItemStoreLayoutChanged::ItemStoreLayoutType' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HandleNetworkLagStateChanged
// 0x0018 (0x0018 - 0x0000)
struct HWGameHUDWidget_HandleNetworkLagStateChanged final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkLagState                              LagState;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameHUDWidget_HandleNetworkLagStateChanged) == 0x000008, "Wrong alignment on HWGameHUDWidget_HandleNetworkLagStateChanged");
static_assert(sizeof(HWGameHUDWidget_HandleNetworkLagStateChanged) == 0x000018, "Wrong size on HWGameHUDWidget_HandleNetworkLagStateChanged");
static_assert(offsetof(HWGameHUDWidget_HandleNetworkLagStateChanged, World) == 0x000000, "Member 'HWGameHUDWidget_HandleNetworkLagStateChanged::World' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleNetworkLagStateChanged, NetDriver) == 0x000008, "Member 'HWGameHUDWidget_HandleNetworkLagStateChanged::NetDriver' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleNetworkLagStateChanged, LagState) == 0x000010, "Member 'HWGameHUDWidget_HandleNetworkLagStateChanged::LagState' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HandleTagUpdated_IsInFountain
// 0x000C (0x000C - 0x0000)
struct HWGameHUDWidget_HandleTagUpdated_IsInFountain final
{
public:
	struct FGameplayTag                           CallbackTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_HandleTagUpdated_IsInFountain) == 0x000004, "Wrong alignment on HWGameHUDWidget_HandleTagUpdated_IsInFountain");
static_assert(sizeof(HWGameHUDWidget_HandleTagUpdated_IsInFountain) == 0x00000C, "Wrong size on HWGameHUDWidget_HandleTagUpdated_IsInFountain");
static_assert(offsetof(HWGameHUDWidget_HandleTagUpdated_IsInFountain, CallbackTag) == 0x000000, "Member 'HWGameHUDWidget_HandleTagUpdated_IsInFountain::CallbackTag' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleTagUpdated_IsInFountain, NewCount) == 0x000008, "Member 'HWGameHUDWidget_HandleTagUpdated_IsInFountain::NewCount' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HandleTagUpdated_IsTweeningDownLane
// 0x000C (0x000C - 0x0000)
struct HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane final
{
public:
	struct FGameplayTag                           CallbackTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane) == 0x000004, "Wrong alignment on HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane");
static_assert(sizeof(HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane) == 0x00000C, "Wrong size on HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane");
static_assert(offsetof(HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane, CallbackTag) == 0x000000, "Member 'HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane::CallbackTag' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane, NewCount) == 0x000008, "Member 'HWGameHUDWidget_HandleTagUpdated_IsTweeningDownLane::NewCount' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HandleViewStateChanged
// 0x0014 (0x0014 - 0x0000)
struct HWGameHUDWidget_HandleViewStateChanged final
{
public:
	struct FGameplayTag                           CurrentRoute;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PreviousRoute;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewManagerLayer                             Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameHUDWidget_HandleViewStateChanged) == 0x000004, "Wrong alignment on HWGameHUDWidget_HandleViewStateChanged");
static_assert(sizeof(HWGameHUDWidget_HandleViewStateChanged) == 0x000014, "Wrong size on HWGameHUDWidget_HandleViewStateChanged");
static_assert(offsetof(HWGameHUDWidget_HandleViewStateChanged, CurrentRoute) == 0x000000, "Member 'HWGameHUDWidget_HandleViewStateChanged::CurrentRoute' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleViewStateChanged, PreviousRoute) == 0x000008, "Member 'HWGameHUDWidget_HandleViewStateChanged::PreviousRoute' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_HandleViewStateChanged, Layer) == 0x000010, "Member 'HWGameHUDWidget_HandleViewStateChanged::Layer' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.OnNetworkLagStateUpdated
// 0x0002 (0x0002 - 0x0000)
struct HWGameHUDWidget_OnNetworkLagStateUpdated final
{
public:
	ENetworkPingState                             PingState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkLagState                              LagState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_OnNetworkLagStateUpdated) == 0x000001, "Wrong alignment on HWGameHUDWidget_OnNetworkLagStateUpdated");
static_assert(sizeof(HWGameHUDWidget_OnNetworkLagStateUpdated) == 0x000002, "Wrong size on HWGameHUDWidget_OnNetworkLagStateUpdated");
static_assert(offsetof(HWGameHUDWidget_OnNetworkLagStateUpdated, PingState) == 0x000000, "Member 'HWGameHUDWidget_OnNetworkLagStateUpdated::PingState' has a wrong offset!");
static_assert(offsetof(HWGameHUDWidget_OnNetworkLagStateUpdated, LagState) == 0x000001, "Member 'HWGameHUDWidget_OnNetworkLagStateUpdated::LagState' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.OnTargeterReticleVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_OnTargeterReticleVisibilityChanged final
{
public:
	bool                                          bIsTargeterReticleVisible;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_OnTargeterReticleVisibilityChanged) == 0x000001, "Wrong alignment on HWGameHUDWidget_OnTargeterReticleVisibilityChanged");
static_assert(sizeof(HWGameHUDWidget_OnTargeterReticleVisibilityChanged) == 0x000001, "Wrong size on HWGameHUDWidget_OnTargeterReticleVisibilityChanged");
static_assert(offsetof(HWGameHUDWidget_OnTargeterReticleVisibilityChanged, bIsTargeterReticleVisible) == 0x000000, "Member 'HWGameHUDWidget_OnTargeterReticleVisibilityChanged::bIsTargeterReticleVisible' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.SetHelpTipVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_SetHelpTipVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_SetHelpTipVisibility) == 0x000001, "Wrong alignment on HWGameHUDWidget_SetHelpTipVisibility");
static_assert(sizeof(HWGameHUDWidget_SetHelpTipVisibility) == 0x000001, "Wrong size on HWGameHUDWidget_SetHelpTipVisibility");
static_assert(offsetof(HWGameHUDWidget_SetHelpTipVisibility, bIsVisible) == 0x000000, "Member 'HWGameHUDWidget_SetHelpTipVisibility::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.SetReticleShape
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_SetReticleShape final
{
public:
	class UObject*                                NewReticleShape;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_SetReticleShape) == 0x000008, "Wrong alignment on HWGameHUDWidget_SetReticleShape");
static_assert(sizeof(HWGameHUDWidget_SetReticleShape) == 0x000008, "Wrong size on HWGameHUDWidget_SetReticleShape");
static_assert(offsetof(HWGameHUDWidget_SetReticleShape, NewReticleShape) == 0x000000, "Member 'HWGameHUDWidget_SetReticleShape::NewReticleShape' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.SetToPlayerScreenGeometry
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUDWidget_SetToPlayerScreenGeometry final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_SetToPlayerScreenGeometry) == 0x000008, "Wrong alignment on HWGameHUDWidget_SetToPlayerScreenGeometry");
static_assert(sizeof(HWGameHUDWidget_SetToPlayerScreenGeometry) == 0x000010, "Wrong size on HWGameHUDWidget_SetToPlayerScreenGeometry");
static_assert(offsetof(HWGameHUDWidget_SetToPlayerScreenGeometry, InSize) == 0x000000, "Member 'HWGameHUDWidget_SetToPlayerScreenGeometry::InSize' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.UpdateReticlePosition
// 0x0010 (0x0010 - 0x0000)
struct HWGameHUDWidget_UpdateReticlePosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_UpdateReticlePosition) == 0x000008, "Wrong alignment on HWGameHUDWidget_UpdateReticlePosition");
static_assert(sizeof(HWGameHUDWidget_UpdateReticlePosition) == 0x000010, "Wrong size on HWGameHUDWidget_UpdateReticlePosition");
static_assert(offsetof(HWGameHUDWidget_UpdateReticlePosition, NewPosition) == 0x000000, "Member 'HWGameHUDWidget_UpdateReticlePosition::NewPosition' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.UpdateReticleTarget
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_UpdateReticleTarget final
{
public:
	bool                                          bIsTargeting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_UpdateReticleTarget) == 0x000001, "Wrong alignment on HWGameHUDWidget_UpdateReticleTarget");
static_assert(sizeof(HWGameHUDWidget_UpdateReticleTarget) == 0x000001, "Wrong size on HWGameHUDWidget_UpdateReticleTarget");
static_assert(offsetof(HWGameHUDWidget_UpdateReticleTarget, bIsTargeting) == 0x000000, "Member 'HWGameHUDWidget_UpdateReticleTarget::bIsTargeting' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.UpdateReticleVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_UpdateReticleVisibility final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_UpdateReticleVisibility) == 0x000001, "Wrong alignment on HWGameHUDWidget_UpdateReticleVisibility");
static_assert(sizeof(HWGameHUDWidget_UpdateReticleVisibility) == 0x000001, "Wrong size on HWGameHUDWidget_UpdateReticleVisibility");
static_assert(offsetof(HWGameHUDWidget_UpdateReticleVisibility, bVisible) == 0x000000, "Member 'HWGameHUDWidget_UpdateReticleVisibility::bVisible' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetAutoBuyBuildSelectorWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetAutoBuyBuildSelectorWidget final
{
public:
	class UHWAutoBuyBuildSelector*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetAutoBuyBuildSelectorWidget) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetAutoBuyBuildSelectorWidget");
static_assert(sizeof(HWGameHUDWidget_GetAutoBuyBuildSelectorWidget) == 0x000008, "Wrong size on HWGameHUDWidget_GetAutoBuyBuildSelectorWidget");
static_assert(offsetof(HWGameHUDWidget_GetAutoBuyBuildSelectorWidget, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetAutoBuyBuildSelectorWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetCombatLogWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetCombatLogWidget final
{
public:
	class UHWCombatLogWidget*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetCombatLogWidget) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetCombatLogWidget");
static_assert(sizeof(HWGameHUDWidget_GetCombatLogWidget) == 0x000008, "Wrong size on HWGameHUDWidget_GetCombatLogWidget");
static_assert(offsetof(HWGameHUDWidget_GetCombatLogWidget, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetCombatLogWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetFloatingTextManager
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetFloatingTextManager final
{
public:
	class UHWFloatingTextDisplayManager*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetFloatingTextManager) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetFloatingTextManager");
static_assert(sizeof(HWGameHUDWidget_GetFloatingTextManager) == 0x000008, "Wrong size on HWGameHUDWidget_GetFloatingTextManager");
static_assert(offsetof(HWGameHUDWidget_GetFloatingTextManager, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetFloatingTextManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetGodHelpTipWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetGodHelpTipWidget final
{
public:
	class UHWHelpTipWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetGodHelpTipWidget) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetGodHelpTipWidget");
static_assert(sizeof(HWGameHUDWidget_GetGodHelpTipWidget) == 0x000008, "Wrong size on HWGameHUDWidget_GetGodHelpTipWidget");
static_assert(offsetof(HWGameHUDWidget_GetGodHelpTipWidget, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetGodHelpTipWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetHelpTipWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetHelpTipWidget final
{
public:
	class UHWHelpTipWidget*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetHelpTipWidget) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetHelpTipWidget");
static_assert(sizeof(HWGameHUDWidget_GetHelpTipWidget) == 0x000008, "Wrong size on HWGameHUDWidget_GetHelpTipWidget");
static_assert(offsetof(HWGameHUDWidget_GetHelpTipWidget, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetHelpTipWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.GetPrototypeHUD
// 0x0008 (0x0008 - 0x0000)
struct HWGameHUDWidget_GetPrototypeHUD final
{
public:
	class UHWWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_GetPrototypeHUD) == 0x000008, "Wrong alignment on HWGameHUDWidget_GetPrototypeHUD");
static_assert(sizeof(HWGameHUDWidget_GetPrototypeHUD) == 0x000008, "Wrong size on HWGameHUDWidget_GetPrototypeHUD");
static_assert(offsetof(HWGameHUDWidget_GetPrototypeHUD, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_GetPrototypeHUD::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameHUDWidget.HasValidJoinedSession
// 0x0001 (0x0001 - 0x0000)
struct HWGameHUDWidget_HasValidJoinedSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameHUDWidget_HasValidJoinedSession) == 0x000001, "Wrong alignment on HWGameHUDWidget_HasValidJoinedSession");
static_assert(sizeof(HWGameHUDWidget_HasValidJoinedSession) == 0x000001, "Wrong size on HWGameHUDWidget_HasValidJoinedSession");
static_assert(offsetof(HWGameHUDWidget_HasValidJoinedSession, ReturnValue) == 0x000000, "Member 'HWGameHUDWidget_HasValidJoinedSession::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.AddItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestContentDisplay_AddItem final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_AddItem) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_AddItem");
static_assert(sizeof(HWStoreChestContentDisplay_AddItem) == 0x000008, "Wrong size on HWStoreChestContentDisplay_AddItem");
static_assert(offsetof(HWStoreChestContentDisplay_AddItem, StoreItem) == 0x000000, "Member 'HWStoreChestContentDisplay_AddItem::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.DisplayChest
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestContentDisplay_DisplayChest final
{
public:
	class URHStoreItem*                           ChestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_DisplayChest) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_DisplayChest");
static_assert(sizeof(HWStoreChestContentDisplay_DisplayChest) == 0x000008, "Wrong size on HWStoreChestContentDisplay_DisplayChest");
static_assert(offsetof(HWStoreChestContentDisplay_DisplayChest, ChestItem) == 0x000000, "Member 'HWStoreChestContentDisplay_DisplayChest::ChestItem' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.GetPrice
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestContentDisplay_GetPrice final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_GetPrice) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_GetPrice");
static_assert(sizeof(HWStoreChestContentDisplay_GetPrice) == 0x000008, "Wrong size on HWStoreChestContentDisplay_GetPrice");
static_assert(offsetof(HWStoreChestContentDisplay_GetPrice, StoreItem) == 0x000000, "Member 'HWStoreChestContentDisplay_GetPrice::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.OnChestContentRequest
// 0x0018 (0x0018 - 0x0000)
struct HWStoreChestContentDisplay_OnChestContentRequest final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHStoreItem*>                   ContentItems;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_OnChestContentRequest) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_OnChestContentRequest");
static_assert(sizeof(HWStoreChestContentDisplay_OnChestContentRequest) == 0x000018, "Wrong size on HWStoreChestContentDisplay_OnChestContentRequest");
static_assert(offsetof(HWStoreChestContentDisplay_OnChestContentRequest, bSuccess) == 0x000000, "Member 'HWStoreChestContentDisplay_OnChestContentRequest::bSuccess' has a wrong offset!");
static_assert(offsetof(HWStoreChestContentDisplay_OnChestContentRequest, ContentItems) == 0x000008, "Member 'HWStoreChestContentDisplay_OnChestContentRequest::ContentItems' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.OnInventoryUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWStoreChestContentDisplay_OnInventoryUpdated final
{
public:
	TArray<int32>                                 UpdatedInventoryIds;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_OnInventoryUpdated) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_OnInventoryUpdated");
static_assert(sizeof(HWStoreChestContentDisplay_OnInventoryUpdated) == 0x000018, "Wrong size on HWStoreChestContentDisplay_OnInventoryUpdated");
static_assert(offsetof(HWStoreChestContentDisplay_OnInventoryUpdated, UpdatedInventoryIds) == 0x000000, "Member 'HWStoreChestContentDisplay_OnInventoryUpdated::UpdatedInventoryIds' has a wrong offset!");
static_assert(offsetof(HWStoreChestContentDisplay_OnInventoryUpdated, PlayerInfo) == 0x000010, "Member 'HWStoreChestContentDisplay_OnInventoryUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.OnPriceUpdate
// 0x0010 (0x0010 - 0x0000)
struct HWStoreChestContentDisplay_OnPriceUpdate final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_OnPriceUpdate) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_OnPriceUpdate");
static_assert(sizeof(HWStoreChestContentDisplay_OnPriceUpdate) == 0x000010, "Wrong size on HWStoreChestContentDisplay_OnPriceUpdate");
static_assert(offsetof(HWStoreChestContentDisplay_OnPriceUpdate, PriceItem) == 0x000000, "Member 'HWStoreChestContentDisplay_OnPriceUpdate::PriceItem' has a wrong offset!");
static_assert(offsetof(HWStoreChestContentDisplay_OnPriceUpdate, PriceGroupTag) == 0x000008, "Member 'HWStoreChestContentDisplay_OnPriceUpdate::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.OnUpdateOwnershipCount
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestContentDisplay_OnUpdateOwnershipCount final
{
public:
	int32                                         CurrentOwnedCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_OnUpdateOwnershipCount) == 0x000004, "Wrong alignment on HWStoreChestContentDisplay_OnUpdateOwnershipCount");
static_assert(sizeof(HWStoreChestContentDisplay_OnUpdateOwnershipCount) == 0x000008, "Wrong size on HWStoreChestContentDisplay_OnUpdateOwnershipCount");
static_assert(offsetof(HWStoreChestContentDisplay_OnUpdateOwnershipCount, CurrentOwnedCount) == 0x000000, "Member 'HWStoreChestContentDisplay_OnUpdateOwnershipCount::CurrentOwnedCount' has a wrong offset!");
static_assert(offsetof(HWStoreChestContentDisplay_OnUpdateOwnershipCount, TotalCount) == 0x000004, "Member 'HWStoreChestContentDisplay_OnUpdateOwnershipCount::TotalCount' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentDisplay.PurchaseChest
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestContentDisplay_PurchaseChest final
{
public:
	class URHStoreItem*                           ChestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentDisplay_PurchaseChest) == 0x000008, "Wrong alignment on HWStoreChestContentDisplay_PurchaseChest");
static_assert(sizeof(HWStoreChestContentDisplay_PurchaseChest) == 0x000008, "Wrong size on HWStoreChestContentDisplay_PurchaseChest");
static_assert(offsetof(HWStoreChestContentDisplay_PurchaseChest, ChestItem) == 0x000000, "Member 'HWStoreChestContentDisplay_PurchaseChest::ChestItem' has a wrong offset!");

// Function HemingwayUI.HWCharacterManaWidget.UpdateCurrentMana
// 0x000C (0x000C - 0x0000)
struct HWCharacterManaWidget_UpdateCurrentMana final
{
public:
	float                                         OldMana;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMana;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterManaWidget_UpdateCurrentMana) == 0x000004, "Wrong alignment on HWCharacterManaWidget_UpdateCurrentMana");
static_assert(sizeof(HWCharacterManaWidget_UpdateCurrentMana) == 0x00000C, "Wrong size on HWCharacterManaWidget_UpdateCurrentMana");
static_assert(offsetof(HWCharacterManaWidget_UpdateCurrentMana, OldMana) == 0x000000, "Member 'HWCharacterManaWidget_UpdateCurrentMana::OldMana' has a wrong offset!");
static_assert(offsetof(HWCharacterManaWidget_UpdateCurrentMana, NewMana) == 0x000004, "Member 'HWCharacterManaWidget_UpdateCurrentMana::NewMana' has a wrong offset!");
static_assert(offsetof(HWCharacterManaWidget_UpdateCurrentMana, bShouldAnimate) == 0x000008, "Member 'HWCharacterManaWidget_UpdateCurrentMana::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterManaWidget.UpdateMaxMana
// 0x000C (0x000C - 0x0000)
struct HWCharacterManaWidget_UpdateMaxMana final
{
public:
	float                                         OldMaxMana;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxMana;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterManaWidget_UpdateMaxMana) == 0x000004, "Wrong alignment on HWCharacterManaWidget_UpdateMaxMana");
static_assert(sizeof(HWCharacterManaWidget_UpdateMaxMana) == 0x00000C, "Wrong size on HWCharacterManaWidget_UpdateMaxMana");
static_assert(offsetof(HWCharacterManaWidget_UpdateMaxMana, OldMaxMana) == 0x000000, "Member 'HWCharacterManaWidget_UpdateMaxMana::OldMaxMana' has a wrong offset!");
static_assert(offsetof(HWCharacterManaWidget_UpdateMaxMana, NewMaxMana) == 0x000004, "Member 'HWCharacterManaWidget_UpdateMaxMana::NewMaxMana' has a wrong offset!");
static_assert(offsetof(HWCharacterManaWidget_UpdateMaxMana, bShouldAnimate) == 0x000008, "Member 'HWCharacterManaWidget_UpdateMaxMana::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterManaWidget.GetCurrentMana
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterManaWidget_GetCurrentMana final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterManaWidget_GetCurrentMana) == 0x000004, "Wrong alignment on HWCharacterManaWidget_GetCurrentMana");
static_assert(sizeof(HWCharacterManaWidget_GetCurrentMana) == 0x000004, "Wrong size on HWCharacterManaWidget_GetCurrentMana");
static_assert(offsetof(HWCharacterManaWidget_GetCurrentMana, ReturnValue) == 0x000000, "Member 'HWCharacterManaWidget_GetCurrentMana::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterManaWidget.GetMaxMana
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterManaWidget_GetMaxMana final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterManaWidget_GetMaxMana) == 0x000004, "Wrong alignment on HWCharacterManaWidget_GetMaxMana");
static_assert(sizeof(HWCharacterManaWidget_GetMaxMana) == 0x000004, "Wrong size on HWCharacterManaWidget_GetMaxMana");
static_assert(offsetof(HWCharacterManaWidget_GetMaxMana, ReturnValue) == 0x000000, "Member 'HWCharacterManaWidget_GetMaxMana::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.DisplayLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_DisplayLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_DisplayLoadingState) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_DisplayLoadingState");
static_assert(sizeof(HWStoreItemDisplayWidget_DisplayLoadingState) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_DisplayLoadingState");
static_assert(offsetof(HWStoreItemDisplayWidget_DisplayLoadingState, bIsLoading) == 0x000000, "Member 'HWStoreItemDisplayWidget_DisplayLoadingState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplayBundleContents
// 0x0010 (0x0010 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplayBundleContents final
{
public:
	TArray<class URHStoreItem*>                   BundleContents;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplayBundleContents) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplayBundleContents");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplayBundleContents) == 0x000010, "Wrong size on HWStoreItemDisplayWidget_OnDisplayBundleContents");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplayBundleContents, BundleContents) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplayBundleContents::BundleContents' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplayItem final
{
public:
	class UHWInventoryItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplayItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplayItem");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplayItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_OnDisplayItem");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplayItem, Item) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplayItem::Item' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplayItemAsCurrency
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplayItemAsCurrency final
{
public:
	class URHCurrency*                            CURRENCY;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplayItemAsCurrency) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplayItemAsCurrency");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplayItemAsCurrency) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_OnDisplayItemAsCurrency");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplayItemAsCurrency, CURRENCY) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplayItemAsCurrency::CURRENCY' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplayPrice) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplayPrice");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplayPrice) == 0x000010, "Wrong size on HWStoreItemDisplayWidget_OnDisplayPrice");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplayPrice, PriceItem) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplayPrice, PriceGroupTag) == 0x000008, "Member 'HWStoreItemDisplayWidget_OnDisplayPrice::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplaySelectedBundleContentItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem final
{
public:
	const class URHStoreItem*                     BundleContentItem;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem, BundleContentItem) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplaySelectedBundleContentItem::BundleContentItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplaySelectedVariantItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem final
{
public:
	const class URHStoreItem*                     Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem, Item) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplaySelectedVariantItem::Item' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnDisplaySkinVariants
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_OnDisplaySkinVariants final
{
public:
	const class UHWSkinItem*                      BaseSkin;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnDisplaySkinVariants) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_OnDisplaySkinVariants");
static_assert(sizeof(HWStoreItemDisplayWidget_OnDisplaySkinVariants) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_OnDisplaySkinVariants");
static_assert(offsetof(HWStoreItemDisplayWidget_OnDisplaySkinVariants, BaseSkin) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnDisplaySkinVariants::BaseSkin' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.OnSelectedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_OnSelectedStateChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_OnSelectedStateChanged) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_OnSelectedStateChanged");
static_assert(sizeof(HWStoreItemDisplayWidget_OnSelectedStateChanged) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_OnSelectedStateChanged");
static_assert(offsetof(HWStoreItemDisplayWidget_OnSelectedStateChanged, bIsSelected) == 0x000000, "Member 'HWStoreItemDisplayWidget_OnSelectedStateChanged::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.SelectBundleContentItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_SelectBundleContentItem final
{
public:
	class URHStoreItem*                           BundleContentItem;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_SelectBundleContentItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_SelectBundleContentItem");
static_assert(sizeof(HWStoreItemDisplayWidget_SelectBundleContentItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_SelectBundleContentItem");
static_assert(offsetof(HWStoreItemDisplayWidget_SelectBundleContentItem, BundleContentItem) == 0x000000, "Member 'HWStoreItemDisplayWidget_SelectBundleContentItem::BundleContentItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.SelectVariantItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_SelectVariantItem final
{
public:
	class URHStoreItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_SelectVariantItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_SelectVariantItem");
static_assert(sizeof(HWStoreItemDisplayWidget_SelectVariantItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_SelectVariantItem");
static_assert(offsetof(HWStoreItemDisplayWidget_SelectVariantItem, Item) == 0x000000, "Member 'HWStoreItemDisplayWidget_SelectVariantItem::Item' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.SetSelectedItem
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_SetSelectedItem final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_SetSelectedItem) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_SetSelectedItem");
static_assert(sizeof(HWStoreItemDisplayWidget_SetSelectedItem) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_SetSelectedItem");
static_assert(offsetof(HWStoreItemDisplayWidget_SetSelectedItem, bIsSelected) == 0x000000, "Member 'HWStoreItemDisplayWidget_SetSelectedItem::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.SetStoreItem
// 0x0030 (0x0030 - 0x0000)
struct HWStoreItemDisplayWidget_SetStoreItem final
{
public:
	class URHStoreItem*                           InStoreItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWInventoryItem>        InDisplayItem;                                     // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_SetStoreItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_SetStoreItem");
static_assert(sizeof(HWStoreItemDisplayWidget_SetStoreItem) == 0x000030, "Wrong size on HWStoreItemDisplayWidget_SetStoreItem");
static_assert(offsetof(HWStoreItemDisplayWidget_SetStoreItem, InStoreItem) == 0x000000, "Member 'HWStoreItemDisplayWidget_SetStoreItem::InStoreItem' has a wrong offset!");
static_assert(offsetof(HWStoreItemDisplayWidget_SetStoreItem, InDisplayItem) == 0x000008, "Member 'HWStoreItemDisplayWidget_SetStoreItem::InDisplayItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.UpdateShowBundle
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_UpdateShowBundle final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_UpdateShowBundle) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_UpdateShowBundle");
static_assert(sizeof(HWStoreItemDisplayWidget_UpdateShowBundle) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_UpdateShowBundle");
static_assert(offsetof(HWStoreItemDisplayWidget_UpdateShowBundle, bShow) == 0x000000, "Member 'HWStoreItemDisplayWidget_UpdateShowBundle::bShow' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetDisplayedItemId
// 0x0014 (0x0014 - 0x0000)
struct HWStoreItemDisplayWidget_GetDisplayedItemId final
{
public:
	struct FRH_ItemId                             ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetDisplayedItemId) == 0x000004, "Wrong alignment on HWStoreItemDisplayWidget_GetDisplayedItemId");
static_assert(sizeof(HWStoreItemDisplayWidget_GetDisplayedItemId) == 0x000014, "Wrong size on HWStoreItemDisplayWidget_GetDisplayedItemId");
static_assert(offsetof(HWStoreItemDisplayWidget_GetDisplayedItemId, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetDisplayedItemId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetDisplayedStoreItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_GetDisplayedStoreItem final
{
public:
	class URHStoreItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetDisplayedStoreItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetDisplayedStoreItem");
static_assert(sizeof(HWStoreItemDisplayWidget_GetDisplayedStoreItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_GetDisplayedStoreItem");
static_assert(offsetof(HWStoreItemDisplayWidget_GetDisplayedStoreItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetDisplayedStoreItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetDisplayItem
// 0x0028 (0x0028 - 0x0000)
struct HWStoreItemDisplayWidget_GetDisplayItem final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetDisplayItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetDisplayItem");
static_assert(sizeof(HWStoreItemDisplayWidget_GetDisplayItem) == 0x000028, "Wrong size on HWStoreItemDisplayWidget_GetDisplayItem");
static_assert(offsetof(HWStoreItemDisplayWidget_GetDisplayItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetDisplayItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetDisplayItemAsCurrency
// 0x0028 (0x0028 - 0x0000)
struct HWStoreItemDisplayWidget_GetDisplayItemAsCurrency final
{
public:
	TSoftObjectPtr<class URHCurrency>             ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetDisplayItemAsCurrency) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetDisplayItemAsCurrency");
static_assert(sizeof(HWStoreItemDisplayWidget_GetDisplayItemAsCurrency) == 0x000028, "Wrong size on HWStoreItemDisplayWidget_GetDisplayItemAsCurrency");
static_assert(offsetof(HWStoreItemDisplayWidget_GetDisplayItemAsCurrency, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetDisplayItemAsCurrency::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetSelectedBundleItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_GetSelectedBundleItem final
{
public:
	const class URHStoreItem*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetSelectedBundleItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetSelectedBundleItem");
static_assert(sizeof(HWStoreItemDisplayWidget_GetSelectedBundleItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_GetSelectedBundleItem");
static_assert(offsetof(HWStoreItemDisplayWidget_GetSelectedBundleItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetSelectedBundleItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetSelectedVariantItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_GetSelectedVariantItem final
{
public:
	const class URHStoreItem*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetSelectedVariantItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetSelectedVariantItem");
static_assert(sizeof(HWStoreItemDisplayWidget_GetSelectedVariantItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_GetSelectedVariantItem");
static_assert(offsetof(HWStoreItemDisplayWidget_GetSelectedVariantItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetSelectedVariantItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.GetStoreItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemDisplayWidget_GetStoreItem final
{
public:
	class URHStoreItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_GetStoreItem) == 0x000008, "Wrong alignment on HWStoreItemDisplayWidget_GetStoreItem");
static_assert(sizeof(HWStoreItemDisplayWidget_GetStoreItem) == 0x000008, "Wrong size on HWStoreItemDisplayWidget_GetStoreItem");
static_assert(offsetof(HWStoreItemDisplayWidget_GetStoreItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_GetStoreItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.IsBundle
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_IsBundle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_IsBundle) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_IsBundle");
static_assert(sizeof(HWStoreItemDisplayWidget_IsBundle) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_IsBundle");
static_assert(offsetof(HWStoreItemDisplayWidget_IsBundle, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_IsBundle::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.IsBundleOwned
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_IsBundleOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_IsBundleOwned) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_IsBundleOwned");
static_assert(sizeof(HWStoreItemDisplayWidget_IsBundleOwned) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_IsBundleOwned");
static_assert(offsetof(HWStoreItemDisplayWidget_IsBundleOwned, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_IsBundleOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.IsCurrencyDisplayItem
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_IsCurrencyDisplayItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_IsCurrencyDisplayItem) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_IsCurrencyDisplayItem");
static_assert(sizeof(HWStoreItemDisplayWidget_IsCurrencyDisplayItem) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_IsCurrencyDisplayItem");
static_assert(offsetof(HWStoreItemDisplayWidget_IsCurrencyDisplayItem, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_IsCurrencyDisplayItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.IsDisplayedItemOwned
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_IsDisplayedItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_IsDisplayedItemOwned) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_IsDisplayedItemOwned");
static_assert(sizeof(HWStoreItemDisplayWidget_IsDisplayedItemOwned) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_IsDisplayedItemOwned");
static_assert(offsetof(HWStoreItemDisplayWidget_IsDisplayedItemOwned, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_IsDisplayedItemOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreItemDisplayWidget.IsStoreItemOwned
// 0x0001 (0x0001 - 0x0000)
struct HWStoreItemDisplayWidget_IsStoreItemOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemDisplayWidget_IsStoreItemOwned) == 0x000001, "Wrong alignment on HWStoreItemDisplayWidget_IsStoreItemOwned");
static_assert(sizeof(HWStoreItemDisplayWidget_IsStoreItemOwned) == 0x000001, "Wrong size on HWStoreItemDisplayWidget_IsStoreItemOwned");
static_assert(offsetof(HWStoreItemDisplayWidget_IsStoreItemOwned, ReturnValue) == 0x000000, "Member 'HWStoreItemDisplayWidget_IsStoreItemOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerQuestDisplayWidget.OnQuestInfoFail
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerQuestDisplayWidget_OnQuestInfoFail final
{
public:
	bool                                          bShouldSelfRemove;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerQuestDisplayWidget_OnQuestInfoFail) == 0x000001, "Wrong alignment on HWPlayerQuestDisplayWidget_OnQuestInfoFail");
static_assert(sizeof(HWPlayerQuestDisplayWidget_OnQuestInfoFail) == 0x000001, "Wrong size on HWPlayerQuestDisplayWidget_OnQuestInfoFail");
static_assert(offsetof(HWPlayerQuestDisplayWidget_OnQuestInfoFail, bShouldSelfRemove) == 0x000000, "Member 'HWPlayerQuestDisplayWidget_OnQuestInfoFail::bShouldSelfRemove' has a wrong offset!");

// Function HemingwayUI.HWPlayerQuestDisplayWidget.OnUpdateQuestData
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerQuestDisplayWidget_OnUpdateQuestData final
{
public:
	const class UHWQuest*                         QuestData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerQuestDisplayWidget_OnUpdateQuestData) == 0x000008, "Wrong alignment on HWPlayerQuestDisplayWidget_OnUpdateQuestData");
static_assert(sizeof(HWPlayerQuestDisplayWidget_OnUpdateQuestData) == 0x000008, "Wrong size on HWPlayerQuestDisplayWidget_OnUpdateQuestData");
static_assert(offsetof(HWPlayerQuestDisplayWidget_OnUpdateQuestData, QuestData) == 0x000000, "Member 'HWPlayerQuestDisplayWidget_OnUpdateQuestData::QuestData' has a wrong offset!");

// Function HemingwayUI.HWPlayerQuestDisplayWidget.UpdateQuestData
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerQuestDisplayWidget_UpdateQuestData final
{
public:
	const class UHWQuest*                         QuestData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerQuestDisplayWidget_UpdateQuestData) == 0x000008, "Wrong alignment on HWPlayerQuestDisplayWidget_UpdateQuestData");
static_assert(sizeof(HWPlayerQuestDisplayWidget_UpdateQuestData) == 0x000008, "Wrong size on HWPlayerQuestDisplayWidget_UpdateQuestData");
static_assert(offsetof(HWPlayerQuestDisplayWidget_UpdateQuestData, QuestData) == 0x000000, "Member 'HWPlayerQuestDisplayWidget_UpdateQuestData::QuestData' has a wrong offset!");

// Function HemingwayUI.HWPlayerQuestDisplayWidget.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerQuestDisplayWidget_GetCurrentState final
{
public:
	EHWQuestDisplayState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerQuestDisplayWidget_GetCurrentState) == 0x000001, "Wrong alignment on HWPlayerQuestDisplayWidget_GetCurrentState");
static_assert(sizeof(HWPlayerQuestDisplayWidget_GetCurrentState) == 0x000001, "Wrong size on HWPlayerQuestDisplayWidget_GetCurrentState");
static_assert(offsetof(HWPlayerQuestDisplayWidget_GetCurrentState, ReturnValue) == 0x000000, "Member 'HWPlayerQuestDisplayWidget_GetCurrentState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeLevelXPWidget.UpdateLevelDisplay
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay) == 0x000004, "Wrong alignment on HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay");
static_assert(sizeof(HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay) == 0x000004, "Wrong size on HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay");
static_assert(offsetof(HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay, Level) == 0x000000, "Member 'HWGameplayAttributeLevelXPWidget_UpdateLevelDisplay::Level' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeLevelXPWidget.UpdateRequiredEXPForLevel
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel) == 0x000004, "Wrong alignment on HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel");
static_assert(sizeof(HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel) == 0x000004, "Wrong size on HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel");
static_assert(offsetof(HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel, CurrentLevel) == 0x000000, "Member 'HWGameplayAttributeLevelXPWidget_UpdateRequiredEXPForLevel::CurrentLevel' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeLevelXPWidget.GetProgressBarAttributeWidget
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget final
{
public:
	class UHWGameplayAttributeProgressBar*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget) == 0x000008, "Wrong alignment on HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget");
static_assert(sizeof(HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget) == 0x000008, "Wrong size on HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget");
static_assert(offsetof(HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget, ReturnValue) == 0x000000, "Member 'HWGameplayAttributeLevelXPWidget_GetProgressBarAttributeWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreChestContentEntry.OnInventoryUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWStoreChestContentEntry_OnInventoryUpdated final
{
public:
	TArray<int32>                                 UpdatedInventoryIds;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestContentEntry_OnInventoryUpdated) == 0x000008, "Wrong alignment on HWStoreChestContentEntry_OnInventoryUpdated");
static_assert(sizeof(HWStoreChestContentEntry_OnInventoryUpdated) == 0x000018, "Wrong size on HWStoreChestContentEntry_OnInventoryUpdated");
static_assert(offsetof(HWStoreChestContentEntry_OnInventoryUpdated, UpdatedInventoryIds) == 0x000000, "Member 'HWStoreChestContentEntry_OnInventoryUpdated::UpdatedInventoryIds' has a wrong offset!");
static_assert(offsetof(HWStoreChestContentEntry_OnInventoryUpdated, PlayerInfo) == 0x000010, "Member 'HWStoreChestContentEntry_OnInventoryUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.OnSettingHovered
// 0x0010 (0x0010 - 0x0000)
struct HWSettingsMenuWidget_OnSettingHovered final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWSettingsConfigAsset*           SettingConfig;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsMenuWidget_OnSettingHovered) == 0x000008, "Wrong alignment on HWSettingsMenuWidget_OnSettingHovered");
static_assert(sizeof(HWSettingsMenuWidget_OnSettingHovered) == 0x000010, "Wrong size on HWSettingsMenuWidget_OnSettingHovered");
static_assert(offsetof(HWSettingsMenuWidget_OnSettingHovered, IsHovered_0) == 0x000000, "Member 'HWSettingsMenuWidget_OnSettingHovered::IsHovered_0' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_OnSettingHovered, SettingConfig) == 0x000008, "Member 'HWSettingsMenuWidget_OnSettingHovered::SettingConfig' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.SetActiveSettingsGroup
// 0x0010 (0x0010 - 0x0000)
struct HWSettingsMenuWidget_SetActiveSettingsGroup final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSettingsMenuWidget_SetActiveSettingsGroup) == 0x000008, "Wrong alignment on HWSettingsMenuWidget_SetActiveSettingsGroup");
static_assert(sizeof(HWSettingsMenuWidget_SetActiveSettingsGroup) == 0x000010, "Wrong size on HWSettingsMenuWidget_SetActiveSettingsGroup");
static_assert(offsetof(HWSettingsMenuWidget_SetActiveSettingsGroup, TabBarWidget) == 0x000000, "Member 'HWSettingsMenuWidget_SetActiveSettingsGroup::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_SetActiveSettingsGroup, Index_0) == 0x000008, "Member 'HWSettingsMenuWidget_SetActiveSettingsGroup::Index_0' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_SetActiveSettingsGroup, Cause) == 0x00000C, "Member 'HWSettingsMenuWidget_SetActiveSettingsGroup::Cause' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.SetAvailableActions
// 0x0003 (0x0003 - 0x0000)
struct HWSettingsMenuWidget_SetAvailableActions final
{
public:
	bool                                          bSave;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRevert;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsMenuWidget_SetAvailableActions) == 0x000001, "Wrong alignment on HWSettingsMenuWidget_SetAvailableActions");
static_assert(sizeof(HWSettingsMenuWidget_SetAvailableActions) == 0x000003, "Wrong size on HWSettingsMenuWidget_SetAvailableActions");
static_assert(offsetof(HWSettingsMenuWidget_SetAvailableActions, bSave) == 0x000000, "Member 'HWSettingsMenuWidget_SetAvailableActions::bSave' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_SetAvailableActions, bApply) == 0x000001, "Member 'HWSettingsMenuWidget_SetAvailableActions::bApply' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_SetAvailableActions, bRevert) == 0x000002, "Member 'HWSettingsMenuWidget_SetAvailableActions::bRevert' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.SetSectionData
// 0x0020 (0x0020 - 0x0000)
struct HWSettingsMenuWidget_SetSectionData final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bKeyBindsTab;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSettingsMenuWidget_SetSectionData) == 0x000008, "Wrong alignment on HWSettingsMenuWidget_SetSectionData");
static_assert(sizeof(HWSettingsMenuWidget_SetSectionData) == 0x000020, "Wrong size on HWSettingsMenuWidget_SetSectionData");
static_assert(offsetof(HWSettingsMenuWidget_SetSectionData, Text) == 0x000000, "Member 'HWSettingsMenuWidget_SetSectionData::Text' has a wrong offset!");
static_assert(offsetof(HWSettingsMenuWidget_SetSectionData, bKeyBindsTab) == 0x000018, "Member 'HWSettingsMenuWidget_SetSectionData::bKeyBindsTab' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.HasUnappliedSettings
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsMenuWidget_HasUnappliedSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsMenuWidget_HasUnappliedSettings) == 0x000001, "Wrong alignment on HWSettingsMenuWidget_HasUnappliedSettings");
static_assert(sizeof(HWSettingsMenuWidget_HasUnappliedSettings) == 0x000001, "Wrong size on HWSettingsMenuWidget_HasUnappliedSettings");
static_assert(offsetof(HWSettingsMenuWidget_HasUnappliedSettings, ReturnValue) == 0x000000, "Member 'HWSettingsMenuWidget_HasUnappliedSettings::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSettingsMenuWidget.HasUnsavedSettings
// 0x0001 (0x0001 - 0x0000)
struct HWSettingsMenuWidget_HasUnsavedSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSettingsMenuWidget_HasUnsavedSettings) == 0x000001, "Wrong alignment on HWSettingsMenuWidget_HasUnsavedSettings");
static_assert(sizeof(HWSettingsMenuWidget_HasUnsavedSettings) == 0x000001, "Wrong size on HWSettingsMenuWidget_HasUnsavedSettings");
static_assert(offsetof(HWSettingsMenuWidget_HasUnsavedSettings, ReturnValue) == 0x000000, "Member 'HWSettingsMenuWidget_HasUnsavedSettings::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreChestEntry.OnInventoryUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWStoreChestEntry_OnInventoryUpdated final
{
public:
	TArray<int32>                                 UpdatedInventoryIds;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestEntry_OnInventoryUpdated) == 0x000008, "Wrong alignment on HWStoreChestEntry_OnInventoryUpdated");
static_assert(sizeof(HWStoreChestEntry_OnInventoryUpdated) == 0x000018, "Wrong size on HWStoreChestEntry_OnInventoryUpdated");
static_assert(offsetof(HWStoreChestEntry_OnInventoryUpdated, UpdatedInventoryIds) == 0x000000, "Member 'HWStoreChestEntry_OnInventoryUpdated::UpdatedInventoryIds' has a wrong offset!");
static_assert(offsetof(HWStoreChestEntry_OnInventoryUpdated, PlayerInfo) == 0x000010, "Member 'HWStoreChestEntry_OnInventoryUpdated::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWStoreChestEntry.OnUpdateOwnershipCount
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestEntry_OnUpdateOwnershipCount final
{
public:
	int32                                         CurrentOwnedCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestEntry_OnUpdateOwnershipCount) == 0x000004, "Wrong alignment on HWStoreChestEntry_OnUpdateOwnershipCount");
static_assert(sizeof(HWStoreChestEntry_OnUpdateOwnershipCount) == 0x000008, "Wrong size on HWStoreChestEntry_OnUpdateOwnershipCount");
static_assert(offsetof(HWStoreChestEntry_OnUpdateOwnershipCount, CurrentOwnedCount) == 0x000000, "Member 'HWStoreChestEntry_OnUpdateOwnershipCount::CurrentOwnedCount' has a wrong offset!");
static_assert(offsetof(HWStoreChestEntry_OnUpdateOwnershipCount, TotalCount) == 0x000004, "Member 'HWStoreChestEntry_OnUpdateOwnershipCount::TotalCount' has a wrong offset!");

// Function HemingwayUI.HWPlayerAvatarDisplayWidget.LoadPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerAvatarDisplayWidget_LoadPlayerInfo final
{
public:
	class URH_PlayerInfo*                         InPlayerInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerAvatarDisplayWidget_LoadPlayerInfo) == 0x000008, "Wrong alignment on HWPlayerAvatarDisplayWidget_LoadPlayerInfo");
static_assert(sizeof(HWPlayerAvatarDisplayWidget_LoadPlayerInfo) == 0x000008, "Wrong size on HWPlayerAvatarDisplayWidget_LoadPlayerInfo");
static_assert(offsetof(HWPlayerAvatarDisplayWidget_LoadPlayerInfo, InPlayerInfo) == 0x000000, "Member 'HWPlayerAvatarDisplayWidget_LoadPlayerInfo::InPlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWPlayerAvatarDisplayWidget.OnLocalLoadoutChange
// 0x00B8 (0x00B8 - 0x0000)
struct HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange final
{
public:
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange) == 0x000008, "Wrong alignment on HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange");
static_assert(sizeof(HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange) == 0x0000B8, "Wrong size on HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange");
static_assert(offsetof(HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange, InPlayerLoadout) == 0x000000, "Member 'HWPlayerAvatarDisplayWidget_OnLocalLoadoutChange::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerAvatarDisplayWidget.OnRecieveRemotePlayerLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout) == 0x000008, "Wrong alignment on HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout");
static_assert(sizeof(HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout) == 0x0000C0, "Wrong size on HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout");
static_assert(offsetof(HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout, bSuccess) == 0x000000, "Member 'HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout, InPlayerLoadout) == 0x000008, "Member 'HWPlayerAvatarDisplayWidget_OnRecieveRemotePlayerLoadout::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerAvatarDisplayWidget.OnUpdateAvatarItem
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem final
{
public:
	const class UHWCollectionItem*                AvatarItem;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem) == 0x000008, "Wrong alignment on HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem");
static_assert(sizeof(HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem) == 0x000008, "Wrong size on HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem");
static_assert(offsetof(HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem, AvatarItem) == 0x000000, "Member 'HWPlayerAvatarDisplayWidget_OnUpdateAvatarItem::AvatarItem' has a wrong offset!");

// Function HemingwayUI.HWContextBarWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWContextBarWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWContextBarWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWContextBarWidget_HandleInputStateChanged");
static_assert(sizeof(HWContextBarWidget_HandleInputStateChanged) == 0x000001, "Wrong size on HWContextBarWidget_HandleInputStateChanged");
static_assert(offsetof(HWContextBarWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWContextBarWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWStoreChestsScreen.AddChest
// 0x0008 (0x0008 - 0x0000)
struct HWStoreChestsScreen_AddChest final
{
public:
	class URHStoreItem*                           ChestItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestsScreen_AddChest) == 0x000008, "Wrong alignment on HWStoreChestsScreen_AddChest");
static_assert(sizeof(HWStoreChestsScreen_AddChest) == 0x000008, "Wrong size on HWStoreChestsScreen_AddChest");
static_assert(offsetof(HWStoreChestsScreen_AddChest, ChestItem) == 0x000000, "Member 'HWStoreChestsScreen_AddChest::ChestItem' has a wrong offset!");

// Function HemingwayUI.HWStoreChestsScreen.ShowSelectChestPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWStoreChestsScreen_ShowSelectChestPrompt final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreChestsScreen_ShowSelectChestPrompt) == 0x000001, "Wrong alignment on HWStoreChestsScreen_ShowSelectChestPrompt");
static_assert(sizeof(HWStoreChestsScreen_ShowSelectChestPrompt) == 0x000001, "Wrong size on HWStoreChestsScreen_ShowSelectChestPrompt");
static_assert(offsetof(HWStoreChestsScreen_ShowSelectChestPrompt, bShow) == 0x000000, "Member 'HWStoreChestsScreen_ShowSelectChestPrompt::bShow' has a wrong offset!");

// Function HemingwayUI.HWPortalOfferDisplayWidget.SetPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct HWPortalOfferDisplayWidget_SetPortalOffer final
{
public:
	class URHPortalOffer*                         InPortalOffer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalOfferDisplayWidget_SetPortalOffer) == 0x000008, "Wrong alignment on HWPortalOfferDisplayWidget_SetPortalOffer");
static_assert(sizeof(HWPortalOfferDisplayWidget_SetPortalOffer) == 0x000008, "Wrong size on HWPortalOfferDisplayWidget_SetPortalOffer");
static_assert(offsetof(HWPortalOfferDisplayWidget_SetPortalOffer, InPortalOffer) == 0x000000, "Member 'HWPortalOfferDisplayWidget_SetPortalOffer::InPortalOffer' has a wrong offset!");

// Function HemingwayUI.HWPortalOfferDisplayWidget.GetPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct HWPortalOfferDisplayWidget_GetPortalOffer final
{
public:
	class URHPortalOffer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalOfferDisplayWidget_GetPortalOffer) == 0x000008, "Wrong alignment on HWPortalOfferDisplayWidget_GetPortalOffer");
static_assert(sizeof(HWPortalOfferDisplayWidget_GetPortalOffer) == 0x000008, "Wrong size on HWPortalOfferDisplayWidget_GetPortalOffer");
static_assert(offsetof(HWPortalOfferDisplayWidget_GetPortalOffer, ReturnValue) == 0x000000, "Member 'HWPortalOfferDisplayWidget_GetPortalOffer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreScreenWidget.HandleSelectedTabChanged
// 0x0010 (0x0010 - 0x0000)
struct HWStoreScreenWidget_HandleSelectedTabChanged final
{
public:
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWStoreScreenWidget_HandleSelectedTabChanged) == 0x000008, "Wrong alignment on HWStoreScreenWidget_HandleSelectedTabChanged");
static_assert(sizeof(HWStoreScreenWidget_HandleSelectedTabChanged) == 0x000010, "Wrong size on HWStoreScreenWidget_HandleSelectedTabChanged");
static_assert(offsetof(HWStoreScreenWidget_HandleSelectedTabChanged, TabBarWidget) == 0x000000, "Member 'HWStoreScreenWidget_HandleSelectedTabChanged::TabBarWidget' has a wrong offset!");
static_assert(offsetof(HWStoreScreenWidget_HandleSelectedTabChanged, TabIndex) == 0x000008, "Member 'HWStoreScreenWidget_HandleSelectedTabChanged::TabIndex' has a wrong offset!");
static_assert(offsetof(HWStoreScreenWidget_HandleSelectedTabChanged, Cause) == 0x00000C, "Member 'HWStoreScreenWidget_HandleSelectedTabChanged::Cause' has a wrong offset!");

// Function HemingwayUI.HWStoreScreenWidget.OnStoreTabChanged
// 0x0088 (0x0088 - 0x0000)
struct HWStoreScreenWidget_OnStoreTabChanged final
{
public:
	class UHWWidget*                              NewWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWStoreScreenTabRow                   WidgetConfig;                                      // 0x0008(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreScreenWidget_OnStoreTabChanged) == 0x000008, "Wrong alignment on HWStoreScreenWidget_OnStoreTabChanged");
static_assert(sizeof(HWStoreScreenWidget_OnStoreTabChanged) == 0x000088, "Wrong size on HWStoreScreenWidget_OnStoreTabChanged");
static_assert(offsetof(HWStoreScreenWidget_OnStoreTabChanged, NewWidget) == 0x000000, "Member 'HWStoreScreenWidget_OnStoreTabChanged::NewWidget' has a wrong offset!");
static_assert(offsetof(HWStoreScreenWidget_OnStoreTabChanged, WidgetConfig) == 0x000008, "Member 'HWStoreScreenWidget_OnStoreTabChanged::WidgetConfig' has a wrong offset!");

// Function HemingwayUI.HWTileView.GetEntryWidgetFromItem
// 0x0010 (0x0010 - 0x0000)
struct HWTileView_GetEntryWidgetFromItem final
{
public:
	const class UObject*                          Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTileView_GetEntryWidgetFromItem) == 0x000008, "Wrong alignment on HWTileView_GetEntryWidgetFromItem");
static_assert(sizeof(HWTileView_GetEntryWidgetFromItem) == 0x000010, "Wrong size on HWTileView_GetEntryWidgetFromItem");
static_assert(offsetof(HWTileView_GetEntryWidgetFromItem, Item) == 0x000000, "Member 'HWTileView_GetEntryWidgetFromItem::Item' has a wrong offset!");
static_assert(offsetof(HWTileView_GetEntryWidgetFromItem, ReturnValue) == 0x000008, "Member 'HWTileView_GetEntryWidgetFromItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.DisplayGridLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWStoreLowScopeDeals_DisplayGridLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_DisplayGridLoadingState) == 0x000001, "Wrong alignment on HWStoreLowScopeDeals_DisplayGridLoadingState");
static_assert(sizeof(HWStoreLowScopeDeals_DisplayGridLoadingState) == 0x000001, "Wrong size on HWStoreLowScopeDeals_DisplayGridLoadingState");
static_assert(offsetof(HWStoreLowScopeDeals_DisplayGridLoadingState, bIsLoading) == 0x000000, "Member 'HWStoreLowScopeDeals_DisplayGridLoadingState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.DisplayItemLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWStoreLowScopeDeals_DisplayItemLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_DisplayItemLoadingState) == 0x000001, "Wrong alignment on HWStoreLowScopeDeals_DisplayItemLoadingState");
static_assert(sizeof(HWStoreLowScopeDeals_DisplayItemLoadingState) == 0x000001, "Wrong size on HWStoreLowScopeDeals_DisplayItemLoadingState");
static_assert(offsetof(HWStoreLowScopeDeals_DisplayItemLoadingState, bIsLoading) == 0x000000, "Member 'HWStoreLowScopeDeals_DisplayItemLoadingState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.DisplayStoreItemWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWStoreLowScopeDeals_DisplayStoreItemWidgets final
{
public:
	TArray<class UHWStoreItemDisplayWidget*>      Widgets;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_DisplayStoreItemWidgets) == 0x000008, "Wrong alignment on HWStoreLowScopeDeals_DisplayStoreItemWidgets");
static_assert(sizeof(HWStoreLowScopeDeals_DisplayStoreItemWidgets) == 0x000010, "Wrong size on HWStoreLowScopeDeals_DisplayStoreItemWidgets");
static_assert(offsetof(HWStoreLowScopeDeals_DisplayStoreItemWidgets, Widgets) == 0x000000, "Member 'HWStoreLowScopeDeals_DisplayStoreItemWidgets::Widgets' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.HandleSelectedStoreItemWidget
// 0x0010 (0x0010 - 0x0000)
struct HWStoreLowScopeDeals_HandleSelectedStoreItemWidget final
{
public:
	class UHWStoreItemDisplayWidget*              InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWStoreLowScopeDeals_HandleSelectedStoreItemWidget) == 0x000008, "Wrong alignment on HWStoreLowScopeDeals_HandleSelectedStoreItemWidget");
static_assert(sizeof(HWStoreLowScopeDeals_HandleSelectedStoreItemWidget) == 0x000010, "Wrong size on HWStoreLowScopeDeals_HandleSelectedStoreItemWidget");
static_assert(offsetof(HWStoreLowScopeDeals_HandleSelectedStoreItemWidget, InWidget) == 0x000000, "Member 'HWStoreLowScopeDeals_HandleSelectedStoreItemWidget::InWidget' has a wrong offset!");
static_assert(offsetof(HWStoreLowScopeDeals_HandleSelectedStoreItemWidget, bIsSelected) == 0x000008, "Member 'HWStoreLowScopeDeals_HandleSelectedStoreItemWidget::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.OnDisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreLowScopeDeals_OnDisplayItem final
{
public:
	class UHWInventoryItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_OnDisplayItem) == 0x000008, "Wrong alignment on HWStoreLowScopeDeals_OnDisplayItem");
static_assert(sizeof(HWStoreLowScopeDeals_OnDisplayItem) == 0x000008, "Wrong size on HWStoreLowScopeDeals_OnDisplayItem");
static_assert(offsetof(HWStoreLowScopeDeals_OnDisplayItem, Item) == 0x000000, "Member 'HWStoreLowScopeDeals_OnDisplayItem::Item' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.OnDisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct HWStoreLowScopeDeals_OnDisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_OnDisplayPrice) == 0x000008, "Wrong alignment on HWStoreLowScopeDeals_OnDisplayPrice");
static_assert(sizeof(HWStoreLowScopeDeals_OnDisplayPrice) == 0x000010, "Wrong size on HWStoreLowScopeDeals_OnDisplayPrice");
static_assert(offsetof(HWStoreLowScopeDeals_OnDisplayPrice, PriceItem) == 0x000000, "Member 'HWStoreLowScopeDeals_OnDisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWStoreLowScopeDeals_OnDisplayPrice, PriceGroupTag) == 0x000008, "Member 'HWStoreLowScopeDeals_OnDisplayPrice::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.CanPurchaseDisplayedItem
// 0x0001 (0x0001 - 0x0000)
struct HWStoreLowScopeDeals_CanPurchaseDisplayedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_CanPurchaseDisplayedItem) == 0x000001, "Wrong alignment on HWStoreLowScopeDeals_CanPurchaseDisplayedItem");
static_assert(sizeof(HWStoreLowScopeDeals_CanPurchaseDisplayedItem) == 0x000001, "Wrong size on HWStoreLowScopeDeals_CanPurchaseDisplayedItem");
static_assert(offsetof(HWStoreLowScopeDeals_CanPurchaseDisplayedItem, ReturnValue) == 0x000000, "Member 'HWStoreLowScopeDeals_CanPurchaseDisplayedItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreLowScopeDeals.GetDisplayedItemWidget
// 0x0008 (0x0008 - 0x0000)
struct HWStoreLowScopeDeals_GetDisplayedItemWidget final
{
public:
	class UHWStoreItemDisplayWidget*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreLowScopeDeals_GetDisplayedItemWidget) == 0x000008, "Wrong alignment on HWStoreLowScopeDeals_GetDisplayedItemWidget");
static_assert(sizeof(HWStoreLowScopeDeals_GetDisplayedItemWidget) == 0x000008, "Wrong size on HWStoreLowScopeDeals_GetDisplayedItemWidget");
static_assert(offsetof(HWStoreLowScopeDeals_GetDisplayedItemWidget, ReturnValue) == 0x000000, "Member 'HWStoreLowScopeDeals_GetDisplayedItemWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.AddStoreItemWidget
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_AddStoreItemWidget final
{
public:
	class UHWStoreItemDisplayWidget*              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWSupporterStoreDisplayType                  DisplayType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWStoreSupporterScreen_AddStoreItemWidget) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_AddStoreItemWidget");
static_assert(sizeof(HWStoreSupporterScreen_AddStoreItemWidget) == 0x000010, "Wrong size on HWStoreSupporterScreen_AddStoreItemWidget");
static_assert(offsetof(HWStoreSupporterScreen_AddStoreItemWidget, Widget) == 0x000000, "Member 'HWStoreSupporterScreen_AddStoreItemWidget::Widget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_AddStoreItemWidget, DisplayType) == 0x000008, "Member 'HWStoreSupporterScreen_AddStoreItemWidget::DisplayType' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.DisplayGridLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_DisplayGridLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_DisplayGridLoadingState) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_DisplayGridLoadingState");
static_assert(sizeof(HWStoreSupporterScreen_DisplayGridLoadingState) == 0x000001, "Wrong size on HWStoreSupporterScreen_DisplayGridLoadingState");
static_assert(offsetof(HWStoreSupporterScreen_DisplayGridLoadingState, bIsLoading) == 0x000000, "Member 'HWStoreSupporterScreen_DisplayGridLoadingState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.DisplayItemLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_DisplayItemLoadingState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_DisplayItemLoadingState) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_DisplayItemLoadingState");
static_assert(sizeof(HWStoreSupporterScreen_DisplayItemLoadingState) == 0x000001, "Wrong size on HWStoreSupporterScreen_DisplayItemLoadingState");
static_assert(offsetof(HWStoreSupporterScreen_DisplayItemLoadingState, bIsLoading) == 0x000000, "Member 'HWStoreSupporterScreen_DisplayItemLoadingState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleColorEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleColorEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleColorEntryButtonHovered) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleColorEntryButtonHovered");
static_assert(sizeof(HWStoreSupporterScreen_HandleColorEntryButtonHovered) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleColorEntryButtonHovered");
static_assert(offsetof(HWStoreSupporterScreen_HandleColorEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleColorEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleColorEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleColorEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleColorEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleColorEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleColorEntryButtonSelected) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleColorEntryButtonSelected");
static_assert(sizeof(HWStoreSupporterScreen_HandleColorEntryButtonSelected) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleColorEntryButtonSelected");
static_assert(offsetof(HWStoreSupporterScreen_HandleColorEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleColorEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleColorEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleColorEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleMixedBundleEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered");
static_assert(sizeof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered");
static_assert(offsetof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleMixedBundleEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleMixedBundleEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected");
static_assert(sizeof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected");
static_assert(offsetof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleMixedBundleEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleQuipEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleQuipEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleQuipEntryButtonHovered) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleQuipEntryButtonHovered");
static_assert(sizeof(HWStoreSupporterScreen_HandleQuipEntryButtonHovered) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleQuipEntryButtonHovered");
static_assert(offsetof(HWStoreSupporterScreen_HandleQuipEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleQuipEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleQuipEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleQuipEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleQuipEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleQuipEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleQuipEntryButtonSelected) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleQuipEntryButtonSelected");
static_assert(sizeof(HWStoreSupporterScreen_HandleQuipEntryButtonSelected) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleQuipEntryButtonSelected");
static_assert(offsetof(HWStoreSupporterScreen_HandleQuipEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleQuipEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleQuipEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleQuipEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleSelectedStoreItemWidget
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleSelectedStoreItemWidget final
{
public:
	class UHWStoreItemDisplayWidget*              InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWStoreSupporterScreen_HandleSelectedStoreItemWidget) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleSelectedStoreItemWidget");
static_assert(sizeof(HWStoreSupporterScreen_HandleSelectedStoreItemWidget) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleSelectedStoreItemWidget");
static_assert(offsetof(HWStoreSupporterScreen_HandleSelectedStoreItemWidget, InWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleSelectedStoreItemWidget::InWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleSelectedStoreItemWidget, bIsSelected) == 0x000008, "Member 'HWStoreSupporterScreen_HandleSelectedStoreItemWidget::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleTeleportEntryButtonHovered
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleTeleportEntryButtonHovered final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleTeleportEntryButtonHovered) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleTeleportEntryButtonHovered");
static_assert(sizeof(HWStoreSupporterScreen_HandleTeleportEntryButtonHovered) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleTeleportEntryButtonHovered");
static_assert(offsetof(HWStoreSupporterScreen_HandleTeleportEntryButtonHovered, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleTeleportEntryButtonHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleTeleportEntryButtonHovered, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleTeleportEntryButtonHovered::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.HandleTeleportEntryButtonSelected
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_HandleTeleportEntryButtonSelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_HandleTeleportEntryButtonSelected) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_HandleTeleportEntryButtonSelected");
static_assert(sizeof(HWStoreSupporterScreen_HandleTeleportEntryButtonSelected) == 0x000010, "Wrong size on HWStoreSupporterScreen_HandleTeleportEntryButtonSelected");
static_assert(offsetof(HWStoreSupporterScreen_HandleTeleportEntryButtonSelected, EntryWidget) == 0x000000, "Member 'HWStoreSupporterScreen_HandleTeleportEntryButtonSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_HandleTeleportEntryButtonSelected, InventoryItem) == 0x000008, "Member 'HWStoreSupporterScreen_HandleTeleportEntryButtonSelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnDisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreSupporterScreen_OnDisplayItem final
{
public:
	class UHWInventoryItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnDisplayItem) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnDisplayItem");
static_assert(sizeof(HWStoreSupporterScreen_OnDisplayItem) == 0x000008, "Wrong size on HWStoreSupporterScreen_OnDisplayItem");
static_assert(offsetof(HWStoreSupporterScreen_OnDisplayItem, Item) == 0x000000, "Member 'HWStoreSupporterScreen_OnDisplayItem::Item' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnDisplayPrice
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_OnDisplayPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnDisplayPrice) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnDisplayPrice");
static_assert(sizeof(HWStoreSupporterScreen_OnDisplayPrice) == 0x000010, "Wrong size on HWStoreSupporterScreen_OnDisplayPrice");
static_assert(offsetof(HWStoreSupporterScreen_OnDisplayPrice, PriceItem) == 0x000000, "Member 'HWStoreSupporterScreen_OnDisplayPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_OnDisplayPrice, PriceGroupTag) == 0x000008, "Member 'HWStoreSupporterScreen_OnDisplayPrice::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnPreviewMixedBundle
// 0x0008 (0x0008 - 0x0000)
struct HWStoreSupporterScreen_OnPreviewMixedBundle final
{
public:
	const class UHWCollectionItem*                MixedBundleItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnPreviewMixedBundle) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnPreviewMixedBundle");
static_assert(sizeof(HWStoreSupporterScreen_OnPreviewMixedBundle) == 0x000008, "Wrong size on HWStoreSupporterScreen_OnPreviewMixedBundle");
static_assert(offsetof(HWStoreSupporterScreen_OnPreviewMixedBundle, MixedBundleItem) == 0x000000, "Member 'HWStoreSupporterScreen_OnPreviewMixedBundle::MixedBundleItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnPreviewPlayerNameColor
// 0x0008 (0x0008 - 0x0000)
struct HWStoreSupporterScreen_OnPreviewPlayerNameColor final
{
public:
	const class UHWCollectionItem*                CollectionItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnPreviewPlayerNameColor) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnPreviewPlayerNameColor");
static_assert(sizeof(HWStoreSupporterScreen_OnPreviewPlayerNameColor) == 0x000008, "Wrong size on HWStoreSupporterScreen_OnPreviewPlayerNameColor");
static_assert(offsetof(HWStoreSupporterScreen_OnPreviewPlayerNameColor, CollectionItem) == 0x000000, "Member 'HWStoreSupporterScreen_OnPreviewPlayerNameColor::CollectionItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnPreviewQuip
// 0x0008 (0x0008 - 0x0000)
struct HWStoreSupporterScreen_OnPreviewQuip final
{
public:
	const class UHWCollectionItem*                QuipItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnPreviewQuip) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnPreviewQuip");
static_assert(sizeof(HWStoreSupporterScreen_OnPreviewQuip) == 0x000008, "Wrong size on HWStoreSupporterScreen_OnPreviewQuip");
static_assert(offsetof(HWStoreSupporterScreen_OnPreviewQuip, QuipItem) == 0x000000, "Member 'HWStoreSupporterScreen_OnPreviewQuip::QuipItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnPreviewTeleport
// 0x0008 (0x0008 - 0x0000)
struct HWStoreSupporterScreen_OnPreviewTeleport final
{
public:
	const class UHWCollectionItem*                TeleportItem;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnPreviewTeleport) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnPreviewTeleport");
static_assert(sizeof(HWStoreSupporterScreen_OnPreviewTeleport) == 0x000008, "Wrong size on HWStoreSupporterScreen_OnPreviewTeleport");
static_assert(offsetof(HWStoreSupporterScreen_OnPreviewTeleport, TeleportItem) == 0x000000, "Member 'HWStoreSupporterScreen_OnPreviewTeleport::TeleportItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnUpdateColorGridVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_OnUpdateColorGridVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnUpdateColorGridVisibility) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_OnUpdateColorGridVisibility");
static_assert(sizeof(HWStoreSupporterScreen_OnUpdateColorGridVisibility) == 0x000001, "Wrong size on HWStoreSupporterScreen_OnUpdateColorGridVisibility");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateColorGridVisibility, bShow) == 0x000000, "Member 'HWStoreSupporterScreen_OnUpdateColorGridVisibility::bShow' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnUpdateMixedBundleVisibility
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_OnUpdateMixedBundleVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           StoreItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnUpdateMixedBundleVisibility) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_OnUpdateMixedBundleVisibility");
static_assert(sizeof(HWStoreSupporterScreen_OnUpdateMixedBundleVisibility) == 0x000010, "Wrong size on HWStoreSupporterScreen_OnUpdateMixedBundleVisibility");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateMixedBundleVisibility, bShow) == 0x000000, "Member 'HWStoreSupporterScreen_OnUpdateMixedBundleVisibility::bShow' has a wrong offset!");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateMixedBundleVisibility, StoreItem) == 0x000008, "Member 'HWStoreSupporterScreen_OnUpdateMixedBundleVisibility::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnUpdateQuipGridVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_OnUpdateQuipGridVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnUpdateQuipGridVisibility) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_OnUpdateQuipGridVisibility");
static_assert(sizeof(HWStoreSupporterScreen_OnUpdateQuipGridVisibility) == 0x000001, "Wrong size on HWStoreSupporterScreen_OnUpdateQuipGridVisibility");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateQuipGridVisibility, bShow) == 0x000000, "Member 'HWStoreSupporterScreen_OnUpdateQuipGridVisibility::bShow' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnUpdateTeleportVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_OnUpdateTeleportVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnUpdateTeleportVisibility) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_OnUpdateTeleportVisibility");
static_assert(sizeof(HWStoreSupporterScreen_OnUpdateTeleportVisibility) == 0x000001, "Wrong size on HWStoreSupporterScreen_OnUpdateTeleportVisibility");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateTeleportVisibility, bShow) == 0x000000, "Member 'HWStoreSupporterScreen_OnUpdateTeleportVisibility::bShow' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.OnUpdateVGSVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_OnUpdateVGSVisibility final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_OnUpdateVGSVisibility) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_OnUpdateVGSVisibility");
static_assert(sizeof(HWStoreSupporterScreen_OnUpdateVGSVisibility) == 0x000001, "Wrong size on HWStoreSupporterScreen_OnUpdateVGSVisibility");
static_assert(offsetof(HWStoreSupporterScreen_OnUpdateVGSVisibility, bShow) == 0x000000, "Member 'HWStoreSupporterScreen_OnUpdateVGSVisibility::bShow' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.RegisterBindingContainer
// 0x0001 (0x0001 - 0x0000)
struct HWStoreSupporterScreen_RegisterBindingContainer final
{
public:
	bool                                          bIsPurchase;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_RegisterBindingContainer) == 0x000001, "Wrong alignment on HWStoreSupporterScreen_RegisterBindingContainer");
static_assert(sizeof(HWStoreSupporterScreen_RegisterBindingContainer) == 0x000001, "Wrong size on HWStoreSupporterScreen_RegisterBindingContainer");
static_assert(offsetof(HWStoreSupporterScreen_RegisterBindingContainer, bIsPurchase) == 0x000000, "Member 'HWStoreSupporterScreen_RegisterBindingContainer::bIsPurchase' has a wrong offset!");

// Function HemingwayUI.HWStoreSupporterScreen.UpdateColorGrid
// 0x0010 (0x0010 - 0x0000)
struct HWStoreSupporterScreen_UpdateColorGrid final
{
public:
	TArray<class UHWCollectionItem*>              ColorCollectionItems;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreSupporterScreen_UpdateColorGrid) == 0x000008, "Wrong alignment on HWStoreSupporterScreen_UpdateColorGrid");
static_assert(sizeof(HWStoreSupporterScreen_UpdateColorGrid) == 0x000010, "Wrong size on HWStoreSupporterScreen_UpdateColorGrid");
static_assert(offsetof(HWStoreSupporterScreen_UpdateColorGrid, ColorCollectionItems) == 0x000000, "Member 'HWStoreSupporterScreen_UpdateColorGrid::ColorCollectionItems' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryCustomField.InitializeWithCustomModifier
// 0x0070 (0x0070 - 0x0000)
struct HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier final
{
public:
	class UHWUIStyleLocalModifierWidget*          InLocalModifierWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalCustomModifier          CustomModifier;                                    // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier");
static_assert(sizeof(HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier) == 0x000070, "Wrong size on HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier, InLocalModifierWidget) == 0x000000, "Member 'HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier::InLocalModifierWidget' has a wrong offset!");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier, CustomModifier) == 0x000008, "Member 'HWHUDEditorEditableEntryCustomField_InitializeWithCustomModifier::CustomModifier' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryCustomField.LoadPresetCustomField
// 0x000C (0x000C - 0x0000)
struct HWHUDEditorEditableEntryCustomField_LoadPresetCustomField final
{
public:
	struct FHWHUDEditorLayoutCustomModifier       CustomModifier;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryCustomField_LoadPresetCustomField) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryCustomField_LoadPresetCustomField");
static_assert(sizeof(HWHUDEditorEditableEntryCustomField_LoadPresetCustomField) == 0x00000C, "Wrong size on HWHUDEditorEditableEntryCustomField_LoadPresetCustomField");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_LoadPresetCustomField, CustomModifier) == 0x000000, "Member 'HWHUDEditorEditableEntryCustomField_LoadPresetCustomField::CustomModifier' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryCustomField.SetCustomFieldValue
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntryCustomField_SetCustomFieldValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryCustomField_SetCustomFieldValue) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryCustomField_SetCustomFieldValue");
static_assert(sizeof(HWHUDEditorEditableEntryCustomField_SetCustomFieldValue) == 0x000004, "Wrong size on HWHUDEditorEditableEntryCustomField_SetCustomFieldValue");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_SetCustomFieldValue, Value) == 0x000000, "Member 'HWHUDEditorEditableEntryCustomField_SetCustomFieldValue::Value' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryCustomField.GetCustomFieldValue
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntryCustomField_GetCustomFieldValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryCustomField_GetCustomFieldValue) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryCustomField_GetCustomFieldValue");
static_assert(sizeof(HWHUDEditorEditableEntryCustomField_GetCustomFieldValue) == 0x000004, "Wrong size on HWHUDEditorEditableEntryCustomField_GetCustomFieldValue");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_GetCustomFieldValue, ReturnValue) == 0x000000, "Member 'HWHUDEditorEditableEntryCustomField_GetCustomFieldValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryCustomField.GetCustomModifierName
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorEditableEntryCustomField_GetCustomModifierName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryCustomField_GetCustomModifierName) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryCustomField_GetCustomModifierName");
static_assert(sizeof(HWHUDEditorEditableEntryCustomField_GetCustomModifierName) == 0x000008, "Wrong size on HWHUDEditorEditableEntryCustomField_GetCustomModifierName");
static_assert(offsetof(HWHUDEditorEditableEntryCustomField_GetCustomModifierName, ReturnValue) == 0x000000, "Member 'HWHUDEditorEditableEntryCustomField_GetCustomModifierName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryDropDown.DisplayedSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex final
{
public:
	int32                                         SelectedOptionIndex;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex");
static_assert(sizeof(HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex) == 0x000004, "Wrong size on HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex");
static_assert(offsetof(HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex, SelectedOptionIndex) == 0x000000, "Member 'HWHUDEditorEditableEntryDropDown_DisplayedSelectedOptionIndex::SelectedOptionIndex' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryDropDown.DisplayFieldName
// 0x0018 (0x0018 - 0x0000)
struct HWHUDEditorEditableEntryDropDown_DisplayFieldName final
{
public:
	class FText                                   FieldName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryDropDown_DisplayFieldName) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntryDropDown_DisplayFieldName");
static_assert(sizeof(HWHUDEditorEditableEntryDropDown_DisplayFieldName) == 0x000018, "Wrong size on HWHUDEditorEditableEntryDropDown_DisplayFieldName");
static_assert(offsetof(HWHUDEditorEditableEntryDropDown_DisplayFieldName, FieldName) == 0x000000, "Member 'HWHUDEditorEditableEntryDropDown_DisplayFieldName::FieldName' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryDropDown.DisplayOptions
// 0x0010 (0x0010 - 0x0000)
struct HWHUDEditorEditableEntryDropDown_DisplayOptions final
{
public:
	TArray<class FText>                           Options;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryDropDown_DisplayOptions) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntryDropDown_DisplayOptions");
static_assert(sizeof(HWHUDEditorEditableEntryDropDown_DisplayOptions) == 0x000010, "Wrong size on HWHUDEditorEditableEntryDropDown_DisplayOptions");
static_assert(offsetof(HWHUDEditorEditableEntryDropDown_DisplayOptions, Options) == 0x000000, "Member 'HWHUDEditorEditableEntryDropDown_DisplayOptions::Options' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntryDropDown.SelectOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntryDropDown_SelectOptionIndex final
{
public:
	int32                                         NewOptionIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntryDropDown_SelectOptionIndex) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntryDropDown_SelectOptionIndex");
static_assert(sizeof(HWHUDEditorEditableEntryDropDown_SelectOptionIndex) == 0x000004, "Wrong size on HWHUDEditorEditableEntryDropDown_SelectOptionIndex");
static_assert(offsetof(HWHUDEditorEditableEntryDropDown_SelectOptionIndex, NewOptionIndex) == 0x000000, "Member 'HWHUDEditorEditableEntryDropDown_SelectOptionIndex::NewOptionIndex' has a wrong offset!");

// Function HemingwayUI.HWStoreVIPScreen.UpdateExpirationText
// 0x0008 (0x0008 - 0x0000)
struct HWStoreVIPScreen_UpdateExpirationText final
{
public:
	struct FDateTime                              ExpirationTime;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreVIPScreen_UpdateExpirationText) == 0x000008, "Wrong alignment on HWStoreVIPScreen_UpdateExpirationText");
static_assert(sizeof(HWStoreVIPScreen_UpdateExpirationText) == 0x000008, "Wrong size on HWStoreVIPScreen_UpdateExpirationText");
static_assert(offsetof(HWStoreVIPScreen_UpdateExpirationText, ExpirationTime) == 0x000000, "Member 'HWStoreVIPScreen_UpdateExpirationText::ExpirationTime' has a wrong offset!");

// Function HemingwayUI.HWStoreVIPScreen.UpdatePurchaseButton
// 0x0018 (0x0018 - 0x0000)
struct HWStoreVIPScreen_UpdatePurchaseButton final
{
public:
	EHWVIPOwnershipLevel                          VIPOwnership;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroupTag;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreVIPScreen_UpdatePurchaseButton) == 0x000008, "Wrong alignment on HWStoreVIPScreen_UpdatePurchaseButton");
static_assert(sizeof(HWStoreVIPScreen_UpdatePurchaseButton) == 0x000018, "Wrong size on HWStoreVIPScreen_UpdatePurchaseButton");
static_assert(offsetof(HWStoreVIPScreen_UpdatePurchaseButton, VIPOwnership) == 0x000000, "Member 'HWStoreVIPScreen_UpdatePurchaseButton::VIPOwnership' has a wrong offset!");
static_assert(offsetof(HWStoreVIPScreen_UpdatePurchaseButton, PriceItem) == 0x000008, "Member 'HWStoreVIPScreen_UpdatePurchaseButton::PriceItem' has a wrong offset!");
static_assert(offsetof(HWStoreVIPScreen_UpdatePurchaseButton, PriceGroupTag) == 0x000010, "Member 'HWStoreVIPScreen_UpdatePurchaseButton::PriceGroupTag' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityOverview.CycleAbilitySelection
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityOverview_CycleAbilitySelection final
{
public:
	bool                                          bGoNext;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityOverview_CycleAbilitySelection) == 0x000001, "Wrong alignment on HWGodAbilityOverview_CycleAbilitySelection");
static_assert(sizeof(HWGodAbilityOverview_CycleAbilitySelection) == 0x000001, "Wrong size on HWGodAbilityOverview_CycleAbilitySelection");
static_assert(offsetof(HWGodAbilityOverview_CycleAbilitySelection, bGoNext) == 0x000000, "Member 'HWGodAbilityOverview_CycleAbilitySelection::bGoNext' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityOverview.OnSelectAbility
// 0x0008 (0x0008 - 0x0000)
struct HWGodAbilityOverview_OnSelectAbility final
{
public:
	const class UHWGodAbilityEntryWidget*         AbilityEntry;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityOverview_OnSelectAbility) == 0x000008, "Wrong alignment on HWGodAbilityOverview_OnSelectAbility");
static_assert(sizeof(HWGodAbilityOverview_OnSelectAbility) == 0x000008, "Wrong size on HWGodAbilityOverview_OnSelectAbility");
static_assert(offsetof(HWGodAbilityOverview_OnSelectAbility, AbilityEntry) == 0x000000, "Member 'HWGodAbilityOverview_OnSelectAbility::AbilityEntry' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityOverview.SetGodItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodAbilityOverview_SetGodItem final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityOverview_SetGodItem) == 0x000008, "Wrong alignment on HWGodAbilityOverview_SetGodItem");
static_assert(sizeof(HWGodAbilityOverview_SetGodItem) == 0x000008, "Wrong size on HWGodAbilityOverview_SetGodItem");
static_assert(offsetof(HWGodAbilityOverview_SetGodItem, InGodItem) == 0x000000, "Member 'HWGodAbilityOverview_SetGodItem::InGodItem' has a wrong offset!");

// Function HemingwayUI.HWDebug_GeneralWidget.LoadSkinNames
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_GeneralWidget_LoadSkinNames final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GeneralWidget_LoadSkinNames) == 0x000008, "Wrong alignment on HWDebug_GeneralWidget_LoadSkinNames");
static_assert(sizeof(HWDebug_GeneralWidget_LoadSkinNames) == 0x000008, "Wrong size on HWDebug_GeneralWidget_LoadSkinNames");
static_assert(offsetof(HWDebug_GeneralWidget_LoadSkinNames, Character) == 0x000000, "Member 'HWDebug_GeneralWidget_LoadSkinNames::Character' has a wrong offset!");

// Function HemingwayUI.HWDebug_GeneralWidget.SetAbilityCastStyle
// 0x0001 (0x0001 - 0x0000)
struct HWDebug_GeneralWidget_SetAbilityCastStyle final
{
public:
	EAbilityCastStyle                             AbilityCastStyle;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GeneralWidget_SetAbilityCastStyle) == 0x000001, "Wrong alignment on HWDebug_GeneralWidget_SetAbilityCastStyle");
static_assert(sizeof(HWDebug_GeneralWidget_SetAbilityCastStyle) == 0x000001, "Wrong size on HWDebug_GeneralWidget_SetAbilityCastStyle");
static_assert(offsetof(HWDebug_GeneralWidget_SetAbilityCastStyle, AbilityCastStyle) == 0x000000, "Member 'HWDebug_GeneralWidget_SetAbilityCastStyle::AbilityCastStyle' has a wrong offset!");

// Function HemingwayUI.HWDebug_GeneralWidget.SetCharacter
// 0x0018 (0x0018 - 0x0000)
struct HWDebug_GeneralWidget_SetCharacter final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SkinName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GeneralWidget_SetCharacter) == 0x000008, "Wrong alignment on HWDebug_GeneralWidget_SetCharacter");
static_assert(sizeof(HWDebug_GeneralWidget_SetCharacter) == 0x000018, "Wrong size on HWDebug_GeneralWidget_SetCharacter");
static_assert(offsetof(HWDebug_GeneralWidget_SetCharacter, Character) == 0x000000, "Member 'HWDebug_GeneralWidget_SetCharacter::Character' has a wrong offset!");
static_assert(offsetof(HWDebug_GeneralWidget_SetCharacter, SkinName) == 0x000008, "Member 'HWDebug_GeneralWidget_SetCharacter::SkinName' has a wrong offset!");

// Function HemingwayUI.HWDebug_GeneralWidget.GetDevHUDNames
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_GeneralWidget_GetDevHUDNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GeneralWidget_GetDevHUDNames) == 0x000008, "Wrong alignment on HWDebug_GeneralWidget_GetDevHUDNames");
static_assert(sizeof(HWDebug_GeneralWidget_GetDevHUDNames) == 0x000010, "Wrong size on HWDebug_GeneralWidget_GetDevHUDNames");
static_assert(offsetof(HWDebug_GeneralWidget_GetDevHUDNames, ReturnValue) == 0x000000, "Member 'HWDebug_GeneralWidget_GetDevHUDNames::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterHealthWidget.UpdateCurrentHealth
// 0x000C (0x000C - 0x0000)
struct HWCharacterHealthWidget_UpdateCurrentHealth final
{
public:
	float                                         OldHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterHealthWidget_UpdateCurrentHealth) == 0x000004, "Wrong alignment on HWCharacterHealthWidget_UpdateCurrentHealth");
static_assert(sizeof(HWCharacterHealthWidget_UpdateCurrentHealth) == 0x00000C, "Wrong size on HWCharacterHealthWidget_UpdateCurrentHealth");
static_assert(offsetof(HWCharacterHealthWidget_UpdateCurrentHealth, OldHealth) == 0x000000, "Member 'HWCharacterHealthWidget_UpdateCurrentHealth::OldHealth' has a wrong offset!");
static_assert(offsetof(HWCharacterHealthWidget_UpdateCurrentHealth, NewHealth) == 0x000004, "Member 'HWCharacterHealthWidget_UpdateCurrentHealth::NewHealth' has a wrong offset!");
static_assert(offsetof(HWCharacterHealthWidget_UpdateCurrentHealth, bShouldAnimate) == 0x000008, "Member 'HWCharacterHealthWidget_UpdateCurrentHealth::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterHealthWidget.UpdateMaxHealth
// 0x000C (0x000C - 0x0000)
struct HWCharacterHealthWidget_UpdateMaxHealth final
{
public:
	float                                         OldMaxHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxHealth;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterHealthWidget_UpdateMaxHealth) == 0x000004, "Wrong alignment on HWCharacterHealthWidget_UpdateMaxHealth");
static_assert(sizeof(HWCharacterHealthWidget_UpdateMaxHealth) == 0x00000C, "Wrong size on HWCharacterHealthWidget_UpdateMaxHealth");
static_assert(offsetof(HWCharacterHealthWidget_UpdateMaxHealth, OldMaxHealth) == 0x000000, "Member 'HWCharacterHealthWidget_UpdateMaxHealth::OldMaxHealth' has a wrong offset!");
static_assert(offsetof(HWCharacterHealthWidget_UpdateMaxHealth, NewMaxHealth) == 0x000004, "Member 'HWCharacterHealthWidget_UpdateMaxHealth::NewMaxHealth' has a wrong offset!");
static_assert(offsetof(HWCharacterHealthWidget_UpdateMaxHealth, bShouldAnimate) == 0x000008, "Member 'HWCharacterHealthWidget_UpdateMaxHealth::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterHealthWidget.GetCurrentHealth
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterHealthWidget_GetCurrentHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterHealthWidget_GetCurrentHealth) == 0x000004, "Wrong alignment on HWCharacterHealthWidget_GetCurrentHealth");
static_assert(sizeof(HWCharacterHealthWidget_GetCurrentHealth) == 0x000004, "Wrong size on HWCharacterHealthWidget_GetCurrentHealth");
static_assert(offsetof(HWCharacterHealthWidget_GetCurrentHealth, ReturnValue) == 0x000000, "Member 'HWCharacterHealthWidget_GetCurrentHealth::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterHealthWidget.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterHealthWidget_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterHealthWidget_GetMaxHealth) == 0x000004, "Wrong alignment on HWCharacterHealthWidget_GetMaxHealth");
static_assert(sizeof(HWCharacterHealthWidget_GetMaxHealth) == 0x000004, "Wrong size on HWCharacterHealthWidget_GetMaxHealth");
static_assert(offsetof(HWCharacterHealthWidget_GetMaxHealth, ReturnValue) == 0x000000, "Member 'HWCharacterHealthWidget_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_GodHUDWidget.GetDebugGameplayTags
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_GodHUDWidget_GetDebugGameplayTags final
{
public:
	TArray<struct FGameplayTag>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GodHUDWidget_GetDebugGameplayTags) == 0x000008, "Wrong alignment on HWDebug_GodHUDWidget_GetDebugGameplayTags");
static_assert(sizeof(HWDebug_GodHUDWidget_GetDebugGameplayTags) == 0x000010, "Wrong size on HWDebug_GodHUDWidget_GetDebugGameplayTags");
static_assert(offsetof(HWDebug_GodHUDWidget_GetDebugGameplayTags, ReturnValue) == 0x000000, "Member 'HWDebug_GodHUDWidget_GetDebugGameplayTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_GodHUDWidget.GetGameplayTagByName
// 0x0018 (0x0018 - 0x0000)
struct HWDebug_GodHUDWidget_GetGameplayTagByName final
{
public:
	class FString                                 TagString;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_GodHUDWidget_GetGameplayTagByName) == 0x000008, "Wrong alignment on HWDebug_GodHUDWidget_GetGameplayTagByName");
static_assert(sizeof(HWDebug_GodHUDWidget_GetGameplayTagByName) == 0x000018, "Wrong size on HWDebug_GodHUDWidget_GetGameplayTagByName");
static_assert(offsetof(HWDebug_GodHUDWidget_GetGameplayTagByName, TagString) == 0x000000, "Member 'HWDebug_GodHUDWidget_GetGameplayTagByName::TagString' has a wrong offset!");
static_assert(offsetof(HWDebug_GodHUDWidget_GetGameplayTagByName, ReturnValue) == 0x000010, "Member 'HWDebug_GodHUDWidget_GetGameplayTagByName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.ChangeTabView
// 0x0008 (0x0008 - 0x0000)
struct HWTabViewerWidget_ChangeTabView final
{
public:
	struct FGameplayTag                           TabViewName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_ChangeTabView) == 0x000004, "Wrong alignment on HWTabViewerWidget_ChangeTabView");
static_assert(sizeof(HWTabViewerWidget_ChangeTabView) == 0x000008, "Wrong size on HWTabViewerWidget_ChangeTabView");
static_assert(offsetof(HWTabViewerWidget_ChangeTabView, TabViewName) == 0x000000, "Member 'HWTabViewerWidget_ChangeTabView::TabViewName' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.OnTabViewAdded
// 0x0018 (0x0018 - 0x0000)
struct HWTabViewerWidget_OnTabViewAdded final
{
public:
	struct FGameplayTag                           TabViewName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWTabEntryWidget*                      TabEntry;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              TabViewWidget;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_OnTabViewAdded) == 0x000008, "Wrong alignment on HWTabViewerWidget_OnTabViewAdded");
static_assert(sizeof(HWTabViewerWidget_OnTabViewAdded) == 0x000018, "Wrong size on HWTabViewerWidget_OnTabViewAdded");
static_assert(offsetof(HWTabViewerWidget_OnTabViewAdded, TabViewName) == 0x000000, "Member 'HWTabViewerWidget_OnTabViewAdded::TabViewName' has a wrong offset!");
static_assert(offsetof(HWTabViewerWidget_OnTabViewAdded, TabEntry) == 0x000008, "Member 'HWTabViewerWidget_OnTabViewAdded::TabEntry' has a wrong offset!");
static_assert(offsetof(HWTabViewerWidget_OnTabViewAdded, TabViewWidget) == 0x000010, "Member 'HWTabViewerWidget_OnTabViewAdded::TabViewWidget' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.OnTabViewChanged
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_OnTabViewChanged final
{
public:
	struct FGameplayTag                           PreviousTabViewName;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewTabViewName;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_OnTabViewChanged) == 0x000004, "Wrong alignment on HWTabViewerWidget_OnTabViewChanged");
static_assert(sizeof(HWTabViewerWidget_OnTabViewChanged) == 0x000010, "Wrong size on HWTabViewerWidget_OnTabViewChanged");
static_assert(offsetof(HWTabViewerWidget_OnTabViewChanged, PreviousTabViewName) == 0x000000, "Member 'HWTabViewerWidget_OnTabViewChanged::PreviousTabViewName' has a wrong offset!");
static_assert(offsetof(HWTabViewerWidget_OnTabViewChanged, NewTabViewName) == 0x000008, "Member 'HWTabViewerWidget_OnTabViewChanged::NewTabViewName' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.GetCurrentTabViewWidget
// 0x0008 (0x0008 - 0x0000)
struct HWTabViewerWidget_GetCurrentTabViewWidget final
{
public:
	class UHWWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_GetCurrentTabViewWidget) == 0x000008, "Wrong alignment on HWTabViewerWidget_GetCurrentTabViewWidget");
static_assert(sizeof(HWTabViewerWidget_GetCurrentTabViewWidget) == 0x000008, "Wrong size on HWTabViewerWidget_GetCurrentTabViewWidget");
static_assert(offsetof(HWTabViewerWidget_GetCurrentTabViewWidget, ReturnValue) == 0x000000, "Member 'HWTabViewerWidget_GetCurrentTabViewWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.GetTabEntries
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_GetTabEntries final
{
public:
	TArray<class UHWTabEntryWidget*>              ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_GetTabEntries) == 0x000008, "Wrong alignment on HWTabViewerWidget_GetTabEntries");
static_assert(sizeof(HWTabViewerWidget_GetTabEntries) == 0x000010, "Wrong size on HWTabViewerWidget_GetTabEntries");
static_assert(offsetof(HWTabViewerWidget_GetTabEntries, ReturnValue) == 0x000000, "Member 'HWTabViewerWidget_GetTabEntries::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.GetTabEntry
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_GetTabEntry final
{
public:
	struct FGameplayTag                           TabViewTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWTabEntryWidget*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_GetTabEntry) == 0x000008, "Wrong alignment on HWTabViewerWidget_GetTabEntry");
static_assert(sizeof(HWTabViewerWidget_GetTabEntry) == 0x000010, "Wrong size on HWTabViewerWidget_GetTabEntry");
static_assert(offsetof(HWTabViewerWidget_GetTabEntry, TabViewTag) == 0x000000, "Member 'HWTabViewerWidget_GetTabEntry::TabViewTag' has a wrong offset!");
static_assert(offsetof(HWTabViewerWidget_GetTabEntry, ReturnValue) == 0x000008, "Member 'HWTabViewerWidget_GetTabEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.GetTabViewNames
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_GetTabViewNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_GetTabViewNames) == 0x000008, "Wrong alignment on HWTabViewerWidget_GetTabViewNames");
static_assert(sizeof(HWTabViewerWidget_GetTabViewNames) == 0x000010, "Wrong size on HWTabViewerWidget_GetTabViewNames");
static_assert(offsetof(HWTabViewerWidget_GetTabViewNames, ReturnValue) == 0x000000, "Member 'HWTabViewerWidget_GetTabViewNames::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.GetTabViewWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_GetTabViewWidgets final
{
public:
	TArray<class UHWWidget*>                      ViewWidgets;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_GetTabViewWidgets) == 0x000008, "Wrong alignment on HWTabViewerWidget_GetTabViewWidgets");
static_assert(sizeof(HWTabViewerWidget_GetTabViewWidgets) == 0x000010, "Wrong size on HWTabViewerWidget_GetTabViewWidgets");
static_assert(offsetof(HWTabViewerWidget_GetTabViewWidgets, ViewWidgets) == 0x000000, "Member 'HWTabViewerWidget_GetTabViewWidgets::ViewWidgets' has a wrong offset!");

// Function HemingwayUI.HWTabViewerWidget.SortTabViewNames
// 0x0010 (0x0010 - 0x0000)
struct HWTabViewerWidget_SortTabViewNames final
{
public:
	TArray<class FName>                           TabViewNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabViewerWidget_SortTabViewNames) == 0x000008, "Wrong alignment on HWTabViewerWidget_SortTabViewNames");
static_assert(sizeof(HWTabViewerWidget_SortTabViewNames) == 0x000010, "Wrong size on HWTabViewerWidget_SortTabViewNames");
static_assert(offsetof(HWTabViewerWidget_SortTabViewNames, TabViewNames) == 0x000000, "Member 'HWTabViewerWidget_SortTabViewNames::TabViewNames' has a wrong offset!");

// Function HemingwayUI.HWPassiveMeterWidgetManager.HandlePassiveMeterComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         ABSActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWPassiveMeterComponent*               NewPassiveMeterComponent;                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged) == 0x000008, "Wrong alignment on HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged");
static_assert(sizeof(HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged) == 0x000010, "Wrong size on HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged");
static_assert(offsetof(HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged, ABSActor) == 0x000000, "Member 'HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged::ABSActor' has a wrong offset!");
static_assert(offsetof(HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged, NewPassiveMeterComponent) == 0x000008, "Member 'HWPassiveMeterWidgetManager_HandlePassiveMeterComponentChanged::NewPassiveMeterComponent' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.CreateNewPreset
// 0x0018 (0x0018 - 0x0000)
struct HWDebugHUDWidget_CreateNewPreset final
{
public:
	class FString                                 PresetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWDebugSavePreset*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugHUDWidget_CreateNewPreset) == 0x000008, "Wrong alignment on HWDebugHUDWidget_CreateNewPreset");
static_assert(sizeof(HWDebugHUDWidget_CreateNewPreset) == 0x000018, "Wrong size on HWDebugHUDWidget_CreateNewPreset");
static_assert(offsetof(HWDebugHUDWidget_CreateNewPreset, PresetName) == 0x000000, "Member 'HWDebugHUDWidget_CreateNewPreset::PresetName' has a wrong offset!");
static_assert(offsetof(HWDebugHUDWidget_CreateNewPreset, ReturnValue) == 0x000010, "Member 'HWDebugHUDWidget_CreateNewPreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.HandleCommandTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWDebugHUDWidget_HandleCommandTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDebugHUDWidget_HandleCommandTextCommitted) == 0x000008, "Wrong alignment on HWDebugHUDWidget_HandleCommandTextCommitted");
static_assert(sizeof(HWDebugHUDWidget_HandleCommandTextCommitted) == 0x000020, "Wrong size on HWDebugHUDWidget_HandleCommandTextCommitted");
static_assert(offsetof(HWDebugHUDWidget_HandleCommandTextCommitted, Text) == 0x000000, "Member 'HWDebugHUDWidget_HandleCommandTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWDebugHUDWidget_HandleCommandTextCommitted, CommitMethod) == 0x000018, "Member 'HWDebugHUDWidget_HandleCommandTextCommitted::CommitMethod' has a wrong offset!");
static_assert(offsetof(HWDebugHUDWidget_HandleCommandTextCommitted, ReturnValue) == 0x000019, "Member 'HWDebugHUDWidget_HandleCommandTextCommitted::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.LoadPreset
// 0x0020 (0x0020 - 0x0000)
struct HWDebugHUDWidget_LoadPreset final
{
public:
	class FString                                 PresetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWDebugSavePreset*                     OutLoadedPreset;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDebugHUDWidget_LoadPreset) == 0x000008, "Wrong alignment on HWDebugHUDWidget_LoadPreset");
static_assert(sizeof(HWDebugHUDWidget_LoadPreset) == 0x000020, "Wrong size on HWDebugHUDWidget_LoadPreset");
static_assert(offsetof(HWDebugHUDWidget_LoadPreset, PresetName) == 0x000000, "Member 'HWDebugHUDWidget_LoadPreset::PresetName' has a wrong offset!");
static_assert(offsetof(HWDebugHUDWidget_LoadPreset, OutLoadedPreset) == 0x000010, "Member 'HWDebugHUDWidget_LoadPreset::OutLoadedPreset' has a wrong offset!");
static_assert(offsetof(HWDebugHUDWidget_LoadPreset, ReturnValue) == 0x000018, "Member 'HWDebugHUDWidget_LoadPreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.SavePreset
// 0x0010 (0x0010 - 0x0000)
struct HWDebugHUDWidget_SavePreset final
{
public:
	class FString                                 PresetName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugHUDWidget_SavePreset) == 0x000008, "Wrong alignment on HWDebugHUDWidget_SavePreset");
static_assert(sizeof(HWDebugHUDWidget_SavePreset) == 0x000010, "Wrong size on HWDebugHUDWidget_SavePreset");
static_assert(offsetof(HWDebugHUDWidget_SavePreset, PresetName) == 0x000000, "Member 'HWDebugHUDWidget_SavePreset::PresetName' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.GetLoadedPreset
// 0x0008 (0x0008 - 0x0000)
struct HWDebugHUDWidget_GetLoadedPreset final
{
public:
	class UHWDebugSavePreset*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugHUDWidget_GetLoadedPreset) == 0x000008, "Wrong alignment on HWDebugHUDWidget_GetLoadedPreset");
static_assert(sizeof(HWDebugHUDWidget_GetLoadedPreset) == 0x000008, "Wrong size on HWDebugHUDWidget_GetLoadedPreset");
static_assert(offsetof(HWDebugHUDWidget_GetLoadedPreset, ReturnValue) == 0x000000, "Member 'HWDebugHUDWidget_GetLoadedPreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.GetLocalCheatComponent
// 0x0008 (0x0008 - 0x0000)
struct HWDebugHUDWidget_GetLocalCheatComponent final
{
public:
	class UHWCheatComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugHUDWidget_GetLocalCheatComponent) == 0x000008, "Wrong alignment on HWDebugHUDWidget_GetLocalCheatComponent");
static_assert(sizeof(HWDebugHUDWidget_GetLocalCheatComponent) == 0x000008, "Wrong size on HWDebugHUDWidget_GetLocalCheatComponent");
static_assert(offsetof(HWDebugHUDWidget_GetLocalCheatComponent, ReturnValue) == 0x000000, "Member 'HWDebugHUDWidget_GetLocalCheatComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugHUDWidget.GetLogger
// 0x0008 (0x0008 - 0x0000)
struct HWDebugHUDWidget_GetLogger final
{
public:
	class UHWDebugLoggerWidget*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugHUDWidget_GetLogger) == 0x000008, "Wrong alignment on HWDebugHUDWidget_GetLogger");
static_assert(sizeof(HWDebugHUDWidget_GetLogger) == 0x000008, "Wrong size on HWDebugHUDWidget_GetLogger");
static_assert(offsetof(HWDebugHUDWidget_GetLogger, ReturnValue) == 0x000000, "Member 'HWDebugHUDWidget_GetLogger::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugLoggerTextWidget.DisplayString
// 0x0010 (0x0010 - 0x0000)
struct HWDebugLoggerTextWidget_DisplayString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugLoggerTextWidget_DisplayString) == 0x000008, "Wrong alignment on HWDebugLoggerTextWidget_DisplayString");
static_assert(sizeof(HWDebugLoggerTextWidget_DisplayString) == 0x000010, "Wrong size on HWDebugLoggerTextWidget_DisplayString");
static_assert(offsetof(HWDebugLoggerTextWidget_DisplayString, String) == 0x000000, "Member 'HWDebugLoggerTextWidget_DisplayString::String' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.HandleAllRolesAssigned
// 0x0020 (0x0020 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned final
{
public:
	struct FHWAssignedRolesMapWrapper             AssignedRoles;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned) == 0x000020, "Wrong size on HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned, AssignedRoles) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_HandleAllRolesAssigned::AssignedRoles' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.HandleAssignedRoleChanged
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged final
{
public:
	ECharacterRole                                AssignedRole;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged) == 0x000001, "Wrong size on HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged, AssignedRole) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_HandleAssignedRoleChanged::AssignedRole' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.HandlePlayerStateDraftCharacterChoiceReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 Choice;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated) == 0x000010, "Wrong size on HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated, PlayerState) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated, Choice) == 0x000008, "Member 'HWDraftLobbyPlayerEntryWidget_HandlePlayerStateDraftCharacterChoiceReplicated::Choice' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.HandleReceivedRoleSwapResult
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult final
{
public:
	class AHWPlayerState*                         RequestingPlayerState;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         TargetPlayerState;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTradeRequestResult                         TradeResult;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0011(0x0001)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult) == 0x000018, "Wrong size on HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult, RequestingPlayerState) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult::RequestingPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult, TargetPlayerState) == 0x000008, "Member 'HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult, TradeResult) == 0x000010, "Member 'HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult::TradeResult' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult, TimerId) == 0x000011, "Member 'HWDraftLobbyPlayerEntryWidget_HandleReceivedRoleSwapResult::TimerId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.OnPlayerStateDestroyed
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed, DestroyedActor) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_OnPlayerStateDestroyed::DestroyedActor' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.OnPlayerStateUIRelevantChanged
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged, PlayerState) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_OnPlayerStateUIRelevantChanged::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetHWPlayerId
// 0x0020 (0x0020 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetHWPlayerId final
{
public:
	struct FHWPersistentPlayerId                  InHWPlayerId;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetHWPlayerId) == 0x000004, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetHWPlayerId");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetHWPlayerId) == 0x000020, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetHWPlayerId");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetHWPlayerId, InHWPlayerId) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetHWPlayerId::InHWPlayerId' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetIndexInTeam
// 0x0004 (0x0004 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetIndexInTeam final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetIndexInTeam) == 0x000004, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetIndexInTeam");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetIndexInTeam) == 0x000004, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetIndexInTeam");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetIndexInTeam, Index_0) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetIndexInTeam::Index_0' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetPlayerInfo final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetPlayerInfo) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetPlayerInfo");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetPlayerInfo) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetPlayerInfo");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetPlayerInfo, PlayerInfo) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetPlayerInfo::PlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetPlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        PlatformDisplayType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon) == 0x000001, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon, PlatformDisplayType) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetPlayerPlatformIcon::PlatformDisplayType' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetPlayerState) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetPlayerState");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetPlayerState) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetPlayerState");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetPlayerState, InPlayerState) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.SetVoiceChatState
// 0x0003 (0x0003 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_SetVoiceChatState final
{
public:
	bool                                          bInVoiceChannel;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_SetVoiceChatState) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_SetVoiceChatState");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_SetVoiceChatState) == 0x000003, "Wrong size on HWDraftLobbyPlayerEntryWidget_SetVoiceChatState");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetVoiceChatState, bInVoiceChannel) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_SetVoiceChatState::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetVoiceChatState, bIsTalking) == 0x000001, "Member 'HWDraftLobbyPlayerEntryWidget_SetVoiceChatState::bIsTalking' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_SetVoiceChatState, bIsMuted) == 0x000002, "Member 'HWDraftLobbyPlayerEntryWidget_SetVoiceChatState::bIsMuted' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.UpdatePlayerEntryDraftState
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState final
{
public:
	EHWPlayerDraftingState                        DraftState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState) == 0x000001, "Wrong size on HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState, DraftState) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_UpdatePlayerEntryDraftState::DraftState' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.UpdateRoleIcon
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon final
{
public:
	ECharacterRole                                AssignedRole;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon) == 0x000001, "Wrong size on HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon, AssignedRole) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_UpdateRoleIcon::AssignedRole' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.UpdateTradeStatus
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus final
{
public:
	EHWTradeRequestResult                         TradeResult;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus) == 0x000001, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus) == 0x000001, "Wrong size on HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus, TradeResult) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_UpdateTradeStatus::TradeResult' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.UpdateTradeTimer
// 0x0004 (0x0004 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer final
{
public:
	int32                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer) == 0x000004, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer) == 0x000004, "Wrong size on HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer, TimeRemaining) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_UpdateTradeTimer::TimeRemaining' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.GetHWPlayerId
// 0x0020 (0x0020 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_GetHWPlayerId final
{
public:
	struct FHWPersistentPlayerId                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_GetHWPlayerId) == 0x000004, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_GetHWPlayerId");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_GetHWPlayerId) == 0x000020, "Wrong size on HWDraftLobbyPlayerEntryWidget_GetHWPlayerId");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_GetHWPlayerId, ReturnValue) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_GetHWPlayerId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_GetPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_GetPlayerState) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_GetPlayerState");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_GetPlayerState) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_GetPlayerState");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.GetSelectionStatusItem
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem) == 0x000008, "Wrong size on HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem, ReturnValue) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_GetSelectionStatusItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyPlayerEntryWidget.GetSelectionStatusText
// 0x0018 (0x0018 - 0x0000)
struct HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText) == 0x000008, "Wrong alignment on HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText");
static_assert(sizeof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText) == 0x000018, "Wrong size on HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText");
static_assert(offsetof(HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText, ReturnValue) == 0x000000, "Member 'HWDraftLobbyPlayerEntryWidget_GetSelectionStatusText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebugLoggerWidget.AddLog
// 0x0010 (0x0010 - 0x0000)
struct HWDebugLoggerWidget_AddLog final
{
public:
	class FString                                 LogText;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugLoggerWidget_AddLog) == 0x000008, "Wrong alignment on HWDebugLoggerWidget_AddLog");
static_assert(sizeof(HWDebugLoggerWidget_AddLog) == 0x000010, "Wrong size on HWDebugLoggerWidget_AddLog");
static_assert(offsetof(HWDebugLoggerWidget_AddLog, LogText) == 0x000000, "Member 'HWDebugLoggerWidget_AddLog::LogText' has a wrong offset!");

// Function HemingwayUI.HWDebugLoggerWidget.CreatedNewTextWidget
// 0x0008 (0x0008 - 0x0000)
struct HWDebugLoggerWidget_CreatedNewTextWidget final
{
public:
	class UHWDebugLoggerTextWidget*               TextBlock;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebugLoggerWidget_CreatedNewTextWidget) == 0x000008, "Wrong alignment on HWDebugLoggerWidget_CreatedNewTextWidget");
static_assert(sizeof(HWDebugLoggerWidget_CreatedNewTextWidget) == 0x000008, "Wrong size on HWDebugLoggerWidget_CreatedNewTextWidget");
static_assert(offsetof(HWDebugLoggerWidget_CreatedNewTextWidget, TextBlock) == 0x000000, "Member 'HWDebugLoggerWidget_CreatedNewTextWidget::TextBlock' has a wrong offset!");

// Function HemingwayUI.HWDebug_ItemSimulatorItemEntry.GetEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_ItemSimulatorItemEntry_GetEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_ItemSimulatorItemEntry_GetEquipmentItem) == 0x000008, "Wrong alignment on HWDebug_ItemSimulatorItemEntry_GetEquipmentItem");
static_assert(sizeof(HWDebug_ItemSimulatorItemEntry_GetEquipmentItem) == 0x000008, "Wrong size on HWDebug_ItemSimulatorItemEntry_GetEquipmentItem");
static_assert(offsetof(HWDebug_ItemSimulatorItemEntry_GetEquipmentItem, ReturnValue) == 0x000000, "Member 'HWDebug_ItemSimulatorItemEntry_GetEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_ItemSimulatorItemEntry.GetSlotDisplay
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_ItemSimulatorItemEntry_GetSlotDisplay final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_ItemSimulatorItemEntry_GetSlotDisplay) == 0x000008, "Wrong alignment on HWDebug_ItemSimulatorItemEntry_GetSlotDisplay");
static_assert(sizeof(HWDebug_ItemSimulatorItemEntry_GetSlotDisplay) == 0x000010, "Wrong size on HWDebug_ItemSimulatorItemEntry_GetSlotDisplay");
static_assert(offsetof(HWDebug_ItemSimulatorItemEntry_GetSlotDisplay, ReturnValue) == 0x000000, "Member 'HWDebug_ItemSimulatorItemEntry_GetSlotDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_ItemSimulatorItemEntry.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct HWDebug_ItemSimulatorItemEntry_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_ItemSimulatorItemEntry_IsEquipped) == 0x000001, "Wrong alignment on HWDebug_ItemSimulatorItemEntry_IsEquipped");
static_assert(sizeof(HWDebug_ItemSimulatorItemEntry_IsEquipped) == 0x000001, "Wrong size on HWDebug_ItemSimulatorItemEntry_IsEquipped");
static_assert(offsetof(HWDebug_ItemSimulatorItemEntry_IsEquipped, ReturnValue) == 0x000000, "Member 'HWDebug_ItemSimulatorItemEntry_IsEquipped::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_ItemSimulatorWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWDebug_ItemSimulatorWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWDebug_ItemSimulatorWidget.PopulatedItemEntry
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_ItemSimulatorWidget_PopulatedItemEntry final
{
public:
	class UHWDebug_ItemSimulatorItemEntry*        ItemEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_ItemSimulatorWidget_PopulatedItemEntry) == 0x000008, "Wrong alignment on HWDebug_ItemSimulatorWidget_PopulatedItemEntry");
static_assert(sizeof(HWDebug_ItemSimulatorWidget_PopulatedItemEntry) == 0x000008, "Wrong size on HWDebug_ItemSimulatorWidget_PopulatedItemEntry");
static_assert(offsetof(HWDebug_ItemSimulatorWidget_PopulatedItemEntry, ItemEntry) == 0x000000, "Member 'HWDebug_ItemSimulatorWidget_PopulatedItemEntry::ItemEntry' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.CustomModifierFieldAdded
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorEditableEntry_CustomModifierFieldAdded final
{
public:
	class UHWHUDEditorEditableEntryCustomField*   AddedCustomField;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_CustomModifierFieldAdded) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntry_CustomModifierFieldAdded");
static_assert(sizeof(HWHUDEditorEditableEntry_CustomModifierFieldAdded) == 0x000008, "Wrong size on HWHUDEditorEditableEntry_CustomModifierFieldAdded");
static_assert(offsetof(HWHUDEditorEditableEntry_CustomModifierFieldAdded, AddedCustomField) == 0x000000, "Member 'HWHUDEditorEditableEntry_CustomModifierFieldAdded::AddedCustomField' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.CustomModifierFieldRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorEditableEntry_CustomModifierFieldRemoved final
{
public:
	class UHWHUDEditorEditableEntryCustomField*   RemovedCustomField;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_CustomModifierFieldRemoved) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntry_CustomModifierFieldRemoved");
static_assert(sizeof(HWHUDEditorEditableEntry_CustomModifierFieldRemoved) == 0x000008, "Wrong size on HWHUDEditorEditableEntry_CustomModifierFieldRemoved");
static_assert(offsetof(HWHUDEditorEditableEntry_CustomModifierFieldRemoved, RemovedCustomField) == 0x000000, "Member 'HWHUDEditorEditableEntry_CustomModifierFieldRemoved::RemovedCustomField' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.DisplayGenericModifierData
// 0x000C (0x000C - 0x0000)
struct HWHUDEditorEditableEntry_DisplayGenericModifierData final
{
public:
	struct FHWUIStyleLocalGenericModifier         GenericModifier;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_DisplayGenericModifierData) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntry_DisplayGenericModifierData");
static_assert(sizeof(HWHUDEditorEditableEntry_DisplayGenericModifierData) == 0x00000C, "Wrong size on HWHUDEditorEditableEntry_DisplayGenericModifierData");
static_assert(offsetof(HWHUDEditorEditableEntry_DisplayGenericModifierData, GenericModifier) == 0x000000, "Member 'HWHUDEditorEditableEntry_DisplayGenericModifierData::GenericModifier' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.DisplayLocalModifier
// 0x0088 (0x0088 - 0x0000)
struct HWHUDEditorEditableEntry_DisplayLocalModifier final
{
public:
	struct FHWUIStyleLocalModifier                LocalModifier;                                     // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_DisplayLocalModifier) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntry_DisplayLocalModifier");
static_assert(sizeof(HWHUDEditorEditableEntry_DisplayLocalModifier) == 0x000088, "Wrong size on HWHUDEditorEditableEntry_DisplayLocalModifier");
static_assert(offsetof(HWHUDEditorEditableEntry_DisplayLocalModifier, LocalModifier) == 0x000000, "Member 'HWHUDEditorEditableEntry_DisplayLocalModifier::LocalModifier' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.EntrySelectedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorEditableEntry_EntrySelectedStateChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_EntrySelectedStateChanged) == 0x000001, "Wrong alignment on HWHUDEditorEditableEntry_EntrySelectedStateChanged");
static_assert(sizeof(HWHUDEditorEditableEntry_EntrySelectedStateChanged) == 0x000001, "Wrong size on HWHUDEditorEditableEntry_EntrySelectedStateChanged");
static_assert(offsetof(HWHUDEditorEditableEntry_EntrySelectedStateChanged, bIsSelected) == 0x000000, "Member 'HWHUDEditorEditableEntry_EntrySelectedStateChanged::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.HandleDragStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HWHUDEditorEditableEntry_HandleDragStateChanged final
{
public:
	class UHWDragArea*                            DragArea;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsDragging;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWHUDEditorEditableEntry_HandleDragStateChanged) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntry_HandleDragStateChanged");
static_assert(sizeof(HWHUDEditorEditableEntry_HandleDragStateChanged) == 0x000010, "Wrong size on HWHUDEditorEditableEntry_HandleDragStateChanged");
static_assert(offsetof(HWHUDEditorEditableEntry_HandleDragStateChanged, DragArea) == 0x000000, "Member 'HWHUDEditorEditableEntry_HandleDragStateChanged::DragArea' has a wrong offset!");
static_assert(offsetof(HWHUDEditorEditableEntry_HandleDragStateChanged, bNewIsDragging) == 0x000008, "Member 'HWHUDEditorEditableEntry_HandleDragStateChanged::bNewIsDragging' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.SetEntryVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorEditableEntry_SetEntryVisibility final
{
public:
	bool                                          bNewIsVisible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_SetEntryVisibility) == 0x000001, "Wrong alignment on HWHUDEditorEditableEntry_SetEntryVisibility");
static_assert(sizeof(HWHUDEditorEditableEntry_SetEntryVisibility) == 0x000001, "Wrong size on HWHUDEditorEditableEntry_SetEntryVisibility");
static_assert(offsetof(HWHUDEditorEditableEntry_SetEntryVisibility, bNewIsVisible) == 0x000000, "Member 'HWHUDEditorEditableEntry_SetEntryVisibility::bNewIsVisible' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntry_SetOpacity final
{
public:
	float                                         NewOpacity;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_SetOpacity) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntry_SetOpacity");
static_assert(sizeof(HWHUDEditorEditableEntry_SetOpacity) == 0x000004, "Wrong size on HWHUDEditorEditableEntry_SetOpacity");
static_assert(offsetof(HWHUDEditorEditableEntry_SetOpacity, NewOpacity) == 0x000000, "Member 'HWHUDEditorEditableEntry_SetOpacity::NewOpacity' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntry.SetScale
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntry_SetScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntry_SetScale) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntry_SetScale");
static_assert(sizeof(HWHUDEditorEditableEntry_SetScale) == 0x000004, "Wrong size on HWHUDEditorEditableEntry_SetScale");
static_assert(offsetof(HWHUDEditorEditableEntry_SetScale, NewScale) == 0x000000, "Member 'HWHUDEditorEditableEntry_SetScale::NewScale' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreItemEntry.GetEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_MockItemStoreItemEntry_GetEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreItemEntry_GetEquipmentItem) == 0x000008, "Wrong alignment on HWDebug_MockItemStoreItemEntry_GetEquipmentItem");
static_assert(sizeof(HWDebug_MockItemStoreItemEntry_GetEquipmentItem) == 0x000008, "Wrong size on HWDebug_MockItemStoreItemEntry_GetEquipmentItem");
static_assert(offsetof(HWDebug_MockItemStoreItemEntry_GetEquipmentItem, ReturnValue) == 0x000000, "Member 'HWDebug_MockItemStoreItemEntry_GetEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreItemEntry.GetOwnedGold
// 0x0004 (0x0004 - 0x0000)
struct HWDebug_MockItemStoreItemEntry_GetOwnedGold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreItemEntry_GetOwnedGold) == 0x000004, "Wrong alignment on HWDebug_MockItemStoreItemEntry_GetOwnedGold");
static_assert(sizeof(HWDebug_MockItemStoreItemEntry_GetOwnedGold) == 0x000004, "Wrong size on HWDebug_MockItemStoreItemEntry_GetOwnedGold");
static_assert(offsetof(HWDebug_MockItemStoreItemEntry_GetOwnedGold, ReturnValue) == 0x000000, "Member 'HWDebug_MockItemStoreItemEntry_GetOwnedGold::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreItemEntry.GetPrice
// 0x0004 (0x0004 - 0x0000)
struct HWDebug_MockItemStoreItemEntry_GetPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreItemEntry_GetPrice) == 0x000004, "Wrong alignment on HWDebug_MockItemStoreItemEntry_GetPrice");
static_assert(sizeof(HWDebug_MockItemStoreItemEntry_GetPrice) == 0x000004, "Wrong size on HWDebug_MockItemStoreItemEntry_GetPrice");
static_assert(offsetof(HWDebug_MockItemStoreItemEntry_GetPrice, ReturnValue) == 0x000000, "Member 'HWDebug_MockItemStoreItemEntry_GetPrice::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreItemEntry.GetSlotDisplay
// 0x0010 (0x0010 - 0x0000)
struct HWDebug_MockItemStoreItemEntry_GetSlotDisplay final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreItemEntry_GetSlotDisplay) == 0x000008, "Wrong alignment on HWDebug_MockItemStoreItemEntry_GetSlotDisplay");
static_assert(sizeof(HWDebug_MockItemStoreItemEntry_GetSlotDisplay) == 0x000010, "Wrong size on HWDebug_MockItemStoreItemEntry_GetSlotDisplay");
static_assert(offsetof(HWDebug_MockItemStoreItemEntry_GetSlotDisplay, ReturnValue) == 0x000000, "Member 'HWDebug_MockItemStoreItemEntry_GetSlotDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreItemEntry.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct HWDebug_MockItemStoreItemEntry_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreItemEntry_IsEquipped) == 0x000001, "Wrong alignment on HWDebug_MockItemStoreItemEntry_IsEquipped");
static_assert(sizeof(HWDebug_MockItemStoreItemEntry_IsEquipped) == 0x000001, "Wrong size on HWDebug_MockItemStoreItemEntry_IsEquipped");
static_assert(offsetof(HWDebug_MockItemStoreItemEntry_IsEquipped, ReturnValue) == 0x000000, "Member 'HWDebug_MockItemStoreItemEntry_IsEquipped::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInputKeyScrollBox.SetbInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWInputKeyScrollBox_SetbInputEnabled final
{
public:
	bool                                          bSetInputEnabled;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInputKeyScrollBox_SetbInputEnabled) == 0x000001, "Wrong alignment on HWInputKeyScrollBox_SetbInputEnabled");
static_assert(sizeof(HWInputKeyScrollBox_SetbInputEnabled) == 0x000001, "Wrong size on HWInputKeyScrollBox_SetbInputEnabled");
static_assert(offsetof(HWInputKeyScrollBox_SetbInputEnabled, bSetInputEnabled) == 0x000000, "Member 'HWInputKeyScrollBox_SetbInputEnabled::bSetInputEnabled' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWDebug_MockItemStoreWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWDebug_MockItemStoreWidget.PopulatedItemEntry
// 0x0008 (0x0008 - 0x0000)
struct HWDebug_MockItemStoreWidget_PopulatedItemEntry final
{
public:
	class UHWDebug_MockItemStoreItemEntry*        ItemEntry;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDebug_MockItemStoreWidget_PopulatedItemEntry) == 0x000008, "Wrong alignment on HWDebug_MockItemStoreWidget_PopulatedItemEntry");
static_assert(sizeof(HWDebug_MockItemStoreWidget_PopulatedItemEntry) == 0x000008, "Wrong size on HWDebug_MockItemStoreWidget_PopulatedItemEntry");
static_assert(offsetof(HWDebug_MockItemStoreWidget_PopulatedItemEntry, ItemEntry) == 0x000000, "Member 'HWDebug_MockItemStoreWidget_PopulatedItemEntry::ItemEntry' has a wrong offset!");

// Function HemingwayUI.HWAbilityHudWidget.GetAbilityWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWAbilityHudWidget_GetAbilityWidgets final
{
public:
	TArray<class UHWActivatableEquipmentWidget*>  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityHudWidget_GetAbilityWidgets) == 0x000008, "Wrong alignment on HWAbilityHudWidget_GetAbilityWidgets");
static_assert(sizeof(HWAbilityHudWidget_GetAbilityWidgets) == 0x000010, "Wrong size on HWAbilityHudWidget_GetAbilityWidgets");
static_assert(offsetof(HWAbilityHudWidget_GetAbilityWidgets, ReturnValue) == 0x000000, "Member 'HWAbilityHudWidget_GetAbilityWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWImage.SetColorStyleTag
// 0x0008 (0x0008 - 0x0000)
struct HWImage_SetColorStyleTag final
{
public:
	struct FGameplayTag                           NewStyleTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWImage_SetColorStyleTag) == 0x000004, "Wrong alignment on HWImage_SetColorStyleTag");
static_assert(sizeof(HWImage_SetColorStyleTag) == 0x000008, "Wrong size on HWImage_SetColorStyleTag");
static_assert(offsetof(HWImage_SetColorStyleTag, NewStyleTag) == 0x000000, "Member 'HWImage_SetColorStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWImage.SetFromIconInfo
// 0x0010 (0x0010 - 0x0000)
struct HWImage_SetFromIconInfo final
{
public:
	const class UIconInfo*                        IconInfo;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateMaterialInstance;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWImage_SetFromIconInfo) == 0x000008, "Wrong alignment on HWImage_SetFromIconInfo");
static_assert(sizeof(HWImage_SetFromIconInfo) == 0x000010, "Wrong size on HWImage_SetFromIconInfo");
static_assert(offsetof(HWImage_SetFromIconInfo, IconInfo) == 0x000000, "Member 'HWImage_SetFromIconInfo::IconInfo' has a wrong offset!");
static_assert(offsetof(HWImage_SetFromIconInfo, bCreateMaterialInstance) == 0x000008, "Member 'HWImage_SetFromIconInfo::bCreateMaterialInstance' has a wrong offset!");

// Function HemingwayUI.HWImage.SetSoftTextureParameterValue
// 0x0030 (0x0030 - 0x0000)
struct HWImage_SetSoftTextureParameterValue final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWImage_SetSoftTextureParameterValue) == 0x000008, "Wrong alignment on HWImage_SetSoftTextureParameterValue");
static_assert(sizeof(HWImage_SetSoftTextureParameterValue) == 0x000030, "Wrong size on HWImage_SetSoftTextureParameterValue");
static_assert(offsetof(HWImage_SetSoftTextureParameterValue, ParameterName) == 0x000000, "Member 'HWImage_SetSoftTextureParameterValue::ParameterName' has a wrong offset!");
static_assert(offsetof(HWImage_SetSoftTextureParameterValue, Texture) == 0x000008, "Member 'HWImage_SetSoftTextureParameterValue::Texture' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptDisplayer.OnDisplayInfoAdded
// 0x0030 (0x0030 - 0x0000)
struct HWAbilityPromptDisplayer_OnDisplayInfoAdded final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptDisplayer_OnDisplayInfoAdded) == 0x000008, "Wrong alignment on HWAbilityPromptDisplayer_OnDisplayInfoAdded");
static_assert(sizeof(HWAbilityPromptDisplayer_OnDisplayInfoAdded) == 0x000030, "Wrong size on HWAbilityPromptDisplayer_OnDisplayInfoAdded");
static_assert(offsetof(HWAbilityPromptDisplayer_OnDisplayInfoAdded, InDisplayInfo) == 0x000000, "Member 'HWAbilityPromptDisplayer_OnDisplayInfoAdded::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptDisplayer.OnDisplayInfoHidden
// 0x0030 (0x0030 - 0x0000)
struct HWAbilityPromptDisplayer_OnDisplayInfoHidden final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptDisplayer_OnDisplayInfoHidden) == 0x000008, "Wrong alignment on HWAbilityPromptDisplayer_OnDisplayInfoHidden");
static_assert(sizeof(HWAbilityPromptDisplayer_OnDisplayInfoHidden) == 0x000030, "Wrong size on HWAbilityPromptDisplayer_OnDisplayInfoHidden");
static_assert(offsetof(HWAbilityPromptDisplayer_OnDisplayInfoHidden, InDisplayInfo) == 0x000000, "Member 'HWAbilityPromptDisplayer_OnDisplayInfoHidden::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptDisplayer.OnDisplayInfoRemoved
// 0x0030 (0x0030 - 0x0000)
struct HWAbilityPromptDisplayer_OnDisplayInfoRemoved final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptDisplayer_OnDisplayInfoRemoved) == 0x000008, "Wrong alignment on HWAbilityPromptDisplayer_OnDisplayInfoRemoved");
static_assert(sizeof(HWAbilityPromptDisplayer_OnDisplayInfoRemoved) == 0x000030, "Wrong size on HWAbilityPromptDisplayer_OnDisplayInfoRemoved");
static_assert(offsetof(HWAbilityPromptDisplayer_OnDisplayInfoRemoved, InDisplayInfo) == 0x000000, "Member 'HWAbilityPromptDisplayer_OnDisplayInfoRemoved::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptDisplayer.OnDisplayInfoShown
// 0x0030 (0x0030 - 0x0000)
struct HWAbilityPromptDisplayer_OnDisplayInfoShown final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptDisplayer_OnDisplayInfoShown) == 0x000008, "Wrong alignment on HWAbilityPromptDisplayer_OnDisplayInfoShown");
static_assert(sizeof(HWAbilityPromptDisplayer_OnDisplayInfoShown) == 0x000030, "Wrong size on HWAbilityPromptDisplayer_OnDisplayInfoShown");
static_assert(offsetof(HWAbilityPromptDisplayer_OnDisplayInfoShown, InDisplayInfo) == 0x000000, "Member 'HWAbilityPromptDisplayer_OnDisplayInfoShown::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialEntryWidget.HighlightEntry
// 0x0001 (0x0001 - 0x0000)
struct HWAbilityPromptRadialEntryWidget_HighlightEntry final
{
public:
	bool                                          NewIsHighlighted;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialEntryWidget_HighlightEntry) == 0x000001, "Wrong alignment on HWAbilityPromptRadialEntryWidget_HighlightEntry");
static_assert(sizeof(HWAbilityPromptRadialEntryWidget_HighlightEntry) == 0x000001, "Wrong size on HWAbilityPromptRadialEntryWidget_HighlightEntry");
static_assert(offsetof(HWAbilityPromptRadialEntryWidget_HighlightEntry, NewIsHighlighted) == 0x000000, "Member 'HWAbilityPromptRadialEntryWidget_HighlightEntry::NewIsHighlighted' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialEntryWidget.SelectEntry
// 0x0001 (0x0001 - 0x0000)
struct HWAbilityPromptRadialEntryWidget_SelectEntry final
{
public:
	bool                                          NewIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialEntryWidget_SelectEntry) == 0x000001, "Wrong alignment on HWAbilityPromptRadialEntryWidget_SelectEntry");
static_assert(sizeof(HWAbilityPromptRadialEntryWidget_SelectEntry) == 0x000001, "Wrong size on HWAbilityPromptRadialEntryWidget_SelectEntry");
static_assert(offsetof(HWAbilityPromptRadialEntryWidget_SelectEntry, NewIsSelected) == 0x000000, "Member 'HWAbilityPromptRadialEntryWidget_SelectEntry::NewIsSelected' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialGodEntry.DisplayCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWAbilityPromptRadialGodEntry_DisplayCharacterItem final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialGodEntry_DisplayCharacterItem) == 0x000008, "Wrong alignment on HWAbilityPromptRadialGodEntry_DisplayCharacterItem");
static_assert(sizeof(HWAbilityPromptRadialGodEntry_DisplayCharacterItem) == 0x000008, "Wrong size on HWAbilityPromptRadialGodEntry_DisplayCharacterItem");
static_assert(offsetof(HWAbilityPromptRadialGodEntry_DisplayCharacterItem, CharacterItem) == 0x000000, "Member 'HWAbilityPromptRadialGodEntry_DisplayCharacterItem::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialGodEntry.GetAssociatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState) == 0x000008, "Wrong alignment on HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState");
static_assert(sizeof(HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState) == 0x000008, "Wrong size on HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState");
static_assert(offsetof(HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState, ReturnValue) == 0x000000, "Member 'HWAbilityPromptRadialGodEntry_GetAssociatedPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAbilityPromptRadialGodEntry.GetAttitudeTowardsLocal
// 0x0001 (0x0001 - 0x0000)
struct HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal final
{
public:
	ETeamAttitude                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal) == 0x000001, "Wrong alignment on HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal");
static_assert(sizeof(HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal) == 0x000001, "Wrong size on HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal");
static_assert(offsetof(HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal, ReturnValue) == 0x000000, "Member 'HWAbilityPromptRadialGodEntry_GetAttitudeTowardsLocal::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAbilityReticleWidget.BP_OnReticleLockedOn
// 0x0001 (0x0001 - 0x0000)
struct HWAbilityReticleWidget_BP_OnReticleLockedOn final
{
public:
	bool                                          bNewLockedOn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityReticleWidget_BP_OnReticleLockedOn) == 0x000001, "Wrong alignment on HWAbilityReticleWidget_BP_OnReticleLockedOn");
static_assert(sizeof(HWAbilityReticleWidget_BP_OnReticleLockedOn) == 0x000001, "Wrong size on HWAbilityReticleWidget_BP_OnReticleLockedOn");
static_assert(offsetof(HWAbilityReticleWidget_BP_OnReticleLockedOn, bNewLockedOn) == 0x000000, "Member 'HWAbilityReticleWidget_BP_OnReticleLockedOn::bNewLockedOn' has a wrong offset!");

// Function HemingwayUI.HWAbilityReticleWidget.OnReticleLockedOn
// 0x0001 (0x0001 - 0x0000)
struct HWAbilityReticleWidget_OnReticleLockedOn final
{
public:
	bool                                          bNewLockedOn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityReticleWidget_OnReticleLockedOn) == 0x000001, "Wrong alignment on HWAbilityReticleWidget_OnReticleLockedOn");
static_assert(sizeof(HWAbilityReticleWidget_OnReticleLockedOn) == 0x000001, "Wrong size on HWAbilityReticleWidget_OnReticleLockedOn");
static_assert(offsetof(HWAbilityReticleWidget_OnReticleLockedOn, bNewLockedOn) == 0x000000, "Member 'HWAbilityReticleWidget_OnReticleLockedOn::bNewLockedOn' has a wrong offset!");

// Function HemingwayUI.HWAbilityReticleWidget.GetTargetCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWAbilityReticleWidget_GetTargetCharacterItem final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAbilityReticleWidget_GetTargetCharacterItem) == 0x000008, "Wrong alignment on HWAbilityReticleWidget_GetTargetCharacterItem");
static_assert(sizeof(HWAbilityReticleWidget_GetTargetCharacterItem) == 0x000008, "Wrong size on HWAbilityReticleWidget_GetTargetCharacterItem");
static_assert(offsetof(HWAbilityReticleWidget_GetTargetCharacterItem, ReturnValue) == 0x000000, "Member 'HWAbilityReticleWidget_GetTargetCharacterItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeEntryWidget.SetEventData
// 0x0088 (0x0088 - 0x0000)
struct HWAccoladeEntryWidget_SetEventData final
{
public:
	struct FHWEventContext                        EventContext;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeEntryWidget_SetEventData) == 0x000008, "Wrong alignment on HWAccoladeEntryWidget_SetEventData");
static_assert(sizeof(HWAccoladeEntryWidget_SetEventData) == 0x000088, "Wrong size on HWAccoladeEntryWidget_SetEventData");
static_assert(offsetof(HWAccoladeEntryWidget_SetEventData, EventContext) == 0x000000, "Member 'HWAccoladeEntryWidget_SetEventData::EventContext' has a wrong offset!");

// Function HemingwayUI.HWAccoladeEntryWidget.StartDisplay
// 0x0004 (0x0004 - 0x0000)
struct HWAccoladeEntryWidget_StartDisplay final
{
public:
	float                                         FullDuration;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeEntryWidget_StartDisplay) == 0x000004, "Wrong alignment on HWAccoladeEntryWidget_StartDisplay");
static_assert(sizeof(HWAccoladeEntryWidget_StartDisplay) == 0x000004, "Wrong size on HWAccoladeEntryWidget_StartDisplay");
static_assert(offsetof(HWAccoladeEntryWidget_StartDisplay, FullDuration) == 0x000000, "Member 'HWAccoladeEntryWidget_StartDisplay::FullDuration' has a wrong offset!");

// Function HemingwayUI.HWAccoladeEntryWidget.GetOutroDuration
// 0x0004 (0x0004 - 0x0000)
struct HWAccoladeEntryWidget_GetOutroDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeEntryWidget_GetOutroDuration) == 0x000004, "Wrong alignment on HWAccoladeEntryWidget_GetOutroDuration");
static_assert(sizeof(HWAccoladeEntryWidget_GetOutroDuration) == 0x000004, "Wrong size on HWAccoladeEntryWidget_GetOutroDuration");
static_assert(offsetof(HWAccoladeEntryWidget_GetOutroDuration, ReturnValue) == 0x000000, "Member 'HWAccoladeEntryWidget_GetOutroDuration::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeEntryWidget.GetSoundSourceToPlay
// 0x0028 (0x0028 - 0x0000)
struct HWAccoladeEntryWidget_GetSoundSourceToPlay final
{
public:
	TSoftObjectPtr<class UMetaSoundSource>        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeEntryWidget_GetSoundSourceToPlay) == 0x000008, "Wrong alignment on HWAccoladeEntryWidget_GetSoundSourceToPlay");
static_assert(sizeof(HWAccoladeEntryWidget_GetSoundSourceToPlay) == 0x000028, "Wrong size on HWAccoladeEntryWidget_GetSoundSourceToPlay");
static_assert(offsetof(HWAccoladeEntryWidget_GetSoundSourceToPlay, ReturnValue) == 0x000000, "Member 'HWAccoladeEntryWidget_GetSoundSourceToPlay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidget.SetAccoladeData
// 0x00E8 (0x00E8 - 0x0000)
struct HWAccoladeWidget_SetAccoladeData final
{
public:
	struct FGameplayTag                           InAccoladeTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWAccoladeConfig                      InAccoladeConfig;                                  // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWEventContext                        InAccoladeContext;                                 // 0x0060(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidget_SetAccoladeData) == 0x000008, "Wrong alignment on HWAccoladeWidget_SetAccoladeData");
static_assert(sizeof(HWAccoladeWidget_SetAccoladeData) == 0x0000E8, "Wrong size on HWAccoladeWidget_SetAccoladeData");
static_assert(offsetof(HWAccoladeWidget_SetAccoladeData, InAccoladeTag) == 0x000000, "Member 'HWAccoladeWidget_SetAccoladeData::InAccoladeTag' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidget_SetAccoladeData, InAccoladeConfig) == 0x000008, "Member 'HWAccoladeWidget_SetAccoladeData::InAccoladeConfig' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidget_SetAccoladeData, InAccoladeContext) == 0x000060, "Member 'HWAccoladeWidget_SetAccoladeData::InAccoladeContext' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidget.GetAccoladeTag
// 0x0008 (0x0008 - 0x0000)
struct HWAccoladeWidget_GetAccoladeTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidget_GetAccoladeTag) == 0x000004, "Wrong alignment on HWAccoladeWidget_GetAccoladeTag");
static_assert(sizeof(HWAccoladeWidget_GetAccoladeTag) == 0x000008, "Wrong size on HWAccoladeWidget_GetAccoladeTag");
static_assert(offsetof(HWAccoladeWidget_GetAccoladeTag, ReturnValue) == 0x000000, "Member 'HWAccoladeWidget_GetAccoladeTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidget.GetOutroDuration
// 0x0004 (0x0004 - 0x0000)
struct HWAccoladeWidget_GetOutroDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidget_GetOutroDuration) == 0x000004, "Wrong alignment on HWAccoladeWidget_GetOutroDuration");
static_assert(sizeof(HWAccoladeWidget_GetOutroDuration) == 0x000004, "Wrong size on HWAccoladeWidget_GetOutroDuration");
static_assert(offsetof(HWAccoladeWidget_GetOutroDuration, ReturnValue) == 0x000000, "Member 'HWAccoladeWidget_GetOutroDuration::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidget.GetVOTagToPlay
// 0x0008 (0x0008 - 0x0000)
struct HWAccoladeWidget_GetVOTagToPlay final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidget_GetVOTagToPlay) == 0x000004, "Wrong alignment on HWAccoladeWidget_GetVOTagToPlay");
static_assert(sizeof(HWAccoladeWidget_GetVOTagToPlay) == 0x000008, "Wrong size on HWAccoladeWidget_GetVOTagToPlay");
static_assert(offsetof(HWAccoladeWidget_GetVOTagToPlay, ReturnValue) == 0x000000, "Member 'HWAccoladeWidget_GetVOTagToPlay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleAccoladeComponentUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWAccoladeWidgetManager_HandleAccoladeComponentUpdated final
{
public:
	class UHWAccoladeComponent*                   AccoladeComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleAccoladeComponentUpdated) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleAccoladeComponentUpdated");
static_assert(sizeof(HWAccoladeWidgetManager_HandleAccoladeComponentUpdated) == 0x000008, "Wrong size on HWAccoladeWidgetManager_HandleAccoladeComponentUpdated");
static_assert(offsetof(HWAccoladeWidgetManager_HandleAccoladeComponentUpdated, AccoladeComponent) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleAccoladeComponentUpdated::AccoladeComponent' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleAnnouncementComponentUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated final
{
public:
	class UHWAnnouncementComponent*               AnnouncementComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated");
static_assert(sizeof(HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated) == 0x000008, "Wrong size on HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated");
static_assert(offsetof(HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated, AnnouncementComponent) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleAnnouncementComponentUpdated::AnnouncementComponent' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleGameStatsTrackerReplicated
// 0x0008 (0x0008 - 0x0000)
struct HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated final
{
public:
	class AHWGameStatsTracker*                    GameStatsTracker;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated");
static_assert(sizeof(HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated) == 0x000008, "Wrong size on HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated");
static_assert(offsetof(HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated, GameStatsTracker) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleGameStatsTrackerReplicated::GameStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleNewAnnouncementAdded
// 0x0010 (0x0010 - 0x0000)
struct HWAccoladeWidgetManager_HandleNewAnnouncementAdded final
{
public:
	class AHWGameStatsTracker*                    GameStatsTracker;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AnnouncementTag;                                   // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleNewAnnouncementAdded) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleNewAnnouncementAdded");
static_assert(sizeof(HWAccoladeWidgetManager_HandleNewAnnouncementAdded) == 0x000010, "Wrong size on HWAccoladeWidgetManager_HandleNewAnnouncementAdded");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewAnnouncementAdded, GameStatsTracker) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleNewAnnouncementAdded::GameStatsTracker' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewAnnouncementAdded, AnnouncementTag) == 0x000008, "Member 'HWAccoladeWidgetManager_HandleNewAnnouncementAdded::AnnouncementTag' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleNewPlayerAccoladeAdded
// 0x0098 (0x0098 - 0x0000)
struct HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded final
{
public:
	class AHWPlayerStatsTracker*                  PlayerStatsTracker;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AccoladeTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        AccoladeContext;                                   // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded");
static_assert(sizeof(HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded) == 0x000098, "Wrong size on HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded, PlayerStatsTracker) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded::PlayerStatsTracker' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded, AccoladeTag) == 0x000008, "Member 'HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded::AccoladeTag' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded, AccoladeContext) == 0x000010, "Member 'HWAccoladeWidgetManager_HandleNewPlayerAccoladeAdded::AccoladeContext' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleNewTeamAccoladeAdded
// 0x0098 (0x0098 - 0x0000)
struct HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded final
{
public:
	class AHWTeamStatsTracker*                    TeamStatsTracker;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AccoladeTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        AccoladeContext;                                   // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded");
static_assert(sizeof(HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded) == 0x000098, "Wrong size on HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded, TeamStatsTracker) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded::TeamStatsTracker' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded, AccoladeTag) == 0x000008, "Member 'HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded::AccoladeTag' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded, AccoladeContext) == 0x000010, "Member 'HWAccoladeWidgetManager_HandleNewTeamAccoladeAdded::AccoladeContext' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandlePlayerStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerStatsTracker*                  PlayerStatsTracker;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated");
static_assert(sizeof(HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated) == 0x000010, "Wrong size on HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated");
static_assert(offsetof(HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated, PlayerState) == 0x000000, "Member 'HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated, PlayerStatsTracker) == 0x000008, "Member 'HWAccoladeWidgetManager_HandlePlayerStatsTrackerReplicated::PlayerStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWAccoladeWidgetManager.HandleTeamStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamStatsTracker*                    TeamStatsTracker;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated");
static_assert(sizeof(HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated) == 0x000010, "Wrong size on HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated");
static_assert(offsetof(HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated, TeamState) == 0x000000, "Member 'HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated::TeamState' has a wrong offset!");
static_assert(offsetof(HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated, TeamStatsTracker) == 0x000008, "Member 'HWAccoladeWidgetManager_HandleTeamStatsTrackerReplicated::TeamStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWAimReticleWidget.HandleClientDamageEvent
// 0x0070 (0x0070 - 0x0000)
struct HWAimReticleWidget_HandleClientDamageEvent final
{
public:
	struct FHWCombatEvent                         CombatEvent;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAimReticleWidget_HandleClientDamageEvent) == 0x000008, "Wrong alignment on HWAimReticleWidget_HandleClientDamageEvent");
static_assert(sizeof(HWAimReticleWidget_HandleClientDamageEvent) == 0x000070, "Wrong size on HWAimReticleWidget_HandleClientDamageEvent");
static_assert(offsetof(HWAimReticleWidget_HandleClientDamageEvent, CombatEvent) == 0x000000, "Member 'HWAimReticleWidget_HandleClientDamageEvent::CombatEvent' has a wrong offset!");

// Function HemingwayUI.HWAimReticleWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWAimReticleWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAimReticleWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWAimReticleWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWAimReticleWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWAimReticleWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWAimReticleWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWAimReticleWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWAimReticleWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWAimReticleWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWAimReticleWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWAimReticleWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWAimReticleWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWAimReticleWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWAimReticleWidget.HandleOnEventAdded
// 0x0098 (0x0098 - 0x0000)
struct HWAimReticleWidget_HandleOnEventAdded final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bStomped;                                          // 0x0090(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAimReticleWidget_HandleOnEventAdded) == 0x000008, "Wrong alignment on HWAimReticleWidget_HandleOnEventAdded");
static_assert(sizeof(HWAimReticleWidget_HandleOnEventAdded) == 0x000098, "Wrong size on HWAimReticleWidget_HandleOnEventAdded");
static_assert(offsetof(HWAimReticleWidget_HandleOnEventAdded, EventTag) == 0x000000, "Member 'HWAimReticleWidget_HandleOnEventAdded::EventTag' has a wrong offset!");
static_assert(offsetof(HWAimReticleWidget_HandleOnEventAdded, EventContext) == 0x000008, "Member 'HWAimReticleWidget_HandleOnEventAdded::EventContext' has a wrong offset!");
static_assert(offsetof(HWAimReticleWidget_HandleOnEventAdded, bStomped) == 0x000090, "Member 'HWAimReticleWidget_HandleOnEventAdded::bStomped' has a wrong offset!");

// Function HemingwayUI.HWAimReticleWidget.SetIsTargeting
// 0x0001 (0x0001 - 0x0000)
struct HWAimReticleWidget_SetIsTargeting final
{
public:
	bool                                          bIsTargeting;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAimReticleWidget_SetIsTargeting) == 0x000001, "Wrong alignment on HWAimReticleWidget_SetIsTargeting");
static_assert(sizeof(HWAimReticleWidget_SetIsTargeting) == 0x000001, "Wrong size on HWAimReticleWidget_SetIsTargeting");
static_assert(offsetof(HWAimReticleWidget_SetIsTargeting, bIsTargeting) == 0x000000, "Member 'HWAimReticleWidget_SetIsTargeting::bIsTargeting' has a wrong offset!");

// Function HemingwayUI.HWGameAnnouncementsWidget.SetAnnouncementText
// 0x0018 (0x0018 - 0x0000)
struct HWGameAnnouncementsWidget_SetAnnouncementText final
{
public:
	class FText                                   InAnnouncementText;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameAnnouncementsWidget_SetAnnouncementText) == 0x000008, "Wrong alignment on HWGameAnnouncementsWidget_SetAnnouncementText");
static_assert(sizeof(HWGameAnnouncementsWidget_SetAnnouncementText) == 0x000018, "Wrong size on HWGameAnnouncementsWidget_SetAnnouncementText");
static_assert(offsetof(HWGameAnnouncementsWidget_SetAnnouncementText, InAnnouncementText) == 0x000000, "Member 'HWGameAnnouncementsWidget_SetAnnouncementText::InAnnouncementText' has a wrong offset!");

// Function HemingwayUI.HWKillTrackerWidget.DisplayGodKills
// 0x0004 (0x0004 - 0x0000)
struct HWKillTrackerWidget_DisplayGodKills final
{
public:
	int32                                         GodKillsCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKillTrackerWidget_DisplayGodKills) == 0x000004, "Wrong alignment on HWKillTrackerWidget_DisplayGodKills");
static_assert(sizeof(HWKillTrackerWidget_DisplayGodKills) == 0x000004, "Wrong size on HWKillTrackerWidget_DisplayGodKills");
static_assert(offsetof(HWKillTrackerWidget_DisplayGodKills, GodKillsCount) == 0x000000, "Member 'HWKillTrackerWidget_DisplayGodKills::GodKillsCount' has a wrong offset!");

// Function HemingwayUI.HWKillTrackerWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWKillTrackerWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKillTrackerWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWKillTrackerWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWKillTrackerWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWKillTrackerWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWKillTrackerWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWKillTrackerWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWKillTrackerWidget.OnGodKillsChanged
// 0x0004 (0x0004 - 0x0000)
struct HWKillTrackerWidget_OnGodKillsChanged final
{
public:
	int32                                         KillCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKillTrackerWidget_OnGodKillsChanged) == 0x000004, "Wrong alignment on HWKillTrackerWidget_OnGodKillsChanged");
static_assert(sizeof(HWKillTrackerWidget_OnGodKillsChanged) == 0x000004, "Wrong size on HWKillTrackerWidget_OnGodKillsChanged");
static_assert(offsetof(HWKillTrackerWidget_OnGodKillsChanged, KillCount) == 0x000000, "Member 'HWKillTrackerWidget_OnGodKillsChanged::KillCount' has a wrong offset!");

// Function HemingwayUI.HWKillTrackerWidget.OnSiegeMinionSpawned
// 0x0004 (0x0004 - 0x0000)
struct HWKillTrackerWidget_OnSiegeMinionSpawned final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKillTrackerWidget_OnSiegeMinionSpawned) == 0x000004, "Wrong alignment on HWKillTrackerWidget_OnSiegeMinionSpawned");
static_assert(sizeof(HWKillTrackerWidget_OnSiegeMinionSpawned) == 0x000004, "Wrong size on HWKillTrackerWidget_OnSiegeMinionSpawned");
static_assert(offsetof(HWKillTrackerWidget_OnSiegeMinionSpawned, TeamId) == 0x000000, "Member 'HWKillTrackerWidget_OnSiegeMinionSpawned::TeamId' has a wrong offset!");

// Function HemingwayUI.HWKillTrackerWidget.GetKillsBeforeSiegeMinionSpawns
// 0x0004 (0x0004 - 0x0000)
struct HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns) == 0x000004, "Wrong alignment on HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns");
static_assert(sizeof(HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns) == 0x000004, "Wrong size on HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns");
static_assert(offsetof(HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns, ReturnValue) == 0x000000, "Member 'HWKillTrackerWidget_GetKillsBeforeSiegeMinionSpawns::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.DisplayTicketCount
// 0x0004 (0x0004 - 0x0000)
struct HWTicketTrackerWidget_DisplayTicketCount final
{
public:
	int32                                         TicketCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_DisplayTicketCount) == 0x000004, "Wrong alignment on HWTicketTrackerWidget_DisplayTicketCount");
static_assert(sizeof(HWTicketTrackerWidget_DisplayTicketCount) == 0x000004, "Wrong size on HWTicketTrackerWidget_DisplayTicketCount");
static_assert(offsetof(HWTicketTrackerWidget_DisplayTicketCount, TicketCount) == 0x000000, "Member 'HWTicketTrackerWidget_DisplayTicketCount::TicketCount' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWTicketTrackerWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWTicketTrackerWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWTicketTrackerWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWTicketTrackerWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWTicketTrackerWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWTicketTrackerWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.OnTicketCountChanged
// 0x0004 (0x0004 - 0x0000)
struct HWTicketTrackerWidget_OnTicketCountChanged final
{
public:
	int32                                         TicketCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_OnTicketCountChanged) == 0x000004, "Wrong alignment on HWTicketTrackerWidget_OnTicketCountChanged");
static_assert(sizeof(HWTicketTrackerWidget_OnTicketCountChanged) == 0x000004, "Wrong size on HWTicketTrackerWidget_OnTicketCountChanged");
static_assert(offsetof(HWTicketTrackerWidget_OnTicketCountChanged, TicketCount) == 0x000000, "Member 'HWTicketTrackerWidget_OnTicketCountChanged::TicketCount' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.SuddenDeathChanged
// 0x0001 (0x0001 - 0x0000)
struct HWTicketTrackerWidget_SuddenDeathChanged final
{
public:
	EHWArenaSuddenDeathState                      CurrentSuddenDeathState;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_SuddenDeathChanged) == 0x000001, "Wrong alignment on HWTicketTrackerWidget_SuddenDeathChanged");
static_assert(sizeof(HWTicketTrackerWidget_SuddenDeathChanged) == 0x000001, "Wrong size on HWTicketTrackerWidget_SuddenDeathChanged");
static_assert(offsetof(HWTicketTrackerWidget_SuddenDeathChanged, CurrentSuddenDeathState) == 0x000000, "Member 'HWTicketTrackerWidget_SuddenDeathChanged::CurrentSuddenDeathState' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.GetMaxTicketCount
// 0x0004 (0x0004 - 0x0000)
struct HWTicketTrackerWidget_GetMaxTicketCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_GetMaxTicketCount) == 0x000004, "Wrong alignment on HWTicketTrackerWidget_GetMaxTicketCount");
static_assert(sizeof(HWTicketTrackerWidget_GetMaxTicketCount) == 0x000004, "Wrong size on HWTicketTrackerWidget_GetMaxTicketCount");
static_assert(offsetof(HWTicketTrackerWidget_GetMaxTicketCount, ReturnValue) == 0x000000, "Member 'HWTicketTrackerWidget_GetMaxTicketCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTicketTrackerWidget.GetSuddenDeathState
// 0x0001 (0x0001 - 0x0000)
struct HWTicketTrackerWidget_GetSuddenDeathState final
{
public:
	EHWArenaSuddenDeathState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTicketTrackerWidget_GetSuddenDeathState) == 0x000001, "Wrong alignment on HWTicketTrackerWidget_GetSuddenDeathState");
static_assert(sizeof(HWTicketTrackerWidget_GetSuddenDeathState) == 0x000001, "Wrong size on HWTicketTrackerWidget_GetSuddenDeathState");
static_assert(offsetof(HWTicketTrackerWidget_GetSuddenDeathState, ReturnValue) == 0x000000, "Member 'HWTicketTrackerWidget_GetSuddenDeathState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildEntry_Augment.DisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildEntry_Augment_DisplayItem final
{
public:
	const class UHWEquipmentItem*                 Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildEntry_Augment_DisplayItem) == 0x000008, "Wrong alignment on HWAutoBuyBuildEntry_Augment_DisplayItem");
static_assert(sizeof(HWAutoBuyBuildEntry_Augment_DisplayItem) == 0x000008, "Wrong size on HWAutoBuyBuildEntry_Augment_DisplayItem");
static_assert(offsetof(HWAutoBuyBuildEntry_Augment_DisplayItem, Item) == 0x000000, "Member 'HWAutoBuyBuildEntry_Augment_DisplayItem::Item' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildEntry_Augment.SelectItem
// 0x0001 (0x0001 - 0x0000)
struct HWAutoBuyBuildEntry_Augment_SelectItem final
{
public:
	bool                                          bIsFinalSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildEntry_Augment_SelectItem) == 0x000001, "Wrong alignment on HWAutoBuyBuildEntry_Augment_SelectItem");
static_assert(sizeof(HWAutoBuyBuildEntry_Augment_SelectItem) == 0x000001, "Wrong size on HWAutoBuyBuildEntry_Augment_SelectItem");
static_assert(offsetof(HWAutoBuyBuildEntry_Augment_SelectItem, bIsFinalSelection) == 0x000000, "Member 'HWAutoBuyBuildEntry_Augment_SelectItem::bIsFinalSelection' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildItemWidget.DisplayItem
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildItemWidget_DisplayItem final
{
public:
	const class UHWEquipmentItem*                 NewEquipmentItem;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildItemWidget_DisplayItem) == 0x000008, "Wrong alignment on HWAutoBuyBuildItemWidget_DisplayItem");
static_assert(sizeof(HWAutoBuyBuildItemWidget_DisplayItem) == 0x000008, "Wrong size on HWAutoBuyBuildItemWidget_DisplayItem");
static_assert(offsetof(HWAutoBuyBuildItemWidget_DisplayItem, NewEquipmentItem) == 0x000000, "Member 'HWAutoBuyBuildItemWidget_DisplayItem::NewEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.HandleABSActorChanged
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildSelector_HandleABSActorChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_HandleABSActorChanged) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_HandleABSActorChanged");
static_assert(sizeof(HWAutoBuyBuildSelector_HandleABSActorChanged) == 0x000008, "Wrong size on HWAutoBuyBuildSelector_HandleABSActorChanged");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleABSActorChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWAutoBuyBuildSelector_HandleABSActorChanged::CharacterAbilitySystemActor' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.HandleAutoBuyComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWAutoBuyComponent*                    NewAutoBuyComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged");
static_assert(sizeof(HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged) == 0x000010, "Wrong size on HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged, NewAutoBuyComponent) == 0x000008, "Member 'HWAutoBuyBuildSelector_HandleAutoBuyComponentChanged::NewAutoBuyComponent' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.HandleAutoBuyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWAutoBuyBuildSelector_HandleAutoBuyStateChanged final
{
public:
	EHWAutoBuyState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_HandleAutoBuyStateChanged) == 0x000001, "Wrong alignment on HWAutoBuyBuildSelector_HandleAutoBuyStateChanged");
static_assert(sizeof(HWAutoBuyBuildSelector_HandleAutoBuyStateChanged) == 0x000001, "Wrong size on HWAutoBuyBuildSelector_HandleAutoBuyStateChanged");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleAutoBuyStateChanged, NewState) == 0x000000, "Member 'HWAutoBuyBuildSelector_HandleAutoBuyStateChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.HandleCharacterItemChange
// 0x0018 (0x0018 - 0x0000)
struct HWAutoBuyBuildSelector_HandleCharacterItemChange final
{
public:
	TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 NewCharacterItem;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_HandleCharacterItemChange) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_HandleCharacterItemChange");
static_assert(sizeof(HWAutoBuyBuildSelector_HandleCharacterItemChange) == 0x000018, "Wrong size on HWAutoBuyBuildSelector_HandleCharacterItemChange");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleCharacterItemChange, LoadoutOwner) == 0x000000, "Member 'HWAutoBuyBuildSelector_HandleCharacterItemChange::LoadoutOwner' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_HandleCharacterItemChange, NewCharacterItem) == 0x000010, "Member 'HWAutoBuyBuildSelector_HandleCharacterItemChange::NewCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnAutoBuildEntryAdded
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildSelector_OnAutoBuildEntryAdded final
{
public:
	class UHWAutoBuyBuildEntry*                   Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnAutoBuildEntryAdded) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnAutoBuildEntryAdded");
static_assert(sizeof(HWAutoBuyBuildSelector_OnAutoBuildEntryAdded) == 0x000008, "Wrong size on HWAutoBuyBuildSelector_OnAutoBuildEntryAdded");
static_assert(offsetof(HWAutoBuyBuildSelector_OnAutoBuildEntryAdded, Entry) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnAutoBuildEntryAdded::Entry' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnAutoBuildEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWAutoBuyBuildSelector_OnAutoBuildEntrySelected final
{
public:
	bool                                          bIsFinalSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAutoBuyBuildEntry*                   Entry;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnAutoBuildEntrySelected) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnAutoBuildEntrySelected");
static_assert(sizeof(HWAutoBuyBuildSelector_OnAutoBuildEntrySelected) == 0x000010, "Wrong size on HWAutoBuyBuildSelector_OnAutoBuildEntrySelected");
static_assert(offsetof(HWAutoBuyBuildSelector_OnAutoBuildEntrySelected, bIsFinalSelection) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnAutoBuildEntrySelected::bIsFinalSelection' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_OnAutoBuildEntrySelected, Entry) == 0x000008, "Member 'HWAutoBuyBuildSelector_OnAutoBuildEntrySelected::Entry' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnBuildsReceived
// 0x0018 (0x0018 - 0x0000)
struct HWAutoBuyBuildSelector_OnBuildsReceived final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWGodBuild>                    InGodBuilds;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnBuildsReceived) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnBuildsReceived");
static_assert(sizeof(HWAutoBuyBuildSelector_OnBuildsReceived) == 0x000018, "Wrong size on HWAutoBuyBuildSelector_OnBuildsReceived");
static_assert(offsetof(HWAutoBuyBuildSelector_OnBuildsReceived, bSuccess) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnBuildsReceived::bSuccess' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_OnBuildsReceived, InGodBuilds) == 0x000008, "Member 'HWAutoBuyBuildSelector_OnBuildsReceived::InGodBuilds' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnFullBuildReceived
// 0x0198 (0x0198 - 0x0000)
struct HWAutoBuyBuildSelector_OnFullBuildReceived final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            InGodBuild;                                        // 0x0008(0x0190)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnFullBuildReceived) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnFullBuildReceived");
static_assert(sizeof(HWAutoBuyBuildSelector_OnFullBuildReceived) == 0x000198, "Wrong size on HWAutoBuyBuildSelector_OnFullBuildReceived");
static_assert(offsetof(HWAutoBuyBuildSelector_OnFullBuildReceived, bSuccess) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnFullBuildReceived::bSuccess' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_OnFullBuildReceived, InGodBuild) == 0x000008, "Member 'HWAutoBuyBuildSelector_OnFullBuildReceived::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnRelicEntryAdded
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildSelector_OnRelicEntryAdded final
{
public:
	class UHWAutoBuyBuildEntry_Augment*           Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnRelicEntryAdded) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnRelicEntryAdded");
static_assert(sizeof(HWAutoBuyBuildSelector_OnRelicEntryAdded) == 0x000008, "Wrong size on HWAutoBuyBuildSelector_OnRelicEntryAdded");
static_assert(offsetof(HWAutoBuyBuildSelector_OnRelicEntryAdded, Entry) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnRelicEntryAdded::Entry' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.OnRelicEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWAutoBuyBuildSelector_OnRelicEntrySelected final
{
public:
	bool                                          bIsFinalSelection;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAutoBuyBuildEntry_Augment*           Entry;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_OnRelicEntrySelected) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_OnRelicEntrySelected");
static_assert(sizeof(HWAutoBuyBuildSelector_OnRelicEntrySelected) == 0x000010, "Wrong size on HWAutoBuyBuildSelector_OnRelicEntrySelected");
static_assert(offsetof(HWAutoBuyBuildSelector_OnRelicEntrySelected, bIsFinalSelection) == 0x000000, "Member 'HWAutoBuyBuildSelector_OnRelicEntrySelected::bIsFinalSelection' has a wrong offset!");
static_assert(offsetof(HWAutoBuyBuildSelector_OnRelicEntrySelected, Entry) == 0x000008, "Member 'HWAutoBuyBuildSelector_OnRelicEntrySelected::Entry' has a wrong offset!");

// Function HemingwayUI.HWAutoBuyBuildSelector.PopulateBuilds
// 0x0008 (0x0008 - 0x0000)
struct HWAutoBuyBuildSelector_PopulateBuilds final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAutoBuyBuildSelector_PopulateBuilds) == 0x000008, "Wrong alignment on HWAutoBuyBuildSelector_PopulateBuilds");
static_assert(sizeof(HWAutoBuyBuildSelector_PopulateBuilds) == 0x000008, "Wrong size on HWAutoBuyBuildSelector_PopulateBuilds");
static_assert(offsetof(HWAutoBuyBuildSelector_PopulateBuilds, CharacterItem) == 0x000000, "Member 'HWAutoBuyBuildSelector_PopulateBuilds::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWDamageFeedbackWidget.DisplayDamageFeedback
// 0x0008 (0x0008 - 0x0000)
struct HWDamageFeedbackWidget_DisplayDamageFeedback final
{
public:
	EHWDamageFeedbackSide                         side;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Opacity;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDamageFeedbackWidget_DisplayDamageFeedback) == 0x000004, "Wrong alignment on HWDamageFeedbackWidget_DisplayDamageFeedback");
static_assert(sizeof(HWDamageFeedbackWidget_DisplayDamageFeedback) == 0x000008, "Wrong size on HWDamageFeedbackWidget_DisplayDamageFeedback");
static_assert(offsetof(HWDamageFeedbackWidget_DisplayDamageFeedback, side) == 0x000000, "Member 'HWDamageFeedbackWidget_DisplayDamageFeedback::side' has a wrong offset!");
static_assert(offsetof(HWDamageFeedbackWidget_DisplayDamageFeedback, Opacity) == 0x000004, "Member 'HWDamageFeedbackWidget_DisplayDamageFeedback::Opacity' has a wrong offset!");

// Function HemingwayUI.HWDamageFeedbackWidget.HandleLocalPlayerDamageTaken
// 0x00D8 (0x00D8 - 0x0000)
struct HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken) == 0x000008, "Wrong alignment on HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken");
static_assert(sizeof(HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken) == 0x0000D8, "Wrong size on HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken");
static_assert(offsetof(HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken, Parameters) == 0x000000, "Member 'HWDamageFeedbackWidget_HandleLocalPlayerDamageTaken::Parameters' has a wrong offset!");

// Function HemingwayUI.HWDamageFeedbackWidget.UpdateHealthFeedback
// 0x0004 (0x0004 - 0x0000)
struct HWDamageFeedbackWidget_UpdateHealthFeedback final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDamageFeedbackWidget_UpdateHealthFeedback) == 0x000004, "Wrong alignment on HWDamageFeedbackWidget_UpdateHealthFeedback");
static_assert(sizeof(HWDamageFeedbackWidget_UpdateHealthFeedback) == 0x000004, "Wrong size on HWDamageFeedbackWidget_UpdateHealthFeedback");
static_assert(offsetof(HWDamageFeedbackWidget_UpdateHealthFeedback, Opacity) == 0x000000, "Member 'HWDamageFeedbackWidget_UpdateHealthFeedback::Opacity' has a wrong offset!");

// Function HemingwayUI.HWDamageIndicatorPointerWidget.SetDamageFeedbackIndicatorData
// 0x001C (0x001C - 0x0000)
struct HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData final
{
public:
	struct FHWDamageFeedbackIndicatorData         DamageData;                                        // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData) == 0x000004, "Wrong alignment on HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData");
static_assert(sizeof(HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData) == 0x00001C, "Wrong size on HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData");
static_assert(offsetof(HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData, DamageData) == 0x000000, "Member 'HWDamageIndicatorPointerWidget_SetDamageFeedbackIndicatorData::DamageData' has a wrong offset!");

// Function HemingwayUI.HWDisplayInfoEffectWidgetManager.HandleDisplayInfoAdded
// 0x0030 (0x0030 - 0x0000)
struct HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded) == 0x000008, "Wrong alignment on HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded");
static_assert(sizeof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded) == 0x000030, "Wrong size on HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded");
static_assert(offsetof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded, InDisplayInfo) == 0x000000, "Member 'HWDisplayInfoEffectWidgetManager_HandleDisplayInfoAdded::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWDisplayInfoEffectWidgetManager.HandleDisplayInfoRemoved
// 0x0030 (0x0030 - 0x0000)
struct HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved final
{
public:
	struct FHWDisplayInfo                         InDisplayInfo;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved) == 0x000008, "Wrong alignment on HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved");
static_assert(sizeof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved) == 0x000030, "Wrong size on HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved");
static_assert(offsetof(HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved, InDisplayInfo) == 0x000000, "Member 'HWDisplayInfoEffectWidgetManager_HandleDisplayInfoRemoved::InDisplayInfo' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyRankedProgressEntry.PopulateRankedProgress
// 0x0138 (0x0138 - 0x0000)
struct HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress final
{
public:
	struct FHWEndOfMatchRankedProgressSource      RankedProgress;                                    // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress");
static_assert(sizeof(HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress) == 0x000138, "Wrong size on HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress");
static_assert(offsetof(HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress, RankedProgress) == 0x000000, "Member 'HWEndOfMatchLobbyRankedProgressEntry_PopulateRankedProgress::RankedProgress' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetTabButtons
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetTabButtons final
{
public:
	TArray<class UHWButton*>                      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetTabButtons) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetTabButtons");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetTabButtons) == 0x000010, "Wrong size on HWEndOfMatchLobbyWidget_GetTabButtons");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetTabButtons, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetTabButtons::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetTabViews
// 0x0010 (0x0010 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetTabViews final
{
public:
	TArray<class UHWOverlay*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetTabViews) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetTabViews");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetTabViews) == 0x000010, "Wrong size on HWEndOfMatchLobbyWidget_GetTabViews");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetTabViews, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetTabViews::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.HandleOnQueueStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged final
{
public:
	ERH_MatchStatus                               QueueStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged");
static_assert(sizeof(HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged) == 0x000001, "Wrong size on HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged");
static_assert(offsetof(HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged, QueueStatus) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_HandleOnQueueStatusChanged::QueueStatus' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.PopulateEndOfMatchDetailsPlayer
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer");
static_assert(sizeof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer) == 0x000008, "Wrong size on HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer");
static_assert(offsetof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer, PlayerState) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsPlayer::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.PopulateEndOfMatchDetailsTeam
// 0x0002 (0x0002 - 0x0000)
struct HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendly;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam");
static_assert(sizeof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam) == 0x000002, "Wrong size on HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam");
static_assert(offsetof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam, TeamId) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam::TeamId' has a wrong offset!");
static_assert(offsetof(HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam, bIsFriendly) == 0x000001, "Member 'HWEndOfMatchLobbyWidget_PopulateEndOfMatchDetailsTeam::bIsFriendly' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.UpdatePlayAgainButtonState
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState final
{
public:
	bool                                          bButtonEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState");
static_assert(sizeof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState) == 0x000001, "Wrong size on HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState");
static_assert(offsetof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState, bButtonEnabled) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonState::bButtonEnabled' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.UpdatePlayAgainButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility) == 0x000001, "Wrong alignment on HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility");
static_assert(sizeof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility) == 0x000001, "Wrong size on HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility");
static_assert(offsetof(HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility, bShouldShow) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_UpdatePlayAgainButtonVisibility::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetGameModeName
// 0x0018 (0x0018 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetGameModeName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetGameModeName) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetGameModeName");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetGameModeName) == 0x000018, "Wrong size on HWEndOfMatchLobbyWidget_GetGameModeName");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetGameModeName, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetGameModeName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetMatchSessionId
// 0x0018 (0x0018 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetMatchSessionId final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetMatchSessionId) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetMatchSessionId");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetMatchSessionId) == 0x000018, "Wrong size on HWEndOfMatchLobbyWidget_GetMatchSessionId");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetMatchSessionId, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetMatchSessionId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetPartyManager) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetPartyManager");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetPartyManager) == 0x000008, "Wrong size on HWEndOfMatchLobbyWidget_GetPartyManager");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetPartyManager, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetPartyManager::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetQueueDataFactory) == 0x000008, "Wrong alignment on HWEndOfMatchLobbyWidget_GetQueueDataFactory");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetQueueDataFactory) == 0x000008, "Wrong size on HWEndOfMatchLobbyWidget_GetQueueDataFactory");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEndOfMatchLobbyWidget.GetTeamPlacement
// 0x0004 (0x0004 - 0x0000)
struct HWEndOfMatchLobbyWidget_GetTeamPlacement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEndOfMatchLobbyWidget_GetTeamPlacement) == 0x000004, "Wrong alignment on HWEndOfMatchLobbyWidget_GetTeamPlacement");
static_assert(sizeof(HWEndOfMatchLobbyWidget_GetTeamPlacement) == 0x000004, "Wrong size on HWEndOfMatchLobbyWidget_GetTeamPlacement");
static_assert(offsetof(HWEndOfMatchLobbyWidget_GetTeamPlacement, ReturnValue) == 0x000000, "Member 'HWEndOfMatchLobbyWidget_GetTeamPlacement::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentAcquisitionPopupManager.OnEquipmentItemPurchased
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased final
{
public:
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased) == 0x000008, "Wrong alignment on HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased");
static_assert(sizeof(HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased) == 0x000008, "Wrong size on HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased");
static_assert(offsetof(HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased, EquipmentInstance) == 0x000000, "Member 'HWEquipmentAcquisitionPopupManager_OnEquipmentItemPurchased::EquipmentInstance' has a wrong offset!");

// Function HemingwayUI.HWEquipmentAcquisitionPopupManager.OnEquipmentLevelChanged
// 0x0010 (0x0010 - 0x0000)
struct HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged final
{
public:
	class UHWEquipmentInstance*                   EquipmentChanged;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousLevel;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged) == 0x000008, "Wrong alignment on HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged");
static_assert(sizeof(HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged) == 0x000010, "Wrong size on HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged");
static_assert(offsetof(HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged, EquipmentChanged) == 0x000000, "Member 'HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged::EquipmentChanged' has a wrong offset!");
static_assert(offsetof(HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged, PreviousLevel) == 0x000008, "Member 'HWEquipmentAcquisitionPopupManager_OnEquipmentLevelChanged::PreviousLevel' has a wrong offset!");

// Function HemingwayUI.HWEquipmentAcquisitionPopupManager.GetCurrentDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel final
{
public:
	EHWEquipmentAcquisitionDetailLevel            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel) == 0x000001, "Wrong alignment on HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel");
static_assert(sizeof(HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel) == 0x000001, "Wrong size on HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel");
static_assert(offsetof(HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel, ReturnValue) == 0x000000, "Member 'HWEquipmentAcquisitionPopupManager_GetCurrentDetailLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentPopupWidget.DisplayEquipment
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentPopupWidget_DisplayEquipment final
{
public:
	const class UHWEquipmentInstance*             EquipmentInstance;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentPopupWidget_DisplayEquipment) == 0x000008, "Wrong alignment on HWEquipmentPopupWidget_DisplayEquipment");
static_assert(sizeof(HWEquipmentPopupWidget_DisplayEquipment) == 0x000008, "Wrong size on HWEquipmentPopupWidget_DisplayEquipment");
static_assert(offsetof(HWEquipmentPopupWidget_DisplayEquipment, EquipmentInstance) == 0x000000, "Member 'HWEquipmentPopupWidget_DisplayEquipment::EquipmentInstance' has a wrong offset!");

// Function HemingwayUI.HWEquipmentAcquisitionPopupWidget.SetDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentAcquisitionPopupWidget_SetDetailLevel final
{
public:
	EHWEquipmentAcquisitionDetailLevel            NewDetailLevel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentAcquisitionPopupWidget_SetDetailLevel) == 0x000001, "Wrong alignment on HWEquipmentAcquisitionPopupWidget_SetDetailLevel");
static_assert(sizeof(HWEquipmentAcquisitionPopupWidget_SetDetailLevel) == 0x000001, "Wrong size on HWEquipmentAcquisitionPopupWidget_SetDetailLevel");
static_assert(offsetof(HWEquipmentAcquisitionPopupWidget_SetDetailLevel, NewDetailLevel) == 0x000000, "Member 'HWEquipmentAcquisitionPopupWidget_SetDetailLevel::NewDetailLevel' has a wrong offset!");

// Function HemingwayUI.HWEquipmentAcquisitionPopupWidget.GetDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentAcquisitionPopupWidget_GetDetailLevel final
{
public:
	EHWEquipmentAcquisitionDetailLevel            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentAcquisitionPopupWidget_GetDetailLevel) == 0x000001, "Wrong alignment on HWEquipmentAcquisitionPopupWidget_GetDetailLevel");
static_assert(sizeof(HWEquipmentAcquisitionPopupWidget_GetDetailLevel) == 0x000001, "Wrong size on HWEquipmentAcquisitionPopupWidget_GetDetailLevel");
static_assert(offsetof(HWEquipmentAcquisitionPopupWidget_GetDetailLevel, ReturnValue) == 0x000000, "Member 'HWEquipmentAcquisitionPopupWidget_GetDetailLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentPopupDisplayWidget.DisplayEquipment
// 0x0010 (0x0010 - 0x0000)
struct HWEquipmentPopupDisplayWidget_DisplayEquipment final
{
public:
	const class UHWEquipmentInstance*             EquipmentInstance;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentPopupWidget*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentPopupDisplayWidget_DisplayEquipment) == 0x000008, "Wrong alignment on HWEquipmentPopupDisplayWidget_DisplayEquipment");
static_assert(sizeof(HWEquipmentPopupDisplayWidget_DisplayEquipment) == 0x000010, "Wrong size on HWEquipmentPopupDisplayWidget_DisplayEquipment");
static_assert(offsetof(HWEquipmentPopupDisplayWidget_DisplayEquipment, EquipmentInstance) == 0x000000, "Member 'HWEquipmentPopupDisplayWidget_DisplayEquipment::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWEquipmentPopupDisplayWidget_DisplayEquipment, ReturnValue) == 0x000008, "Member 'HWEquipmentPopupDisplayWidget_DisplayEquipment::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEquipmentPopupDisplayWidget.DisplayWidget
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentPopupDisplayWidget_DisplayWidget final
{
public:
	class UHWEquipmentPopupWidget*                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentPopupDisplayWidget_DisplayWidget) == 0x000008, "Wrong alignment on HWEquipmentPopupDisplayWidget_DisplayWidget");
static_assert(sizeof(HWEquipmentPopupDisplayWidget_DisplayWidget) == 0x000008, "Wrong size on HWEquipmentPopupDisplayWidget_DisplayWidget");
static_assert(offsetof(HWEquipmentPopupDisplayWidget_DisplayWidget, Widget) == 0x000000, "Member 'HWEquipmentPopupDisplayWidget_DisplayWidget::Widget' has a wrong offset!");

// Function HemingwayUI.HWEquipmentPopupDisplayWidget.RecycleAbilityWidget
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentPopupDisplayWidget_RecycleAbilityWidget final
{
public:
	class UHWEquipmentPopupWidget*                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentPopupDisplayWidget_RecycleAbilityWidget) == 0x000008, "Wrong alignment on HWEquipmentPopupDisplayWidget_RecycleAbilityWidget");
static_assert(sizeof(HWEquipmentPopupDisplayWidget_RecycleAbilityWidget) == 0x000008, "Wrong size on HWEquipmentPopupDisplayWidget_RecycleAbilityWidget");
static_assert(offsetof(HWEquipmentPopupDisplayWidget_RecycleAbilityWidget, Widget) == 0x000000, "Member 'HWEquipmentPopupDisplayWidget_RecycleAbilityWidget::Widget' has a wrong offset!");

// Function HemingwayUI.HWEquipmentPopupDisplayWidget.RecycleWidget
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentPopupDisplayWidget_RecycleWidget final
{
public:
	class UHWEquipmentPopupWidget*                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentPopupDisplayWidget_RecycleWidget) == 0x000008, "Wrong alignment on HWEquipmentPopupDisplayWidget_RecycleWidget");
static_assert(sizeof(HWEquipmentPopupDisplayWidget_RecycleWidget) == 0x000008, "Wrong size on HWEquipmentPopupDisplayWidget_RecycleWidget");
static_assert(offsetof(HWEquipmentPopupDisplayWidget_RecycleWidget, Widget) == 0x000000, "Member 'HWEquipmentPopupDisplayWidget_RecycleWidget::Widget' has a wrong offset!");

// Function HemingwayUI.HWEventHandler_Default.DisplayAccoladeByTag
// 0x0090 (0x0090 - 0x0000)
struct HWEventHandler_Default_DisplayAccoladeByTag final
{
public:
	struct FGameplayTag                           AccoladeTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventHandler_Default_DisplayAccoladeByTag) == 0x000008, "Wrong alignment on HWEventHandler_Default_DisplayAccoladeByTag");
static_assert(sizeof(HWEventHandler_Default_DisplayAccoladeByTag) == 0x000090, "Wrong size on HWEventHandler_Default_DisplayAccoladeByTag");
static_assert(offsetof(HWEventHandler_Default_DisplayAccoladeByTag, AccoladeTag) == 0x000000, "Member 'HWEventHandler_Default_DisplayAccoladeByTag::AccoladeTag' has a wrong offset!");
static_assert(offsetof(HWEventHandler_Default_DisplayAccoladeByTag, EventContext) == 0x000008, "Member 'HWEventHandler_Default_DisplayAccoladeByTag::EventContext' has a wrong offset!");

// Function HemingwayUI.HWEventHandler_Default.DisplayEventTextByTag
// 0x0090 (0x0090 - 0x0000)
struct HWEventHandler_Default_DisplayEventTextByTag final
{
public:
	struct FGameplayTag                           EventTextTag;                                      // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventHandler_Default_DisplayEventTextByTag) == 0x000008, "Wrong alignment on HWEventHandler_Default_DisplayEventTextByTag");
static_assert(sizeof(HWEventHandler_Default_DisplayEventTextByTag) == 0x000090, "Wrong size on HWEventHandler_Default_DisplayEventTextByTag");
static_assert(offsetof(HWEventHandler_Default_DisplayEventTextByTag, EventTextTag) == 0x000000, "Member 'HWEventHandler_Default_DisplayEventTextByTag::EventTextTag' has a wrong offset!");
static_assert(offsetof(HWEventHandler_Default_DisplayEventTextByTag, EventContext) == 0x000008, "Member 'HWEventHandler_Default_DisplayEventTextByTag::EventContext' has a wrong offset!");

// Function HemingwayUI.HWEventHandler_Default.PlayVOByTag
// 0x0008 (0x0008 - 0x0000)
struct HWEventHandler_Default_PlayVOByTag final
{
public:
	struct FGameplayTag                           VOTag;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventHandler_Default_PlayVOByTag) == 0x000004, "Wrong alignment on HWEventHandler_Default_PlayVOByTag");
static_assert(sizeof(HWEventHandler_Default_PlayVOByTag) == 0x000008, "Wrong size on HWEventHandler_Default_PlayVOByTag");
static_assert(offsetof(HWEventHandler_Default_PlayVOByTag, VOTag) == 0x000000, "Member 'HWEventHandler_Default_PlayVOByTag::VOTag' has a wrong offset!");

// Function HemingwayUI.HWEventHandler_Default.GetHWGameHUD
// 0x0008 (0x0008 - 0x0000)
struct HWEventHandler_Default_GetHWGameHUD final
{
public:
	class AHWGameHUD*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventHandler_Default_GetHWGameHUD) == 0x000008, "Wrong alignment on HWEventHandler_Default_GetHWGameHUD");
static_assert(sizeof(HWEventHandler_Default_GetHWGameHUD) == 0x000008, "Wrong size on HWEventHandler_Default_GetHWGameHUD");
static_assert(offsetof(HWEventHandler_Default_GetHWGameHUD, ReturnValue) == 0x000000, "Member 'HWEventHandler_Default_GetHWGameHUD::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEventStompAssessor_Default.GetHWGameHUD
// 0x0008 (0x0008 - 0x0000)
struct HWEventStompAssessor_Default_GetHWGameHUD final
{
public:
	class AHWGameHUD*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventStompAssessor_Default_GetHWGameHUD) == 0x000008, "Wrong alignment on HWEventStompAssessor_Default_GetHWGameHUD");
static_assert(sizeof(HWEventStompAssessor_Default_GetHWGameHUD) == 0x000008, "Wrong size on HWEventStompAssessor_Default_GetHWGameHUD");
static_assert(offsetof(HWEventStompAssessor_Default_GetHWGameHUD, ReturnValue) == 0x000000, "Member 'HWEventStompAssessor_Default_GetHWGameHUD::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEventTextEntryWidget.HandleTextBuilderTextReady
// 0x0018 (0x0018 - 0x0000)
struct HWEventTextEntryWidget_HandleTextBuilderTextReady final
{
public:
	class FText                                   TextToDisplay;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextEntryWidget_HandleTextBuilderTextReady) == 0x000008, "Wrong alignment on HWEventTextEntryWidget_HandleTextBuilderTextReady");
static_assert(sizeof(HWEventTextEntryWidget_HandleTextBuilderTextReady) == 0x000018, "Wrong size on HWEventTextEntryWidget_HandleTextBuilderTextReady");
static_assert(offsetof(HWEventTextEntryWidget_HandleTextBuilderTextReady, TextToDisplay) == 0x000000, "Member 'HWEventTextEntryWidget_HandleTextBuilderTextReady::TextToDisplay' has a wrong offset!");

// Function HemingwayUI.HWEventTextEntryWidget.LoadEventContext
// 0x0088 (0x0088 - 0x0000)
struct HWEventTextEntryWidget_LoadEventContext final
{
public:
	struct FHWEventContext                        EventContext;                                      // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextEntryWidget_LoadEventContext) == 0x000008, "Wrong alignment on HWEventTextEntryWidget_LoadEventContext");
static_assert(sizeof(HWEventTextEntryWidget_LoadEventContext) == 0x000088, "Wrong size on HWEventTextEntryWidget_LoadEventContext");
static_assert(offsetof(HWEventTextEntryWidget_LoadEventContext, EventContext) == 0x000000, "Member 'HWEventTextEntryWidget_LoadEventContext::EventContext' has a wrong offset!");

// Function HemingwayUI.HWEventTextEntryWidget.SetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct HWEventTextEntryWidget_SetDisplayText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextEntryWidget_SetDisplayText) == 0x000008, "Wrong alignment on HWEventTextEntryWidget_SetDisplayText");
static_assert(sizeof(HWEventTextEntryWidget_SetDisplayText) == 0x000018, "Wrong size on HWEventTextEntryWidget_SetDisplayText");
static_assert(offsetof(HWEventTextEntryWidget_SetDisplayText, InText) == 0x000000, "Member 'HWEventTextEntryWidget_SetDisplayText::InText' has a wrong offset!");

// Function HemingwayUI.HWEventTextEntryWidget.GetOutroDuration
// 0x0004 (0x0004 - 0x0000)
struct HWEventTextEntryWidget_GetOutroDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextEntryWidget_GetOutroDuration) == 0x000004, "Wrong alignment on HWEventTextEntryWidget_GetOutroDuration");
static_assert(sizeof(HWEventTextEntryWidget_GetOutroDuration) == 0x000004, "Wrong size on HWEventTextEntryWidget_GetOutroDuration");
static_assert(offsetof(HWEventTextEntryWidget_GetOutroDuration, ReturnValue) == 0x000000, "Member 'HWEventTextEntryWidget_GetOutroDuration::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWEventTextWidgetManager.AddEntryToContainer
// 0x0008 (0x0008 - 0x0000)
struct HWEventTextWidgetManager_AddEntryToContainer final
{
public:
	class UHWEventTextEntryWidget*                EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextWidgetManager_AddEntryToContainer) == 0x000008, "Wrong alignment on HWEventTextWidgetManager_AddEntryToContainer");
static_assert(sizeof(HWEventTextWidgetManager_AddEntryToContainer) == 0x000008, "Wrong size on HWEventTextWidgetManager_AddEntryToContainer");
static_assert(offsetof(HWEventTextWidgetManager_AddEntryToContainer, EntryWidget) == 0x000000, "Member 'HWEventTextWidgetManager_AddEntryToContainer::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWEventTextWidgetManager.RemoveEntryFromContainer
// 0x0008 (0x0008 - 0x0000)
struct HWEventTextWidgetManager_RemoveEntryFromContainer final
{
public:
	class UHWEventTextEntryWidget*                EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEventTextWidgetManager_RemoveEntryFromContainer) == 0x000008, "Wrong alignment on HWEventTextWidgetManager_RemoveEntryFromContainer");
static_assert(sizeof(HWEventTextWidgetManager_RemoveEntryFromContainer) == 0x000008, "Wrong size on HWEventTextWidgetManager_RemoveEntryFromContainer");
static_assert(offsetof(HWEventTextWidgetManager_RemoveEntryFromContainer, EntryWidget) == 0x000000, "Member 'HWEventTextWidgetManager_RemoveEntryFromContainer::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWFeedNotificationBaseWidget.SetupNotification
// 0x0020 (0x0020 - 0x0000)
struct HWFeedNotificationBaseWidget_SetupNotification final
{
public:
	const class AActor*                           EventInstigator;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Affected;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Info;                                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFeedNotificationBaseWidget_SetupNotification) == 0x000008, "Wrong alignment on HWFeedNotificationBaseWidget_SetupNotification");
static_assert(sizeof(HWFeedNotificationBaseWidget_SetupNotification) == 0x000020, "Wrong size on HWFeedNotificationBaseWidget_SetupNotification");
static_assert(offsetof(HWFeedNotificationBaseWidget_SetupNotification, EventInstigator) == 0x000000, "Member 'HWFeedNotificationBaseWidget_SetupNotification::EventInstigator' has a wrong offset!");
static_assert(offsetof(HWFeedNotificationBaseWidget_SetupNotification, Affected) == 0x000008, "Member 'HWFeedNotificationBaseWidget_SetupNotification::Affected' has a wrong offset!");
static_assert(offsetof(HWFeedNotificationBaseWidget_SetupNotification, Info) == 0x000010, "Member 'HWFeedNotificationBaseWidget_SetupNotification::Info' has a wrong offset!");

// Function HemingwayUI.HWFeedNotificationBaseWidget.GetEventTag
// 0x0008 (0x0008 - 0x0000)
struct HWFeedNotificationBaseWidget_GetEventTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFeedNotificationBaseWidget_GetEventTag) == 0x000004, "Wrong alignment on HWFeedNotificationBaseWidget_GetEventTag");
static_assert(sizeof(HWFeedNotificationBaseWidget_GetEventTag) == 0x000008, "Wrong size on HWFeedNotificationBaseWidget_GetEventTag");
static_assert(offsetof(HWFeedNotificationBaseWidget_GetEventTag, ReturnValue) == 0x000000, "Member 'HWFeedNotificationBaseWidget_GetEventTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFeedNotificationDisplayer.HandleGameFeedNotification
// 0x0028 (0x0028 - 0x0000)
struct HWFeedNotificationDisplayer_HandleGameFeedNotification final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           EventInstigator;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Affected;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Info;                                              // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFeedNotificationDisplayer_HandleGameFeedNotification) == 0x000008, "Wrong alignment on HWFeedNotificationDisplayer_HandleGameFeedNotification");
static_assert(sizeof(HWFeedNotificationDisplayer_HandleGameFeedNotification) == 0x000028, "Wrong size on HWFeedNotificationDisplayer_HandleGameFeedNotification");
static_assert(offsetof(HWFeedNotificationDisplayer_HandleGameFeedNotification, EventTag) == 0x000000, "Member 'HWFeedNotificationDisplayer_HandleGameFeedNotification::EventTag' has a wrong offset!");
static_assert(offsetof(HWFeedNotificationDisplayer_HandleGameFeedNotification, EventInstigator) == 0x000008, "Member 'HWFeedNotificationDisplayer_HandleGameFeedNotification::EventInstigator' has a wrong offset!");
static_assert(offsetof(HWFeedNotificationDisplayer_HandleGameFeedNotification, Affected) == 0x000010, "Member 'HWFeedNotificationDisplayer_HandleGameFeedNotification::Affected' has a wrong offset!");
static_assert(offsetof(HWFeedNotificationDisplayer_HandleGameFeedNotification, Info) == 0x000018, "Member 'HWFeedNotificationDisplayer_HandleGameFeedNotification::Info' has a wrong offset!");

// Function HemingwayUI.HWFeedNotificationDisplayer.HandleWidgetHideSequenceFinished
// 0x0008 (0x0008 - 0x0000)
struct HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished final
{
public:
	class URHWidget*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished) == 0x000008, "Wrong alignment on HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished");
static_assert(sizeof(HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished) == 0x000008, "Wrong size on HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished");
static_assert(offsetof(HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished, Widget) == 0x000000, "Member 'HWFeedNotificationDisplayer_HandleWidgetHideSequenceFinished::Widget' has a wrong offset!");

// Function HemingwayUI.HWFeedNotification_GodKill.DisplayAssisters
// 0x0010 (0x0010 - 0x0000)
struct HWFeedNotification_GodKill_DisplayAssisters final
{
public:
	TArray<class UHWCharacterItem*>               CharacterItems;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFeedNotification_GodKill_DisplayAssisters) == 0x000008, "Wrong alignment on HWFeedNotification_GodKill_DisplayAssisters");
static_assert(sizeof(HWFeedNotification_GodKill_DisplayAssisters) == 0x000010, "Wrong size on HWFeedNotification_GodKill_DisplayAssisters");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayAssisters, CharacterItems) == 0x000000, "Member 'HWFeedNotification_GodKill_DisplayAssisters::CharacterItems' has a wrong offset!");

// Function HemingwayUI.HWFeedNotification_GodKill.DisplayKilled
// 0x0010 (0x0010 - 0x0000)
struct HWFeedNotification_GodKill_DisplayKilled final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendly;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0009(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFeedNotification_GodKill_DisplayKilled) == 0x000008, "Wrong alignment on HWFeedNotification_GodKill_DisplayKilled");
static_assert(sizeof(HWFeedNotification_GodKill_DisplayKilled) == 0x000010, "Wrong size on HWFeedNotification_GodKill_DisplayKilled");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKilled, CharacterItem) == 0x000000, "Member 'HWFeedNotification_GodKill_DisplayKilled::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKilled, bIsFriendly) == 0x000008, "Member 'HWFeedNotification_GodKill_DisplayKilled::bIsFriendly' has a wrong offset!");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKilled, TeamId) == 0x000009, "Member 'HWFeedNotification_GodKill_DisplayKilled::TeamId' has a wrong offset!");

// Function HemingwayUI.HWFeedNotification_GodKill.DisplayKiller
// 0x0010 (0x0010 - 0x0000)
struct HWFeedNotification_GodKill_DisplayKiller final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendly;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0009(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFeedNotification_GodKill_DisplayKiller) == 0x000008, "Wrong alignment on HWFeedNotification_GodKill_DisplayKiller");
static_assert(sizeof(HWFeedNotification_GodKill_DisplayKiller) == 0x000010, "Wrong size on HWFeedNotification_GodKill_DisplayKiller");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKiller, CharacterItem) == 0x000000, "Member 'HWFeedNotification_GodKill_DisplayKiller::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKiller, bIsFriendly) == 0x000008, "Member 'HWFeedNotification_GodKill_DisplayKiller::bIsFriendly' has a wrong offset!");
static_assert(offsetof(HWFeedNotification_GodKill_DisplayKiller, TeamId) == 0x000009, "Member 'HWFeedNotification_GodKill_DisplayKiller::TeamId' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplay.DisplayNumber
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextDisplay_DisplayNumber final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextDisplay_DisplayNumber) == 0x000008, "Wrong alignment on HWFloatingTextDisplay_DisplayNumber");
static_assert(sizeof(HWFloatingTextDisplay_DisplayNumber) == 0x0000E0, "Wrong size on HWFloatingTextDisplay_DisplayNumber");
static_assert(offsetof(HWFloatingTextDisplay_DisplayNumber, Parameters) == 0x000000, "Member 'HWFloatingTextDisplay_DisplayNumber::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextDisplay_DisplayNumber, ReturnValue) == 0x0000D8, "Member 'HWFloatingTextDisplay_DisplayNumber::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplay.HandleWidgetAnimationFinished
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextDisplay_HandleWidgetAnimationFinished final
{
public:
	class UHWFloatingTextWidget*                  FloatingTextWidget;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextDisplay_HandleWidgetAnimationFinished) == 0x000008, "Wrong alignment on HWFloatingTextDisplay_HandleWidgetAnimationFinished");
static_assert(sizeof(HWFloatingTextDisplay_HandleWidgetAnimationFinished) == 0x000008, "Wrong size on HWFloatingTextDisplay_HandleWidgetAnimationFinished");
static_assert(offsetof(HWFloatingTextDisplay_HandleWidgetAnimationFinished, FloatingTextWidget) == 0x000000, "Member 'HWFloatingTextDisplay_HandleWidgetAnimationFinished::FloatingTextWidget' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplay.CanDisplay
// 0x0110 (0x0110 - 0x0000)
struct HWFloatingTextDisplay_CanDisplay final
{
public:
	struct FGameplayCueParameters                 Parameters;                                        // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHWFloatingTextConfig                  Config;                                            // 0x00D8(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWFloatingTextDisplay_CanDisplay) == 0x000008, "Wrong alignment on HWFloatingTextDisplay_CanDisplay");
static_assert(sizeof(HWFloatingTextDisplay_CanDisplay) == 0x000110, "Wrong size on HWFloatingTextDisplay_CanDisplay");
static_assert(offsetof(HWFloatingTextDisplay_CanDisplay, Parameters) == 0x000000, "Member 'HWFloatingTextDisplay_CanDisplay::Parameters' has a wrong offset!");
static_assert(offsetof(HWFloatingTextDisplay_CanDisplay, Config) == 0x0000D8, "Member 'HWFloatingTextDisplay_CanDisplay::Config' has a wrong offset!");
static_assert(offsetof(HWFloatingTextDisplay_CanDisplay, ReturnValue) == 0x000108, "Member 'HWFloatingTextDisplay_CanDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplay.GetCurrentOwner
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextDisplay_GetCurrentOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextDisplay_GetCurrentOwner) == 0x000008, "Wrong alignment on HWFloatingTextDisplay_GetCurrentOwner");
static_assert(sizeof(HWFloatingTextDisplay_GetCurrentOwner) == 0x000008, "Wrong size on HWFloatingTextDisplay_GetCurrentOwner");
static_assert(offsetof(HWFloatingTextDisplay_GetCurrentOwner, ReturnValue) == 0x000000, "Member 'HWFloatingTextDisplay_GetCurrentOwner::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplay.IsDisplayingTexts
// 0x0001 (0x0001 - 0x0000)
struct HWFloatingTextDisplay_IsDisplayingTexts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextDisplay_IsDisplayingTexts) == 0x000001, "Wrong alignment on HWFloatingTextDisplay_IsDisplayingTexts");
static_assert(sizeof(HWFloatingTextDisplay_IsDisplayingTexts) == 0x000001, "Wrong size on HWFloatingTextDisplay_IsDisplayingTexts");
static_assert(offsetof(HWFloatingTextDisplay_IsDisplayingTexts, ReturnValue) == 0x000000, "Member 'HWFloatingTextDisplay_IsDisplayingTexts::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplayActor.HandleOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextDisplayActor_HandleOwnerDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextDisplayActor_HandleOwnerDestroyed) == 0x000008, "Wrong alignment on HWFloatingTextDisplayActor_HandleOwnerDestroyed");
static_assert(sizeof(HWFloatingTextDisplayActor_HandleOwnerDestroyed) == 0x000008, "Wrong size on HWFloatingTextDisplayActor_HandleOwnerDestroyed");
static_assert(offsetof(HWFloatingTextDisplayActor_HandleOwnerDestroyed, DestroyedActor) == 0x000000, "Member 'HWFloatingTextDisplayActor_HandleOwnerDestroyed::DestroyedActor' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextDisplayManager.DisplayFromGameplayCue
// 0x00E0 (0x00E0 - 0x0000)
struct HWFloatingTextDisplayManager_DisplayFromGameplayCue final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 Parameters;                                        // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextDisplayManager_DisplayFromGameplayCue) == 0x000008, "Wrong alignment on HWFloatingTextDisplayManager_DisplayFromGameplayCue");
static_assert(sizeof(HWFloatingTextDisplayManager_DisplayFromGameplayCue) == 0x0000E0, "Wrong size on HWFloatingTextDisplayManager_DisplayFromGameplayCue");
static_assert(offsetof(HWFloatingTextDisplayManager_DisplayFromGameplayCue, MyTarget) == 0x000000, "Member 'HWFloatingTextDisplayManager_DisplayFromGameplayCue::MyTarget' has a wrong offset!");
static_assert(offsetof(HWFloatingTextDisplayManager_DisplayFromGameplayCue, Parameters) == 0x000008, "Member 'HWFloatingTextDisplayManager_DisplayFromGameplayCue::Parameters' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextPoolManager.GetFloatingTextWidget
// 0x0010 (0x0010 - 0x0000)
struct HWFloatingTextPoolManager_GetFloatingTextWidget final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWFloatingTextWidget*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextPoolManager_GetFloatingTextWidget) == 0x000008, "Wrong alignment on HWFloatingTextPoolManager_GetFloatingTextWidget");
static_assert(sizeof(HWFloatingTextPoolManager_GetFloatingTextWidget) == 0x000010, "Wrong size on HWFloatingTextPoolManager_GetFloatingTextWidget");
static_assert(offsetof(HWFloatingTextPoolManager_GetFloatingTextWidget, Tag) == 0x000000, "Member 'HWFloatingTextPoolManager_GetFloatingTextWidget::Tag' has a wrong offset!");
static_assert(offsetof(HWFloatingTextPoolManager_GetFloatingTextWidget, ReturnValue) == 0x000008, "Member 'HWFloatingTextPoolManager_GetFloatingTextWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWFloatingTextPoolManager.ReleaseFloatingTextWidget
// 0x0008 (0x0008 - 0x0000)
struct HWFloatingTextPoolManager_ReleaseFloatingTextWidget final
{
public:
	class UHWFloatingTextWidget*                  Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWFloatingTextPoolManager_ReleaseFloatingTextWidget) == 0x000008, "Wrong alignment on HWFloatingTextPoolManager_ReleaseFloatingTextWidget");
static_assert(sizeof(HWFloatingTextPoolManager_ReleaseFloatingTextWidget) == 0x000008, "Wrong size on HWFloatingTextPoolManager_ReleaseFloatingTextWidget");
static_assert(offsetof(HWFloatingTextPoolManager_ReleaseFloatingTextWidget, Widget) == 0x000000, "Member 'HWFloatingTextPoolManager_ReleaseFloatingTextWidget::Widget' has a wrong offset!");

// Function HemingwayUI.HWGameResultWidget.DisplayResult
// 0x0001 (0x0001 - 0x0000)
struct HWGameResultWidget_DisplayResult final
{
public:
	bool                                          bVictory;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameResultWidget_DisplayResult) == 0x000001, "Wrong alignment on HWGameResultWidget_DisplayResult");
static_assert(sizeof(HWGameResultWidget_DisplayResult) == 0x000001, "Wrong size on HWGameResultWidget_DisplayResult");
static_assert(offsetof(HWGameResultWidget_DisplayResult, bVictory) == 0x000000, "Member 'HWGameResultWidget_DisplayResult::bVictory' has a wrong offset!");

// Function HemingwayUI.HWGameResultWidget.HandleOnPhaseConfigChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGameResultWidget_HandleOnPhaseConfigChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameResultWidget_HandleOnPhaseConfigChanged) == 0x000004, "Wrong alignment on HWGameResultWidget_HandleOnPhaseConfigChanged");
static_assert(sizeof(HWGameResultWidget_HandleOnPhaseConfigChanged) == 0x000010, "Wrong size on HWGameResultWidget_HandleOnPhaseConfigChanged");
static_assert(offsetof(HWGameResultWidget_HandleOnPhaseConfigChanged, PhaseTag) == 0x000000, "Member 'HWGameResultWidget_HandleOnPhaseConfigChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(HWGameResultWidget_HandleOnPhaseConfigChanged, PhaseStartTime) == 0x000008, "Member 'HWGameResultWidget_HandleOnPhaseConfigChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(HWGameResultWidget_HandleOnPhaseConfigChanged, PhaseDuration) == 0x00000C, "Member 'HWGameResultWidget_HandleOnPhaseConfigChanged::PhaseDuration' has a wrong offset!");

// Function HemingwayUI.HWGameResultWidget.HandleOnTeamPlacementOrderUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGameResultWidget_HandleOnTeamPlacementOrderUpdated final
{
public:
	TArray<struct FGenericTeamId>                 TeamPlacementOrder;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameResultWidget_HandleOnTeamPlacementOrderUpdated) == 0x000008, "Wrong alignment on HWGameResultWidget_HandleOnTeamPlacementOrderUpdated");
static_assert(sizeof(HWGameResultWidget_HandleOnTeamPlacementOrderUpdated) == 0x000010, "Wrong size on HWGameResultWidget_HandleOnTeamPlacementOrderUpdated");
static_assert(offsetof(HWGameResultWidget_HandleOnTeamPlacementOrderUpdated, TeamPlacementOrder) == 0x000000, "Member 'HWGameResultWidget_HandleOnTeamPlacementOrderUpdated::TeamPlacementOrder' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayLocalTeamGoldAdvantage
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayLocalTeamGoldAdvantage final
{
public:
	int32                                         GoldAdvantage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTied;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_DisplayLocalTeamGoldAdvantage) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayLocalTeamGoldAdvantage");
static_assert(sizeof(HWGameScoreWidget_DisplayLocalTeamGoldAdvantage) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayLocalTeamGoldAdvantage");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamGoldAdvantage, GoldAdvantage) == 0x000000, "Member 'HWGameScoreWidget_DisplayLocalTeamGoldAdvantage::GoldAdvantage' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamGoldAdvantage, bIsTied) == 0x000004, "Member 'HWGameScoreWidget_DisplayLocalTeamGoldAdvantage::bIsTied' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayLocalTeamKillAdvantage
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayLocalTeamKillAdvantage final
{
public:
	int32                                         KillAdvantage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTied;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_DisplayLocalTeamKillAdvantage) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayLocalTeamKillAdvantage");
static_assert(sizeof(HWGameScoreWidget_DisplayLocalTeamKillAdvantage) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayLocalTeamKillAdvantage");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamKillAdvantage, KillAdvantage) == 0x000000, "Member 'HWGameScoreWidget_DisplayLocalTeamKillAdvantage::KillAdvantage' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamKillAdvantage, bIsTied) == 0x000004, "Member 'HWGameScoreWidget_DisplayLocalTeamKillAdvantage::bIsTied' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayLocalTeamXPAdvantage
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayLocalTeamXPAdvantage final
{
public:
	int32                                         XPAdvantage;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTied;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_DisplayLocalTeamXPAdvantage) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayLocalTeamXPAdvantage");
static_assert(sizeof(HWGameScoreWidget_DisplayLocalTeamXPAdvantage) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayLocalTeamXPAdvantage");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamXPAdvantage, XPAdvantage) == 0x000000, "Member 'HWGameScoreWidget_DisplayLocalTeamXPAdvantage::XPAdvantage' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayLocalTeamXPAdvantage, bIsTied) == 0x000004, "Member 'HWGameScoreWidget_DisplayLocalTeamXPAdvantage::bIsTied' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayTeamGold
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayTeamGold final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Gold;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_DisplayTeamGold) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayTeamGold");
static_assert(sizeof(HWGameScoreWidget_DisplayTeamGold) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayTeamGold");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamGold, TeamId) == 0x000000, "Member 'HWGameScoreWidget_DisplayTeamGold::TeamId' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamGold, Gold) == 0x000004, "Member 'HWGameScoreWidget_DisplayTeamGold::Gold' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayTeamKills
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayTeamKills final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kills;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_DisplayTeamKills) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayTeamKills");
static_assert(sizeof(HWGameScoreWidget_DisplayTeamKills) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayTeamKills");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamKills, TeamId) == 0x000000, "Member 'HWGameScoreWidget_DisplayTeamKills::TeamId' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamKills, Kills) == 0x000004, "Member 'HWGameScoreWidget_DisplayTeamKills::Kills' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.DisplayTeamXP
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_DisplayTeamXP final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         XP;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_DisplayTeamXP) == 0x000004, "Wrong alignment on HWGameScoreWidget_DisplayTeamXP");
static_assert(sizeof(HWGameScoreWidget_DisplayTeamXP) == 0x000008, "Wrong size on HWGameScoreWidget_DisplayTeamXP");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamXP, TeamId) == 0x000000, "Member 'HWGameScoreWidget_DisplayTeamXP::TeamId' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_DisplayTeamXP, XP) == 0x000004, "Member 'HWGameScoreWidget_DisplayTeamXP::XP' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.GamePhaseChanged
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_GamePhaseChanged final
{
public:
	struct FGameplayTag                           NewPhaseTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_GamePhaseChanged) == 0x000004, "Wrong alignment on HWGameScoreWidget_GamePhaseChanged");
static_assert(sizeof(HWGameScoreWidget_GamePhaseChanged) == 0x000008, "Wrong size on HWGameScoreWidget_GamePhaseChanged");
static_assert(offsetof(HWGameScoreWidget_GamePhaseChanged, NewPhaseTag) == 0x000000, "Member 'HWGameScoreWidget_GamePhaseChanged::NewPhaseTag' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleGamePhaseChanged
// 0x0010 (0x0010 - 0x0000)
struct HWGameScoreWidget_HandleGamePhaseChanged final
{
public:
	struct FGameplayTag                           PhaseTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseStartTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseDuration;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_HandleGamePhaseChanged) == 0x000004, "Wrong alignment on HWGameScoreWidget_HandleGamePhaseChanged");
static_assert(sizeof(HWGameScoreWidget_HandleGamePhaseChanged) == 0x000010, "Wrong size on HWGameScoreWidget_HandleGamePhaseChanged");
static_assert(offsetof(HWGameScoreWidget_HandleGamePhaseChanged, PhaseTag) == 0x000000, "Member 'HWGameScoreWidget_HandleGamePhaseChanged::PhaseTag' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleGamePhaseChanged, PhaseStartTime) == 0x000008, "Member 'HWGameScoreWidget_HandleGamePhaseChanged::PhaseStartTime' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleGamePhaseChanged, PhaseDuration) == 0x00000C, "Member 'HWGameScoreWidget_HandleGamePhaseChanged::PhaseDuration' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleLocalPlayerTeamChanged
// 0x0001 (0x0001 - 0x0000)
struct HWGameScoreWidget_HandleLocalPlayerTeamChanged final
{
public:
	struct FGenericTeamId                         NewTeamId;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_HandleLocalPlayerTeamChanged) == 0x000001, "Wrong alignment on HWGameScoreWidget_HandleLocalPlayerTeamChanged");
static_assert(sizeof(HWGameScoreWidget_HandleLocalPlayerTeamChanged) == 0x000001, "Wrong size on HWGameScoreWidget_HandleLocalPlayerTeamChanged");
static_assert(offsetof(HWGameScoreWidget_HandleLocalPlayerTeamChanged, NewTeamId) == 0x000000, "Member 'HWGameScoreWidget_HandleLocalPlayerTeamChanged::NewTeamId' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleTeamGoldEarnedUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGameScoreWidget_HandleTeamGoldEarnedUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeamGold;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_HandleTeamGoldEarnedUpdated) == 0x000008, "Wrong alignment on HWGameScoreWidget_HandleTeamGoldEarnedUpdated");
static_assert(sizeof(HWGameScoreWidget_HandleTeamGoldEarnedUpdated) == 0x000010, "Wrong size on HWGameScoreWidget_HandleTeamGoldEarnedUpdated");
static_assert(offsetof(HWGameScoreWidget_HandleTeamGoldEarnedUpdated, TeamState) == 0x000000, "Member 'HWGameScoreWidget_HandleTeamGoldEarnedUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleTeamGoldEarnedUpdated, NewTeamGold) == 0x000008, "Member 'HWGameScoreWidget_HandleTeamGoldEarnedUpdated::NewTeamGold' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleTeamKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGameScoreWidget_HandleTeamKillsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeamKills;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_HandleTeamKillsUpdated) == 0x000008, "Wrong alignment on HWGameScoreWidget_HandleTeamKillsUpdated");
static_assert(sizeof(HWGameScoreWidget_HandleTeamKillsUpdated) == 0x000010, "Wrong size on HWGameScoreWidget_HandleTeamKillsUpdated");
static_assert(offsetof(HWGameScoreWidget_HandleTeamKillsUpdated, TeamState) == 0x000000, "Member 'HWGameScoreWidget_HandleTeamKillsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleTeamKillsUpdated, NewTeamKills) == 0x000008, "Member 'HWGameScoreWidget_HandleTeamKillsUpdated::NewTeamKills' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleTeamStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWGameScoreWidget_HandleTeamStatsTrackerReplicated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamStatsTracker*                    TeamStatsTracker;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_HandleTeamStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWGameScoreWidget_HandleTeamStatsTrackerReplicated");
static_assert(sizeof(HWGameScoreWidget_HandleTeamStatsTrackerReplicated) == 0x000010, "Wrong size on HWGameScoreWidget_HandleTeamStatsTrackerReplicated");
static_assert(offsetof(HWGameScoreWidget_HandleTeamStatsTrackerReplicated, TeamState) == 0x000000, "Member 'HWGameScoreWidget_HandleTeamStatsTrackerReplicated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleTeamStatsTrackerReplicated, TeamStatsTracker) == 0x000008, "Member 'HWGameScoreWidget_HandleTeamStatsTrackerReplicated::TeamStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.HandleTeamXPEarnedUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGameScoreWidget_HandleTeamXPEarnedUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeamXP;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_HandleTeamXPEarnedUpdated) == 0x000008, "Wrong alignment on HWGameScoreWidget_HandleTeamXPEarnedUpdated");
static_assert(sizeof(HWGameScoreWidget_HandleTeamXPEarnedUpdated) == 0x000010, "Wrong size on HWGameScoreWidget_HandleTeamXPEarnedUpdated");
static_assert(offsetof(HWGameScoreWidget_HandleTeamXPEarnedUpdated, TeamState) == 0x000000, "Member 'HWGameScoreWidget_HandleTeamXPEarnedUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_HandleTeamXPEarnedUpdated, NewTeamXP) == 0x000008, "Member 'HWGameScoreWidget_HandleTeamXPEarnedUpdated::NewTeamXP' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.LocalPlayerTeamChanged
// 0x0002 (0x0002 - 0x0000)
struct HWGameScoreWidget_LocalPlayerTeamChanged final
{
public:
	struct FGenericTeamId                         LocalTeamId;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         EnemyTeamId;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_LocalPlayerTeamChanged) == 0x000001, "Wrong alignment on HWGameScoreWidget_LocalPlayerTeamChanged");
static_assert(sizeof(HWGameScoreWidget_LocalPlayerTeamChanged) == 0x000002, "Wrong size on HWGameScoreWidget_LocalPlayerTeamChanged");
static_assert(offsetof(HWGameScoreWidget_LocalPlayerTeamChanged, LocalTeamId) == 0x000000, "Member 'HWGameScoreWidget_LocalPlayerTeamChanged::LocalTeamId' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_LocalPlayerTeamChanged, EnemyTeamId) == 0x000001, "Member 'HWGameScoreWidget_LocalPlayerTeamChanged::EnemyTeamId' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.ShowTooltip
// 0x0020 (0x0020 - 0x0000)
struct HWGameScoreWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           Tips;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGameScoreWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWGameScoreWidget_ShowTooltip");
static_assert(sizeof(HWGameScoreWidget_ShowTooltip) == 0x000020, "Wrong size on HWGameScoreWidget_ShowTooltip");
static_assert(offsetof(HWGameScoreWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWGameScoreWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_ShowTooltip, Tips) == 0x000008, "Member 'HWGameScoreWidget_ShowTooltip::Tips' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_ShowTooltip, CurrentIndex) == 0x000018, "Member 'HWGameScoreWidget_ShowTooltip::CurrentIndex' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_ShowTooltip, Axis) == 0x00001C, "Member 'HWGameScoreWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWGameScoreWidget.GetGameTime
// 0x0008 (0x0008 - 0x0000)
struct HWGameScoreWidget_GetGameTime final
{
public:
	bool                                          bCountBackwards;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameScoreWidget_GetGameTime) == 0x000004, "Wrong alignment on HWGameScoreWidget_GetGameTime");
static_assert(sizeof(HWGameScoreWidget_GetGameTime) == 0x000008, "Wrong size on HWGameScoreWidget_GetGameTime");
static_assert(offsetof(HWGameScoreWidget_GetGameTime, bCountBackwards) == 0x000000, "Member 'HWGameScoreWidget_GetGameTime::bCountBackwards' has a wrong offset!");
static_assert(offsetof(HWGameScoreWidget_GetGameTime, ReturnValue) == 0x000004, "Member 'HWGameScoreWidget_GetGameTime::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGoldFuryKillCounter.HandleGoldFuryKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldFuryKills;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated) == 0x000008, "Wrong alignment on HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated");
static_assert(sizeof(HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated) == 0x000010, "Wrong size on HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated");
static_assert(offsetof(HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated, TeamState) == 0x000000, "Member 'HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated, GoldFuryKills) == 0x000008, "Member 'HWGoldFuryKillCounter_HandleGoldFuryKillsUpdated::GoldFuryKills' has a wrong offset!");

// Function HemingwayUI.HWGoldFuryKillCounter.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWGoldFuryKillCounter_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGoldFuryKillCounter_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWGoldFuryKillCounter_HandleLocalTeamUpdated");
static_assert(sizeof(HWGoldFuryKillCounter_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWGoldFuryKillCounter_HandleLocalTeamUpdated");
static_assert(offsetof(HWGoldFuryKillCounter_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWGoldFuryKillCounter_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWGoldFuryKillCounter.HandleTeamStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamStatsTracker*                    TeamStatsTracker;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated");
static_assert(sizeof(HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated) == 0x000010, "Wrong size on HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated");
static_assert(offsetof(HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated, TeamState) == 0x000000, "Member 'HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated::TeamState' has a wrong offset!");
static_assert(offsetof(HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated, TeamStatsTracker) == 0x000008, "Member 'HWGoldFuryKillCounter_HandleTeamStatsTrackerReplicated::TeamStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWGoldFuryKillCounter.UpdateGoldFuryKills
// 0x0004 (0x0004 - 0x0000)
struct HWGoldFuryKillCounter_UpdateGoldFuryKills final
{
public:
	int32                                         NewKillCount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGoldFuryKillCounter_UpdateGoldFuryKills) == 0x000004, "Wrong alignment on HWGoldFuryKillCounter_UpdateGoldFuryKills");
static_assert(sizeof(HWGoldFuryKillCounter_UpdateGoldFuryKills) == 0x000004, "Wrong size on HWGoldFuryKillCounter_UpdateGoldFuryKills");
static_assert(offsetof(HWGoldFuryKillCounter_UpdateGoldFuryKills, NewKillCount) == 0x000000, "Member 'HWGoldFuryKillCounter_UpdateGoldFuryKills::NewKillCount' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.AddHelpTip
// 0x0008 (0x0008 - 0x0000)
struct HWHelpTipWidget_AddHelpTip final
{
public:
	struct FGameplayTag                           HelpTipTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHelpTipWidget_AddHelpTip) == 0x000004, "Wrong alignment on HWHelpTipWidget_AddHelpTip");
static_assert(sizeof(HWHelpTipWidget_AddHelpTip) == 0x000008, "Wrong size on HWHelpTipWidget_AddHelpTip");
static_assert(offsetof(HWHelpTipWidget_AddHelpTip, HelpTipTag) == 0x000000, "Member 'HWHelpTipWidget_AddHelpTip::HelpTipTag' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.DisplayHelpTipData
// 0x0138 (0x0138 - 0x0000)
struct HWHelpTipWidget_DisplayHelpTipData final
{
public:
	struct FHWHelpTipConfig                       HelpTipConfig;                                     // 0x0000(0x0138)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHelpTipWidget_DisplayHelpTipData) == 0x000008, "Wrong alignment on HWHelpTipWidget_DisplayHelpTipData");
static_assert(sizeof(HWHelpTipWidget_DisplayHelpTipData) == 0x000138, "Wrong size on HWHelpTipWidget_DisplayHelpTipData");
static_assert(offsetof(HWHelpTipWidget_DisplayHelpTipData, HelpTipConfig) == 0x000000, "Member 'HWHelpTipWidget_DisplayHelpTipData::HelpTipConfig' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.HandleTrackedCharacterDied
// 0x0010 (0x0010 - 0x0000)
struct HWHelpTipWidget_HandleTrackedCharacterDied final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnTimerDuration;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWHelpTipWidget_HandleTrackedCharacterDied) == 0x000008, "Wrong alignment on HWHelpTipWidget_HandleTrackedCharacterDied");
static_assert(sizeof(HWHelpTipWidget_HandleTrackedCharacterDied) == 0x000010, "Wrong size on HWHelpTipWidget_HandleTrackedCharacterDied");
static_assert(offsetof(HWHelpTipWidget_HandleTrackedCharacterDied, CharacterAbilitySystemActor) == 0x000000, "Member 'HWHelpTipWidget_HandleTrackedCharacterDied::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWHelpTipWidget_HandleTrackedCharacterDied, RespawnTimerDuration) == 0x000008, "Member 'HWHelpTipWidget_HandleTrackedCharacterDied::RespawnTimerDuration' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.OnHelpTipStartHide
// 0x0004 (0x0004 - 0x0000)
struct HWHelpTipWidget_OnHelpTipStartHide final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHelpTipWidget_OnHelpTipStartHide) == 0x000004, "Wrong alignment on HWHelpTipWidget_OnHelpTipStartHide");
static_assert(sizeof(HWHelpTipWidget_OnHelpTipStartHide) == 0x000004, "Wrong size on HWHelpTipWidget_OnHelpTipStartHide");
static_assert(offsetof(HWHelpTipWidget_OnHelpTipStartHide, ReturnValue) == 0x000000, "Member 'HWHelpTipWidget_OnHelpTipStartHide::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.RemoveHelpTip
// 0x0008 (0x0008 - 0x0000)
struct HWHelpTipWidget_RemoveHelpTip final
{
public:
	struct FGameplayTag                           HelpTipToRemove;                                   // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHelpTipWidget_RemoveHelpTip) == 0x000004, "Wrong alignment on HWHelpTipWidget_RemoveHelpTip");
static_assert(sizeof(HWHelpTipWidget_RemoveHelpTip) == 0x000008, "Wrong size on HWHelpTipWidget_RemoveHelpTip");
static_assert(offsetof(HWHelpTipWidget_RemoveHelpTip, HelpTipToRemove) == 0x000000, "Member 'HWHelpTipWidget_RemoveHelpTip::HelpTipToRemove' has a wrong offset!");

// Function HemingwayUI.HWHelpTipWidget.ToggleHelpTipVisible
// 0x0001 (0x0001 - 0x0000)
struct HWHelpTipWidget_ToggleHelpTipVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHelpTipWidget_ToggleHelpTipVisible) == 0x000001, "Wrong alignment on HWHelpTipWidget_ToggleHelpTipVisible");
static_assert(sizeof(HWHelpTipWidget_ToggleHelpTipVisible) == 0x000001, "Wrong size on HWHelpTipWidget_ToggleHelpTipVisible");
static_assert(offsetof(HWHelpTipWidget_ToggleHelpTipVisible, bVisible) == 0x000000, "Member 'HWHelpTipWidget_ToggleHelpTipVisible::bVisible' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntrySlider.DisplayFieldName
// 0x0018 (0x0018 - 0x0000)
struct HWHUDEditorEditableEntrySlider_DisplayFieldName final
{
public:
	class FText                                   FieldName;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntrySlider_DisplayFieldName) == 0x000008, "Wrong alignment on HWHUDEditorEditableEntrySlider_DisplayFieldName");
static_assert(sizeof(HWHUDEditorEditableEntrySlider_DisplayFieldName) == 0x000018, "Wrong size on HWHUDEditorEditableEntrySlider_DisplayFieldName");
static_assert(offsetof(HWHUDEditorEditableEntrySlider_DisplayFieldName, FieldName) == 0x000000, "Member 'HWHUDEditorEditableEntrySlider_DisplayFieldName::FieldName' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntrySlider.DisplaySliderLimits
// 0x0008 (0x0008 - 0x0000)
struct HWHUDEditorEditableEntrySlider_DisplaySliderLimits final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntrySlider_DisplaySliderLimits) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntrySlider_DisplaySliderLimits");
static_assert(sizeof(HWHUDEditorEditableEntrySlider_DisplaySliderLimits) == 0x000008, "Wrong size on HWHUDEditorEditableEntrySlider_DisplaySliderLimits");
static_assert(offsetof(HWHUDEditorEditableEntrySlider_DisplaySliderLimits, Min) == 0x000000, "Member 'HWHUDEditorEditableEntrySlider_DisplaySliderLimits::Min' has a wrong offset!");
static_assert(offsetof(HWHUDEditorEditableEntrySlider_DisplaySliderLimits, Max) == 0x000004, "Member 'HWHUDEditorEditableEntrySlider_DisplaySliderLimits::Max' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorEditableEntrySlider.DisplaySliderValue
// 0x0004 (0x0004 - 0x0000)
struct HWHUDEditorEditableEntrySlider_DisplaySliderValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorEditableEntrySlider_DisplaySliderValue) == 0x000004, "Wrong alignment on HWHUDEditorEditableEntrySlider_DisplaySliderValue");
static_assert(sizeof(HWHUDEditorEditableEntrySlider_DisplaySliderValue) == 0x000004, "Wrong size on HWHUDEditorEditableEntrySlider_DisplaySliderValue");
static_assert(offsetof(HWHUDEditorEditableEntrySlider_DisplaySliderValue, Value) == 0x000000, "Member 'HWHUDEditorEditableEntrySlider_DisplaySliderValue::Value' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorLayoutManager.ResetToDefaultLayout
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorLayoutManager_ResetToDefaultLayout final
{
public:
	bool                                          bSaveSettings;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorLayoutManager_ResetToDefaultLayout) == 0x000001, "Wrong alignment on HWHUDEditorLayoutManager_ResetToDefaultLayout");
static_assert(sizeof(HWHUDEditorLayoutManager_ResetToDefaultLayout) == 0x000001, "Wrong size on HWHUDEditorLayoutManager_ResetToDefaultLayout");
static_assert(offsetof(HWHUDEditorLayoutManager_ResetToDefaultLayout, bSaveSettings) == 0x000000, "Member 'HWHUDEditorLayoutManager_ResetToDefaultLayout::bSaveSettings' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorLayoutManager.ResetToSelectedLayout
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorLayoutManager_ResetToSelectedLayout final
{
public:
	bool                                          bSaveSettings;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorLayoutManager_ResetToSelectedLayout) == 0x000001, "Wrong alignment on HWHUDEditorLayoutManager_ResetToSelectedLayout");
static_assert(sizeof(HWHUDEditorLayoutManager_ResetToSelectedLayout) == 0x000001, "Wrong size on HWHUDEditorLayoutManager_ResetToSelectedLayout");
static_assert(offsetof(HWHUDEditorLayoutManager_ResetToSelectedLayout, bSaveSettings) == 0x000000, "Member 'HWHUDEditorLayoutManager_ResetToSelectedLayout::bSaveSettings' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorLayoutManager.GetActiveHUDLayoutPreset
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset final
{
public:
	EHWHUDLayoutPreset                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset) == 0x000001, "Wrong alignment on HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset");
static_assert(sizeof(HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset) == 0x000001, "Wrong size on HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset");
static_assert(offsetof(HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset, ReturnValue) == 0x000000, "Member 'HWHUDEditorLayoutManager_GetActiveHUDLayoutPreset::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWHUDEditorLayoutManager.IsDefaultLayoutSelected
// 0x0001 (0x0001 - 0x0000)
struct HWHUDEditorLayoutManager_IsDefaultLayoutSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDEditorLayoutManager_IsDefaultLayoutSelected) == 0x000001, "Wrong alignment on HWHUDEditorLayoutManager_IsDefaultLayoutSelected");
static_assert(sizeof(HWHUDEditorLayoutManager_IsDefaultLayoutSelected) == 0x000001, "Wrong size on HWHUDEditorLayoutManager_IsDefaultLayoutSelected");
static_assert(offsetof(HWHUDEditorLayoutManager_IsDefaultLayoutSelected, ReturnValue) == 0x000000, "Member 'HWHUDEditorLayoutManager_IsDefaultLayoutSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.HandleDisplayInfoComponentFlagsUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated final
{
public:
	class UHWDisplayInfoComponent*                DisplayInfoComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated");
static_assert(sizeof(HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated");
static_assert(offsetof(HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated, DisplayInfoComponent) == 0x000000, "Member 'HWIconDisplayBaseWidget_HandleDisplayInfoComponentFlagsUpdated::DisplayInfoComponent' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.OnDisplayInfoComponentFlagsUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated final
{
public:
	class UHWDisplayInfoComponent*                DisplayInfoComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated");
static_assert(sizeof(HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated");
static_assert(offsetof(HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated, DisplayInfoComponent) == 0x000000, "Member 'HWIconDisplayBaseWidget_OnDisplayInfoComponentFlagsUpdated::DisplayInfoComponent' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.OnWidgetComponentVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged) == 0x000001, "Wrong alignment on HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged");
static_assert(sizeof(HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged) == 0x000001, "Wrong size on HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged");
static_assert(offsetof(HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged, bIsVisible) == 0x000000, "Member 'HWIconDisplayBaseWidget_OnWidgetComponentVisibilityChanged::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.SetDisplayInfoData
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_SetDisplayInfoData final
{
public:
	class UHWDisplayInfoData*                     DisplayInfoData;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_SetDisplayInfoData) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_SetDisplayInfoData");
static_assert(sizeof(HWIconDisplayBaseWidget_SetDisplayInfoData) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_SetDisplayInfoData");
static_assert(offsetof(HWIconDisplayBaseWidget_SetDisplayInfoData, DisplayInfoData) == 0x000000, "Member 'HWIconDisplayBaseWidget_SetDisplayInfoData::DisplayInfoData' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.SetScale
// 0x000C (0x000C - 0x0000)
struct HWIconDisplayBaseWidget_SetScale final
{
public:
	float                                         NewScale;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinScale;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxScale;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_SetScale) == 0x000004, "Wrong alignment on HWIconDisplayBaseWidget_SetScale");
static_assert(sizeof(HWIconDisplayBaseWidget_SetScale) == 0x00000C, "Wrong size on HWIconDisplayBaseWidget_SetScale");
static_assert(offsetof(HWIconDisplayBaseWidget_SetScale, NewScale) == 0x000000, "Member 'HWIconDisplayBaseWidget_SetScale::NewScale' has a wrong offset!");
static_assert(offsetof(HWIconDisplayBaseWidget_SetScale, MinScale) == 0x000004, "Member 'HWIconDisplayBaseWidget_SetScale::MinScale' has a wrong offset!");
static_assert(offsetof(HWIconDisplayBaseWidget_SetScale, MaxScale) == 0x000008, "Member 'HWIconDisplayBaseWidget_SetScale::MaxScale' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetAssociatedActor
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_GetAssociatedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetAssociatedActor) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_GetAssociatedActor");
static_assert(sizeof(HWIconDisplayBaseWidget_GetAssociatedActor) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_GetAssociatedActor");
static_assert(offsetof(HWIconDisplayBaseWidget_GetAssociatedActor, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetAssociatedActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetAssociatedActorTransform
// 0x0060 (0x0060 - 0x0000)
struct HWIconDisplayBaseWidget_GetAssociatedActorTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetAssociatedActorTransform) == 0x000010, "Wrong alignment on HWIconDisplayBaseWidget_GetAssociatedActorTransform");
static_assert(sizeof(HWIconDisplayBaseWidget_GetAssociatedActorTransform) == 0x000060, "Wrong size on HWIconDisplayBaseWidget_GetAssociatedActorTransform");
static_assert(offsetof(HWIconDisplayBaseWidget_GetAssociatedActorTransform, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetAssociatedActorTransform::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetAssociatedWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_GetAssociatedWidgetComponent final
{
public:
	class UHWWidgetComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetAssociatedWidgetComponent) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_GetAssociatedWidgetComponent");
static_assert(sizeof(HWIconDisplayBaseWidget_GetAssociatedWidgetComponent) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_GetAssociatedWidgetComponent");
static_assert(offsetof(HWIconDisplayBaseWidget_GetAssociatedWidgetComponent, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetAssociatedWidgetComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetDisplayInfoComponent
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_GetDisplayInfoComponent final
{
public:
	class UHWDisplayInfoComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetDisplayInfoComponent) == 0x000008, "Wrong alignment on HWIconDisplayBaseWidget_GetDisplayInfoComponent");
static_assert(sizeof(HWIconDisplayBaseWidget_GetDisplayInfoComponent) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_GetDisplayInfoComponent");
static_assert(offsetof(HWIconDisplayBaseWidget_GetDisplayInfoComponent, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetDisplayInfoComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetDisplayInfoId
// 0x0004 (0x0004 - 0x0000)
struct HWIconDisplayBaseWidget_GetDisplayInfoId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetDisplayInfoId) == 0x000004, "Wrong alignment on HWIconDisplayBaseWidget_GetDisplayInfoId");
static_assert(sizeof(HWIconDisplayBaseWidget_GetDisplayInfoId) == 0x000004, "Wrong size on HWIconDisplayBaseWidget_GetDisplayInfoId");
static_assert(offsetof(HWIconDisplayBaseWidget_GetDisplayInfoId, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetDisplayInfoId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetIconSmiteTeamId
// 0x0001 (0x0001 - 0x0000)
struct HWIconDisplayBaseWidget_GetIconSmiteTeamId final
{
public:
	EHWSmiteTeamId                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetIconSmiteTeamId) == 0x000001, "Wrong alignment on HWIconDisplayBaseWidget_GetIconSmiteTeamId");
static_assert(sizeof(HWIconDisplayBaseWidget_GetIconSmiteTeamId) == 0x000001, "Wrong size on HWIconDisplayBaseWidget_GetIconSmiteTeamId");
static_assert(offsetof(HWIconDisplayBaseWidget_GetIconSmiteTeamId, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetIconSmiteTeamId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayBaseWidget.GetIconTag
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayBaseWidget_GetIconTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayBaseWidget_GetIconTag) == 0x000004, "Wrong alignment on HWIconDisplayBaseWidget_GetIconTag");
static_assert(sizeof(HWIconDisplayBaseWidget_GetIconTag) == 0x000008, "Wrong size on HWIconDisplayBaseWidget_GetIconTag");
static_assert(offsetof(HWIconDisplayBaseWidget_GetIconTag, ReturnValue) == 0x000000, "Member 'HWIconDisplayBaseWidget_GetIconTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.DeathUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapCharacterIconWidget_DeathUpdated final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_DeathUpdated) == 0x000001, "Wrong alignment on HWMinimapCharacterIconWidget_DeathUpdated");
static_assert(sizeof(HWMinimapCharacterIconWidget_DeathUpdated) == 0x000001, "Wrong size on HWMinimapCharacterIconWidget_DeathUpdated");
static_assert(offsetof(HWMinimapCharacterIconWidget_DeathUpdated, IsActive) == 0x000000, "Member 'HWMinimapCharacterIconWidget_DeathUpdated::IsActive' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.HandleTagUpdated_Death
// 0x000C (0x000C - 0x0000)
struct HWMinimapCharacterIconWidget_HandleTagUpdated_Death final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_HandleTagUpdated_Death) == 0x000004, "Wrong alignment on HWMinimapCharacterIconWidget_HandleTagUpdated_Death");
static_assert(sizeof(HWMinimapCharacterIconWidget_HandleTagUpdated_Death) == 0x00000C, "Wrong size on HWMinimapCharacterIconWidget_HandleTagUpdated_Death");
static_assert(offsetof(HWMinimapCharacterIconWidget_HandleTagUpdated_Death, Tag) == 0x000000, "Member 'HWMinimapCharacterIconWidget_HandleTagUpdated_Death::Tag' has a wrong offset!");
static_assert(offsetof(HWMinimapCharacterIconWidget_HandleTagUpdated_Death, Count) == 0x000008, "Member 'HWMinimapCharacterIconWidget_HandleTagUpdated_Death::Count' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.HealthPercentUpdated
// 0x0004 (0x0004 - 0x0000)
struct HWMinimapCharacterIconWidget_HealthPercentUpdated final
{
public:
	float                                         NewPercentage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_HealthPercentUpdated) == 0x000004, "Wrong alignment on HWMinimapCharacterIconWidget_HealthPercentUpdated");
static_assert(sizeof(HWMinimapCharacterIconWidget_HealthPercentUpdated) == 0x000004, "Wrong size on HWMinimapCharacterIconWidget_HealthPercentUpdated");
static_assert(offsetof(HWMinimapCharacterIconWidget_HealthPercentUpdated, NewPercentage) == 0x000000, "Member 'HWMinimapCharacterIconWidget_HealthPercentUpdated::NewPercentage' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.OnRecallTagChanged
// 0x000C (0x000C - 0x0000)
struct HWMinimapCharacterIconWidget_OnRecallTagChanged final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TagCount;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_OnRecallTagChanged) == 0x000004, "Wrong alignment on HWMinimapCharacterIconWidget_OnRecallTagChanged");
static_assert(sizeof(HWMinimapCharacterIconWidget_OnRecallTagChanged) == 0x00000C, "Wrong size on HWMinimapCharacterIconWidget_OnRecallTagChanged");
static_assert(offsetof(HWMinimapCharacterIconWidget_OnRecallTagChanged, Tag) == 0x000000, "Member 'HWMinimapCharacterIconWidget_OnRecallTagChanged::Tag' has a wrong offset!");
static_assert(offsetof(HWMinimapCharacterIconWidget_OnRecallTagChanged, TagCount) == 0x000008, "Member 'HWMinimapCharacterIconWidget_OnRecallTagChanged::TagCount' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.RecallUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapCharacterIconWidget_RecallUpdated final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_RecallUpdated) == 0x000001, "Wrong alignment on HWMinimapCharacterIconWidget_RecallUpdated");
static_assert(sizeof(HWMinimapCharacterIconWidget_RecallUpdated) == 0x000001, "Wrong size on HWMinimapCharacterIconWidget_RecallUpdated");
static_assert(offsetof(HWMinimapCharacterIconWidget_RecallUpdated, IsActive) == 0x000000, "Member 'HWMinimapCharacterIconWidget_RecallUpdated::IsActive' has a wrong offset!");

// Function HemingwayUI.HWMinimapCharacterIconWidget.UpdateIconColoration
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapCharacterIconWidget_UpdateIconColoration final
{
public:
	EHWMinimapIconColoration                      ColorationType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapCharacterIconWidget_UpdateIconColoration) == 0x000001, "Wrong alignment on HWMinimapCharacterIconWidget_UpdateIconColoration");
static_assert(sizeof(HWMinimapCharacterIconWidget_UpdateIconColoration) == 0x000001, "Wrong size on HWMinimapCharacterIconWidget_UpdateIconColoration");
static_assert(offsetof(HWMinimapCharacterIconWidget_UpdateIconColoration, ColorationType) == 0x000000, "Member 'HWMinimapCharacterIconWidget_UpdateIconColoration::ColorationType' has a wrong offset!");

// Function HemingwayUI.HWMinimapFoWWidget.GetAssociatedActor
// 0x0008 (0x0008 - 0x0000)
struct HWMinimapFoWWidget_GetAssociatedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapFoWWidget_GetAssociatedActor) == 0x000008, "Wrong alignment on HWMinimapFoWWidget_GetAssociatedActor");
static_assert(sizeof(HWMinimapFoWWidget_GetAssociatedActor) == 0x000008, "Wrong size on HWMinimapFoWWidget_GetAssociatedActor");
static_assert(offsetof(HWMinimapFoWWidget_GetAssociatedActor, ReturnValue) == 0x000000, "Member 'HWMinimapFoWWidget_GetAssociatedActor::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapFoWWidget.GetMinimapViewRange
// 0x0004 (0x0004 - 0x0000)
struct HWMinimapFoWWidget_GetMinimapViewRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapFoWWidget_GetMinimapViewRange) == 0x000004, "Wrong alignment on HWMinimapFoWWidget_GetMinimapViewRange");
static_assert(sizeof(HWMinimapFoWWidget_GetMinimapViewRange) == 0x000004, "Wrong size on HWMinimapFoWWidget_GetMinimapViewRange");
static_assert(offsetof(HWMinimapFoWWidget_GetMinimapViewRange, ReturnValue) == 0x000000, "Member 'HWMinimapFoWWidget_GetMinimapViewRange::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionCanvasWidget.HandleLocalAbilitySystemActorChanged
// 0x0008 (0x0008 - 0x0000)
struct HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged) == 0x000008, "Wrong alignment on HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged");
static_assert(sizeof(HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged) == 0x000008, "Wrong size on HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged");
static_assert(offsetof(HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged, NewABSActor) == 0x000000, "Member 'HWMinimapMinionCanvasWidget_HandleLocalAbilitySystemActorChanged::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionCanvasWidget.HandleLocalTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamState*                           TeamState;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated) == 0x000008, "Wrong alignment on HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated) == 0x000010, "Wrong size on HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated, CharacterAbilitySystemActor) == 0x000000, "Member 'HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated, TeamState) == 0x000008, "Member 'HWMinimapMinionCanvasWidget_HandleLocalTeamUpdated::TeamState' has a wrong offset!");

// Function HemingwayUI.HWMinimapMinionCanvasWidget.IsOwnerSpectatorOnly
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly) == 0x000001, "Wrong alignment on HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly");
static_assert(sizeof(HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly) == 0x000001, "Wrong size on HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly");
static_assert(offsetof(HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly, ReturnValue) == 0x000000, "Member 'HWMinimapMinionCanvasWidget_IsOwnerSpectatorOnly::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapSmiteNPCIconWidget.GetTextureForTeam
// 0x0010 (0x0010 - 0x0000)
struct HWMinimapSmiteNPCIconWidget_GetTextureForTeam final
{
public:
	EHWSmiteTeamId                                SmiteTeamId;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapSmiteNPCIconWidget_GetTextureForTeam) == 0x000008, "Wrong alignment on HWMinimapSmiteNPCIconWidget_GetTextureForTeam");
static_assert(sizeof(HWMinimapSmiteNPCIconWidget_GetTextureForTeam) == 0x000010, "Wrong size on HWMinimapSmiteNPCIconWidget_GetTextureForTeam");
static_assert(offsetof(HWMinimapSmiteNPCIconWidget_GetTextureForTeam, SmiteTeamId) == 0x000000, "Member 'HWMinimapSmiteNPCIconWidget_GetTextureForTeam::SmiteTeamId' has a wrong offset!");
static_assert(offsetof(HWMinimapSmiteNPCIconWidget_GetTextureForTeam, ReturnValue) == 0x000008, "Member 'HWMinimapSmiteNPCIconWidget_GetTextureForTeam::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.DisplayMapTexture
// 0x0028 (0x0028 - 0x0000)
struct HWMinimapWidget_DisplayMapTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              MapTexture;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_DisplayMapTexture) == 0x000008, "Wrong alignment on HWMinimapWidget_DisplayMapTexture");
static_assert(sizeof(HWMinimapWidget_DisplayMapTexture) == 0x000028, "Wrong size on HWMinimapWidget_DisplayMapTexture");
static_assert(offsetof(HWMinimapWidget_DisplayMapTexture, MapTexture) == 0x000000, "Member 'HWMinimapWidget_DisplayMapTexture::MapTexture' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.GetPingTagFromPointerEvent
// 0x0088 (0x0088 - 0x0000)
struct HWMinimapWidget_GetPingTagFromPointerEvent final
{
public:
	struct FPointerEvent                          InPointerEvent;                                    // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutPingTag;                                        // 0x0078(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWMinimapWidget_GetPingTagFromPointerEvent) == 0x000008, "Wrong alignment on HWMinimapWidget_GetPingTagFromPointerEvent");
static_assert(sizeof(HWMinimapWidget_GetPingTagFromPointerEvent) == 0x000088, "Wrong size on HWMinimapWidget_GetPingTagFromPointerEvent");
static_assert(offsetof(HWMinimapWidget_GetPingTagFromPointerEvent, InPointerEvent) == 0x000000, "Member 'HWMinimapWidget_GetPingTagFromPointerEvent::InPointerEvent' has a wrong offset!");
static_assert(offsetof(HWMinimapWidget_GetPingTagFromPointerEvent, OutPingTag) == 0x000078, "Member 'HWMinimapWidget_GetPingTagFromPointerEvent::OutPingTag' has a wrong offset!");
static_assert(offsetof(HWMinimapWidget_GetPingTagFromPointerEvent, ReturnValue) == 0x000080, "Member 'HWMinimapWidget_GetPingTagFromPointerEvent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.HandleLocalPlayerTeamChanged
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapWidget_HandleLocalPlayerTeamChanged final
{
public:
	struct FGenericTeamId                         NewTeam;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_HandleLocalPlayerTeamChanged) == 0x000001, "Wrong alignment on HWMinimapWidget_HandleLocalPlayerTeamChanged");
static_assert(sizeof(HWMinimapWidget_HandleLocalPlayerTeamChanged) == 0x000001, "Wrong size on HWMinimapWidget_HandleLocalPlayerTeamChanged");
static_assert(offsetof(HWMinimapWidget_HandleLocalPlayerTeamChanged, NewTeam) == 0x000000, "Member 'HWMinimapWidget_HandleLocalPlayerTeamChanged::NewTeam' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.HandleTogglePingCursor
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapWidget_HandleTogglePingCursor final
{
public:
	bool                                          bIsPingCursorActive;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_HandleTogglePingCursor) == 0x000001, "Wrong alignment on HWMinimapWidget_HandleTogglePingCursor");
static_assert(sizeof(HWMinimapWidget_HandleTogglePingCursor) == 0x000001, "Wrong size on HWMinimapWidget_HandleTogglePingCursor");
static_assert(offsetof(HWMinimapWidget_HandleTogglePingCursor, bIsPingCursorActive) == 0x000000, "Member 'HWMinimapWidget_HandleTogglePingCursor::bIsPingCursorActive' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.Input_MovePing
// 0x0020 (0x0020 - 0x0000)
struct HWMinimapWidget_Input_MovePing final
{
public:
	struct FInputActionValue                      InputActionValue;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_Input_MovePing) == 0x000008, "Wrong alignment on HWMinimapWidget_Input_MovePing");
static_assert(sizeof(HWMinimapWidget_Input_MovePing) == 0x000020, "Wrong size on HWMinimapWidget_Input_MovePing");
static_assert(offsetof(HWMinimapWidget_Input_MovePing, InputActionValue) == 0x000000, "Member 'HWMinimapWidget_Input_MovePing::InputActionValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.OnGrassCollisionChange
// 0x0010 (0x0010 - 0x0000)
struct HWMinimapWidget_OnGrassCollisionChange final
{
public:
	class AHWDeployable_Ward*                     Ward;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GrassCollision;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_OnGrassCollisionChange) == 0x000008, "Wrong alignment on HWMinimapWidget_OnGrassCollisionChange");
static_assert(sizeof(HWMinimapWidget_OnGrassCollisionChange) == 0x000010, "Wrong size on HWMinimapWidget_OnGrassCollisionChange");
static_assert(offsetof(HWMinimapWidget_OnGrassCollisionChange, Ward) == 0x000000, "Member 'HWMinimapWidget_OnGrassCollisionChange::Ward' has a wrong offset!");
static_assert(offsetof(HWMinimapWidget_OnGrassCollisionChange, GrassCollision) == 0x000008, "Member 'HWMinimapWidget_OnGrassCollisionChange::GrassCollision' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.SendPing
// 0x0020 (0x0020 - 0x0000)
struct HWMinimapWidget_SendPing final
{
public:
	struct FVector2D                              MinimapPosition;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PingTag;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipFlipCheck;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWMinimapWidget_SendPing) == 0x000008, "Wrong alignment on HWMinimapWidget_SendPing");
static_assert(sizeof(HWMinimapWidget_SendPing) == 0x000020, "Wrong size on HWMinimapWidget_SendPing");
static_assert(offsetof(HWMinimapWidget_SendPing, MinimapPosition) == 0x000000, "Member 'HWMinimapWidget_SendPing::MinimapPosition' has a wrong offset!");
static_assert(offsetof(HWMinimapWidget_SendPing, PingTag) == 0x000010, "Member 'HWMinimapWidget_SendPing::PingTag' has a wrong offset!");
static_assert(offsetof(HWMinimapWidget_SendPing, bSkipFlipCheck) == 0x000018, "Member 'HWMinimapWidget_SendPing::bSkipFlipCheck' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.TogglePingCursorOnHUD
// 0x0001 (0x0001 - 0x0000)
struct HWMinimapWidget_TogglePingCursorOnHUD final
{
public:
	bool                                          bToggleOn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_TogglePingCursorOnHUD) == 0x000001, "Wrong alignment on HWMinimapWidget_TogglePingCursorOnHUD");
static_assert(sizeof(HWMinimapWidget_TogglePingCursorOnHUD) == 0x000001, "Wrong size on HWMinimapWidget_TogglePingCursorOnHUD");
static_assert(offsetof(HWMinimapWidget_TogglePingCursorOnHUD, bToggleOn) == 0x000000, "Member 'HWMinimapWidget_TogglePingCursorOnHUD::bToggleOn' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.GetGamepadPingLocation
// 0x0010 (0x0010 - 0x0000)
struct HWMinimapWidget_GetGamepadPingLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_GetGamepadPingLocation) == 0x000008, "Wrong alignment on HWMinimapWidget_GetGamepadPingLocation");
static_assert(sizeof(HWMinimapWidget_GetGamepadPingLocation) == 0x000010, "Wrong size on HWMinimapWidget_GetGamepadPingLocation");
static_assert(offsetof(HWMinimapWidget_GetGamepadPingLocation, ReturnValue) == 0x000000, "Member 'HWMinimapWidget_GetGamepadPingLocation::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.GetMinimapScale
// 0x0004 (0x0004 - 0x0000)
struct HWMinimapWidget_GetMinimapScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_GetMinimapScale) == 0x000004, "Wrong alignment on HWMinimapWidget_GetMinimapScale");
static_assert(sizeof(HWMinimapWidget_GetMinimapScale) == 0x000004, "Wrong size on HWMinimapWidget_GetMinimapScale");
static_assert(offsetof(HWMinimapWidget_GetMinimapScale, ReturnValue) == 0x000000, "Member 'HWMinimapWidget_GetMinimapScale::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMinimapWidget.GetPingWarningText
// 0x0018 (0x0018 - 0x0000)
struct HWMinimapWidget_GetPingWarningText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMinimapWidget_GetPingWarningText) == 0x000008, "Wrong alignment on HWMinimapWidget_GetPingWarningText");
static_assert(sizeof(HWMinimapWidget_GetPingWarningText) == 0x000018, "Wrong size on HWMinimapWidget_GetPingWarningText");
static_assert(offsetof(HWMinimapWidget_GetPingWarningText, ReturnValue) == 0x000000, "Member 'HWMinimapWidget_GetPingWarningText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayDeployableWidget.HandleAbilitySystemActorTeamUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWTeamState*                           TeamState;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated) == 0x000008, "Wrong alignment on HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated");
static_assert(sizeof(HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated) == 0x000010, "Wrong size on HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated");
static_assert(offsetof(HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated, CharacterAbilitySystemActor) == 0x000000, "Member 'HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated, TeamState) == 0x000008, "Member 'HWIconDisplayDeployableWidget_HandleAbilitySystemActorTeamUpdated::TeamState' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayDeployableWidget.GetTrackedDeployable
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayDeployableWidget_GetTrackedDeployable final
{
public:
	class AHWDeployable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayDeployableWidget_GetTrackedDeployable) == 0x000008, "Wrong alignment on HWIconDisplayDeployableWidget_GetTrackedDeployable");
static_assert(sizeof(HWIconDisplayDeployableWidget_GetTrackedDeployable) == 0x000008, "Wrong size on HWIconDisplayDeployableWidget_GetTrackedDeployable");
static_assert(offsetof(HWIconDisplayDeployableWidget_GetTrackedDeployable, ReturnValue) == 0x000000, "Member 'HWIconDisplayDeployableWidget_GetTrackedDeployable::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayJungleWidget.ConfigureFromTag
// 0x0008 (0x0008 - 0x0000)
struct HWIconDisplayJungleWidget_ConfigureFromTag final
{
public:
	struct FGameplayTag                           CampTypeTag;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayJungleWidget_ConfigureFromTag) == 0x000004, "Wrong alignment on HWIconDisplayJungleWidget_ConfigureFromTag");
static_assert(sizeof(HWIconDisplayJungleWidget_ConfigureFromTag) == 0x000008, "Wrong size on HWIconDisplayJungleWidget_ConfigureFromTag");
static_assert(offsetof(HWIconDisplayJungleWidget_ConfigureFromTag, CampTypeTag) == 0x000000, "Member 'HWIconDisplayJungleWidget_ConfigureFromTag::CampTypeTag' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayJungleWidget.DisplayCampActive
// 0x0001 (0x0001 - 0x0000)
struct HWIconDisplayJungleWidget_DisplayCampActive final
{
public:
	bool                                          bCampIsActive;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayJungleWidget_DisplayCampActive) == 0x000001, "Wrong alignment on HWIconDisplayJungleWidget_DisplayCampActive");
static_assert(sizeof(HWIconDisplayJungleWidget_DisplayCampActive) == 0x000001, "Wrong size on HWIconDisplayJungleWidget_DisplayCampActive");
static_assert(offsetof(HWIconDisplayJungleWidget_DisplayCampActive, bCampIsActive) == 0x000000, "Member 'HWIconDisplayJungleWidget_DisplayCampActive::bCampIsActive' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayJungleWidget.DisplayRespawnPercentage
// 0x0004 (0x0004 - 0x0000)
struct HWIconDisplayJungleWidget_DisplayRespawnPercentage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayJungleWidget_DisplayRespawnPercentage) == 0x000004, "Wrong alignment on HWIconDisplayJungleWidget_DisplayRespawnPercentage");
static_assert(sizeof(HWIconDisplayJungleWidget_DisplayRespawnPercentage) == 0x000004, "Wrong size on HWIconDisplayJungleWidget_DisplayRespawnPercentage");
static_assert(offsetof(HWIconDisplayJungleWidget_DisplayRespawnPercentage, Percentage) == 0x000000, "Member 'HWIconDisplayJungleWidget_DisplayRespawnPercentage::Percentage' has a wrong offset!");

// Function HemingwayUI.HWIconDisplayJungleWidget.GetJungleCampConfig
// 0x0038 (0x0038 - 0x0000)
struct HWIconDisplayJungleWidget_GetJungleCampConfig final
{
public:
	struct FHWJungleCampWidgetConfig              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWIconDisplayJungleWidget_GetJungleCampConfig) == 0x000008, "Wrong alignment on HWIconDisplayJungleWidget_GetJungleCampConfig");
static_assert(sizeof(HWIconDisplayJungleWidget_GetJungleCampConfig) == 0x000038, "Wrong size on HWIconDisplayJungleWidget_GetJungleCampConfig");
static_assert(offsetof(HWIconDisplayJungleWidget_GetJungleCampConfig, ReturnValue) == 0x000000, "Member 'HWIconDisplayJungleWidget_GetJungleCampConfig::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayDeployableHealthPips.SetFilledPips
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayDeployableHealthPips_SetFilledPips final
{
public:
	int32                                         InFilledPips;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 InTeamAttitude;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWorldOverlayDeployableHealthPips_SetFilledPips) == 0x000004, "Wrong alignment on HWWorldOverlayDeployableHealthPips_SetFilledPips");
static_assert(sizeof(HWWorldOverlayDeployableHealthPips_SetFilledPips) == 0x000008, "Wrong size on HWWorldOverlayDeployableHealthPips_SetFilledPips");
static_assert(offsetof(HWWorldOverlayDeployableHealthPips_SetFilledPips, InFilledPips) == 0x000000, "Member 'HWWorldOverlayDeployableHealthPips_SetFilledPips::InFilledPips' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayDeployableHealthPips_SetFilledPips, InTeamAttitude) == 0x000004, "Member 'HWWorldOverlayDeployableHealthPips_SetFilledPips::InTeamAttitude' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayDeployableHealthPips.SetMaxPips
// 0x0004 (0x0004 - 0x0000)
struct HWWorldOverlayDeployableHealthPips_SetMaxPips final
{
public:
	int32                                         InMaxPips;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayDeployableHealthPips_SetMaxPips) == 0x000004, "Wrong alignment on HWWorldOverlayDeployableHealthPips_SetMaxPips");
static_assert(sizeof(HWWorldOverlayDeployableHealthPips_SetMaxPips) == 0x000004, "Wrong size on HWWorldOverlayDeployableHealthPips_SetMaxPips");
static_assert(offsetof(HWWorldOverlayDeployableHealthPips_SetMaxPips, InMaxPips) == 0x000000, "Member 'HWWorldOverlayDeployableHealthPips_SetMaxPips::InMaxPips' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.HandleOnInteractionCancelled
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayInteractWidget_HandleOnInteractionCancelled final
{
public:
	class UHWInteractableComponent*               Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractInstigator;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_HandleOnInteractionCancelled) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_HandleOnInteractionCancelled");
static_assert(sizeof(HWWorldOverlayInteractWidget_HandleOnInteractionCancelled) == 0x000010, "Wrong size on HWWorldOverlayInteractWidget_HandleOnInteractionCancelled");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionCancelled, Interactable) == 0x000000, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionCancelled::Interactable' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionCancelled, InteractInstigator) == 0x000008, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionCancelled::InteractInstigator' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.HandleOnInteractionCompleted
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayInteractWidget_HandleOnInteractionCompleted final
{
public:
	class UHWInteractableComponent*               Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractInstigator;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_HandleOnInteractionCompleted) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_HandleOnInteractionCompleted");
static_assert(sizeof(HWWorldOverlayInteractWidget_HandleOnInteractionCompleted) == 0x000010, "Wrong size on HWWorldOverlayInteractWidget_HandleOnInteractionCompleted");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionCompleted, Interactable) == 0x000000, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionCompleted::Interactable' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionCompleted, InteractInstigator) == 0x000008, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionCompleted::InteractInstigator' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.HandleOnInteractionStarted
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayInteractWidget_HandleOnInteractionStarted final
{
public:
	class UHWInteractableComponent*               Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractInstigator;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_HandleOnInteractionStarted) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_HandleOnInteractionStarted");
static_assert(sizeof(HWWorldOverlayInteractWidget_HandleOnInteractionStarted) == 0x000010, "Wrong size on HWWorldOverlayInteractWidget_HandleOnInteractionStarted");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionStarted, Interactable) == 0x000000, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionStarted::Interactable' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractionStarted, InteractInstigator) == 0x000008, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractionStarted::InteractInstigator' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.HandleOnInteractPromptTextUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated final
{
public:
	class FText                                   UpdatedPromptText;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated");
static_assert(sizeof(HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated) == 0x000018, "Wrong size on HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated, UpdatedPromptText) == 0x000000, "Member 'HWWorldOverlayInteractWidget_HandleOnInteractPromptTextUpdated::UpdatedPromptText' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.HandleOnUpdateIsCurrentlyTargeted
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted final
{
public:
	bool                                          bIsCurrentlyTargeted;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted) == 0x000001, "Wrong alignment on HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted");
static_assert(sizeof(HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted) == 0x000001, "Wrong size on HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted");
static_assert(offsetof(HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted, bIsCurrentlyTargeted) == 0x000000, "Member 'HWWorldOverlayInteractWidget_HandleOnUpdateIsCurrentlyTargeted::bIsCurrentlyTargeted' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.UpdateChannelProgressDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay) == 0x000004, "Wrong alignment on HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay");
static_assert(sizeof(HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay) == 0x000008, "Wrong size on HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay");
static_assert(offsetof(HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay, TimeRemaining) == 0x000000, "Member 'HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay::TimeRemaining' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay, Duration) == 0x000004, "Member 'HWWorldOverlayInteractWidget_UpdateChannelProgressDisplay::Duration' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.UpdateInteractDisplay
// 0x0002 (0x0002 - 0x0000)
struct HWWorldOverlayInteractWidget_UpdateInteractDisplay final
{
public:
	bool                                          bInProgress;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockedOut;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_UpdateInteractDisplay) == 0x000001, "Wrong alignment on HWWorldOverlayInteractWidget_UpdateInteractDisplay");
static_assert(sizeof(HWWorldOverlayInteractWidget_UpdateInteractDisplay) == 0x000002, "Wrong size on HWWorldOverlayInteractWidget_UpdateInteractDisplay");
static_assert(offsetof(HWWorldOverlayInteractWidget_UpdateInteractDisplay, bInProgress) == 0x000000, "Member 'HWWorldOverlayInteractWidget_UpdateInteractDisplay::bInProgress' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayInteractWidget_UpdateInteractDisplay, bLockedOut) == 0x000001, "Member 'HWWorldOverlayInteractWidget_UpdateInteractDisplay::bLockedOut' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.UpdatePromptText
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayInteractWidget_UpdatePromptText final
{
public:
	class FText                                   InPromptText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_UpdatePromptText) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_UpdatePromptText");
static_assert(sizeof(HWWorldOverlayInteractWidget_UpdatePromptText) == 0x000018, "Wrong size on HWWorldOverlayInteractWidget_UpdatePromptText");
static_assert(offsetof(HWWorldOverlayInteractWidget_UpdatePromptText, InPromptText) == 0x000000, "Member 'HWWorldOverlayInteractWidget_UpdatePromptText::InPromptText' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.GetAssociatedInteractableComponent
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent final
{
public:
	class UHWInteractableComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent");
static_assert(sizeof(HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent) == 0x000008, "Wrong size on HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent");
static_assert(offsetof(HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent, ReturnValue) == 0x000000, "Member 'HWWorldOverlayInteractWidget_GetAssociatedInteractableComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayInteractWidget.GetLocalPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayInteractWidget_GetLocalPlayerPawn final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayInteractWidget_GetLocalPlayerPawn) == 0x000008, "Wrong alignment on HWWorldOverlayInteractWidget_GetLocalPlayerPawn");
static_assert(sizeof(HWWorldOverlayInteractWidget_GetLocalPlayerPawn) == 0x000008, "Wrong size on HWWorldOverlayInteractWidget_GetLocalPlayerPawn");
static_assert(offsetof(HWWorldOverlayInteractWidget_GetLocalPlayerPawn, ReturnValue) == 0x000000, "Member 'HWWorldOverlayInteractWidget_GetLocalPlayerPawn::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.BP_UpdateDisplayName
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayNameplateWidget_BP_UpdateDisplayName final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_BP_UpdateDisplayName) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_BP_UpdateDisplayName");
static_assert(sizeof(HWWorldOverlayNameplateWidget_BP_UpdateDisplayName) == 0x000010, "Wrong size on HWWorldOverlayNameplateWidget_BP_UpdateDisplayName");
static_assert(offsetof(HWWorldOverlayNameplateWidget_BP_UpdateDisplayName, DisplayName) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_BP_UpdateDisplayName::DisplayName' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.DisplayCCImmuneBorderGlow
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow final
{
public:
	bool                                          bShowGlow;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow");
static_assert(sizeof(HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow");
static_assert(offsetof(HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow, bShowGlow) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_DisplayCCImmuneBorderGlow::bShowGlow' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.DisplayCCImmuneText
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayNameplateWidget_DisplayCCImmuneText final
{
public:
	class FText                                   ImmunityText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_DisplayCCImmuneText) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_DisplayCCImmuneText");
static_assert(sizeof(HWWorldOverlayNameplateWidget_DisplayCCImmuneText) == 0x000018, "Wrong size on HWWorldOverlayNameplateWidget_DisplayCCImmuneText");
static_assert(offsetof(HWWorldOverlayNameplateWidget_DisplayCCImmuneText, ImmunityText) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_DisplayCCImmuneText::ImmunityText' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.DisplayTitle
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayNameplateWidget_DisplayTitle final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      TitleAsset;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_DisplayTitle) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_DisplayTitle");
static_assert(sizeof(HWWorldOverlayNameplateWidget_DisplayTitle) == 0x000010, "Wrong size on HWWorldOverlayNameplateWidget_DisplayTitle");
static_assert(offsetof(HWWorldOverlayNameplateWidget_DisplayTitle, bDisplay) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_DisplayTitle::bDisplay' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_DisplayTitle, TitleAsset) == 0x000008, "Member 'HWWorldOverlayNameplateWidget_DisplayTitle::TitleAsset' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.HandleCharacterPlayerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged final
{
public:
	class AHWCharacter_Base*                      OwnerCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         NewPlayerState;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged");
static_assert(sizeof(HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged) == 0x000010, "Wrong size on HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged, OwnerCharacter) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged, NewPlayerState) == 0x000008, "Member 'HWWorldOverlayNameplateWidget_HandleCharacterPlayerStateChanged::NewPlayerState' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.HandlePlayerUuidReplicated
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  NewUuid;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated");
static_assert(sizeof(HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated) == 0x000018, "Wrong size on HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated, PlayerState) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated, NewUuid) == 0x000008, "Member 'HWWorldOverlayNameplateWidget_HandlePlayerUuidReplicated::NewUuid' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.HandleTagUpdated_HasLastHitIndicator
// 0x000C (0x000C - 0x0000)
struct HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator) == 0x000004, "Wrong alignment on HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator");
static_assert(sizeof(HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator) == 0x00000C, "Wrong size on HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator, Tag) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator::Tag' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator, Count) == 0x000008, "Member 'HWWorldOverlayNameplateWidget_HandleTagUpdated_HasLastHitIndicator::Count' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.OnHasLastHitIndicator
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_OnHasLastHitIndicator final
{
public:
	bool                                          bHasLastHitIndicator;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_OnHasLastHitIndicator) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_OnHasLastHitIndicator");
static_assert(sizeof(HWWorldOverlayNameplateWidget_OnHasLastHitIndicator) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_OnHasLastHitIndicator");
static_assert(offsetof(HWWorldOverlayNameplateWidget_OnHasLastHitIndicator, bHasLastHitIndicator) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_OnHasLastHitIndicator::bHasLastHitIndicator' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.OnLastHitValueSet
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayNameplateWidget_OnLastHitValueSet final
{
public:
	double                                        LastHitValue;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_OnLastHitValueSet) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_OnLastHitValueSet");
static_assert(sizeof(HWWorldOverlayNameplateWidget_OnLastHitValueSet) == 0x000008, "Wrong size on HWWorldOverlayNameplateWidget_OnLastHitValueSet");
static_assert(offsetof(HWWorldOverlayNameplateWidget_OnLastHitValueSet, LastHitValue) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_OnLastHitValueSet::LastHitValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.OnReceivedRemotePlayerLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout");
static_assert(sizeof(HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout) == 0x0000C0, "Wrong size on HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout");
static_assert(offsetof(HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout, bSuccess) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout::bSuccess' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout, InPlayerLoadout) == 0x000008, "Member 'HWWorldOverlayNameplateWidget_OnReceivedRemotePlayerLoadout::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.ShouldShowTargeted
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_ShouldShowTargeted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_ShouldShowTargeted) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_ShouldShowTargeted");
static_assert(sizeof(HWWorldOverlayNameplateWidget_ShouldShowTargeted) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_ShouldShowTargeted");
static_assert(offsetof(HWWorldOverlayNameplateWidget_ShouldShowTargeted, ReturnValue) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_ShouldShowTargeted::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.UpdateCCDisplay
// 0x0020 (0x0020 - 0x0000)
struct HWWorldOverlayNameplateWidget_UpdateCCDisplay final
{
public:
	struct FGameplayTagContainer                  ActiveCCTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_UpdateCCDisplay) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_UpdateCCDisplay");
static_assert(sizeof(HWWorldOverlayNameplateWidget_UpdateCCDisplay) == 0x000020, "Wrong size on HWWorldOverlayNameplateWidget_UpdateCCDisplay");
static_assert(offsetof(HWWorldOverlayNameplateWidget_UpdateCCDisplay, ActiveCCTags) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_UpdateCCDisplay::ActiveCCTags' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.UpdateShouldShowFullNameplate
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate final
{
public:
	bool                                          bShouldShowFullNameplate;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate");
static_assert(sizeof(HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate");
static_assert(offsetof(HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate, bShouldShowFullNameplate) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_UpdateShouldShowFullNameplate::bShouldShowFullNameplate' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.GetCharacterName
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayNameplateWidget_GetCharacterName final
{
public:
	class FString                                 OutCharacterName;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWorldOverlayNameplateWidget_GetCharacterName) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_GetCharacterName");
static_assert(sizeof(HWWorldOverlayNameplateWidget_GetCharacterName) == 0x000018, "Wrong size on HWWorldOverlayNameplateWidget_GetCharacterName");
static_assert(offsetof(HWWorldOverlayNameplateWidget_GetCharacterName, OutCharacterName) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_GetCharacterName::OutCharacterName' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_GetCharacterName, ReturnValue) == 0x000010, "Member 'HWWorldOverlayNameplateWidget_GetCharacterName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.GetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayNameplateWidget_GetPlayerName final
{
public:
	class FString                                 OutPlayerName;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWWorldOverlayNameplateWidget_GetPlayerName) == 0x000008, "Wrong alignment on HWWorldOverlayNameplateWidget_GetPlayerName");
static_assert(sizeof(HWWorldOverlayNameplateWidget_GetPlayerName) == 0x000018, "Wrong size on HWWorldOverlayNameplateWidget_GetPlayerName");
static_assert(offsetof(HWWorldOverlayNameplateWidget_GetPlayerName, OutPlayerName) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_GetPlayerName::OutPlayerName' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayNameplateWidget_GetPlayerName, ReturnValue) == 0x000010, "Member 'HWWorldOverlayNameplateWidget_GetPlayerName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.IsLockedOn
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_IsLockedOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_IsLockedOn) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_IsLockedOn");
static_assert(sizeof(HWWorldOverlayNameplateWidget_IsLockedOn) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_IsLockedOn");
static_assert(offsetof(HWWorldOverlayNameplateWidget_IsLockedOn, ReturnValue) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_IsLockedOn::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNameplateWidget.IsTargeted
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNameplateWidget_IsTargeted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNameplateWidget_IsTargeted) == 0x000001, "Wrong alignment on HWWorldOverlayNameplateWidget_IsTargeted");
static_assert(sizeof(HWWorldOverlayNameplateWidget_IsTargeted) == 0x000001, "Wrong size on HWWorldOverlayNameplateWidget_IsTargeted");
static_assert(offsetof(HWWorldOverlayNameplateWidget_IsTargeted, ReturnValue) == 0x000000, "Member 'HWWorldOverlayNameplateWidget_IsTargeted::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayNPEWidget.SetHelpTipVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWWorldOverlayNPEWidget_SetHelpTipVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayNPEWidget_SetHelpTipVisibility) == 0x000001, "Wrong alignment on HWWorldOverlayNPEWidget_SetHelpTipVisibility");
static_assert(sizeof(HWWorldOverlayNPEWidget_SetHelpTipVisibility) == 0x000001, "Wrong size on HWWorldOverlayNPEWidget_SetHelpTipVisibility");
static_assert(offsetof(HWWorldOverlayNPEWidget_SetHelpTipVisibility, bIsVisible) == 0x000000, "Member 'HWWorldOverlayNPEWidget_SetHelpTipVisibility::bIsVisible' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveManager.HandleCharacterItemChanged_Local
// 0x0018 (0x0018 - 0x0000)
struct HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local final
{
public:
	TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 NewCharacterItem;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local) == 0x000008, "Wrong alignment on HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local");
static_assert(sizeof(HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local) == 0x000018, "Wrong size on HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local");
static_assert(offsetof(HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local, LoadoutOwner) == 0x000000, "Member 'HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local::LoadoutOwner' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local, NewCharacterItem) == 0x000010, "Member 'HWWorldOverlayPassiveManager_HandleCharacterItemChanged_Local::NewCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveManager.HandleLocalPlayerStateReceived_Local
// 0x0008 (0x0008 - 0x0000)
struct HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local) == 0x000008, "Wrong alignment on HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local");
static_assert(sizeof(HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local) == 0x000008, "Wrong size on HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local");
static_assert(offsetof(HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local, PlayerState) == 0x000000, "Member 'HWWorldOverlayPassiveManager_HandleLocalPlayerStateReceived_Local::PlayerState' has a wrong offset!");

// Function HemingwayUI.HWWorldOverlayPassiveManager.HandlePlayerStateAbilitySystemActorChanged_Local
// 0x0010 (0x0010 - 0x0000)
struct HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacterAbilitySystemActor*         NewABSActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local) == 0x000008, "Wrong alignment on HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local");
static_assert(sizeof(HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local) == 0x000010, "Wrong size on HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local");
static_assert(offsetof(HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local, PlayerState) == 0x000000, "Member 'HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local::PlayerState' has a wrong offset!");
static_assert(offsetof(HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local, NewABSActor) == 0x000008, "Member 'HWWorldOverlayPassiveManager_HandlePlayerStateAbilitySystemActorChanged_Local::NewABSActor' has a wrong offset!");

// Function HemingwayUI.HWInWorldTextWidget.HandleInWorldTextUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWInWorldTextWidget_HandleInWorldTextUpdated final
{
public:
	class FText                                   NewInWorldText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInWorldTextWidget_HandleInWorldTextUpdated) == 0x000008, "Wrong alignment on HWInWorldTextWidget_HandleInWorldTextUpdated");
static_assert(sizeof(HWInWorldTextWidget_HandleInWorldTextUpdated) == 0x000018, "Wrong size on HWInWorldTextWidget_HandleInWorldTextUpdated");
static_assert(offsetof(HWInWorldTextWidget_HandleInWorldTextUpdated, NewInWorldText) == 0x000000, "Member 'HWInWorldTextWidget_HandleInWorldTextUpdated::NewInWorldText' has a wrong offset!");

// Function HemingwayUI.HWInWorldTextWidget.SetAssociatedWidgetComponent
// 0x0008 (0x0008 - 0x0000)
struct HWInWorldTextWidget_SetAssociatedWidgetComponent final
{
public:
	class UHWInWorldTextWidgetComponent*          InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInWorldTextWidget_SetAssociatedWidgetComponent) == 0x000008, "Wrong alignment on HWInWorldTextWidget_SetAssociatedWidgetComponent");
static_assert(sizeof(HWInWorldTextWidget_SetAssociatedWidgetComponent) == 0x000008, "Wrong size on HWInWorldTextWidget_SetAssociatedWidgetComponent");
static_assert(offsetof(HWInWorldTextWidget_SetAssociatedWidgetComponent, InComponent) == 0x000000, "Member 'HWInWorldTextWidget_SetAssociatedWidgetComponent::InComponent' has a wrong offset!");

// Function HemingwayUI.HWInWorldTextWidget.SetWrapText
// 0x0008 (0x0008 - 0x0000)
struct HWInWorldTextWidget_SetWrapText final
{
public:
	bool                                          bShouldWrap;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InWrapTextAt;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInWorldTextWidget_SetWrapText) == 0x000004, "Wrong alignment on HWInWorldTextWidget_SetWrapText");
static_assert(sizeof(HWInWorldTextWidget_SetWrapText) == 0x000008, "Wrong size on HWInWorldTextWidget_SetWrapText");
static_assert(offsetof(HWInWorldTextWidget_SetWrapText, bShouldWrap) == 0x000000, "Member 'HWInWorldTextWidget_SetWrapText::bShouldWrap' has a wrong offset!");
static_assert(offsetof(HWInWorldTextWidget_SetWrapText, InWrapTextAt) == 0x000004, "Member 'HWInWorldTextWidget_SetWrapText::InWrapTextAt' has a wrong offset!");

// Function HemingwayUI.HWInWorldTextWidget.GetTextWidget
// 0x0008 (0x0008 - 0x0000)
struct HWInWorldTextWidget_GetTextWidget final
{
public:
	class UHWTextBlock*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInWorldTextWidget_GetTextWidget) == 0x000008, "Wrong alignment on HWInWorldTextWidget_GetTextWidget");
static_assert(sizeof(HWInWorldTextWidget_GetTextWidget) == 0x000008, "Wrong size on HWInWorldTextWidget_GetTextWidget");
static_assert(offsetof(HWInWorldTextWidget_GetTextWidget, ReturnValue) == 0x000000, "Member 'HWInWorldTextWidget_GetTextWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.AddRoleSortingTag
// 0x0038 (0x0038 - 0x0000)
struct HWItemStoreAllItemListWidget_AddRoleSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FilterLabel;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FHWAllItemListGroup>            CategorySortingInfo;                               // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreAllItemListWidget_AddRoleSortingTag) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_AddRoleSortingTag");
static_assert(sizeof(HWItemStoreAllItemListWidget_AddRoleSortingTag) == 0x000038, "Wrong size on HWItemStoreAllItemListWidget_AddRoleSortingTag");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddRoleSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreAllItemListWidget_AddRoleSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddRoleSortingTag, FilterLabel) == 0x000008, "Member 'HWItemStoreAllItemListWidget_AddRoleSortingTag::FilterLabel' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddRoleSortingTag, CategorySortingInfo) == 0x000020, "Member 'HWItemStoreAllItemListWidget_AddRoleSortingTag::CategorySortingInfo' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddRoleSortingTag, bShouldFilter) == 0x000030, "Member 'HWItemStoreAllItemListWidget_AddRoleSortingTag::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.AddSortingTag
// 0x000C (0x000C - 0x0000)
struct HWItemStoreAllItemListWidget_AddSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreAllItemListWidget_AddSortingTag) == 0x000004, "Wrong alignment on HWItemStoreAllItemListWidget_AddSortingTag");
static_assert(sizeof(HWItemStoreAllItemListWidget_AddSortingTag) == 0x00000C, "Wrong size on HWItemStoreAllItemListWidget_AddSortingTag");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreAllItemListWidget_AddSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_AddSortingTag, bShouldFilter) == 0x000008, "Member 'HWItemStoreAllItemListWidget_AddSortingTag::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.ClearSortingTags
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_ClearSortingTags final
{
public:
	bool                                          bClearRoles;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_ClearSortingTags) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_ClearSortingTags");
static_assert(sizeof(HWItemStoreAllItemListWidget_ClearSortingTags) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_ClearSortingTags");
static_assert(offsetof(HWItemStoreAllItemListWidget_ClearSortingTags, bClearRoles) == 0x000000, "Member 'HWItemStoreAllItemListWidget_ClearSortingTags::bClearRoles' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.DisplayInvertCategoriesButton
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton");
static_assert(sizeof(HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton");
static_assert(offsetof(HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton, bShouldShow) == 0x000000, "Member 'HWItemStoreAllItemListWidget_DisplayInvertCategoriesButton::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.FindAndSelectItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreAllItemListWidget_FindAndSelectItem final
{
public:
	const class UHWEquipmentItem*                 SelectedEquipmentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_FindAndSelectItem) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_FindAndSelectItem");
static_assert(sizeof(HWItemStoreAllItemListWidget_FindAndSelectItem) == 0x000008, "Wrong size on HWItemStoreAllItemListWidget_FindAndSelectItem");
static_assert(offsetof(HWItemStoreAllItemListWidget_FindAndSelectItem, SelectedEquipmentItem) == 0x000000, "Member 'HWItemStoreAllItemListWidget_FindAndSelectItem::SelectedEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.HandleCategoryGamepadHovered
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered final
{
public:
	class UHWItemStoreItemCategoryWidget*         CategoryWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered");
static_assert(sizeof(HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered) == 0x000008, "Wrong size on HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered");
static_assert(offsetof(HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered, CategoryWidget) == 0x000000, "Member 'HWItemStoreAllItemListWidget_HandleCategoryGamepadHovered::CategoryWidget' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.HandleDynamicItemAdded
// 0x0040 (0x0040 - 0x0000)
struct HWItemStoreAllItemListWidget_HandleDynamicItemAdded final
{
public:
	struct FHWDynamicItemInfo                     NewDynamicItem;                                    // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_HandleDynamicItemAdded) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_HandleDynamicItemAdded");
static_assert(sizeof(HWItemStoreAllItemListWidget_HandleDynamicItemAdded) == 0x000040, "Wrong size on HWItemStoreAllItemListWidget_HandleDynamicItemAdded");
static_assert(offsetof(HWItemStoreAllItemListWidget_HandleDynamicItemAdded, NewDynamicItem) == 0x000000, "Member 'HWItemStoreAllItemListWidget_HandleDynamicItemAdded::NewDynamicItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.HandleDynamicItemRemoved
// 0x0040 (0x0040 - 0x0000)
struct HWItemStoreAllItemListWidget_HandleDynamicItemRemoved final
{
public:
	struct FHWDynamicItemInfo                     OldDynamicItem;                                    // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_HandleDynamicItemRemoved) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_HandleDynamicItemRemoved");
static_assert(sizeof(HWItemStoreAllItemListWidget_HandleDynamicItemRemoved) == 0x000040, "Wrong size on HWItemStoreAllItemListWidget_HandleDynamicItemRemoved");
static_assert(offsetof(HWItemStoreAllItemListWidget_HandleDynamicItemRemoved, OldDynamicItem) == 0x000000, "Member 'HWItemStoreAllItemListWidget_HandleDynamicItemRemoved::OldDynamicItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.HandleEquipmentSlotTypeSelected
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected final
{
public:
	struct FGameplayTag                           EquipmentSlotType;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected) == 0x000004, "Wrong alignment on HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected");
static_assert(sizeof(HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected) == 0x000008, "Wrong size on HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected");
static_assert(offsetof(HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected, EquipmentSlotType) == 0x000000, "Member 'HWItemStoreAllItemListWidget_HandleEquipmentSlotTypeSelected::EquipmentSlotType' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWItemStoreAllItemListWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.OnClearFiltersAction
// 0x0002 (0x0002 - 0x0000)
struct HWItemStoreAllItemListWidget_OnClearFiltersAction final
{
public:
	bool                                          bClearSearch;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearRoles;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_OnClearFiltersAction) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_OnClearFiltersAction");
static_assert(sizeof(HWItemStoreAllItemListWidget_OnClearFiltersAction) == 0x000002, "Wrong size on HWItemStoreAllItemListWidget_OnClearFiltersAction");
static_assert(offsetof(HWItemStoreAllItemListWidget_OnClearFiltersAction, bClearSearch) == 0x000000, "Member 'HWItemStoreAllItemListWidget_OnClearFiltersAction::bClearSearch' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_OnClearFiltersAction, bClearRoles) == 0x000001, "Member 'HWItemStoreAllItemListWidget_OnClearFiltersAction::bClearRoles' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.OnSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreAllItemListWidget_OnSearchTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_OnSearchTextChanged) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_OnSearchTextChanged");
static_assert(sizeof(HWItemStoreAllItemListWidget_OnSearchTextChanged) == 0x000018, "Wrong size on HWItemStoreAllItemListWidget_OnSearchTextChanged");
static_assert(offsetof(HWItemStoreAllItemListWidget_OnSearchTextChanged, InText) == 0x000000, "Member 'HWItemStoreAllItemListWidget_OnSearchTextChanged::InText' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.PopulateItemsIntoCategories
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreAllItemListWidget_PopulateItemsIntoCategories final
{
public:
	TArray<struct FHWAllItemListGroup>            CategorySortingInfo;                               // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_PopulateItemsIntoCategories) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_PopulateItemsIntoCategories");
static_assert(sizeof(HWItemStoreAllItemListWidget_PopulateItemsIntoCategories) == 0x000010, "Wrong size on HWItemStoreAllItemListWidget_PopulateItemsIntoCategories");
static_assert(offsetof(HWItemStoreAllItemListWidget_PopulateItemsIntoCategories, CategorySortingInfo) == 0x000000, "Member 'HWItemStoreAllItemListWidget_PopulateItemsIntoCategories::CategorySortingInfo' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.PopulatePinnedBuildCategories
// 0x0190 (0x0190 - 0x0000)
struct HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories final
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0000(0x0190)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories");
static_assert(sizeof(HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories) == 0x000190, "Wrong size on HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories");
static_assert(offsetof(HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories, GodBuild) == 0x000000, "Member 'HWItemStoreAllItemListWidget_PopulatePinnedBuildCategories::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.RemoveRoleSortingTag
// 0x000C (0x000C - 0x0000)
struct HWItemStoreAllItemListWidget_RemoveRoleSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreAllItemListWidget_RemoveRoleSortingTag) == 0x000004, "Wrong alignment on HWItemStoreAllItemListWidget_RemoveRoleSortingTag");
static_assert(sizeof(HWItemStoreAllItemListWidget_RemoveRoleSortingTag) == 0x00000C, "Wrong size on HWItemStoreAllItemListWidget_RemoveRoleSortingTag");
static_assert(offsetof(HWItemStoreAllItemListWidget_RemoveRoleSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreAllItemListWidget_RemoveRoleSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_RemoveRoleSortingTag, bShouldFilter) == 0x000008, "Member 'HWItemStoreAllItemListWidget_RemoveRoleSortingTag::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.RemoveSortingTag
// 0x000C (0x000C - 0x0000)
struct HWItemStoreAllItemListWidget_RemoveSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreAllItemListWidget_RemoveSortingTag) == 0x000004, "Wrong alignment on HWItemStoreAllItemListWidget_RemoveSortingTag");
static_assert(sizeof(HWItemStoreAllItemListWidget_RemoveSortingTag) == 0x00000C, "Wrong size on HWItemStoreAllItemListWidget_RemoveSortingTag");
static_assert(offsetof(HWItemStoreAllItemListWidget_RemoveSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreAllItemListWidget_RemoveSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreAllItemListWidget_RemoveSortingTag, bShouldFilter) == 0x000008, "Member 'HWItemStoreAllItemListWidget_RemoveSortingTag::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.ScrollToEdge
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_ScrollToEdge final
{
public:
	bool                                          bScrollToTop;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_ScrollToEdge) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_ScrollToEdge");
static_assert(sizeof(HWItemStoreAllItemListWidget_ScrollToEdge) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_ScrollToEdge");
static_assert(offsetof(HWItemStoreAllItemListWidget_ScrollToEdge, bScrollToTop) == 0x000000, "Member 'HWItemStoreAllItemListWidget_ScrollToEdge::bScrollToTop' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.UpdateItemListHeader
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreAllItemListWidget_UpdateItemListHeader final
{
public:
	class FText                                   HeaderText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_UpdateItemListHeader) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_UpdateItemListHeader");
static_assert(sizeof(HWItemStoreAllItemListWidget_UpdateItemListHeader) == 0x000018, "Wrong size on HWItemStoreAllItemListWidget_UpdateItemListHeader");
static_assert(offsetof(HWItemStoreAllItemListWidget_UpdateItemListHeader, HeaderText) == 0x000000, "Member 'HWItemStoreAllItemListWidget_UpdateItemListHeader::HeaderText' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_UpdateLayout");
static_assert(sizeof(HWItemStoreAllItemListWidget_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_UpdateLayout");
static_assert(offsetof(HWItemStoreAllItemListWidget_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreAllItemListWidget_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.GetCurrentGridDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel final
{
public:
	EHWItemStoreGridDetailLevel                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel");
static_assert(sizeof(HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel");
static_assert(offsetof(HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel, ReturnValue) == 0x000000, "Member 'HWItemStoreAllItemListWidget_GetCurrentGridDetailLevel::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.GetCurrentLayoutType
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreAllItemListWidget_GetCurrentLayoutType final
{
public:
	EHWItemStoreLayoutType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_GetCurrentLayoutType) == 0x000001, "Wrong alignment on HWItemStoreAllItemListWidget_GetCurrentLayoutType");
static_assert(sizeof(HWItemStoreAllItemListWidget_GetCurrentLayoutType) == 0x000001, "Wrong size on HWItemStoreAllItemListWidget_GetCurrentLayoutType");
static_assert(offsetof(HWItemStoreAllItemListWidget_GetCurrentLayoutType, ReturnValue) == 0x000000, "Member 'HWItemStoreAllItemListWidget_GetCurrentLayoutType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.GetFirstVisibleItemCategory
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory final
{
public:
	class UHWItemStoreItemCategoryWidget*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory");
static_assert(sizeof(HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory) == 0x000008, "Wrong size on HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory");
static_assert(offsetof(HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory, ReturnValue) == 0x000000, "Member 'HWItemStoreAllItemListWidget_GetFirstVisibleItemCategory::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreAllItemListWidget.GetItemToFocus
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreAllItemListWidget_GetItemToFocus final
{
public:
	class UHWItemStoreItemEntry*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreAllItemListWidget_GetItemToFocus) == 0x000008, "Wrong alignment on HWItemStoreAllItemListWidget_GetItemToFocus");
static_assert(sizeof(HWItemStoreAllItemListWidget_GetItemToFocus) == 0x000008, "Wrong size on HWItemStoreAllItemListWidget_GetItemToFocus");
static_assert(offsetof(HWItemStoreAllItemListWidget_GetItemToFocus, ReturnValue) == 0x000000, "Member 'HWItemStoreAllItemListWidget_GetItemToFocus::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreBuildsIntoWidget.DisplayButtonPrompt
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreBuildsIntoWidget_DisplayButtonPrompt final
{
public:
	bool                                          bShowPrompt;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreBuildsIntoWidget_DisplayButtonPrompt) == 0x000001, "Wrong alignment on HWItemStoreBuildsIntoWidget_DisplayButtonPrompt");
static_assert(sizeof(HWItemStoreBuildsIntoWidget_DisplayButtonPrompt) == 0x000001, "Wrong size on HWItemStoreBuildsIntoWidget_DisplayButtonPrompt");
static_assert(offsetof(HWItemStoreBuildsIntoWidget_DisplayButtonPrompt, bShowPrompt) == 0x000000, "Member 'HWItemStoreBuildsIntoWidget_DisplayButtonPrompt::bShowPrompt' has a wrong offset!");

// Function HemingwayUI.HWItemStoreBuildsIntoWidget.DisplayOverflowButton
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreBuildsIntoWidget_DisplayOverflowButton final
{
public:
	int32                                         OverflowCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreBuildsIntoWidget_DisplayOverflowButton) == 0x000004, "Wrong alignment on HWItemStoreBuildsIntoWidget_DisplayOverflowButton");
static_assert(sizeof(HWItemStoreBuildsIntoWidget_DisplayOverflowButton) == 0x000004, "Wrong size on HWItemStoreBuildsIntoWidget_DisplayOverflowButton");
static_assert(offsetof(HWItemStoreBuildsIntoWidget_DisplayOverflowButton, OverflowCount) == 0x000000, "Member 'HWItemStoreBuildsIntoWidget_DisplayOverflowButton::OverflowCount' has a wrong offset!");

// Function HemingwayUI.HWItemStoreBuildsIntoWidget.SelectionPanelActivated
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreBuildsIntoWidget_SelectionPanelActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreBuildsIntoWidget_SelectionPanelActivated) == 0x000001, "Wrong alignment on HWItemStoreBuildsIntoWidget_SelectionPanelActivated");
static_assert(sizeof(HWItemStoreBuildsIntoWidget_SelectionPanelActivated) == 0x000001, "Wrong size on HWItemStoreBuildsIntoWidget_SelectionPanelActivated");
static_assert(offsetof(HWItemStoreBuildsIntoWidget_SelectionPanelActivated, bActivated) == 0x000000, "Member 'HWItemStoreBuildsIntoWidget_SelectionPanelActivated::bActivated' has a wrong offset!");

// Function HemingwayUI.HWItemStoreBuildsIntoWidget.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreBuildsIntoWidget_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreBuildsIntoWidget_IsEmpty) == 0x000001, "Wrong alignment on HWItemStoreBuildsIntoWidget_IsEmpty");
static_assert(sizeof(HWItemStoreBuildsIntoWidget_IsEmpty) == 0x000001, "Wrong size on HWItemStoreBuildsIntoWidget_IsEmpty");
static_assert(offsetof(HWItemStoreBuildsIntoWidget_IsEmpty, ReturnValue) == 0x000000, "Member 'HWItemStoreBuildsIntoWidget_IsEmpty::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuilderInfoWidget.DisplayGodBuildInfo
// 0x0190 (0x0190 - 0x0000)
struct HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo final
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo) == 0x000008, "Wrong alignment on HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo");
static_assert(sizeof(HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo) == 0x000190, "Wrong size on HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo");
static_assert(offsetof(HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo, GodBuild) == 0x000000, "Member 'HWItemStoreGodBuilderInfoWidget_DisplayGodBuildInfo::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.DisplayBuilds
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreGodBuildViewer_DisplayBuilds final
{
public:
	TArray<class UHWGodBuildContainer*>           GodBuildList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_DisplayBuilds) == 0x000008, "Wrong alignment on HWItemStoreGodBuildViewer_DisplayBuilds");
static_assert(sizeof(HWItemStoreGodBuildViewer_DisplayBuilds) == 0x000010, "Wrong size on HWItemStoreGodBuildViewer_DisplayBuilds");
static_assert(offsetof(HWItemStoreGodBuildViewer_DisplayBuilds, GodBuildList) == 0x000000, "Member 'HWItemStoreGodBuildViewer_DisplayBuilds::GodBuildList' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.DisplayFullBuild
// 0x0190 (0x0190 - 0x0000)
struct HWItemStoreGodBuildViewer_DisplayFullBuild final
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_DisplayFullBuild) == 0x000008, "Wrong alignment on HWItemStoreGodBuildViewer_DisplayFullBuild");
static_assert(sizeof(HWItemStoreGodBuildViewer_DisplayFullBuild) == 0x000190, "Wrong size on HWItemStoreGodBuildViewer_DisplayFullBuild");
static_assert(offsetof(HWItemStoreGodBuildViewer_DisplayFullBuild, GodBuild) == 0x000000, "Member 'HWItemStoreGodBuildViewer_DisplayFullBuild::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.OnCurrentViewingBuildIsPrimaryChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged final
{
public:
	bool                                          bCurrentBuildIsPrimary;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged) == 0x000001, "Wrong alignment on HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged");
static_assert(sizeof(HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged) == 0x000001, "Wrong size on HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged");
static_assert(offsetof(HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged, bCurrentBuildIsPrimary) == 0x000000, "Member 'HWItemStoreGodBuildViewer_OnCurrentViewingBuildIsPrimaryChanged::bCurrentBuildIsPrimary' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.OnPrimaryBuildUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BuildGuid;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated) == 0x000008, "Wrong alignment on HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated");
static_assert(sizeof(HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated) == 0x000018, "Wrong size on HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated");
static_assert(offsetof(HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated, GodItem) == 0x000000, "Member 'HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated::GodItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated, BuildGuid) == 0x000008, "Member 'HWItemStoreGodBuildViewer_OnPrimaryBuildUpdated::BuildGuid' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.RequestBuildEntries
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreGodBuildViewer_RequestBuildEntries final
{
public:
	EHWBuildsListDisplayType                      ListDisplayType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_RequestBuildEntries) == 0x000001, "Wrong alignment on HWItemStoreGodBuildViewer_RequestBuildEntries");
static_assert(sizeof(HWItemStoreGodBuildViewer_RequestBuildEntries) == 0x000001, "Wrong size on HWItemStoreGodBuildViewer_RequestBuildEntries");
static_assert(offsetof(HWItemStoreGodBuildViewer_RequestBuildEntries, ListDisplayType) == 0x000000, "Member 'HWItemStoreGodBuildViewer_RequestBuildEntries::ListDisplayType' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.RequestFullBuild
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreGodBuildViewer_RequestFullBuild final
{
public:
	struct FGuid                                  InBuildId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_RequestFullBuild) == 0x000004, "Wrong alignment on HWItemStoreGodBuildViewer_RequestFullBuild");
static_assert(sizeof(HWItemStoreGodBuildViewer_RequestFullBuild) == 0x000010, "Wrong size on HWItemStoreGodBuildViewer_RequestFullBuild");
static_assert(offsetof(HWItemStoreGodBuildViewer_RequestFullBuild, InBuildId) == 0x000000, "Member 'HWItemStoreGodBuildViewer_RequestFullBuild::InBuildId' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.ShowBuildLoading
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreGodBuildViewer_ShowBuildLoading final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_ShowBuildLoading) == 0x000001, "Wrong alignment on HWItemStoreGodBuildViewer_ShowBuildLoading");
static_assert(sizeof(HWItemStoreGodBuildViewer_ShowBuildLoading) == 0x000001, "Wrong size on HWItemStoreGodBuildViewer_ShowBuildLoading");
static_assert(offsetof(HWItemStoreGodBuildViewer_ShowBuildLoading, bShouldShow) == 0x000000, "Member 'HWItemStoreGodBuildViewer_ShowBuildLoading::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWItemStoreGodBuildViewer.ShowContentLoading
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreGodBuildViewer_ShowContentLoading final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreGodBuildViewer_ShowContentLoading) == 0x000001, "Wrong alignment on HWItemStoreGodBuildViewer_ShowContentLoading");
static_assert(sizeof(HWItemStoreGodBuildViewer_ShowContentLoading) == 0x000001, "Wrong size on HWItemStoreGodBuildViewer_ShowContentLoading");
static_assert(offsetof(HWItemStoreGodBuildViewer_ShowContentLoading, bShouldShow) == 0x000000, "Member 'HWItemStoreGodBuildViewer_ShowContentLoading::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWItemStoreInventoryEntry.GetTrackedEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreInventoryEntry_GetTrackedEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreInventoryEntry_GetTrackedEquipmentItem) == 0x000008, "Wrong alignment on HWItemStoreInventoryEntry_GetTrackedEquipmentItem");
static_assert(sizeof(HWItemStoreInventoryEntry_GetTrackedEquipmentItem) == 0x000008, "Wrong size on HWItemStoreInventoryEntry_GetTrackedEquipmentItem");
static_assert(offsetof(HWItemStoreInventoryEntry_GetTrackedEquipmentItem, ReturnValue) == 0x000000, "Member 'HWItemStoreInventoryEntry_GetTrackedEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.AddSortingTag
// 0x0030 (0x0030 - 0x0000)
struct HWItemStoreItemCategoryWidget_AddSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_AddSortingTag) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_AddSortingTag");
static_assert(sizeof(HWItemStoreItemCategoryWidget_AddSortingTag) == 0x000030, "Wrong size on HWItemStoreItemCategoryWidget_AddSortingTag");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AddSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_AddSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AddSortingTag, bShouldFilter) == 0x000008, "Member 'HWItemStoreItemCategoryWidget_AddSortingTag::bShouldFilter' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AddSortingTag, ReturnValue) == 0x000010, "Member 'HWItemStoreItemCategoryWidget_AddSortingTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.AppendEquipmentItem
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemCategoryWidget_AppendEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdate;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWItemStoreItemEntry*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_AppendEquipmentItem) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_AppendEquipmentItem");
static_assert(sizeof(HWItemStoreItemCategoryWidget_AppendEquipmentItem) == 0x000018, "Wrong size on HWItemStoreItemCategoryWidget_AppendEquipmentItem");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AppendEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_AppendEquipmentItem::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AppendEquipmentItem, bUpdate) == 0x000008, "Member 'HWItemStoreItemCategoryWidget_AppendEquipmentItem::bUpdate' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_AppendEquipmentItem, ReturnValue) == 0x000010, "Member 'HWItemStoreItemCategoryWidget_AppendEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.Clear
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemCategoryWidget_Clear final
{
public:
	bool                                          bClearItemData;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_Clear) == 0x000001, "Wrong alignment on HWItemStoreItemCategoryWidget_Clear");
static_assert(sizeof(HWItemStoreItemCategoryWidget_Clear) == 0x000001, "Wrong size on HWItemStoreItemCategoryWidget_Clear");
static_assert(offsetof(HWItemStoreItemCategoryWidget_Clear, bClearItemData) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_Clear::bClearItemData' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.ClearSortingTags
// 0x0040 (0x0040 - 0x0000)
struct HWItemStoreItemCategoryWidget_ClearSortingTags final
{
public:
	struct FGameplayTagContainer                  TagsToRemove;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_ClearSortingTags) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_ClearSortingTags");
static_assert(sizeof(HWItemStoreItemCategoryWidget_ClearSortingTags) == 0x000040, "Wrong size on HWItemStoreItemCategoryWidget_ClearSortingTags");
static_assert(offsetof(HWItemStoreItemCategoryWidget_ClearSortingTags, TagsToRemove) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_ClearSortingTags::TagsToRemove' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_ClearSortingTags, ReturnValue) == 0x000020, "Member 'HWItemStoreItemCategoryWidget_ClearSortingTags::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.PopulateEquipmentItem
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreItemCategoryWidget_PopulateEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWItemStoreItemEntry*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_PopulateEquipmentItem) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_PopulateEquipmentItem");
static_assert(sizeof(HWItemStoreItemCategoryWidget_PopulateEquipmentItem) == 0x000010, "Wrong size on HWItemStoreItemCategoryWidget_PopulateEquipmentItem");
static_assert(offsetof(HWItemStoreItemCategoryWidget_PopulateEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_PopulateEquipmentItem::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_PopulateEquipmentItem, ReturnValue) == 0x000008, "Member 'HWItemStoreItemCategoryWidget_PopulateEquipmentItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.RemoveEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemCategoryWidget_RemoveEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_RemoveEquipmentItem) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_RemoveEquipmentItem");
static_assert(sizeof(HWItemStoreItemCategoryWidget_RemoveEquipmentItem) == 0x000008, "Wrong size on HWItemStoreItemCategoryWidget_RemoveEquipmentItem");
static_assert(offsetof(HWItemStoreItemCategoryWidget_RemoveEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_RemoveEquipmentItem::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.RemoveSortingTag
// 0x0030 (0x0030 - 0x0000)
struct HWItemStoreItemCategoryWidget_RemoveSortingTag final
{
public:
	struct FGameplayTag                           SortingTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_RemoveSortingTag) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_RemoveSortingTag");
static_assert(sizeof(HWItemStoreItemCategoryWidget_RemoveSortingTag) == 0x000030, "Wrong size on HWItemStoreItemCategoryWidget_RemoveSortingTag");
static_assert(offsetof(HWItemStoreItemCategoryWidget_RemoveSortingTag, SortingTag) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_RemoveSortingTag::SortingTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_RemoveSortingTag, bShouldFilter) == 0x000008, "Member 'HWItemStoreItemCategoryWidget_RemoveSortingTag::bShouldFilter' has a wrong offset!");
static_assert(offsetof(HWItemStoreItemCategoryWidget_RemoveSortingTag, ReturnValue) == 0x000010, "Member 'HWItemStoreItemCategoryWidget_RemoveSortingTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.SelectItemEntry
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemCategoryWidget_SelectItemEntry final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_SelectItemEntry) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_SelectItemEntry");
static_assert(sizeof(HWItemStoreItemCategoryWidget_SelectItemEntry) == 0x000008, "Wrong size on HWItemStoreItemCategoryWidget_SelectItemEntry");
static_assert(offsetof(HWItemStoreItemCategoryWidget_SelectItemEntry, EquipmentItem) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_SelectItemEntry::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.SetCategoryDescription
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemCategoryWidget_SetCategoryDescription final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_SetCategoryDescription) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_SetCategoryDescription");
static_assert(sizeof(HWItemStoreItemCategoryWidget_SetCategoryDescription) == 0x000018, "Wrong size on HWItemStoreItemCategoryWidget_SetCategoryDescription");
static_assert(offsetof(HWItemStoreItemCategoryWidget_SetCategoryDescription, Text) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_SetCategoryDescription::Text' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.SetCategoryLabel
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemCategoryWidget_SetCategoryLabel final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_SetCategoryLabel) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_SetCategoryLabel");
static_assert(sizeof(HWItemStoreItemCategoryWidget_SetCategoryLabel) == 0x000018, "Wrong size on HWItemStoreItemCategoryWidget_SetCategoryLabel");
static_assert(offsetof(HWItemStoreItemCategoryWidget_SetCategoryLabel, Label) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_SetCategoryLabel::Label' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.SetCategoryLongDescription
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemCategoryWidget_SetCategoryLongDescription final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_SetCategoryLongDescription) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_SetCategoryLongDescription");
static_assert(sizeof(HWItemStoreItemCategoryWidget_SetCategoryLongDescription) == 0x000018, "Wrong size on HWItemStoreItemCategoryWidget_SetCategoryLongDescription");
static_assert(offsetof(HWItemStoreItemCategoryWidget_SetCategoryLongDescription, Text) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_SetCategoryLongDescription::Text' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.UpdateDetailLevel
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemCategoryWidget_UpdateDetailLevel final
{
public:
	EHWItemStoreGridDetailLevel                   DetailLevel;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_UpdateDetailLevel) == 0x000001, "Wrong alignment on HWItemStoreItemCategoryWidget_UpdateDetailLevel");
static_assert(sizeof(HWItemStoreItemCategoryWidget_UpdateDetailLevel) == 0x000001, "Wrong size on HWItemStoreItemCategoryWidget_UpdateDetailLevel");
static_assert(offsetof(HWItemStoreItemCategoryWidget_UpdateDetailLevel, DetailLevel) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_UpdateDetailLevel::DetailLevel' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemCategoryWidget_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreItemCategoryWidget_UpdateLayout");
static_assert(sizeof(HWItemStoreItemCategoryWidget_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreItemCategoryWidget_UpdateLayout");
static_assert(offsetof(HWItemStoreItemCategoryWidget_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.UpdateSearchText
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemCategoryWidget_UpdateSearchText final
{
public:
	class FText                                   NewSearchText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_UpdateSearchText) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_UpdateSearchText");
static_assert(sizeof(HWItemStoreItemCategoryWidget_UpdateSearchText) == 0x000018, "Wrong size on HWItemStoreItemCategoryWidget_UpdateSearchText");
static_assert(offsetof(HWItemStoreItemCategoryWidget_UpdateSearchText, NewSearchText) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_UpdateSearchText::NewSearchText' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.GetCategoryConfig
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemCategoryWidget_GetCategoryConfig final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_GetCategoryConfig) == 0x000004, "Wrong alignment on HWItemStoreItemCategoryWidget_GetCategoryConfig");
static_assert(sizeof(HWItemStoreItemCategoryWidget_GetCategoryConfig) == 0x000008, "Wrong size on HWItemStoreItemCategoryWidget_GetCategoryConfig");
static_assert(offsetof(HWItemStoreItemCategoryWidget_GetCategoryConfig, ReturnValue) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_GetCategoryConfig::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.GetFirstVisibleItemEntry
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry final
{
public:
	class UHWItemStoreItemEntry*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry");
static_assert(sizeof(HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry) == 0x000008, "Wrong size on HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry");
static_assert(offsetof(HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry, ReturnValue) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_GetFirstVisibleItemEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.GetItemToFocus
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemCategoryWidget_GetItemToFocus final
{
public:
	class UHWItemStoreItemEntry*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_GetItemToFocus) == 0x000008, "Wrong alignment on HWItemStoreItemCategoryWidget_GetItemToFocus");
static_assert(sizeof(HWItemStoreItemCategoryWidget_GetItemToFocus) == 0x000008, "Wrong size on HWItemStoreItemCategoryWidget_GetItemToFocus");
static_assert(offsetof(HWItemStoreItemCategoryWidget_GetItemToFocus, ReturnValue) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_GetItemToFocus::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemCategoryWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreItemCategoryWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemCategoryWidget_IsSelected) == 0x000001, "Wrong alignment on HWItemStoreItemCategoryWidget_IsSelected");
static_assert(sizeof(HWItemStoreItemCategoryWidget_IsSelected) == 0x000001, "Wrong size on HWItemStoreItemCategoryWidget_IsSelected");
static_assert(offsetof(HWItemStoreItemCategoryWidget_IsSelected, ReturnValue) == 0x000000, "Member 'HWItemStoreItemCategoryWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFixedCategoryWidget.OnGoldUpdated
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreItemFixedCategoryWidget_OnGoldUpdated final
{
public:
	float                                         GoldValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFixedCategoryWidget_OnGoldUpdated) == 0x000004, "Wrong alignment on HWItemStoreItemFixedCategoryWidget_OnGoldUpdated");
static_assert(sizeof(HWItemStoreItemFixedCategoryWidget_OnGoldUpdated) == 0x000004, "Wrong size on HWItemStoreItemFixedCategoryWidget_OnGoldUpdated");
static_assert(offsetof(HWItemStoreItemFixedCategoryWidget_OnGoldUpdated, GoldValue) == 0x000000, "Member 'HWItemStoreItemFixedCategoryWidget_OnGoldUpdated::GoldValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFixedCategoryWidget.OnItemSelected
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreItemFixedCategoryWidget_OnItemSelected final
{
public:
	const class UHWEquipmentItem*                 SelectedEquipmentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFixedCategoryWidget_OnItemSelected) == 0x000008, "Wrong alignment on HWItemStoreItemFixedCategoryWidget_OnItemSelected");
static_assert(sizeof(HWItemStoreItemFixedCategoryWidget_OnItemSelected) == 0x000008, "Wrong size on HWItemStoreItemFixedCategoryWidget_OnItemSelected");
static_assert(offsetof(HWItemStoreItemFixedCategoryWidget_OnItemSelected, SelectedEquipmentItem) == 0x000000, "Member 'HWItemStoreItemFixedCategoryWidget_OnItemSelected::SelectedEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFixedCategoryWidget.PopulateItemDisplay
// 0x0048 (0x0048 - 0x0000)
struct HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay final
{
public:
	struct FHWCategoryItems                       CategoryItems;                                     // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay) == 0x000008, "Wrong alignment on HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay");
static_assert(sizeof(HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay) == 0x000048, "Wrong size on HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay");
static_assert(offsetof(HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay, CategoryItems) == 0x000000, "Member 'HWItemStoreItemFixedCategoryWidget_PopulateItemDisplay::CategoryItems' has a wrong offset!");

// Function HemingwayUI.HWItemStoreItemFixedCategoryWidget.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreItemFixedCategoryWidget_SetLabel final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreItemFixedCategoryWidget_SetLabel) == 0x000008, "Wrong alignment on HWItemStoreItemFixedCategoryWidget_SetLabel");
static_assert(sizeof(HWItemStoreItemFixedCategoryWidget_SetLabel) == 0x000018, "Wrong size on HWItemStoreItemFixedCategoryWidget_SetLabel");
static_assert(offsetof(HWItemStoreItemFixedCategoryWidget_SetLabel, Label) == 0x000000, "Member 'HWItemStoreItemFixedCategoryWidget_SetLabel::Label' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.DisplayBuildsIntoWidget
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_DisplayBuildsIntoWidget final
{
public:
	bool                                          bShowWidget;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_DisplayBuildsIntoWidget) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_DisplayBuildsIntoWidget");
static_assert(sizeof(HWItemStoreSelectionWidget_DisplayBuildsIntoWidget) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_DisplayBuildsIntoWidget");
static_assert(offsetof(HWItemStoreSelectionWidget_DisplayBuildsIntoWidget, bShowWidget) == 0x000000, "Member 'HWItemStoreSelectionWidget_DisplayBuildsIntoWidget::bShowWidget' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.DisplayIsFocused
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_DisplayIsFocused final
{
public:
	bool                                          bNewIsFocused;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_DisplayIsFocused) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_DisplayIsFocused");
static_assert(sizeof(HWItemStoreSelectionWidget_DisplayIsFocused) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_DisplayIsFocused");
static_assert(offsetof(HWItemStoreSelectionWidget_DisplayIsFocused, bNewIsFocused) == 0x000000, "Member 'HWItemStoreSelectionWidget_DisplayIsFocused::bNewIsFocused' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.DisplayItem
// 0x0038 (0x0038 - 0x0000)
struct HWItemStoreSelectionWidget_DisplayItem final
{
public:
	struct FHWItemStoreItemInfo                   DisplayItemInfo;                                   // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_DisplayItem) == 0x000008, "Wrong alignment on HWItemStoreSelectionWidget_DisplayItem");
static_assert(sizeof(HWItemStoreSelectionWidget_DisplayItem) == 0x000038, "Wrong size on HWItemStoreSelectionWidget_DisplayItem");
static_assert(offsetof(HWItemStoreSelectionWidget_DisplayItem, DisplayItemInfo) == 0x000000, "Member 'HWItemStoreSelectionWidget_DisplayItem::DisplayItemInfo' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.HandleAutoBuyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_HandleAutoBuyStateChanged final
{
public:
	EHWAutoBuyState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_HandleAutoBuyStateChanged) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_HandleAutoBuyStateChanged");
static_assert(sizeof(HWItemStoreSelectionWidget_HandleAutoBuyStateChanged) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_HandleAutoBuyStateChanged");
static_assert(offsetof(HWItemStoreSelectionWidget_HandleAutoBuyStateChanged, NewState) == 0x000000, "Member 'HWItemStoreSelectionWidget_HandleAutoBuyStateChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWItemStoreSelectionWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.InventoryChanged
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreSelectionWidget_InventoryChanged final
{
public:
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreSelectionWidget_InventoryChanged) == 0x000008, "Wrong alignment on HWItemStoreSelectionWidget_InventoryChanged");
static_assert(sizeof(HWItemStoreSelectionWidget_InventoryChanged) == 0x000010, "Wrong size on HWItemStoreSelectionWidget_InventoryChanged");
static_assert(offsetof(HWItemStoreSelectionWidget_InventoryChanged, EquipmentInstance) == 0x000000, "Member 'HWItemStoreSelectionWidget_InventoryChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWItemStoreSelectionWidget_InventoryChanged, InventoryChangeReason) == 0x000008, "Member 'HWItemStoreSelectionWidget_InventoryChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.OnAutoBuyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_OnAutoBuyStateChanged final
{
public:
	bool                                          bAutoBuyActive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_OnAutoBuyStateChanged) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_OnAutoBuyStateChanged");
static_assert(sizeof(HWItemStoreSelectionWidget_OnAutoBuyStateChanged) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_OnAutoBuyStateChanged");
static_assert(offsetof(HWItemStoreSelectionWidget_OnAutoBuyStateChanged, bAutoBuyActive) == 0x000000, "Member 'HWItemStoreSelectionWidget_OnAutoBuyStateChanged::bAutoBuyActive' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.PlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_PlayerInputTypeChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_PlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_PlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreSelectionWidget_PlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_PlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreSelectionWidget_PlayerInputTypeChanged, bIsGamepad) == 0x000000, "Member 'HWItemStoreSelectionWidget_PlayerInputTypeChanged::bIsGamepad' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.SetUndoAvailable
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_SetUndoAvailable final
{
public:
	bool                                          bIsAvailable;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_SetUndoAvailable) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_SetUndoAvailable");
static_assert(sizeof(HWItemStoreSelectionWidget_SetUndoAvailable) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_SetUndoAvailable");
static_assert(offsetof(HWItemStoreSelectionWidget_SetUndoAvailable, bIsAvailable) == 0x000000, "Member 'HWItemStoreSelectionWidget_SetUndoAvailable::bIsAvailable' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.UpdateActiveItemDisplay
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreSelectionWidget_UpdateActiveItemDisplay final
{
public:
	int32                                         OwnedActiveItems;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_UpdateActiveItemDisplay) == 0x000004, "Wrong alignment on HWItemStoreSelectionWidget_UpdateActiveItemDisplay");
static_assert(sizeof(HWItemStoreSelectionWidget_UpdateActiveItemDisplay) == 0x000004, "Wrong size on HWItemStoreSelectionWidget_UpdateActiveItemDisplay");
static_assert(offsetof(HWItemStoreSelectionWidget_UpdateActiveItemDisplay, OwnedActiveItems) == 0x000000, "Member 'HWItemStoreSelectionWidget_UpdateActiveItemDisplay::OwnedActiveItems' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.UpdateButtons
// 0x0038 (0x0038 - 0x0000)
struct HWItemStoreSelectionWidget_UpdateButtons final
{
public:
	struct FHWItemStoreItemInfo                   ItemInfo;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_UpdateButtons) == 0x000008, "Wrong alignment on HWItemStoreSelectionWidget_UpdateButtons");
static_assert(sizeof(HWItemStoreSelectionWidget_UpdateButtons) == 0x000038, "Wrong size on HWItemStoreSelectionWidget_UpdateButtons");
static_assert(offsetof(HWItemStoreSelectionWidget_UpdateButtons, ItemInfo) == 0x000000, "Member 'HWItemStoreSelectionWidget_UpdateButtons::ItemInfo' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.UpdatePurchaseButton
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_UpdatePurchaseButton final
{
public:
	bool                                          bCanAffordSelectedItem;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_UpdatePurchaseButton) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_UpdatePurchaseButton");
static_assert(sizeof(HWItemStoreSelectionWidget_UpdatePurchaseButton) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_UpdatePurchaseButton");
static_assert(offsetof(HWItemStoreSelectionWidget_UpdatePurchaseButton, bCanAffordSelectedItem) == 0x000000, "Member 'HWItemStoreSelectionWidget_UpdatePurchaseButton::bCanAffordSelectedItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSelectionWidget.UpdateSellButton
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSelectionWidget_UpdateSellButton final
{
public:
	bool                                          bCanSellSelectedItem;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSelectionWidget_UpdateSellButton) == 0x000001, "Wrong alignment on HWItemStoreSelectionWidget_UpdateSellButton");
static_assert(sizeof(HWItemStoreSelectionWidget_UpdateSellButton) == 0x000001, "Wrong size on HWItemStoreSelectionWidget_UpdateSellButton");
static_assert(offsetof(HWItemStoreSelectionWidget_UpdateSellButton, bCanSellSelectedItem) == 0x000000, "Member 'HWItemStoreSelectionWidget_UpdateSellButton::bCanSellSelectedItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.GetChildren
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreSubTreeWidget_GetChildren final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_GetChildren) == 0x000008, "Wrong alignment on HWItemStoreSubTreeWidget_GetChildren");
static_assert(sizeof(HWItemStoreSubTreeWidget_GetChildren) == 0x000010, "Wrong size on HWItemStoreSubTreeWidget_GetChildren");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetChildren, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_GetChildren::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.GetSlotByIndex
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreSubTreeWidget_GetSlotByIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBoxSlot*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_GetSlotByIndex) == 0x000008, "Wrong alignment on HWItemStoreSubTreeWidget_GetSlotByIndex");
static_assert(sizeof(HWItemStoreSubTreeWidget_GetSlotByIndex) == 0x000010, "Wrong size on HWItemStoreSubTreeWidget_GetSlotByIndex");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetSlotByIndex, Index_0) == 0x000000, "Member 'HWItemStoreSubTreeWidget_GetSlotByIndex::Index_0' has a wrong offset!");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetSlotByIndex, ReturnValue) == 0x000008, "Member 'HWItemStoreSubTreeWidget_GetSlotByIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.PadTreeToDesiredWidth
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreSubTreeWidget_PadTreeToDesiredWidth final
{
public:
	float                                         TreeWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreSubTreeWidget_PadTreeToDesiredWidth) == 0x000004, "Wrong alignment on HWItemStoreSubTreeWidget_PadTreeToDesiredWidth");
static_assert(sizeof(HWItemStoreSubTreeWidget_PadTreeToDesiredWidth) == 0x000008, "Wrong size on HWItemStoreSubTreeWidget_PadTreeToDesiredWidth");
static_assert(offsetof(HWItemStoreSubTreeWidget_PadTreeToDesiredWidth, TreeWidth) == 0x000000, "Member 'HWItemStoreSubTreeWidget_PadTreeToDesiredWidth::TreeWidth' has a wrong offset!");
static_assert(offsetof(HWItemStoreSubTreeWidget_PadTreeToDesiredWidth, ReturnValue) == 0x000004, "Member 'HWItemStoreSubTreeWidget_PadTreeToDesiredWidth::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_SetSelected final
{
public:
	bool                                          bNewIsSelected;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_SetSelected) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_SetSelected");
static_assert(sizeof(HWItemStoreSubTreeWidget_SetSelected) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_SetSelected");
static_assert(offsetof(HWItemStoreSubTreeWidget_SetSelected, bNewIsSelected) == 0x000000, "Member 'HWItemStoreSubTreeWidget_SetSelected::bNewIsSelected' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.UpdateHorizontalLine
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_UpdateHorizontalLine final
{
public:
	EHWItemStoreSubTreeLineWidth                  LineLength;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_UpdateHorizontalLine) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_UpdateHorizontalLine");
static_assert(sizeof(HWItemStoreSubTreeWidget_UpdateHorizontalLine) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_UpdateHorizontalLine");
static_assert(offsetof(HWItemStoreSubTreeWidget_UpdateHorizontalLine, LineLength) == 0x000000, "Member 'HWItemStoreSubTreeWidget_UpdateHorizontalLine::LineLength' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.GetChildrenCount
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreSubTreeWidget_GetChildrenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_GetChildrenCount) == 0x000004, "Wrong alignment on HWItemStoreSubTreeWidget_GetChildrenCount");
static_assert(sizeof(HWItemStoreSubTreeWidget_GetChildrenCount) == 0x000004, "Wrong size on HWItemStoreSubTreeWidget_GetChildrenCount");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetChildrenCount, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_GetChildrenCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.GetDesiredChildFocusIndex
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex) == 0x000004, "Wrong alignment on HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex");
static_assert(sizeof(HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex) == 0x000004, "Wrong size on HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_GetDesiredChildFocusIndex::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.GetIsOwned
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_GetIsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_GetIsOwned) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_GetIsOwned");
static_assert(sizeof(HWItemStoreSubTreeWidget_GetIsOwned) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_GetIsOwned");
static_assert(offsetof(HWItemStoreSubTreeWidget_GetIsOwned, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_GetIsOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_IsOwned) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_IsOwned");
static_assert(sizeof(HWItemStoreSubTreeWidget_IsOwned) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_IsOwned");
static_assert(offsetof(HWItemStoreSubTreeWidget_IsOwned, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_IsOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.IsParentOwned
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_IsParentOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_IsParentOwned) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_IsParentOwned");
static_assert(sizeof(HWItemStoreSubTreeWidget_IsParentOwned) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_IsParentOwned");
static_assert(offsetof(HWItemStoreSubTreeWidget_IsParentOwned, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_IsParentOwned::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreSubTreeWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreSubTreeWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreSubTreeWidget_IsSelected) == 0x000001, "Wrong alignment on HWItemStoreSubTreeWidget_IsSelected");
static_assert(sizeof(HWItemStoreSubTreeWidget_IsSelected) == 0x000001, "Wrong size on HWItemStoreSubTreeWidget_IsSelected");
static_assert(offsetof(HWItemStoreSubTreeWidget_IsSelected, ReturnValue) == 0x000000, "Member 'HWItemStoreSubTreeWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreTreeViewWidget.GetFreeItemTreeWidget
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreTreeViewWidget_GetFreeItemTreeWidget final
{
public:
	class UHWItemStoreSubTreeWidget*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreTreeViewWidget_GetFreeItemTreeWidget) == 0x000008, "Wrong alignment on HWItemStoreTreeViewWidget_GetFreeItemTreeWidget");
static_assert(sizeof(HWItemStoreTreeViewWidget_GetFreeItemTreeWidget) == 0x000008, "Wrong size on HWItemStoreTreeViewWidget_GetFreeItemTreeWidget");
static_assert(offsetof(HWItemStoreTreeViewWidget_GetFreeItemTreeWidget, ReturnValue) == 0x000000, "Member 'HWItemStoreTreeViewWidget_GetFreeItemTreeWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.DisplayAndPopulateItemInfo
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_DisplayAndPopulateItemInfo final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_DisplayAndPopulateItemInfo) == 0x000008, "Wrong alignment on HWItemStoreWidget_DisplayAndPopulateItemInfo");
static_assert(sizeof(HWItemStoreWidget_DisplayAndPopulateItemInfo) == 0x000008, "Wrong size on HWItemStoreWidget_DisplayAndPopulateItemInfo");
static_assert(offsetof(HWItemStoreWidget_DisplayAndPopulateItemInfo, EquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_DisplayAndPopulateItemInfo::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.GetCurrentPrimaryBuildEntry
// 0x0078 (0x0078 - 0x0000)
struct HWItemStoreWidget_GetCurrentPrimaryBuildEntry final
{
public:
	int32                                         BuildIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuildEntry                       OutBuildEntry;                                     // 0x0008(0x0068)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreWidget_GetCurrentPrimaryBuildEntry) == 0x000008, "Wrong alignment on HWItemStoreWidget_GetCurrentPrimaryBuildEntry");
static_assert(sizeof(HWItemStoreWidget_GetCurrentPrimaryBuildEntry) == 0x000078, "Wrong size on HWItemStoreWidget_GetCurrentPrimaryBuildEntry");
static_assert(offsetof(HWItemStoreWidget_GetCurrentPrimaryBuildEntry, BuildIndex) == 0x000000, "Member 'HWItemStoreWidget_GetCurrentPrimaryBuildEntry::BuildIndex' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_GetCurrentPrimaryBuildEntry, OutBuildEntry) == 0x000008, "Member 'HWItemStoreWidget_GetCurrentPrimaryBuildEntry::OutBuildEntry' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_GetCurrentPrimaryBuildEntry, ReturnValue) == 0x000070, "Member 'HWItemStoreWidget_GetCurrentPrimaryBuildEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.GetLeftItemDisplayWidget
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_GetLeftItemDisplayWidget final
{
public:
	class UHWWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_GetLeftItemDisplayWidget) == 0x000008, "Wrong alignment on HWItemStoreWidget_GetLeftItemDisplayWidget");
static_assert(sizeof(HWItemStoreWidget_GetLeftItemDisplayWidget) == 0x000008, "Wrong size on HWItemStoreWidget_GetLeftItemDisplayWidget");
static_assert(offsetof(HWItemStoreWidget_GetLeftItemDisplayWidget, ReturnValue) == 0x000000, "Member 'HWItemStoreWidget_GetLeftItemDisplayWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.HandleAutoBuyComponentChanged
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreWidget_HandleAutoBuyComponentChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWAutoBuyComponent*                    NewAutoBuyComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_HandleAutoBuyComponentChanged) == 0x000008, "Wrong alignment on HWItemStoreWidget_HandleAutoBuyComponentChanged");
static_assert(sizeof(HWItemStoreWidget_HandleAutoBuyComponentChanged) == 0x000010, "Wrong size on HWItemStoreWidget_HandleAutoBuyComponentChanged");
static_assert(offsetof(HWItemStoreWidget_HandleAutoBuyComponentChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWItemStoreWidget_HandleAutoBuyComponentChanged::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_HandleAutoBuyComponentChanged, NewAutoBuyComponent) == 0x000008, "Member 'HWItemStoreWidget_HandleAutoBuyComponentChanged::NewAutoBuyComponent' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.HandleAutoBuyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_HandleAutoBuyStateChanged final
{
public:
	EHWAutoBuyState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_HandleAutoBuyStateChanged) == 0x000001, "Wrong alignment on HWItemStoreWidget_HandleAutoBuyStateChanged");
static_assert(sizeof(HWItemStoreWidget_HandleAutoBuyStateChanged) == 0x000001, "Wrong size on HWItemStoreWidget_HandleAutoBuyStateChanged");
static_assert(offsetof(HWItemStoreWidget_HandleAutoBuyStateChanged, NewState) == 0x000000, "Member 'HWItemStoreWidget_HandleAutoBuyStateChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWItemStoreWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWItemStoreWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWItemStoreWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWItemStoreWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWItemStoreWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWItemStoreWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWItemStoreWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWItemStoreWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWItemStoreWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWItemStoreWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.HandleItemPurchase
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_HandleItemPurchase final
{
public:
	const class UHWEquipmentItem*                 PurchasedEquipmentItem;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_HandleItemPurchase) == 0x000008, "Wrong alignment on HWItemStoreWidget_HandleItemPurchase");
static_assert(sizeof(HWItemStoreWidget_HandleItemPurchase) == 0x000008, "Wrong size on HWItemStoreWidget_HandleItemPurchase");
static_assert(offsetof(HWItemStoreWidget_HandleItemPurchase, PurchasedEquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_HandleItemPurchase::PurchasedEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWItemStoreWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.IsUndoEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_IsUndoEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_IsUndoEnabled) == 0x000001, "Wrong alignment on HWItemStoreWidget_IsUndoEnabled");
static_assert(sizeof(HWItemStoreWidget_IsUndoEnabled) == 0x000001, "Wrong size on HWItemStoreWidget_IsUndoEnabled");
static_assert(offsetof(HWItemStoreWidget_IsUndoEnabled, ReturnValue) == 0x000000, "Member 'HWItemStoreWidget_IsUndoEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnAutoBuyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_OnAutoBuyStateChanged final
{
public:
	bool                                          bAutoBuyActive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnAutoBuyStateChanged) == 0x000001, "Wrong alignment on HWItemStoreWidget_OnAutoBuyStateChanged");
static_assert(sizeof(HWItemStoreWidget_OnAutoBuyStateChanged) == 0x000001, "Wrong size on HWItemStoreWidget_OnAutoBuyStateChanged");
static_assert(offsetof(HWItemStoreWidget_OnAutoBuyStateChanged, bAutoBuyActive) == 0x000000, "Member 'HWItemStoreWidget_OnAutoBuyStateChanged::bAutoBuyActive' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnGamepadClickItem
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreWidget_OnGamepadClickItem final
{
public:
	const class UHWEquipmentItem*                 ClickedEquipmentItem;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnGamepadClickItem) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnGamepadClickItem");
static_assert(sizeof(HWItemStoreWidget_OnGamepadClickItem) == 0x000010, "Wrong size on HWItemStoreWidget_OnGamepadClickItem");
static_assert(offsetof(HWItemStoreWidget_OnGamepadClickItem, ClickedEquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_OnGamepadClickItem::ClickedEquipmentItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnGamepadClickItem, SlotTag) == 0x000008, "Member 'HWItemStoreWidget_OnGamepadClickItem::SlotTag' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnGamepadHoverBuildsIntoItem
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_OnGamepadHoverBuildsIntoItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnGamepadHoverBuildsIntoItem) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnGamepadHoverBuildsIntoItem");
static_assert(sizeof(HWItemStoreWidget_OnGamepadHoverBuildsIntoItem) == 0x000008, "Wrong size on HWItemStoreWidget_OnGamepadHoverBuildsIntoItem");
static_assert(offsetof(HWItemStoreWidget_OnGamepadHoverBuildsIntoItem, EquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_OnGamepadHoverBuildsIntoItem::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnGamepadHoverItem
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreWidget_OnGamepadHoverItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnGamepadHoverItem) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnGamepadHoverItem");
static_assert(sizeof(HWItemStoreWidget_OnGamepadHoverItem) == 0x000010, "Wrong size on HWItemStoreWidget_OnGamepadHoverItem");
static_assert(offsetof(HWItemStoreWidget_OnGamepadHoverItem, EquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_OnGamepadHoverItem::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnGamepadHoverItem, SlotTag) == 0x000008, "Member 'HWItemStoreWidget_OnGamepadHoverItem::SlotTag' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnInventoryTransactionsAvailableChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_OnInventoryTransactionsAvailableChanged final
{
public:
	bool                                          bHasTransactionsAvailable;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnInventoryTransactionsAvailableChanged) == 0x000001, "Wrong alignment on HWItemStoreWidget_OnInventoryTransactionsAvailableChanged");
static_assert(sizeof(HWItemStoreWidget_OnInventoryTransactionsAvailableChanged) == 0x000001, "Wrong size on HWItemStoreWidget_OnInventoryTransactionsAvailableChanged");
static_assert(offsetof(HWItemStoreWidget_OnInventoryTransactionsAvailableChanged, bHasTransactionsAvailable) == 0x000000, "Member 'HWItemStoreWidget_OnInventoryTransactionsAvailableChanged::bHasTransactionsAvailable' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnItemPurchased
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_OnItemPurchased final
{
public:
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnItemPurchased) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnItemPurchased");
static_assert(sizeof(HWItemStoreWidget_OnItemPurchased) == 0x000008, "Wrong size on HWItemStoreWidget_OnItemPurchased");
static_assert(offsetof(HWItemStoreWidget_OnItemPurchased, EquipmentInstance) == 0x000000, "Member 'HWItemStoreWidget_OnItemPurchased::EquipmentInstance' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnPrimaryBuildUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreWidget_OnPrimaryBuildUpdated final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BuildGuid;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnPrimaryBuildUpdated) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnPrimaryBuildUpdated");
static_assert(sizeof(HWItemStoreWidget_OnPrimaryBuildUpdated) == 0x000018, "Wrong size on HWItemStoreWidget_OnPrimaryBuildUpdated");
static_assert(offsetof(HWItemStoreWidget_OnPrimaryBuildUpdated, GodItem) == 0x000000, "Member 'HWItemStoreWidget_OnPrimaryBuildUpdated::GodItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnPrimaryBuildUpdated, BuildGuid) == 0x000008, "Member 'HWItemStoreWidget_OnPrimaryBuildUpdated::BuildGuid' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnSelectItem
// 0x0018 (0x0018 - 0x0000)
struct HWItemStoreWidget_OnSelectItem final
{
public:
	const class UHWEquipmentItem*                 SelectedEquipmentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 DefaultSelectedItem;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnSelectItem) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnSelectItem");
static_assert(sizeof(HWItemStoreWidget_OnSelectItem) == 0x000018, "Wrong size on HWItemStoreWidget_OnSelectItem");
static_assert(offsetof(HWItemStoreWidget_OnSelectItem, SelectedEquipmentItem) == 0x000000, "Member 'HWItemStoreWidget_OnSelectItem::SelectedEquipmentItem' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnSelectItem, SlotTag) == 0x000008, "Member 'HWItemStoreWidget_OnSelectItem::SlotTag' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnSelectItem, DefaultSelectedItem) == 0x000010, "Member 'HWItemStoreWidget_OnSelectItem::DefaultSelectedItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnShopVolumeChanged
// 0x0010 (0x0010 - 0x0000)
struct HWItemStoreWidget_OnShopVolumeChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AHWShopVendorVolume*              NewShop;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnShopVolumeChanged) == 0x000008, "Wrong alignment on HWItemStoreWidget_OnShopVolumeChanged");
static_assert(sizeof(HWItemStoreWidget_OnShopVolumeChanged) == 0x000010, "Wrong size on HWItemStoreWidget_OnShopVolumeChanged");
static_assert(offsetof(HWItemStoreWidget_OnShopVolumeChanged, InventoryManager) == 0x000000, "Member 'HWItemStoreWidget_OnShopVolumeChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWItemStoreWidget_OnShopVolumeChanged, NewShop) == 0x000008, "Member 'HWItemStoreWidget_OnShopVolumeChanged::NewShop' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.OnUpdateLeftPanel
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_OnUpdateLeftPanel final
{
public:
	EHWItemStoreLeftDisplayType                   DisplayType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_OnUpdateLeftPanel) == 0x000001, "Wrong alignment on HWItemStoreWidget_OnUpdateLeftPanel");
static_assert(sizeof(HWItemStoreWidget_OnUpdateLeftPanel) == 0x000001, "Wrong size on HWItemStoreWidget_OnUpdateLeftPanel");
static_assert(offsetof(HWItemStoreWidget_OnUpdateLeftPanel, DisplayType) == 0x000000, "Member 'HWItemStoreWidget_OnUpdateLeftPanel::DisplayType' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.PlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_PlayerInputTypeChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_PlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWItemStoreWidget_PlayerInputTypeChanged");
static_assert(sizeof(HWItemStoreWidget_PlayerInputTypeChanged) == 0x000001, "Wrong size on HWItemStoreWidget_PlayerInputTypeChanged");
static_assert(offsetof(HWItemStoreWidget_PlayerInputTypeChanged, bIsGamepad) == 0x000000, "Member 'HWItemStoreWidget_PlayerInputTypeChanged::bIsGamepad' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.PopulateItemList
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_PopulateItemList final
{
public:
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_PopulateItemList) == 0x000008, "Wrong alignment on HWItemStoreWidget_PopulateItemList");
static_assert(sizeof(HWItemStoreWidget_PopulateItemList) == 0x000008, "Wrong size on HWItemStoreWidget_PopulateItemList");
static_assert(offsetof(HWItemStoreWidget_PopulateItemList, CharacterItem) == 0x000000, "Member 'HWItemStoreWidget_PopulateItemList::CharacterItem' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.UpdateGold
// 0x0004 (0x0004 - 0x0000)
struct HWItemStoreWidget_UpdateGold final
{
public:
	float                                         NewGoldValue;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_UpdateGold) == 0x000004, "Wrong alignment on HWItemStoreWidget_UpdateGold");
static_assert(sizeof(HWItemStoreWidget_UpdateGold) == 0x000004, "Wrong size on HWItemStoreWidget_UpdateGold");
static_assert(offsetof(HWItemStoreWidget_UpdateGold, NewGoldValue) == 0x000000, "Member 'HWItemStoreWidget_UpdateGold::NewGoldValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.UpdateLayout
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_UpdateLayout final
{
public:
	EHWItemStoreLayoutType                        Layout;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_UpdateLayout) == 0x000001, "Wrong alignment on HWItemStoreWidget_UpdateLayout");
static_assert(sizeof(HWItemStoreWidget_UpdateLayout) == 0x000001, "Wrong size on HWItemStoreWidget_UpdateLayout");
static_assert(offsetof(HWItemStoreWidget_UpdateLayout, Layout) == 0x000000, "Member 'HWItemStoreWidget_UpdateLayout::Layout' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.GetCurrentLayoutType
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_GetCurrentLayoutType final
{
public:
	EHWItemStoreLayoutType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_GetCurrentLayoutType) == 0x000001, "Wrong alignment on HWItemStoreWidget_GetCurrentLayoutType");
static_assert(sizeof(HWItemStoreWidget_GetCurrentLayoutType) == 0x000001, "Wrong size on HWItemStoreWidget_GetCurrentLayoutType");
static_assert(offsetof(HWItemStoreWidget_GetCurrentLayoutType, ReturnValue) == 0x000000, "Member 'HWItemStoreWidget_GetCurrentLayoutType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.GetInventoryWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct HWItemStoreWidget_GetInventoryWidgetToFocus final
{
public:
	class UHWCharacterInventoryWidget*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_GetInventoryWidgetToFocus) == 0x000008, "Wrong alignment on HWItemStoreWidget_GetInventoryWidgetToFocus");
static_assert(sizeof(HWItemStoreWidget_GetInventoryWidgetToFocus) == 0x000008, "Wrong size on HWItemStoreWidget_GetInventoryWidgetToFocus");
static_assert(offsetof(HWItemStoreWidget_GetInventoryWidgetToFocus, ReturnValue) == 0x000000, "Member 'HWItemStoreWidget_GetInventoryWidgetToFocus::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWItemStoreWidget.ShouldUseFixedCategoryListDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWItemStoreWidget_ShouldUseFixedCategoryListDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWItemStoreWidget_ShouldUseFixedCategoryListDisplay) == 0x000001, "Wrong alignment on HWItemStoreWidget_ShouldUseFixedCategoryListDisplay");
static_assert(sizeof(HWItemStoreWidget_ShouldUseFixedCategoryListDisplay) == 0x000001, "Wrong size on HWItemStoreWidget_ShouldUseFixedCategoryListDisplay");
static_assert(offsetof(HWItemStoreWidget_ShouldUseFixedCategoryListDisplay, ReturnValue) == 0x000000, "Member 'HWItemStoreWidget_ShouldUseFixedCategoryListDisplay::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWKillEventDisplayerWidget.HandleOnEventAdded
// 0x0098 (0x0098 - 0x0000)
struct HWKillEventDisplayerWidget_HandleOnEventAdded final
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWEventContext                        EventContext;                                      // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bStomped;                                          // 0x0090(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWKillEventDisplayerWidget_HandleOnEventAdded) == 0x000008, "Wrong alignment on HWKillEventDisplayerWidget_HandleOnEventAdded");
static_assert(sizeof(HWKillEventDisplayerWidget_HandleOnEventAdded) == 0x000098, "Wrong size on HWKillEventDisplayerWidget_HandleOnEventAdded");
static_assert(offsetof(HWKillEventDisplayerWidget_HandleOnEventAdded, EventTag) == 0x000000, "Member 'HWKillEventDisplayerWidget_HandleOnEventAdded::EventTag' has a wrong offset!");
static_assert(offsetof(HWKillEventDisplayerWidget_HandleOnEventAdded, EventContext) == 0x000008, "Member 'HWKillEventDisplayerWidget_HandleOnEventAdded::EventContext' has a wrong offset!");
static_assert(offsetof(HWKillEventDisplayerWidget_HandleOnEventAdded, bStomped) == 0x000090, "Member 'HWKillEventDisplayerWidget_HandleOnEventAdded::bStomped' has a wrong offset!");

// Function HemingwayUI.HWObjectiveHealthbarManager.HandleOnTeamNPCFactoriesUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated) == 0x000008, "Wrong alignment on HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated");
static_assert(sizeof(HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated) == 0x000008, "Wrong size on HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated");
static_assert(offsetof(HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated, TeamState) == 0x000000, "Member 'HWObjectiveHealthbarManager_HandleOnTeamNPCFactoriesUpdated::TeamState' has a wrong offset!");

// Function HemingwayUI.HWObjectiveHealthbarManager.HandleOnTeamStructuresUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated) == 0x000008, "Wrong alignment on HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated");
static_assert(sizeof(HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated) == 0x000008, "Wrong size on HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated");
static_assert(offsetof(HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated, TeamState) == 0x000000, "Member 'HWObjectiveHealthbarManager_HandleOnTeamStructuresUpdated::TeamState' has a wrong offset!");

// Function HemingwayUI.HWPausePopupWidget.HandlePauseStateUpdated
// 0x0018 (0x0018 - 0x0000)
struct HWPausePopupWidget_HandlePauseStateUpdated final
{
public:
	bool                                          bIsPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamState*                           InPausingTeam;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InPauseStartTime;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPausePopupWidget_HandlePauseStateUpdated) == 0x000008, "Wrong alignment on HWPausePopupWidget_HandlePauseStateUpdated");
static_assert(sizeof(HWPausePopupWidget_HandlePauseStateUpdated) == 0x000018, "Wrong size on HWPausePopupWidget_HandlePauseStateUpdated");
static_assert(offsetof(HWPausePopupWidget_HandlePauseStateUpdated, bIsPaused) == 0x000000, "Member 'HWPausePopupWidget_HandlePauseStateUpdated::bIsPaused' has a wrong offset!");
static_assert(offsetof(HWPausePopupWidget_HandlePauseStateUpdated, InPausingTeam) == 0x000008, "Member 'HWPausePopupWidget_HandlePauseStateUpdated::InPausingTeam' has a wrong offset!");
static_assert(offsetof(HWPausePopupWidget_HandlePauseStateUpdated, InPauseStartTime) == 0x000010, "Member 'HWPausePopupWidget_HandlePauseStateUpdated::InPauseStartTime' has a wrong offset!");

// Function HemingwayUI.HWPausePopupWidget.HandleUnpauseDelayUpdated
// 0x0004 (0x0004 - 0x0000)
struct HWPausePopupWidget_HandleUnpauseDelayUpdated final
{
public:
	int32                                         UnpauseDelayRemaining;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPausePopupWidget_HandleUnpauseDelayUpdated) == 0x000004, "Wrong alignment on HWPausePopupWidget_HandleUnpauseDelayUpdated");
static_assert(sizeof(HWPausePopupWidget_HandleUnpauseDelayUpdated) == 0x000004, "Wrong size on HWPausePopupWidget_HandleUnpauseDelayUpdated");
static_assert(offsetof(HWPausePopupWidget_HandleUnpauseDelayUpdated, UnpauseDelayRemaining) == 0x000000, "Member 'HWPausePopupWidget_HandleUnpauseDelayUpdated::UnpauseDelayRemaining' has a wrong offset!");

// Function HemingwayUI.HWPausePopupWidget.UpdateTimerBar
// 0x0008 (0x0008 - 0x0000)
struct HWPausePopupWidget_UpdateTimerBar final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPausePopupWidget_UpdateTimerBar) == 0x000004, "Wrong alignment on HWPausePopupWidget_UpdateTimerBar");
static_assert(sizeof(HWPausePopupWidget_UpdateTimerBar) == 0x000008, "Wrong size on HWPausePopupWidget_UpdateTimerBar");
static_assert(offsetof(HWPausePopupWidget_UpdateTimerBar, TimeRemaining) == 0x000000, "Member 'HWPausePopupWidget_UpdateTimerBar::TimeRemaining' has a wrong offset!");
static_assert(offsetof(HWPausePopupWidget_UpdateTimerBar, TotalTime) == 0x000004, "Member 'HWPausePopupWidget_UpdateTimerBar::TotalTime' has a wrong offset!");

// Function HemingwayUI.HWPausePopupWidget.IsAlliedTeamPause
// 0x0001 (0x0001 - 0x0000)
struct HWPausePopupWidget_IsAlliedTeamPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPausePopupWidget_IsAlliedTeamPause) == 0x000001, "Wrong alignment on HWPausePopupWidget_IsAlliedTeamPause");
static_assert(sizeof(HWPausePopupWidget_IsAlliedTeamPause) == 0x000001, "Wrong size on HWPausePopupWidget_IsAlliedTeamPause");
static_assert(offsetof(HWPausePopupWidget_IsAlliedTeamPause, ReturnValue) == 0x000000, "Member 'HWPausePopupWidget_IsAlliedTeamPause::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.AddPipWidgetToContainer
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_AddPipWidgetToContainer final
{
public:
	EHWVoteState                                  InitialState;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_AddPipWidgetToContainer) == 0x000001, "Wrong alignment on HWPauseVoteWidget_AddPipWidgetToContainer");
static_assert(sizeof(HWPauseVoteWidget_AddPipWidgetToContainer) == 0x000001, "Wrong size on HWPauseVoteWidget_AddPipWidgetToContainer");
static_assert(offsetof(HWPauseVoteWidget_AddPipWidgetToContainer, InitialState) == 0x000000, "Member 'HWPauseVoteWidget_AddPipWidgetToContainer::InitialState' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.DisplayResult
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_DisplayResult final
{
public:
	EHWVoteResult                                 Result;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_DisplayResult) == 0x000001, "Wrong alignment on HWPauseVoteWidget_DisplayResult");
static_assert(sizeof(HWPauseVoteWidget_DisplayResult) == 0x000001, "Wrong size on HWPauseVoteWidget_DisplayResult");
static_assert(offsetof(HWPauseVoteWidget_DisplayResult, Result) == 0x000000, "Member 'HWPauseVoteWidget_DisplayResult::Result' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.HandleOnHasPauseVotedUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_HandleOnHasPauseVotedUpdated final
{
public:
	bool                                          bUpdatedHasPauseVoted;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_HandleOnHasPauseVotedUpdated) == 0x000001, "Wrong alignment on HWPauseVoteWidget_HandleOnHasPauseVotedUpdated");
static_assert(sizeof(HWPauseVoteWidget_HandleOnHasPauseVotedUpdated) == 0x000001, "Wrong size on HWPauseVoteWidget_HandleOnHasPauseVotedUpdated");
static_assert(offsetof(HWPauseVoteWidget_HandleOnHasPauseVotedUpdated, bUpdatedHasPauseVoted) == 0x000000, "Member 'HWPauseVoteWidget_HandleOnHasPauseVotedUpdated::bUpdatedHasPauseVoted' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.HandleOnPauseResolved
// 0x0010 (0x0010 - 0x0000)
struct HWPauseVoteWidget_HandleOnPauseResolved final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWVoteResult                                 Result;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPauseVoteWidget_HandleOnPauseResolved) == 0x000008, "Wrong alignment on HWPauseVoteWidget_HandleOnPauseResolved");
static_assert(sizeof(HWPauseVoteWidget_HandleOnPauseResolved) == 0x000010, "Wrong size on HWPauseVoteWidget_HandleOnPauseResolved");
static_assert(offsetof(HWPauseVoteWidget_HandleOnPauseResolved, TeamState) == 0x000000, "Member 'HWPauseVoteWidget_HandleOnPauseResolved::TeamState' has a wrong offset!");
static_assert(offsetof(HWPauseVoteWidget_HandleOnPauseResolved, Result) == 0x000008, "Member 'HWPauseVoteWidget_HandleOnPauseResolved::Result' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.HandleOnPauseVotesUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWPauseVoteWidget_HandleOnPauseVotesUpdated final
{
public:
	class AHWTeamState*                           TeamState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumYesVotes;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNoVotes;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_HandleOnPauseVotesUpdated) == 0x000008, "Wrong alignment on HWPauseVoteWidget_HandleOnPauseVotesUpdated");
static_assert(sizeof(HWPauseVoteWidget_HandleOnPauseVotesUpdated) == 0x000010, "Wrong size on HWPauseVoteWidget_HandleOnPauseVotesUpdated");
static_assert(offsetof(HWPauseVoteWidget_HandleOnPauseVotesUpdated, TeamState) == 0x000000, "Member 'HWPauseVoteWidget_HandleOnPauseVotesUpdated::TeamState' has a wrong offset!");
static_assert(offsetof(HWPauseVoteWidget_HandleOnPauseVotesUpdated, NumYesVotes) == 0x000008, "Member 'HWPauseVoteWidget_HandleOnPauseVotesUpdated::NumYesVotes' has a wrong offset!");
static_assert(offsetof(HWPauseVoteWidget_HandleOnPauseVotesUpdated, NumNoVotes) == 0x00000C, "Member 'HWPauseVoteWidget_HandleOnPauseVotesUpdated::NumNoVotes' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.OnPauseVoteDisplayToggled
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_OnPauseVoteDisplayToggled final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_OnPauseVoteDisplayToggled) == 0x000001, "Wrong alignment on HWPauseVoteWidget_OnPauseVoteDisplayToggled");
static_assert(sizeof(HWPauseVoteWidget_OnPauseVoteDisplayToggled) == 0x000001, "Wrong size on HWPauseVoteWidget_OnPauseVoteDisplayToggled");
static_assert(offsetof(HWPauseVoteWidget_OnPauseVoteDisplayToggled, bDisplay) == 0x000000, "Member 'HWPauseVoteWidget_OnPauseVoteDisplayToggled::bDisplay' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.OnPipWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWPauseVoteWidget_OnPipWidgetAdded final
{
public:
	class UHWSurrenderPipWidget*                  PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_OnPipWidgetAdded) == 0x000008, "Wrong alignment on HWPauseVoteWidget_OnPipWidgetAdded");
static_assert(sizeof(HWPauseVoteWidget_OnPipWidgetAdded) == 0x000008, "Wrong size on HWPauseVoteWidget_OnPipWidgetAdded");
static_assert(offsetof(HWPauseVoteWidget_OnPipWidgetAdded, PipWidget) == 0x000000, "Member 'HWPauseVoteWidget_OnPipWidgetAdded::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.OnPipWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWPauseVoteWidget_OnPipWidgetRemoved final
{
public:
	class UHWSurrenderPipWidget*                  PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_OnPipWidgetRemoved) == 0x000008, "Wrong alignment on HWPauseVoteWidget_OnPipWidgetRemoved");
static_assert(sizeof(HWPauseVoteWidget_OnPipWidgetRemoved) == 0x000008, "Wrong size on HWPauseVoteWidget_OnPipWidgetRemoved");
static_assert(offsetof(HWPauseVoteWidget_OnPipWidgetRemoved, PipWidget) == 0x000000, "Member 'HWPauseVoteWidget_OnPipWidgetRemoved::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.ToggleDisplayPauseVote
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_ToggleDisplayPauseVote final
{
public:
	bool                                          bDisplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_ToggleDisplayPauseVote) == 0x000001, "Wrong alignment on HWPauseVoteWidget_ToggleDisplayPauseVote");
static_assert(sizeof(HWPauseVoteWidget_ToggleDisplayPauseVote) == 0x000001, "Wrong size on HWPauseVoteWidget_ToggleDisplayPauseVote");
static_assert(offsetof(HWPauseVoteWidget_ToggleDisplayPauseVote, bDisplay) == 0x000000, "Member 'HWPauseVoteWidget_ToggleDisplayPauseVote::bDisplay' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.UpdateTimerDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWPauseVoteWidget_UpdateTimerDisplay final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_UpdateTimerDisplay) == 0x000004, "Wrong alignment on HWPauseVoteWidget_UpdateTimerDisplay");
static_assert(sizeof(HWPauseVoteWidget_UpdateTimerDisplay) == 0x000008, "Wrong size on HWPauseVoteWidget_UpdateTimerDisplay");
static_assert(offsetof(HWPauseVoteWidget_UpdateTimerDisplay, TimeRemaining) == 0x000000, "Member 'HWPauseVoteWidget_UpdateTimerDisplay::TimeRemaining' has a wrong offset!");
static_assert(offsetof(HWPauseVoteWidget_UpdateTimerDisplay, TotalTime) == 0x000004, "Member 'HWPauseVoteWidget_UpdateTimerDisplay::TotalTime' has a wrong offset!");

// Function HemingwayUI.HWPauseVoteWidget.IsDisplaying
// 0x0001 (0x0001 - 0x0000)
struct HWPauseVoteWidget_IsDisplaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPauseVoteWidget_IsDisplaying) == 0x000001, "Wrong alignment on HWPauseVoteWidget_IsDisplaying");
static_assert(sizeof(HWPauseVoteWidget_IsDisplaying) == 0x000001, "Wrong size on HWPauseVoteWidget_IsDisplaying");
static_assert(offsetof(HWPauseVoteWidget_IsDisplaying, ReturnValue) == 0x000000, "Member 'HWPauseVoteWidget_IsDisplaying::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.GetCurrentSelectedParentTreeItem
// 0x0028 (0x0028 - 0x0000)
struct HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem final
{
public:
	TSoftObjectPtr<class UHWEquipmentItem>        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem) == 0x000028, "Wrong size on HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem, ReturnValue) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_GetCurrentSelectedParentTreeItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.GetMinimumUpgradeCost
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost) == 0x000010, "Wrong size on HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost, EquipmentItem) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost, ReturnValue) == 0x000008, "Member 'HWPlayerInventoryTrackingWidget_GetMinimumUpgradeCost::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWPlayerInventoryTrackingWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.OnEquipmentLevelChanged
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged final
{
public:
	class UHWEquipmentInstance*                   EquipmentChanged;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousLevel;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged) == 0x000010, "Wrong size on HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged, EquipmentChanged) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged::EquipmentChanged' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged, PreviousLevel) == 0x000008, "Member 'HWPlayerInventoryTrackingWidget_OnEquipmentLevelChanged::PreviousLevel' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.OnItemSelected
// 0x0018 (0x0018 - 0x0000)
struct HWPlayerInventoryTrackingWidget_OnItemSelected final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 DefaultSelectedItem;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_OnItemSelected) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_OnItemSelected");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_OnItemSelected) == 0x000018, "Wrong size on HWPlayerInventoryTrackingWidget_OnItemSelected");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnItemSelected, EquipmentItem) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_OnItemSelected::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnItemSelected, SlotTag) == 0x000008, "Member 'HWPlayerInventoryTrackingWidget_OnItemSelected::SlotTag' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnItemSelected, DefaultSelectedItem) == 0x000010, "Member 'HWPlayerInventoryTrackingWidget_OnItemSelected::DefaultSelectedItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.OnItemTracked
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerInventoryTrackingWidget_OnItemTracked final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SlotTag;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_OnItemTracked) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_OnItemTracked");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_OnItemTracked) == 0x000010, "Wrong size on HWPlayerInventoryTrackingWidget_OnItemTracked");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnItemTracked, EquipmentItem) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_OnItemTracked::EquipmentItem' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnItemTracked, SlotTag) == 0x000008, "Member 'HWPlayerInventoryTrackingWidget_OnItemTracked::SlotTag' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.OnNewAutoBuyItemStarted
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted final
{
public:
	const class UHWEquipmentRecipe*               NewRecipe;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted) == 0x000008, "Wrong size on HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted, NewRecipe) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_OnNewAutoBuyItemStarted::NewRecipe' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.SlotHasActiveItem
// 0x0030 (0x0030 - 0x0000)
struct HWPlayerInventoryTrackingWidget_SlotHasActiveItem final
{
public:
	struct FHWInventoryEntry                      Entry;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_SlotHasActiveItem) == 0x000008, "Wrong alignment on HWPlayerInventoryTrackingWidget_SlotHasActiveItem");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_SlotHasActiveItem) == 0x000030, "Wrong size on HWPlayerInventoryTrackingWidget_SlotHasActiveItem");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_SlotHasActiveItem, Entry) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_SlotHasActiveItem::Entry' has a wrong offset!");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_SlotHasActiveItem, ReturnValue) == 0x000028, "Member 'HWPlayerInventoryTrackingWidget_SlotHasActiveItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerInventoryTrackingWidget.GetActiveItemCount
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerInventoryTrackingWidget_GetActiveItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerInventoryTrackingWidget_GetActiveItemCount) == 0x000004, "Wrong alignment on HWPlayerInventoryTrackingWidget_GetActiveItemCount");
static_assert(sizeof(HWPlayerInventoryTrackingWidget_GetActiveItemCount) == 0x000004, "Wrong size on HWPlayerInventoryTrackingWidget_GetActiveItemCount");
static_assert(offsetof(HWPlayerInventoryTrackingWidget_GetActiveItemCount, ReturnValue) == 0x000000, "Member 'HWPlayerInventoryTrackingWidget_GetActiveItemCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScoreboardBuffWidget.DisplayBuff
// 0x0010 (0x0010 - 0x0000)
struct HWScoreboardBuffWidget_DisplayBuff final
{
public:
	bool                                          bBuffApplied;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWGameplayEffectUIBuffData*      UIData;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardBuffWidget_DisplayBuff) == 0x000008, "Wrong alignment on HWScoreboardBuffWidget_DisplayBuff");
static_assert(sizeof(HWScoreboardBuffWidget_DisplayBuff) == 0x000010, "Wrong size on HWScoreboardBuffWidget_DisplayBuff");
static_assert(offsetof(HWScoreboardBuffWidget_DisplayBuff, bBuffApplied) == 0x000000, "Member 'HWScoreboardBuffWidget_DisplayBuff::bBuffApplied' has a wrong offset!");
static_assert(offsetof(HWScoreboardBuffWidget_DisplayBuff, UIData) == 0x000008, "Member 'HWScoreboardBuffWidget_DisplayBuff::UIData' has a wrong offset!");

// Function HemingwayUI.HWScoreboardBuffWidget.DisplayBuffDuration
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardBuffWidget_DisplayBuffDuration final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardBuffWidget_DisplayBuffDuration) == 0x000004, "Wrong alignment on HWScoreboardBuffWidget_DisplayBuffDuration");
static_assert(sizeof(HWScoreboardBuffWidget_DisplayBuffDuration) == 0x000004, "Wrong size on HWScoreboardBuffWidget_DisplayBuffDuration");
static_assert(offsetof(HWScoreboardBuffWidget_DisplayBuffDuration, TimeRemaining) == 0x000000, "Member 'HWScoreboardBuffWidget_DisplayBuffDuration::TimeRemaining' has a wrong offset!");

// Function HemingwayUI.HWScoreboardGodWidget.OnCharacterItemReceived
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardGodWidget_OnCharacterItemReceived final
{
public:
	const class UHWCharacterItem*                 SelectedGodItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardGodWidget_OnCharacterItemReceived) == 0x000008, "Wrong alignment on HWScoreboardGodWidget_OnCharacterItemReceived");
static_assert(sizeof(HWScoreboardGodWidget_OnCharacterItemReceived) == 0x000008, "Wrong size on HWScoreboardGodWidget_OnCharacterItemReceived");
static_assert(offsetof(HWScoreboardGodWidget_OnCharacterItemReceived, SelectedGodItem) == 0x000000, "Member 'HWScoreboardGodWidget_OnCharacterItemReceived::SelectedGodItem' has a wrong offset!");

// Function HemingwayUI.HWScoreboardGodWidget.OnSelectAbility
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardGodWidget_OnSelectAbility final
{
public:
	const class UHWGodAbilityEntryWidget*         AbilityEntry;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardGodWidget_OnSelectAbility) == 0x000008, "Wrong alignment on HWScoreboardGodWidget_OnSelectAbility");
static_assert(sizeof(HWScoreboardGodWidget_OnSelectAbility) == 0x000008, "Wrong size on HWScoreboardGodWidget_OnSelectAbility");
static_assert(offsetof(HWScoreboardGodWidget_OnSelectAbility, AbilityEntry) == 0x000000, "Member 'HWScoreboardGodWidget_OnSelectAbility::AbilityEntry' has a wrong offset!");

// Function HemingwayUI.HWScoreboardGodWidget.SetCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWScoreboardGodWidget_SetCharacterItem final
{
public:
	const class UHWCharacterItem*                 SelectedGodItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardGodWidget_SetCharacterItem) == 0x000008, "Wrong alignment on HWScoreboardGodWidget_SetCharacterItem");
static_assert(sizeof(HWScoreboardGodWidget_SetCharacterItem) == 0x000008, "Wrong size on HWScoreboardGodWidget_SetCharacterItem");
static_assert(offsetof(HWScoreboardGodWidget_SetCharacterItem, SelectedGodItem) == 0x000000, "Member 'HWScoreboardGodWidget_SetCharacterItem::SelectedGodItem' has a wrong offset!");

// Function HemingwayUI.HWScoreboardWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWScoreboardWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWScoreboardWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWScoreboardWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWScoreboardWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWScoreboardWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWScoreboardWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWScoreboardWidget.OnGodPortraitEntrySelected
// 0x0018 (0x0018 - 0x0000)
struct HWScoreboardWidget_OnGodPortraitEntrySelected final
{
public:
	class UHWScoreboardPlayerWidget*              PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWCharacterItem*                 SelectedGodItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHover;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWScoreboardWidget_OnGodPortraitEntrySelected) == 0x000008, "Wrong alignment on HWScoreboardWidget_OnGodPortraitEntrySelected");
static_assert(sizeof(HWScoreboardWidget_OnGodPortraitEntrySelected) == 0x000018, "Wrong size on HWScoreboardWidget_OnGodPortraitEntrySelected");
static_assert(offsetof(HWScoreboardWidget_OnGodPortraitEntrySelected, PlayerWidget) == 0x000000, "Member 'HWScoreboardWidget_OnGodPortraitEntrySelected::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnGodPortraitEntrySelected, SelectedGodItem) == 0x000008, "Member 'HWScoreboardWidget_OnGodPortraitEntrySelected::SelectedGodItem' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnGodPortraitEntrySelected, bIsHover) == 0x000010, "Member 'HWScoreboardWidget_OnGodPortraitEntrySelected::bIsHover' has a wrong offset!");

// Function HemingwayUI.HWScoreboardWidget.OnPlayerEntrySelected
// 0x0018 (0x0018 - 0x0000)
struct HWScoreboardWidget_OnPlayerEntrySelected final
{
public:
	class UHWScoreboardTeamWidget*                TeamWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWScoreboardPlayerWidget*              PlayerWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           SelectedPlayer;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardWidget_OnPlayerEntrySelected) == 0x000008, "Wrong alignment on HWScoreboardWidget_OnPlayerEntrySelected");
static_assert(sizeof(HWScoreboardWidget_OnPlayerEntrySelected) == 0x000018, "Wrong size on HWScoreboardWidget_OnPlayerEntrySelected");
static_assert(offsetof(HWScoreboardWidget_OnPlayerEntrySelected, TeamWidget) == 0x000000, "Member 'HWScoreboardWidget_OnPlayerEntrySelected::TeamWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnPlayerEntrySelected, PlayerWidget) == 0x000008, "Member 'HWScoreboardWidget_OnPlayerEntrySelected::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnPlayerEntrySelected, SelectedPlayer) == 0x000010, "Member 'HWScoreboardWidget_OnPlayerEntrySelected::SelectedPlayer' has a wrong offset!");

// Function HemingwayUI.HWScoreboardWidget.OnPlayerMuteSelected
// 0x0018 (0x0018 - 0x0000)
struct HWScoreboardWidget_OnPlayerMuteSelected final
{
public:
	class UHWScoreboardTeamWidget*                TeamWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWScoreboardPlayerWidget*              PlayerWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         SelectedPlayer;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardWidget_OnPlayerMuteSelected) == 0x000008, "Wrong alignment on HWScoreboardWidget_OnPlayerMuteSelected");
static_assert(sizeof(HWScoreboardWidget_OnPlayerMuteSelected) == 0x000018, "Wrong size on HWScoreboardWidget_OnPlayerMuteSelected");
static_assert(offsetof(HWScoreboardWidget_OnPlayerMuteSelected, TeamWidget) == 0x000000, "Member 'HWScoreboardWidget_OnPlayerMuteSelected::TeamWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnPlayerMuteSelected, PlayerWidget) == 0x000008, "Member 'HWScoreboardWidget_OnPlayerMuteSelected::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWScoreboardWidget_OnPlayerMuteSelected, SelectedPlayer) == 0x000010, "Member 'HWScoreboardWidget_OnPlayerMuteSelected::SelectedPlayer' has a wrong offset!");

// Function HemingwayUI.HWScoreboardWidget.SelectNextGodPortrait
// 0x0004 (0x0004 - 0x0000)
struct HWScoreboardWidget_SelectNextGodPortrait final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScoreboardWidget_SelectNextGodPortrait) == 0x000004, "Wrong alignment on HWScoreboardWidget_SelectNextGodPortrait");
static_assert(sizeof(HWScoreboardWidget_SelectNextGodPortrait) == 0x000004, "Wrong size on HWScoreboardWidget_SelectNextGodPortrait");
static_assert(offsetof(HWScoreboardWidget_SelectNextGodPortrait, Direction) == 0x000000, "Member 'HWScoreboardWidget_SelectNextGodPortrait::Direction' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.HandleGetGodMasteryLevel
// 0x0018 (0x0018 - 0x0000)
struct HWPlayerCardWidget_HandleGetGodMasteryLevel final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_PlayerInfo*                   InPlayerInfo;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelProgressPercent;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_HandleGetGodMasteryLevel) == 0x000008, "Wrong alignment on HWPlayerCardWidget_HandleGetGodMasteryLevel");
static_assert(sizeof(HWPlayerCardWidget_HandleGetGodMasteryLevel) == 0x000018, "Wrong size on HWPlayerCardWidget_HandleGetGodMasteryLevel");
static_assert(offsetof(HWPlayerCardWidget_HandleGetGodMasteryLevel, Character) == 0x000000, "Member 'HWPlayerCardWidget_HandleGetGodMasteryLevel::Character' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_HandleGetGodMasteryLevel, InPlayerInfo) == 0x000008, "Member 'HWPlayerCardWidget_HandleGetGodMasteryLevel::InPlayerInfo' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_HandleGetGodMasteryLevel, Level) == 0x000010, "Member 'HWPlayerCardWidget_HandleGetGodMasteryLevel::Level' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_HandleGetGodMasteryLevel, LevelProgressPercent) == 0x000014, "Member 'HWPlayerCardWidget_HandleGetGodMasteryLevel::LevelProgressPercent' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.OnBoolAppSettingChanged
// 0x000C (0x000C - 0x0000)
struct HWPlayerCardWidget_OnBoolAppSettingChanged final
{
public:
	struct FGameplayTag                           AppSettingTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerCardWidget_OnBoolAppSettingChanged) == 0x000004, "Wrong alignment on HWPlayerCardWidget_OnBoolAppSettingChanged");
static_assert(sizeof(HWPlayerCardWidget_OnBoolAppSettingChanged) == 0x00000C, "Wrong size on HWPlayerCardWidget_OnBoolAppSettingChanged");
static_assert(offsetof(HWPlayerCardWidget_OnBoolAppSettingChanged, AppSettingTag) == 0x000000, "Member 'HWPlayerCardWidget_OnBoolAppSettingChanged::AppSettingTag' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_OnBoolAppSettingChanged, bValue) == 0x000008, "Member 'HWPlayerCardWidget_OnBoolAppSettingChanged::bValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.OnRecieveRemotePlayerGodLoadout
// 0x0138 (0x0138 - 0x0000)
struct HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWCharacterItem*                 CharacterItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodLoadout                          InGodLoadout;                                      // 0x0010(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout) == 0x000008, "Wrong alignment on HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout");
static_assert(sizeof(HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout) == 0x000138, "Wrong size on HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout");
static_assert(offsetof(HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout, bSuccess) == 0x000000, "Member 'HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout, CharacterItem) == 0x000008, "Member 'HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout::CharacterItem' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout, InGodLoadout) == 0x000010, "Member 'HWPlayerCardWidget_OnRecieveRemotePlayerGodLoadout::InGodLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.OnRecieveRemotePlayerLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct HWPlayerCardWidget_OnRecieveRemotePlayerLoadout final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_OnRecieveRemotePlayerLoadout) == 0x000008, "Wrong alignment on HWPlayerCardWidget_OnRecieveRemotePlayerLoadout");
static_assert(sizeof(HWPlayerCardWidget_OnRecieveRemotePlayerLoadout) == 0x0000C0, "Wrong size on HWPlayerCardWidget_OnRecieveRemotePlayerLoadout");
static_assert(offsetof(HWPlayerCardWidget_OnRecieveRemotePlayerLoadout, bSuccess) == 0x000000, "Member 'HWPlayerCardWidget_OnRecieveRemotePlayerLoadout::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_OnRecieveRemotePlayerLoadout, InPlayerLoadout) == 0x000008, "Member 'HWPlayerCardWidget_OnRecieveRemotePlayerLoadout::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.SetDraftCharacter
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_SetDraftCharacter final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFetchMastery;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerCardWidget_SetDraftCharacter) == 0x000008, "Wrong alignment on HWPlayerCardWidget_SetDraftCharacter");
static_assert(sizeof(HWPlayerCardWidget_SetDraftCharacter) == 0x000010, "Wrong size on HWPlayerCardWidget_SetDraftCharacter");
static_assert(offsetof(HWPlayerCardWidget_SetDraftCharacter, Character) == 0x000000, "Member 'HWPlayerCardWidget_SetDraftCharacter::Character' has a wrong offset!");
static_assert(offsetof(HWPlayerCardWidget_SetDraftCharacter, bFetchMastery) == 0x000008, "Member 'HWPlayerCardWidget_SetDraftCharacter::bFetchMastery' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.SetShouldShowBadgeCosmetics
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_SetShouldShowBadgeCosmetics final
{
public:
	bool                                          ShouldShowCosmetics;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_SetShouldShowBadgeCosmetics) == 0x000001, "Wrong alignment on HWPlayerCardWidget_SetShouldShowBadgeCosmetics");
static_assert(sizeof(HWPlayerCardWidget_SetShouldShowBadgeCosmetics) == 0x000001, "Wrong size on HWPlayerCardWidget_SetShouldShowBadgeCosmetics");
static_assert(offsetof(HWPlayerCardWidget_SetShouldShowBadgeCosmetics, ShouldShowCosmetics) == 0x000000, "Member 'HWPlayerCardWidget_SetShouldShowBadgeCosmetics::ShouldShowCosmetics' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.SetShouldShowTrackerCosmetics
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_SetShouldShowTrackerCosmetics final
{
public:
	bool                                          ShouldShowCosmetics;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_SetShouldShowTrackerCosmetics) == 0x000001, "Wrong alignment on HWPlayerCardWidget_SetShouldShowTrackerCosmetics");
static_assert(sizeof(HWPlayerCardWidget_SetShouldShowTrackerCosmetics) == 0x000001, "Wrong size on HWPlayerCardWidget_SetShouldShowTrackerCosmetics");
static_assert(offsetof(HWPlayerCardWidget_SetShouldShowTrackerCosmetics, ShouldShowCosmetics) == 0x000000, "Member 'HWPlayerCardWidget_SetShouldShowTrackerCosmetics::ShouldShowCosmetics' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdateCardVFX
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdateCardVFX final
{
public:
	const class UHWCollectionItem*                InCardVFXItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdateCardVFX) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdateCardVFX");
static_assert(sizeof(HWPlayerCardWidget_UpdateCardVFX) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdateCardVFX");
static_assert(offsetof(HWPlayerCardWidget_UpdateCardVFX, InCardVFXItem) == 0x000000, "Member 'HWPlayerCardWidget_UpdateCardVFX::InCardVFXItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdateCharacterSkin
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdateCharacterSkin final
{
public:
	const class UHWSkinItem*                      Skin;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdateCharacterSkin) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdateCharacterSkin");
static_assert(sizeof(HWPlayerCardWidget_UpdateCharacterSkin) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdateCharacterSkin");
static_assert(offsetof(HWPlayerCardWidget_UpdateCharacterSkin, Skin) == 0x000000, "Member 'HWPlayerCardWidget_UpdateCharacterSkin::Skin' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatedCharacterBadges
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_UpdatedCharacterBadges final
{
public:
	TArray<class UHWCollectionItem*>              InBadgeItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatedCharacterBadges) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdatedCharacterBadges");
static_assert(sizeof(HWPlayerCardWidget_UpdatedCharacterBadges) == 0x000010, "Wrong size on HWPlayerCardWidget_UpdatedCharacterBadges");
static_assert(offsetof(HWPlayerCardWidget_UpdatedCharacterBadges, InBadgeItems) == 0x000000, "Member 'HWPlayerCardWidget_UpdatedCharacterBadges::InBadgeItems' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatedCharacterTrackers
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_UpdatedCharacterTrackers final
{
public:
	TArray<class UHWCollectionItem*>              InTrackerItems;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatedCharacterTrackers) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdatedCharacterTrackers");
static_assert(sizeof(HWPlayerCardWidget_UpdatedCharacterTrackers) == 0x000010, "Wrong size on HWPlayerCardWidget_UpdatedCharacterTrackers");
static_assert(offsetof(HWPlayerCardWidget_UpdatedCharacterTrackers, InTrackerItems) == 0x000000, "Member 'HWPlayerCardWidget_UpdatedCharacterTrackers::InTrackerItems' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdateDraftCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdateDraftCharacter final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdateDraftCharacter) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdateDraftCharacter");
static_assert(sizeof(HWPlayerCardWidget_UpdateDraftCharacter) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdateDraftCharacter");
static_assert(offsetof(HWPlayerCardWidget_UpdateDraftCharacter, Character) == 0x000000, "Member 'HWPlayerCardWidget_UpdateDraftCharacter::Character' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdateFromPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdateFromPlayerState final
{
public:
	class AHWPlayerState*                         InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdateFromPlayerState) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdateFromPlayerState");
static_assert(sizeof(HWPlayerCardWidget_UpdateFromPlayerState) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdateFromPlayerState");
static_assert(offsetof(HWPlayerCardWidget_UpdateFromPlayerState, InPlayerState) == 0x000000, "Member 'HWPlayerCardWidget_UpdateFromPlayerState::InPlayerState' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdateMasteryLevel
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerCardWidget_UpdateMasteryLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdateMasteryLevel) == 0x000004, "Wrong alignment on HWPlayerCardWidget_UpdateMasteryLevel");
static_assert(sizeof(HWPlayerCardWidget_UpdateMasteryLevel) == 0x000004, "Wrong size on HWPlayerCardWidget_UpdateMasteryLevel");
static_assert(offsetof(HWPlayerCardWidget_UpdateMasteryLevel, Level) == 0x000000, "Member 'HWPlayerCardWidget_UpdateMasteryLevel::Level' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatePlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdatePlayerInfo final
{
public:
	class URH_PlayerInfo*                         InPlayerInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatePlayerInfo) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdatePlayerInfo");
static_assert(sizeof(HWPlayerCardWidget_UpdatePlayerInfo) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdatePlayerInfo");
static_assert(offsetof(HWPlayerCardWidget_UpdatePlayerInfo, InPlayerInfo) == 0x000000, "Member 'HWPlayerCardWidget_UpdatePlayerInfo::InPlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatePlayerLoadState
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_UpdatePlayerLoadState final
{
public:
	bool                                          bPlayerIsReady;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatePlayerLoadState) == 0x000001, "Wrong alignment on HWPlayerCardWidget_UpdatePlayerLoadState");
static_assert(sizeof(HWPlayerCardWidget_UpdatePlayerLoadState) == 0x000001, "Wrong size on HWPlayerCardWidget_UpdatePlayerLoadState");
static_assert(offsetof(HWPlayerCardWidget_UpdatePlayerLoadState, bPlayerIsReady) == 0x000000, "Member 'HWPlayerCardWidget_UpdatePlayerLoadState::bPlayerIsReady' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatePlayerName
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_UpdatePlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatePlayerName) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdatePlayerName");
static_assert(sizeof(HWPlayerCardWidget_UpdatePlayerName) == 0x000010, "Wrong size on HWPlayerCardWidget_UpdatePlayerName");
static_assert(offsetof(HWPlayerCardWidget_UpdatePlayerName, PlayerName) == 0x000000, "Member 'HWPlayerCardWidget_UpdatePlayerName::PlayerName' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatePlayerPlatformIcon
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_UpdatePlayerPlatformIcon final
{
public:
	ERHPlatformDisplayType                        NewPlatform;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong alignment on HWPlayerCardWidget_UpdatePlayerPlatformIcon");
static_assert(sizeof(HWPlayerCardWidget_UpdatePlayerPlatformIcon) == 0x000001, "Wrong size on HWPlayerCardWidget_UpdatePlayerPlatformIcon");
static_assert(offsetof(HWPlayerCardWidget_UpdatePlayerPlatformIcon, NewPlatform) == 0x000000, "Member 'HWPlayerCardWidget_UpdatePlayerPlatformIcon::NewPlatform' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.UpdatePlayerTitle
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_UpdatePlayerTitle final
{
public:
	const class UHWCollectionItem*                InTitleItem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_UpdatePlayerTitle) == 0x000008, "Wrong alignment on HWPlayerCardWidget_UpdatePlayerTitle");
static_assert(sizeof(HWPlayerCardWidget_UpdatePlayerTitle) == 0x000008, "Wrong size on HWPlayerCardWidget_UpdatePlayerTitle");
static_assert(offsetof(HWPlayerCardWidget_UpdatePlayerTitle, InTitleItem) == 0x000000, "Member 'HWPlayerCardWidget_UpdatePlayerTitle::InTitleItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.GetBadgeWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_GetBadgeWidgets final
{
public:
	TArray<class UHWItemDisplayWidget*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_GetBadgeWidgets) == 0x000008, "Wrong alignment on HWPlayerCardWidget_GetBadgeWidgets");
static_assert(sizeof(HWPlayerCardWidget_GetBadgeWidgets) == 0x000010, "Wrong size on HWPlayerCardWidget_GetBadgeWidgets");
static_assert(offsetof(HWPlayerCardWidget_GetBadgeWidgets, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_GetBadgeWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.GetDraftCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_GetDraftCharacter final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_GetDraftCharacter) == 0x000008, "Wrong alignment on HWPlayerCardWidget_GetDraftCharacter");
static_assert(sizeof(HWPlayerCardWidget_GetDraftCharacter) == 0x000008, "Wrong size on HWPlayerCardWidget_GetDraftCharacter");
static_assert(offsetof(HWPlayerCardWidget_GetDraftCharacter, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_GetDraftCharacter::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.GetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_GetPlayerInfo final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_GetPlayerInfo) == 0x000008, "Wrong alignment on HWPlayerCardWidget_GetPlayerInfo");
static_assert(sizeof(HWPlayerCardWidget_GetPlayerInfo) == 0x000008, "Wrong size on HWPlayerCardWidget_GetPlayerInfo");
static_assert(offsetof(HWPlayerCardWidget_GetPlayerInfo, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardWidget_GetPlayerState final
{
public:
	class AHWPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_GetPlayerState) == 0x000008, "Wrong alignment on HWPlayerCardWidget_GetPlayerState");
static_assert(sizeof(HWPlayerCardWidget_GetPlayerState) == 0x000008, "Wrong size on HWPlayerCardWidget_GetPlayerState");
static_assert(offsetof(HWPlayerCardWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.GetTrackerWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardWidget_GetTrackerWidgets final
{
public:
	TArray<class UHWItemDisplayWidget*>           ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_GetTrackerWidgets) == 0x000008, "Wrong alignment on HWPlayerCardWidget_GetTrackerWidgets");
static_assert(sizeof(HWPlayerCardWidget_GetTrackerWidgets) == 0x000010, "Wrong size on HWPlayerCardWidget_GetTrackerWidgets");
static_assert(offsetof(HWPlayerCardWidget_GetTrackerWidgets, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_GetTrackerWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.IsFriendly
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_IsFriendly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_IsFriendly) == 0x000001, "Wrong alignment on HWPlayerCardWidget_IsFriendly");
static_assert(sizeof(HWPlayerCardWidget_IsFriendly) == 0x000001, "Wrong size on HWPlayerCardWidget_IsFriendly");
static_assert(offsetof(HWPlayerCardWidget_IsFriendly, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_IsFriendly::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardWidget.IsPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardWidget_IsPlayerReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardWidget_IsPlayerReady) == 0x000001, "Wrong alignment on HWPlayerCardWidget_IsPlayerReady");
static_assert(sizeof(HWPlayerCardWidget_IsPlayerReady) == 0x000001, "Wrong size on HWPlayerCardWidget_IsPlayerReady");
static_assert(offsetof(HWPlayerCardWidget_IsPlayerReady, ReturnValue) == 0x000000, "Member 'HWPlayerCardWidget_IsPlayerReady::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterOmiWidget.UpdateCurrentOmi
// 0x000C (0x000C - 0x0000)
struct HWCharacterOmiWidget_UpdateCurrentOmi final
{
public:
	float                                         OldMana;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMana;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterOmiWidget_UpdateCurrentOmi) == 0x000004, "Wrong alignment on HWCharacterOmiWidget_UpdateCurrentOmi");
static_assert(sizeof(HWCharacterOmiWidget_UpdateCurrentOmi) == 0x00000C, "Wrong size on HWCharacterOmiWidget_UpdateCurrentOmi");
static_assert(offsetof(HWCharacterOmiWidget_UpdateCurrentOmi, OldMana) == 0x000000, "Member 'HWCharacterOmiWidget_UpdateCurrentOmi::OldMana' has a wrong offset!");
static_assert(offsetof(HWCharacterOmiWidget_UpdateCurrentOmi, NewMana) == 0x000004, "Member 'HWCharacterOmiWidget_UpdateCurrentOmi::NewMana' has a wrong offset!");
static_assert(offsetof(HWCharacterOmiWidget_UpdateCurrentOmi, bShouldAnimate) == 0x000008, "Member 'HWCharacterOmiWidget_UpdateCurrentOmi::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterOmiWidget.UpdateMaxOmi
// 0x000C (0x000C - 0x0000)
struct HWCharacterOmiWidget_UpdateMaxOmi final
{
public:
	float                                         OldMaxMana;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxMana;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAnimate;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterOmiWidget_UpdateMaxOmi) == 0x000004, "Wrong alignment on HWCharacterOmiWidget_UpdateMaxOmi");
static_assert(sizeof(HWCharacterOmiWidget_UpdateMaxOmi) == 0x00000C, "Wrong size on HWCharacterOmiWidget_UpdateMaxOmi");
static_assert(offsetof(HWCharacterOmiWidget_UpdateMaxOmi, OldMaxMana) == 0x000000, "Member 'HWCharacterOmiWidget_UpdateMaxOmi::OldMaxMana' has a wrong offset!");
static_assert(offsetof(HWCharacterOmiWidget_UpdateMaxOmi, NewMaxMana) == 0x000004, "Member 'HWCharacterOmiWidget_UpdateMaxOmi::NewMaxMana' has a wrong offset!");
static_assert(offsetof(HWCharacterOmiWidget_UpdateMaxOmi, bShouldAnimate) == 0x000008, "Member 'HWCharacterOmiWidget_UpdateMaxOmi::bShouldAnimate' has a wrong offset!");

// Function HemingwayUI.HWCharacterOmiWidget.GetCurrentOmi
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterOmiWidget_GetCurrentOmi final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterOmiWidget_GetCurrentOmi) == 0x000004, "Wrong alignment on HWCharacterOmiWidget_GetCurrentOmi");
static_assert(sizeof(HWCharacterOmiWidget_GetCurrentOmi) == 0x000004, "Wrong size on HWCharacterOmiWidget_GetCurrentOmi");
static_assert(offsetof(HWCharacterOmiWidget_GetCurrentOmi, ReturnValue) == 0x000000, "Member 'HWCharacterOmiWidget_GetCurrentOmi::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterOmiWidget.GetMaxOmi
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterOmiWidget_GetMaxOmi final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterOmiWidget_GetMaxOmi) == 0x000004, "Wrong alignment on HWCharacterOmiWidget_GetMaxOmi");
static_assert(sizeof(HWCharacterOmiWidget_GetMaxOmi) == 0x000004, "Wrong size on HWCharacterOmiWidget_GetMaxOmi");
static_assert(offsetof(HWCharacterOmiWidget_GetMaxOmi, ReturnValue) == 0x000000, "Member 'HWCharacterOmiWidget_GetMaxOmi::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatEntryWidget.InitializeStat
// 0x00F0 (0x00F0 - 0x0000)
struct HWCharacterStatEntryWidget_InitializeStat final
{
public:
	TArray<struct FGameplayAttribute>             GameplayAttributes;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateBrush                            StatIcon;                                          // 0x0010(0x00D0)(Parm, NativeAccessSpecifierPublic)
	int32                                         MinimumFractionalDigitsToDisplay;                  // 0x00E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigitsToDisplay;                  // 0x00E4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterStatEntryWidget_InitializeStat) == 0x000010, "Wrong alignment on HWCharacterStatEntryWidget_InitializeStat");
static_assert(sizeof(HWCharacterStatEntryWidget_InitializeStat) == 0x0000F0, "Wrong size on HWCharacterStatEntryWidget_InitializeStat");
static_assert(offsetof(HWCharacterStatEntryWidget_InitializeStat, GameplayAttributes) == 0x000000, "Member 'HWCharacterStatEntryWidget_InitializeStat::GameplayAttributes' has a wrong offset!");
static_assert(offsetof(HWCharacterStatEntryWidget_InitializeStat, StatIcon) == 0x000010, "Member 'HWCharacterStatEntryWidget_InitializeStat::StatIcon' has a wrong offset!");
static_assert(offsetof(HWCharacterStatEntryWidget_InitializeStat, MinimumFractionalDigitsToDisplay) == 0x0000E0, "Member 'HWCharacterStatEntryWidget_InitializeStat::MinimumFractionalDigitsToDisplay' has a wrong offset!");
static_assert(offsetof(HWCharacterStatEntryWidget_InitializeStat, MaximumFractionalDigitsToDisplay) == 0x0000E4, "Member 'HWCharacterStatEntryWidget_InitializeStat::MaximumFractionalDigitsToDisplay' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatEntryWidget.SetDisplayValue
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterStatEntryWidget_SetDisplayValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCharacterStatBuffStatus                    BuffStatus;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterStatEntryWidget_SetDisplayValue) == 0x000004, "Wrong alignment on HWCharacterStatEntryWidget_SetDisplayValue");
static_assert(sizeof(HWCharacterStatEntryWidget_SetDisplayValue) == 0x000008, "Wrong size on HWCharacterStatEntryWidget_SetDisplayValue");
static_assert(offsetof(HWCharacterStatEntryWidget_SetDisplayValue, NewValue) == 0x000000, "Member 'HWCharacterStatEntryWidget_SetDisplayValue::NewValue' has a wrong offset!");
static_assert(offsetof(HWCharacterStatEntryWidget_SetDisplayValue, BuffStatus) == 0x000004, "Member 'HWCharacterStatEntryWidget_SetDisplayValue::BuffStatus' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatEntryWidget.UpdateStatNameDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterStatEntryWidget_UpdateStatNameDisplay final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterStatEntryWidget_UpdateStatNameDisplay) == 0x000001, "Wrong alignment on HWCharacterStatEntryWidget_UpdateStatNameDisplay");
static_assert(sizeof(HWCharacterStatEntryWidget_UpdateStatNameDisplay) == 0x000001, "Wrong size on HWCharacterStatEntryWidget_UpdateStatNameDisplay");
static_assert(offsetof(HWCharacterStatEntryWidget_UpdateStatNameDisplay, bShow) == 0x000000, "Member 'HWCharacterStatEntryWidget_UpdateStatNameDisplay::bShow' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatsWidget.AddedCharacterStatDisplayWidget
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterStatsWidget_AddedCharacterStatDisplayWidget final
{
public:
	EHWCharacterStatCategory                      StatCategory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCharacterStatEntryWidget*            Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterStatsWidget_AddedCharacterStatDisplayWidget) == 0x000008, "Wrong alignment on HWCharacterStatsWidget_AddedCharacterStatDisplayWidget");
static_assert(sizeof(HWCharacterStatsWidget_AddedCharacterStatDisplayWidget) == 0x000010, "Wrong size on HWCharacterStatsWidget_AddedCharacterStatDisplayWidget");
static_assert(offsetof(HWCharacterStatsWidget_AddedCharacterStatDisplayWidget, StatCategory) == 0x000000, "Member 'HWCharacterStatsWidget_AddedCharacterStatDisplayWidget::StatCategory' has a wrong offset!");
static_assert(offsetof(HWCharacterStatsWidget_AddedCharacterStatDisplayWidget, Widget) == 0x000008, "Member 'HWCharacterStatsWidget_AddedCharacterStatDisplayWidget::Widget' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatsWidget.DisplayCharacterMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterStatsWidget_DisplayCharacterMovementSpeed final
{
public:
	float                                         MovementSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterStatsWidget_DisplayCharacterMovementSpeed) == 0x000004, "Wrong alignment on HWCharacterStatsWidget_DisplayCharacterMovementSpeed");
static_assert(sizeof(HWCharacterStatsWidget_DisplayCharacterMovementSpeed) == 0x000004, "Wrong size on HWCharacterStatsWidget_DisplayCharacterMovementSpeed");
static_assert(offsetof(HWCharacterStatsWidget_DisplayCharacterMovementSpeed, MovementSpeed) == 0x000000, "Member 'HWCharacterStatsWidget_DisplayCharacterMovementSpeed::MovementSpeed' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatsWidget.HandleCharacterMovementSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged final
{
public:
	float                                         NewMovementSpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged) == 0x000004, "Wrong alignment on HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged");
static_assert(sizeof(HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged) == 0x000004, "Wrong size on HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged");
static_assert(offsetof(HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged, NewMovementSpeed) == 0x000000, "Member 'HWCharacterStatsWidget_HandleCharacterMovementSpeedChanged::NewMovementSpeed' has a wrong offset!");

// Function HemingwayUI.HWCharacterStatsWidget.UpdateStatNameDisplays
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterStatsWidget_UpdateStatNameDisplays final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterStatsWidget_UpdateStatNameDisplays) == 0x000001, "Wrong alignment on HWCharacterStatsWidget_UpdateStatNameDisplays");
static_assert(sizeof(HWCharacterStatsWidget_UpdateStatNameDisplays) == 0x000001, "Wrong size on HWCharacterStatsWidget_UpdateStatNameDisplays");
static_assert(offsetof(HWCharacterStatsWidget_UpdateStatNameDisplays, bShow) == 0x000000, "Member 'HWCharacterStatsWidget_UpdateStatNameDisplays::bShow' has a wrong offset!");

// Function HemingwayUI.HWGameplayAttributeNumber.UpdateNumber
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayAttributeNumber_UpdateNumber final
{
public:
	float                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayAttributeNumber_UpdateNumber) == 0x000004, "Wrong alignment on HWGameplayAttributeNumber_UpdateNumber");
static_assert(sizeof(HWGameplayAttributeNumber_UpdateNumber) == 0x000004, "Wrong size on HWGameplayAttributeNumber_UpdateNumber");
static_assert(offsetof(HWGameplayAttributeNumber_UpdateNumber, Number) == 0x000000, "Member 'HWGameplayAttributeNumber_UpdateNumber::Number' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCCWidget.CCStarted
// 0x00F0 (0x00F0 - 0x0000)
struct HWGameplayEffectCCWidget_CCStarted final
{
public:
	struct FHWDataDisplay_Keyword                 KeywordData;                                       // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCCWidget_CCStarted) == 0x000008, "Wrong alignment on HWGameplayEffectCCWidget_CCStarted");
static_assert(sizeof(HWGameplayEffectCCWidget_CCStarted) == 0x0000F0, "Wrong size on HWGameplayEffectCCWidget_CCStarted");
static_assert(offsetof(HWGameplayEffectCCWidget_CCStarted, KeywordData) == 0x000000, "Member 'HWGameplayEffectCCWidget_CCStarted::KeywordData' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCCWidget.UpdateDurationProgress
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCCWidget_UpdateDurationProgress final
{
public:
	float                                         CurrentProgress;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCCWidget_UpdateDurationProgress) == 0x000004, "Wrong alignment on HWGameplayEffectCCWidget_UpdateDurationProgress");
static_assert(sizeof(HWGameplayEffectCCWidget_UpdateDurationProgress) == 0x000004, "Wrong size on HWGameplayEffectCCWidget_UpdateDurationProgress");
static_assert(offsetof(HWGameplayEffectCCWidget_UpdateDurationProgress, CurrentProgress) == 0x000000, "Member 'HWGameplayEffectCCWidget_UpdateDurationProgress::CurrentProgress' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCCWidget.GetTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCCWidget_GetTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCCWidget_GetTimeRemaining) == 0x000004, "Wrong alignment on HWGameplayEffectCCWidget_GetTimeRemaining");
static_assert(sizeof(HWGameplayEffectCCWidget_GetTimeRemaining) == 0x000004, "Wrong size on HWGameplayEffectCCWidget_GetTimeRemaining");
static_assert(offsetof(HWGameplayEffectCCWidget_GetTimeRemaining, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCCWidget_GetTimeRemaining::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.BP_UpdatePipDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWGodAbilityEntryWidget_BP_UpdatePipDisplay final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPips;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_BP_UpdatePipDisplay) == 0x000004, "Wrong alignment on HWGodAbilityEntryWidget_BP_UpdatePipDisplay");
static_assert(sizeof(HWGodAbilityEntryWidget_BP_UpdatePipDisplay) == 0x000008, "Wrong size on HWGodAbilityEntryWidget_BP_UpdatePipDisplay");
static_assert(offsetof(HWGodAbilityEntryWidget_BP_UpdatePipDisplay, CurrentIndex) == 0x000000, "Member 'HWGodAbilityEntryWidget_BP_UpdatePipDisplay::CurrentIndex' has a wrong offset!");
static_assert(offsetof(HWGodAbilityEntryWidget_BP_UpdatePipDisplay, TotalPips) == 0x000004, "Member 'HWGodAbilityEntryWidget_BP_UpdatePipDisplay::TotalPips' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.CycleAbilityInSet
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityEntryWidget_CycleAbilityInSet final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_CycleAbilityInSet) == 0x000001, "Wrong alignment on HWGodAbilityEntryWidget_CycleAbilityInSet");
static_assert(sizeof(HWGodAbilityEntryWidget_CycleAbilityInSet) == 0x000001, "Wrong size on HWGodAbilityEntryWidget_CycleAbilityInSet");
static_assert(offsetof(HWGodAbilityEntryWidget_CycleAbilityInSet, bForward) == 0x000000, "Member 'HWGodAbilityEntryWidget_CycleAbilityInSet::bForward' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.DisplayEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodAbilityEntryWidget_DisplayEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_DisplayEquipmentItem) == 0x000008, "Wrong alignment on HWGodAbilityEntryWidget_DisplayEquipmentItem");
static_assert(sizeof(HWGodAbilityEntryWidget_DisplayEquipmentItem) == 0x000008, "Wrong size on HWGodAbilityEntryWidget_DisplayEquipmentItem");
static_assert(offsetof(HWGodAbilityEntryWidget_DisplayEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWGodAbilityEntryWidget_DisplayEquipmentItem::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.HandleSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityEntryWidget_HandleSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_HandleSelected) == 0x000001, "Wrong alignment on HWGodAbilityEntryWidget_HandleSelected");
static_assert(sizeof(HWGodAbilityEntryWidget_HandleSelected) == 0x000001, "Wrong size on HWGodAbilityEntryWidget_HandleSelected");
static_assert(offsetof(HWGodAbilityEntryWidget_HandleSelected, bSelected) == 0x000000, "Member 'HWGodAbilityEntryWidget_HandleSelected::bSelected' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.SwitchToAbilitySetIndex
// 0x0008 (0x0008 - 0x0000)
struct HWGodAbilityEntryWidget_SwitchToAbilitySetIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceBroadcast;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodAbilityEntryWidget_SwitchToAbilitySetIndex) == 0x000004, "Wrong alignment on HWGodAbilityEntryWidget_SwitchToAbilitySetIndex");
static_assert(sizeof(HWGodAbilityEntryWidget_SwitchToAbilitySetIndex) == 0x000008, "Wrong size on HWGodAbilityEntryWidget_SwitchToAbilitySetIndex");
static_assert(offsetof(HWGodAbilityEntryWidget_SwitchToAbilitySetIndex, Index_0) == 0x000000, "Member 'HWGodAbilityEntryWidget_SwitchToAbilitySetIndex::Index_0' has a wrong offset!");
static_assert(offsetof(HWGodAbilityEntryWidget_SwitchToAbilitySetIndex, bForceBroadcast) == 0x000004, "Member 'HWGodAbilityEntryWidget_SwitchToAbilitySetIndex::bForceBroadcast' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.ToggleLoadingState
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityEntryWidget_ToggleLoadingState final
{
public:
	bool                                          bLoading;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_ToggleLoadingState) == 0x000001, "Wrong alignment on HWGodAbilityEntryWidget_ToggleLoadingState");
static_assert(sizeof(HWGodAbilityEntryWidget_ToggleLoadingState) == 0x000001, "Wrong size on HWGodAbilityEntryWidget_ToggleLoadingState");
static_assert(offsetof(HWGodAbilityEntryWidget_ToggleLoadingState, bLoading) == 0x000000, "Member 'HWGodAbilityEntryWidget_ToggleLoadingState::bLoading' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.UpdateSelectedIndicator
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityEntryWidget_UpdateSelectedIndicator final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_UpdateSelectedIndicator) == 0x000001, "Wrong alignment on HWGodAbilityEntryWidget_UpdateSelectedIndicator");
static_assert(sizeof(HWGodAbilityEntryWidget_UpdateSelectedIndicator) == 0x000001, "Wrong size on HWGodAbilityEntryWidget_UpdateSelectedIndicator");
static_assert(offsetof(HWGodAbilityEntryWidget_UpdateSelectedIndicator, bIsSelected) == 0x000000, "Member 'HWGodAbilityEntryWidget_UpdateSelectedIndicator::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWGodAbilityEntryWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodAbilityEntryWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAbilityEntryWidget_IsSelected) == 0x000001, "Wrong alignment on HWGodAbilityEntryWidget_IsSelected");
static_assert(sizeof(HWGodAbilityEntryWidget_IsSelected) == 0x000001, "Wrong size on HWGodAbilityEntryWidget_IsSelected");
static_assert(offsetof(HWGodAbilityEntryWidget_IsSelected, ReturnValue) == 0x000000, "Member 'HWGodAbilityEntryWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.CooldownStarted
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCooldownWidget_CooldownStarted final
{
public:
	float                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_CooldownStarted) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_CooldownStarted");
static_assert(sizeof(HWGameplayEffectCooldownWidget_CooldownStarted) == 0x000004, "Wrong size on HWGameplayEffectCooldownWidget_CooldownStarted");
static_assert(offsetof(HWGameplayEffectCooldownWidget_CooldownStarted, RemainingTime) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_CooldownStarted::RemainingTime' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.CooldownTimeUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectCooldownWidget_CooldownTimeUpdated final
{
public:
	float                                         OldRemainingTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewRemainingTime;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_CooldownTimeUpdated) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_CooldownTimeUpdated");
static_assert(sizeof(HWGameplayEffectCooldownWidget_CooldownTimeUpdated) == 0x000008, "Wrong size on HWGameplayEffectCooldownWidget_CooldownTimeUpdated");
static_assert(offsetof(HWGameplayEffectCooldownWidget_CooldownTimeUpdated, OldRemainingTime) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_CooldownTimeUpdated::OldRemainingTime' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectCooldownWidget_CooldownTimeUpdated, NewRemainingTime) == 0x000004, "Member 'HWGameplayEffectCooldownWidget_CooldownTimeUpdated::NewRemainingTime' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.OnAssociatedEquipmentAmmoChanged
// 0x0008 (0x0008 - 0x0000)
struct HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged final
{
public:
	int32                                         PreviousAmmoCount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAmmoCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged");
static_assert(sizeof(HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged) == 0x000008, "Wrong size on HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged");
static_assert(offsetof(HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged, PreviousAmmoCount) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged::PreviousAmmoCount' has a wrong offset!");
static_assert(offsetof(HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged, NewAmmoCount) == 0x000004, "Member 'HWGameplayEffectCooldownWidget_OnAssociatedEquipmentAmmoChanged::NewAmmoCount' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.GetAssociatedEquipmentAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount");
static_assert(sizeof(HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount) == 0x000004, "Wrong size on HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount");
static_assert(offsetof(HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_GetAssociatedEquipmentAmmoCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.GetTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCooldownWidget_GetTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_GetTimeElapsed) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_GetTimeElapsed");
static_assert(sizeof(HWGameplayEffectCooldownWidget_GetTimeElapsed) == 0x000004, "Wrong size on HWGameplayEffectCooldownWidget_GetTimeElapsed");
static_assert(offsetof(HWGameplayEffectCooldownWidget_GetTimeElapsed, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_GetTimeElapsed::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.GetTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCooldownWidget_GetTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_GetTimeRemaining) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_GetTimeRemaining");
static_assert(sizeof(HWGameplayEffectCooldownWidget_GetTimeRemaining) == 0x000004, "Wrong size on HWGameplayEffectCooldownWidget_GetTimeRemaining");
static_assert(offsetof(HWGameplayEffectCooldownWidget_GetTimeRemaining, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_GetTimeRemaining::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.GetTimeRemainingPercent
// 0x0004 (0x0004 - 0x0000)
struct HWGameplayEffectCooldownWidget_GetTimeRemainingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_GetTimeRemainingPercent) == 0x000004, "Wrong alignment on HWGameplayEffectCooldownWidget_GetTimeRemainingPercent");
static_assert(sizeof(HWGameplayEffectCooldownWidget_GetTimeRemainingPercent) == 0x000004, "Wrong size on HWGameplayEffectCooldownWidget_GetTimeRemainingPercent");
static_assert(offsetof(HWGameplayEffectCooldownWidget_GetTimeRemainingPercent, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_GetTimeRemainingPercent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.IsCooldownActive
// 0x0001 (0x0001 - 0x0000)
struct HWGameplayEffectCooldownWidget_IsCooldownActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_IsCooldownActive) == 0x000001, "Wrong alignment on HWGameplayEffectCooldownWidget_IsCooldownActive");
static_assert(sizeof(HWGameplayEffectCooldownWidget_IsCooldownActive) == 0x000001, "Wrong size on HWGameplayEffectCooldownWidget_IsCooldownActive");
static_assert(offsetof(HWGameplayEffectCooldownWidget_IsCooldownActive, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_IsCooldownActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGameplayEffectCooldownWidget.ShouldShowCooldown
// 0x0001 (0x0001 - 0x0000)
struct HWGameplayEffectCooldownWidget_ShouldShowCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGameplayEffectCooldownWidget_ShouldShowCooldown) == 0x000001, "Wrong alignment on HWGameplayEffectCooldownWidget_ShouldShowCooldown");
static_assert(sizeof(HWGameplayEffectCooldownWidget_ShouldShowCooldown) == 0x000001, "Wrong size on HWGameplayEffectCooldownWidget_ShouldShowCooldown");
static_assert(offsetof(HWGameplayEffectCooldownWidget_ShouldShowCooldown, ReturnValue) == 0x000000, "Member 'HWGameplayEffectCooldownWidget_ShouldShowCooldown::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.HandlePlayerAssistsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerKDAWidget_HandlePlayerAssistsUpdated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldAssists;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAssists;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_HandlePlayerAssistsUpdated) == 0x000008, "Wrong alignment on HWPlayerKDAWidget_HandlePlayerAssistsUpdated");
static_assert(sizeof(HWPlayerKDAWidget_HandlePlayerAssistsUpdated) == 0x000010, "Wrong size on HWPlayerKDAWidget_HandlePlayerAssistsUpdated");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerAssistsUpdated, PlayerState) == 0x000000, "Member 'HWPlayerKDAWidget_HandlePlayerAssistsUpdated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerAssistsUpdated, OldAssists) == 0x000008, "Member 'HWPlayerKDAWidget_HandlePlayerAssistsUpdated::OldAssists' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerAssistsUpdated, NewAssists) == 0x00000C, "Member 'HWPlayerKDAWidget_HandlePlayerAssistsUpdated::NewAssists' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.HandlePlayerDeathsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerKDAWidget_HandlePlayerDeathsUpdated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldDeaths;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewDeaths;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_HandlePlayerDeathsUpdated) == 0x000008, "Wrong alignment on HWPlayerKDAWidget_HandlePlayerDeathsUpdated");
static_assert(sizeof(HWPlayerKDAWidget_HandlePlayerDeathsUpdated) == 0x000010, "Wrong size on HWPlayerKDAWidget_HandlePlayerDeathsUpdated");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerDeathsUpdated, PlayerState) == 0x000000, "Member 'HWPlayerKDAWidget_HandlePlayerDeathsUpdated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerDeathsUpdated, OldDeaths) == 0x000008, "Member 'HWPlayerKDAWidget_HandlePlayerDeathsUpdated::OldDeaths' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerDeathsUpdated, NewDeaths) == 0x00000C, "Member 'HWPlayerKDAWidget_HandlePlayerDeathsUpdated::NewDeaths' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.HandlePlayerKillsUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerKDAWidget_HandlePlayerKillsUpdated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldKills;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewKills;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_HandlePlayerKillsUpdated) == 0x000008, "Wrong alignment on HWPlayerKDAWidget_HandlePlayerKillsUpdated");
static_assert(sizeof(HWPlayerKDAWidget_HandlePlayerKillsUpdated) == 0x000010, "Wrong size on HWPlayerKDAWidget_HandlePlayerKillsUpdated");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerKillsUpdated, PlayerState) == 0x000000, "Member 'HWPlayerKDAWidget_HandlePlayerKillsUpdated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerKillsUpdated, OldKills) == 0x000008, "Member 'HWPlayerKDAWidget_HandlePlayerKillsUpdated::OldKills' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerKillsUpdated, NewKills) == 0x00000C, "Member 'HWPlayerKDAWidget_HandlePlayerKillsUpdated::NewKills' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.HandlePlayerStatsTrackerReplicated
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerStatsTracker*                  PlayerStatsTracker;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated) == 0x000008, "Wrong alignment on HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated");
static_assert(sizeof(HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated) == 0x000010, "Wrong size on HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated, PlayerState) == 0x000000, "Member 'HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated, PlayerStatsTracker) == 0x000008, "Member 'HWPlayerKDAWidget_HandlePlayerStatsTrackerReplicated::PlayerStatsTracker' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.UpdatePlayerAssists
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerKDAWidget_UpdatePlayerAssists final
{
public:
	int32                                         OldAssists;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAssists;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_UpdatePlayerAssists) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_UpdatePlayerAssists");
static_assert(sizeof(HWPlayerKDAWidget_UpdatePlayerAssists) == 0x000008, "Wrong size on HWPlayerKDAWidget_UpdatePlayerAssists");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerAssists, OldAssists) == 0x000000, "Member 'HWPlayerKDAWidget_UpdatePlayerAssists::OldAssists' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerAssists, NewAssists) == 0x000004, "Member 'HWPlayerKDAWidget_UpdatePlayerAssists::NewAssists' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.UpdatePlayerDeaths
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerKDAWidget_UpdatePlayerDeaths final
{
public:
	int32                                         OldDeaths;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewDeaths;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_UpdatePlayerDeaths) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_UpdatePlayerDeaths");
static_assert(sizeof(HWPlayerKDAWidget_UpdatePlayerDeaths) == 0x000008, "Wrong size on HWPlayerKDAWidget_UpdatePlayerDeaths");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerDeaths, OldDeaths) == 0x000000, "Member 'HWPlayerKDAWidget_UpdatePlayerDeaths::OldDeaths' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerDeaths, NewDeaths) == 0x000004, "Member 'HWPlayerKDAWidget_UpdatePlayerDeaths::NewDeaths' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.UpdatePlayerKills
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerKDAWidget_UpdatePlayerKills final
{
public:
	int32                                         OldKills;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewKills;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_UpdatePlayerKills) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_UpdatePlayerKills");
static_assert(sizeof(HWPlayerKDAWidget_UpdatePlayerKills) == 0x000008, "Wrong size on HWPlayerKDAWidget_UpdatePlayerKills");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerKills, OldKills) == 0x000000, "Member 'HWPlayerKDAWidget_UpdatePlayerKills::OldKills' has a wrong offset!");
static_assert(offsetof(HWPlayerKDAWidget_UpdatePlayerKills, NewKills) == 0x000004, "Member 'HWPlayerKDAWidget_UpdatePlayerKills::NewKills' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.GetPlayerAssists
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerKDAWidget_GetPlayerAssists final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_GetPlayerAssists) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_GetPlayerAssists");
static_assert(sizeof(HWPlayerKDAWidget_GetPlayerAssists) == 0x000004, "Wrong size on HWPlayerKDAWidget_GetPlayerAssists");
static_assert(offsetof(HWPlayerKDAWidget_GetPlayerAssists, ReturnValue) == 0x000000, "Member 'HWPlayerKDAWidget_GetPlayerAssists::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.GetPlayerDeaths
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerKDAWidget_GetPlayerDeaths final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_GetPlayerDeaths) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_GetPlayerDeaths");
static_assert(sizeof(HWPlayerKDAWidget_GetPlayerDeaths) == 0x000004, "Wrong size on HWPlayerKDAWidget_GetPlayerDeaths");
static_assert(offsetof(HWPlayerKDAWidget_GetPlayerDeaths, ReturnValue) == 0x000000, "Member 'HWPlayerKDAWidget_GetPlayerDeaths::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerKDAWidget.GetPlayerKills
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerKDAWidget_GetPlayerKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerKDAWidget_GetPlayerKills) == 0x000004, "Wrong alignment on HWPlayerKDAWidget_GetPlayerKills");
static_assert(sizeof(HWPlayerKDAWidget_GetPlayerKills) == 0x000004, "Wrong size on HWPlayerKDAWidget_GetPlayerKills");
static_assert(offsetof(HWPlayerKDAWidget_GetPlayerKills, ReturnValue) == 0x000000, "Member 'HWPlayerKDAWidget_GetPlayerKills::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseWidget.OnAddedEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPurchaseWidget_OnAddedEntryWidget final
{
public:
	class UHWCurrencyPurchaseEntryWidget*         EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseWidget_OnAddedEntryWidget) == 0x000008, "Wrong alignment on HWCurrencyPurchaseWidget_OnAddedEntryWidget");
static_assert(sizeof(HWCurrencyPurchaseWidget_OnAddedEntryWidget) == 0x000008, "Wrong size on HWCurrencyPurchaseWidget_OnAddedEntryWidget");
static_assert(offsetof(HWCurrencyPurchaseWidget_OnAddedEntryWidget, EntryWidget) == 0x000000, "Member 'HWCurrencyPurchaseWidget_OnAddedEntryWidget::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseWidget.OnRemovedEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPurchaseWidget_OnRemovedEntryWidget final
{
public:
	class UHWCurrencyPurchaseEntryWidget*         EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseWidget_OnRemovedEntryWidget) == 0x000008, "Wrong alignment on HWCurrencyPurchaseWidget_OnRemovedEntryWidget");
static_assert(sizeof(HWCurrencyPurchaseWidget_OnRemovedEntryWidget) == 0x000008, "Wrong size on HWCurrencyPurchaseWidget_OnRemovedEntryWidget");
static_assert(offsetof(HWCurrencyPurchaseWidget_OnRemovedEntryWidget, EntryWidget) == 0x000000, "Member 'HWCurrencyPurchaseWidget_OnRemovedEntryWidget::EntryWidget' has a wrong offset!");

// Function HemingwayUI.HWCharacterAbilitiesOverviewWidget.TooltipAbilityWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded final
{
public:
	class UHWTooltipWidget_AbilityOverview*       TooltipWidget_Ability;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded) == 0x000008, "Wrong alignment on HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded");
static_assert(sizeof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded) == 0x000008, "Wrong size on HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded");
static_assert(offsetof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded, TooltipWidget_Ability) == 0x000000, "Member 'HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetAdded::TooltipWidget_Ability' has a wrong offset!");

// Function HemingwayUI.HWCharacterAbilitiesOverviewWidget.TooltipAbilityWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved final
{
public:
	class UHWTooltipWidget_AbilityOverview*       TooltipWidget_Ability;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved) == 0x000008, "Wrong alignment on HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved");
static_assert(sizeof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved) == 0x000008, "Wrong size on HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved");
static_assert(offsetof(HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved, TooltipWidget_Ability) == 0x000000, "Member 'HWCharacterAbilitiesOverviewWidget_TooltipAbilityWidgetRemoved::TooltipWidget_Ability' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.DisplayHasEquipmentToLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp final
{
public:
	bool                                          bCanLevelUp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp");
static_assert(sizeof(HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp) == 0x000001, "Wrong size on HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp");
static_assert(offsetof(HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp, bCanLevelUp) == 0x000000, "Member 'HWCharacterInventoryWidget_DisplayHasEquipmentToLevelUp::bCanLevelUp' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.EquipmentWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterInventoryWidget_EquipmentWidgetAdded final
{
public:
	class UHWInventoryEquipmentWidget*            AddedEquipmentWidget;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_EquipmentWidgetAdded) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_EquipmentWidgetAdded");
static_assert(sizeof(HWCharacterInventoryWidget_EquipmentWidgetAdded) == 0x000008, "Wrong size on HWCharacterInventoryWidget_EquipmentWidgetAdded");
static_assert(offsetof(HWCharacterInventoryWidget_EquipmentWidgetAdded, AddedEquipmentWidget) == 0x000000, "Member 'HWCharacterInventoryWidget_EquipmentWidgetAdded::AddedEquipmentWidget' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.EquipmentWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterInventoryWidget_EquipmentWidgetRemoved final
{
public:
	class UHWInventoryEquipmentWidget*            RemovedEquipmentWidget;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_EquipmentWidgetRemoved) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_EquipmentWidgetRemoved");
static_assert(sizeof(HWCharacterInventoryWidget_EquipmentWidgetRemoved) == 0x000008, "Wrong size on HWCharacterInventoryWidget_EquipmentWidgetRemoved");
static_assert(offsetof(HWCharacterInventoryWidget_EquipmentWidgetRemoved, RemovedEquipmentWidget) == 0x000000, "Member 'HWCharacterInventoryWidget_EquipmentWidgetRemoved::RemovedEquipmentWidget' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.EquipmentWidgetUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterInventoryWidget_EquipmentWidgetUpdated final
{
public:
	class UHWInventoryEquipmentWidget*            UpdatedEquipmentWidget;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_EquipmentWidgetUpdated) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_EquipmentWidgetUpdated");
static_assert(sizeof(HWCharacterInventoryWidget_EquipmentWidgetUpdated) == 0x000008, "Wrong size on HWCharacterInventoryWidget_EquipmentWidgetUpdated");
static_assert(offsetof(HWCharacterInventoryWidget_EquipmentWidgetUpdated, UpdatedEquipmentWidget) == 0x000000, "Member 'HWCharacterInventoryWidget_EquipmentWidgetUpdated::UpdatedEquipmentWidget' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.HandleEquipmentLevelUpStateChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged final
{
public:
	class UHWActivatableEquipmentWidget*          EquipmentWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCanLevelUp;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged");
static_assert(sizeof(HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged) == 0x000010, "Wrong size on HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged");
static_assert(offsetof(HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged, EquipmentWidget) == 0x000000, "Member 'HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged::EquipmentWidget' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged, bNewCanLevelUp) == 0x000008, "Member 'HWCharacterInventoryWidget_HandleEquipmentLevelUpStateChanged::bNewCanLevelUp' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.HandleInventoryEquipmentChanged
// 0x0020 (0x0020 - 0x0000)
struct HWCharacterInventoryWidget_HandleInventoryEquipmentChanged final
{
public:
	class UHWInventoryManagerComponent*           InventoryManager;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWInventoryChangeReason                      InventoryChangeReason;                             // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_HandleInventoryEquipmentChanged");
static_assert(sizeof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged) == 0x000020, "Wrong size on HWCharacterInventoryWidget_HandleInventoryEquipmentChanged");
static_assert(offsetof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged, InventoryManager) == 0x000000, "Member 'HWCharacterInventoryWidget_HandleInventoryEquipmentChanged::InventoryManager' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged, EquipmentInstance) == 0x000008, "Member 'HWCharacterInventoryWidget_HandleInventoryEquipmentChanged::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged, InventorySlot) == 0x000010, "Member 'HWCharacterInventoryWidget_HandleInventoryEquipmentChanged::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_HandleInventoryEquipmentChanged, InventoryChangeReason) == 0x00001C, "Member 'HWCharacterInventoryWidget_HandleInventoryEquipmentChanged::InventoryChangeReason' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.HandlePostKeyHandled
// 0x0020 (0x0020 - 0x0000)
struct HWCharacterInventoryWidget_HandlePostKeyHandled final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterInventoryWidget_HandlePostKeyHandled) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_HandlePostKeyHandled");
static_assert(sizeof(HWCharacterInventoryWidget_HandlePostKeyHandled) == 0x000020, "Wrong size on HWCharacterInventoryWidget_HandlePostKeyHandled");
static_assert(offsetof(HWCharacterInventoryWidget_HandlePostKeyHandled, Key) == 0x000000, "Member 'HWCharacterInventoryWidget_HandlePostKeyHandled::Key' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_HandlePostKeyHandled, InputEvent) == 0x000018, "Member 'HWCharacterInventoryWidget_HandlePostKeyHandled::InputEvent' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.InitializeSwapAction
// 0x000C (0x000C - 0x0000)
struct HWCharacterInventoryWidget_InitializeSwapAction final
{
public:
	struct FHWInventorySlot                       StartingSlot;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_InitializeSwapAction) == 0x000004, "Wrong alignment on HWCharacterInventoryWidget_InitializeSwapAction");
static_assert(sizeof(HWCharacterInventoryWidget_InitializeSwapAction) == 0x00000C, "Wrong size on HWCharacterInventoryWidget_InitializeSwapAction");
static_assert(offsetof(HWCharacterInventoryWidget_InitializeSwapAction, StartingSlot) == 0x000000, "Member 'HWCharacterInventoryWidget_InitializeSwapAction::StartingSlot' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.OnUpdateSwappingStatus
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_OnUpdateSwappingStatus final
{
public:
	bool                                          bNewIsSwappingActive;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_OnUpdateSwappingStatus) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_OnUpdateSwappingStatus");
static_assert(sizeof(HWCharacterInventoryWidget_OnUpdateSwappingStatus) == 0x000001, "Wrong size on HWCharacterInventoryWidget_OnUpdateSwappingStatus");
static_assert(offsetof(HWCharacterInventoryWidget_OnUpdateSwappingStatus, bNewIsSwappingActive) == 0x000000, "Member 'HWCharacterInventoryWidget_OnUpdateSwappingStatus::bNewIsSwappingActive' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.SetShouldShowStates
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_SetShouldShowStates final
{
public:
	bool                                          bInShouldShowStates;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_SetShouldShowStates) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_SetShouldShowStates");
static_assert(sizeof(HWCharacterInventoryWidget_SetShouldShowStates) == 0x000001, "Wrong size on HWCharacterInventoryWidget_SetShouldShowStates");
static_assert(offsetof(HWCharacterInventoryWidget_SetShouldShowStates, bInShouldShowStates) == 0x000000, "Member 'HWCharacterInventoryWidget_SetShouldShowStates::bInShouldShowStates' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.SetSlotsOrientation
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_SetSlotsOrientation final
{
public:
	EHWOrientation                                NewOrientation;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_SetSlotsOrientation) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_SetSlotsOrientation");
static_assert(sizeof(HWCharacterInventoryWidget_SetSlotsOrientation) == 0x000001, "Wrong size on HWCharacterInventoryWidget_SetSlotsOrientation");
static_assert(offsetof(HWCharacterInventoryWidget_SetSlotsOrientation, NewOrientation) == 0x000000, "Member 'HWCharacterInventoryWidget_SetSlotsOrientation::NewOrientation' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.SetSuppressUpdateOnVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility final
{
public:
	bool                                          bInSuppressUpdateOnVisibility;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility");
static_assert(sizeof(HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility) == 0x000001, "Wrong size on HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility");
static_assert(offsetof(HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility, bInSuppressUpdateOnVisibility) == 0x000000, "Member 'HWCharacterInventoryWidget_SetSuppressUpdateOnVisibility::bInSuppressUpdateOnVisibility' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.UpdateSwappingStatus
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_UpdateSwappingStatus final
{
public:
	bool                                          bNewIsSwappingActive;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_UpdateSwappingStatus) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_UpdateSwappingStatus");
static_assert(sizeof(HWCharacterInventoryWidget_UpdateSwappingStatus) == 0x000001, "Wrong size on HWCharacterInventoryWidget_UpdateSwappingStatus");
static_assert(offsetof(HWCharacterInventoryWidget_UpdateSwappingStatus, bNewIsSwappingActive) == 0x000000, "Member 'HWCharacterInventoryWidget_UpdateSwappingStatus::bNewIsSwappingActive' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.UpdateSwapTarget
// 0x000C (0x000C - 0x0000)
struct HWCharacterInventoryWidget_UpdateSwapTarget final
{
public:
	struct FHWInventorySlot                       NewTargetSwapSlot;                                 // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_UpdateSwapTarget) == 0x000004, "Wrong alignment on HWCharacterInventoryWidget_UpdateSwapTarget");
static_assert(sizeof(HWCharacterInventoryWidget_UpdateSwapTarget) == 0x00000C, "Wrong size on HWCharacterInventoryWidget_UpdateSwapTarget");
static_assert(offsetof(HWCharacterInventoryWidget_UpdateSwapTarget, NewTargetSwapSlot) == 0x000000, "Member 'HWCharacterInventoryWidget_UpdateSwapTarget::NewTargetSwapSlot' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.GetEquipmentCount
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterInventoryWidget_GetEquipmentCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_GetEquipmentCount) == 0x000004, "Wrong alignment on HWCharacterInventoryWidget_GetEquipmentCount");
static_assert(sizeof(HWCharacterInventoryWidget_GetEquipmentCount) == 0x000004, "Wrong size on HWCharacterInventoryWidget_GetEquipmentCount");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentCount, ReturnValue) == 0x000000, "Member 'HWCharacterInventoryWidget_GetEquipmentCount::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.GetEquipmentWidgetByInstance
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterInventoryWidget_GetEquipmentWidgetByInstance final
{
public:
	class UHWEquipmentInstance*                   EquipmentInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWInventoryEquipmentWidget*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_GetEquipmentWidgetByInstance) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_GetEquipmentWidgetByInstance");
static_assert(sizeof(HWCharacterInventoryWidget_GetEquipmentWidgetByInstance) == 0x000010, "Wrong size on HWCharacterInventoryWidget_GetEquipmentWidgetByInstance");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetByInstance, EquipmentInstance) == 0x000000, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetByInstance::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetByInstance, ReturnValue) == 0x000008, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetByInstance::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.GetEquipmentWidgetBySlot
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterInventoryWidget_GetEquipmentWidgetBySlot final
{
public:
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWInventoryEquipmentWidget*            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_GetEquipmentWidgetBySlot) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_GetEquipmentWidgetBySlot");
static_assert(sizeof(HWCharacterInventoryWidget_GetEquipmentWidgetBySlot) == 0x000018, "Wrong size on HWCharacterInventoryWidget_GetEquipmentWidgetBySlot");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetBySlot, InventorySlot) == 0x000000, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetBySlot::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetBySlot, ReturnValue) == 0x000010, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetBySlot::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.GetEquipmentWidgetClassForSlot
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot final
{
public:
	struct FHWInventorySlot                       InventorySlot;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWInventoryEquipmentWidget> ReturnValue;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot) == 0x000008, "Wrong alignment on HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot");
static_assert(sizeof(HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot) == 0x000018, "Wrong size on HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot, InventorySlot) == 0x000000, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot::InventorySlot' has a wrong offset!");
static_assert(offsetof(HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot, ReturnValue) == 0x000010, "Member 'HWCharacterInventoryWidget_GetEquipmentWidgetClassForSlot::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.GetIsSwappingActive
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_GetIsSwappingActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_GetIsSwappingActive) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_GetIsSwappingActive");
static_assert(sizeof(HWCharacterInventoryWidget_GetIsSwappingActive) == 0x000001, "Wrong size on HWCharacterInventoryWidget_GetIsSwappingActive");
static_assert(offsetof(HWCharacterInventoryWidget_GetIsSwappingActive, ReturnValue) == 0x000000, "Member 'HWCharacterInventoryWidget_GetIsSwappingActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterInventoryWidget.HasEquipmentToLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HWCharacterInventoryWidget_HasEquipmentToLevelUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterInventoryWidget_HasEquipmentToLevelUp) == 0x000001, "Wrong alignment on HWCharacterInventoryWidget_HasEquipmentToLevelUp");
static_assert(sizeof(HWCharacterInventoryWidget_HasEquipmentToLevelUp) == 0x000001, "Wrong size on HWCharacterInventoryWidget_HasEquipmentToLevelUp");
static_assert(offsetof(HWCharacterInventoryWidget_HasEquipmentToLevelUp, ReturnValue) == 0x000000, "Member 'HWCharacterInventoryWidget_HasEquipmentToLevelUp::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderEntryWidget.SetBackgroundColorStyle
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle final
{
public:
	struct FGameplayTag                           InStyleTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle) == 0x000004, "Wrong alignment on HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle");
static_assert(sizeof(HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle) == 0x000008, "Wrong size on HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle");
static_assert(offsetof(HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle, InStyleTag) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderEntryWidget_SetBackgroundColorStyle::InStyleTag' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderEntryWidget.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected) == 0x000001, "Wrong alignment on HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected");
static_assert(sizeof(HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected) == 0x000001, "Wrong size on HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected");
static_assert(offsetof(HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected, bInIsSelected) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderEntryWidget_SetIsSelected::bInIsSelected' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderAbilitiesOrderEntryWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderAbilitiesOrderEntryWidget_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderAbilitiesOrderEntryWidget_SetText) == 0x000008, "Wrong alignment on HWGodBuilderAbilitiesOrderEntryWidget_SetText");
static_assert(sizeof(HWGodBuilderAbilitiesOrderEntryWidget_SetText) == 0x000018, "Wrong size on HWGodBuilderAbilitiesOrderEntryWidget_SetText");
static_assert(offsetof(HWGodBuilderAbilitiesOrderEntryWidget_SetText, InText) == 0x000000, "Member 'HWGodBuilderAbilitiesOrderEntryWidget_SetText::InText' has a wrong offset!");

// Function HemingwayUI.HWEquipmentItemDragWidget.SetAlignmentVector
// 0x0010 (0x0010 - 0x0000)
struct HWEquipmentItemDragWidget_SetAlignmentVector final
{
public:
	struct FVector2D                              Alignment;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentItemDragWidget_SetAlignmentVector) == 0x000008, "Wrong alignment on HWEquipmentItemDragWidget_SetAlignmentVector");
static_assert(sizeof(HWEquipmentItemDragWidget_SetAlignmentVector) == 0x000010, "Wrong size on HWEquipmentItemDragWidget_SetAlignmentVector");
static_assert(offsetof(HWEquipmentItemDragWidget_SetAlignmentVector, Alignment) == 0x000000, "Member 'HWEquipmentItemDragWidget_SetAlignmentVector::Alignment' has a wrong offset!");

// Function HemingwayUI.HWEquipmentItemDragWidget.SetEquipmentItem
// 0x0008 (0x0008 - 0x0000)
struct HWEquipmentItemDragWidget_SetEquipmentItem final
{
public:
	const class UHWEquipmentItem*                 EquipmentItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentItemDragWidget_SetEquipmentItem) == 0x000008, "Wrong alignment on HWEquipmentItemDragWidget_SetEquipmentItem");
static_assert(sizeof(HWEquipmentItemDragWidget_SetEquipmentItem) == 0x000008, "Wrong size on HWEquipmentItemDragWidget_SetEquipmentItem");
static_assert(offsetof(HWEquipmentItemDragWidget_SetEquipmentItem, EquipmentItem) == 0x000000, "Member 'HWEquipmentItemDragWidget_SetEquipmentItem::EquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWEquipmentItemDragWidget.SetIsDragging
// 0x0001 (0x0001 - 0x0000)
struct HWEquipmentItemDragWidget_SetIsDragging final
{
public:
	bool                                          bNewIsDragging;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWEquipmentItemDragWidget_SetIsDragging) == 0x000001, "Wrong alignment on HWEquipmentItemDragWidget_SetIsDragging");
static_assert(sizeof(HWEquipmentItemDragWidget_SetIsDragging) == 0x000001, "Wrong size on HWEquipmentItemDragWidget_SetIsDragging");
static_assert(offsetof(HWEquipmentItemDragWidget_SetIsDragging, bNewIsDragging) == 0x000000, "Member 'HWEquipmentItemDragWidget_SetIsDragging::bNewIsDragging' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.HandleCharacterChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterShieldWidget_HandleCharacterChanged final
{
public:
	class AHWCharacterAbilitySystemActor*         CharacterAbilitySystemActor;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWCharacter_Base*                      NewCharacterOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_HandleCharacterChanged) == 0x000008, "Wrong alignment on HWCharacterShieldWidget_HandleCharacterChanged");
static_assert(sizeof(HWCharacterShieldWidget_HandleCharacterChanged) == 0x000010, "Wrong size on HWCharacterShieldWidget_HandleCharacterChanged");
static_assert(offsetof(HWCharacterShieldWidget_HandleCharacterChanged, CharacterAbilitySystemActor) == 0x000000, "Member 'HWCharacterShieldWidget_HandleCharacterChanged::CharacterAbilitySystemActor' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_HandleCharacterChanged, NewCharacterOwner) == 0x000008, "Member 'HWCharacterShieldWidget_HandleCharacterChanged::NewCharacterOwner' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.HandleShieldInstanceHealthChanged
// 0x0010 (0x0010 - 0x0000)
struct HWCharacterShieldWidget_HandleShieldInstanceHealthChanged final
{
public:
	class UHWShieldInstance*                      ShieldInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewHealth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterShieldWidget_HandleShieldInstanceHealthChanged) == 0x000008, "Wrong alignment on HWCharacterShieldWidget_HandleShieldInstanceHealthChanged");
static_assert(sizeof(HWCharacterShieldWidget_HandleShieldInstanceHealthChanged) == 0x000010, "Wrong size on HWCharacterShieldWidget_HandleShieldInstanceHealthChanged");
static_assert(offsetof(HWCharacterShieldWidget_HandleShieldInstanceHealthChanged, ShieldInstance) == 0x000000, "Member 'HWCharacterShieldWidget_HandleShieldInstanceHealthChanged::ShieldInstance' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_HandleShieldInstanceHealthChanged, NewHealth) == 0x000008, "Member 'HWCharacterShieldWidget_HandleShieldInstanceHealthChanged::NewHealth' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.HandleShieldListUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterShieldWidget_HandleShieldListUpdated final
{
public:
	class UHWShieldManagerComponent*              ShieldManagerComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_HandleShieldListUpdated) == 0x000008, "Wrong alignment on HWCharacterShieldWidget_HandleShieldListUpdated");
static_assert(sizeof(HWCharacterShieldWidget_HandleShieldListUpdated) == 0x000008, "Wrong size on HWCharacterShieldWidget_HandleShieldListUpdated");
static_assert(offsetof(HWCharacterShieldWidget_HandleShieldListUpdated, ShieldManagerComponent) == 0x000000, "Member 'HWCharacterShieldWidget_HandleShieldListUpdated::ShieldManagerComponent' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.HandleShieldManagerUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterShieldWidget_HandleShieldManagerUpdated final
{
public:
	class UHWShieldManagerComponent*              ShieldManagerComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_HandleShieldManagerUpdated) == 0x000008, "Wrong alignment on HWCharacterShieldWidget_HandleShieldManagerUpdated");
static_assert(sizeof(HWCharacterShieldWidget_HandleShieldManagerUpdated) == 0x000008, "Wrong size on HWCharacterShieldWidget_HandleShieldManagerUpdated");
static_assert(offsetof(HWCharacterShieldWidget_HandleShieldManagerUpdated, ShieldManagerComponent) == 0x000000, "Member 'HWCharacterShieldWidget_HandleShieldManagerUpdated::ShieldManagerComponent' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.CalculateInlineShieldsRatios
// 0x0018 (0x0018 - 0x0000)
struct HWCharacterShieldWidget_CalculateInlineShieldsRatios final
{
public:
	float                                         FrontSpacerRatio;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OmniShieldRatio;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalShieldRatio;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MagicalShieldRatio;                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackSpacerRatio;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCharacterShieldWidget_CalculateInlineShieldsRatios) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_CalculateInlineShieldsRatios");
static_assert(sizeof(HWCharacterShieldWidget_CalculateInlineShieldsRatios) == 0x000018, "Wrong size on HWCharacterShieldWidget_CalculateInlineShieldsRatios");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, FrontSpacerRatio) == 0x000000, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::FrontSpacerRatio' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, OmniShieldRatio) == 0x000004, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::OmniShieldRatio' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, PhysicalShieldRatio) == 0x000008, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::PhysicalShieldRatio' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, MagicalShieldRatio) == 0x00000C, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::MagicalShieldRatio' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, BackSpacerRatio) == 0x000010, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::BackSpacerRatio' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_CalculateInlineShieldsRatios, ReturnValue) == 0x000014, "Member 'HWCharacterShieldWidget_CalculateInlineShieldsRatios::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetCharacterHealth
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterShieldWidget_GetCharacterHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetCharacterHealth) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_GetCharacterHealth");
static_assert(sizeof(HWCharacterShieldWidget_GetCharacterHealth) == 0x000004, "Wrong size on HWCharacterShieldWidget_GetCharacterHealth");
static_assert(offsetof(HWCharacterShieldWidget_GetCharacterHealth, ReturnValue) == 0x000000, "Member 'HWCharacterShieldWidget_GetCharacterHealth::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetCharacterMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterShieldWidget_GetCharacterMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetCharacterMaxHealth) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_GetCharacterMaxHealth");
static_assert(sizeof(HWCharacterShieldWidget_GetCharacterMaxHealth) == 0x000004, "Wrong size on HWCharacterShieldWidget_GetCharacterMaxHealth");
static_assert(offsetof(HWCharacterShieldWidget_GetCharacterMaxHealth, ReturnValue) == 0x000000, "Member 'HWCharacterShieldWidget_GetCharacterMaxHealth::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetShieldManagerComponent
// 0x0008 (0x0008 - 0x0000)
struct HWCharacterShieldWidget_GetShieldManagerComponent final
{
public:
	class UHWShieldManagerComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetShieldManagerComponent) == 0x000008, "Wrong alignment on HWCharacterShieldWidget_GetShieldManagerComponent");
static_assert(sizeof(HWCharacterShieldWidget_GetShieldManagerComponent) == 0x000008, "Wrong size on HWCharacterShieldWidget_GetShieldManagerComponent");
static_assert(offsetof(HWCharacterShieldWidget_GetShieldManagerComponent, ReturnValue) == 0x000000, "Member 'HWCharacterShieldWidget_GetShieldManagerComponent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetShieldStartPosition
// 0x0040 (0x0040 - 0x0000)
struct HWCharacterShieldWidget_GetShieldStartPosition final
{
public:
	struct FGeometry                              ReferenceGeometry;                                 // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EOrientation                                  Orientation;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetShieldStartPosition) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_GetShieldStartPosition");
static_assert(sizeof(HWCharacterShieldWidget_GetShieldStartPosition) == 0x000040, "Wrong size on HWCharacterShieldWidget_GetShieldStartPosition");
static_assert(offsetof(HWCharacterShieldWidget_GetShieldStartPosition, ReferenceGeometry) == 0x000000, "Member 'HWCharacterShieldWidget_GetShieldStartPosition::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_GetShieldStartPosition, Orientation) == 0x000038, "Member 'HWCharacterShieldWidget_GetShieldStartPosition::Orientation' has a wrong offset!");
static_assert(offsetof(HWCharacterShieldWidget_GetShieldStartPosition, ReturnValue) == 0x00003C, "Member 'HWCharacterShieldWidget_GetShieldStartPosition::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetShieldStartPositionPercent
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterShieldWidget_GetShieldStartPositionPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetShieldStartPositionPercent) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_GetShieldStartPositionPercent");
static_assert(sizeof(HWCharacterShieldWidget_GetShieldStartPositionPercent) == 0x000004, "Wrong size on HWCharacterShieldWidget_GetShieldStartPositionPercent");
static_assert(offsetof(HWCharacterShieldWidget_GetShieldStartPositionPercent, ReturnValue) == 0x000000, "Member 'HWCharacterShieldWidget_GetShieldStartPositionPercent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCharacterShieldWidget.GetTotalShieldHealthPercent
// 0x0004 (0x0004 - 0x0000)
struct HWCharacterShieldWidget_GetTotalShieldHealthPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCharacterShieldWidget_GetTotalShieldHealthPercent) == 0x000004, "Wrong alignment on HWCharacterShieldWidget_GetTotalShieldHealthPercent");
static_assert(sizeof(HWCharacterShieldWidget_GetTotalShieldHealthPercent) == 0x000004, "Wrong size on HWCharacterShieldWidget_GetTotalShieldHealthPercent");
static_assert(offsetof(HWCharacterShieldWidget_GetTotalShieldHealthPercent, ReturnValue) == 0x000000, "Member 'HWCharacterShieldWidget_GetTotalShieldHealthPercent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInventoryItemWidget.DisplayInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryItemWidget_DisplayInventoryItem final
{
public:
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryItemWidget_DisplayInventoryItem) == 0x000008, "Wrong alignment on HWInventoryItemWidget_DisplayInventoryItem");
static_assert(sizeof(HWInventoryItemWidget_DisplayInventoryItem) == 0x000008, "Wrong size on HWInventoryItemWidget_DisplayInventoryItem");
static_assert(offsetof(HWInventoryItemWidget_DisplayInventoryItem, InventoryItem) == 0x000000, "Member 'HWInventoryItemWidget_DisplayInventoryItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWInventoryItemWidget.SetInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryItemWidget_SetInventoryItem final
{
public:
	const class UHWInventoryItem*                 InInventoryItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryItemWidget_SetInventoryItem) == 0x000008, "Wrong alignment on HWInventoryItemWidget_SetInventoryItem");
static_assert(sizeof(HWInventoryItemWidget_SetInventoryItem) == 0x000008, "Wrong size on HWInventoryItemWidget_SetInventoryItem");
static_assert(offsetof(HWInventoryItemWidget_SetInventoryItem, InInventoryItem) == 0x000000, "Member 'HWInventoryItemWidget_SetInventoryItem::InInventoryItem' has a wrong offset!");

// Function HemingwayUI.HWInventoryItemWidget.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWInventoryItemWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWInventoryItemWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWInventoryItemWidget_ShowTooltip");
static_assert(sizeof(HWInventoryItemWidget_ShowTooltip) == 0x000010, "Wrong size on HWInventoryItemWidget_ShowTooltip");
static_assert(offsetof(HWInventoryItemWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWInventoryItemWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWInventoryItemWidget_ShowTooltip, Axis) == 0x000008, "Member 'HWInventoryItemWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWInventoryItemWidget.GetInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct HWInventoryItemWidget_GetInventoryItem final
{
public:
	const class UHWInventoryItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInventoryItemWidget_GetInventoryItem) == 0x000008, "Wrong alignment on HWInventoryItemWidget_GetInventoryItem");
static_assert(sizeof(HWInventoryItemWidget_GetInventoryItem) == 0x000008, "Wrong size on HWInventoryItemWidget_GetInventoryItem");
static_assert(offsetof(HWInventoryItemWidget_GetInventoryItem, ReturnValue) == 0x000000, "Member 'HWInventoryItemWidget_GetInventoryItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.EquippedStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWGodAspectItemWidget_EquippedStateUpdated final
{
public:
	bool                                          bIsEquipped;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_EquippedStateUpdated) == 0x000001, "Wrong alignment on HWGodAspectItemWidget_EquippedStateUpdated");
static_assert(sizeof(HWGodAspectItemWidget_EquippedStateUpdated) == 0x000001, "Wrong size on HWGodAspectItemWidget_EquippedStateUpdated");
static_assert(offsetof(HWGodAspectItemWidget_EquippedStateUpdated, bIsEquipped) == 0x000000, "Member 'HWGodAspectItemWidget_EquippedStateUpdated::bIsEquipped' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.SetFromCharacterItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodAspectItemWidget_SetFromCharacterItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_SetFromCharacterItem) == 0x000008, "Wrong alignment on HWGodAspectItemWidget_SetFromCharacterItem");
static_assert(sizeof(HWGodAspectItemWidget_SetFromCharacterItem) == 0x000008, "Wrong size on HWGodAspectItemWidget_SetFromCharacterItem");
static_assert(offsetof(HWGodAspectItemWidget_SetFromCharacterItem, InCharacterItem) == 0x000000, "Member 'HWGodAspectItemWidget_SetFromCharacterItem::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.SetFromCharacterItemId
// 0x0014 (0x0014 - 0x0000)
struct HWGodAspectItemWidget_SetFromCharacterItemId final
{
public:
	struct FRH_ItemId                             InCharacterItemId;                                 // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_SetFromCharacterItemId) == 0x000004, "Wrong alignment on HWGodAspectItemWidget_SetFromCharacterItemId");
static_assert(sizeof(HWGodAspectItemWidget_SetFromCharacterItemId) == 0x000014, "Wrong size on HWGodAspectItemWidget_SetFromCharacterItemId");
static_assert(offsetof(HWGodAspectItemWidget_SetFromCharacterItemId, InCharacterItemId) == 0x000000, "Member 'HWGodAspectItemWidget_SetFromCharacterItemId::InCharacterItemId' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.GetAccountLevelRequirement
// 0x0004 (0x0004 - 0x0000)
struct HWGodAspectItemWidget_GetAccountLevelRequirement final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_GetAccountLevelRequirement) == 0x000004, "Wrong alignment on HWGodAspectItemWidget_GetAccountLevelRequirement");
static_assert(sizeof(HWGodAspectItemWidget_GetAccountLevelRequirement) == 0x000004, "Wrong size on HWGodAspectItemWidget_GetAccountLevelRequirement");
static_assert(offsetof(HWGodAspectItemWidget_GetAccountLevelRequirement, ReturnValue) == 0x000000, "Member 'HWGodAspectItemWidget_GetAccountLevelRequirement::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.HasAspectItem
// 0x0001 (0x0001 - 0x0000)
struct HWGodAspectItemWidget_HasAspectItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_HasAspectItem) == 0x000001, "Wrong alignment on HWGodAspectItemWidget_HasAspectItem");
static_assert(sizeof(HWGodAspectItemWidget_HasAspectItem) == 0x000001, "Wrong size on HWGodAspectItemWidget_HasAspectItem");
static_assert(offsetof(HWGodAspectItemWidget_HasAspectItem, ReturnValue) == 0x000000, "Member 'HWGodAspectItemWidget_HasAspectItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.IsAccountLevelRequirementMet
// 0x0001 (0x0001 - 0x0000)
struct HWGodAspectItemWidget_IsAccountLevelRequirementMet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_IsAccountLevelRequirementMet) == 0x000001, "Wrong alignment on HWGodAspectItemWidget_IsAccountLevelRequirementMet");
static_assert(sizeof(HWGodAspectItemWidget_IsAccountLevelRequirementMet) == 0x000001, "Wrong size on HWGodAspectItemWidget_IsAccountLevelRequirementMet");
static_assert(offsetof(HWGodAspectItemWidget_IsAccountLevelRequirementMet, ReturnValue) == 0x000000, "Member 'HWGodAspectItemWidget_IsAccountLevelRequirementMet::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodAspectItemWidget.IsEquippedToLoadout
// 0x0001 (0x0001 - 0x0000)
struct HWGodAspectItemWidget_IsEquippedToLoadout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodAspectItemWidget_IsEquippedToLoadout) == 0x000001, "Wrong alignment on HWGodAspectItemWidget_IsEquippedToLoadout");
static_assert(sizeof(HWGodAspectItemWidget_IsEquippedToLoadout) == 0x000001, "Wrong size on HWGodAspectItemWidget_IsEquippedToLoadout");
static_assert(offsetof(HWGodAspectItemWidget_IsEquippedToLoadout, ReturnValue) == 0x000000, "Member 'HWGodAspectItemWidget_IsEquippedToLoadout::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSpectatorGraphWidget.HasCachedTeamStatTrackers
// 0x0001 (0x0001 - 0x0000)
struct HWSpectatorGraphWidget_HasCachedTeamStatTrackers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorGraphWidget_HasCachedTeamStatTrackers) == 0x000001, "Wrong alignment on HWSpectatorGraphWidget_HasCachedTeamStatTrackers");
static_assert(sizeof(HWSpectatorGraphWidget_HasCachedTeamStatTrackers) == 0x000001, "Wrong size on HWSpectatorGraphWidget_HasCachedTeamStatTrackers");
static_assert(offsetof(HWSpectatorGraphWidget_HasCachedTeamStatTrackers, ReturnValue) == 0x000000, "Member 'HWSpectatorGraphWidget_HasCachedTeamStatTrackers::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSpectatorGraphWidget.OnTeamDataUpdated
// 0x000C (0x000C - 0x0000)
struct HWSpectatorGraphWidget_OnTeamDataUpdated final
{
public:
	float                                         XPDifference;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GoldDifference;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameElapsedTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorGraphWidget_OnTeamDataUpdated) == 0x000004, "Wrong alignment on HWSpectatorGraphWidget_OnTeamDataUpdated");
static_assert(sizeof(HWSpectatorGraphWidget_OnTeamDataUpdated) == 0x00000C, "Wrong size on HWSpectatorGraphWidget_OnTeamDataUpdated");
static_assert(offsetof(HWSpectatorGraphWidget_OnTeamDataUpdated, XPDifference) == 0x000000, "Member 'HWSpectatorGraphWidget_OnTeamDataUpdated::XPDifference' has a wrong offset!");
static_assert(offsetof(HWSpectatorGraphWidget_OnTeamDataUpdated, GoldDifference) == 0x000004, "Member 'HWSpectatorGraphWidget_OnTeamDataUpdated::GoldDifference' has a wrong offset!");
static_assert(offsetof(HWSpectatorGraphWidget_OnTeamDataUpdated, GameElapsedTime) == 0x000008, "Member 'HWSpectatorGraphWidget_OnTeamDataUpdated::GameElapsedTime' has a wrong offset!");

// Function HemingwayUI.HWSpectatorHUD.SwapPlayerStatesForTeam
// 0x0018 (0x0018 - 0x0000)
struct HWSpectatorHUD_SwapPlayerStatesForTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         playerStateA;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         playerStateB;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorHUD_SwapPlayerStatesForTeam) == 0x000008, "Wrong alignment on HWSpectatorHUD_SwapPlayerStatesForTeam");
static_assert(sizeof(HWSpectatorHUD_SwapPlayerStatesForTeam) == 0x000018, "Wrong size on HWSpectatorHUD_SwapPlayerStatesForTeam");
static_assert(offsetof(HWSpectatorHUD_SwapPlayerStatesForTeam, TeamId) == 0x000000, "Member 'HWSpectatorHUD_SwapPlayerStatesForTeam::TeamId' has a wrong offset!");
static_assert(offsetof(HWSpectatorHUD_SwapPlayerStatesForTeam, playerStateA) == 0x000008, "Member 'HWSpectatorHUD_SwapPlayerStatesForTeam::playerStateA' has a wrong offset!");
static_assert(offsetof(HWSpectatorHUD_SwapPlayerStatesForTeam, playerStateB) == 0x000010, "Member 'HWSpectatorHUD_SwapPlayerStatesForTeam::playerStateB' has a wrong offset!");

// Function HemingwayUI.HWSpectatorHUD.UpdatedSortedPlayerStatesForTeam
// 0x0001 (0x0001 - 0x0000)
struct HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam) == 0x000001, "Wrong alignment on HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam");
static_assert(sizeof(HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam) == 0x000001, "Wrong size on HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam");
static_assert(offsetof(HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam, TeamId) == 0x000000, "Member 'HWSpectatorHUD_UpdatedSortedPlayerStatesForTeam::TeamId' has a wrong offset!");

// Function HemingwayUI.HWSpectatorHUD.GetSpectatorPlayerController
// 0x0008 (0x0008 - 0x0000)
struct HWSpectatorHUD_GetSpectatorPlayerController final
{
public:
	class AHWPlayerController_Spectator*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorHUD_GetSpectatorPlayerController) == 0x000008, "Wrong alignment on HWSpectatorHUD_GetSpectatorPlayerController");
static_assert(sizeof(HWSpectatorHUD_GetSpectatorPlayerController) == 0x000008, "Wrong size on HWSpectatorHUD_GetSpectatorPlayerController");
static_assert(offsetof(HWSpectatorHUD_GetSpectatorPlayerController, ReturnValue) == 0x000000, "Member 'HWSpectatorHUD_GetSpectatorPlayerController::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSpectatorMatchStatsPlayerWidget.PopulatePlayerInfo
// 0x0030 (0x0030 - 0x0000)
struct HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo final
{
public:
	TSoftObjectPtr<class UTexture2D>              PlayerIcon;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamId;                                            // 0x0028(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo) == 0x000008, "Wrong alignment on HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo");
static_assert(sizeof(HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo) == 0x000030, "Wrong size on HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo");
static_assert(offsetof(HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo, PlayerIcon) == 0x000000, "Member 'HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo::PlayerIcon' has a wrong offset!");
static_assert(offsetof(HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo, TeamId) == 0x000028, "Member 'HWSpectatorMatchStatsPlayerWidget_PopulatePlayerInfo::TeamId' has a wrong offset!");

// Function HemingwayUI.HWSpectatorMatchStatsPlayerWidget.UpdatePlayerStatValues
// 0x0008 (0x0008 - 0x0000)
struct HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues) == 0x000004, "Wrong alignment on HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues");
static_assert(sizeof(HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues) == 0x000008, "Wrong size on HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues");
static_assert(offsetof(HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues, Value) == 0x000000, "Member 'HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues::Value' has a wrong offset!");
static_assert(offsetof(HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues, Percent) == 0x000004, "Member 'HWSpectatorMatchStatsPlayerWidget_UpdatePlayerStatValues::Percent' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.GetDisplayedBuild
// 0x0190 (0x0190 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_GetDisplayedBuild final
{
public:
	struct FHWGodBuild                            ReturnValue;                                       // 0x0000(0x0190)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_GetDisplayedBuild) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_GetDisplayedBuild");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_GetDisplayedBuild) == 0x000190, "Wrong size on HWGodBuilderBuildDisplayWidget_GetDisplayedBuild");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_GetDisplayedBuild, ReturnValue) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_GetDisplayedBuild::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.HandleAbilityOrderIconHovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered) == 0x000004, "Wrong alignment on HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered) == 0x000004, "Wrong size on HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered, AbilityIndex) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconHovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.HandleAbilityOrderIconUnovered
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered final
{
public:
	int32                                         AbilityIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered) == 0x000004, "Wrong alignment on HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered) == 0x000004, "Wrong size on HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered, AbilityIndex) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_HandleAbilityOrderIconUnovered::AbilityIndex' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.HandleBuildItemEntryHovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.HandleBuildItemEntrySelected
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.HandleBuildItemEntryUnhovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayWidget_HandleBuildItemEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.SetDisplayedBuild
// 0x0190 (0x0190 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_SetDisplayedBuild final
{
public:
	struct FHWGodBuild                            InGodBuild;                                        // 0x0000(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_SetDisplayedBuild) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_SetDisplayedBuild");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_SetDisplayedBuild) == 0x000190, "Wrong size on HWGodBuilderBuildDisplayWidget_SetDisplayedBuild");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_SetDisplayedBuild, InGodBuild) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_SetDisplayedBuild::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.SetEntriesExpanded
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_SetEntriesExpanded final
{
public:
	bool                                          bInIsExpanded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_SetEntriesExpanded) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayWidget_SetEntriesExpanded");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_SetEntriesExpanded) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayWidget_SetEntriesExpanded");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_SetEntriesExpanded, bInIsExpanded) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_SetEntriesExpanded::bInIsExpanded' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.SetGodItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_SetGodItem final
{
public:
	const class UHWCharacterItem*                 InCharacterItem;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_SetGodItem) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayWidget_SetGodItem");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_SetGodItem) == 0x000008, "Wrong size on HWGodBuilderBuildDisplayWidget_SetGodItem");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_SetGodItem, InCharacterItem) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_SetGodItem::InCharacterItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayWidget.GetEntriesExpanded
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayWidget_GetEntriesExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayWidget_GetEntriesExpanded) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayWidget_GetEntriesExpanded");
static_assert(sizeof(HWGodBuilderBuildDisplayWidget_GetEntriesExpanded) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayWidget_GetEntriesExpanded");
static_assert(offsetof(HWGodBuilderBuildDisplayWidget_GetEntriesExpanded, ReturnValue) == 0x000000, "Member 'HWGodBuilderBuildDisplayWidget_GetEntriesExpanded::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSpectatorMatchStatsWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWSpectatorMatchStatsWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWSpectatorMatchStatsWidget.OnPlayerAdded
// 0x0010 (0x0010 - 0x0000)
struct HWSpectatorMatchStatsWidget_OnPlayerAdded final
{
public:
	class UHWSpectatorMatchStatsPlayerWidget*     PlayerWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSpectatorMatchStatsWidget_OnPlayerAdded) == 0x000008, "Wrong alignment on HWSpectatorMatchStatsWidget_OnPlayerAdded");
static_assert(sizeof(HWSpectatorMatchStatsWidget_OnPlayerAdded) == 0x000010, "Wrong size on HWSpectatorMatchStatsWidget_OnPlayerAdded");
static_assert(offsetof(HWSpectatorMatchStatsWidget_OnPlayerAdded, PlayerWidget) == 0x000000, "Member 'HWSpectatorMatchStatsWidget_OnPlayerAdded::PlayerWidget' has a wrong offset!");
static_assert(offsetof(HWSpectatorMatchStatsWidget_OnPlayerAdded, RowIndex) == 0x000008, "Member 'HWSpectatorMatchStatsWidget_OnPlayerAdded::RowIndex' has a wrong offset!");

// Function HemingwayUI.HWSpectatorMatchStatsWidget.OnSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct HWSpectatorMatchStatsWidget_OnSelectionChanged final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSpectatorMatchStatsWidget_OnSelectionChanged) == 0x000008, "Wrong alignment on HWSpectatorMatchStatsWidget_OnSelectionChanged");
static_assert(sizeof(HWSpectatorMatchStatsWidget_OnSelectionChanged) == 0x000018, "Wrong size on HWSpectatorMatchStatsWidget_OnSelectionChanged");
static_assert(offsetof(HWSpectatorMatchStatsWidget_OnSelectionChanged, SelectedItem) == 0x000000, "Member 'HWSpectatorMatchStatsWidget_OnSelectionChanged::SelectedItem' has a wrong offset!");
static_assert(offsetof(HWSpectatorMatchStatsWidget_OnSelectionChanged, SelectionType) == 0x000010, "Member 'HWSpectatorMatchStatsWidget_OnSelectionChanged::SelectionType' has a wrong offset!");

// Function HemingwayUI.HWSpectatorPlayerViewWidget.OnSpectatorTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged final
{
public:
	class AHWPlayerState*                         NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged) == 0x000008, "Wrong alignment on HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged");
static_assert(sizeof(HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged) == 0x000008, "Wrong size on HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged");
static_assert(offsetof(HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged, NewPlayerState) == 0x000000, "Member 'HWSpectatorPlayerViewWidget_OnSpectatorTargetChanged::NewPlayerState' has a wrong offset!");

// Function HemingwayUI.HWSpectatorPlayerViewWidget.GetSpectatorPlayerViewHWWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets final
{
public:
	TArray<class UHWCharacterWidget*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets) == 0x000008, "Wrong alignment on HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets");
static_assert(sizeof(HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets) == 0x000010, "Wrong size on HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets");
static_assert(offsetof(HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets, ReturnValue) == 0x000000, "Member 'HWSpectatorPlayerViewWidget_GetSpectatorPlayerViewHWWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderModesListEntryWidget.SetEntryMode
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderModesListEntryWidget_SetEntryMode final
{
public:
	struct FGameplayTag                           InEntryMode;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderModesListEntryWidget_SetEntryMode) == 0x000004, "Wrong alignment on HWGodBuilderModesListEntryWidget_SetEntryMode");
static_assert(sizeof(HWGodBuilderModesListEntryWidget_SetEntryMode) == 0x000008, "Wrong size on HWGodBuilderModesListEntryWidget_SetEntryMode");
static_assert(offsetof(HWGodBuilderModesListEntryWidget_SetEntryMode, InEntryMode) == 0x000000, "Member 'HWGodBuilderModesListEntryWidget_SetEntryMode::InEntryMode' has a wrong offset!");

// Function HemingwayUI.HWSpectatorTeamWidget.HandleLocalTeamUpdated
// 0x0001 (0x0001 - 0x0000)
struct HWSpectatorTeamWidget_HandleLocalTeamUpdated final
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorTeamWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong alignment on HWSpectatorTeamWidget_HandleLocalTeamUpdated");
static_assert(sizeof(HWSpectatorTeamWidget_HandleLocalTeamUpdated) == 0x000001, "Wrong size on HWSpectatorTeamWidget_HandleLocalTeamUpdated");
static_assert(offsetof(HWSpectatorTeamWidget_HandleLocalTeamUpdated, TeamId) == 0x000000, "Member 'HWSpectatorTeamWidget_HandleLocalTeamUpdated::TeamId' has a wrong offset!");

// Function HemingwayUI.HWSpectatorTeamWidget.HandlePlayerSwap
// 0x000C (0x000C - 0x0000)
struct HWSpectatorTeamWidget_HandlePlayerSwap final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSpectatorTeamWidget_HandlePlayerSwap) == 0x000004, "Wrong alignment on HWSpectatorTeamWidget_HandlePlayerSwap");
static_assert(sizeof(HWSpectatorTeamWidget_HandlePlayerSwap) == 0x00000C, "Wrong size on HWSpectatorTeamWidget_HandlePlayerSwap");
static_assert(offsetof(HWSpectatorTeamWidget_HandlePlayerSwap, Index_0) == 0x000000, "Member 'HWSpectatorTeamWidget_HandlePlayerSwap::Index_0' has a wrong offset!");
static_assert(offsetof(HWSpectatorTeamWidget_HandlePlayerSwap, Direction) == 0x000004, "Member 'HWSpectatorTeamWidget_HandlePlayerSwap::Direction' has a wrong offset!");
static_assert(offsetof(HWSpectatorTeamWidget_HandlePlayerSwap, ReturnValue) == 0x000008, "Member 'HWSpectatorTeamWidget_HandlePlayerSwap::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSpectatorTeamWidget.OnShowButtons
// 0x0001 (0x0001 - 0x0000)
struct HWSpectatorTeamWidget_OnShowButtons final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorTeamWidget_OnShowButtons) == 0x000001, "Wrong alignment on HWSpectatorTeamWidget_OnShowButtons");
static_assert(sizeof(HWSpectatorTeamWidget_OnShowButtons) == 0x000001, "Wrong size on HWSpectatorTeamWidget_OnShowButtons");
static_assert(offsetof(HWSpectatorTeamWidget_OnShowButtons, bShow) == 0x000000, "Member 'HWSpectatorTeamWidget_OnShowButtons::bShow' has a wrong offset!");

// Function HemingwayUI.HWSpectatorTeamWidget.OnTeamMemberAdded
// 0x0010 (0x0010 - 0x0000)
struct HWSpectatorTeamWidget_OnTeamMemberAdded final
{
public:
	class UHWScoreboardPlayerWidget*              TeamWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RowIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSpectatorTeamWidget_OnTeamMemberAdded) == 0x000008, "Wrong alignment on HWSpectatorTeamWidget_OnTeamMemberAdded");
static_assert(sizeof(HWSpectatorTeamWidget_OnTeamMemberAdded) == 0x000010, "Wrong size on HWSpectatorTeamWidget_OnTeamMemberAdded");
static_assert(offsetof(HWSpectatorTeamWidget_OnTeamMemberAdded, TeamWidget) == 0x000000, "Member 'HWSpectatorTeamWidget_OnTeamMemberAdded::TeamWidget' has a wrong offset!");
static_assert(offsetof(HWSpectatorTeamWidget_OnTeamMemberAdded, RowIndex) == 0x000008, "Member 'HWSpectatorTeamWidget_OnTeamMemberAdded::RowIndex' has a wrong offset!");

// Function HemingwayUI.HWSpectatorTeamWidget.OnUnselect
// 0x0004 (0x0004 - 0x0000)
struct HWSpectatorTeamWidget_OnUnselect final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSpectatorTeamWidget_OnUnselect) == 0x000004, "Wrong alignment on HWSpectatorTeamWidget_OnUnselect");
static_assert(sizeof(HWSpectatorTeamWidget_OnUnselect) == 0x000004, "Wrong size on HWSpectatorTeamWidget_OnUnselect");
static_assert(offsetof(HWSpectatorTeamWidget_OnUnselect, Index_0) == 0x000000, "Member 'HWSpectatorTeamWidget_OnUnselect::Index_0' has a wrong offset!");

// Function HemingwayUI.HWTeamBarEntryCooldownWidget.HandleAbilityUnlocked
// 0x0010 (0x0010 - 0x0000)
struct HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked final
{
public:
	struct FHWInventorySlot                       AbilitySlot;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnlocked;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked) == 0x000004, "Wrong alignment on HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked");
static_assert(sizeof(HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked) == 0x000010, "Wrong size on HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked");
static_assert(offsetof(HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked, AbilitySlot) == 0x000000, "Member 'HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked::AbilitySlot' has a wrong offset!");
static_assert(offsetof(HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked, IsUnlocked) == 0x00000C, "Member 'HWTeamBarEntryCooldownWidget_HandleAbilityUnlocked::IsUnlocked' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryItemWidget.SetIsSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected final
{
public:
	bool                                          bInIsSelected;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected, bInIsSelected) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryItemWidget_SetIsSelected::bInIsSelected' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryItemWidget.SetSlotTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility final
{
public:
	ESlateVisibility                              InSlotTextVisibility;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility, InSlotTextVisibility) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryItemWidget_SetSlotTextVisibility::InSlotTextVisibility' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryItemWidget.ShowTooltip
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip final
{
public:
	class UWidget*                                ReferenceWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowContextBar;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTooltipAxis                                Axis;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip) == 0x000010, "Wrong size on HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip, ReferenceWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip::ReferenceWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip, bShowContextBar) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip::bShowContextBar' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip, Axis) == 0x000009, "Member 'HWGodBuilderBuildDisplayEntryItemWidget_ShowTooltip::Axis' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.HoverGodEntry
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_HoverGodEntry final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_HoverGodEntry) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_HoverGodEntry");
static_assert(sizeof(HWGodSelectorEntryWidget_HoverGodEntry) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_HoverGodEntry");
static_assert(offsetof(HWGodSelectorEntryWidget_HoverGodEntry, bHovered) == 0x000000, "Member 'HWGodSelectorEntryWidget_HoverGodEntry::bHovered' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.SelectGodEntry
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_SelectGodEntry final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_SelectGodEntry) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_SelectGodEntry");
static_assert(sizeof(HWGodSelectorEntryWidget_SelectGodEntry) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_SelectGodEntry");
static_assert(offsetof(HWGodSelectorEntryWidget_SelectGodEntry, bSelected) == 0x000000, "Member 'HWGodSelectorEntryWidget_SelectGodEntry::bSelected' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_SetDisabled final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_SetDisabled) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_SetDisabled");
static_assert(sizeof(HWGodSelectorEntryWidget_SetDisabled) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_SetDisabled");
static_assert(offsetof(HWGodSelectorEntryWidget_SetDisabled, bDisabled) == 0x000000, "Member 'HWGodSelectorEntryWidget_SetDisabled::bDisabled' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.SetGodData
// 0x0008 (0x0008 - 0x0000)
struct HWGodSelectorEntryWidget_SetGodData final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_SetGodData) == 0x000008, "Wrong alignment on HWGodSelectorEntryWidget_SetGodData");
static_assert(sizeof(HWGodSelectorEntryWidget_SetGodData) == 0x000008, "Wrong size on HWGodSelectorEntryWidget_SetGodData");
static_assert(offsetof(HWGodSelectorEntryWidget_SetGodData, InGodItem) == 0x000000, "Member 'HWGodSelectorEntryWidget_SetGodData::InGodItem' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.SetGodEntryDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWGodSelectorEntryWidget_SetGodEntryDisplay final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_SetGodEntryDisplay) == 0x000008, "Wrong alignment on HWGodSelectorEntryWidget_SetGodEntryDisplay");
static_assert(sizeof(HWGodSelectorEntryWidget_SetGodEntryDisplay) == 0x000008, "Wrong size on HWGodSelectorEntryWidget_SetGodEntryDisplay");
static_assert(offsetof(HWGodSelectorEntryWidget_SetGodEntryDisplay, InGodItem) == 0x000000, "Member 'HWGodSelectorEntryWidget_SetGodEntryDisplay::InGodItem' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_SetSelected) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_SetSelected");
static_assert(sizeof(HWGodSelectorEntryWidget_SetSelected) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_SetSelected");
static_assert(offsetof(HWGodSelectorEntryWidget_SetSelected, bSelected) == 0x000000, "Member 'HWGodSelectorEntryWidget_SetSelected::bSelected' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.GetAssociatedGodItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodSelectorEntryWidget_GetAssociatedGodItem final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_GetAssociatedGodItem) == 0x000008, "Wrong alignment on HWGodSelectorEntryWidget_GetAssociatedGodItem");
static_assert(sizeof(HWGodSelectorEntryWidget_GetAssociatedGodItem) == 0x000008, "Wrong size on HWGodSelectorEntryWidget_GetAssociatedGodItem");
static_assert(offsetof(HWGodSelectorEntryWidget_GetAssociatedGodItem, ReturnValue) == 0x000000, "Member 'HWGodSelectorEntryWidget_GetAssociatedGodItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.IsEntryDisabled
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_IsEntryDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_IsEntryDisabled) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_IsEntryDisabled");
static_assert(sizeof(HWGodSelectorEntryWidget_IsEntryDisabled) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_IsEntryDisabled");
static_assert(offsetof(HWGodSelectorEntryWidget_IsEntryDisabled, ReturnValue) == 0x000000, "Member 'HWGodSelectorEntryWidget_IsEntryDisabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorEntryWidget.IsEntrySelected
// 0x0001 (0x0001 - 0x0000)
struct HWGodSelectorEntryWidget_IsEntrySelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorEntryWidget_IsEntrySelected) == 0x000001, "Wrong alignment on HWGodSelectorEntryWidget_IsEntrySelected");
static_assert(sizeof(HWGodSelectorEntryWidget_IsEntrySelected) == 0x000001, "Wrong size on HWGodSelectorEntryWidget_IsEntrySelected");
static_assert(offsetof(HWGodSelectorEntryWidget_IsEntrySelected, ReturnValue) == 0x000000, "Member 'HWGodSelectorEntryWidget_IsEntrySelected::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyBoosterEntryWidget.HandleBoosterItemDisplaySelected
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected) == 0x000008, "Wrong alignment on HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected");
static_assert(sizeof(HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected) == 0x000010, "Wrong size on HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected");
static_assert(offsetof(HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected, EntryWidget) == 0x000000, "Member 'HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected, InventoryItem) == 0x000008, "Member 'HWDraftLobbyBoosterEntryWidget_HandleBoosterItemDisplaySelected::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyBoosterEntryWidget.IsBoosterApplied
// 0x0001 (0x0001 - 0x0000)
struct HWDraftLobbyBoosterEntryWidget_IsBoosterApplied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyBoosterEntryWidget_IsBoosterApplied) == 0x000001, "Wrong alignment on HWDraftLobbyBoosterEntryWidget_IsBoosterApplied");
static_assert(sizeof(HWDraftLobbyBoosterEntryWidget_IsBoosterApplied) == 0x000001, "Wrong size on HWDraftLobbyBoosterEntryWidget_IsBoosterApplied");
static_assert(offsetof(HWDraftLobbyBoosterEntryWidget_IsBoosterApplied, ReturnValue) == 0x000000, "Member 'HWDraftLobbyBoosterEntryWidget_IsBoosterApplied::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyBoosterPopupWidget.HandleOnBoosterClicked
// 0x0010 (0x0010 - 0x0000)
struct HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked final
{
public:
	class UHWDraftLobbyBoosterEntryWidget*        EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked) == 0x000008, "Wrong alignment on HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked");
static_assert(sizeof(HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked) == 0x000010, "Wrong size on HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked");
static_assert(offsetof(HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked, EntryWidget) == 0x000000, "Member 'HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked, InventoryItem) == 0x000008, "Member 'HWDraftLobbyBoosterPopupWidget_HandleOnBoosterClicked::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyBoosterPopupWidget.HandleOnOrderSuccess
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess) == 0x000008, "Wrong alignment on HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess");
static_assert(sizeof(HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess) == 0x000008, "Wrong size on HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess");
static_assert(offsetof(HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess, StoreItem) == 0x000000, "Member 'HWDraftLobbyBoosterPopupWidget_HandleOnOrderSuccess::StoreItem' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyActiveTaskDisplayEntryWidget.SetDraftTask
// 0x0060 (0x0060 - 0x0000)
struct HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask final
{
public:
	struct FDraftTask                             DraftTask;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompleteTask;                                   // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnemyTask;                                      // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalTask;                                      // 0x005A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask) == 0x000008, "Wrong alignment on HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask");
static_assert(sizeof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask) == 0x000060, "Wrong size on HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask, DraftTask) == 0x000000, "Member 'HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask::DraftTask' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask, PlayerName) == 0x000048, "Member 'HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask::PlayerName' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask, bIsCompleteTask) == 0x000058, "Member 'HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask::bIsCompleteTask' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask, bIsEnemyTask) == 0x000059, "Member 'HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask::bIsEnemyTask' has a wrong offset!");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask, bIsLocalTask) == 0x00005A, "Member 'HWDraftLobbyActiveTaskDisplayEntryWidget_SetDraftTask::bIsLocalTask' has a wrong offset!");

// Function HemingwayUI.HWDraftLobbyActiveTaskDisplayWidget.SetDraftActor
// 0x0008 (0x0008 - 0x0000)
struct HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor final
{
public:
	class ADraftReplicatedActor*                  InDraftActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor) == 0x000008, "Wrong alignment on HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor");
static_assert(sizeof(HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor) == 0x000008, "Wrong size on HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor");
static_assert(offsetof(HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor, InDraftActor) == 0x000000, "Member 'HWDraftLobbyActiveTaskDisplayWidget_SetDraftActor::InDraftActor' has a wrong offset!");

// Function HemingwayUI.HWAnimatedProgressBar.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct HWAnimatedProgressBar_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAnimatedProgressBar_GetPercent) == 0x000004, "Wrong alignment on HWAnimatedProgressBar_GetPercent");
static_assert(sizeof(HWAnimatedProgressBar_GetPercent) == 0x000004, "Wrong size on HWAnimatedProgressBar_GetPercent");
static_assert(offsetof(HWAnimatedProgressBar_GetPercent, ReturnValue) == 0x000000, "Member 'HWAnimatedProgressBar_GetPercent::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWAnimatedProgressBar.OnProgressBarPercentChanged
// 0x0004 (0x0004 - 0x0000)
struct HWAnimatedProgressBar_OnProgressBarPercentChanged final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAnimatedProgressBar_OnProgressBarPercentChanged) == 0x000004, "Wrong alignment on HWAnimatedProgressBar_OnProgressBarPercentChanged");
static_assert(sizeof(HWAnimatedProgressBar_OnProgressBarPercentChanged) == 0x000004, "Wrong size on HWAnimatedProgressBar_OnProgressBarPercentChanged");
static_assert(offsetof(HWAnimatedProgressBar_OnProgressBarPercentChanged, InPercent) == 0x000000, "Member 'HWAnimatedProgressBar_OnProgressBarPercentChanged::InPercent' has a wrong offset!");

// Function HemingwayUI.HWAnimatedProgressBar.SetGainedProgressDisplay
// 0x0008 (0x0008 - 0x0000)
struct HWAnimatedProgressBar_SetGainedProgressDisplay final
{
public:
	int32                                         GainedProgress;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShow;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAnimatedProgressBar_SetGainedProgressDisplay) == 0x000004, "Wrong alignment on HWAnimatedProgressBar_SetGainedProgressDisplay");
static_assert(sizeof(HWAnimatedProgressBar_SetGainedProgressDisplay) == 0x000008, "Wrong size on HWAnimatedProgressBar_SetGainedProgressDisplay");
static_assert(offsetof(HWAnimatedProgressBar_SetGainedProgressDisplay, GainedProgress) == 0x000000, "Member 'HWAnimatedProgressBar_SetGainedProgressDisplay::GainedProgress' has a wrong offset!");
static_assert(offsetof(HWAnimatedProgressBar_SetGainedProgressDisplay, bShow) == 0x000004, "Member 'HWAnimatedProgressBar_SetGainedProgressDisplay::bShow' has a wrong offset!");

// Function HemingwayUI.HWAnimatedProgressBar.SetPercent
// 0x0008 (0x0008 - 0x0000)
struct HWAnimatedProgressBar_SetPercent final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWAnimatedProgressBar_SetPercent) == 0x000004, "Wrong alignment on HWAnimatedProgressBar_SetPercent");
static_assert(sizeof(HWAnimatedProgressBar_SetPercent) == 0x000008, "Wrong size on HWAnimatedProgressBar_SetPercent");
static_assert(offsetof(HWAnimatedProgressBar_SetPercent, InPercent) == 0x000000, "Member 'HWAnimatedProgressBar_SetPercent::InPercent' has a wrong offset!");
static_assert(offsetof(HWAnimatedProgressBar_SetPercent, bAnimate) == 0x000004, "Member 'HWAnimatedProgressBar_SetPercent::bAnimate' has a wrong offset!");

// Function HemingwayUI.HWAnimatedProgressBar.IsAnimating
// 0x0001 (0x0001 - 0x0000)
struct HWAnimatedProgressBar_IsAnimating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWAnimatedProgressBar_IsAnimating) == 0x000001, "Wrong alignment on HWAnimatedProgressBar_IsAnimating");
static_assert(sizeof(HWAnimatedProgressBar_IsAnimating) == 0x000001, "Wrong size on HWAnimatedProgressBar_IsAnimating");
static_assert(offsetof(HWAnimatedProgressBar_IsAnimating, ReturnValue) == 0x000000, "Member 'HWAnimatedProgressBar_IsAnimating::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenGodIconWidget.UpdateDraftCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWLoadingScreenGodIconWidget_UpdateDraftCharacter final
{
public:
	const class UHWCharacterItem*                 Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenGodIconWidget_UpdateDraftCharacter) == 0x000008, "Wrong alignment on HWLoadingScreenGodIconWidget_UpdateDraftCharacter");
static_assert(sizeof(HWLoadingScreenGodIconWidget_UpdateDraftCharacter) == 0x000008, "Wrong size on HWLoadingScreenGodIconWidget_UpdateDraftCharacter");
static_assert(offsetof(HWLoadingScreenGodIconWidget_UpdateDraftCharacter, Character) == 0x000000, "Member 'HWLoadingScreenGodIconWidget_UpdateDraftCharacter::Character' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenGodIconWidget.GetDraftCharacter
// 0x0008 (0x0008 - 0x0000)
struct HWLoadingScreenGodIconWidget_GetDraftCharacter final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenGodIconWidget_GetDraftCharacter) == 0x000008, "Wrong alignment on HWLoadingScreenGodIconWidget_GetDraftCharacter");
static_assert(sizeof(HWLoadingScreenGodIconWidget_GetDraftCharacter) == 0x000008, "Wrong size on HWLoadingScreenGodIconWidget_GetDraftCharacter");
static_assert(offsetof(HWLoadingScreenGodIconWidget_GetDraftCharacter, ReturnValue) == 0x000000, "Member 'HWLoadingScreenGodIconWidget_GetDraftCharacter::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenGodIconWidget.IsFriendly
// 0x0001 (0x0001 - 0x0000)
struct HWLoadingScreenGodIconWidget_IsFriendly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenGodIconWidget_IsFriendly) == 0x000001, "Wrong alignment on HWLoadingScreenGodIconWidget_IsFriendly");
static_assert(sizeof(HWLoadingScreenGodIconWidget_IsFriendly) == 0x000001, "Wrong size on HWLoadingScreenGodIconWidget_IsFriendly");
static_assert(offsetof(HWLoadingScreenGodIconWidget_IsFriendly, ReturnValue) == 0x000000, "Member 'HWLoadingScreenGodIconWidget_IsFriendly::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.AddedPlayerEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWLoadingScreenWidget_AddedPlayerEntryWidget final
{
public:
	class UHWPlayerCardWidget*                    AddedWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_AddedPlayerEntryWidget) == 0x000008, "Wrong alignment on HWLoadingScreenWidget_AddedPlayerEntryWidget");
static_assert(sizeof(HWLoadingScreenWidget_AddedPlayerEntryWidget) == 0x000008, "Wrong size on HWLoadingScreenWidget_AddedPlayerEntryWidget");
static_assert(offsetof(HWLoadingScreenWidget_AddedPlayerEntryWidget, AddedWidget) == 0x000000, "Member 'HWLoadingScreenWidget_AddedPlayerEntryWidget::AddedWidget' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.CreateWidgetsForCharacters
// 0x0028 (0x0028 - 0x0000)
struct HWLoadingScreenWidget_CreateWidgetsForCharacters final
{
public:
	TArray<struct FHWLoadingScreenTestData>       FriendlyCharactersItems;                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHWLoadingScreenTestData>       EnemyCharactersItems;                              // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerIndex;                                  // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalTeamId;                                       // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_CreateWidgetsForCharacters) == 0x000008, "Wrong alignment on HWLoadingScreenWidget_CreateWidgetsForCharacters");
static_assert(sizeof(HWLoadingScreenWidget_CreateWidgetsForCharacters) == 0x000028, "Wrong size on HWLoadingScreenWidget_CreateWidgetsForCharacters");
static_assert(offsetof(HWLoadingScreenWidget_CreateWidgetsForCharacters, FriendlyCharactersItems) == 0x000000, "Member 'HWLoadingScreenWidget_CreateWidgetsForCharacters::FriendlyCharactersItems' has a wrong offset!");
static_assert(offsetof(HWLoadingScreenWidget_CreateWidgetsForCharacters, EnemyCharactersItems) == 0x000010, "Member 'HWLoadingScreenWidget_CreateWidgetsForCharacters::EnemyCharactersItems' has a wrong offset!");
static_assert(offsetof(HWLoadingScreenWidget_CreateWidgetsForCharacters, LocalPlayerIndex) == 0x000020, "Member 'HWLoadingScreenWidget_CreateWidgetsForCharacters::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(HWLoadingScreenWidget_CreateWidgetsForCharacters, LocalTeamId) == 0x000024, "Member 'HWLoadingScreenWidget_CreateWidgetsForCharacters::LocalTeamId' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.RemovedPlayerEntryWidget
// 0x0008 (0x0008 - 0x0000)
struct HWLoadingScreenWidget_RemovedPlayerEntryWidget final
{
public:
	class UHWPlayerCardWidget*                    RemovedWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_RemovedPlayerEntryWidget) == 0x000008, "Wrong alignment on HWLoadingScreenWidget_RemovedPlayerEntryWidget");
static_assert(sizeof(HWLoadingScreenWidget_RemovedPlayerEntryWidget) == 0x000008, "Wrong size on HWLoadingScreenWidget_RemovedPlayerEntryWidget");
static_assert(offsetof(HWLoadingScreenWidget_RemovedPlayerEntryWidget, RemovedWidget) == 0x000000, "Member 'HWLoadingScreenWidget_RemovedPlayerEntryWidget::RemovedWidget' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.UpdateGameModeDisplay
// 0x00F8 (0x00F8 - 0x0000)
struct HWLoadingScreenWidget_UpdateGameModeDisplay final
{
public:
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_UpdateGameModeDisplay) == 0x000008, "Wrong alignment on HWLoadingScreenWidget_UpdateGameModeDisplay");
static_assert(sizeof(HWLoadingScreenWidget_UpdateGameModeDisplay) == 0x0000F8, "Wrong size on HWLoadingScreenWidget_UpdateGameModeDisplay");
static_assert(offsetof(HWLoadingScreenWidget_UpdateGameModeDisplay, GameModeInfo) == 0x000000, "Member 'HWLoadingScreenWidget_UpdateGameModeDisplay::GameModeInfo' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.UpdateLocalTeamId
// 0x0004 (0x0004 - 0x0000)
struct HWLoadingScreenWidget_UpdateLocalTeamId final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_UpdateLocalTeamId) == 0x000004, "Wrong alignment on HWLoadingScreenWidget_UpdateLocalTeamId");
static_assert(sizeof(HWLoadingScreenWidget_UpdateLocalTeamId) == 0x000004, "Wrong size on HWLoadingScreenWidget_UpdateLocalTeamId");
static_assert(offsetof(HWLoadingScreenWidget_UpdateLocalTeamId, TeamId) == 0x000000, "Member 'HWLoadingScreenWidget_UpdateLocalTeamId::TeamId' has a wrong offset!");

// Function HemingwayUI.HWLoadingScreenWidget.UpdateTeamMembers
// 0x0008 (0x0008 - 0x0000)
struct HWLoadingScreenWidget_UpdateTeamMembers final
{
public:
	class AHWTeamState*                           Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLoadingScreenWidget_UpdateTeamMembers) == 0x000008, "Wrong alignment on HWLoadingScreenWidget_UpdateTeamMembers");
static_assert(sizeof(HWLoadingScreenWidget_UpdateTeamMembers) == 0x000008, "Wrong size on HWLoadingScreenWidget_UpdateTeamMembers");
static_assert(offsetof(HWLoadingScreenWidget_UpdateTeamMembers, Team) == 0x000000, "Member 'HWLoadingScreenWidget_UpdateTeamMembers::Team' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.DisplayCurrentValuePercent
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_DisplayCurrentValuePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_DisplayCurrentValuePercent) == 0x000004, "Wrong alignment on HWGainLossProgressBar_DisplayCurrentValuePercent");
static_assert(sizeof(HWGainLossProgressBar_DisplayCurrentValuePercent) == 0x000004, "Wrong size on HWGainLossProgressBar_DisplayCurrentValuePercent");
static_assert(offsetof(HWGainLossProgressBar_DisplayCurrentValuePercent, Percent) == 0x000000, "Member 'HWGainLossProgressBar_DisplayCurrentValuePercent::Percent' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.DisplayGainPercent
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_DisplayGainPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_DisplayGainPercent) == 0x000004, "Wrong alignment on HWGainLossProgressBar_DisplayGainPercent");
static_assert(sizeof(HWGainLossProgressBar_DisplayGainPercent) == 0x000004, "Wrong size on HWGainLossProgressBar_DisplayGainPercent");
static_assert(offsetof(HWGainLossProgressBar_DisplayGainPercent, Percent) == 0x000000, "Member 'HWGainLossProgressBar_DisplayGainPercent::Percent' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.DisplayLossPercent
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_DisplayLossPercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_DisplayLossPercent) == 0x000004, "Wrong alignment on HWGainLossProgressBar_DisplayLossPercent");
static_assert(sizeof(HWGainLossProgressBar_DisplayLossPercent) == 0x000004, "Wrong size on HWGainLossProgressBar_DisplayLossPercent");
static_assert(offsetof(HWGainLossProgressBar_DisplayLossPercent, Percent) == 0x000000, "Member 'HWGainLossProgressBar_DisplayLossPercent::Percent' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.PercentRageConfigChanged
// 0x0054 (0x0054 - 0x0000)
struct HWGainLossProgressBar_PercentRageConfigChanged final
{
public:
	float                                         NewPercent;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGainLossBarPercentRangeConfig       NewPercentConfig;                                  // 0x0004(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_PercentRageConfigChanged) == 0x000004, "Wrong alignment on HWGainLossProgressBar_PercentRageConfigChanged");
static_assert(sizeof(HWGainLossProgressBar_PercentRageConfigChanged) == 0x000054, "Wrong size on HWGainLossProgressBar_PercentRageConfigChanged");
static_assert(offsetof(HWGainLossProgressBar_PercentRageConfigChanged, NewPercent) == 0x000000, "Member 'HWGainLossProgressBar_PercentRageConfigChanged::NewPercent' has a wrong offset!");
static_assert(offsetof(HWGainLossProgressBar_PercentRageConfigChanged, NewPercentConfig) == 0x000004, "Member 'HWGainLossProgressBar_PercentRageConfigChanged::NewPercentConfig' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetCurrentValue
// 0x0008 (0x0008 - 0x0000)
struct HWGainLossProgressBar_SetCurrentValue final
{
public:
	float                                         NewCurrentValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGainLossProgressBar_SetCurrentValue) == 0x000004, "Wrong alignment on HWGainLossProgressBar_SetCurrentValue");
static_assert(sizeof(HWGainLossProgressBar_SetCurrentValue) == 0x000008, "Wrong size on HWGainLossProgressBar_SetCurrentValue");
static_assert(offsetof(HWGainLossProgressBar_SetCurrentValue, NewCurrentValue) == 0x000000, "Member 'HWGainLossProgressBar_SetCurrentValue::NewCurrentValue' has a wrong offset!");
static_assert(offsetof(HWGainLossProgressBar_SetCurrentValue, bAnimate) == 0x000004, "Member 'HWGainLossProgressBar_SetCurrentValue::bAnimate' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetGainEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWGainLossProgressBar_SetGainEnabled final
{
public:
	bool                                          bGainIsEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_SetGainEnabled) == 0x000001, "Wrong alignment on HWGainLossProgressBar_SetGainEnabled");
static_assert(sizeof(HWGainLossProgressBar_SetGainEnabled) == 0x000001, "Wrong size on HWGainLossProgressBar_SetGainEnabled");
static_assert(offsetof(HWGainLossProgressBar_SetGainEnabled, bGainIsEnabled) == 0x000000, "Member 'HWGainLossProgressBar_SetGainEnabled::bGainIsEnabled' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetLossEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWGainLossProgressBar_SetLossEnabled final
{
public:
	bool                                          bLossIsEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_SetLossEnabled) == 0x000001, "Wrong alignment on HWGainLossProgressBar_SetLossEnabled");
static_assert(sizeof(HWGainLossProgressBar_SetLossEnabled) == 0x000001, "Wrong size on HWGainLossProgressBar_SetLossEnabled");
static_assert(offsetof(HWGainLossProgressBar_SetLossEnabled, bLossIsEnabled) == 0x000000, "Member 'HWGainLossProgressBar_SetLossEnabled::bLossIsEnabled' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_SetMaxValue final
{
public:
	float                                         NewMaxValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_SetMaxValue) == 0x000004, "Wrong alignment on HWGainLossProgressBar_SetMaxValue");
static_assert(sizeof(HWGainLossProgressBar_SetMaxValue) == 0x000004, "Wrong size on HWGainLossProgressBar_SetMaxValue");
static_assert(offsetof(HWGainLossProgressBar_SetMaxValue, NewMaxValue) == 0x000000, "Member 'HWGainLossProgressBar_SetMaxValue::NewMaxValue' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetPercentRangeConfigs
// 0x0010 (0x0010 - 0x0000)
struct HWGainLossProgressBar_SetPercentRangeConfigs final
{
public:
	TArray<struct FHWGainLossBarPercentRangeConfig> NewPercentRangeConfigs;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_SetPercentRangeConfigs) == 0x000008, "Wrong alignment on HWGainLossProgressBar_SetPercentRangeConfigs");
static_assert(sizeof(HWGainLossProgressBar_SetPercentRangeConfigs) == 0x000010, "Wrong size on HWGainLossProgressBar_SetPercentRangeConfigs");
static_assert(offsetof(HWGainLossProgressBar_SetPercentRangeConfigs, NewPercentRangeConfigs) == 0x000000, "Member 'HWGainLossProgressBar_SetPercentRangeConfigs::NewPercentRangeConfigs' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.SetValues
// 0x000C (0x000C - 0x0000)
struct HWGainLossProgressBar_SetValues final
{
public:
	float                                         NewCurrentValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewMaxValue;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGainLossProgressBar_SetValues) == 0x000004, "Wrong alignment on HWGainLossProgressBar_SetValues");
static_assert(sizeof(HWGainLossProgressBar_SetValues) == 0x00000C, "Wrong size on HWGainLossProgressBar_SetValues");
static_assert(offsetof(HWGainLossProgressBar_SetValues, NewCurrentValue) == 0x000000, "Member 'HWGainLossProgressBar_SetValues::NewCurrentValue' has a wrong offset!");
static_assert(offsetof(HWGainLossProgressBar_SetValues, NewMaxValue) == 0x000004, "Member 'HWGainLossProgressBar_SetValues::NewMaxValue' has a wrong offset!");
static_assert(offsetof(HWGainLossProgressBar_SetValues, bAnimate) == 0x000008, "Member 'HWGainLossProgressBar_SetValues::bAnimate' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_GetCurrentValue) == 0x000004, "Wrong alignment on HWGainLossProgressBar_GetCurrentValue");
static_assert(sizeof(HWGainLossProgressBar_GetCurrentValue) == 0x000004, "Wrong size on HWGainLossProgressBar_GetCurrentValue");
static_assert(offsetof(HWGainLossProgressBar_GetCurrentValue, ReturnValue) == 0x000000, "Member 'HWGainLossProgressBar_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct HWGainLossProgressBar_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_GetMaxValue) == 0x000004, "Wrong alignment on HWGainLossProgressBar_GetMaxValue");
static_assert(sizeof(HWGainLossProgressBar_GetMaxValue) == 0x000004, "Wrong size on HWGainLossProgressBar_GetMaxValue");
static_assert(offsetof(HWGainLossProgressBar_GetMaxValue, ReturnValue) == 0x000000, "Member 'HWGainLossProgressBar_GetMaxValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.IsRunningGainAnimation
// 0x0001 (0x0001 - 0x0000)
struct HWGainLossProgressBar_IsRunningGainAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_IsRunningGainAnimation) == 0x000001, "Wrong alignment on HWGainLossProgressBar_IsRunningGainAnimation");
static_assert(sizeof(HWGainLossProgressBar_IsRunningGainAnimation) == 0x000001, "Wrong size on HWGainLossProgressBar_IsRunningGainAnimation");
static_assert(offsetof(HWGainLossProgressBar_IsRunningGainAnimation, ReturnValue) == 0x000000, "Member 'HWGainLossProgressBar_IsRunningGainAnimation::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGainLossProgressBar.IsRunningLossAnimation
// 0x0001 (0x0001 - 0x0000)
struct HWGainLossProgressBar_IsRunningLossAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGainLossProgressBar_IsRunningLossAnimation) == 0x000001, "Wrong alignment on HWGainLossProgressBar_IsRunningLossAnimation");
static_assert(sizeof(HWGainLossProgressBar_IsRunningLossAnimation) == 0x000001, "Wrong size on HWGainLossProgressBar_IsRunningLossAnimation");
static_assert(offsetof(HWGainLossProgressBar_IsRunningLossAnimation, ReturnValue) == 0x000000, "Member 'HWGainLossProgressBar_IsRunningLossAnimation::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.DisplayPage
// 0x0028 (0x0028 - 0x0000)
struct HWRadialMenuWidget_DisplayPage final
{
public:
	struct FHWRadialMenuPage                      MenuPage;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_DisplayPage) == 0x000008, "Wrong alignment on HWRadialMenuWidget_DisplayPage");
static_assert(sizeof(HWRadialMenuWidget_DisplayPage) == 0x000028, "Wrong size on HWRadialMenuWidget_DisplayPage");
static_assert(offsetof(HWRadialMenuWidget_DisplayPage, MenuPage) == 0x000000, "Member 'HWRadialMenuWidget_DisplayPage::MenuPage' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.GetIsRadialActive
// 0x0001 (0x0001 - 0x0000)
struct HWRadialMenuWidget_GetIsRadialActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_GetIsRadialActive) == 0x000001, "Wrong alignment on HWRadialMenuWidget_GetIsRadialActive");
static_assert(sizeof(HWRadialMenuWidget_GetIsRadialActive) == 0x000001, "Wrong size on HWRadialMenuWidget_GetIsRadialActive");
static_assert(offsetof(HWRadialMenuWidget_GetIsRadialActive, ReturnValue) == 0x000000, "Member 'HWRadialMenuWidget_GetIsRadialActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.HandleRadialEntryHovered
// 0x0050 (0x0050 - 0x0000)
struct HWRadialMenuWidget_HandleRadialEntryHovered final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_HandleRadialEntryHovered) == 0x000008, "Wrong alignment on HWRadialMenuWidget_HandleRadialEntryHovered");
static_assert(sizeof(HWRadialMenuWidget_HandleRadialEntryHovered) == 0x000050, "Wrong size on HWRadialMenuWidget_HandleRadialEntryHovered");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntryHovered, EntryWidget) == 0x000000, "Member 'HWRadialMenuWidget_HandleRadialEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntryHovered, EntryData) == 0x000008, "Member 'HWRadialMenuWidget_HandleRadialEntryHovered::EntryData' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.HandleRadialEntrySelected
// 0x0050 (0x0050 - 0x0000)
struct HWRadialMenuWidget_HandleRadialEntrySelected final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_HandleRadialEntrySelected) == 0x000008, "Wrong alignment on HWRadialMenuWidget_HandleRadialEntrySelected");
static_assert(sizeof(HWRadialMenuWidget_HandleRadialEntrySelected) == 0x000050, "Wrong size on HWRadialMenuWidget_HandleRadialEntrySelected");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntrySelected, EntryWidget) == 0x000000, "Member 'HWRadialMenuWidget_HandleRadialEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntrySelected, EntryData) == 0x000008, "Member 'HWRadialMenuWidget_HandleRadialEntrySelected::EntryData' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.HandleRadialEntryUnhovered
// 0x0050 (0x0050 - 0x0000)
struct HWRadialMenuWidget_HandleRadialEntryUnhovered final
{
public:
	class UHWRadialMenuEntryWidget*               EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_HandleRadialEntryUnhovered) == 0x000008, "Wrong alignment on HWRadialMenuWidget_HandleRadialEntryUnhovered");
static_assert(sizeof(HWRadialMenuWidget_HandleRadialEntryUnhovered) == 0x000050, "Wrong size on HWRadialMenuWidget_HandleRadialEntryUnhovered");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWRadialMenuWidget_HandleRadialEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWRadialMenuWidget_HandleRadialEntryUnhovered, EntryData) == 0x000008, "Member 'HWRadialMenuWidget_HandleRadialEntryUnhovered::EntryData' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.SetRadialActive
// 0x0001 (0x0001 - 0x0000)
struct HWRadialMenuWidget_SetRadialActive final
{
public:
	bool                                          bActivateRadial;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_SetRadialActive) == 0x000001, "Wrong alignment on HWRadialMenuWidget_SetRadialActive");
static_assert(sizeof(HWRadialMenuWidget_SetRadialActive) == 0x000001, "Wrong size on HWRadialMenuWidget_SetRadialActive");
static_assert(offsetof(HWRadialMenuWidget_SetRadialActive, bActivateRadial) == 0x000000, "Member 'HWRadialMenuWidget_SetRadialActive::bActivateRadial' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.SetRadialActiveDelay
// 0x0004 (0x0004 - 0x0000)
struct HWRadialMenuWidget_SetRadialActiveDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_SetRadialActiveDelay) == 0x000004, "Wrong alignment on HWRadialMenuWidget_SetRadialActiveDelay");
static_assert(sizeof(HWRadialMenuWidget_SetRadialActiveDelay) == 0x000004, "Wrong size on HWRadialMenuWidget_SetRadialActiveDelay");
static_assert(offsetof(HWRadialMenuWidget_SetRadialActiveDelay, Delay) == 0x000000, "Member 'HWRadialMenuWidget_SetRadialActiveDelay::Delay' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.SetSectionText
// 0x0018 (0x0018 - 0x0000)
struct HWRadialMenuWidget_SetSectionText final
{
public:
	class FText                                   InSectionText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_SetSectionText) == 0x000008, "Wrong alignment on HWRadialMenuWidget_SetSectionText");
static_assert(sizeof(HWRadialMenuWidget_SetSectionText) == 0x000018, "Wrong size on HWRadialMenuWidget_SetSectionText");
static_assert(offsetof(HWRadialMenuWidget_SetSectionText, InSectionText) == 0x000000, "Member 'HWRadialMenuWidget_SetSectionText::InSectionText' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.SetTitleText
// 0x0018 (0x0018 - 0x0000)
struct HWRadialMenuWidget_SetTitleText final
{
public:
	class FText                                   InTitleText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_SetTitleText) == 0x000008, "Wrong alignment on HWRadialMenuWidget_SetTitleText");
static_assert(sizeof(HWRadialMenuWidget_SetTitleText) == 0x000018, "Wrong size on HWRadialMenuWidget_SetTitleText");
static_assert(offsetof(HWRadialMenuWidget_SetTitleText, InTitleText) == 0x000000, "Member 'HWRadialMenuWidget_SetTitleText::InTitleText' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.UpdateCachedGamepadPosition
// 0x0010 (0x0010 - 0x0000)
struct HWRadialMenuWidget_UpdateCachedGamepadPosition final
{
public:
	struct FVector2D                              GamepadPosition;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_UpdateCachedGamepadPosition) == 0x000008, "Wrong alignment on HWRadialMenuWidget_UpdateCachedGamepadPosition");
static_assert(sizeof(HWRadialMenuWidget_UpdateCachedGamepadPosition) == 0x000010, "Wrong size on HWRadialMenuWidget_UpdateCachedGamepadPosition");
static_assert(offsetof(HWRadialMenuWidget_UpdateCachedGamepadPosition, GamepadPosition) == 0x000000, "Member 'HWRadialMenuWidget_UpdateCachedGamepadPosition::GamepadPosition' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.UpdateCursorRotation
// 0x0004 (0x0004 - 0x0000)
struct HWRadialMenuWidget_UpdateCursorRotation final
{
public:
	float                                         RotationDeg;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_UpdateCursorRotation) == 0x000004, "Wrong alignment on HWRadialMenuWidget_UpdateCursorRotation");
static_assert(sizeof(HWRadialMenuWidget_UpdateCursorRotation) == 0x000004, "Wrong size on HWRadialMenuWidget_UpdateCursorRotation");
static_assert(offsetof(HWRadialMenuWidget_UpdateCursorRotation, RotationDeg) == 0x000000, "Member 'HWRadialMenuWidget_UpdateCursorRotation::RotationDeg' has a wrong offset!");

// Function HemingwayUI.HWRadialMenuWidget.UpdateIsInDeadzone
// 0x0001 (0x0001 - 0x0000)
struct HWRadialMenuWidget_UpdateIsInDeadzone final
{
public:
	bool                                          bIsInDeadzone;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRadialMenuWidget_UpdateIsInDeadzone) == 0x000001, "Wrong alignment on HWRadialMenuWidget_UpdateIsInDeadzone");
static_assert(sizeof(HWRadialMenuWidget_UpdateIsInDeadzone) == 0x000001, "Wrong size on HWRadialMenuWidget_UpdateIsInDeadzone");
static_assert(offsetof(HWRadialMenuWidget_UpdateIsInDeadzone, bIsInDeadzone) == 0x000000, "Member 'HWRadialMenuWidget_UpdateIsInDeadzone::bIsInDeadzone' has a wrong offset!");

// Function HemingwayUI.HWProgressBar.GetFillDynamicMaterial
// 0x0008 (0x0008 - 0x0000)
struct HWProgressBar_GetFillDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWProgressBar_GetFillDynamicMaterial) == 0x000008, "Wrong alignment on HWProgressBar_GetFillDynamicMaterial");
static_assert(sizeof(HWProgressBar_GetFillDynamicMaterial) == 0x000008, "Wrong size on HWProgressBar_GetFillDynamicMaterial");
static_assert(offsetof(HWProgressBar_GetFillDynamicMaterial, ReturnValue) == 0x000000, "Member 'HWProgressBar_GetFillDynamicMaterial::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWProgressBar.SetColorStyleTag
// 0x0008 (0x0008 - 0x0000)
struct HWProgressBar_SetColorStyleTag final
{
public:
	struct FGameplayTag                           NewStyleTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWProgressBar_SetColorStyleTag) == 0x000004, "Wrong alignment on HWProgressBar_SetColorStyleTag");
static_assert(sizeof(HWProgressBar_SetColorStyleTag) == 0x000008, "Wrong size on HWProgressBar_SetColorStyleTag");
static_assert(offsetof(HWProgressBar_SetColorStyleTag, NewStyleTag) == 0x000000, "Member 'HWProgressBar_SetColorStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.GetLevelBreakpoints
// 0x0010 (0x0010 - 0x0000)
struct HWSegmentedProgressBar_GetLevelBreakpoints final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_GetLevelBreakpoints) == 0x000008, "Wrong alignment on HWSegmentedProgressBar_GetLevelBreakpoints");
static_assert(sizeof(HWSegmentedProgressBar_GetLevelBreakpoints) == 0x000010, "Wrong size on HWSegmentedProgressBar_GetLevelBreakpoints");
static_assert(offsetof(HWSegmentedProgressBar_GetLevelBreakpoints, ReturnValue) == 0x000000, "Member 'HWSegmentedProgressBar_GetLevelBreakpoints::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.SetLevel
// 0x0004 (0x0004 - 0x0000)
struct HWSegmentedProgressBar_SetLevel final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_SetLevel) == 0x000004, "Wrong alignment on HWSegmentedProgressBar_SetLevel");
static_assert(sizeof(HWSegmentedProgressBar_SetLevel) == 0x000004, "Wrong size on HWSegmentedProgressBar_SetLevel");
static_assert(offsetof(HWSegmentedProgressBar_SetLevel, InLevel) == 0x000000, "Member 'HWSegmentedProgressBar_SetLevel::InLevel' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.SetLevelBreakpoint
// 0x0004 (0x0004 - 0x0000)
struct HWSegmentedProgressBar_SetLevelBreakpoint final
{
public:
	float                                         InPercent;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_SetLevelBreakpoint) == 0x000004, "Wrong alignment on HWSegmentedProgressBar_SetLevelBreakpoint");
static_assert(sizeof(HWSegmentedProgressBar_SetLevelBreakpoint) == 0x000004, "Wrong size on HWSegmentedProgressBar_SetLevelBreakpoint");
static_assert(offsetof(HWSegmentedProgressBar_SetLevelBreakpoint, InPercent) == 0x000000, "Member 'HWSegmentedProgressBar_SetLevelBreakpoint::InPercent' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.SetLevelBreakpointPadding
// 0x0008 (0x0008 - 0x0000)
struct HWSegmentedProgressBar_SetLevelBreakpointPadding final
{
public:
	int32                                         InLevel;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPercent;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_SetLevelBreakpointPadding) == 0x000004, "Wrong alignment on HWSegmentedProgressBar_SetLevelBreakpointPadding");
static_assert(sizeof(HWSegmentedProgressBar_SetLevelBreakpointPadding) == 0x000008, "Wrong size on HWSegmentedProgressBar_SetLevelBreakpointPadding");
static_assert(offsetof(HWSegmentedProgressBar_SetLevelBreakpointPadding, InLevel) == 0x000000, "Member 'HWSegmentedProgressBar_SetLevelBreakpointPadding::InLevel' has a wrong offset!");
static_assert(offsetof(HWSegmentedProgressBar_SetLevelBreakpointPadding, InPercent) == 0x000004, "Member 'HWSegmentedProgressBar_SetLevelBreakpointPadding::InPercent' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.SetLevelBreakpointPaddings
// 0x0010 (0x0010 - 0x0000)
struct HWSegmentedProgressBar_SetLevelBreakpointPaddings final
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_SetLevelBreakpointPaddings) == 0x000008, "Wrong alignment on HWSegmentedProgressBar_SetLevelBreakpointPaddings");
static_assert(sizeof(HWSegmentedProgressBar_SetLevelBreakpointPaddings) == 0x000010, "Wrong size on HWSegmentedProgressBar_SetLevelBreakpointPaddings");
static_assert(offsetof(HWSegmentedProgressBar_SetLevelBreakpointPaddings, Values) == 0x000000, "Member 'HWSegmentedProgressBar_SetLevelBreakpointPaddings::Values' has a wrong offset!");

// Function HemingwayUI.HWSegmentedProgressBar.SetLevelBreakpoints
// 0x0010 (0x0010 - 0x0000)
struct HWSegmentedProgressBar_SetLevelBreakpoints final
{
public:
	TArray<float>                                 Values;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSegmentedProgressBar_SetLevelBreakpoints) == 0x000008, "Wrong alignment on HWSegmentedProgressBar_SetLevelBreakpoints");
static_assert(sizeof(HWSegmentedProgressBar_SetLevelBreakpoints) == 0x000010, "Wrong size on HWSegmentedProgressBar_SetLevelBreakpoints");
static_assert(offsetof(HWSegmentedProgressBar_SetLevelBreakpoints, Values) == 0x000000, "Member 'HWSegmentedProgressBar_SetLevelBreakpoints::Values' has a wrong offset!");

// Function HemingwayUI.HWSlidingPanelWidget.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct HWSlidingPanelWidget_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSlidingPanelWidget_IsOpen) == 0x000001, "Wrong alignment on HWSlidingPanelWidget_IsOpen");
static_assert(sizeof(HWSlidingPanelWidget_IsOpen) == 0x000001, "Wrong size on HWSlidingPanelWidget_IsOpen");
static_assert(offsetof(HWSlidingPanelWidget_IsOpen, ReturnValue) == 0x000000, "Member 'HWSlidingPanelWidget_IsOpen::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabBarEntryWidget.GetCTADisplayWidget
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarEntryWidget_GetCTADisplayWidget final
{
public:
	class UHWCallToActionDisplayWidget*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarEntryWidget_GetCTADisplayWidget) == 0x000008, "Wrong alignment on HWTabBarEntryWidget_GetCTADisplayWidget");
static_assert(sizeof(HWTabBarEntryWidget_GetCTADisplayWidget) == 0x000008, "Wrong size on HWTabBarEntryWidget_GetCTADisplayWidget");
static_assert(offsetof(HWTabBarEntryWidget_GetCTADisplayWidget, ReturnValue) == 0x000000, "Member 'HWTabBarEntryWidget_GetCTADisplayWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDragArea.SetAssociatedWidgetLayout
// 0x0040 (0x0040 - 0x0000)
struct HWDragArea_SetAssociatedWidgetLayout final
{
public:
	struct FAnchorData                            NewLayout;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDragArea_SetAssociatedWidgetLayout) == 0x000008, "Wrong alignment on HWDragArea_SetAssociatedWidgetLayout");
static_assert(sizeof(HWDragArea_SetAssociatedWidgetLayout) == 0x000040, "Wrong size on HWDragArea_SetAssociatedWidgetLayout");
static_assert(offsetof(HWDragArea_SetAssociatedWidgetLayout, NewLayout) == 0x000000, "Member 'HWDragArea_SetAssociatedWidgetLayout::NewLayout' has a wrong offset!");

// Function HemingwayUI.HWDragArea.SetIsDragging
// 0x0001 (0x0001 - 0x0000)
struct HWDragArea_SetIsDragging final
{
public:
	bool                                          bNewIsDragging;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDragArea_SetIsDragging) == 0x000001, "Wrong alignment on HWDragArea_SetIsDragging");
static_assert(sizeof(HWDragArea_SetIsDragging) == 0x000001, "Wrong size on HWDragArea_SetIsDragging");
static_assert(offsetof(HWDragArea_SetIsDragging, bNewIsDragging) == 0x000000, "Member 'HWDragArea_SetIsDragging::bNewIsDragging' has a wrong offset!");

// Function HemingwayUI.HWDragArea.GetAssociatedCanvasSlot
// 0x0008 (0x0008 - 0x0000)
struct HWDragArea_GetAssociatedCanvasSlot final
{
public:
	class UCanvasPanelSlot*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDragArea_GetAssociatedCanvasSlot) == 0x000008, "Wrong alignment on HWDragArea_GetAssociatedCanvasSlot");
static_assert(sizeof(HWDragArea_GetAssociatedCanvasSlot) == 0x000008, "Wrong size on HWDragArea_GetAssociatedCanvasSlot");
static_assert(offsetof(HWDragArea_GetAssociatedCanvasSlot, ReturnValue) == 0x000000, "Member 'HWDragArea_GetAssociatedCanvasSlot::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDragArea.GetAssociatedWidgetLayout
// 0x0040 (0x0040 - 0x0000)
struct HWDragArea_GetAssociatedWidgetLayout final
{
public:
	struct FAnchorData                            ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDragArea_GetAssociatedWidgetLayout) == 0x000008, "Wrong alignment on HWDragArea_GetAssociatedWidgetLayout");
static_assert(sizeof(HWDragArea_GetAssociatedWidgetLayout) == 0x000040, "Wrong size on HWDragArea_GetAssociatedWidgetLayout");
static_assert(offsetof(HWDragArea_GetAssociatedWidgetLayout, ReturnValue) == 0x000000, "Member 'HWDragArea_GetAssociatedWidgetLayout::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDragArea.GetIsDragging
// 0x0001 (0x0001 - 0x0000)
struct HWDragArea_GetIsDragging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDragArea_GetIsDragging) == 0x000001, "Wrong alignment on HWDragArea_GetIsDragging");
static_assert(sizeof(HWDragArea_GetIsDragging) == 0x000001, "Wrong size on HWDragArea_GetIsDragging");
static_assert(offsetof(HWDragArea_GetIsDragging, ReturnValue) == 0x000000, "Member 'HWDragArea_GetIsDragging::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.ClearCTAs
// 0x0001 (0x0001 - 0x0000)
struct HWTabBarWidget_ClearCTAs final
{
public:
	bool                                          bRequireItemsOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_ClearCTAs) == 0x000001, "Wrong alignment on HWTabBarWidget_ClearCTAs");
static_assert(sizeof(HWTabBarWidget_ClearCTAs) == 0x000001, "Wrong size on HWTabBarWidget_ClearCTAs");
static_assert(offsetof(HWTabBarWidget_ClearCTAs, bRequireItemsOnly) == 0x000000, "Member 'HWTabBarWidget_ClearCTAs::bRequireItemsOnly' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.GetTabData
// 0x0010 (0x0010 - 0x0000)
struct HWTabBarWidget_GetTabData final
{
public:
	TArray<struct FHWTabEntryData>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_GetTabData) == 0x000008, "Wrong alignment on HWTabBarWidget_GetTabData");
static_assert(sizeof(HWTabBarWidget_GetTabData) == 0x000010, "Wrong size on HWTabBarWidget_GetTabData");
static_assert(offsetof(HWTabBarWidget_GetTabData, ReturnValue) == 0x000000, "Member 'HWTabBarWidget_GetTabData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.HandleBooleanAppSettingUpdated
// 0x000C (0x000C - 0x0000)
struct HWTabBarWidget_HandleBooleanAppSettingUpdated final
{
public:
	struct FGameplayTag                           AppSettingTag;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValue;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_HandleBooleanAppSettingUpdated) == 0x000004, "Wrong alignment on HWTabBarWidget_HandleBooleanAppSettingUpdated");
static_assert(sizeof(HWTabBarWidget_HandleBooleanAppSettingUpdated) == 0x00000C, "Wrong size on HWTabBarWidget_HandleBooleanAppSettingUpdated");
static_assert(offsetof(HWTabBarWidget_HandleBooleanAppSettingUpdated, AppSettingTag) == 0x000000, "Member 'HWTabBarWidget_HandleBooleanAppSettingUpdated::AppSettingTag' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_HandleBooleanAppSettingUpdated, bValue) == 0x000008, "Member 'HWTabBarWidget_HandleBooleanAppSettingUpdated::bValue' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.IsTabActive
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_IsTabActive final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_IsTabActive) == 0x000004, "Wrong alignment on HWTabBarWidget_IsTabActive");
static_assert(sizeof(HWTabBarWidget_IsTabActive) == 0x000008, "Wrong size on HWTabBarWidget_IsTabActive");
static_assert(offsetof(HWTabBarWidget_IsTabActive, TabIndex) == 0x000000, "Member 'HWTabBarWidget_IsTabActive::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_IsTabActive, ReturnValue) == 0x000004, "Member 'HWTabBarWidget_IsTabActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.ListenToCTAsByItem
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_ListenToCTAsByItem final
{
public:
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_ListenToCTAsByItem) == 0x000008, "Wrong alignment on HWTabBarWidget_ListenToCTAsByItem");
static_assert(sizeof(HWTabBarWidget_ListenToCTAsByItem) == 0x000008, "Wrong size on HWTabBarWidget_ListenToCTAsByItem");
static_assert(offsetof(HWTabBarWidget_ListenToCTAsByItem, InventoryItem) == 0x000000, "Member 'HWTabBarWidget_ListenToCTAsByItem::InventoryItem' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.ListenToCTAsByItemPtr
// 0x0028 (0x0028 - 0x0000)
struct HWTabBarWidget_ListenToCTAsByItemPtr final
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        InventoryItemPtr;                                  // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_ListenToCTAsByItemPtr) == 0x000008, "Wrong alignment on HWTabBarWidget_ListenToCTAsByItemPtr");
static_assert(sizeof(HWTabBarWidget_ListenToCTAsByItemPtr) == 0x000028, "Wrong size on HWTabBarWidget_ListenToCTAsByItemPtr");
static_assert(offsetof(HWTabBarWidget_ListenToCTAsByItemPtr, InventoryItemPtr) == 0x000000, "Member 'HWTabBarWidget_ListenToCTAsByItemPtr::InventoryItemPtr' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.SetActiveTab
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_SetActiveTab final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_SetActiveTab) == 0x000004, "Wrong alignment on HWTabBarWidget_SetActiveTab");
static_assert(sizeof(HWTabBarWidget_SetActiveTab) == 0x000008, "Wrong size on HWTabBarWidget_SetActiveTab");
static_assert(offsetof(HWTabBarWidget_SetActiveTab, TabIndex) == 0x000000, "Member 'HWTabBarWidget_SetActiveTab::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_SetActiveTab, Cause) == 0x000004, "Member 'HWTabBarWidget_SetActiveTab::Cause' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.SetActiveTabByWidget
// 0x0010 (0x0010 - 0x0000)
struct HWTabBarWidget_SetActiveTabByWidget final
{
public:
	class UHWWidget*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWTabChangeCause                             Cause;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_SetActiveTabByWidget) == 0x000008, "Wrong alignment on HWTabBarWidget_SetActiveTabByWidget");
static_assert(sizeof(HWTabBarWidget_SetActiveTabByWidget) == 0x000010, "Wrong size on HWTabBarWidget_SetActiveTabByWidget");
static_assert(offsetof(HWTabBarWidget_SetActiveTabByWidget, Widget) == 0x000000, "Member 'HWTabBarWidget_SetActiveTabByWidget::Widget' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_SetActiveTabByWidget, Cause) == 0x000008, "Member 'HWTabBarWidget_SetActiveTabByWidget::Cause' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.SetTabDisabled
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_SetTabDisabled final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDisabled;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_SetTabDisabled) == 0x000004, "Wrong alignment on HWTabBarWidget_SetTabDisabled");
static_assert(sizeof(HWTabBarWidget_SetTabDisabled) == 0x000008, "Wrong size on HWTabBarWidget_SetTabDisabled");
static_assert(offsetof(HWTabBarWidget_SetTabDisabled, TabIndex) == 0x000000, "Member 'HWTabBarWidget_SetTabDisabled::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_SetTabDisabled, bIsDisabled) == 0x000004, "Member 'HWTabBarWidget_SetTabDisabled::bIsDisabled' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.SetTabHidden
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_SetTabHidden final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTabBarWidget_SetTabHidden) == 0x000004, "Wrong alignment on HWTabBarWidget_SetTabHidden");
static_assert(sizeof(HWTabBarWidget_SetTabHidden) == 0x000008, "Wrong size on HWTabBarWidget_SetTabHidden");
static_assert(offsetof(HWTabBarWidget_SetTabHidden, TabIndex) == 0x000000, "Member 'HWTabBarWidget_SetTabHidden::TabIndex' has a wrong offset!");
static_assert(offsetof(HWTabBarWidget_SetTabHidden, bHidden) == 0x000004, "Member 'HWTabBarWidget_SetTabHidden::bHidden' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.SetViewSwitcher
// 0x0008 (0x0008 - 0x0000)
struct HWTabBarWidget_SetViewSwitcher final
{
public:
	class UHWWidgetSwitcher*                      InViewSwitcher;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_SetViewSwitcher) == 0x000008, "Wrong alignment on HWTabBarWidget_SetViewSwitcher");
static_assert(sizeof(HWTabBarWidget_SetViewSwitcher) == 0x000008, "Wrong size on HWTabBarWidget_SetViewSwitcher");
static_assert(offsetof(HWTabBarWidget_SetViewSwitcher, InViewSwitcher) == 0x000000, "Member 'HWTabBarWidget_SetViewSwitcher::InViewSwitcher' has a wrong offset!");

// Function HemingwayUI.HWTabBarWidget.UpdateInputCallouts
// 0x0001 (0x0001 - 0x0000)
struct HWTabBarWidget_UpdateInputCallouts final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabBarWidget_UpdateInputCallouts) == 0x000001, "Wrong alignment on HWTabBarWidget_UpdateInputCallouts");
static_assert(sizeof(HWTabBarWidget_UpdateInputCallouts) == 0x000001, "Wrong size on HWTabBarWidget_UpdateInputCallouts");
static_assert(offsetof(HWTabBarWidget_UpdateInputCallouts, bShouldShow) == 0x000000, "Member 'HWTabBarWidget_UpdateInputCallouts::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWTabEntryWidget.GetTabViewTag
// 0x0008 (0x0008 - 0x0000)
struct HWTabEntryWidget_GetTabViewTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTabEntryWidget_GetTabViewTag) == 0x000004, "Wrong alignment on HWTabEntryWidget_GetTabViewTag");
static_assert(sizeof(HWTabEntryWidget_GetTabViewTag) == 0x000008, "Wrong size on HWTabEntryWidget_GetTabViewTag");
static_assert(offsetof(HWTabEntryWidget_GetTabViewTag, ReturnValue) == 0x000000, "Member 'HWTabEntryWidget_GetTabViewTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWOrderAcquisitionWidget.HandleItemSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct HWOrderAcquisitionWidget_HandleItemSelectionChanged final
{
public:
	const class UObject*                          Data;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWOrderAcquisitionWidget_HandleItemSelectionChanged) == 0x000008, "Wrong alignment on HWOrderAcquisitionWidget_HandleItemSelectionChanged");
static_assert(sizeof(HWOrderAcquisitionWidget_HandleItemSelectionChanged) == 0x000008, "Wrong size on HWOrderAcquisitionWidget_HandleItemSelectionChanged");
static_assert(offsetof(HWOrderAcquisitionWidget_HandleItemSelectionChanged, Data) == 0x000000, "Member 'HWOrderAcquisitionWidget_HandleItemSelectionChanged::Data' has a wrong offset!");

// Function HemingwayUI.HWOrderAcquisitionWidget.OnDisplayOrder
// 0x0008 (0x0008 - 0x0000)
struct HWOrderAcquisitionWidget_OnDisplayOrder final
{
public:
	const class URHOrder*                         Order;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWOrderAcquisitionWidget_OnDisplayOrder) == 0x000008, "Wrong alignment on HWOrderAcquisitionWidget_OnDisplayOrder");
static_assert(sizeof(HWOrderAcquisitionWidget_OnDisplayOrder) == 0x000008, "Wrong size on HWOrderAcquisitionWidget_OnDisplayOrder");
static_assert(offsetof(HWOrderAcquisitionWidget_OnDisplayOrder, Order) == 0x000000, "Member 'HWOrderAcquisitionWidget_OnDisplayOrder::Order' has a wrong offset!");

// Function HemingwayUI.HWOrderAcquisitionWidget.OnDisplaySelectedItem
// 0x0008 (0x0008 - 0x0000)
struct HWOrderAcquisitionWidget_OnDisplaySelectedItem final
{
public:
	const class UOrderItemData*                   SelectedOrderItem;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWOrderAcquisitionWidget_OnDisplaySelectedItem) == 0x000008, "Wrong alignment on HWOrderAcquisitionWidget_OnDisplaySelectedItem");
static_assert(sizeof(HWOrderAcquisitionWidget_OnDisplaySelectedItem) == 0x000008, "Wrong size on HWOrderAcquisitionWidget_OnDisplaySelectedItem");
static_assert(offsetof(HWOrderAcquisitionWidget_OnDisplaySelectedItem, SelectedOrderItem) == 0x000000, "Member 'HWOrderAcquisitionWidget_OnDisplaySelectedItem::SelectedOrderItem' has a wrong offset!");

// Function HemingwayUI.HWOrderAcquisitionWidget.GetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct HWOrderAcquisitionWidget_GetHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWOrderAcquisitionWidget_GetHeaderText) == 0x000008, "Wrong alignment on HWOrderAcquisitionWidget_GetHeaderText");
static_assert(sizeof(HWOrderAcquisitionWidget_GetHeaderText) == 0x000018, "Wrong size on HWOrderAcquisitionWidget_GetHeaderText");
static_assert(offsetof(HWOrderAcquisitionWidget_GetHeaderText, ReturnValue) == 0x000000, "Member 'HWOrderAcquisitionWidget_GetHeaderText::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDataDisplay_CharacterStats.GetCharacterStatDisplayData
// 0x00B0 (0x00B0 - 0x0000)
struct HWDataDisplay_CharacterStats_GetCharacterStatDisplayData final
{
public:
	struct FGameplayTag                           StatTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWDataDisplay_CharacterStat           OutDisplayData;                                    // 0x0008(0x00A0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDataDisplay_CharacterStats_GetCharacterStatDisplayData) == 0x000008, "Wrong alignment on HWDataDisplay_CharacterStats_GetCharacterStatDisplayData");
static_assert(sizeof(HWDataDisplay_CharacterStats_GetCharacterStatDisplayData) == 0x0000B0, "Wrong size on HWDataDisplay_CharacterStats_GetCharacterStatDisplayData");
static_assert(offsetof(HWDataDisplay_CharacterStats_GetCharacterStatDisplayData, StatTag) == 0x000000, "Member 'HWDataDisplay_CharacterStats_GetCharacterStatDisplayData::StatTag' has a wrong offset!");
static_assert(offsetof(HWDataDisplay_CharacterStats_GetCharacterStatDisplayData, OutDisplayData) == 0x000008, "Member 'HWDataDisplay_CharacterStats_GetCharacterStatDisplayData::OutDisplayData' has a wrong offset!");
static_assert(offsetof(HWDataDisplay_CharacterStats_GetCharacterStatDisplayData, ReturnValue) == 0x0000A8, "Member 'HWDataDisplay_CharacterStats_GetCharacterStatDisplayData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDataDisplay_CharacterStats.IsReady
// 0x0001 (0x0001 - 0x0000)
struct HWDataDisplay_CharacterStats_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDataDisplay_CharacterStats_IsReady) == 0x000001, "Wrong alignment on HWDataDisplay_CharacterStats_IsReady");
static_assert(sizeof(HWDataDisplay_CharacterStats_IsReady) == 0x000001, "Wrong size on HWDataDisplay_CharacterStats_IsReady");
static_assert(offsetof(HWDataDisplay_CharacterStats_IsReady, ReturnValue) == 0x000000, "Member 'HWDataDisplay_CharacterStats_IsReady::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDataDisplay_Keywords.GetKeywordDisplayData
// 0x0100 (0x0100 - 0x0000)
struct HWDataDisplay_Keywords_GetKeywordDisplayData final
{
public:
	struct FGameplayTag                           KeywordTag;                                        // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWDataDisplay_Keyword                 OutDisplayData;                                    // 0x0008(0x00F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWDataDisplay_Keywords_GetKeywordDisplayData) == 0x000008, "Wrong alignment on HWDataDisplay_Keywords_GetKeywordDisplayData");
static_assert(sizeof(HWDataDisplay_Keywords_GetKeywordDisplayData) == 0x000100, "Wrong size on HWDataDisplay_Keywords_GetKeywordDisplayData");
static_assert(offsetof(HWDataDisplay_Keywords_GetKeywordDisplayData, KeywordTag) == 0x000000, "Member 'HWDataDisplay_Keywords_GetKeywordDisplayData::KeywordTag' has a wrong offset!");
static_assert(offsetof(HWDataDisplay_Keywords_GetKeywordDisplayData, OutDisplayData) == 0x000008, "Member 'HWDataDisplay_Keywords_GetKeywordDisplayData::OutDisplayData' has a wrong offset!");
static_assert(offsetof(HWDataDisplay_Keywords_GetKeywordDisplayData, ReturnValue) == 0x0000F8, "Member 'HWDataDisplay_Keywords_GetKeywordDisplayData::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWDataDisplay_Keywords.IsReady
// 0x0001 (0x0001 - 0x0000)
struct HWDataDisplay_Keywords_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWDataDisplay_Keywords_IsReady) == 0x000001, "Wrong alignment on HWDataDisplay_Keywords_IsReady");
static_assert(sizeof(HWDataDisplay_Keywords_IsReady) == 0x000001, "Wrong size on HWDataDisplay_Keywords_IsReady");
static_assert(offsetof(HWDataDisplay_Keywords_IsReady, ReturnValue) == 0x000000, "Member 'HWDataDisplay_Keywords_IsReady::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.GetCosmeticMaterialsName
// 0x0018 (0x0018 - 0x0000)
struct HWModelPlayer_GetCosmeticMaterialsName final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_GetCosmeticMaterialsName) == 0x000008, "Wrong alignment on HWModelPlayer_GetCosmeticMaterialsName");
static_assert(sizeof(HWModelPlayer_GetCosmeticMaterialsName) == 0x000018, "Wrong size on HWModelPlayer_GetCosmeticMaterialsName");
static_assert(offsetof(HWModelPlayer_GetCosmeticMaterialsName, CollectionType) == 0x000000, "Member 'HWModelPlayer_GetCosmeticMaterialsName::CollectionType' has a wrong offset!");
static_assert(offsetof(HWModelPlayer_GetCosmeticMaterialsName, ReturnValue) == 0x000008, "Member 'HWModelPlayer_GetCosmeticMaterialsName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.GetCosmeticNiagaraSystemName
// 0x0018 (0x0018 - 0x0000)
struct HWModelPlayer_GetCosmeticNiagaraSystemName final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_GetCosmeticNiagaraSystemName) == 0x000008, "Wrong alignment on HWModelPlayer_GetCosmeticNiagaraSystemName");
static_assert(sizeof(HWModelPlayer_GetCosmeticNiagaraSystemName) == 0x000018, "Wrong size on HWModelPlayer_GetCosmeticNiagaraSystemName");
static_assert(offsetof(HWModelPlayer_GetCosmeticNiagaraSystemName, CollectionType) == 0x000000, "Member 'HWModelPlayer_GetCosmeticNiagaraSystemName::CollectionType' has a wrong offset!");
static_assert(offsetof(HWModelPlayer_GetCosmeticNiagaraSystemName, ReturnValue) == 0x000008, "Member 'HWModelPlayer_GetCosmeticNiagaraSystemName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.GetCosmeticSkeletalMeshName
// 0x0018 (0x0018 - 0x0000)
struct HWModelPlayer_GetCosmeticSkeletalMeshName final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_GetCosmeticSkeletalMeshName) == 0x000008, "Wrong alignment on HWModelPlayer_GetCosmeticSkeletalMeshName");
static_assert(sizeof(HWModelPlayer_GetCosmeticSkeletalMeshName) == 0x000018, "Wrong size on HWModelPlayer_GetCosmeticSkeletalMeshName");
static_assert(offsetof(HWModelPlayer_GetCosmeticSkeletalMeshName, CollectionType) == 0x000000, "Member 'HWModelPlayer_GetCosmeticSkeletalMeshName::CollectionType' has a wrong offset!");
static_assert(offsetof(HWModelPlayer_GetCosmeticSkeletalMeshName, ReturnValue) == 0x000008, "Member 'HWModelPlayer_GetCosmeticSkeletalMeshName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.HandleMouseMoveRotation
// 0x0004 (0x0004 - 0x0000)
struct HWModelPlayer_HandleMouseMoveRotation final
{
public:
	float                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_HandleMouseMoveRotation) == 0x000004, "Wrong alignment on HWModelPlayer_HandleMouseMoveRotation");
static_assert(sizeof(HWModelPlayer_HandleMouseMoveRotation) == 0x000004, "Wrong size on HWModelPlayer_HandleMouseMoveRotation");
static_assert(offsetof(HWModelPlayer_HandleMouseMoveRotation, Direction) == 0x000000, "Member 'HWModelPlayer_HandleMouseMoveRotation::Direction' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.HandleRotatePreviewActionHeld
// 0x0008 (0x0008 - 0x0000)
struct HWModelPlayer_HandleRotatePreviewActionHeld final
{
public:
	float                                         HoldPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Direction;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_HandleRotatePreviewActionHeld) == 0x000004, "Wrong alignment on HWModelPlayer_HandleRotatePreviewActionHeld");
static_assert(sizeof(HWModelPlayer_HandleRotatePreviewActionHeld) == 0x000008, "Wrong size on HWModelPlayer_HandleRotatePreviewActionHeld");
static_assert(offsetof(HWModelPlayer_HandleRotatePreviewActionHeld, HoldPercent) == 0x000000, "Member 'HWModelPlayer_HandleRotatePreviewActionHeld::HoldPercent' has a wrong offset!");
static_assert(offsetof(HWModelPlayer_HandleRotatePreviewActionHeld, Direction) == 0x000004, "Member 'HWModelPlayer_HandleRotatePreviewActionHeld::Direction' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.LoadItemSkinAssets
// 0x0008 (0x0008 - 0x0000)
struct HWModelPlayer_LoadItemSkinAssets final
{
public:
	class UHWCollectionItem*                      CollectionItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_LoadItemSkinAssets) == 0x000008, "Wrong alignment on HWModelPlayer_LoadItemSkinAssets");
static_assert(sizeof(HWModelPlayer_LoadItemSkinAssets) == 0x000008, "Wrong size on HWModelPlayer_LoadItemSkinAssets");
static_assert(offsetof(HWModelPlayer_LoadItemSkinAssets, CollectionItem) == 0x000000, "Member 'HWModelPlayer_LoadItemSkinAssets::CollectionItem' has a wrong offset!");

// Function HemingwayUI.HWModelPlayer.LoadSelectedCharacterSkins
// 0x0008 (0x0008 - 0x0000)
struct HWModelPlayer_LoadSelectedCharacterSkins final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWModelPlayer_LoadSelectedCharacterSkins) == 0x000008, "Wrong alignment on HWModelPlayer_LoadSelectedCharacterSkins");
static_assert(sizeof(HWModelPlayer_LoadSelectedCharacterSkins) == 0x000008, "Wrong size on HWModelPlayer_LoadSelectedCharacterSkins");
static_assert(offsetof(HWModelPlayer_LoadSelectedCharacterSkins, GodItem) == 0x000000, "Member 'HWModelPlayer_LoadSelectedCharacterSkins::GodItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.HandlePipRequestSelect
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemPipContainerWidget_HandlePipRequestSelect final
{
public:
	class UHWStoreItemDisplayWidget*              PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_HandlePipRequestSelect) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_HandlePipRequestSelect");
static_assert(sizeof(HWStoreItemPipContainerWidget_HandlePipRequestSelect) == 0x000008, "Wrong size on HWStoreItemPipContainerWidget_HandlePipRequestSelect");
static_assert(offsetof(HWStoreItemPipContainerWidget_HandlePipRequestSelect, PipWidget) == 0x000000, "Member 'HWStoreItemPipContainerWidget_HandlePipRequestSelect::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.PipWidgetAdded
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemPipContainerWidget_PipWidgetAdded final
{
public:
	class UHWStoreItemDisplayWidget*              PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_PipWidgetAdded) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_PipWidgetAdded");
static_assert(sizeof(HWStoreItemPipContainerWidget_PipWidgetAdded) == 0x000008, "Wrong size on HWStoreItemPipContainerWidget_PipWidgetAdded");
static_assert(offsetof(HWStoreItemPipContainerWidget_PipWidgetAdded, PipWidget) == 0x000000, "Member 'HWStoreItemPipContainerWidget_PipWidgetAdded::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.PipWidgetRemoved
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemPipContainerWidget_PipWidgetRemoved final
{
public:
	class UHWStoreItemDisplayWidget*              PipWidget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_PipWidgetRemoved) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_PipWidgetRemoved");
static_assert(sizeof(HWStoreItemPipContainerWidget_PipWidgetRemoved) == 0x000008, "Wrong size on HWStoreItemPipContainerWidget_PipWidgetRemoved");
static_assert(offsetof(HWStoreItemPipContainerWidget_PipWidgetRemoved, PipWidget) == 0x000000, "Member 'HWStoreItemPipContainerWidget_PipWidgetRemoved::PipWidget' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.SelectFromVariantSkinItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemPipContainerWidget_SelectFromVariantSkinItem final
{
public:
	const class UHWSkinItem*                      InVariantSkinItem;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_SelectFromVariantSkinItem) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_SelectFromVariantSkinItem");
static_assert(sizeof(HWStoreItemPipContainerWidget_SelectFromVariantSkinItem) == 0x000008, "Wrong size on HWStoreItemPipContainerWidget_SelectFromVariantSkinItem");
static_assert(offsetof(HWStoreItemPipContainerWidget_SelectFromVariantSkinItem, InVariantSkinItem) == 0x000000, "Member 'HWStoreItemPipContainerWidget_SelectFromVariantSkinItem::InVariantSkinItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.SelectStoreItem
// 0x0008 (0x0008 - 0x0000)
struct HWStoreItemPipContainerWidget_SelectStoreItem final
{
public:
	class URHStoreItem*                           InStoreItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_SelectStoreItem) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_SelectStoreItem");
static_assert(sizeof(HWStoreItemPipContainerWidget_SelectStoreItem) == 0x000008, "Wrong size on HWStoreItemPipContainerWidget_SelectStoreItem");
static_assert(offsetof(HWStoreItemPipContainerWidget_SelectStoreItem, InStoreItem) == 0x000000, "Member 'HWStoreItemPipContainerWidget_SelectStoreItem::InStoreItem' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.SetFromSkinVariants
// 0x0010 (0x0010 - 0x0000)
struct HWStoreItemPipContainerWidget_SetFromSkinVariants final
{
public:
	const class UHWSkinItem*                      InBaseSkinItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayableOnly;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWStoreItemPipContainerWidget_SetFromSkinVariants) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_SetFromSkinVariants");
static_assert(sizeof(HWStoreItemPipContainerWidget_SetFromSkinVariants) == 0x000010, "Wrong size on HWStoreItemPipContainerWidget_SetFromSkinVariants");
static_assert(offsetof(HWStoreItemPipContainerWidget_SetFromSkinVariants, InBaseSkinItem) == 0x000000, "Member 'HWStoreItemPipContainerWidget_SetFromSkinVariants::InBaseSkinItem' has a wrong offset!");
static_assert(offsetof(HWStoreItemPipContainerWidget_SetFromSkinVariants, bPlayableOnly) == 0x000008, "Member 'HWStoreItemPipContainerWidget_SetFromSkinVariants::bPlayableOnly' has a wrong offset!");

// Function HemingwayUI.HWStoreItemPipContainerWidget.SetStoreItems
// 0x0010 (0x0010 - 0x0000)
struct HWStoreItemPipContainerWidget_SetStoreItems final
{
public:
	TArray<class URHStoreItem*>                   InStoreItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWStoreItemPipContainerWidget_SetStoreItems) == 0x000008, "Wrong alignment on HWStoreItemPipContainerWidget_SetStoreItems");
static_assert(sizeof(HWStoreItemPipContainerWidget_SetStoreItems) == 0x000010, "Wrong size on HWStoreItemPipContainerWidget_SetStoreItems");
static_assert(offsetof(HWStoreItemPipContainerWidget_SetStoreItems, InStoreItems) == 0x000000, "Member 'HWStoreItemPipContainerWidget_SetStoreItems::InStoreItems' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.AddedJoiner
// 0x0008 (0x0008 - 0x0000)
struct HWMultiPromptWidget_AddedJoiner final
{
public:
	class UHWWidget*                              NewPrompt;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_AddedJoiner) == 0x000008, "Wrong alignment on HWMultiPromptWidget_AddedJoiner");
static_assert(sizeof(HWMultiPromptWidget_AddedJoiner) == 0x000008, "Wrong size on HWMultiPromptWidget_AddedJoiner");
static_assert(offsetof(HWMultiPromptWidget_AddedJoiner, NewPrompt) == 0x000000, "Member 'HWMultiPromptWidget_AddedJoiner::NewPrompt' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.AddedPrompt
// 0x0008 (0x0008 - 0x0000)
struct HWMultiPromptWidget_AddedPrompt final
{
public:
	class UHWSinglePromptWidget*                  NewPrompt;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_AddedPrompt) == 0x000008, "Wrong alignment on HWMultiPromptWidget_AddedPrompt");
static_assert(sizeof(HWMultiPromptWidget_AddedPrompt) == 0x000008, "Wrong size on HWMultiPromptWidget_AddedPrompt");
static_assert(offsetof(HWMultiPromptWidget_AddedPrompt, NewPrompt) == 0x000000, "Member 'HWMultiPromptWidget_AddedPrompt::NewPrompt' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.DisplayText
// 0x0018 (0x0018 - 0x0000)
struct HWMultiPromptWidget_DisplayText final
{
public:
	class FText                                   TextToDisplay;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_DisplayText) == 0x000008, "Wrong alignment on HWMultiPromptWidget_DisplayText");
static_assert(sizeof(HWMultiPromptWidget_DisplayText) == 0x000018, "Wrong size on HWMultiPromptWidget_DisplayText");
static_assert(offsetof(HWMultiPromptWidget_DisplayText, TextToDisplay) == 0x000000, "Member 'HWMultiPromptWidget_DisplayText::TextToDisplay' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.HandlePlayerInputRebuilt
// 0x0001 (0x0001 - 0x0000)
struct HWMultiPromptWidget_HandlePlayerInputRebuilt final
{
public:
	EHWInputHardwareType                          CurrentHardwareType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_HandlePlayerInputRebuilt) == 0x000001, "Wrong alignment on HWMultiPromptWidget_HandlePlayerInputRebuilt");
static_assert(sizeof(HWMultiPromptWidget_HandlePlayerInputRebuilt) == 0x000001, "Wrong size on HWMultiPromptWidget_HandlePlayerInputRebuilt");
static_assert(offsetof(HWMultiPromptWidget_HandlePlayerInputRebuilt, CurrentHardwareType) == 0x000000, "Member 'HWMultiPromptWidget_HandlePlayerInputRebuilt::CurrentHardwareType' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWMultiPromptWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWMultiPromptWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWMultiPromptWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWMultiPromptWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWMultiPromptWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWMultiPromptWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.OnHoldActionProgressed
// 0x0004 (0x0004 - 0x0000)
struct HWMultiPromptWidget_OnHoldActionProgressed final
{
public:
	float                                         HoldPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_OnHoldActionProgressed) == 0x000004, "Wrong alignment on HWMultiPromptWidget_OnHoldActionProgressed");
static_assert(sizeof(HWMultiPromptWidget_OnHoldActionProgressed) == 0x000004, "Wrong size on HWMultiPromptWidget_OnHoldActionProgressed");
static_assert(offsetof(HWMultiPromptWidget_OnHoldActionProgressed, HoldPercent) == 0x000000, "Member 'HWMultiPromptWidget_OnHoldActionProgressed::HoldPercent' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.OnInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWMultiPromptWidget_OnInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_OnInputTypeChanged) == 0x000001, "Wrong alignment on HWMultiPromptWidget_OnInputTypeChanged");
static_assert(sizeof(HWMultiPromptWidget_OnInputTypeChanged) == 0x000001, "Wrong size on HWMultiPromptWidget_OnInputTypeChanged");
static_assert(offsetof(HWMultiPromptWidget_OnInputTypeChanged, NewState) == 0x000000, "Member 'HWMultiPromptWidget_OnInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.SetInputByAction
// 0x0008 (0x0008 - 0x0000)
struct HWMultiPromptWidget_SetInputByAction final
{
public:
	const class UInputAction*                     InAction;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_SetInputByAction) == 0x000008, "Wrong alignment on HWMultiPromptWidget_SetInputByAction");
static_assert(sizeof(HWMultiPromptWidget_SetInputByAction) == 0x000008, "Wrong size on HWMultiPromptWidget_SetInputByAction");
static_assert(offsetof(HWMultiPromptWidget_SetInputByAction, InAction) == 0x000000, "Member 'HWMultiPromptWidget_SetInputByAction::InAction' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.SetInputByKeys
// 0x0010 (0x0010 - 0x0000)
struct HWMultiPromptWidget_SetInputByKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_SetInputByKeys) == 0x000008, "Wrong alignment on HWMultiPromptWidget_SetInputByKeys");
static_assert(sizeof(HWMultiPromptWidget_SetInputByKeys) == 0x000010, "Wrong size on HWMultiPromptWidget_SetInputByKeys");
static_assert(offsetof(HWMultiPromptWidget_SetInputByKeys, Keys) == 0x000000, "Member 'HWMultiPromptWidget_SetInputByKeys::Keys' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.SetInputByTag
// 0x0008 (0x0008 - 0x0000)
struct HWMultiPromptWidget_SetInputByTag final
{
public:
	struct FGameplayTag                           NewTag;                                            // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_SetInputByTag) == 0x000004, "Wrong alignment on HWMultiPromptWidget_SetInputByTag");
static_assert(sizeof(HWMultiPromptWidget_SetInputByTag) == 0x000008, "Wrong size on HWMultiPromptWidget_SetInputByTag");
static_assert(offsetof(HWMultiPromptWidget_SetInputByTag, NewTag) == 0x000000, "Member 'HWMultiPromptWidget_SetInputByTag::NewTag' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.SetInputByTags
// 0x0010 (0x0010 - 0x0000)
struct HWMultiPromptWidget_SetInputByTags final
{
public:
	TArray<struct FGameplayTag>                   NewTags;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_SetInputByTags) == 0x000008, "Wrong alignment on HWMultiPromptWidget_SetInputByTags");
static_assert(sizeof(HWMultiPromptWidget_SetInputByTags) == 0x000010, "Wrong size on HWMultiPromptWidget_SetInputByTags");
static_assert(offsetof(HWMultiPromptWidget_SetInputByTags, NewTags) == 0x000000, "Member 'HWMultiPromptWidget_SetInputByTags::NewTags' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.TrackInputActions
// 0x0001 (0x0001 - 0x0000)
struct HWMultiPromptWidget_TrackInputActions final
{
public:
	bool                                          bTrack;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_TrackInputActions) == 0x000001, "Wrong alignment on HWMultiPromptWidget_TrackInputActions");
static_assert(sizeof(HWMultiPromptWidget_TrackInputActions) == 0x000001, "Wrong size on HWMultiPromptWidget_TrackInputActions");
static_assert(offsetof(HWMultiPromptWidget_TrackInputActions, bTrack) == 0x000000, "Member 'HWMultiPromptWidget_TrackInputActions::bTrack' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.UpdateOverrideText
// 0x0018 (0x0018 - 0x0000)
struct HWMultiPromptWidget_UpdateOverrideText final
{
public:
	class FText                                   Prompt;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_UpdateOverrideText) == 0x000008, "Wrong alignment on HWMultiPromptWidget_UpdateOverrideText");
static_assert(sizeof(HWMultiPromptWidget_UpdateOverrideText) == 0x000018, "Wrong size on HWMultiPromptWidget_UpdateOverrideText");
static_assert(offsetof(HWMultiPromptWidget_UpdateOverrideText, Prompt) == 0x000000, "Member 'HWMultiPromptWidget_UpdateOverrideText::Prompt' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.GetInputType
// 0x0001 (0x0001 - 0x0000)
struct HWMultiPromptWidget_GetInputType final
{
public:
	ERH_INPUT_STATE                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_GetInputType) == 0x000001, "Wrong alignment on HWMultiPromptWidget_GetInputType");
static_assert(sizeof(HWMultiPromptWidget_GetInputType) == 0x000001, "Wrong size on HWMultiPromptWidget_GetInputType");
static_assert(offsetof(HWMultiPromptWidget_GetInputType, ReturnValue) == 0x000000, "Member 'HWMultiPromptWidget_GetInputType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWMultiPromptWidget.GetPlayerInput
// 0x0008 (0x0008 - 0x0000)
struct HWMultiPromptWidget_GetPlayerInput final
{
public:
	class UHWEnhancedPlayerInput*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWMultiPromptWidget_GetPlayerInput) == 0x000008, "Wrong alignment on HWMultiPromptWidget_GetPlayerInput");
static_assert(sizeof(HWMultiPromptWidget_GetPlayerInput) == 0x000008, "Wrong size on HWMultiPromptWidget_GetPlayerInput");
static_assert(offsetof(HWMultiPromptWidget_GetPlayerInput, ReturnValue) == 0x000000, "Member 'HWMultiPromptWidget_GetPlayerInput::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.DisplayIconOnly
// 0x00D0 (0x00D0 - 0x0000)
struct HWSinglePromptWidget_DisplayIconOnly final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_DisplayIconOnly) == 0x000010, "Wrong alignment on HWSinglePromptWidget_DisplayIconOnly");
static_assert(sizeof(HWSinglePromptWidget_DisplayIconOnly) == 0x0000D0, "Wrong size on HWSinglePromptWidget_DisplayIconOnly");
static_assert(offsetof(HWSinglePromptWidget_DisplayIconOnly, Brush) == 0x000000, "Member 'HWSinglePromptWidget_DisplayIconOnly::Brush' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.DisplayKeyPressed
// 0x0001 (0x0001 - 0x0000)
struct HWSinglePromptWidget_DisplayKeyPressed final
{
public:
	bool                                          bIsPressed;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_DisplayKeyPressed) == 0x000001, "Wrong alignment on HWSinglePromptWidget_DisplayKeyPressed");
static_assert(sizeof(HWSinglePromptWidget_DisplayKeyPressed) == 0x000001, "Wrong size on HWSinglePromptWidget_DisplayKeyPressed");
static_assert(offsetof(HWSinglePromptWidget_DisplayKeyPressed, bIsPressed) == 0x000000, "Member 'HWSinglePromptWidget_DisplayKeyPressed::bIsPressed' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.DisplayKeyTextOnly
// 0x0018 (0x0018 - 0x0000)
struct HWSinglePromptWidget_DisplayKeyTextOnly final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_DisplayKeyTextOnly) == 0x000008, "Wrong alignment on HWSinglePromptWidget_DisplayKeyTextOnly");
static_assert(sizeof(HWSinglePromptWidget_DisplayKeyTextOnly) == 0x000018, "Wrong size on HWSinglePromptWidget_DisplayKeyTextOnly");
static_assert(offsetof(HWSinglePromptWidget_DisplayKeyTextOnly, Label) == 0x000000, "Member 'HWSinglePromptWidget_DisplayKeyTextOnly::Label' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.DisplayKeyWithBackground
// 0x00F0 (0x00F0 - 0x0000)
struct HWSinglePromptWidget_DisplayKeyWithBackground final
{
public:
	struct FSlateBrush                            Brush;                                             // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x00D0(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSinglePromptWidget_DisplayKeyWithBackground) == 0x000010, "Wrong alignment on HWSinglePromptWidget_DisplayKeyWithBackground");
static_assert(sizeof(HWSinglePromptWidget_DisplayKeyWithBackground) == 0x0000F0, "Wrong size on HWSinglePromptWidget_DisplayKeyWithBackground");
static_assert(offsetof(HWSinglePromptWidget_DisplayKeyWithBackground, Brush) == 0x000000, "Member 'HWSinglePromptWidget_DisplayKeyWithBackground::Brush' has a wrong offset!");
static_assert(offsetof(HWSinglePromptWidget_DisplayKeyWithBackground, Label) == 0x0000D0, "Member 'HWSinglePromptWidget_DisplayKeyWithBackground::Label' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.HandleKeyStateChanged
// 0x0020 (0x0020 - 0x0000)
struct HWSinglePromptWidget_HandleKeyStateChanged final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   InputEvent;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSinglePromptWidget_HandleKeyStateChanged) == 0x000008, "Wrong alignment on HWSinglePromptWidget_HandleKeyStateChanged");
static_assert(sizeof(HWSinglePromptWidget_HandleKeyStateChanged) == 0x000020, "Wrong size on HWSinglePromptWidget_HandleKeyStateChanged");
static_assert(offsetof(HWSinglePromptWidget_HandleKeyStateChanged, Key) == 0x000000, "Member 'HWSinglePromptWidget_HandleKeyStateChanged::Key' has a wrong offset!");
static_assert(offsetof(HWSinglePromptWidget_HandleKeyStateChanged, InputEvent) == 0x000018, "Member 'HWSinglePromptWidget_HandleKeyStateChanged::InputEvent' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.HandleSwapActionStateChanged
// 0x0018 (0x0018 - 0x0000)
struct HWSinglePromptWidget_HandleSwapActionStateChanged final
{
public:
	TArray<struct FKey>                           SwapKeys;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsSwapActionActive;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWSinglePromptWidget_HandleSwapActionStateChanged) == 0x000008, "Wrong alignment on HWSinglePromptWidget_HandleSwapActionStateChanged");
static_assert(sizeof(HWSinglePromptWidget_HandleSwapActionStateChanged) == 0x000018, "Wrong size on HWSinglePromptWidget_HandleSwapActionStateChanged");
static_assert(offsetof(HWSinglePromptWidget_HandleSwapActionStateChanged, SwapKeys) == 0x000000, "Member 'HWSinglePromptWidget_HandleSwapActionStateChanged::SwapKeys' has a wrong offset!");
static_assert(offsetof(HWSinglePromptWidget_HandleSwapActionStateChanged, bIsSwapActionActive) == 0x000010, "Member 'HWSinglePromptWidget_HandleSwapActionStateChanged::bIsSwapActionActive' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.HoldActionProgressed
// 0x0004 (0x0004 - 0x0000)
struct HWSinglePromptWidget_HoldActionProgressed final
{
public:
	float                                         HoldPercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_HoldActionProgressed) == 0x000004, "Wrong alignment on HWSinglePromptWidget_HoldActionProgressed");
static_assert(sizeof(HWSinglePromptWidget_HoldActionProgressed) == 0x000004, "Wrong size on HWSinglePromptWidget_HoldActionProgressed");
static_assert(offsetof(HWSinglePromptWidget_HoldActionProgressed, HoldPercent) == 0x000000, "Member 'HWSinglePromptWidget_HoldActionProgressed::HoldPercent' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.SetIsHoldAction
// 0x0001 (0x0001 - 0x0000)
struct HWSinglePromptWidget_SetIsHoldAction final
{
public:
	bool                                          bIsHold;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_SetIsHoldAction) == 0x000001, "Wrong alignment on HWSinglePromptWidget_SetIsHoldAction");
static_assert(sizeof(HWSinglePromptWidget_SetIsHoldAction) == 0x000001, "Wrong size on HWSinglePromptWidget_SetIsHoldAction");
static_assert(offsetof(HWSinglePromptWidget_SetIsHoldAction, bIsHold) == 0x000000, "Member 'HWSinglePromptWidget_SetIsHoldAction::bIsHold' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.SetKeyInput
// 0x0018 (0x0018 - 0x0000)
struct HWSinglePromptWidget_SetKeyInput final
{
public:
	struct FKey                                   NewKey;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_SetKeyInput) == 0x000008, "Wrong alignment on HWSinglePromptWidget_SetKeyInput");
static_assert(sizeof(HWSinglePromptWidget_SetKeyInput) == 0x000018, "Wrong size on HWSinglePromptWidget_SetKeyInput");
static_assert(offsetof(HWSinglePromptWidget_SetKeyInput, NewKey) == 0x000000, "Member 'HWSinglePromptWidget_SetKeyInput::NewKey' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.SetKeyInputByKeySet
// 0x0010 (0x0010 - 0x0000)
struct HWSinglePromptWidget_SetKeyInputByKeySet final
{
public:
	TArray<struct FKey>                           NewKeys;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_SetKeyInputByKeySet) == 0x000008, "Wrong alignment on HWSinglePromptWidget_SetKeyInputByKeySet");
static_assert(sizeof(HWSinglePromptWidget_SetKeyInputByKeySet) == 0x000010, "Wrong size on HWSinglePromptWidget_SetKeyInputByKeySet");
static_assert(offsetof(HWSinglePromptWidget_SetKeyInputByKeySet, NewKeys) == 0x000000, "Member 'HWSinglePromptWidget_SetKeyInputByKeySet::NewKeys' has a wrong offset!");

// Function HemingwayUI.HWSinglePromptWidget.GetDisplayedKey
// 0x0018 (0x0018 - 0x0000)
struct HWSinglePromptWidget_GetDisplayedKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWSinglePromptWidget_GetDisplayedKey) == 0x000008, "Wrong alignment on HWSinglePromptWidget_GetDisplayedKey");
static_assert(sizeof(HWSinglePromptWidget_GetDisplayedKey) == 0x000018, "Wrong size on HWSinglePromptWidget_GetDisplayedKey");
static_assert(offsetof(HWSinglePromptWidget_GetDisplayedKey, ReturnValue) == 0x000000, "Member 'HWSinglePromptWidget_GetDisplayedKey::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIActionRouter.OverrideActiveInputMode
// 0x0001 (0x0001 - 0x0000)
struct HWUIActionRouter_OverrideActiveInputMode final
{
public:
	ECommonInputMode                              DesiredInputMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIActionRouter_OverrideActiveInputMode) == 0x000001, "Wrong alignment on HWUIActionRouter_OverrideActiveInputMode");
static_assert(sizeof(HWUIActionRouter_OverrideActiveInputMode) == 0x000001, "Wrong size on HWUIActionRouter_OverrideActiveInputMode");
static_assert(offsetof(HWUIActionRouter_OverrideActiveInputMode, DesiredInputMode) == 0x000000, "Member 'HWUIActionRouter_OverrideActiveInputMode::DesiredInputMode' has a wrong offset!");

// Function HemingwayUI.HWUIActionRouter.SetAnalogCursorEnabled
// 0x0002 (0x0002 - 0x0000)
struct HWUIActionRouter_SetAnalogCursorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInTickCursor;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIActionRouter_SetAnalogCursorEnabled) == 0x000001, "Wrong alignment on HWUIActionRouter_SetAnalogCursorEnabled");
static_assert(sizeof(HWUIActionRouter_SetAnalogCursorEnabled) == 0x000002, "Wrong size on HWUIActionRouter_SetAnalogCursorEnabled");
static_assert(offsetof(HWUIActionRouter_SetAnalogCursorEnabled, bEnabled) == 0x000000, "Member 'HWUIActionRouter_SetAnalogCursorEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(HWUIActionRouter_SetAnalogCursorEnabled, bInTickCursor) == 0x000001, "Member 'HWUIActionRouter_SetAnalogCursorEnabled::bInTickCursor' has a wrong offset!");

// Function HemingwayUI.HWInterface_HUDUINavigatable.GetActionBindingContainers
// 0x0010 (0x0010 - 0x0000)
struct HWInterface_HUDUINavigatable_GetActionBindingContainers final
{
public:
	TArray<struct FHWUIActionBindingContainer>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_HUDUINavigatable_GetActionBindingContainers) == 0x000008, "Wrong alignment on HWInterface_HUDUINavigatable_GetActionBindingContainers");
static_assert(sizeof(HWInterface_HUDUINavigatable_GetActionBindingContainers) == 0x000010, "Wrong size on HWInterface_HUDUINavigatable_GetActionBindingContainers");
static_assert(offsetof(HWInterface_HUDUINavigatable_GetActionBindingContainers, ReturnValue) == 0x000000, "Member 'HWInterface_HUDUINavigatable_GetActionBindingContainers::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_HUDUINavigatable.GetWidgetName
// 0x0018 (0x0018 - 0x0000)
struct HWInterface_HUDUINavigatable_GetWidgetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_HUDUINavigatable_GetWidgetName) == 0x000008, "Wrong alignment on HWInterface_HUDUINavigatable_GetWidgetName");
static_assert(sizeof(HWInterface_HUDUINavigatable_GetWidgetName) == 0x000018, "Wrong size on HWInterface_HUDUINavigatable_GetWidgetName");
static_assert(offsetof(HWInterface_HUDUINavigatable_GetWidgetName, ReturnValue) == 0x000000, "Member 'HWInterface_HUDUINavigatable_GetWidgetName::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.DisplayGamepadKeys
// 0x0010 (0x0010 - 0x0000)
struct HWKeyBinderEntryWidget_DisplayGamepadKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_DisplayGamepadKeys) == 0x000008, "Wrong alignment on HWKeyBinderEntryWidget_DisplayGamepadKeys");
static_assert(sizeof(HWKeyBinderEntryWidget_DisplayGamepadKeys) == 0x000010, "Wrong size on HWKeyBinderEntryWidget_DisplayGamepadKeys");
static_assert(offsetof(HWKeyBinderEntryWidget_DisplayGamepadKeys, Keys) == 0x000000, "Member 'HWKeyBinderEntryWidget_DisplayGamepadKeys::Keys' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.DisplayKeyboardKeys
// 0x0010 (0x0010 - 0x0000)
struct HWKeyBinderEntryWidget_DisplayKeyboardKeys final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_DisplayKeyboardKeys) == 0x000008, "Wrong alignment on HWKeyBinderEntryWidget_DisplayKeyboardKeys");
static_assert(sizeof(HWKeyBinderEntryWidget_DisplayKeyboardKeys) == 0x000010, "Wrong size on HWKeyBinderEntryWidget_DisplayKeyboardKeys");
static_assert(offsetof(HWKeyBinderEntryWidget_DisplayKeyboardKeys, Keys) == 0x000000, "Member 'HWKeyBinderEntryWidget_DisplayKeyboardKeys::Keys' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.DisplayKeySelectorEnabled
// 0x0002 (0x0002 - 0x0000)
struct HWKeyBinderEntryWidget_DisplayKeySelectorEnabled final
{
public:
	bool                                          bIsKeyboard;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectorIsEnabled;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_DisplayKeySelectorEnabled) == 0x000001, "Wrong alignment on HWKeyBinderEntryWidget_DisplayKeySelectorEnabled");
static_assert(sizeof(HWKeyBinderEntryWidget_DisplayKeySelectorEnabled) == 0x000002, "Wrong size on HWKeyBinderEntryWidget_DisplayKeySelectorEnabled");
static_assert(offsetof(HWKeyBinderEntryWidget_DisplayKeySelectorEnabled, bIsKeyboard) == 0x000000, "Member 'HWKeyBinderEntryWidget_DisplayKeySelectorEnabled::bIsKeyboard' has a wrong offset!");
static_assert(offsetof(HWKeyBinderEntryWidget_DisplayKeySelectorEnabled, bSelectorIsEnabled) == 0x000001, "Member 'HWKeyBinderEntryWidget_DisplayKeySelectorEnabled::bSelectorIsEnabled' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.DisplayLabelText
// 0x0018 (0x0018 - 0x0000)
struct HWKeyBinderEntryWidget_DisplayLabelText final
{
public:
	class FText                                   LabelText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_DisplayLabelText) == 0x000008, "Wrong alignment on HWKeyBinderEntryWidget_DisplayLabelText");
static_assert(sizeof(HWKeyBinderEntryWidget_DisplayLabelText) == 0x000018, "Wrong size on HWKeyBinderEntryWidget_DisplayLabelText");
static_assert(offsetof(HWKeyBinderEntryWidget_DisplayLabelText, LabelText) == 0x000000, "Member 'HWKeyBinderEntryWidget_DisplayLabelText::LabelText' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.HandleGamepadKeyChanged
// 0x0020 (0x0020 - 0x0000)
struct HWKeyBinderEntryWidget_HandleGamepadKeyChanged final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_HandleGamepadKeyChanged) == 0x000008, "Wrong alignment on HWKeyBinderEntryWidget_HandleGamepadKeyChanged");
static_assert(sizeof(HWKeyBinderEntryWidget_HandleGamepadKeyChanged) == 0x000020, "Wrong size on HWKeyBinderEntryWidget_HandleGamepadKeyChanged");
static_assert(offsetof(HWKeyBinderEntryWidget_HandleGamepadKeyChanged, SelectedKey) == 0x000000, "Member 'HWKeyBinderEntryWidget_HandleGamepadKeyChanged::SelectedKey' has a wrong offset!");

// Function HemingwayUI.HWKeyBinderEntryWidget.HandleKeyboardKeyChanged
// 0x0020 (0x0020 - 0x0000)
struct HWKeyBinderEntryWidget_HandleKeyboardKeyChanged final
{
public:
	struct FInputChord                            SelectedKey;                                       // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWKeyBinderEntryWidget_HandleKeyboardKeyChanged) == 0x000008, "Wrong alignment on HWKeyBinderEntryWidget_HandleKeyboardKeyChanged");
static_assert(sizeof(HWKeyBinderEntryWidget_HandleKeyboardKeyChanged) == 0x000020, "Wrong size on HWKeyBinderEntryWidget_HandleKeyboardKeyChanged");
static_assert(offsetof(HWKeyBinderEntryWidget_HandleKeyboardKeyChanged, SelectedKey) == 0x000000, "Member 'HWKeyBinderEntryWidget_HandleKeyboardKeyChanged::SelectedKey' has a wrong offset!");

// Function HemingwayUI.HWPersistentWidgetSubsystem.HidePersistentWidget
// 0x0008 (0x0008 - 0x0000)
struct HWPersistentWidgetSubsystem_HidePersistentWidget final
{
public:
	struct FGameplayTag                           WidgetTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentWidgetSubsystem_HidePersistentWidget) == 0x000004, "Wrong alignment on HWPersistentWidgetSubsystem_HidePersistentWidget");
static_assert(sizeof(HWPersistentWidgetSubsystem_HidePersistentWidget) == 0x000008, "Wrong size on HWPersistentWidgetSubsystem_HidePersistentWidget");
static_assert(offsetof(HWPersistentWidgetSubsystem_HidePersistentWidget, WidgetTag) == 0x000000, "Member 'HWPersistentWidgetSubsystem_HidePersistentWidget::WidgetTag' has a wrong offset!");

// Function HemingwayUI.HWPersistentWidgetSubsystem.ShowPersistentWidget
// 0x0010 (0x0010 - 0x0000)
struct HWPersistentWidgetSubsystem_ShowPersistentWidget final
{
public:
	struct FGameplayTag                           WidgetTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewportZOrder                             LayerZOrder;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ZOrderOffset;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPersistentWidgetSubsystem_ShowPersistentWidget) == 0x000004, "Wrong alignment on HWPersistentWidgetSubsystem_ShowPersistentWidget");
static_assert(sizeof(HWPersistentWidgetSubsystem_ShowPersistentWidget) == 0x000010, "Wrong size on HWPersistentWidgetSubsystem_ShowPersistentWidget");
static_assert(offsetof(HWPersistentWidgetSubsystem_ShowPersistentWidget, WidgetTag) == 0x000000, "Member 'HWPersistentWidgetSubsystem_ShowPersistentWidget::WidgetTag' has a wrong offset!");
static_assert(offsetof(HWPersistentWidgetSubsystem_ShowPersistentWidget, LayerZOrder) == 0x000008, "Member 'HWPersistentWidgetSubsystem_ShowPersistentWidget::LayerZOrder' has a wrong offset!");
static_assert(offsetof(HWPersistentWidgetSubsystem_ShowPersistentWidget, ZOrderOffset) == 0x00000C, "Member 'HWPersistentWidgetSubsystem_ShowPersistentWidget::ZOrderOffset' has a wrong offset!");

// Function HemingwayUI.HWPersistentWidgetSubsystem.IsPersistentWidgetActive
// 0x000C (0x000C - 0x0000)
struct HWPersistentWidgetSubsystem_IsPersistentWidgetActive final
{
public:
	struct FGameplayTag                           WidgetTag;                                         // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPersistentWidgetSubsystem_IsPersistentWidgetActive) == 0x000004, "Wrong alignment on HWPersistentWidgetSubsystem_IsPersistentWidgetActive");
static_assert(sizeof(HWPersistentWidgetSubsystem_IsPersistentWidgetActive) == 0x00000C, "Wrong size on HWPersistentWidgetSubsystem_IsPersistentWidgetActive");
static_assert(offsetof(HWPersistentWidgetSubsystem_IsPersistentWidgetActive, WidgetTag) == 0x000000, "Member 'HWPersistentWidgetSubsystem_IsPersistentWidgetActive::WidgetTag' has a wrong offset!");
static_assert(offsetof(HWPersistentWidgetSubsystem_IsPersistentWidgetActive, ReturnValue) == 0x000008, "Member 'HWPersistentWidgetSubsystem_IsPersistentWidgetActive::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyle.GetFontStyleTypenameOptions
// 0x0010 (0x0010 - 0x0000)
struct HWUIStyle_GetFontStyleTypenameOptions final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyle_GetFontStyleTypenameOptions) == 0x000008, "Wrong alignment on HWUIStyle_GetFontStyleTypenameOptions");
static_assert(sizeof(HWUIStyle_GetFontStyleTypenameOptions) == 0x000010, "Wrong size on HWUIStyle_GetFontStyleTypenameOptions");
static_assert(offsetof(HWUIStyle_GetFontStyleTypenameOptions, ReturnValue) == 0x000000, "Member 'HWUIStyle_GetFontStyleTypenameOptions::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWInterface_UIStyleLocalModifier.GetLocalModifierTagOverride
// 0x0008 (0x0008 - 0x0000)
struct HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride) == 0x000004, "Wrong alignment on HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride");
static_assert(sizeof(HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride) == 0x000008, "Wrong size on HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride");
static_assert(offsetof(HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride, ReturnValue) == 0x000000, "Member 'HWInterface_UIStyleLocalModifier_GetLocalModifierTagOverride::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidgetManager.DisplayPurchaseWidget
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget final
{
public:
	class UHWPurchaseConfirmWidget*               PurchaseWidget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget");
static_assert(sizeof(HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget) == 0x000008, "Wrong size on HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget");
static_assert(offsetof(HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget, PurchaseWidget) == 0x000000, "Member 'HWPurchaseConfirmWidgetManager_DisplayPurchaseWidget::PurchaseWidget' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidgetManager.GetActivePurchaseConfirmWidget
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget final
{
public:
	class UHWPurchaseConfirmWidget*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget");
static_assert(sizeof(HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget) == 0x000008, "Wrong size on HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget");
static_assert(offsetof(HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidgetManager_GetActivePurchaseConfirmWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidgetManager.GetCurrentCollectionType
// 0x0001 (0x0001 - 0x0000)
struct HWPurchaseConfirmWidgetManager_GetCurrentCollectionType final
{
public:
	EHWCollectionItemType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidgetManager_GetCurrentCollectionType) == 0x000001, "Wrong alignment on HWPurchaseConfirmWidgetManager_GetCurrentCollectionType");
static_assert(sizeof(HWPurchaseConfirmWidgetManager_GetCurrentCollectionType) == 0x000001, "Wrong size on HWPurchaseConfirmWidgetManager_GetCurrentCollectionType");
static_assert(offsetof(HWPurchaseConfirmWidgetManager_GetCurrentCollectionType, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidgetManager_GetCurrentCollectionType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseConfirmWidgetManager.GetItemToPurchase
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseConfirmWidgetManager_GetItemToPurchase final
{
public:
	class UHWCollectionItem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseConfirmWidgetManager_GetItemToPurchase) == 0x000008, "Wrong alignment on HWPurchaseConfirmWidgetManager_GetItemToPurchase");
static_assert(sizeof(HWPurchaseConfirmWidgetManager_GetItemToPurchase) == 0x000008, "Wrong size on HWPurchaseConfirmWidgetManager_GetItemToPurchase");
static_assert(offsetof(HWPurchaseConfirmWidgetManager_GetItemToPurchase, ReturnValue) == 0x000000, "Member 'HWPurchaseConfirmWidgetManager_GetItemToPurchase::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.ResetGlobalModifier
// 0x0001 (0x0001 - 0x0000)
struct HWUIStyleSubsystem_ResetGlobalModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_ResetGlobalModifier) == 0x000001, "Wrong alignment on HWUIStyleSubsystem_ResetGlobalModifier");
static_assert(sizeof(HWUIStyleSubsystem_ResetGlobalModifier) == 0x000001, "Wrong size on HWUIStyleSubsystem_ResetGlobalModifier");
static_assert(offsetof(HWUIStyleSubsystem_ResetGlobalModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_ResetGlobalModifier::GlobalModifierType' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.ResetLocalModifier
// 0x0008 (0x0008 - 0x0000)
struct HWUIStyleSubsystem_ResetLocalModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_ResetLocalModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_ResetLocalModifier");
static_assert(sizeof(HWUIStyleSubsystem_ResetLocalModifier) == 0x000008, "Wrong size on HWUIStyleSubsystem_ResetLocalModifier");
static_assert(offsetof(HWUIStyleSubsystem_ResetLocalModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_ResetLocalModifier::LocalModifierTag' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetGlobalColorModifier
// 0x0078 (0x0078 - 0x0000)
struct HWUIStyleSubsystem_SetGlobalColorModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Color         NewColorModifier;                                  // 0x0008(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetGlobalColorModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_SetGlobalColorModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetGlobalColorModifier) == 0x000078, "Wrong size on HWUIStyleSubsystem_SetGlobalColorModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalColorModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_SetGlobalColorModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalColorModifier, NewColorModifier) == 0x000008, "Member 'HWUIStyleSubsystem_SetGlobalColorModifier::NewColorModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetGlobalFontModifier
// 0x0008 (0x0008 - 0x0000)
struct HWUIStyleSubsystem_SetGlobalFontModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Font          NewFontModifier;                                   // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetGlobalFontModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_SetGlobalFontModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetGlobalFontModifier) == 0x000008, "Wrong size on HWUIStyleSubsystem_SetGlobalFontModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalFontModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_SetGlobalFontModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalFontModifier, NewFontModifier) == 0x000004, "Member 'HWUIStyleSubsystem_SetGlobalFontModifier::NewFontModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetGlobalScaleModifier
// 0x0008 (0x0008 - 0x0000)
struct HWUIStyleSubsystem_SetGlobalScaleModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Scale         NewScaleModifier;                                  // 0x0004(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetGlobalScaleModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_SetGlobalScaleModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetGlobalScaleModifier) == 0x000008, "Wrong size on HWUIStyleSubsystem_SetGlobalScaleModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalScaleModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_SetGlobalScaleModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetGlobalScaleModifier, NewScaleModifier) == 0x000004, "Member 'HWUIStyleSubsystem_SetGlobalScaleModifier::NewScaleModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetLocalCustomModifier
// 0x0070 (0x0070 - 0x0000)
struct HWUIStyleSubsystem_SetLocalCustomModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalCustomModifier          NewCustomModifier;                                 // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetLocalCustomModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_SetLocalCustomModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetLocalCustomModifier) == 0x000070, "Wrong size on HWUIStyleSubsystem_SetLocalCustomModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalCustomModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_SetLocalCustomModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalCustomModifier, NewCustomModifier) == 0x000008, "Member 'HWUIStyleSubsystem_SetLocalCustomModifier::NewCustomModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetLocalCustomModifiers
// 0x0018 (0x0018 - 0x0000)
struct HWUIStyleSubsystem_SetLocalCustomModifiers final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWUIStyleLocalCustomModifier>  NewGenericModifiers;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetLocalCustomModifiers) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_SetLocalCustomModifiers");
static_assert(sizeof(HWUIStyleSubsystem_SetLocalCustomModifiers) == 0x000018, "Wrong size on HWUIStyleSubsystem_SetLocalCustomModifiers");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalCustomModifiers, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_SetLocalCustomModifiers::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalCustomModifiers, NewGenericModifiers) == 0x000008, "Member 'HWUIStyleSubsystem_SetLocalCustomModifiers::NewGenericModifiers' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetLocalGenericModifier
// 0x0014 (0x0014 - 0x0000)
struct HWUIStyleSubsystem_SetLocalGenericModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalGenericModifier         NewGenericModifier;                                // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetLocalGenericModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_SetLocalGenericModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetLocalGenericModifier) == 0x000014, "Wrong size on HWUIStyleSubsystem_SetLocalGenericModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalGenericModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_SetLocalGenericModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalGenericModifier, NewGenericModifier) == 0x000008, "Member 'HWUIStyleSubsystem_SetLocalGenericModifier::NewGenericModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.SetLocalModifier
// 0x0090 (0x0090 - 0x0000)
struct HWUIStyleSubsystem_SetLocalModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalModifier                NewLocalModifier;                                  // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_SetLocalModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_SetLocalModifier");
static_assert(sizeof(HWUIStyleSubsystem_SetLocalModifier) == 0x000090, "Wrong size on HWUIStyleSubsystem_SetLocalModifier");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_SetLocalModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_SetLocalModifier, NewLocalModifier) == 0x000008, "Member 'HWUIStyleSubsystem_SetLocalModifier::NewLocalModifier' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetColorFromPalette
// 0x001C (0x001C - 0x0000)
struct HWUIStyleSubsystem_GetColorFromPalette final
{
public:
	struct FGameplayTag                           ColorTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutColor;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  GlobalModifier;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetColorFromPalette) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_GetColorFromPalette");
static_assert(sizeof(HWUIStyleSubsystem_GetColorFromPalette) == 0x00001C, "Wrong size on HWUIStyleSubsystem_GetColorFromPalette");
static_assert(offsetof(HWUIStyleSubsystem_GetColorFromPalette, ColorTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetColorFromPalette::ColorTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorFromPalette, OutColor) == 0x000008, "Member 'HWUIStyleSubsystem_GetColorFromPalette::OutColor' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorFromPalette, GlobalModifier) == 0x000018, "Member 'HWUIStyleSubsystem_GetColorFromPalette::GlobalModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorFromPalette, ReturnValue) == 0x000019, "Member 'HWUIStyleSubsystem_GetColorFromPalette::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetColorStyle
// 0x0038 (0x0038 - 0x0000)
struct HWUIStyleSubsystem_GetColorStyle final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  ModifierToApply;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyle_Color                       OutColorStyle;                                     // 0x0010(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetColorStyle) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetColorStyle");
static_assert(sizeof(HWUIStyleSubsystem_GetColorStyle) == 0x000038, "Wrong size on HWUIStyleSubsystem_GetColorStyle");
static_assert(offsetof(HWUIStyleSubsystem_GetColorStyle, StyleTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetColorStyle::StyleTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorStyle, ModifierToApply) == 0x000008, "Member 'HWUIStyleSubsystem_GetColorStyle::ModifierToApply' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorStyle, OutColorStyle) == 0x000010, "Member 'HWUIStyleSubsystem_GetColorStyle::OutColorStyle' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetColorStyle, ReturnValue) == 0x000030, "Member 'HWUIStyleSubsystem_GetColorStyle::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetFontStyle
// 0x0068 (0x0068 - 0x0000)
struct HWUIStyleSubsystem_GetFontStyle final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  ModifierToApply;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStylePlatformModifierType                PlatformModifiers;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyle_Font                        OutFontStyle;                                      // 0x0010(0x0050)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetFontStyle) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetFontStyle");
static_assert(sizeof(HWUIStyleSubsystem_GetFontStyle) == 0x000068, "Wrong size on HWUIStyleSubsystem_GetFontStyle");
static_assert(offsetof(HWUIStyleSubsystem_GetFontStyle, StyleTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetFontStyle::StyleTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetFontStyle, ModifierToApply) == 0x000008, "Member 'HWUIStyleSubsystem_GetFontStyle::ModifierToApply' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetFontStyle, PlatformModifiers) == 0x000009, "Member 'HWUIStyleSubsystem_GetFontStyle::PlatformModifiers' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetFontStyle, OutFontStyle) == 0x000010, "Member 'HWUIStyleSubsystem_GetFontStyle::OutFontStyle' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetFontStyle, ReturnValue) == 0x000060, "Member 'HWUIStyleSubsystem_GetFontStyle::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetGlobalColorModifier
// 0x0080 (0x0080 - 0x0000)
struct HWUIStyleSubsystem_GetGlobalColorModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Color         OutColorModifier;                                  // 0x0008(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetGlobalColorModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetGlobalColorModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetGlobalColorModifier) == 0x000080, "Wrong size on HWUIStyleSubsystem_GetGlobalColorModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalColorModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_GetGlobalColorModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalColorModifier, OutColorModifier) == 0x000008, "Member 'HWUIStyleSubsystem_GetGlobalColorModifier::OutColorModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalColorModifier, ReturnValue) == 0x000078, "Member 'HWUIStyleSubsystem_GetGlobalColorModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetGlobalFontModifier
// 0x000C (0x000C - 0x0000)
struct HWUIStyleSubsystem_GetGlobalFontModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Font          OutFontModifier;                                   // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetGlobalFontModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_GetGlobalFontModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetGlobalFontModifier) == 0x00000C, "Wrong size on HWUIStyleSubsystem_GetGlobalFontModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalFontModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_GetGlobalFontModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalFontModifier, OutFontModifier) == 0x000004, "Member 'HWUIStyleSubsystem_GetGlobalFontModifier::OutFontModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalFontModifier, ReturnValue) == 0x000008, "Member 'HWUIStyleSubsystem_GetGlobalFontModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetGlobalScaleModifier
// 0x000C (0x000C - 0x0000)
struct HWUIStyleSubsystem_GetGlobalScaleModifier final
{
public:
	EHWUIStyleGlobalModifierType                  GlobalModifierType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyleGlobalModifier_Scale         OutScaleModifier;                                  // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetGlobalScaleModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_GetGlobalScaleModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetGlobalScaleModifier) == 0x00000C, "Wrong size on HWUIStyleSubsystem_GetGlobalScaleModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalScaleModifier, GlobalModifierType) == 0x000000, "Member 'HWUIStyleSubsystem_GetGlobalScaleModifier::GlobalModifierType' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalScaleModifier, OutScaleModifier) == 0x000004, "Member 'HWUIStyleSubsystem_GetGlobalScaleModifier::OutScaleModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetGlobalScaleModifier, ReturnValue) == 0x000008, "Member 'HWUIStyleSubsystem_GetGlobalScaleModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetLocalCustomModifier
// 0x0080 (0x0080 - 0x0000)
struct HWUIStyleSubsystem_GetLocalCustomModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CustomModifierName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalCustomModifier          OutCustomModifier;                                 // 0x0010(0x0068)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetLocalCustomModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetLocalCustomModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetLocalCustomModifier) == 0x000080, "Wrong size on HWUIStyleSubsystem_GetLocalCustomModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetLocalCustomModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifier, CustomModifierName) == 0x000008, "Member 'HWUIStyleSubsystem_GetLocalCustomModifier::CustomModifierName' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifier, OutCustomModifier) == 0x000010, "Member 'HWUIStyleSubsystem_GetLocalCustomModifier::OutCustomModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifier, ReturnValue) == 0x000078, "Member 'HWUIStyleSubsystem_GetLocalCustomModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetLocalCustomModifiers
// 0x0020 (0x0020 - 0x0000)
struct HWUIStyleSubsystem_GetLocalCustomModifiers final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWUIStyleLocalCustomModifier>  OutCustomModifiers;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetLocalCustomModifiers) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetLocalCustomModifiers");
static_assert(sizeof(HWUIStyleSubsystem_GetLocalCustomModifiers) == 0x000020, "Wrong size on HWUIStyleSubsystem_GetLocalCustomModifiers");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifiers, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetLocalCustomModifiers::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifiers, OutCustomModifiers) == 0x000008, "Member 'HWUIStyleSubsystem_GetLocalCustomModifiers::OutCustomModifiers' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalCustomModifiers, ReturnValue) == 0x000018, "Member 'HWUIStyleSubsystem_GetLocalCustomModifiers::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetLocalGenericModifier
// 0x0018 (0x0018 - 0x0000)
struct HWUIStyleSubsystem_GetLocalGenericModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalGenericModifier         OutLocalModifier;                                  // 0x0008(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetLocalGenericModifier) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_GetLocalGenericModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetLocalGenericModifier) == 0x000018, "Wrong size on HWUIStyleSubsystem_GetLocalGenericModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalGenericModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetLocalGenericModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalGenericModifier, OutLocalModifier) == 0x000008, "Member 'HWUIStyleSubsystem_GetLocalGenericModifier::OutLocalModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalGenericModifier, ReturnValue) == 0x000014, "Member 'HWUIStyleSubsystem_GetLocalGenericModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetLocalModifier
// 0x0098 (0x0098 - 0x0000)
struct HWUIStyleSubsystem_GetLocalModifier final
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIStyleLocalModifier                OutLocalModifier;                                  // 0x0008(0x0088)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetLocalModifier) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetLocalModifier");
static_assert(sizeof(HWUIStyleSubsystem_GetLocalModifier) == 0x000098, "Wrong size on HWUIStyleSubsystem_GetLocalModifier");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalModifier, LocalModifierTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetLocalModifier::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalModifier, OutLocalModifier) == 0x000008, "Member 'HWUIStyleSubsystem_GetLocalModifier::OutLocalModifier' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetLocalModifier, ReturnValue) == 0x000090, "Member 'HWUIStyleSubsystem_GetLocalModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetScaleStyle
// 0x0014 (0x0014 - 0x0000)
struct HWUIStyleSubsystem_GetScaleStyle final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  ModifierToApply;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyle_Scale                       OutScaleStyle;                                     // 0x000C(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWUIStyleSubsystem_GetScaleStyle) == 0x000004, "Wrong alignment on HWUIStyleSubsystem_GetScaleStyle");
static_assert(sizeof(HWUIStyleSubsystem_GetScaleStyle) == 0x000014, "Wrong size on HWUIStyleSubsystem_GetScaleStyle");
static_assert(offsetof(HWUIStyleSubsystem_GetScaleStyle, StyleTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetScaleStyle::StyleTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetScaleStyle, ModifierToApply) == 0x000008, "Member 'HWUIStyleSubsystem_GetScaleStyle::ModifierToApply' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetScaleStyle, OutScaleStyle) == 0x00000C, "Member 'HWUIStyleSubsystem_GetScaleStyle::OutScaleStyle' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetScaleStyle, ReturnValue) == 0x000010, "Member 'HWUIStyleSubsystem_GetScaleStyle::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWUIStyleSubsystem.GetStyleFromTag
// 0x0010 (0x0010 - 0x0000)
struct HWUIStyleSubsystem_GetStyleFromTag final
{
public:
	struct FGameplayTag                           StyleTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWUIStyle*                       ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWUIStyleSubsystem_GetStyleFromTag) == 0x000008, "Wrong alignment on HWUIStyleSubsystem_GetStyleFromTag");
static_assert(sizeof(HWUIStyleSubsystem_GetStyleFromTag) == 0x000010, "Wrong size on HWUIStyleSubsystem_GetStyleFromTag");
static_assert(offsetof(HWUIStyleSubsystem_GetStyleFromTag, StyleTag) == 0x000000, "Member 'HWUIStyleSubsystem_GetStyleFromTag::StyleTag' has a wrong offset!");
static_assert(offsetof(HWUIStyleSubsystem_GetStyleFromTag, ReturnValue) == 0x000008, "Member 'HWUIStyleSubsystem_GetStyleFromTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewRedirectorSubsystem.RedirectByCollection
// 0x0058 (0x0058 - 0x0000)
struct HWViewRedirectorSubsystem_RedirectByCollection final
{
public:
	TSoftObjectPtr<class UHWCollectionItem>       CollectionItem;                                    // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewRedirectType                           RedirectType;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCharacterItem>        AssociatedCharacter;                               // 0x0030(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWViewRedirectorSubsystem_RedirectByCollection) == 0x000008, "Wrong alignment on HWViewRedirectorSubsystem_RedirectByCollection");
static_assert(sizeof(HWViewRedirectorSubsystem_RedirectByCollection) == 0x000058, "Wrong size on HWViewRedirectorSubsystem_RedirectByCollection");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByCollection, CollectionItem) == 0x000000, "Member 'HWViewRedirectorSubsystem_RedirectByCollection::CollectionItem' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByCollection, RedirectType) == 0x000028, "Member 'HWViewRedirectorSubsystem_RedirectByCollection::RedirectType' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByCollection, AssociatedCharacter) == 0x000030, "Member 'HWViewRedirectorSubsystem_RedirectByCollection::AssociatedCharacter' has a wrong offset!");

// Function HemingwayUI.HWViewRedirectorSubsystem.RedirectByItemId
// 0x0040 (0x0040 - 0x0000)
struct HWViewRedirectorSubsystem_RedirectByItemId final
{
public:
	struct FRH_ItemId                             ItemId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewRedirectType                           RedirectType;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCharacterItem>        AssociatedCharacter;                               // 0x0018(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWViewRedirectorSubsystem_RedirectByItemId) == 0x000008, "Wrong alignment on HWViewRedirectorSubsystem_RedirectByItemId");
static_assert(sizeof(HWViewRedirectorSubsystem_RedirectByItemId) == 0x000040, "Wrong size on HWViewRedirectorSubsystem_RedirectByItemId");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByItemId, ItemId) == 0x000000, "Member 'HWViewRedirectorSubsystem_RedirectByItemId::ItemId' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByItemId, RedirectType) == 0x000014, "Member 'HWViewRedirectorSubsystem_RedirectByItemId::RedirectType' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_RedirectByItemId, AssociatedCharacter) == 0x000018, "Member 'HWViewRedirectorSubsystem_RedirectByItemId::AssociatedCharacter' has a wrong offset!");

// Function HemingwayUI.HWViewRedirectorSubsystem.CanRedirectItem
// 0x0010 (0x0010 - 0x0000)
struct HWViewRedirectorSubsystem_CanRedirectItem final
{
public:
	const class UHWCollectionItem*                CollectionItem;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewRedirectType                           RedirectType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWViewRedirectorSubsystem_CanRedirectItem) == 0x000008, "Wrong alignment on HWViewRedirectorSubsystem_CanRedirectItem");
static_assert(sizeof(HWViewRedirectorSubsystem_CanRedirectItem) == 0x000010, "Wrong size on HWViewRedirectorSubsystem_CanRedirectItem");
static_assert(offsetof(HWViewRedirectorSubsystem_CanRedirectItem, CollectionItem) == 0x000000, "Member 'HWViewRedirectorSubsystem_CanRedirectItem::CollectionItem' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_CanRedirectItem, RedirectType) == 0x000008, "Member 'HWViewRedirectorSubsystem_CanRedirectItem::RedirectType' has a wrong offset!");
static_assert(offsetof(HWViewRedirectorSubsystem_CanRedirectItem, ReturnValue) == 0x000009, "Member 'HWViewRedirectorSubsystem_CanRedirectItem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewRedirectorSubsystem.HasPendingCrossLevelRedirects
// 0x0001 (0x0001 - 0x0000)
struct HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects) == 0x000001, "Wrong alignment on HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects");
static_assert(sizeof(HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects) == 0x000001, "Wrong size on HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects");
static_assert(offsetof(HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects, ReturnValue) == 0x000000, "Member 'HWViewRedirectorSubsystem_HasPendingCrossLevelRedirects::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDescription.DisplayDescription
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_AbilityDescription_DisplayDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDescription_DisplayDescription) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDescription_DisplayDescription");
static_assert(sizeof(HWTooltipWidget_AbilityDescription_DisplayDescription) == 0x000018, "Wrong size on HWTooltipWidget_AbilityDescription_DisplayDescription");
static_assert(offsetof(HWTooltipWidget_AbilityDescription_DisplayDescription, Description) == 0x000000, "Member 'HWTooltipWidget_AbilityDescription_DisplayDescription::Description' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.DisplayCustomText
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_AbilityDetail_DisplayCustomText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_DisplayCustomText) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_DisplayCustomText");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_DisplayCustomText) == 0x000018, "Wrong size on HWTooltipWidget_AbilityDetail_DisplayCustomText");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_DisplayCustomText, Text) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_DisplayCustomText::Text' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.DisplayKeywordText
// 0x0108 (0x0108 - 0x0000)
struct HWTooltipWidget_AbilityDetail_DisplayKeywordText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWDataDisplay_Keyword                 KeywordData;                                       // 0x0018(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_DisplayKeywordText) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_DisplayKeywordText");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_DisplayKeywordText) == 0x000108, "Wrong size on HWTooltipWidget_AbilityDetail_DisplayKeywordText");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_DisplayKeywordText, Text) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_DisplayKeywordText::Text' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_DisplayKeywordText, KeywordData) == 0x000018, "Member 'HWTooltipWidget_AbilityDetail_DisplayKeywordText::KeywordData' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.FormatScaling
// 0x00D0 (0x00D0 - 0x0000)
struct HWTooltipWidget_AbilityDetail_FormatScaling final
{
public:
	class FText                                   ScalingValueText;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHWDataDisplay_CharacterStat           StatData;                                          // 0x0018(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x00B8(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_FormatScaling) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_FormatScaling");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_FormatScaling) == 0x0000D0, "Wrong size on HWTooltipWidget_AbilityDetail_FormatScaling");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatScaling, ScalingValueText) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_FormatScaling::ScalingValueText' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatScaling, StatData) == 0x000018, "Member 'HWTooltipWidget_AbilityDetail_FormatScaling::StatData' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatScaling, ReturnValue) == 0x0000B8, "Member 'HWTooltipWidget_AbilityDetail_FormatScaling::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.FormatScalingTexts
// 0x0028 (0x0028 - 0x0000)
struct HWTooltipWidget_AbilityDetail_FormatScalingTexts final
{
public:
	TArray<class FText>                           IndividualScalingTexts;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_FormatScalingTexts) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_FormatScalingTexts");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_FormatScalingTexts) == 0x000028, "Wrong size on HWTooltipWidget_AbilityDetail_FormatScalingTexts");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatScalingTexts, IndividualScalingTexts) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_FormatScalingTexts::IndividualScalingTexts' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatScalingTexts, ReturnValue) == 0x000010, "Member 'HWTooltipWidget_AbilityDetail_FormatScalingTexts::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.FormatValue
// 0x0020 (0x0020 - 0x0000)
struct HWTooltipWidget_AbilityDetail_FormatValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCurrentLevel;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_FormatValue) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_FormatValue");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_FormatValue) == 0x000020, "Wrong size on HWTooltipWidget_AbilityDetail_FormatValue");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatValue, Value) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_FormatValue::Value' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatValue, bIsCurrentLevel) == 0x000004, "Member 'HWTooltipWidget_AbilityDetail_FormatValue::bIsCurrentLevel' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatValue, ReturnValue) == 0x000008, "Member 'HWTooltipWidget_AbilityDetail_FormatValue::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityDetail.FormatValues
// 0x0028 (0x0028 - 0x0000)
struct HWTooltipWidget_AbilityDetail_FormatValues final
{
public:
	TArray<class FText>                           ValueTexts;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityDetail_FormatValues) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityDetail_FormatValues");
static_assert(sizeof(HWTooltipWidget_AbilityDetail_FormatValues) == 0x000028, "Wrong size on HWTooltipWidget_AbilityDetail_FormatValues");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatValues, ValueTexts) == 0x000000, "Member 'HWTooltipWidget_AbilityDetail_FormatValues::ValueTexts' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityDetail_FormatValues, ReturnValue) == 0x000010, "Member 'HWTooltipWidget_AbilityDetail_FormatValues::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.AddedUpgradeLine
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_AbilityOverview_AddedUpgradeLine final
{
public:
	class UHWTooltipWidget_AbilityDetail*         AddedLine;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_AddedUpgradeLine) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityOverview_AddedUpgradeLine");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_AddedUpgradeLine) == 0x000008, "Wrong size on HWTooltipWidget_AbilityOverview_AddedUpgradeLine");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_AddedUpgradeLine, AddedLine) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_AddedUpgradeLine::AddedLine' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayAsNextAutoSkillLevelUp
// 0x0001 (0x0001 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp final
{
public:
	bool                                          bShould;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp) == 0x000001, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp) == 0x000001, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp, bShould) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayAsNextAutoSkillLevelUp::bShould' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayCanLevelUpAndUse
// 0x0002 (0x0002 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse final
{
public:
	bool                                          bCanLevelUp;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUse;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse) == 0x000001, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse) == 0x000002, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse, bCanLevelUp) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse::bCanLevelUp' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse, bCanUse) == 0x000001, "Member 'HWTooltipWidget_AbilityOverview_DisplayCanLevelUpAndUse::bCanUse' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayCooldown
// 0x0004 (0x0004 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayCooldown final
{
public:
	float                                         Cooldown;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayCooldown) == 0x000004, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayCooldown");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayCooldown) == 0x000004, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayCooldown");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayCooldown, Cooldown) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayCooldown::Cooldown' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayCost
// 0x0004 (0x0004 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayCost final
{
public:
	float                                         Cost;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayCost) == 0x000004, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayCost");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayCost) == 0x000004, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayCost");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayCost, Cost) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayCost::Cost' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayCurrentLevel
// 0x0004 (0x0004 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayCurrentLevel final
{
public:
	int32                                         CurrentLevel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayCurrentLevel) == 0x000004, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayCurrentLevel");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayCurrentLevel) == 0x000004, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayCurrentLevel");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayCurrentLevel, CurrentLevel) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayCurrentLevel::CurrentLevel' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.DisplayLevelLock
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_AbilityOverview_DisplayLevelLock final
{
public:
	int32                                         LevelLock;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAbilityUnlocked;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_DisplayLevelLock) == 0x000004, "Wrong alignment on HWTooltipWidget_AbilityOverview_DisplayLevelLock");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_DisplayLevelLock) == 0x000008, "Wrong size on HWTooltipWidget_AbilityOverview_DisplayLevelLock");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayLevelLock, LevelLock) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_DisplayLevelLock::LevelLock' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_DisplayLevelLock, bIsAbilityUnlocked) == 0x000004, "Member 'HWTooltipWidget_AbilityOverview_DisplayLevelLock::bIsAbilityUnlocked' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_AbilityOverview.GetCachedEquipmentInstance
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance final
{
public:
	const class UHWEquipmentInstance*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance) == 0x000008, "Wrong alignment on HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance");
static_assert(sizeof(HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance) == 0x000008, "Wrong size on HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance");
static_assert(offsetof(HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance, ReturnValue) == 0x000000, "Member 'HWTooltipWidget_AbilityOverview_GetCachedEquipmentInstance::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Effect.DisplayDescription
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Effect_DisplayDescription final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Effect_DisplayDescription) == 0x000008, "Wrong alignment on HWTooltipWidget_Effect_DisplayDescription");
static_assert(sizeof(HWTooltipWidget_Effect_DisplayDescription) == 0x000018, "Wrong size on HWTooltipWidget_Effect_DisplayDescription");
static_assert(offsetof(HWTooltipWidget_Effect_DisplayDescription, Description) == 0x000000, "Member 'HWTooltipWidget_Effect_DisplayDescription::Description' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Effect.DisplayTitle
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_Effect_DisplayTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Effect_DisplayTitle) == 0x000008, "Wrong alignment on HWTooltipWidget_Effect_DisplayTitle");
static_assert(sizeof(HWTooltipWidget_Effect_DisplayTitle) == 0x000018, "Wrong size on HWTooltipWidget_Effect_DisplayTitle");
static_assert(offsetof(HWTooltipWidget_Effect_DisplayTitle, Title) == 0x000000, "Member 'HWTooltipWidget_Effect_DisplayTitle::Title' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_Effect.Populate
// 0x0008 (0x0008 - 0x0000)
struct HWTooltipWidget_Effect_Populate final
{
public:
	const class UHWGameplayEffectUIBuffData*      UIBuffData;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_Effect_Populate) == 0x000008, "Wrong alignment on HWTooltipWidget_Effect_Populate");
static_assert(sizeof(HWTooltipWidget_Effect_Populate) == 0x000008, "Wrong size on HWTooltipWidget_Effect_Populate");
static_assert(offsetof(HWTooltipWidget_Effect_Populate, UIBuffData) == 0x000000, "Member 'HWTooltipWidget_Effect_Populate::UIBuffData' has a wrong offset!");

// Function HemingwayUI.HWHUDNavigationPromptsWidget.HandleHUDNavigationFocusChanged
// 0x0010 (0x0010 - 0x0000)
struct HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged final
{
public:
	class UHWWidget*                              PreviousFocusedWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              NewFocusedWidget;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged) == 0x000008, "Wrong alignment on HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged");
static_assert(sizeof(HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged) == 0x000010, "Wrong size on HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged");
static_assert(offsetof(HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged, PreviousFocusedWidget) == 0x000000, "Member 'HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged::PreviousFocusedWidget' has a wrong offset!");
static_assert(offsetof(HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged, NewFocusedWidget) == 0x000008, "Member 'HWHUDNavigationPromptsWidget_HandleHUDNavigationFocusChanged::NewFocusedWidget' has a wrong offset!");

// Function HemingwayUI.HWHUDNavigationPromptsWidget.HandleHUDNavigationStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged final
{
public:
	bool                                          bHUDNavigationIsActive;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged) == 0x000001, "Wrong alignment on HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged");
static_assert(sizeof(HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged) == 0x000001, "Wrong size on HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged");
static_assert(offsetof(HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged, bHUDNavigationIsActive) == 0x000000, "Member 'HWHUDNavigationPromptsWidget_HandleHUDNavigationStateChanged::bHUDNavigationIsActive' has a wrong offset!");

// Function HemingwayUI.HWHUDNavigationPromptsWidget.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged");
static_assert(sizeof(HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged");
static_assert(offsetof(HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'HWHUDNavigationPromptsWidget_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function HemingwayUI.HWHUDNavigationPromptsWidget.UpdatedBindingVisibility
// 0x0001 (0x0001 - 0x0000)
struct HWHUDNavigationPromptsWidget_UpdatedBindingVisibility final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDNavigationPromptsWidget_UpdatedBindingVisibility) == 0x000001, "Wrong alignment on HWHUDNavigationPromptsWidget_UpdatedBindingVisibility");
static_assert(sizeof(HWHUDNavigationPromptsWidget_UpdatedBindingVisibility) == 0x000001, "Wrong size on HWHUDNavigationPromptsWidget_UpdatedBindingVisibility");
static_assert(offsetof(HWHUDNavigationPromptsWidget_UpdatedBindingVisibility, bShouldShow) == 0x000000, "Member 'HWHUDNavigationPromptsWidget_UpdatedBindingVisibility::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWHUDNavigationPromptsWidget.UpdatedInputState
// 0x0001 (0x0001 - 0x0000)
struct HWHUDNavigationPromptsWidget_UpdatedInputState final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWHUDNavigationPromptsWidget_UpdatedInputState) == 0x000001, "Wrong alignment on HWHUDNavigationPromptsWidget_UpdatedInputState");
static_assert(sizeof(HWHUDNavigationPromptsWidget_UpdatedInputState) == 0x000001, "Wrong size on HWHUDNavigationPromptsWidget_UpdatedInputState");
static_assert(offsetof(HWHUDNavigationPromptsWidget_UpdatedInputState, NewState) == 0x000000, "Member 'HWHUDNavigationPromptsWidget_UpdatedInputState::NewState' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_ItemStat.DisplayStatIcon
// 0x0028 (0x0028 - 0x0000)
struct HWTooltipWidget_ItemStat_DisplayStatIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              StatIcon;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_ItemStat_DisplayStatIcon) == 0x000008, "Wrong alignment on HWTooltipWidget_ItemStat_DisplayStatIcon");
static_assert(sizeof(HWTooltipWidget_ItemStat_DisplayStatIcon) == 0x000028, "Wrong size on HWTooltipWidget_ItemStat_DisplayStatIcon");
static_assert(offsetof(HWTooltipWidget_ItemStat_DisplayStatIcon, StatIcon) == 0x000000, "Member 'HWTooltipWidget_ItemStat_DisplayStatIcon::StatIcon' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_ItemStat.DisplayStatTags
// 0x0020 (0x0020 - 0x0000)
struct HWTooltipWidget_ItemStat_DisplayStatTags final
{
public:
	struct FGameplayTagContainer                  StatTags;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_ItemStat_DisplayStatTags) == 0x000008, "Wrong alignment on HWTooltipWidget_ItemStat_DisplayStatTags");
static_assert(sizeof(HWTooltipWidget_ItemStat_DisplayStatTags) == 0x000020, "Wrong size on HWTooltipWidget_ItemStat_DisplayStatTags");
static_assert(offsetof(HWTooltipWidget_ItemStat_DisplayStatTags, StatTags) == 0x000000, "Member 'HWTooltipWidget_ItemStat_DisplayStatTags::StatTags' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_ItemStat.DisplayStatText
// 0x0018 (0x0018 - 0x0000)
struct HWTooltipWidget_ItemStat_DisplayStatText final
{
public:
	class FText                                   StatText;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_ItemStat_DisplayStatText) == 0x000008, "Wrong alignment on HWTooltipWidget_ItemStat_DisplayStatText");
static_assert(sizeof(HWTooltipWidget_ItemStat_DisplayStatText) == 0x000018, "Wrong size on HWTooltipWidget_ItemStat_DisplayStatText");
static_assert(offsetof(HWTooltipWidget_ItemStat_DisplayStatText, StatText) == 0x000000, "Member 'HWTooltipWidget_ItemStat_DisplayStatText::StatText' has a wrong offset!");

// Function HemingwayUI.HWTooltipWidget_ItemStat.DisplayStatValue
// 0x0020 (0x0020 - 0x0000)
struct HWTooltipWidget_ItemStat_DisplayStatValue final
{
public:
	float                                         StatValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValueText;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWTooltipWidget_ItemStat_DisplayStatValue) == 0x000008, "Wrong alignment on HWTooltipWidget_ItemStat_DisplayStatValue");
static_assert(sizeof(HWTooltipWidget_ItemStat_DisplayStatValue) == 0x000020, "Wrong size on HWTooltipWidget_ItemStat_DisplayStatValue");
static_assert(offsetof(HWTooltipWidget_ItemStat_DisplayStatValue, StatValue) == 0x000000, "Member 'HWTooltipWidget_ItemStat_DisplayStatValue::StatValue' has a wrong offset!");
static_assert(offsetof(HWTooltipWidget_ItemStat_DisplayStatValue, ValueText) == 0x000008, "Member 'HWTooltipWidget_ItemStat_DisplayStatValue::ValueText' has a wrong offset!");

// Function HemingwayUI.HWBorder.SetBorderColorStyleTag
// 0x0008 (0x0008 - 0x0000)
struct HWBorder_SetBorderColorStyleTag final
{
public:
	struct FGameplayTag                           NewStyleTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWBorder_SetBorderColorStyleTag) == 0x000004, "Wrong alignment on HWBorder_SetBorderColorStyleTag");
static_assert(sizeof(HWBorder_SetBorderColorStyleTag) == 0x000008, "Wrong size on HWBorder_SetBorderColorStyleTag");
static_assert(offsetof(HWBorder_SetBorderColorStyleTag, NewStyleTag) == 0x000000, "Member 'HWBorder_SetBorderColorStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWButton.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWButton_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWButton_HandleInputStateChanged) == 0x000001, "Wrong alignment on HWButton_HandleInputStateChanged");
static_assert(sizeof(HWButton_HandleInputStateChanged) == 0x000001, "Wrong size on HWButton_HandleInputStateChanged");
static_assert(offsetof(HWButton_HandleInputStateChanged, InputState) == 0x000000, "Member 'HWButton_HandleInputStateChanged::InputState' has a wrong offset!");

// Function HemingwayUI.HWListView.ListViewSetSelectedItem
// 0x0010 (0x0010 - 0x0000)
struct HWListView_ListViewSetSelectedItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcastClick;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWListView_ListViewSetSelectedItem) == 0x000008, "Wrong alignment on HWListView_ListViewSetSelectedItem");
static_assert(sizeof(HWListView_ListViewSetSelectedItem) == 0x000010, "Wrong size on HWListView_ListViewSetSelectedItem");
static_assert(offsetof(HWListView_ListViewSetSelectedItem, Item) == 0x000000, "Member 'HWListView_ListViewSetSelectedItem::Item' has a wrong offset!");
static_assert(offsetof(HWListView_ListViewSetSelectedItem, bBroadcastClick) == 0x000008, "Member 'HWListView_ListViewSetSelectedItem::bBroadcastClick' has a wrong offset!");

// Function HemingwayUI.HWRichTextBlock.ClearTagOverrides
// 0x0003 (0x0003 - 0x0000)
struct HWRichTextBlock_ClearTagOverrides final
{
public:
	bool                                          bClearFontOverrides;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearFontColorOverrides;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadTextStyles;                                 // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRichTextBlock_ClearTagOverrides) == 0x000001, "Wrong alignment on HWRichTextBlock_ClearTagOverrides");
static_assert(sizeof(HWRichTextBlock_ClearTagOverrides) == 0x000003, "Wrong size on HWRichTextBlock_ClearTagOverrides");
static_assert(offsetof(HWRichTextBlock_ClearTagOverrides, bClearFontOverrides) == 0x000000, "Member 'HWRichTextBlock_ClearTagOverrides::bClearFontOverrides' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_ClearTagOverrides, bClearFontColorOverrides) == 0x000001, "Member 'HWRichTextBlock_ClearTagOverrides::bClearFontColorOverrides' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_ClearTagOverrides, bReloadTextStyles) == 0x000002, "Member 'HWRichTextBlock_ClearTagOverrides::bReloadTextStyles' has a wrong offset!");

// Function HemingwayUI.HWRichTextBlock.SetFontColorStyleTag
// 0x0010 (0x0010 - 0x0000)
struct HWRichTextBlock_SetFontColorStyleTag final
{
public:
	class FName                                   StyleRowName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewStyleTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRichTextBlock_SetFontColorStyleTag) == 0x000004, "Wrong alignment on HWRichTextBlock_SetFontColorStyleTag");
static_assert(sizeof(HWRichTextBlock_SetFontColorStyleTag) == 0x000010, "Wrong size on HWRichTextBlock_SetFontColorStyleTag");
static_assert(offsetof(HWRichTextBlock_SetFontColorStyleTag, StyleRowName) == 0x000000, "Member 'HWRichTextBlock_SetFontColorStyleTag::StyleRowName' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_SetFontColorStyleTag, NewStyleTag) == 0x000008, "Member 'HWRichTextBlock_SetFontColorStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWRichTextBlock.SetFontStyleTag
// 0x0010 (0x0010 - 0x0000)
struct HWRichTextBlock_SetFontStyleTag final
{
public:
	class FName                                   StyleRowName;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewStyleTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRichTextBlock_SetFontStyleTag) == 0x000004, "Wrong alignment on HWRichTextBlock_SetFontStyleTag");
static_assert(sizeof(HWRichTextBlock_SetFontStyleTag) == 0x000010, "Wrong size on HWRichTextBlock_SetFontStyleTag");
static_assert(offsetof(HWRichTextBlock_SetFontStyleTag, StyleRowName) == 0x000000, "Member 'HWRichTextBlock_SetFontStyleTag::StyleRowName' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_SetFontStyleTag, NewStyleTag) == 0x000008, "Member 'HWRichTextBlock_SetFontStyleTag::NewStyleTag' has a wrong offset!");

// Function HemingwayUI.HWRichTextBlock.GetColorGlobalModifier
// 0x000C (0x000C - 0x0000)
struct HWRichTextBlock_GetColorGlobalModifier final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWRichTextBlock_GetColorGlobalModifier) == 0x000004, "Wrong alignment on HWRichTextBlock_GetColorGlobalModifier");
static_assert(sizeof(HWRichTextBlock_GetColorGlobalModifier) == 0x00000C, "Wrong size on HWRichTextBlock_GetColorGlobalModifier");
static_assert(offsetof(HWRichTextBlock_GetColorGlobalModifier, RowName) == 0x000000, "Member 'HWRichTextBlock_GetColorGlobalModifier::RowName' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_GetColorGlobalModifier, ReturnValue) == 0x000008, "Member 'HWRichTextBlock_GetColorGlobalModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRichTextBlock.GetFontGlobalModifier
// 0x000C (0x000C - 0x0000)
struct HWRichTextBlock_GetFontGlobalModifier final
{
public:
	class FName                                   RowName;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWUIStyleGlobalModifierType                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWRichTextBlock_GetFontGlobalModifier) == 0x000004, "Wrong alignment on HWRichTextBlock_GetFontGlobalModifier");
static_assert(sizeof(HWRichTextBlock_GetFontGlobalModifier) == 0x00000C, "Wrong size on HWRichTextBlock_GetFontGlobalModifier");
static_assert(offsetof(HWRichTextBlock_GetFontGlobalModifier, RowName) == 0x000000, "Member 'HWRichTextBlock_GetFontGlobalModifier::RowName' has a wrong offset!");
static_assert(offsetof(HWRichTextBlock_GetFontGlobalModifier, ReturnValue) == 0x000008, "Member 'HWRichTextBlock_GetFontGlobalModifier::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScrollingTextBlock.SetScrollingEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWScrollingTextBlock_SetScrollingEnabled final
{
public:
	bool                                          bInIsScrollingEnabled;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScrollingTextBlock_SetScrollingEnabled) == 0x000001, "Wrong alignment on HWScrollingTextBlock_SetScrollingEnabled");
static_assert(sizeof(HWScrollingTextBlock_SetScrollingEnabled) == 0x000001, "Wrong size on HWScrollingTextBlock_SetScrollingEnabled");
static_assert(offsetof(HWScrollingTextBlock_SetScrollingEnabled, bInIsScrollingEnabled) == 0x000000, "Member 'HWScrollingTextBlock_SetScrollingEnabled::bInIsScrollingEnabled' has a wrong offset!");

// Function HemingwayUI.HWScrollingTextBlock.IsScrollingEnabled
// 0x0001 (0x0001 - 0x0000)
struct HWScrollingTextBlock_IsScrollingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScrollingTextBlock_IsScrollingEnabled) == 0x000001, "Wrong alignment on HWScrollingTextBlock_IsScrollingEnabled");
static_assert(sizeof(HWScrollingTextBlock_IsScrollingEnabled) == 0x000001, "Wrong size on HWScrollingTextBlock_IsScrollingEnabled");
static_assert(offsetof(HWScrollingTextBlock_IsScrollingEnabled, ReturnValue) == 0x000000, "Member 'HWScrollingTextBlock_IsScrollingEnabled::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWWidgetSwitcher.SetNextActiveWidget
// 0x0001 (0x0001 - 0x0000)
struct HWWidgetSwitcher_SetNextActiveWidget final
{
public:
	bool                                          bLoopAround;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidgetSwitcher_SetNextActiveWidget) == 0x000001, "Wrong alignment on HWWidgetSwitcher_SetNextActiveWidget");
static_assert(sizeof(HWWidgetSwitcher_SetNextActiveWidget) == 0x000001, "Wrong size on HWWidgetSwitcher_SetNextActiveWidget");
static_assert(offsetof(HWWidgetSwitcher_SetNextActiveWidget, bLoopAround) == 0x000000, "Member 'HWWidgetSwitcher_SetNextActiveWidget::bLoopAround' has a wrong offset!");

// Function HemingwayUI.HWWidgetSwitcher.SetPreviousActiveWidget
// 0x0001 (0x0001 - 0x0000)
struct HWWidgetSwitcher_SetPreviousActiveWidget final
{
public:
	bool                                          bLoopAround;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWidgetSwitcher_SetPreviousActiveWidget) == 0x000001, "Wrong alignment on HWWidgetSwitcher_SetPreviousActiveWidget");
static_assert(sizeof(HWWidgetSwitcher_SetPreviousActiveWidget) == 0x000001, "Wrong size on HWWidgetSwitcher_SetPreviousActiveWidget");
static_assert(offsetof(HWWidgetSwitcher_SetPreviousActiveWidget, bLoopAround) == 0x000000, "Member 'HWWidgetSwitcher_SetPreviousActiveWidget::bLoopAround' has a wrong offset!");

// Function HemingwayUI.HWViewManager.AddUniqueRoute
// 0x0020 (0x0020 - 0x0000)
struct HWViewManager_AddUniqueRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RouteData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWViewManager_AddUniqueRoute) == 0x000008, "Wrong alignment on HWViewManager_AddUniqueRoute");
static_assert(sizeof(HWViewManager_AddUniqueRoute) == 0x000020, "Wrong size on HWViewManager_AddUniqueRoute");
static_assert(offsetof(HWViewManager_AddUniqueRoute, RouteTag) == 0x000000, "Member 'HWViewManager_AddUniqueRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_AddUniqueRoute, bForceTransition) == 0x000008, "Member 'HWViewManager_AddUniqueRoute::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWViewManager_AddUniqueRoute, RouteData) == 0x000010, "Member 'HWViewManager_AddUniqueRoute::RouteData' has a wrong offset!");
static_assert(offsetof(HWViewManager_AddUniqueRoute, ReturnValue) == 0x000018, "Member 'HWViewManager_AddUniqueRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewManager.PopTopRouteFromLayer
// 0x000C (0x000C - 0x0000)
struct HWViewManager_PopTopRouteFromLayer final
{
public:
	struct FGameplayTag                           ReferenceRouteTag;                                 // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWViewManager_PopTopRouteFromLayer) == 0x000004, "Wrong alignment on HWViewManager_PopTopRouteFromLayer");
static_assert(sizeof(HWViewManager_PopTopRouteFromLayer) == 0x00000C, "Wrong size on HWViewManager_PopTopRouteFromLayer");
static_assert(offsetof(HWViewManager_PopTopRouteFromLayer, ReferenceRouteTag) == 0x000000, "Member 'HWViewManager_PopTopRouteFromLayer::ReferenceRouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_PopTopRouteFromLayer, bForceTransition) == 0x000008, "Member 'HWViewManager_PopTopRouteFromLayer::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWViewManager_PopTopRouteFromLayer, ReturnValue) == 0x000009, "Member 'HWViewManager_PopTopRouteFromLayer::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewManager.RefreshRoute
// 0x0018 (0x0018 - 0x0000)
struct HWViewManager_RefreshRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                RouteData;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWViewManager_RefreshRoute) == 0x000008, "Wrong alignment on HWViewManager_RefreshRoute");
static_assert(sizeof(HWViewManager_RefreshRoute) == 0x000018, "Wrong size on HWViewManager_RefreshRoute");
static_assert(offsetof(HWViewManager_RefreshRoute, RouteTag) == 0x000000, "Member 'HWViewManager_RefreshRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_RefreshRoute, RouteData) == 0x000008, "Member 'HWViewManager_RefreshRoute::RouteData' has a wrong offset!");
static_assert(offsetof(HWViewManager_RefreshRoute, ReturnValue) == 0x000010, "Member 'HWViewManager_RefreshRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewManager.ToggleRoute
// 0x0020 (0x0020 - 0x0000)
struct HWViewManager_ToggleRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTransition;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                RouteData;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWViewManager_ToggleRoute) == 0x000008, "Wrong alignment on HWViewManager_ToggleRoute");
static_assert(sizeof(HWViewManager_ToggleRoute) == 0x000020, "Wrong size on HWViewManager_ToggleRoute");
static_assert(offsetof(HWViewManager_ToggleRoute, RouteTag) == 0x000000, "Member 'HWViewManager_ToggleRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_ToggleRoute, bForceTransition) == 0x000008, "Member 'HWViewManager_ToggleRoute::bForceTransition' has a wrong offset!");
static_assert(offsetof(HWViewManager_ToggleRoute, RouteData) == 0x000010, "Member 'HWViewManager_ToggleRoute::RouteData' has a wrong offset!");
static_assert(offsetof(HWViewManager_ToggleRoute, ReturnValue) == 0x000018, "Member 'HWViewManager_ToggleRoute::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewManager.GetViewRouteWidget
// 0x0010 (0x0010 - 0x0000)
struct HWViewManager_GetViewRouteWidget final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWViewManager_GetViewRouteWidget) == 0x000008, "Wrong alignment on HWViewManager_GetViewRouteWidget");
static_assert(sizeof(HWViewManager_GetViewRouteWidget) == 0x000010, "Wrong size on HWViewManager_GetViewRouteWidget");
static_assert(offsetof(HWViewManager_GetViewRouteWidget, RouteTag) == 0x000000, "Member 'HWViewManager_GetViewRouteWidget::RouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_GetViewRouteWidget, ReturnValue) == 0x000008, "Member 'HWViewManager_GetViewRouteWidget::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWViewManager.GetViewWidgetByTag
// 0x0010 (0x0010 - 0x0000)
struct HWViewManager_GetViewWidgetByTag final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWViewManager_GetViewWidgetByTag) == 0x000008, "Wrong alignment on HWViewManager_GetViewWidgetByTag");
static_assert(sizeof(HWViewManager_GetViewWidgetByTag) == 0x000010, "Wrong size on HWViewManager_GetViewWidgetByTag");
static_assert(offsetof(HWViewManager_GetViewWidgetByTag, RouteTag) == 0x000000, "Member 'HWViewManager_GetViewWidgetByTag::RouteTag' has a wrong offset!");
static_assert(offsetof(HWViewManager_GetViewWidgetByTag, ReturnValue) == 0x000008, "Member 'HWViewManager_GetViewWidgetByTag::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.SetFromStoreItemPrice
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice final
{
public:
	const class URHStoreItemPrice*                StoreItemPrice;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InQuantity;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice) == 0x000008, "Wrong alignment on HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice) == 0x000010, "Wrong size on HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice, StoreItemPrice) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice::StoreItemPrice' has a wrong offset!");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice, InQuantity) == 0x000008, "Member 'HWCurrencyPriceDisplayWidget_SetFromStoreItemPrice::InQuantity' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.SetQuantity
// 0x0004 (0x0004 - 0x0000)
struct HWCurrencyPriceDisplayWidget_SetQuantity final
{
public:
	int32                                         NewQuantity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_SetQuantity) == 0x000004, "Wrong alignment on HWCurrencyPriceDisplayWidget_SetQuantity");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_SetQuantity) == 0x000004, "Wrong size on HWCurrencyPriceDisplayWidget_SetQuantity");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_SetQuantity, NewQuantity) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_SetQuantity::NewQuantity' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.UpdateSaleState
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPriceDisplayWidget_UpdateSaleState final
{
public:
	bool                                          bIsOnSale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCurrencies;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_UpdateSaleState) == 0x000004, "Wrong alignment on HWCurrencyPriceDisplayWidget_UpdateSaleState");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_UpdateSaleState) == 0x000008, "Wrong size on HWCurrencyPriceDisplayWidget_UpdateSaleState");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_UpdateSaleState, bIsOnSale) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_UpdateSaleState::bIsOnSale' has a wrong offset!");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_UpdateSaleState, NumCurrencies) == 0x000004, "Member 'HWCurrencyPriceDisplayWidget_UpdateSaleState::NumCurrencies' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetCurrencyDisplaySaleWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets final
{
public:
	TArray<class UHWCurrencyDisplayWidget*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets) == 0x000008, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets) == 0x000010, "Wrong size on HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetCurrencyDisplaySaleWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetCurrencyDisplayWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets final
{
public:
	TArray<class UHWCurrencyDisplayWidget*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets) == 0x000008, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets) == 0x000010, "Wrong size on HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetCurrencyDisplayWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetDisplayedCurrencyId
// 0x0014 (0x0014 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId final
{
public:
	struct FRH_ItemId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId) == 0x000004, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId) == 0x000014, "Wrong size on HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyId::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetDisplayedCurrencyType
// 0x0001 (0x0001 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType final
{
public:
	EHWCurrencyType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType) == 0x000001, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType) == 0x000001, "Wrong size on HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetDisplayedCurrencyType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetDividerSaleWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets) == 0x000008, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets) == 0x000010, "Wrong size on HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetDividerSaleWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPriceDisplayWidget.GetDividerWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPriceDisplayWidget_GetDividerWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPriceDisplayWidget_GetDividerWidgets) == 0x000008, "Wrong alignment on HWCurrencyPriceDisplayWidget_GetDividerWidgets");
static_assert(sizeof(HWCurrencyPriceDisplayWidget_GetDividerWidgets) == 0x000010, "Wrong size on HWCurrencyPriceDisplayWidget_GetDividerWidgets");
static_assert(offsetof(HWCurrencyPriceDisplayWidget_GetDividerWidgets, ReturnValue) == 0x000000, "Member 'HWCurrencyPriceDisplayWidget_GetDividerWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPurchaseSaleDisplayWidget.DisplayDiscountPercentage
// 0x0004 (0x0004 - 0x0000)
struct HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage final
{
public:
	int32                                         Discount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage) == 0x000004, "Wrong alignment on HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage");
static_assert(sizeof(HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage) == 0x000004, "Wrong size on HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage");
static_assert(offsetof(HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage, Discount) == 0x000000, "Member 'HWPurchaseSaleDisplayWidget_DisplayDiscountPercentage::Discount' has a wrong offset!");

// Function HemingwayUI.HWPurchaseSaleDisplayWidget.SetFromPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseSaleDisplayWidget_SetFromPortalOffer final
{
public:
	class URHPortalOffer*                         InPortalOffer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseSaleDisplayWidget_SetFromPortalOffer) == 0x000008, "Wrong alignment on HWPurchaseSaleDisplayWidget_SetFromPortalOffer");
static_assert(sizeof(HWPurchaseSaleDisplayWidget_SetFromPortalOffer) == 0x000008, "Wrong size on HWPurchaseSaleDisplayWidget_SetFromPortalOffer");
static_assert(offsetof(HWPurchaseSaleDisplayWidget_SetFromPortalOffer, InPortalOffer) == 0x000000, "Member 'HWPurchaseSaleDisplayWidget_SetFromPortalOffer::InPortalOffer' has a wrong offset!");

// Function HemingwayUI.HWPurchaseSaleDisplayWidget.SetFromStoreItemPrice
// 0x0008 (0x0008 - 0x0000)
struct HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice final
{
public:
	const class URHStoreItemPrice*                StoreItemPrice;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice) == 0x000008, "Wrong alignment on HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice");
static_assert(sizeof(HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice) == 0x000008, "Wrong size on HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice");
static_assert(offsetof(HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice, StoreItemPrice) == 0x000000, "Member 'HWPurchaseSaleDisplayWidget_SetFromStoreItemPrice::StoreItemPrice' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayCurrency
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayCurrency final
{
public:
	const class URHCurrency*                      CURRENCY;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayCurrency) == 0x000008, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayCurrency");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayCurrency) == 0x000008, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayCurrency");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayCurrency, CURRENCY) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayCurrency::CURRENCY' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayImages
// 0x0050 (0x0050 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayImages final
{
public:
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SplashImage;                                       // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayImages) == 0x000008, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayImages");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayImages) == 0x000050, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayImages");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayImages, Image) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayImages::Image' has a wrong offset!");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayImages, SplashImage) == 0x000028, "Member 'HWCurrencyPurchaseEntryWidget_DisplayImages::SplashImage' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayLoadingPriceState
// 0x0001 (0x0001 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState final
{
public:
	bool                                          bIsLoading;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState) == 0x000001, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState) == 0x000001, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState, bIsLoading) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayLoadingPriceState::bIsLoading' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayLootPrice
// 0x0010 (0x0010 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayLootPrice final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayLootPrice) == 0x000008, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayLootPrice");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayLootPrice) == 0x000010, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayLootPrice");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayLootPrice, PriceItem) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayLootPrice::PriceItem' has a wrong offset!");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayLootPrice, PriceGroup) == 0x000008, "Member 'HWCurrencyPurchaseEntryWidget_DisplayLootPrice::PriceGroup' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayPortalOffer final
{
public:
	const class URHPortalOffer*                   PortalOffer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayPortalOffer) == 0x000008, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayPortalOffer");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayPortalOffer) == 0x000008, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayPortalOffer");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayPortalOffer, PortalOffer) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayPortalOffer::PortalOffer' has a wrong offset!");

// Function HemingwayUI.HWCurrencyPurchaseEntryWidget.DisplayQuantities
// 0x0008 (0x0008 - 0x0000)
struct HWCurrencyPurchaseEntryWidget_DisplayQuantities final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusQuantity;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWCurrencyPurchaseEntryWidget_DisplayQuantities) == 0x000004, "Wrong alignment on HWCurrencyPurchaseEntryWidget_DisplayQuantities");
static_assert(sizeof(HWCurrencyPurchaseEntryWidget_DisplayQuantities) == 0x000008, "Wrong size on HWCurrencyPurchaseEntryWidget_DisplayQuantities");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayQuantities, Quantity) == 0x000000, "Member 'HWCurrencyPurchaseEntryWidget_DisplayQuantities::Quantity' has a wrong offset!");
static_assert(offsetof(HWCurrencyPurchaseEntryWidget_DisplayQuantities, BonusQuantity) == 0x000004, "Member 'HWCurrencyPurchaseEntryWidget_DisplayQuantities::BonusQuantity' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.GetDisplayedBuildEntry
// 0x0070 (0x0070 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry final
{
public:
	bool                                          bRefreshItems;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuildEntry                       ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry) == 0x000070, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry, bRefreshItems) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry::bRefreshItems' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry, ReturnValue) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryWidget_GetDisplayedBuildEntry::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleItemEntryHovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleItemEntryRightClicked
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleItemEntrySelected
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleItemEntryUnhovered
// 0x0030 (0x0030 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered final
{
public:
	class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UHWEquipmentItem>        InDisplayedItem;                                   // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered) == 0x000030, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleItemEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleLongDescTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted) == 0x000020, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted, Text) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted, CommitMethod) == 0x000018, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleLongDescTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleShortDescTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted) == 0x000020, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted, Text) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted, CommitMethod) == 0x000018, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleShortDescTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.HandleTitleTextCommitted
// 0x0020 (0x0020 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted) == 0x000008, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted) == 0x000020, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted, Text) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted::Text' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted, CommitMethod) == 0x000018, "Member 'HWGodBuilderBuildDisplayEntryWidget_HandleTitleTextCommitted::CommitMethod' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.SetEntryExpanded
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded final
{
public:
	bool                                          bInIsExpanded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded, bInIsExpanded) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_SetEntryExpanded::bInIsExpanded' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.SetEntryType
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_SetEntryType final
{
public:
	EHWGodBuilderEntryType                        InEntryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_SetEntryType) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_SetEntryType");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_SetEntryType) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_SetEntryType");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_SetEntryType, InEntryType) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_SetEntryType::InEntryType' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.SetIsEditable
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_SetIsEditable final
{
public:
	bool                                          bInIsEditable;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_SetIsEditable) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_SetIsEditable");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_SetIsEditable) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_SetIsEditable");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_SetIsEditable, bInIsEditable) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_SetIsEditable::bInIsEditable' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.SetIsHovered
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_SetIsHovered final
{
public:
	bool                                          bInIsHovered;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_SetIsHovered) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_SetIsHovered");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_SetIsHovered) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_SetIsHovered");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_SetIsHovered, bInIsHovered) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_SetIsHovered::bInIsHovered' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildDisplayEntryWidget.GetEntryType
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildDisplayEntryWidget_GetEntryType final
{
public:
	EHWGodBuilderEntryType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildDisplayEntryWidget_GetEntryType) == 0x000001, "Wrong alignment on HWGodBuilderBuildDisplayEntryWidget_GetEntryType");
static_assert(sizeof(HWGodBuilderBuildDisplayEntryWidget_GetEntryType) == 0x000001, "Wrong size on HWGodBuilderBuildDisplayEntryWidget_GetEntryType");
static_assert(offsetof(HWGodBuilderBuildDisplayEntryWidget_GetEntryType, ReturnValue) == 0x000000, "Member 'HWGodBuilderBuildDisplayEntryWidget_GetEntryType::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListWidget.HandleBuildHovered
// 0x0198 (0x0198 - 0x0000)
struct HWGodBuilderBuildsListWidget_HandleBuildHovered final
{
public:
	class UHWGodBuilderBuildsListEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodBuild                            GodBuild;                                          // 0x0008(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListWidget_HandleBuildHovered) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListWidget_HandleBuildHovered");
static_assert(sizeof(HWGodBuilderBuildsListWidget_HandleBuildHovered) == 0x000198, "Wrong size on HWGodBuilderBuildsListWidget_HandleBuildHovered");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildsListWidget_HandleBuildHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildHovered, GodBuild) == 0x000008, "Member 'HWGodBuilderBuildsListWidget_HandleBuildHovered::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListWidget.HandleBuildSelected
// 0x0198 (0x0198 - 0x0000)
struct HWGodBuilderBuildsListWidget_HandleBuildSelected final
{
public:
	class UHWGodBuilderBuildsListEntryWidget*     EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWGodBuild                            GodBuild;                                          // 0x0008(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListWidget_HandleBuildSelected) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListWidget_HandleBuildSelected");
static_assert(sizeof(HWGodBuilderBuildsListWidget_HandleBuildSelected) == 0x000198, "Wrong size on HWGodBuilderBuildsListWidget_HandleBuildSelected");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildSelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderBuildsListWidget_HandleBuildSelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildSelected, GodBuild) == 0x000008, "Member 'HWGodBuilderBuildsListWidget_HandleBuildSelected::GodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListWidget.HandleBuildsListScrolled
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderBuildsListWidget_HandleBuildsListScrolled final
{
public:
	float                                         CurrentOffset;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListWidget_HandleBuildsListScrolled) == 0x000004, "Wrong alignment on HWGodBuilderBuildsListWidget_HandleBuildsListScrolled");
static_assert(sizeof(HWGodBuilderBuildsListWidget_HandleBuildsListScrolled) == 0x000004, "Wrong size on HWGodBuilderBuildsListWidget_HandleBuildsListScrolled");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildsListScrolled, CurrentOffset) == 0x000000, "Member 'HWGodBuilderBuildsListWidget_HandleBuildsListScrolled::CurrentOffset' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListWidget.HandleBuildUpdated
// 0x0198 (0x0198 - 0x0000)
struct HWGodBuilderBuildsListWidget_HandleBuildUpdated final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            InGodBuild;                                        // 0x0008(0x0190)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListWidget_HandleBuildUpdated) == 0x000008, "Wrong alignment on HWGodBuilderBuildsListWidget_HandleBuildUpdated");
static_assert(sizeof(HWGodBuilderBuildsListWidget_HandleBuildUpdated) == 0x000198, "Wrong size on HWGodBuilderBuildsListWidget_HandleBuildUpdated");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildUpdated, bSuccess) == 0x000000, "Member 'HWGodBuilderBuildsListWidget_HandleBuildUpdated::bSuccess' has a wrong offset!");
static_assert(offsetof(HWGodBuilderBuildsListWidget_HandleBuildUpdated, InGodBuild) == 0x000008, "Member 'HWGodBuilderBuildsListWidget_HandleBuildUpdated::InGodBuild' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderBuildsListWidget.UpdateListDisplay
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderBuildsListWidget_UpdateListDisplay final
{
public:
	EHWBuildsListDisplayType                      BuildsType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderBuildsListWidget_UpdateListDisplay) == 0x000001, "Wrong alignment on HWGodBuilderBuildsListWidget_UpdateListDisplay");
static_assert(sizeof(HWGodBuilderBuildsListWidget_UpdateListDisplay) == 0x000001, "Wrong size on HWGodBuilderBuildsListWidget_UpdateListDisplay");
static_assert(offsetof(HWGodBuilderBuildsListWidget_UpdateListDisplay, BuildsType) == 0x000000, "Member 'HWGodBuilderBuildsListWidget_UpdateListDisplay::BuildsType' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderCopyToPopupWidget.GetSelectedGod
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderCopyToPopupWidget_GetSelectedGod final
{
public:
	const class UHWCharacterItem*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderCopyToPopupWidget_GetSelectedGod) == 0x000008, "Wrong alignment on HWGodBuilderCopyToPopupWidget_GetSelectedGod");
static_assert(sizeof(HWGodBuilderCopyToPopupWidget_GetSelectedGod) == 0x000008, "Wrong size on HWGodBuilderCopyToPopupWidget_GetSelectedGod");
static_assert(offsetof(HWGodBuilderCopyToPopupWidget_GetSelectedGod, ReturnValue) == 0x000000, "Member 'HWGodBuilderCopyToPopupWidget_GetSelectedGod::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListCategoryEntryWidget.HandleItemsListEntryHovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered");
static_assert(sizeof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered) == 0x000010, "Wrong size on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListCategoryEntryWidget.HandleItemsListEntryRightClicked
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked) == 0x000008, "Wrong alignment on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked");
static_assert(sizeof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked) == 0x000010, "Wrong size on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListCategoryEntryWidget.HandleItemsListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected");
static_assert(sizeof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected) == 0x000010, "Wrong size on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListCategoryEntryWidget.HandleItemsListEntryUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered) == 0x000008, "Wrong alignment on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered");
static_assert(sizeof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered) == 0x000010, "Wrong size on HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListCategoryEntryWidget_HandleItemsListEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.FindAndSelectItem
// 0x0008 (0x0008 - 0x0000)
struct HWGodBuilderItemsListWidget_FindAndSelectItem final
{
public:
	const class UHWEquipmentItem*                 SelectedEquipmentItem;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_FindAndSelectItem) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_FindAndSelectItem");
static_assert(sizeof(HWGodBuilderItemsListWidget_FindAndSelectItem) == 0x000008, "Wrong size on HWGodBuilderItemsListWidget_FindAndSelectItem");
static_assert(offsetof(HWGodBuilderItemsListWidget_FindAndSelectItem, SelectedEquipmentItem) == 0x000000, "Member 'HWGodBuilderItemsListWidget_FindAndSelectItem::SelectedEquipmentItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.HandleItemsListEntryHovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListWidget_HandleItemsListEntryHovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_HandleItemsListEntryHovered) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_HandleItemsListEntryHovered");
static_assert(sizeof(HWGodBuilderItemsListWidget_HandleItemsListEntryHovered) == 0x000010, "Wrong size on HWGodBuilderItemsListWidget_HandleItemsListEntryHovered");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryHovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryHovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryHovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryHovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.HandleItemsListEntryRightClicked
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked");
static_assert(sizeof(HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked) == 0x000010, "Wrong size on HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryRightClicked::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.HandleItemsListEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListWidget_HandleItemsListEntrySelected final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_HandleItemsListEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_HandleItemsListEntrySelected");
static_assert(sizeof(HWGodBuilderItemsListWidget_HandleItemsListEntrySelected) == 0x000010, "Wrong size on HWGodBuilderItemsListWidget_HandleItemsListEntrySelected");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntrySelected, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntrySelected::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.HandleItemsListEntryUnhovered
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered final
{
public:
	class UHWGodBuilderItemsListItemEntryWidget*  EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UHWEquipmentItem*                 InDisplayedItem;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered");
static_assert(sizeof(HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered) == 0x000010, "Wrong size on HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered, EntryWidget) == 0x000000, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered, InDisplayedItem) == 0x000008, "Member 'HWGodBuilderItemsListWidget_HandleItemsListEntryUnhovered::InDisplayedItem' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.OnCharacterSpecificItemTableLoaded
// 0x0028 (0x0028 - 0x0000)
struct HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded final
{
public:
	TSoftObjectPtr<class UDataTable>              ItemDataTableSoftPtr;                              // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded");
static_assert(sizeof(HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded) == 0x000028, "Wrong size on HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded, ItemDataTableSoftPtr) == 0x000000, "Member 'HWGodBuilderItemsListWidget_OnCharacterSpecificItemTableLoaded::ItemDataTableSoftPtr' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.OnFilterAdded
// 0x000C (0x000C - 0x0000)
struct HWGodBuilderItemsListWidget_OnFilterAdded final
{
public:
	struct FGameplayTag                           AddedFilterTag;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderItemsListWidget_OnFilterAdded) == 0x000004, "Wrong alignment on HWGodBuilderItemsListWidget_OnFilterAdded");
static_assert(sizeof(HWGodBuilderItemsListWidget_OnFilterAdded) == 0x00000C, "Wrong size on HWGodBuilderItemsListWidget_OnFilterAdded");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterAdded, AddedFilterTag) == 0x000000, "Member 'HWGodBuilderItemsListWidget_OnFilterAdded::AddedFilterTag' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterAdded, bShouldFilter) == 0x000008, "Member 'HWGodBuilderItemsListWidget_OnFilterAdded::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.OnFilterCleared
// 0x0002 (0x0002 - 0x0000)
struct HWGodBuilderItemsListWidget_OnFilterCleared final
{
public:
	bool                                          bClearSearchText;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearRoles;                                       // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_OnFilterCleared) == 0x000001, "Wrong alignment on HWGodBuilderItemsListWidget_OnFilterCleared");
static_assert(sizeof(HWGodBuilderItemsListWidget_OnFilterCleared) == 0x000002, "Wrong size on HWGodBuilderItemsListWidget_OnFilterCleared");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterCleared, bClearSearchText) == 0x000000, "Member 'HWGodBuilderItemsListWidget_OnFilterCleared::bClearSearchText' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterCleared, bClearRoles) == 0x000001, "Member 'HWGodBuilderItemsListWidget_OnFilterCleared::bClearRoles' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.OnFilterRemoved
// 0x000C (0x000C - 0x0000)
struct HWGodBuilderItemsListWidget_OnFilterRemoved final
{
public:
	struct FGameplayTag                           RemovedFilterTag;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFilter;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderItemsListWidget_OnFilterRemoved) == 0x000004, "Wrong alignment on HWGodBuilderItemsListWidget_OnFilterRemoved");
static_assert(sizeof(HWGodBuilderItemsListWidget_OnFilterRemoved) == 0x00000C, "Wrong size on HWGodBuilderItemsListWidget_OnFilterRemoved");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterRemoved, RemovedFilterTag) == 0x000000, "Member 'HWGodBuilderItemsListWidget_OnFilterRemoved::RemovedFilterTag' has a wrong offset!");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnFilterRemoved, bShouldFilter) == 0x000008, "Member 'HWGodBuilderItemsListWidget_OnFilterRemoved::bShouldFilter' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.OnSearchTextChanged
// 0x0018 (0x0018 - 0x0000)
struct HWGodBuilderItemsListWidget_OnSearchTextChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_OnSearchTextChanged) == 0x000008, "Wrong alignment on HWGodBuilderItemsListWidget_OnSearchTextChanged");
static_assert(sizeof(HWGodBuilderItemsListWidget_OnSearchTextChanged) == 0x000018, "Wrong size on HWGodBuilderItemsListWidget_OnSearchTextChanged");
static_assert(offsetof(HWGodBuilderItemsListWidget_OnSearchTextChanged, InText) == 0x000000, "Member 'HWGodBuilderItemsListWidget_OnSearchTextChanged::InText' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.SetDesiredFocusToFilter
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderItemsListWidget_SetDesiredFocusToFilter final
{
public:
	bool                                          bToFilter;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_SetDesiredFocusToFilter) == 0x000001, "Wrong alignment on HWGodBuilderItemsListWidget_SetDesiredFocusToFilter");
static_assert(sizeof(HWGodBuilderItemsListWidget_SetDesiredFocusToFilter) == 0x000001, "Wrong size on HWGodBuilderItemsListWidget_SetDesiredFocusToFilter");
static_assert(offsetof(HWGodBuilderItemsListWidget_SetDesiredFocusToFilter, bToFilter) == 0x000000, "Member 'HWGodBuilderItemsListWidget_SetDesiredFocusToFilter::bToFilter' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.SetDesiredFocusToSearch
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderItemsListWidget_SetDesiredFocusToSearch final
{
public:
	bool                                          bToSearch;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_SetDesiredFocusToSearch) == 0x000001, "Wrong alignment on HWGodBuilderItemsListWidget_SetDesiredFocusToSearch");
static_assert(sizeof(HWGodBuilderItemsListWidget_SetDesiredFocusToSearch) == 0x000001, "Wrong size on HWGodBuilderItemsListWidget_SetDesiredFocusToSearch");
static_assert(offsetof(HWGodBuilderItemsListWidget_SetDesiredFocusToSearch, bToSearch) == 0x000000, "Member 'HWGodBuilderItemsListWidget_SetDesiredFocusToSearch::bToSearch' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderItemsListWidget.ShouldShowFilter
// 0x0001 (0x0001 - 0x0000)
struct HWGodBuilderItemsListWidget_ShouldShowFilter final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderItemsListWidget_ShouldShowFilter) == 0x000001, "Wrong alignment on HWGodBuilderItemsListWidget_ShouldShowFilter");
static_assert(sizeof(HWGodBuilderItemsListWidget_ShouldShowFilter) == 0x000001, "Wrong size on HWGodBuilderItemsListWidget_ShouldShowFilter");
static_assert(offsetof(HWGodBuilderItemsListWidget_ShouldShowFilter, bShouldShow) == 0x000000, "Member 'HWGodBuilderItemsListWidget_ShouldShowFilter::bShouldShow' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderRolesListWidget.HandleRoleEntrySelected
// 0x0010 (0x0010 - 0x0000)
struct HWGodBuilderRolesListWidget_HandleRoleEntrySelected final
{
public:
	class UHWGodBuilderRolesListEntryWidget*      EntryWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterRole                                EntryRole;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodBuilderRolesListWidget_HandleRoleEntrySelected) == 0x000008, "Wrong alignment on HWGodBuilderRolesListWidget_HandleRoleEntrySelected");
static_assert(sizeof(HWGodBuilderRolesListWidget_HandleRoleEntrySelected) == 0x000010, "Wrong size on HWGodBuilderRolesListWidget_HandleRoleEntrySelected");
static_assert(offsetof(HWGodBuilderRolesListWidget_HandleRoleEntrySelected, EntryWidget) == 0x000000, "Member 'HWGodBuilderRolesListWidget_HandleRoleEntrySelected::EntryWidget' has a wrong offset!");
static_assert(offsetof(HWGodBuilderRolesListWidget_HandleRoleEntrySelected, EntryRole) == 0x000008, "Member 'HWGodBuilderRolesListWidget_HandleRoleEntrySelected::EntryRole' has a wrong offset!");

// Function HemingwayUI.HWGodBuilderStatsDisplayWidget.HandleStatsLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged) == 0x000004, "Wrong alignment on HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged");
static_assert(sizeof(HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged) == 0x000004, "Wrong size on HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged");
static_assert(offsetof(HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged, Direction) == 0x000000, "Member 'HWGodBuilderStatsDisplayWidget_HandleStatsLevelChanged::Direction' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.BP_SetGodChoices
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_BP_SetGodChoices final
{
public:
	TArray<class UHWCharacterItem*>               GodChoices;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_BP_SetGodChoices) == 0x000008, "Wrong alignment on HWGodSelectorWidget_BP_SetGodChoices");
static_assert(sizeof(HWGodSelectorWidget_BP_SetGodChoices) == 0x000010, "Wrong size on HWGodSelectorWidget_BP_SetGodChoices");
static_assert(offsetof(HWGodSelectorWidget_BP_SetGodChoices, GodChoices) == 0x000000, "Member 'HWGodSelectorWidget_BP_SetGodChoices::GodChoices' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.HandleGodEntryHoverStateUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_HandleGodEntryHoverStateUpdated final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodSelectorWidget_HandleGodEntryHoverStateUpdated) == 0x000008, "Wrong alignment on HWGodSelectorWidget_HandleGodEntryHoverStateUpdated");
static_assert(sizeof(HWGodSelectorWidget_HandleGodEntryHoverStateUpdated) == 0x000010, "Wrong size on HWGodSelectorWidget_HandleGodEntryHoverStateUpdated");
static_assert(offsetof(HWGodSelectorWidget_HandleGodEntryHoverStateUpdated, GodItem) == 0x000000, "Member 'HWGodSelectorWidget_HandleGodEntryHoverStateUpdated::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodSelectorWidget_HandleGodEntryHoverStateUpdated, bIsHovered) == 0x000008, "Member 'HWGodSelectorWidget_HandleGodEntryHoverStateUpdated::bIsHovered' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.HandleGodEntrySelectStateUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_HandleGodEntrySelectStateUpdated final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWGodSelectorWidget_HandleGodEntrySelectStateUpdated) == 0x000008, "Wrong alignment on HWGodSelectorWidget_HandleGodEntrySelectStateUpdated");
static_assert(sizeof(HWGodSelectorWidget_HandleGodEntrySelectStateUpdated) == 0x000010, "Wrong size on HWGodSelectorWidget_HandleGodEntrySelectStateUpdated");
static_assert(offsetof(HWGodSelectorWidget_HandleGodEntrySelectStateUpdated, GodItem) == 0x000000, "Member 'HWGodSelectorWidget_HandleGodEntrySelectStateUpdated::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodSelectorWidget_HandleGodEntrySelectStateUpdated, bIsSelected) == 0x000008, "Member 'HWGodSelectorWidget_HandleGodEntrySelectStateUpdated::bIsSelected' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.OnGodEntriesAdded
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_OnGodEntriesAdded final
{
public:
	TArray<class UHWGodSelectorEntryWidget*>      GodEntries;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_OnGodEntriesAdded) == 0x000008, "Wrong alignment on HWGodSelectorWidget_OnGodEntriesAdded");
static_assert(sizeof(HWGodSelectorWidget_OnGodEntriesAdded) == 0x000010, "Wrong size on HWGodSelectorWidget_OnGodEntriesAdded");
static_assert(offsetof(HWGodSelectorWidget_OnGodEntriesAdded, GodEntries) == 0x000000, "Member 'HWGodSelectorWidget_OnGodEntriesAdded::GodEntries' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.SelectAtIndex
// 0x0004 (0x0004 - 0x0000)
struct HWGodSelectorWidget_SelectAtIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_SelectAtIndex) == 0x000004, "Wrong alignment on HWGodSelectorWidget_SelectAtIndex");
static_assert(sizeof(HWGodSelectorWidget_SelectAtIndex) == 0x000004, "Wrong size on HWGodSelectorWidget_SelectAtIndex");
static_assert(offsetof(HWGodSelectorWidget_SelectAtIndex, Index_0) == 0x000000, "Member 'HWGodSelectorWidget_SelectAtIndex::Index_0' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.SetDisabledChoices
// 0x0020 (0x0020 - 0x0000)
struct HWGodSelectorWidget_SetDisabledChoices final
{
public:
	struct FGameplayTagContainer                  InDisabledGodsTagContainer;                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_SetDisabledChoices) == 0x000008, "Wrong alignment on HWGodSelectorWidget_SetDisabledChoices");
static_assert(sizeof(HWGodSelectorWidget_SetDisabledChoices) == 0x000020, "Wrong size on HWGodSelectorWidget_SetDisabledChoices");
static_assert(offsetof(HWGodSelectorWidget_SetDisabledChoices, InDisabledGodsTagContainer) == 0x000000, "Member 'HWGodSelectorWidget_SetDisabledChoices::InDisabledGodsTagContainer' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.BP_GetCurrentSelectedGods
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_BP_GetCurrentSelectedGods final
{
public:
	TArray<class UHWCharacterItem*>               OutSelectedGods;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_BP_GetCurrentSelectedGods) == 0x000008, "Wrong alignment on HWGodSelectorWidget_BP_GetCurrentSelectedGods");
static_assert(sizeof(HWGodSelectorWidget_BP_GetCurrentSelectedGods) == 0x000010, "Wrong size on HWGodSelectorWidget_BP_GetCurrentSelectedGods");
static_assert(offsetof(HWGodSelectorWidget_BP_GetCurrentSelectedGods, OutSelectedGods) == 0x000000, "Member 'HWGodSelectorWidget_BP_GetCurrentSelectedGods::OutSelectedGods' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.GetGodEntryWidgetForGod
// 0x0010 (0x0010 - 0x0000)
struct HWGodSelectorWidget_GetGodEntryWidgetForGod final
{
public:
	const class UHWCharacterItem*                 GodItem;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodSelectorEntryWidget*              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_GetGodEntryWidgetForGod) == 0x000008, "Wrong alignment on HWGodSelectorWidget_GetGodEntryWidgetForGod");
static_assert(sizeof(HWGodSelectorWidget_GetGodEntryWidgetForGod) == 0x000010, "Wrong size on HWGodSelectorWidget_GetGodEntryWidgetForGod");
static_assert(offsetof(HWGodSelectorWidget_GetGodEntryWidgetForGod, GodItem) == 0x000000, "Member 'HWGodSelectorWidget_GetGodEntryWidgetForGod::GodItem' has a wrong offset!");
static_assert(offsetof(HWGodSelectorWidget_GetGodEntryWidgetForGod, ReturnValue) == 0x000008, "Member 'HWGodSelectorWidget_GetGodEntryWidgetForGod::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWGodSelectorWidget.GetGodSubsystem
// 0x0008 (0x0008 - 0x0000)
struct HWGodSelectorWidget_GetGodSubsystem final
{
public:
	class UHWGodSubsystem*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWGodSelectorWidget_GetGodSubsystem) == 0x000008, "Wrong alignment on HWGodSelectorWidget_GetGodSubsystem");
static_assert(sizeof(HWGodSelectorWidget_GetGodSubsystem) == 0x000008, "Wrong size on HWGodSelectorWidget_GetGodSubsystem");
static_assert(offsetof(HWGodSelectorWidget_GetGodSubsystem, ReturnValue) == 0x000000, "Member 'HWGodSelectorWidget_GetGodSubsystem::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWScreenAlertManager.AddedAlert
// 0x0038 (0x0038 - 0x0000)
struct HWScreenAlertManager_AddedAlert final
{
public:
	class UHWImage*                               AlertImage;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAlertTag;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWScreenAlertConfig                   InConfig;                                          // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScreenAlertManager_AddedAlert) == 0x000008, "Wrong alignment on HWScreenAlertManager_AddedAlert");
static_assert(sizeof(HWScreenAlertManager_AddedAlert) == 0x000038, "Wrong size on HWScreenAlertManager_AddedAlert");
static_assert(offsetof(HWScreenAlertManager_AddedAlert, AlertImage) == 0x000000, "Member 'HWScreenAlertManager_AddedAlert::AlertImage' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_AddedAlert, InAlertTag) == 0x000008, "Member 'HWScreenAlertManager_AddedAlert::InAlertTag' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_AddedAlert, InConfig) == 0x000010, "Member 'HWScreenAlertManager_AddedAlert::InConfig' has a wrong offset!");

// Function HemingwayUI.HWScreenAlertManager.TriggerAlertFromNamedWidget
// 0x0014 (0x0014 - 0x0000)
struct HWScreenAlertManager_TriggerAlertFromNamedWidget final
{
public:
	struct FGameplayTag                           AlertTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_0;                                            // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScreenAlertManager_TriggerAlertFromNamedWidget) == 0x000004, "Wrong alignment on HWScreenAlertManager_TriggerAlertFromNamedWidget");
static_assert(sizeof(HWScreenAlertManager_TriggerAlertFromNamedWidget) == 0x000014, "Wrong size on HWScreenAlertManager_TriggerAlertFromNamedWidget");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromNamedWidget, AlertTag) == 0x000000, "Member 'HWScreenAlertManager_TriggerAlertFromNamedWidget::AlertTag' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromNamedWidget, Duration) == 0x000008, "Member 'HWScreenAlertManager_TriggerAlertFromNamedWidget::Duration' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromNamedWidget, Name_0) == 0x00000C, "Member 'HWScreenAlertManager_TriggerAlertFromNamedWidget::Name_0' has a wrong offset!");

// Function HemingwayUI.HWScreenAlertManager.TriggerAlertFromWidgetGeometry
// 0x0058 (0x0058 - 0x0000)
struct HWScreenAlertManager_TriggerAlertFromWidgetGeometry final
{
public:
	struct FGameplayTag                           AlertTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              ReferenceGeometry;                                 // 0x000C(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Coordinates;                                       // 0x0048(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry) == 0x000008, "Wrong alignment on HWScreenAlertManager_TriggerAlertFromWidgetGeometry");
static_assert(sizeof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry) == 0x000058, "Wrong size on HWScreenAlertManager_TriggerAlertFromWidgetGeometry");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry, AlertTag) == 0x000000, "Member 'HWScreenAlertManager_TriggerAlertFromWidgetGeometry::AlertTag' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry, Duration) == 0x000008, "Member 'HWScreenAlertManager_TriggerAlertFromWidgetGeometry::Duration' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry, ReferenceGeometry) == 0x00000C, "Member 'HWScreenAlertManager_TriggerAlertFromWidgetGeometry::ReferenceGeometry' has a wrong offset!");
static_assert(offsetof(HWScreenAlertManager_TriggerAlertFromWidgetGeometry, Coordinates) == 0x000048, "Member 'HWScreenAlertManager_TriggerAlertFromWidgetGeometry::Coordinates' has a wrong offset!");

// Function HemingwayUI.HWWatermarkWidget.HandleSessionUpdated
// 0x0008 (0x0008 - 0x0000)
struct HWWatermarkWidget_HandleSessionUpdated final
{
public:
	class URH_SessionView*                        SessionView;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWatermarkWidget_HandleSessionUpdated) == 0x000008, "Wrong alignment on HWWatermarkWidget_HandleSessionUpdated");
static_assert(sizeof(HWWatermarkWidget_HandleSessionUpdated) == 0x000008, "Wrong size on HWWatermarkWidget_HandleSessionUpdated");
static_assert(offsetof(HWWatermarkWidget_HandleSessionUpdated, SessionView) == 0x000000, "Member 'HWWatermarkWidget_HandleSessionUpdated::SessionView' has a wrong offset!");

// Function HemingwayUI.HWWatermarkWidget.PlayerInfoPositionUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWWatermarkWidget_PlayerInfoPositionUpdated final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWWatermarkWidget_PlayerInfoPositionUpdated) == 0x000008, "Wrong alignment on HWWatermarkWidget_PlayerInfoPositionUpdated");
static_assert(sizeof(HWWatermarkWidget_PlayerInfoPositionUpdated) == 0x000010, "Wrong size on HWWatermarkWidget_PlayerInfoPositionUpdated");
static_assert(offsetof(HWWatermarkWidget_PlayerInfoPositionUpdated, NewPosition) == 0x000000, "Member 'HWWatermarkWidget_PlayerInfoPositionUpdated::NewPosition' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.DisplayCurrencyPurchaseCallout
// 0x0001 (0x0001 - 0x0000)
struct HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout final
{
public:
	bool                                          bShouldDisplay;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout) == 0x000001, "Wrong alignment on HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout");
static_assert(sizeof(HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout) == 0x000001, "Wrong size on HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout");
static_assert(offsetof(HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout, bShouldDisplay) == 0x000000, "Member 'HWLocalPlayerWidget_DisplayCurrencyPurchaseCallout::bShouldDisplay' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.OnUserLoginChanged
// 0x000C (0x000C - 0x0000)
struct HWLocalPlayerWidget_OnUserLoginChanged final
{
public:
	bool                                          bLoggedIn;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_OnUserLoginChanged) == 0x000004, "Wrong alignment on HWLocalPlayerWidget_OnUserLoginChanged");
static_assert(sizeof(HWLocalPlayerWidget_OnUserLoginChanged) == 0x00000C, "Wrong size on HWLocalPlayerWidget_OnUserLoginChanged");
static_assert(offsetof(HWLocalPlayerWidget_OnUserLoginChanged, bLoggedIn) == 0x000000, "Member 'HWLocalPlayerWidget_OnUserLoginChanged::bLoggedIn' has a wrong offset!");
static_assert(offsetof(HWLocalPlayerWidget_OnUserLoginChanged, UserId) == 0x000004, "Member 'HWLocalPlayerWidget_OnUserLoginChanged::UserId' has a wrong offset!");
static_assert(offsetof(HWLocalPlayerWidget_OnUserLoginChanged, UserIndex) == 0x000008, "Member 'HWLocalPlayerWidget_OnUserLoginChanged::UserIndex' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.UpdatePlayerName
// 0x0010 (0x0010 - 0x0000)
struct HWLocalPlayerWidget_UpdatePlayerName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_UpdatePlayerName) == 0x000008, "Wrong alignment on HWLocalPlayerWidget_UpdatePlayerName");
static_assert(sizeof(HWLocalPlayerWidget_UpdatePlayerName) == 0x000010, "Wrong size on HWLocalPlayerWidget_UpdatePlayerName");
static_assert(offsetof(HWLocalPlayerWidget_UpdatePlayerName, PlayerName) == 0x000000, "Member 'HWLocalPlayerWidget_UpdatePlayerName::PlayerName' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.UpdatePlayerVIPDuration
// 0x0008 (0x0008 - 0x0000)
struct HWLocalPlayerWidget_UpdatePlayerVIPDuration final
{
public:
	struct FDateTime                              ExpirationTime;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_UpdatePlayerVIPDuration) == 0x000008, "Wrong alignment on HWLocalPlayerWidget_UpdatePlayerVIPDuration");
static_assert(sizeof(HWLocalPlayerWidget_UpdatePlayerVIPDuration) == 0x000008, "Wrong size on HWLocalPlayerWidget_UpdatePlayerVIPDuration");
static_assert(offsetof(HWLocalPlayerWidget_UpdatePlayerVIPDuration, ExpirationTime) == 0x000000, "Member 'HWLocalPlayerWidget_UpdatePlayerVIPDuration::ExpirationTime' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.UpdatePlayerVIPOwnership
// 0x0001 (0x0001 - 0x0000)
struct HWLocalPlayerWidget_UpdatePlayerVIPOwnership final
{
public:
	EHWVIPOwnershipLevel                          VIPOwnership;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_UpdatePlayerVIPOwnership) == 0x000001, "Wrong alignment on HWLocalPlayerWidget_UpdatePlayerVIPOwnership");
static_assert(sizeof(HWLocalPlayerWidget_UpdatePlayerVIPOwnership) == 0x000001, "Wrong size on HWLocalPlayerWidget_UpdatePlayerVIPOwnership");
static_assert(offsetof(HWLocalPlayerWidget_UpdatePlayerVIPOwnership, VIPOwnership) == 0x000000, "Member 'HWLocalPlayerWidget_UpdatePlayerVIPOwnership::VIPOwnership' has a wrong offset!");

// Function HemingwayUI.HWLocalPlayerWidget.GetDynamicCurrencyDisplayWidgets
// 0x0010 (0x0010 - 0x0000)
struct HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets final
{
public:
	TArray<class UHWCurrencyDisplayWidget*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets) == 0x000008, "Wrong alignment on HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets");
static_assert(sizeof(HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets) == 0x000010, "Wrong size on HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets");
static_assert(offsetof(HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets, ReturnValue) == 0x000000, "Member 'HWLocalPlayerWidget_GetDynamicCurrencyDisplayWidgets::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.HandlePlayerStateVIPOwnershipUpdated
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated final
{
public:
	class AHWPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWVIPOwnershipLevel                          VIPOwnershipLevel;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated");
static_assert(sizeof(HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated) == 0x000010, "Wrong size on HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated");
static_assert(offsetof(HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated, PlayerState) == 0x000000, "Member 'HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated::PlayerState' has a wrong offset!");
static_assert(offsetof(HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated, VIPOwnershipLevel) == 0x000008, "Member 'HWPlayerNameDisplayWidget_HandlePlayerStateVIPOwnershipUpdated::VIPOwnershipLevel' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.LoadFriend
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerNameDisplayWidget_LoadFriend final
{
public:
	class URH_RHFriendAndPlatformFriend*          InFriend;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_LoadFriend) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_LoadFriend");
static_assert(sizeof(HWPlayerNameDisplayWidget_LoadFriend) == 0x000008, "Wrong size on HWPlayerNameDisplayWidget_LoadFriend");
static_assert(offsetof(HWPlayerNameDisplayWidget_LoadFriend, InFriend) == 0x000000, "Member 'HWPlayerNameDisplayWidget_LoadFriend::InFriend' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.LoadPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerNameDisplayWidget_LoadPlayerInfo final
{
public:
	class URH_PlayerInfo*                         InPlayerInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_LoadPlayerInfo) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_LoadPlayerInfo");
static_assert(sizeof(HWPlayerNameDisplayWidget_LoadPlayerInfo) == 0x000008, "Wrong size on HWPlayerNameDisplayWidget_LoadPlayerInfo");
static_assert(offsetof(HWPlayerNameDisplayWidget_LoadPlayerInfo, InPlayerInfo) == 0x000000, "Member 'HWPlayerNameDisplayWidget_LoadPlayerInfo::InPlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.LoadPlayerInfoFromId
// 0x0020 (0x0020 - 0x0000)
struct HWPlayerNameDisplayWidget_LoadPlayerInfoFromId final
{
public:
	struct FHWPersistentPlayerId                  InPlayerInfo;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromId) == 0x000004, "Wrong alignment on HWPlayerNameDisplayWidget_LoadPlayerInfoFromId");
static_assert(sizeof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromId) == 0x000020, "Wrong size on HWPlayerNameDisplayWidget_LoadPlayerInfoFromId");
static_assert(offsetof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromId, InPlayerInfo) == 0x000000, "Member 'HWPlayerNameDisplayWidget_LoadPlayerInfoFromId::InPlayerInfo' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.LoadPlayerInfoFromPlayerUuid
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid final
{
public:
	struct FGuid                                  InPlayerId;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid) == 0x000004, "Wrong alignment on HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid");
static_assert(sizeof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid) == 0x000010, "Wrong size on HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid");
static_assert(offsetof(HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid, InPlayerId) == 0x000000, "Member 'HWPlayerNameDisplayWidget_LoadPlayerInfoFromPlayerUuid::InPlayerId' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.OnLocalLoadoutChange
// 0x00B8 (0x00B8 - 0x0000)
struct HWPlayerNameDisplayWidget_OnLocalLoadoutChange final
{
public:
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_OnLocalLoadoutChange) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_OnLocalLoadoutChange");
static_assert(sizeof(HWPlayerNameDisplayWidget_OnLocalLoadoutChange) == 0x0000B8, "Wrong size on HWPlayerNameDisplayWidget_OnLocalLoadoutChange");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnLocalLoadoutChange, InPlayerLoadout) == 0x000000, "Member 'HWPlayerNameDisplayWidget_OnLocalLoadoutChange::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.OnReceiveRemotePlayerLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlayerLoadout                       InPlayerLoadout;                                   // 0x0008(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout");
static_assert(sizeof(HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout) == 0x0000C0, "Wrong size on HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout, bSuccess) == 0x000000, "Member 'HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout::bSuccess' has a wrong offset!");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout, InPlayerLoadout) == 0x000008, "Member 'HWPlayerNameDisplayWidget_OnReceiveRemotePlayerLoadout::InPlayerLoadout' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.OnUpdatePlayerName
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerNameDisplayWidget_OnUpdatePlayerName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_OnUpdatePlayerName) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_OnUpdatePlayerName");
static_assert(sizeof(HWPlayerNameDisplayWidget_OnUpdatePlayerName) == 0x000010, "Wrong size on HWPlayerNameDisplayWidget_OnUpdatePlayerName");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnUpdatePlayerName, Name_0) == 0x000000, "Member 'HWPlayerNameDisplayWidget_OnUpdatePlayerName::Name_0' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.OnUpdatePlayerNameAndVIPOwnership
// 0x0018 (0x0018 - 0x0000)
struct HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWVIPOwnershipLevel                          VIPOwnership;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership");
static_assert(sizeof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership) == 0x000018, "Wrong size on HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership, Name_0) == 0x000000, "Member 'HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership::Name_0' has a wrong offset!");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership, VIPOwnership) == 0x000010, "Member 'HWPlayerNameDisplayWidget_OnUpdatePlayerNameAndVIPOwnership::VIPOwnership' has a wrong offset!");

// Function HemingwayUI.HWPlayerNameDisplayWidget.OnUpdatePlayerNameColorItem
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem final
{
public:
	const class UHWCollectionItem*                NameItem;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem) == 0x000008, "Wrong alignment on HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem");
static_assert(sizeof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem) == 0x000008, "Wrong size on HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem");
static_assert(offsetof(HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem, NameItem) == 0x000000, "Member 'HWPlayerNameDisplayWidget_OnUpdatePlayerNameColorItem::NameItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.DisplayBadgeEquipPreview
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardEquipWidget_DisplayBadgeEquipPreview final
{
public:
	TArray<class UHWCollectionItem*>              InBadgeItems;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_DisplayBadgeEquipPreview) == 0x000008, "Wrong alignment on HWPlayerCardEquipWidget_DisplayBadgeEquipPreview");
static_assert(sizeof(HWPlayerCardEquipWidget_DisplayBadgeEquipPreview) == 0x000010, "Wrong size on HWPlayerCardEquipWidget_DisplayBadgeEquipPreview");
static_assert(offsetof(HWPlayerCardEquipWidget_DisplayBadgeEquipPreview, InBadgeItems) == 0x000000, "Member 'HWPlayerCardEquipWidget_DisplayBadgeEquipPreview::InBadgeItems' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.DisplayTrackerEquipPreview
// 0x0010 (0x0010 - 0x0000)
struct HWPlayerCardEquipWidget_DisplayTrackerEquipPreview final
{
public:
	TArray<class UHWCollectionItem*>              InTrackerItems;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_DisplayTrackerEquipPreview) == 0x000008, "Wrong alignment on HWPlayerCardEquipWidget_DisplayTrackerEquipPreview");
static_assert(sizeof(HWPlayerCardEquipWidget_DisplayTrackerEquipPreview) == 0x000010, "Wrong size on HWPlayerCardEquipWidget_DisplayTrackerEquipPreview");
static_assert(offsetof(HWPlayerCardEquipWidget_DisplayTrackerEquipPreview, InTrackerItems) == 0x000000, "Member 'HWPlayerCardEquipWidget_DisplayTrackerEquipPreview::InTrackerItems' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.HandleChangePreviewSlotAction
// 0x0004 (0x0004 - 0x0000)
struct HWPlayerCardEquipWidget_HandleChangePreviewSlotAction final
{
public:
	int32                                         Direction;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_HandleChangePreviewSlotAction) == 0x000004, "Wrong alignment on HWPlayerCardEquipWidget_HandleChangePreviewSlotAction");
static_assert(sizeof(HWPlayerCardEquipWidget_HandleChangePreviewSlotAction) == 0x000004, "Wrong size on HWPlayerCardEquipWidget_HandleChangePreviewSlotAction");
static_assert(offsetof(HWPlayerCardEquipWidget_HandleChangePreviewSlotAction, Direction) == 0x000000, "Member 'HWPlayerCardEquipWidget_HandleChangePreviewSlotAction::Direction' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.PreviewCollectionItem
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardEquipWidget_PreviewCollectionItem final
{
public:
	const class UHWCollectionItem*                InItem;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_PreviewCollectionItem) == 0x000008, "Wrong alignment on HWPlayerCardEquipWidget_PreviewCollectionItem");
static_assert(sizeof(HWPlayerCardEquipWidget_PreviewCollectionItem) == 0x000008, "Wrong size on HWPlayerCardEquipWidget_PreviewCollectionItem");
static_assert(offsetof(HWPlayerCardEquipWidget_PreviewCollectionItem, InItem) == 0x000000, "Member 'HWPlayerCardEquipWidget_PreviewCollectionItem::InItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.SetGodLoadout
// 0x0008 (0x0008 - 0x0000)
struct HWPlayerCardEquipWidget_SetGodLoadout final
{
public:
	const class UHWCharacterItem*                 InGodItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_SetGodLoadout) == 0x000008, "Wrong alignment on HWPlayerCardEquipWidget_SetGodLoadout");
static_assert(sizeof(HWPlayerCardEquipWidget_SetGodLoadout) == 0x000008, "Wrong size on HWPlayerCardEquipWidget_SetGodLoadout");
static_assert(offsetof(HWPlayerCardEquipWidget_SetGodLoadout, InGodItem) == 0x000000, "Member 'HWPlayerCardEquipWidget_SetGodLoadout::InGodItem' has a wrong offset!");

// Function HemingwayUI.HWPlayerCardEquipWidget.UpdateEquipState
// 0x0001 (0x0001 - 0x0000)
struct HWPlayerCardEquipWidget_UpdateEquipState final
{
public:
	EHWPlayerCardEquipState                       InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPlayerCardEquipWidget_UpdateEquipState) == 0x000001, "Wrong alignment on HWPlayerCardEquipWidget_UpdateEquipState");
static_assert(sizeof(HWPlayerCardEquipWidget_UpdateEquipState) == 0x000001, "Wrong size on HWPlayerCardEquipWidget_UpdateEquipState");
static_assert(offsetof(HWPlayerCardEquipWidget_UpdateEquipState, InState) == 0x000000, "Member 'HWPlayerCardEquipWidget_UpdateEquipState::InState' has a wrong offset!");

// Function HemingwayUI.HWPortalPurchaseConfirmWidget.DisplayPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct HWPortalPurchaseConfirmWidget_DisplayPortalOffer final
{
public:
	class URHPortalOffer*                         InPortalOffer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalPurchaseConfirmWidget_DisplayPortalOffer) == 0x000008, "Wrong alignment on HWPortalPurchaseConfirmWidget_DisplayPortalOffer");
static_assert(sizeof(HWPortalPurchaseConfirmWidget_DisplayPortalOffer) == 0x000008, "Wrong size on HWPortalPurchaseConfirmWidget_DisplayPortalOffer");
static_assert(offsetof(HWPortalPurchaseConfirmWidget_DisplayPortalOffer, InPortalOffer) == 0x000000, "Member 'HWPortalPurchaseConfirmWidget_DisplayPortalOffer::InPortalOffer' has a wrong offset!");

// Function HemingwayUI.HWPortalPurchaseConfirmWidget.HandleApplicationSystemOverlayStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged final
{
public:
	bool                                          bSystemUIIsDisplayed;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged) == 0x000001, "Wrong alignment on HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged");
static_assert(sizeof(HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged) == 0x000001, "Wrong size on HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged");
static_assert(offsetof(HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged, bSystemUIIsDisplayed) == 0x000000, "Member 'HWPortalPurchaseConfirmWidget_HandleApplicationSystemOverlayStateChanged::bSystemUIIsDisplayed' has a wrong offset!");

// Function HemingwayUI.HWPortalPurchaseConfirmWidget.HandlePurchasePortalItem
// 0x0008 (0x0008 - 0x0000)
struct HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem final
{
public:
	class URHStoreItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem) == 0x000008, "Wrong alignment on HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem");
static_assert(sizeof(HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem) == 0x000008, "Wrong size on HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem");
static_assert(offsetof(HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem, Item) == 0x000000, "Member 'HWPortalPurchaseConfirmWidget_HandlePurchasePortalItem::Item' has a wrong offset!");

// Function HemingwayUI.HWPortalPurchaseConfirmWidget.UpdateCheckoutStatus
// 0x0001 (0x0001 - 0x0000)
struct HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus final
{
public:
	bool                                          bHasPendingCheckout;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus) == 0x000001, "Wrong alignment on HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus");
static_assert(sizeof(HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus) == 0x000001, "Wrong size on HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus");
static_assert(offsetof(HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus, bHasPendingCheckout) == 0x000000, "Member 'HWPortalPurchaseConfirmWidget_UpdateCheckoutStatus::bHasPendingCheckout' has a wrong offset!");

// Function HemingwayUI.HWPortalPurchaseConfirmWidget.HasPendingCheckout
// 0x0001 (0x0001 - 0x0000)
struct HWPortalPurchaseConfirmWidget_HasPendingCheckout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPortalPurchaseConfirmWidget_HasPendingCheckout) == 0x000001, "Wrong alignment on HWPortalPurchaseConfirmWidget_HasPendingCheckout");
static_assert(sizeof(HWPortalPurchaseConfirmWidget_HasPendingCheckout) == 0x000001, "Wrong size on HWPortalPurchaseConfirmWidget_HasPendingCheckout");
static_assert(offsetof(HWPortalPurchaseConfirmWidget_HasPendingCheckout, ReturnValue) == 0x000000, "Member 'HWPortalPurchaseConfirmWidget_HasPendingCheckout::ReturnValue' has a wrong offset!");

// Function HemingwayUI.HWRallyHereContextMenu.SetBot
// 0x001C (0x001C - 0x0000)
struct HWRallyHereContextMenu_SetBot final
{
public:
	struct FHWCustomBotConfig_Single              botConfig_0;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         inTeam;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWRallyHereContextMenu_SetBot) == 0x000004, "Wrong alignment on HWRallyHereContextMenu_SetBot");
static_assert(sizeof(HWRallyHereContextMenu_SetBot) == 0x00001C, "Wrong size on HWRallyHereContextMenu_SetBot");
static_assert(offsetof(HWRallyHereContextMenu_SetBot, botConfig_0) == 0x000000, "Member 'HWRallyHereContextMenu_SetBot::botConfig_0' has a wrong offset!");
static_assert(offsetof(HWRallyHereContextMenu_SetBot, inTeam) == 0x000018, "Member 'HWRallyHereContextMenu_SetBot::inTeam' has a wrong offset!");

// Function HemingwayUI.HWPrecompiledShaderWidget.UpdatePrecompiledState
// 0x0001 (0x0001 - 0x0000)
struct HWPrecompiledShaderWidget_UpdatePrecompiledState final
{
public:
	EHWPrecompiledShaderState                     NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPrecompiledShaderWidget_UpdatePrecompiledState) == 0x000001, "Wrong alignment on HWPrecompiledShaderWidget_UpdatePrecompiledState");
static_assert(sizeof(HWPrecompiledShaderWidget_UpdatePrecompiledState) == 0x000001, "Wrong size on HWPrecompiledShaderWidget_UpdatePrecompiledState");
static_assert(offsetof(HWPrecompiledShaderWidget_UpdatePrecompiledState, NewState) == 0x000000, "Member 'HWPrecompiledShaderWidget_UpdatePrecompiledState::NewState' has a wrong offset!");

// Function HemingwayUI.HWPrecompiledShaderWidget.UpdateTaskCount
// 0x0008 (0x0008 - 0x0000)
struct HWPrecompiledShaderWidget_UpdateTaskCount final
{
public:
	int32                                         CompletedTaskCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTasks;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HWPrecompiledShaderWidget_UpdateTaskCount) == 0x000004, "Wrong alignment on HWPrecompiledShaderWidget_UpdateTaskCount");
static_assert(sizeof(HWPrecompiledShaderWidget_UpdateTaskCount) == 0x000008, "Wrong size on HWPrecompiledShaderWidget_UpdateTaskCount");
static_assert(offsetof(HWPrecompiledShaderWidget_UpdateTaskCount, CompletedTaskCount) == 0x000000, "Member 'HWPrecompiledShaderWidget_UpdateTaskCount::CompletedTaskCount' has a wrong offset!");
static_assert(offsetof(HWPrecompiledShaderWidget_UpdateTaskCount, TotalTasks) == 0x000004, "Member 'HWPrecompiledShaderWidget_UpdateTaskCount::TotalTasks' has a wrong offset!");

}

