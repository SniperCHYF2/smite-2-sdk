#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractableComponent

#include "Basic.hpp"

#include "EJungleTribes_structs.hpp"
#include "AIModule_structs.hpp"
#include "S_TribeRenown_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function BP_InteractableComponent.BP_InteractableComponent_C.DisplayErrorMessage
// 0x0058 (0x0058 - 0x0000)
struct BP_InteractableComponent_C_DisplayErrorMessage final
{
public:
	class FText                                   ErrorMessage_0;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetInteractPromptText_ReturnValue;        // 0x0028(0x0018)(ConstParm)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_DisplayErrorMessage) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_DisplayErrorMessage");
static_assert(sizeof(BP_InteractableComponent_C_DisplayErrorMessage) == 0x000058, "Wrong size on BP_InteractableComponent_C_DisplayErrorMessage");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, ErrorMessage_0) == 0x000000, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::ErrorMessage_0' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, CallFunc_GetInteractPromptText_ReturnValue) == 0x000028, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::CallFunc_GetInteractPromptText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000040, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue) == 0x000048, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00004C, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_DisplayErrorMessage, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000050, "Member 'BP_InteractableComponent_C_DisplayErrorMessage::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.EndInteraction
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableComponent_C_EndInteraction final
{
public:
	class AActor*                                 InteractInstigator;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bWasCancelled;                                     // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_EndInteraction) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_EndInteraction");
static_assert(sizeof(BP_InteractableComponent_C_EndInteraction) == 0x000010, "Wrong size on BP_InteractableComponent_C_EndInteraction");
static_assert(offsetof(BP_InteractableComponent_C_EndInteraction, InteractInstigator) == 0x000000, "Member 'BP_InteractableComponent_C_EndInteraction::InteractInstigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_EndInteraction, bWasCancelled) == 0x000008, "Member 'BP_InteractableComponent_C_EndInteraction::bWasCancelled' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.ExecuteUbergraph_BP_InteractableComponent
// 0x0178 (0x0178 - 0x0000)
struct BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OverlappedComp;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OtherActor_1;                         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp_1;                          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_OtherBodyIndex_1;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFromSweep;                           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_Event_SweepResult;                          // 0x0030(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_Event_OverlappedComponent;                  // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_OtherActor;                           // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_OtherBodyIndex;                       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractInstigator_1;                 // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x0140(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_InteractInstigator;                   // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Instigator;                     // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_CustomEvent_ErrorMessage;                   // 0x0158(0x0018)()
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent");
static_assert(sizeof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent) == 0x000178, "Wrong size on BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, EntryPoint) == 0x000000, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OverlappedComp) == 0x000010, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OverlappedComp' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherActor_1) == 0x000018, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherComp_1) == 0x000020, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherBodyIndex_1) == 0x000028, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_bFromSweep) == 0x00002C, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_SweepResult) == 0x000030, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OverlappedComponent) == 0x000118, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherActor) == 0x000120, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherComp) == 0x000128, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_OtherBodyIndex) == 0x000130, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_InteractInstigator_1) == 0x000138, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_InteractInstigator_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_bWasCancelled) == 0x000140, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, CallFunc_IsDedicatedServer_ReturnValue) == 0x000141, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_Event_InteractInstigator) == 0x000148, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_Event_InteractInstigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_CustomEvent_Instigator) == 0x000150, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, K2Node_CustomEvent_ErrorMessage) == 0x000158, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::K2Node_CustomEvent_ErrorMessage' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000170, "Member 'BP_InteractableComponent_C_ExecuteUbergraph_BP_InteractableComponent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.GetTeamInfamy
// 0x0020 (0x0020 - 0x0000)
struct BP_InteractableComponent_C_GetTeamInfamy final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJungleTribes                                 Tribe;                                             // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_TribeRenown                         Infamy;                                            // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_GetTeamInfamy) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_GetTeamInfamy");
static_assert(sizeof(BP_InteractableComponent_C_GetTeamInfamy) == 0x000020, "Wrong size on BP_InteractableComponent_C_GetTeamInfamy");
static_assert(offsetof(BP_InteractableComponent_C_GetTeamInfamy, TeamId) == 0x000000, "Member 'BP_InteractableComponent_C_GetTeamInfamy::TeamId' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetTeamInfamy, Tribe) == 0x000004, "Member 'BP_InteractableComponent_C_GetTeamInfamy::Tribe' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetTeamInfamy, Infamy) == 0x000008, "Member 'BP_InteractableComponent_C_GetTeamInfamy::Infamy' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.IsClientOnCooldown
// 0x0003 (0x0003 - 0x0000)
struct BP_InteractableComponent_C_IsClientOnCooldown final
{
public:
	bool                                          IsOnCooldown;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCooldownTag_HasMatchingCooldownTag;  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_IsClientOnCooldown) == 0x000001, "Wrong alignment on BP_InteractableComponent_C_IsClientOnCooldown");
static_assert(sizeof(BP_InteractableComponent_C_IsClientOnCooldown) == 0x000003, "Wrong size on BP_InteractableComponent_C_IsClientOnCooldown");
static_assert(offsetof(BP_InteractableComponent_C_IsClientOnCooldown, IsOnCooldown) == 0x000000, "Member 'BP_InteractableComponent_C_IsClientOnCooldown::IsOnCooldown' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_IsClientOnCooldown, CallFunc_CheckCooldownTag_HasMatchingCooldownTag) == 0x000001, "Member 'BP_InteractableComponent_C_IsClientOnCooldown::CallFunc_CheckCooldownTag_HasMatchingCooldownTag' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_IsClientOnCooldown, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_InteractableComponent_C_IsClientOnCooldown::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.MulticastDisplayErrorMessage
// 0x0020 (0x0020 - 0x0000)
struct BP_InteractableComponent_C_MulticastDisplayErrorMessage final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   ErrorMessage_0;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_InteractableComponent_C_MulticastDisplayErrorMessage) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_MulticastDisplayErrorMessage");
static_assert(sizeof(BP_InteractableComponent_C_MulticastDisplayErrorMessage) == 0x000020, "Wrong size on BP_InteractableComponent_C_MulticastDisplayErrorMessage");
static_assert(offsetof(BP_InteractableComponent_C_MulticastDisplayErrorMessage, Instigator) == 0x000000, "Member 'BP_InteractableComponent_C_MulticastDisplayErrorMessage::Instigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_MulticastDisplayErrorMessage, ErrorMessage_0) == 0x000008, "Member 'BP_InteractableComponent_C_MulticastDisplayErrorMessage::ErrorMessage_0' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.OnInteractFieldBeginOverlap
// 0x0108 (0x0108 - 0x0000)
struct BP_InteractableComponent_C_OnInteractFieldBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_OnInteractFieldBeginOverlap");
static_assert(sizeof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap) == 0x000108, "Wrong size on BP_InteractableComponent_C_OnInteractFieldBeginOverlap");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, OverlappedComp) == 0x000000, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, OtherActor) == 0x000008, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, OtherComp) == 0x000010, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, bFromSweep) == 0x00001C, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldBeginOverlap, SweepResult) == 0x000020, "Member 'BP_InteractableComponent_C_OnInteractFieldBeginOverlap::SweepResult' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.OnInteractFieldEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BP_InteractableComponent_C_OnInteractFieldEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_OnInteractFieldEndOverlap) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_OnInteractFieldEndOverlap");
static_assert(sizeof(BP_InteractableComponent_C_OnInteractFieldEndOverlap) == 0x000020, "Wrong size on BP_InteractableComponent_C_OnInteractFieldEndOverlap");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldEndOverlap, OverlappedComponent) == 0x000000, "Member 'BP_InteractableComponent_C_OnInteractFieldEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldEndOverlap, OtherActor) == 0x000008, "Member 'BP_InteractableComponent_C_OnInteractFieldEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldEndOverlap, OtherComp) == 0x000010, "Member 'BP_InteractableComponent_C_OnInteractFieldEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_OnInteractFieldEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_InteractableComponent_C_OnInteractFieldEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.StartInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_InteractableComponent_C_StartInteraction final
{
public:
	class AActor*                                 InteractInstigator;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_StartInteraction) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_StartInteraction");
static_assert(sizeof(BP_InteractableComponent_C_StartInteraction) == 0x000008, "Wrong size on BP_InteractableComponent_C_StartInteraction");
static_assert(offsetof(BP_InteractableComponent_C_StartInteraction, InteractInstigator) == 0x000000, "Member 'BP_InteractableComponent_C_StartInteraction::InteractInstigator' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.UpdateCooldownSwitch
// 0x0018 (0x0018 - 0x0000)
struct BP_InteractableComponent_C_UpdateCooldownSwitch final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsClientOnCooldown_IsOnCooldown;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCooldownInfoForWidget_CooldownDuration; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCooldownInfoForWidget_TotalCooldownDuration; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateCooldownSwitch_CooldownDuration_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_UpdateCooldownSwitch) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_UpdateCooldownSwitch");
static_assert(sizeof(BP_InteractableComponent_C_UpdateCooldownSwitch) == 0x000018, "Wrong size on BP_InteractableComponent_C_UpdateCooldownSwitch");
static_assert(offsetof(BP_InteractableComponent_C_UpdateCooldownSwitch, Return) == 0x000000, "Member 'BP_InteractableComponent_C_UpdateCooldownSwitch::Return' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateCooldownSwitch, CallFunc_IsClientOnCooldown_IsOnCooldown) == 0x000001, "Member 'BP_InteractableComponent_C_UpdateCooldownSwitch::CallFunc_IsClientOnCooldown_IsOnCooldown' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateCooldownSwitch, CallFunc_GetCooldownInfoForWidget_CooldownDuration) == 0x000004, "Member 'BP_InteractableComponent_C_UpdateCooldownSwitch::CallFunc_GetCooldownInfoForWidget_CooldownDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateCooldownSwitch, CallFunc_GetCooldownInfoForWidget_TotalCooldownDuration) == 0x000008, "Member 'BP_InteractableComponent_C_UpdateCooldownSwitch::CallFunc_GetCooldownInfoForWidget_TotalCooldownDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateCooldownSwitch, CallFunc_UpdateCooldownSwitch_CooldownDuration_ImplicitCast) == 0x000010, "Member 'BP_InteractableComponent_C_UpdateCooldownSwitch::CallFunc_UpdateCooldownSwitch_CooldownDuration_ImplicitCast' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.UpdateInteractHUDWidget
// 0x0018 (0x0018 - 0x0000)
struct BP_InteractableComponent_C_UpdateInteractHUDWidget final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInteractionInProgress_ReturnValue;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateCooldownSwitch_Return;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue; // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue_1; // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_UpdateInteractHUDWidget) == 0x000004, "Wrong alignment on BP_InteractableComponent_C_UpdateInteractHUDWidget");
static_assert(sizeof(BP_InteractableComponent_C_UpdateInteractHUDWidget) == 0x000018, "Wrong size on BP_InteractableComponent_C_UpdateInteractHUDWidget");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, Temp_int_Variable) == 0x000000, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, Temp_int_Variable_1) == 0x000004, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, Temp_bool_Variable) == 0x00000A, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_IsValid_ReturnValue_1) == 0x00000B, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_IsInteractionInProgress_ReturnValue) == 0x00000C, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_IsInteractionInProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_UpdateCooldownSwitch_Return) == 0x00000D, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_UpdateCooldownSwitch_Return' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue) == 0x00000E, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue_1) == 0x00000F, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_ShouldShowPromptVisualsOnClient_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, K2Node_Select_Default) == 0x000010, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_UpdateInteractHUDWidget, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'BP_InteractableComponent_C_UpdateInteractHUDWidget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.UpdateOwningTeam
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractableComponent_C_UpdateOwningTeam final
{
public:
	int32                                         CurrentOwningTeam_0;                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_UpdateOwningTeam) == 0x000004, "Wrong alignment on BP_InteractableComponent_C_UpdateOwningTeam");
static_assert(sizeof(BP_InteractableComponent_C_UpdateOwningTeam) == 0x000004, "Wrong size on BP_InteractableComponent_C_UpdateOwningTeam");
static_assert(offsetof(BP_InteractableComponent_C_UpdateOwningTeam, CurrentOwningTeam_0) == 0x000000, "Member 'BP_InteractableComponent_C_UpdateOwningTeam::CurrentOwningTeam_0' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.UpdatePromptVisuals
// 0x0001 (0x0001 - 0x0000)
struct BP_InteractableComponent_C_UpdatePromptVisuals final
{
public:
	bool                                          bShowPrompt;                                       // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_UpdatePromptVisuals) == 0x000001, "Wrong alignment on BP_InteractableComponent_C_UpdatePromptVisuals");
static_assert(sizeof(BP_InteractableComponent_C_UpdatePromptVisuals) == 0x000001, "Wrong size on BP_InteractableComponent_C_UpdatePromptVisuals");
static_assert(offsetof(BP_InteractableComponent_C_UpdatePromptVisuals, bShowPrompt) == 0x000000, "Member 'BP_InteractableComponent_C_UpdatePromptVisuals::bShowPrompt' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CanEverInteractWith
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableComponent_C_CanEverInteractWith final
{
public:
	const class AActor*                           InteractInstigator;                                // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInteractCompatibility_IsCompatible;  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanEverInteractWith_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CanEverInteractWith) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CanEverInteractWith");
static_assert(sizeof(BP_InteractableComponent_C_CanEverInteractWith) == 0x000010, "Wrong size on BP_InteractableComponent_C_CanEverInteractWith");
static_assert(offsetof(BP_InteractableComponent_C_CanEverInteractWith, InteractInstigator) == 0x000000, "Member 'BP_InteractableComponent_C_CanEverInteractWith::InteractInstigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanEverInteractWith, ReturnValue) == 0x000008, "Member 'BP_InteractableComponent_C_CanEverInteractWith::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanEverInteractWith, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_InteractableComponent_C_CanEverInteractWith::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanEverInteractWith, CallFunc_CheckInteractCompatibility_IsCompatible) == 0x00000A, "Member 'BP_InteractableComponent_C_CanEverInteractWith::CallFunc_CheckInteractCompatibility_IsCompatible' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanEverInteractWith, CallFunc_CanEverInteractWith_ReturnValue) == 0x00000B, "Member 'BP_InteractableComponent_C_CanEverInteractWith::CallFunc_CanEverInteractWith_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CanInteractWith
// 0x0010 (0x0010 - 0x0000)
struct BP_InteractableComponent_C_CanInteractWith final
{
public:
	const class AActor*                           InteractInstigator;                                // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanInteractWith_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckInteractCompatibility_IsCompatible;  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CanInteractWith) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CanInteractWith");
static_assert(sizeof(BP_InteractableComponent_C_CanInteractWith) == 0x000010, "Wrong size on BP_InteractableComponent_C_CanInteractWith");
static_assert(offsetof(BP_InteractableComponent_C_CanInteractWith, InteractInstigator) == 0x000000, "Member 'BP_InteractableComponent_C_CanInteractWith::InteractInstigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanInteractWith, ReturnValue) == 0x000008, "Member 'BP_InteractableComponent_C_CanInteractWith::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanInteractWith, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'BP_InteractableComponent_C_CanInteractWith::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanInteractWith, CallFunc_CanInteractWith_ReturnValue) == 0x00000A, "Member 'BP_InteractableComponent_C_CanInteractWith::CallFunc_CanInteractWith_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CanInteractWith, CallFunc_CheckInteractCompatibility_IsCompatible) == 0x00000B, "Member 'BP_InteractableComponent_C_CanInteractWith::CallFunc_CheckInteractCompatibility_IsCompatible' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckCooldownTag
// 0x0048 (0x0048 - 0x0000)
struct BP_InteractableComponent_C_CheckCooldownTag final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMatchingCooldownTag;                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckCooldownTag) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckCooldownTag");
static_assert(sizeof(BP_InteractableComponent_C_CheckCooldownTag) == 0x000048, "Wrong size on BP_InteractableComponent_C_CheckCooldownTag");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_CheckCooldownTag::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, HasMatchingCooldownTag) == 0x000008, "Member 'BP_InteractableComponent_C_CheckCooldownTag::HasMatchingCooldownTag' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, ASC) == 0x000010, "Member 'BP_InteractableComponent_C_CheckCooldownTag::ASC' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000018, "Member 'BP_InteractableComponent_C_CheckCooldownTag::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000020, "Member 'BP_InteractableComponent_C_CheckCooldownTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_InteractableComponent_C_CheckCooldownTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000030, "Member 'BP_InteractableComponent_C_CheckCooldownTag::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckCooldownTag, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000040, "Member 'BP_InteractableComponent_C_CheckCooldownTag::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckInteractCompatibility
// 0x0018 (0x0018 - 0x0000)
struct BP_InteractableComponent_C_CheckInteractCompatibility final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCompatible;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckOverrideTag_InteractionAllowed;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTag_HasMatchingTag;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCooldownTag_HasMatchingCooldownTag;  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckRenownLevel_InteractionAllowed;      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTeams_InteractionAllowed;            // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckInteractCompatibility) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckInteractCompatibility");
static_assert(sizeof(BP_InteractableComponent_C_CheckInteractCompatibility) == 0x000018, "Wrong size on BP_InteractableComponent_C_CheckInteractCompatibility");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, Instigator) == 0x000000, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::Instigator' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, IsCompatible) == 0x000008, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::IsCompatible' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_CheckOverrideTag_InteractionAllowed) == 0x000009, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_CheckOverrideTag_InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_CheckTag_HasMatchingTag) == 0x00000A, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_CheckTag_HasMatchingTag' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_CheckCooldownTag_HasMatchingCooldownTag) == 0x00000B, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_CheckCooldownTag_HasMatchingCooldownTag' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_CheckRenownLevel_InteractionAllowed) == 0x00000C, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_CheckRenownLevel_InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_CheckTeams_InteractionAllowed) == 0x00000E, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_CheckTeams_InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_BooleanAND_ReturnValue_1) == 0x000010, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_BooleanAND_ReturnValue_2) == 0x000011, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckInteractCompatibility, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'BP_InteractableComponent_C_CheckInteractCompatibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckOverrideTag
// 0x0048 (0x0048 - 0x0000)
struct BP_InteractableComponent_C_CheckOverrideTag final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionAllowed;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAllMatchingGameplayTags_self_CastInput; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAllMatchingGameplayTags_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckOverrideTag) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckOverrideTag");
static_assert(sizeof(BP_InteractableComponent_C_CheckOverrideTag) == 0x000048, "Wrong size on BP_InteractableComponent_C_CheckOverrideTag");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_CheckOverrideTag::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, InteractionAllowed) == 0x000008, "Member 'BP_InteractableComponent_C_CheckOverrideTag::InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, ASC) == 0x000010, "Member 'BP_InteractableComponent_C_CheckOverrideTag::ASC' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000018, "Member 'BP_InteractableComponent_C_CheckOverrideTag::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000020, "Member 'BP_InteractableComponent_C_CheckOverrideTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_InteractableComponent_C_CheckOverrideTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, CallFunc_HasAllMatchingGameplayTags_self_CastInput) == 0x000030, "Member 'BP_InteractableComponent_C_CheckOverrideTag::CallFunc_HasAllMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckOverrideTag, CallFunc_HasAllMatchingGameplayTags_ReturnValue) == 0x000040, "Member 'BP_InteractableComponent_C_CheckOverrideTag::CallFunc_HasAllMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckRenownLevel
// 0x0060 (0x0060 - 0x0000)
struct BP_InteractableComponent_C_CheckRenownLevel final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionAllowed;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWGameState*                           CallFunc_GetHWGameState_ReturnValue_1;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Infamy_C>         K2Node_DynamicCast_AsBPI_Infamy;                   // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue_1;     // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         CallFunc_GetGenericTeamId_ReturnValue;             // 0x003A(0x0001)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x1];                                       // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_TribeRenown                         CallFunc_GetTeamInfamy_Infamy;                     // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckRenownLevel) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckRenownLevel");
static_assert(sizeof(BP_InteractableComponent_C_CheckRenownLevel) == 0x000060, "Wrong size on BP_InteractableComponent_C_CheckRenownLevel");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_CheckRenownLevel::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, InteractionAllowed) == 0x000008, "Member 'BP_InteractableComponent_C_CheckRenownLevel::InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_GetHWGameState_ReturnValue) == 0x000010, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_GetHWGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_DoesImplementInterface_ReturnValue) == 0x000018, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_GetHWGameState_ReturnValue_1) == 0x000020, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_GetHWGameState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, K2Node_DynamicCast_AsBPI_Infamy) == 0x000028, "Member 'BP_InteractableComponent_C_CheckRenownLevel::K2Node_DynamicCast_AsBPI_Infamy' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_InteractableComponent_C_CheckRenownLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_DoesImplementInterface_ReturnValue_1) == 0x000039, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_DoesImplementInterface_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_GetGenericTeamId_ReturnValue) == 0x00003A, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_GetGenericTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00003C, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_GetTeamInfamy_Infamy) == 0x000040, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_GetTeamInfamy_Infamy' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckRenownLevel, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000058, "Member 'BP_InteractableComponent_C_CheckRenownLevel::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckTag
// 0x0048 (0x0048 - 0x0000)
struct BP_InteractableComponent_C_CheckTag final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMatchingTag;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              ASC;                                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckTag) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckTag");
static_assert(sizeof(BP_InteractableComponent_C_CheckTag) == 0x000048, "Wrong size on BP_InteractableComponent_C_CheckTag");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_CheckTag::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, HasMatchingTag) == 0x000008, "Member 'BP_InteractableComponent_C_CheckTag::HasMatchingTag' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, ASC) == 0x000010, "Member 'BP_InteractableComponent_C_CheckTag::ASC' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000018, "Member 'BP_InteractableComponent_C_CheckTag::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000020, "Member 'BP_InteractableComponent_C_CheckTag::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_InteractableComponent_C_CheckTag::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000030, "Member 'BP_InteractableComponent_C_CheckTag::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTag, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000040, "Member 'BP_InteractableComponent_C_CheckTag::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.CheckTeams
// 0x0030 (0x0030 - 0x0000)
struct BP_InteractableComponent_C_CheckTeams final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionAllowed;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 NewLocalVar;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOwningTeam_OwningTeam;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         CallFunc_GetGenericTeamId_ReturnValue;             // 0x001D(0x0001)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetOwningTeam_OwningTeam_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGenericTeamId                         CallFunc_GetGenericTeamId_ReturnValue_1;           // 0x0027(0x0001)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_CheckTeams) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_CheckTeams");
static_assert(sizeof(BP_InteractableComponent_C_CheckTeams) == 0x000030, "Wrong size on BP_InteractableComponent_C_CheckTeams");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_CheckTeams::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, InteractionAllowed) == 0x000008, "Member 'BP_InteractableComponent_C_CheckTeams::InteractionAllowed' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, NewLocalVar) == 0x000010, "Member 'BP_InteractableComponent_C_CheckTeams::NewLocalVar' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_GetOwningTeam_OwningTeam) == 0x000018, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_GetOwningTeam_OwningTeam' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_Conv_IntToByte_ReturnValue) == 0x00001C, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_GetGenericTeamId_ReturnValue) == 0x00001D, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_GetGenericTeamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_GetOwningTeam_OwningTeam_1) == 0x000020, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_GetOwningTeam_OwningTeam_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000024, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000025, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_DoesImplementInterface_ReturnValue) == 0x000026, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_GetGenericTeamId_ReturnValue_1) == 0x000027, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_GetGenericTeamId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_CheckTeams, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'BP_InteractableComponent_C_CheckTeams::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.GetCooldownInfoForWidget
// 0x00B0 (0x00B0 - 0x0000)
struct BP_InteractableComponent_C_GetCooldownInfoForWidget final
{
public:
	class AActor*                                 TeamMemberActor;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CooldownDuration;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TotalCooldownDuration;                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            LocalGE;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	float                                         LocalTotalDuration;                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalCooldownDuration;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FActiveGameplayEffectHandle>    LocalGEHandles;                                    // 0x0028(0x0010)(Edit, BlueprintVisible)
	class UHWAbilitySystemComponent*              LocalASC;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FActiveGameplayEffectHandle>    CallFunc_GetActiveEffectsWithAllTags_ReturnValue;  // 0x0058(0x0010)(ReferenceParm)
	struct FActiveGameplayEffectHandle            CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_GetHWAbilitySystem_bSuccess;           // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilitySystemComponent*              CallFunc_BP_GetHWAbilitySystem_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetActiveGameplayEffectTotalDuration_ReturnValue; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_TotalCooldownDuration_ImplicitCast; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_GetCooldownInfoForWidget) == 0x000008, "Wrong alignment on BP_InteractableComponent_C_GetCooldownInfoForWidget");
static_assert(sizeof(BP_InteractableComponent_C_GetCooldownInfoForWidget) == 0x0000B0, "Wrong size on BP_InteractableComponent_C_GetCooldownInfoForWidget");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, TeamMemberActor) == 0x000000, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::TeamMemberActor' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CooldownDuration) == 0x000008, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CooldownDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, TotalCooldownDuration) == 0x000010, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::TotalCooldownDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, LocalGE) == 0x000018, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::LocalGE' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, LocalTotalDuration) == 0x000020, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::LocalTotalDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, LocalCooldownDuration) == 0x000024, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::LocalCooldownDuration' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, LocalGEHandles) == 0x000028, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::LocalGEHandles' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, LocalASC) == 0x000038, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::LocalASC' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue) == 0x000044, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_GetActiveGameplayEffectRemainingDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_GetActiveEffectsWithAllTags_ReturnValue) == 0x000058, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_GetActiveEffectsWithAllTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_BP_GetHWAbilitySystem_bSuccess) == 0x000070, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_BP_GetHWAbilitySystem_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_BP_GetHWAbilitySystem_ReturnValue) == 0x000078, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_BP_GetHWAbilitySystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_GetActiveGameplayEffectTotalDuration_ReturnValue) == 0x000084, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_GetActiveGameplayEffectTotalDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00008C, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Less_IntInt_ReturnValue) == 0x00008D, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_BooleanOR_ReturnValue) == 0x00008E, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, K2Node_FunctionResult_TotalCooldownDuration_ImplicitCast) == 0x000090, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::K2Node_FunctionResult_TotalCooldownDuration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x000098, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x0000A0, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_InteractableComponent_C_GetCooldownInfoForWidget, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0000A8, "Member 'BP_InteractableComponent_C_GetCooldownInfoForWidget::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_InteractableComponent.BP_InteractableComponent_C.GetOwningTeam
// 0x0004 (0x0004 - 0x0000)
struct BP_InteractableComponent_C_GetOwningTeam final
{
public:
	int32                                         OwningTeam;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_InteractableComponent_C_GetOwningTeam) == 0x000004, "Wrong alignment on BP_InteractableComponent_C_GetOwningTeam");
static_assert(sizeof(BP_InteractableComponent_C_GetOwningTeam) == 0x000004, "Wrong size on BP_InteractableComponent_C_GetOwningTeam");
static_assert(offsetof(BP_InteractableComponent_C_GetOwningTeam, OwningTeam) == 0x000000, "Member 'BP_InteractableComponent_C_GetOwningTeam::OwningTeam' has a wrong offset!");

}

