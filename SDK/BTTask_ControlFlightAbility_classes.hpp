#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_ControlFlightAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_ControlFlightAbility.BTTask_ControlFlightAbility_C
// 0x00F8 (0x01A0 - 0x00A8)
class UBTTask_ControlFlightAbility_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 AbilityRangeBlackboardKey;                         // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 AbilityRadiusBlackboardKey;                        // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 CurrentTargetBlackboardKey;                        // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 AbilityTargetPointBlackboardKey;                   // 0x0128(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 RefireTimeBlackboardKey;                           // 0x0150(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FBlackboardKeySelector                 AbilityMinRangeBlackboardKey;                      // 0x0178(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)

public:
	void ExecuteUbergraph_BTTask_ControlFlightAbility(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void UpdateControl(class AHWCharacter_Base* Bot, double DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_ControlFlightAbility_C">();
	}
	static class UBTTask_ControlFlightAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_ControlFlightAbility_C>();
	}
};
static_assert(alignof(UBTTask_ControlFlightAbility_C) == 0x000008, "Wrong alignment on UBTTask_ControlFlightAbility_C");
static_assert(sizeof(UBTTask_ControlFlightAbility_C) == 0x0001A0, "Wrong size on UBTTask_ControlFlightAbility_C");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, UberGraphFrame) == 0x0000A8, "Member 'UBTTask_ControlFlightAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, AbilityRangeBlackboardKey) == 0x0000B0, "Member 'UBTTask_ControlFlightAbility_C::AbilityRangeBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, AbilityRadiusBlackboardKey) == 0x0000D8, "Member 'UBTTask_ControlFlightAbility_C::AbilityRadiusBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, CurrentTargetBlackboardKey) == 0x000100, "Member 'UBTTask_ControlFlightAbility_C::CurrentTargetBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, AbilityTargetPointBlackboardKey) == 0x000128, "Member 'UBTTask_ControlFlightAbility_C::AbilityTargetPointBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, RefireTimeBlackboardKey) == 0x000150, "Member 'UBTTask_ControlFlightAbility_C::RefireTimeBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTTask_ControlFlightAbility_C, AbilityMinRangeBlackboardKey) == 0x000178, "Member 'UBTTask_ControlFlightAbility_C::AbilityMinRangeBlackboardKey' has a wrong offset!");

}

