#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_TPFX

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_TPFX.ABP_TPFX_C
// 0x0420 (0x0770 - 0x0350)
class UABP_TPFX_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0390(0x0050)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x03E0(0x0130)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0510(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0538(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0560(0x0130)()
	struct FVector                                K2Node_PropertyAccess_3;                           // 0x0690(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_PropertyAccess_2;                           // 0x06A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_PropertyAccess_1;                           // 0x06C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_PropertyAccess;                             // 0x06D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         RootRoll;                                          // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CachedActorRotation;                               // 0x06F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LeanRotator;                                       // 0x0710(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        ElapsedTime;                                       // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JetYaw;                                            // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JetX;                                              // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isNotFirstUpdate;                                  // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CacheForwardVelocity;                              // 0x0748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JetNoiseAlpha;                                     // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void Calc_Jet_Flight_Controls(double DeltaTime);
	void CalcElapsedTime(double DeltaTime);
	void CalcLean(double DeltaTime);
	void CalcRoll(double DeltaTime);
	void ExecuteUbergraph_ABP_TPFX(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_TPFX_C">();
	}
	static class UABP_TPFX_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_TPFX_C>();
	}
};
static_assert(alignof(UABP_TPFX_C) == 0x000010, "Wrong alignment on UABP_TPFX_C");
static_assert(sizeof(UABP_TPFX_C) == 0x000770, "Wrong size on UABP_TPFX_C");
static_assert(offsetof(UABP_TPFX_C, UberGraphFrame) == 0x000350, "Member 'UABP_TPFX_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UABP_TPFX_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UABP_TPFX_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_Root) == 0x000368, "Member 'UABP_TPFX_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_SequencePlayer) == 0x000390, "Member 'UABP_TPFX_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_ModifyBone_1) == 0x0003E0, "Member 'UABP_TPFX_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_LocalToComponentSpace) == 0x000510, "Member 'UABP_TPFX_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_ComponentToLocalSpace) == 0x000538, "Member 'UABP_TPFX_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, AnimGraphNode_ModifyBone) == 0x000560, "Member 'UABP_TPFX_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, K2Node_PropertyAccess_3) == 0x000690, "Member 'UABP_TPFX_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, K2Node_PropertyAccess_2) == 0x0006A8, "Member 'UABP_TPFX_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, K2Node_PropertyAccess_1) == 0x0006C0, "Member 'UABP_TPFX_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, K2Node_PropertyAccess) == 0x0006D8, "Member 'UABP_TPFX_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, RootRoll) == 0x0006F0, "Member 'UABP_TPFX_C::RootRoll' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, CachedActorRotation) == 0x0006F8, "Member 'UABP_TPFX_C::CachedActorRotation' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, LeanRotator) == 0x000710, "Member 'UABP_TPFX_C::LeanRotator' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, ElapsedTime) == 0x000728, "Member 'UABP_TPFX_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, JetYaw) == 0x000730, "Member 'UABP_TPFX_C::JetYaw' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, JetX) == 0x000738, "Member 'UABP_TPFX_C::JetX' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, isNotFirstUpdate) == 0x000740, "Member 'UABP_TPFX_C::isNotFirstUpdate' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, CacheForwardVelocity) == 0x000748, "Member 'UABP_TPFX_C::CacheForwardVelocity' has a wrong offset!");
static_assert(offsetof(UABP_TPFX_C, JetNoiseAlpha) == 0x000760, "Member 'UABP_TPFX_C::JetNoiseAlpha' has a wrong offset!");

}

