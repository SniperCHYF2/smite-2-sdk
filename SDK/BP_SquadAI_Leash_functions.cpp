#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SquadAI_Leash

#include "Basic.hpp"

#include "BP_SquadAI_Leash_classes.hpp"
#include "BP_SquadAI_Leash_parameters.hpp"


namespace SDK
{

// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.BindSquadMemberEvents
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::BindSquadMemberEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "BindSquadMemberEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.BindToLeashComponentEvents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::BindToLeashComponentEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "BindToLeashComponentEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.BindToLeashVolumeEvents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::BindToLeashVolumeEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "BindToLeashVolumeEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.CheckInsideLeash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           ActorToCheck                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInsideLeash                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::CheckInsideLeash(class AActor* ActorToCheck, bool* IsInsideLeash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "CheckInsideLeash");

	Params::BP_SquadAI_Leash_C_CheckInsideLeash Parms{};

	Parms.ActorToCheck = ActorToCheck;

	UObject::ProcessEvent(Func, &Parms);

	if (IsInsideLeash != nullptr)
		*IsInsideLeash = Parms.IsInsideLeash;
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.DropTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TargetToDrop                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::DropTarget(class AActor* TargetToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "DropTarget");

	Params::BP_SquadAI_Leash_C_DropTarget Parms{};

	Parms.TargetToDrop = TargetToDrop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.ExecuteUbergraph_BP_SquadAI_Leash
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::ExecuteUbergraph_BP_SquadAI_Leash(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "ExecuteUbergraph_BP_SquadAI_Leash");

	Params::BP_SquadAI_Leash_C_ExecuteUbergraph_BP_SquadAI_Leash Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.GetHostileTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor**                          HostileTarget                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::GetHostileTarget(class AActor** HostileTarget, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "GetHostileTarget");

	Params::BP_SquadAI_Leash_C_GetHostileTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HostileTarget != nullptr)
		*HostileTarget = Parms.HostileTarget;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.HasHostileTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasHostileTargets_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::HasHostileTargets(bool* HasHostileTargets_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "HasHostileTargets");

	Params::BP_SquadAI_Leash_C_HasHostileTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasHostileTargets_0 != nullptr)
		*HasHostileTargets_0 = Parms.HasHostileTargets_0;
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.IsHostileTargetWithinRange
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HostileTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsWithinRange                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::IsHostileTargetWithinRange(class AActor* HostileTarget, double Range, bool* IsWithinRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "IsHostileTargetWithinRange");

	Params::BP_SquadAI_Leash_C_IsHostileTargetWithinRange Parms{};

	Parms.HostileTarget = HostileTarget;
	Parms.Range = Range;

	UObject::ProcessEvent(Func, &Parms);

	if (IsWithinRange != nullptr)
		*IsWithinRange = Parms.IsWithinRange;
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.NewHostileTarget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::NewHostileTarget(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "NewHostileTarget");

	Params::BP_SquadAI_Leash_C_NewHostileTarget Parms{};

	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnLeashCompEntered_Del
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_SquadAI_Leash_C::OnLeashCompEntered_Del(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnLeashCompEntered_Del");

	Params::BP_SquadAI_Leash_C_OnLeashCompEntered_Del Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnLeashCompExited_Del
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::OnLeashCompExited_Del(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnLeashCompExited_Del");

	Params::BP_SquadAI_Leash_C_OnLeashCompExited_Del Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnLeashVolEntered_Del
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::OnLeashVolEntered_Del(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnLeashVolEntered_Del");

	Params::BP_SquadAI_Leash_C_OnLeashVolEntered_Del Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnLeashVolExited_Del
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OverlappedActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::OnLeashVolExited_Del(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnLeashVolExited_Del");

	Params::BP_SquadAI_Leash_C_OnLeashVolExited_Del Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnSquadMemberAdded
// (Event, Public, BlueprintEvent)
// Parameters:
// class AHWCharacter_NPC*                 Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::OnSquadMemberAdded(class AHWCharacter_NPC* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnSquadMemberAdded");

	Params::BP_SquadAI_Leash_C_OnSquadMemberAdded Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.OnSquadMemberDamaged_Del
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DamageEventData                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_SquadAI_Leash_C::OnSquadMemberDamaged_Del(const struct FDamageEventData& DamageEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "OnSquadMemberDamaged_Del");

	Params::BP_SquadAI_Leash_C_OnSquadMemberDamaged_Del Parms{};

	Parms.DamageEventData = std::move(DamageEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SquadAI_Leash_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.RegisterTargetInLeash
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewTarget                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::RegisterTargetInLeash(class AActor* NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "RegisterTargetInLeash");

	Params::BP_SquadAI_Leash_C_RegisterTargetInLeash Parms{};

	Parms.NewTarget = NewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.RepopulateHostileTargetArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::RepopulateHostileTargetArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "RepopulateHostileTargetArray");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.RepopulateHostileTargetArrayBasedOnDistance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::RepopulateHostileTargetArrayBasedOnDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "RepopulateHostileTargetArrayBasedOnDistance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.RetrieveLeash
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SquadAI_Leash_C::RetrieveLeash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "RetrieveLeash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.SelectClosestSuspiciousTarget
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>&                  SuspiciousTargets_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor**                          SuspciousTarget                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::SelectClosestSuspiciousTarget(TArray<class AActor*>& SuspiciousTargets_0, class AActor** SuspciousTarget, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "SelectClosestSuspiciousTarget");

	Params::BP_SquadAI_Leash_C_SelectClosestSuspiciousTarget Parms{};

	Parms.SuspiciousTargets_0 = std::move(SuspiciousTargets_0);

	UObject::ProcessEvent(Func, &Parms);

	SuspiciousTargets_0 = std::move(Parms.SuspiciousTargets_0);

	if (SuspciousTarget != nullptr)
		*SuspciousTarget = Parms.SuspciousTarget;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_SquadAI_Leash.BP_SquadAI_Leash_C.SortHostileTargets
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor**                          HostileTarget                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_SquadAI_Leash_C::SortHostileTargets(class AActor** HostileTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SquadAI_Leash_C", "SortHostileTargets");

	Params::BP_SquadAI_Leash_C_SortHostileTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HostileTarget != nullptr)
		*HostileTarget = Parms.HostileTarget;
}

}

