#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HemingwayUI

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "HemingwayUI_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RallyHereStart_structs.hpp"
#include "RallyHereStart_classes.hpp"
#include "BanPickDraftUI_classes.hpp"
#include "Hemingway_structs.hpp"
#include "Hemingway_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "SlateCore_structs.hpp"
#include "BanPickDraftCommon_structs.hpp"
#include "RallyHereAPI_structs.hpp"
#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "RallyHereIntegration_structs.hpp"
#include "CommonInput_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "CommonUI_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// Class HemingwayUI.HWAccoladeStompAssessorBase
// 0x0000 (0x0028 - 0x0028)
class UHWAccoladeStompAssessorBase final : public UObject
{
public:
	bool ShouldStomp(const struct FHWAccoladeDisplayData& Accolade1Data, const struct FHWAccoladeDisplayData& Accolade2Data, const struct FHWAccoladeConfig& Accolade1Config, const struct FHWAccoladeConfig& Accolade2Config, class AHWGameHUD* GameHUD) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeStompAssessorBase">();
	}
	static class UHWAccoladeStompAssessorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeStompAssessorBase>();
	}
};
static_assert(alignof(UHWAccoladeStompAssessorBase) == 0x000008, "Wrong alignment on UHWAccoladeStompAssessorBase");
static_assert(sizeof(UHWAccoladeStompAssessorBase) == 0x000028, "Wrong size on UHWAccoladeStompAssessorBase");

// Class HemingwayUI.HWWidget
// 0x0040 (0x05F8 - 0x05B8)
class UHWWidget : public URHWidget
{
public:
	TArray<struct FUIContextCalloutDisplay>       RegisteredContextCalloutDisplays;                  // 0x05B8(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsSelectHandler;                                  // 0x05C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         SelectBindingFlags;                                // 0x05C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5CA[0x6];                                      // 0x05CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanBeWithoutParent;                               // 0x05D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D1[0x17];                                     // 0x05D1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bFadeInOnShow;                                     // 0x05E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetFadeOnHide;                                  // 0x05E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5EA[0x2];                                      // 0x05EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x05EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeRenderOpacity;                                 // 0x05F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddNamedWidget(class FName Name_0, const struct FHWNamedWidget& Data);
	bool BP_OnHandleSelectAction();
	void ClearPendingViewData();
	float GetCustomModifierValue(const class FName& InCustomModifierName);
	void HandleCustomModifierUpdated(const struct FHWUIStyleLocalCustomModifier& InCustomModifier);
	bool HandleViewRedirect(class UHWViewRedirectContext* RedirectContext);
	void InvalidateLayout(class UWidget* WidgetToInvalidate);
	void InvalidateOnChildrenChanged(class UWidget* WidgetToInvalidate);
	void InvalidatePaint(class UWidget* WidgetToInvalidate);
	void OverrideBackDisplayName(const class FText& DisplayName);
	void OverrideSelectDisplayName(const class FText& DisplayName);
	bool PopTopRouteFromLayer(const struct FGameplayTag& ReferenceRouteTag, bool bForceTransition);
	void RefreshActiveFocusNextTick();
	void RemoveNamedWidget(class FName Name_0);
	bool ReplaceWithDefaultRoute(bool bForceTransition);
	bool ReplaceWithRoute(const struct FGameplayTag& NewRouteTag, bool bForceTransition, class UObject* RouteData);
	bool ToggleRoute(const struct FGameplayTag& InRouteTag, bool bForceTransition, class UObject* RouteData);
	void TriggerAlertByWidgetGeometry(const struct FGameplayTag& AlertTag, const struct FGeometry& ReferenceGeometry, const struct FVector2D& Coordinates, float Duration);
	void TriggerAlertByWidgetName(const struct FGameplayTag& AlertTag, class FName WidgetName, float Duration);

	EHWHUDLayoutPreset GetActiveHUDLayoutPreset() const;
	class UHWBaseHUDWidget* GetBaseHUDWidget() const;
	ERH_INPUT_STATE GetCurrentInputState() const;
	class FText GetDefaultSelectDisplayName() const;
	class AHWBaseHUD* GetLocalHUDAsBase() const;
	class AHWClientHUD* GetLocalHUDAsClient() const;
	class AHWDraftLobbyHUD* GetLocalHUDAsDraftLobby() const;
	class AHWGameHUD* GetLocalHUDAsGame() const;
	class AHWLobbyHUD* GetLocalHUDAsLobby() const;
	class ARHHUDCommon* GetLocalHUDAsRHCommon() const;
	class AHWSpectatorHUD* GetLocalHUDAsSpectator() const;
	class UWorld* GetLocalHUDWorld() const;
	class ULocalPlayer* GetLocalPlayer() const;
	class AHWPlayerController* GetLocalPlayerController() const;
	class UHWPlayerInfo* GetLocalPlayerInfo() const;
	class AHWPlayerState* GetLocalPlayerState() const;
	class UPanelWidget* GetNavigationStitchEntry() const;
	struct FGameplayTag GetViewRedirectOnBackTag() const;
	class UWidget* GetWidgetToFade() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWidget">();
	}
	static class UHWWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWidget>();
	}
};
static_assert(alignof(UHWWidget) == 0x000008, "Wrong alignment on UHWWidget");
static_assert(sizeof(UHWWidget) == 0x0005F8, "Wrong size on UHWWidget");
static_assert(offsetof(UHWWidget, RegisteredContextCalloutDisplays) == 0x0005B8, "Member 'UHWWidget::RegisteredContextCalloutDisplays' has a wrong offset!");
static_assert(offsetof(UHWWidget, bIsSelectHandler) == 0x0005C8, "Member 'UHWWidget::bIsSelectHandler' has a wrong offset!");
static_assert(offsetof(UHWWidget, SelectBindingFlags) == 0x0005C9, "Member 'UHWWidget::SelectBindingFlags' has a wrong offset!");
static_assert(offsetof(UHWWidget, bCanBeWithoutParent) == 0x0005D0, "Member 'UHWWidget::bCanBeWithoutParent' has a wrong offset!");
static_assert(offsetof(UHWWidget, bFadeInOnShow) == 0x0005E8, "Member 'UHWWidget::bFadeInOnShow' has a wrong offset!");
static_assert(offsetof(UHWWidget, bResetFadeOnHide) == 0x0005E9, "Member 'UHWWidget::bResetFadeOnHide' has a wrong offset!");
static_assert(offsetof(UHWWidget, FadeTime) == 0x0005EC, "Member 'UHWWidget::FadeTime' has a wrong offset!");
static_assert(offsetof(UHWWidget, FadeRenderOpacity) == 0x0005F0, "Member 'UHWWidget::FadeRenderOpacity' has a wrong offset!");

// Class HemingwayUI.HWMinimapMinionBlipWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWMinimapMinionBlipWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetMinionBlipType(const EHWMinionBlipType& MinionType);
	void SetTeamColoration(const bool bFriendly);
	void ToggleFireStateDisplay(const bool bInIsFireMinion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapMinionBlipWidget">();
	}
	static class UHWMinimapMinionBlipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapMinionBlipWidget>();
	}
};
static_assert(alignof(UHWMinimapMinionBlipWidget) == 0x000008, "Wrong alignment on UHWMinimapMinionBlipWidget");
static_assert(sizeof(UHWMinimapMinionBlipWidget) == 0x000600, "Wrong size on UHWMinimapMinionBlipWidget");

// Class HemingwayUI.HWAnimatedGridPanel
// 0x0008 (0x0600 - 0x05F8)
class UHWAnimatedGridPanel : public UHWWidget
{
public:
	class UHWUniformGridPanel*                    UniformGridPanel;                                  // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetEntryIndex(class UHWWidget* SetWidget, int32 Entry);
	void SwapWidgetData(class UHWWidget* WidgetOne, class UHWWidget* WidgetTwo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAnimatedGridPanel">();
	}
	static class UHWAnimatedGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAnimatedGridPanel>();
	}
};
static_assert(alignof(UHWAnimatedGridPanel) == 0x000008, "Wrong alignment on UHWAnimatedGridPanel");
static_assert(sizeof(UHWAnimatedGridPanel) == 0x000600, "Wrong size on UHWAnimatedGridPanel");
static_assert(offsetof(UHWAnimatedGridPanel, UniformGridPanel) == 0x0005F8, "Member 'UHWAnimatedGridPanel::UniformGridPanel' has a wrong offset!");

// Class HemingwayUI.HWHUDEditorWidget
// 0x0140 (0x0738 - 0x05F8)
class UHWHUDEditorWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWHUDEditorEditableEntry>  EditableEntryClass;                                // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWHUDEditorEditableEntry*> EditableEntries;                     // 0x0600(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWHUDEditorHighlighter>    HighlighterClass;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDragArea>                DragAreaClass;                                     // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHUDEditorEditableEntry*              SelectedEntry;                                     // 0x0660(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            SaveActionContainer;                               // 0x0668(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            LoadActionContainer;                               // 0x06A8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ResetActionContainer;                              // 0x06E8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_728[0x10];                                     // 0x0728(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddedEditableEntry(class UHWHUDEditorEditableEntry* AddedEntry);
	void HandleEditableEntrySelected(class UHWHUDEditorEditableEntry* EditableEntry);
	void HideHighlighters();
	void ReloadEditableEntryValues();
	void RemovedEditableEntry(class UHWHUDEditorEditableEntry* RemovedEntry);
	void SelectedEntryChanged(class UHWHUDEditorEditableEntry* NewSelectedEntry);
	void SetGlobalColorModifier(const struct FGameplayTag& ColorTag, const struct FLinearColor& Color);
	void SetGlobalScaleModifier(float NewScale);
	void ShowHighlighters();
	void UpdateHasUnsavedChanges(bool bHasUnsavedChanges);

	class UHWHUDEditorEditableEntry* GetSelectedEntry() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorWidget">();
	}
	static class UHWHUDEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorWidget>();
	}
};
static_assert(alignof(UHWHUDEditorWidget) == 0x000008, "Wrong alignment on UHWHUDEditorWidget");
static_assert(sizeof(UHWHUDEditorWidget) == 0x000738, "Wrong size on UHWHUDEditorWidget");
static_assert(offsetof(UHWHUDEditorWidget, EditableEntryClass) == 0x0005F8, "Member 'UHWHUDEditorWidget::EditableEntryClass' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, EditableEntries) == 0x000600, "Member 'UHWHUDEditorWidget::EditableEntries' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, HighlighterClass) == 0x000650, "Member 'UHWHUDEditorWidget::HighlighterClass' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, DragAreaClass) == 0x000658, "Member 'UHWHUDEditorWidget::DragAreaClass' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, SelectedEntry) == 0x000660, "Member 'UHWHUDEditorWidget::SelectedEntry' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, SaveActionContainer) == 0x000668, "Member 'UHWHUDEditorWidget::SaveActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, LoadActionContainer) == 0x0006A8, "Member 'UHWHUDEditorWidget::LoadActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorWidget, ResetActionContainer) == 0x0006E8, "Member 'UHWHUDEditorWidget::ResetActionContainer' has a wrong offset!");

// Class HemingwayUI.HWBuffWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWBuffWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWGameplayEffectUIBuffData> CurrentBuffData;                               // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndTime;                                           // 0x0600(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StackCount;                                        // 0x0604(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BuffDataUpdated();
	void HideTooltip();
	void PopulateWithBuffData(const class UHWGameplayEffectUIBuffData* BuffData);
	void SetBuffEndTime(float InEndTime);
	void SetBuffStacks(int32 InStackCount);
	void SetBuffWidgetType(EHWBuffWidgetType BuffWidgetType);
	void ShowTooltip(class UWidget* ReferenceWidget, EHWTooltipAxis Axis);
	void UpdateCountdown();
	void UpdateStackCount();

	const class UHWGameplayEffectUIBuffData* GetCurrentBuffData() const;
	float GetTimeRemaining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWBuffWidget">();
	}
	static class UHWBuffWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWBuffWidget>();
	}
};
static_assert(alignof(UHWBuffWidget) == 0x000008, "Wrong alignment on UHWBuffWidget");
static_assert(sizeof(UHWBuffWidget) == 0x000608, "Wrong size on UHWBuffWidget");
static_assert(offsetof(UHWBuffWidget, CurrentBuffData) == 0x0005F8, "Member 'UHWBuffWidget::CurrentBuffData' has a wrong offset!");
static_assert(offsetof(UHWBuffWidget, EndTime) == 0x000600, "Member 'UHWBuffWidget::EndTime' has a wrong offset!");
static_assert(offsetof(UHWBuffWidget, StackCount) == 0x000604, "Member 'UHWBuffWidget::StackCount' has a wrong offset!");

// Class HemingwayUI.HWCharacterWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWCharacterWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackLocalPlayer;                                 // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDontUpdateABSActorOnFamiliar;                     // 0x0601(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_602[0x2];                                      // 0x0602(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWPlayerState>          TrackedPlayerState;                                // 0x0604(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWCharacterAbilitySystemActor> TrackedABSActor;                            // 0x060C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWCharacter_Base>       TrackedCharacter;                                  // 0x0614(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackCharacterOwner;                              // 0x061C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackCharacterItem;                               // 0x061D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackCharacterRespawn;                            // 0x061E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61F[0xD];                                      // 0x061F(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackCharacterTeam;                               // 0x062C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackLocalTeam;                                   // 0x062D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackCharacterInventory;                          // 0x062E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuppressFriendlyUpdates;                          // 0x062F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuppressHostileUpdates;                           // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackDisconnection;                               // 0x0631(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CharacterItemChanged(const class UHWCharacterItem* NewCharacterItem);
	void CharacterOwnerChanged(class AHWCharacter_Base* NewCharacterOwner);
	void CharacterTeamUpdated(const struct FGenericTeamId& GenericTeamId, ETeamAttitude AttitudeTowardsLocal);
	void CharacterUpdateSuppressChanged(bool bNewUpdatesAreSuppressed);
	void ClearCharacterListeners();
	void ClearListeners();
	void DisconnectionStateChanged(bool bDisconnected);
	void DisplayCharacterRespawnState(bool bIsAlive, float RemainingRespawnTime);
	void HandleCharacterAbilitySystemUpdated(class UHWAbilitySystemComponent* AbilitySystem, class UHWAbilitySystemComponent* OldAbilitySystem);
	void HandleCharacterDied(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, float RespawnTimerDuration);
	void HandleCharacterItemChanged(TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner, const class UHWCharacterItem* NewCharacterItem);
	void HandleCharacterOwnerChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class AHWCharacter_Base* NewCharacterOwner);
	void HandleCharacterRespawned(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor);
	void HandleCharacterTeamUpdated(class AHWCharacterAbilitySystemActor* OwningAbilitySystemActor, class AHWTeamState* InTeamState);
	void HandleInventoryManagerChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class UHWInventoryManagerComponent* NewInventoryManager);
	void HandleLocalOwnerMinimapUpdate(class UHWVisibilityComponent* VisibilityComponent);
	void HandleLocalPlayerStateReceived(class AHWPlayerState* PlayerState);
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandlePlayerStateAbilitySystemActorChanged(class AHWPlayerState* PlayerState, class AHWCharacterAbilitySystemActor* NewABSActor);
	void HandlePlayerStateOnAIOvertakeStatusChanged(class AHWPlayerState* PlayerState, bool bIsOvertakenByAI);
	void HandleTrackedCharacterPlayerStateChanged(class AHWCharacter_Base* OwnerCharacter, class AHWPlayerState* NewPlayerState);
	void HandleVisibilityComponentUpdated(class UHWVisibilityComponent* VisibilityComponent);
	void InventoryManagerUpdated(class UHWInventoryManagerComponent* NewInventoryManager);
	void OnLocalTeamUpdated(const struct FGenericTeamId& TeamId, ETeamAttitude AttitudeTowardsLocal);
	void TrackByCharacter(class AHWCharacter_Base* Character);
	void TrackByPlayerState(class AHWPlayerState* InPlayerState);
	void TrackedABSActorChanged(class AHWCharacterAbilitySystemActor* NewABSActor);
	void TrackedCharacterChanged(class AHWCharacter_Base* NewCharacter);
	void TrackedPlayerStateChanged(class AHWPlayerState* NewPlayerState);
	void UpdateCharacterRespawnTime(float RemainingRespawnTime);

	bool AreUpdatesSuppressed() const;
	TArray<class UHWGameplayAttributeWidget*> GetAttributeWidgets() const;
	class AHWCharacter_Base* GetCharacterOwner() const;
	float GetCharacterRemainingRespawnPercent() const;
	float GetCharacterRemainingRespawnTime() const;
	class AHWTeamState* GetCharacterTeam() const;
	struct FGenericTeamId GetCharacterTeamId() const;
	TArray<class UHWCharacterWidget*> GetCharacterWidgets() const;
	const class UHWCharacterItem* GetCurrentCharacterItem() const;
	TArray<class UHWGameplayEffectWidget*> GetEffectWidgets() const;
	ETeamAttitude GetTeamAttitudeTowardsLocal() const;
	TSoftObjectPtr<class UTexture2D> GetTextureFromItem(const struct FGameplayTag& GameplayTag) const;
	class AHWCharacterAbilitySystemActor* GetTrackedABSActor() const;
	class UHWAbilitySystemComponent* GetTrackedASC() const;
	class AHWCharacter_Base* GetTrackedCharacter() const;
	class UHWInventoryManagerComponent* GetTrackedInventoryManager() const;
	class AHWPlayerState* GetTrackedPlayerState() const;
	class UHWVisibilityComponent* GetVisibilityComponent() const;
	bool IsOnLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterWidget">();
	}
	static class UHWCharacterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterWidget>();
	}
};
static_assert(alignof(UHWCharacterWidget) == 0x000008, "Wrong alignment on UHWCharacterWidget");
static_assert(sizeof(UHWCharacterWidget) == 0x000638, "Wrong size on UHWCharacterWidget");
static_assert(offsetof(UHWCharacterWidget, bTrackLocalPlayer) == 0x000600, "Member 'UHWCharacterWidget::bTrackLocalPlayer' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bDontUpdateABSActorOnFamiliar) == 0x000601, "Member 'UHWCharacterWidget::bDontUpdateABSActorOnFamiliar' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, TrackedPlayerState) == 0x000604, "Member 'UHWCharacterWidget::TrackedPlayerState' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, TrackedABSActor) == 0x00060C, "Member 'UHWCharacterWidget::TrackedABSActor' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, TrackedCharacter) == 0x000614, "Member 'UHWCharacterWidget::TrackedCharacter' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackCharacterOwner) == 0x00061C, "Member 'UHWCharacterWidget::bTrackCharacterOwner' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackCharacterItem) == 0x00061D, "Member 'UHWCharacterWidget::bTrackCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackCharacterRespawn) == 0x00061E, "Member 'UHWCharacterWidget::bTrackCharacterRespawn' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackCharacterTeam) == 0x00062C, "Member 'UHWCharacterWidget::bTrackCharacterTeam' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackLocalTeam) == 0x00062D, "Member 'UHWCharacterWidget::bTrackLocalTeam' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackCharacterInventory) == 0x00062E, "Member 'UHWCharacterWidget::bTrackCharacterInventory' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bSuppressFriendlyUpdates) == 0x00062F, "Member 'UHWCharacterWidget::bSuppressFriendlyUpdates' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bSuppressHostileUpdates) == 0x000630, "Member 'UHWCharacterWidget::bSuppressHostileUpdates' has a wrong offset!");
static_assert(offsetof(UHWCharacterWidget, bTrackDisconnection) == 0x000631, "Member 'UHWCharacterWidget::bTrackDisconnection' has a wrong offset!");

// Class HemingwayUI.HWScoreboardPlayerWidget
// 0x0058 (0x0690 - 0x0638)
class UHWScoreboardPlayerWidget : public UHWCharacterWidget
{
public:
	TMulticastInlineDelegate<void(class UHWScoreboardPlayerWidget* PlayerWidget, class AHWPlayerState* SelectedPlayer)> OnPlayerEntryMuteSelected; // 0x0638(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_648[0x18];                                     // 0x0648(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  TrackedPlayerGuid;                                 // 0x0660(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_670[0x18];                                     // 0x0670(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bGodPortraitCurrentlySelected;                     // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowStates;                                 // 0x0689(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68A[0x6];                                      // 0x068A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeselectGodPortrait();
	struct FGeometry GetPlayerNameGeometry();
	void HandlePlayerStatsTrackerReplicated(class AHWPlayerState* PlayerState, class AHWPlayerStatsTracker* PlayerStatsTracker);
	void HandlePlayerTotalGoldUpdated(class AHWPlayerState* PlayerState, int32 OldTotalGold, int32 NewTotalGold);
	void HandlePlayerUuidReplicated(class AHWPlayerState* PlayerState, const struct FGuid& NewUuid);
	void ManuallyDisplayHighlight();
	void OnGodPortraitSelected(const bool bSelected, const bool bIsHover);
	void OnPlayerMuteSelected();
	void OnPlayerSelected();
	void SetVoiceChatState(bool bInVoiceChannel, bool bIsTalking, bool bIsMuted);
	void UpdatePlayerName(class URH_PlayerInfo* PlayerInfo);
	void UpdatePlayerPlatformIcon(ERHPlatformDisplayType NewPlatform);
	void UpdateTotalGold(int32 OldTotalGold, int32 NewTotalGold);

	int32 GetPlayerTotalGold() const;
	const struct FGuid GetTrackedPlayerGuid() const;
	class URH_PlayerInfo* GetTrackedPlayerInfo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScoreboardPlayerWidget">();
	}
	static class UHWScoreboardPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScoreboardPlayerWidget>();
	}
};
static_assert(alignof(UHWScoreboardPlayerWidget) == 0x000008, "Wrong alignment on UHWScoreboardPlayerWidget");
static_assert(sizeof(UHWScoreboardPlayerWidget) == 0x000690, "Wrong size on UHWScoreboardPlayerWidget");
static_assert(offsetof(UHWScoreboardPlayerWidget, OnPlayerEntryMuteSelected) == 0x000638, "Member 'UHWScoreboardPlayerWidget::OnPlayerEntryMuteSelected' has a wrong offset!");
static_assert(offsetof(UHWScoreboardPlayerWidget, TrackedPlayerGuid) == 0x000660, "Member 'UHWScoreboardPlayerWidget::TrackedPlayerGuid' has a wrong offset!");
static_assert(offsetof(UHWScoreboardPlayerWidget, bGodPortraitCurrentlySelected) == 0x000688, "Member 'UHWScoreboardPlayerWidget::bGodPortraitCurrentlySelected' has a wrong offset!");
static_assert(offsetof(UHWScoreboardPlayerWidget, bShouldShowStates) == 0x000689, "Member 'UHWScoreboardPlayerWidget::bShouldShowStates' has a wrong offset!");

// Class HemingwayUI.HWCharacterSwapPopupEntryWidget
// 0x0048 (0x0640 - 0x05F8)
class UHWCharacterSwapPopupEntryWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem)> OnCharacterSwapEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem)> OnCharacterSwapEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem)> OnCharacterSwapEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         CachedPlayerState;                                 // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWTradeRequestResult                         CachedTradeResult;                                 // 0x0630(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWTradeEntryState                            EntryState;                                        // 0x0631(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void HandleEntryButtonUnhovered();
	void HandlePlayerStateReceivedCharacterSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void SetPlayerState(class AHWPlayerState* InPlayerState);
	void UpdateEntryDisplayState();

	bool CanLocalPlayerClaimEntry() const;
	const class UHWCharacterItem* GetEntryCharacter() const;
	class FString GetPlayerName() const;
	class AHWPlayerState* GetPlayerState() const;
	bool IsLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterSwapPopupEntryWidget">();
	}
	static class UHWCharacterSwapPopupEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterSwapPopupEntryWidget>();
	}
};
static_assert(alignof(UHWCharacterSwapPopupEntryWidget) == 0x000008, "Wrong alignment on UHWCharacterSwapPopupEntryWidget");
static_assert(sizeof(UHWCharacterSwapPopupEntryWidget) == 0x000640, "Wrong size on UHWCharacterSwapPopupEntryWidget");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, OnCharacterSwapEntryHovered) == 0x0005F8, "Member 'UHWCharacterSwapPopupEntryWidget::OnCharacterSwapEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, OnCharacterSwapEntryUnhovered) == 0x000608, "Member 'UHWCharacterSwapPopupEntryWidget::OnCharacterSwapEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, OnCharacterSwapEntrySelected) == 0x000618, "Member 'UHWCharacterSwapPopupEntryWidget::OnCharacterSwapEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, CachedPlayerState) == 0x000628, "Member 'UHWCharacterSwapPopupEntryWidget::CachedPlayerState' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, CachedTradeResult) == 0x000630, "Member 'UHWCharacterSwapPopupEntryWidget::CachedTradeResult' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, EntryState) == 0x000631, "Member 'UHWCharacterSwapPopupEntryWidget::EntryState' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupEntryWidget, HitTarget) == 0x000638, "Member 'UHWCharacterSwapPopupEntryWidget::HitTarget' has a wrong offset!");

// Class HemingwayUI.HWPassiveMeterWidget
// 0x0070 (0x0668 - 0x05F8)
class UHWPassiveMeterWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWPassiveMeterPip>         PipWidgetClass;                                    // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHWPassiveMeterPip*>             PipWidgets;                                        // 0x0600(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_610[0x18];                                     // 0x0610(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWPassiveMeterComponent> PassiveMeterComponent;                            // 0x0628(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector2D>                      PipLocation;                                       // 0x0630(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 PipRotation;                                       // 0x0640(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x18];                                     // 0x0650(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearPassiveMeterWidget();
	void ConfigurePips(TArray<class UHWPassiveMeterPip*>& PipList);
	void HandleOnDataFieldRemoved(const struct FGameplayTag& RemovedFieldTag);
	void HandleOnDataFieldUpdated(const struct FHWPassiveMeterDataField& UpdatedDataField);
	void HandleOnFilledPipsChanged(int32 OldFilledPips, int32 NewFilledPips);
	void HandleOnLargePipDataChanged(const struct FHWPassiveMeterLargePipData& OldLargePipData, const struct FHWPassiveMeterLargePipData& NewLargePipData);
	void HandleOnMeterFillChanged(float OldMeterFill, float NewMeterFill);
	void InitializePassiveMeterWidget(class UHWPassiveMeterComponent* InPassiveMeterComponent);
	void OnPassiveGameplayTagEvent(const struct FGameplayTag& EventGameplayTag, const int32 Stack);
	void OnPipWidgetAdded(class UHWPassiveMeterPip* PipWidget);
	void OnPipWidgetRemoved(class UHWPassiveMeterPip* PipWidget);
	void SetShowMeter(bool bInShowMeter);
	void SetTotalPips(int32 InTotalPips);
	void UpdatePipsFilledCount(int32 FilledPipCount, int32 TotalPipCount);

	class UHWPassiveMeterComponent* GetPassiveMeterComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPassiveMeterWidget">();
	}
	static class UHWPassiveMeterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPassiveMeterWidget>();
	}
};
static_assert(alignof(UHWPassiveMeterWidget) == 0x000008, "Wrong alignment on UHWPassiveMeterWidget");
static_assert(sizeof(UHWPassiveMeterWidget) == 0x000668, "Wrong size on UHWPassiveMeterWidget");
static_assert(offsetof(UHWPassiveMeterWidget, PipWidgetClass) == 0x0005F8, "Member 'UHWPassiveMeterWidget::PipWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidget, PipWidgets) == 0x000600, "Member 'UHWPassiveMeterWidget::PipWidgets' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidget, PassiveMeterComponent) == 0x000628, "Member 'UHWPassiveMeterWidget::PassiveMeterComponent' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidget, PipLocation) == 0x000630, "Member 'UHWPassiveMeterWidget::PipLocation' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidget, PipRotation) == 0x000640, "Member 'UHWPassiveMeterWidget::PipRotation' has a wrong offset!");

// Class HemingwayUI.HWCharacterSwapPopupProposalEntryWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWCharacterSwapPopupProposalEntryWidget final : public UHWWidget
{
public:
	class AHWPlayerState*                         CachedPlayerState;                                 // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPlayerState(class AHWPlayerState* InPlayerState);

	bool IsLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterSwapPopupProposalEntryWidget">();
	}
	static class UHWCharacterSwapPopupProposalEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterSwapPopupProposalEntryWidget>();
	}
};
static_assert(alignof(UHWCharacterSwapPopupProposalEntryWidget) == 0x000008, "Wrong alignment on UHWCharacterSwapPopupProposalEntryWidget");
static_assert(sizeof(UHWCharacterSwapPopupProposalEntryWidget) == 0x000600, "Wrong size on UHWCharacterSwapPopupProposalEntryWidget");
static_assert(offsetof(UHWCharacterSwapPopupProposalEntryWidget, CachedPlayerState) == 0x0005F8, "Member 'UHWCharacterSwapPopupProposalEntryWidget::CachedPlayerState' has a wrong offset!");

// Class HemingwayUI.HWGridPanel
// 0x0010 (0x01D8 - 0x01C8)
class UHWGridPanel : public UGridPanel
{
public:
	EHWGridNavigationRule                         NavigationRule;                                    // 0x01C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationRule                             RuleEdgeReached;                                   // 0x01C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CA[0xE];                                      // 0x01CA(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildNavigation();

	class UWidget* GetFirstVisibleChild() const;
	int32 GetNumberOfRows() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGridPanel">();
	}
	static class UHWGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGridPanel>();
	}
};
static_assert(alignof(UHWGridPanel) == 0x000008, "Wrong alignment on UHWGridPanel");
static_assert(sizeof(UHWGridPanel) == 0x0001D8, "Wrong size on UHWGridPanel");
static_assert(offsetof(UHWGridPanel, NavigationRule) == 0x0001C8, "Member 'UHWGridPanel::NavigationRule' has a wrong offset!");
static_assert(offsetof(UHWGridPanel, RuleEdgeReached) == 0x0001C9, "Member 'UHWGridPanel::RuleEdgeReached' has a wrong offset!");

// Class HemingwayUI.HWSortableGridPanel
// 0x0048 (0x0220 - 0x01D8)
class UHWSortableGridPanel final : public UHWGridPanel
{
public:
	TSubclassOf<class UHWWidget>                  EntryWidgetClass;                                  // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOrientation                                  Orientation;                                       // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                EntryPadding;                                      // 0x01E4(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         Length;                                            // 0x01F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxEntries;                                        // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWSortableGridSortOrder                      SortOrder;                                         // 0x01FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayInReverseOrder;                            // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlySortVisibleEntries;                           // 0x01FE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FF[0x1];                                      // 0x01FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UHWWidget* AddedEntry)> OnGridEntryAdded;                    // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWWidget* RemovedEntry)> OnGridEntryRemoved;                // 0x0210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddEntries(const TArray<class UHWWidget*>& Entries, bool bSort);
	void AddEntry(class UHWWidget* EntryWidget, bool bSort);
	TArray<class UHWWidget*> AddUninitializedEntries(int32 EntryCount, bool bSort);
	void ClearEntries();
	void GridEntryAdded(class UHWWidget* AddedEntry);
	void GridEntryRemoved(class UHWWidget* RemovedEntry);
	void RemoveEntry(class UHWWidget* Entry);
	void SetDisplayInReverseOrder(bool bInDisplayInReverseOrder);
	void SetEntryPadding(const struct FMargin& Padding);
	void SetLength(int32 InLength);
	void SetOrientation(EOrientation InOrientation);
	void SetSortOrder(EHWSortableGridSortOrder NewSortOrder);
	void Sort();

	bool GetDisplayInReverseOrder() const;
	TArray<class UHWWidget*> GetEntries() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSortableGridPanel">();
	}
	static class UHWSortableGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSortableGridPanel>();
	}
};
static_assert(alignof(UHWSortableGridPanel) == 0x000008, "Wrong alignment on UHWSortableGridPanel");
static_assert(sizeof(UHWSortableGridPanel) == 0x000220, "Wrong size on UHWSortableGridPanel");
static_assert(offsetof(UHWSortableGridPanel, EntryWidgetClass) == 0x0001D8, "Member 'UHWSortableGridPanel::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, Orientation) == 0x0001E0, "Member 'UHWSortableGridPanel::Orientation' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, EntryPadding) == 0x0001E4, "Member 'UHWSortableGridPanel::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, Length) == 0x0001F4, "Member 'UHWSortableGridPanel::Length' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, MaxEntries) == 0x0001F8, "Member 'UHWSortableGridPanel::MaxEntries' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, SortOrder) == 0x0001FC, "Member 'UHWSortableGridPanel::SortOrder' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, bDisplayInReverseOrder) == 0x0001FD, "Member 'UHWSortableGridPanel::bDisplayInReverseOrder' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, bOnlySortVisibleEntries) == 0x0001FE, "Member 'UHWSortableGridPanel::bOnlySortVisibleEntries' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, OnGridEntryAdded) == 0x000200, "Member 'UHWSortableGridPanel::OnGridEntryAdded' has a wrong offset!");
static_assert(offsetof(UHWSortableGridPanel, OnGridEntryRemoved) == 0x000210, "Member 'UHWSortableGridPanel::OnGridEntryRemoved' has a wrong offset!");

// Class HemingwayUI.HWCharacterSwapPopupScreenWidget
// 0x0130 (0x0728 - 0x05F8)
class UHWCharacterSwapPopupScreenWidget final : public UHWWidget
{
public:
	EHWTradeRequestResult                         CachedLocalPlayerTradeResult;                      // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CachedTradePartnerPlayerState;                     // 0x0600(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTradeSender;                                    // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWVerticalBox*                         TeamList;                                          // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCharacterSwapPopupProposalEntryWidget* TradeTargetWidget;                               // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCharacterSwapPopupProposalEntryWidget* TradeOwnerWidget;                                // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           TimerText;                                         // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      InfoSwitcher;                                      // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0x10];                                     // 0x0638(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ClosePopupAction;                                  // 0x0648(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            DeclineTradeAction;                                // 0x0690(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            AcceptTradeAction;                                 // 0x06D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CachedHoveredPlayerState;                          // 0x0720(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UHWCharacterSwapPopupEntryWidget* GetEntryWithCharacter(const class UHWCharacterItem* CharacterItem);
	void HandleAcceptTradeAction();
	void HandleCharacterSwapTradeAccepted(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleCharacterSwapTradeDeclined(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleCharacterSwapTradeRequested(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleCharacterSwapTradeTimedOut(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleDeclineTradeAction();
	void HandleEntryButtonHovered(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem);
	void HandleEntryButtonSelected(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem);
	void HandleEntryButtonUnhovered(class UHWCharacterSwapPopupEntryWidget* EntryWidget, const class UHWCharacterItem* CharacterItem);
	void HandleLocalPlayerStateDraftCharacterChoiceReplicated(class AHWPlayerState* PlayerState, const class UHWCharacterItem* Choice);
	void HandleLocalPlayerStateReceivedCharacterSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void HandleLocalPlayerStateRejectedTradeListUpdated(TArray<class AHWPlayerState*>* RejectedTradeList);
	void HandlePlayerStateReplicated(class AHWPlayerState* PlayerState);
	void HandleProposeTradeButtonSelected(const class UHWCharacterItem* CharacterItem);
	void HandleTeamPlayerStateDraftCharacterChoiceReplicated(class AHWPlayerState* PlayerState, const class UHWCharacterItem* Choice);
	void HandleTeamPlayerStateReceivedCharacterSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);

	bool CanDeclineTradeWith(class AHWPlayerState* TradePlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterSwapPopupScreenWidget">();
	}
	static class UHWCharacterSwapPopupScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterSwapPopupScreenWidget>();
	}
};
static_assert(alignof(UHWCharacterSwapPopupScreenWidget) == 0x000008, "Wrong alignment on UHWCharacterSwapPopupScreenWidget");
static_assert(sizeof(UHWCharacterSwapPopupScreenWidget) == 0x000728, "Wrong size on UHWCharacterSwapPopupScreenWidget");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, CachedLocalPlayerTradeResult) == 0x0005F8, "Member 'UHWCharacterSwapPopupScreenWidget::CachedLocalPlayerTradeResult' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, CachedTradePartnerPlayerState) == 0x000600, "Member 'UHWCharacterSwapPopupScreenWidget::CachedTradePartnerPlayerState' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, bIsTradeSender) == 0x000608, "Member 'UHWCharacterSwapPopupScreenWidget::bIsTradeSender' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, TeamList) == 0x000610, "Member 'UHWCharacterSwapPopupScreenWidget::TeamList' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, TradeTargetWidget) == 0x000618, "Member 'UHWCharacterSwapPopupScreenWidget::TradeTargetWidget' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, TradeOwnerWidget) == 0x000620, "Member 'UHWCharacterSwapPopupScreenWidget::TradeOwnerWidget' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, TimerText) == 0x000628, "Member 'UHWCharacterSwapPopupScreenWidget::TimerText' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, InfoSwitcher) == 0x000630, "Member 'UHWCharacterSwapPopupScreenWidget::InfoSwitcher' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, ClosePopupAction) == 0x000648, "Member 'UHWCharacterSwapPopupScreenWidget::ClosePopupAction' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, DeclineTradeAction) == 0x000690, "Member 'UHWCharacterSwapPopupScreenWidget::DeclineTradeAction' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, AcceptTradeAction) == 0x0006D8, "Member 'UHWCharacterSwapPopupScreenWidget::AcceptTradeAction' has a wrong offset!");
static_assert(offsetof(UHWCharacterSwapPopupScreenWidget, CachedHoveredPlayerState) == 0x000720, "Member 'UHWCharacterSwapPopupScreenWidget::CachedHoveredPlayerState' has a wrong offset!");

// Class HemingwayUI.HWChatEntryWidget
// 0x00F0 (0x06E8 - 0x05F8)
class UHWChatEntryWidget : public UHWWidget
{
public:
	struct FHWChatEntry                           ChatData;                                          // 0x05F8(0x0060)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FString                                 DefaultChatFormat;                                 // 0x0658(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 VGSChatFormat;                                     // 0x0668(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerNameColorChatFormat;                         // 0x0678(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerNameColorVGSFormat;                          // 0x0688(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerNameField;                                   // 0x0698(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 GodNameField;                                      // 0x06A8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerDecoratorStringField;                        // 0x06B8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 VGSPromptField;                                    // 0x06C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MessageField;                                      // 0x06D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetChatData(const struct FHWChatEntry& InChatData);

	class FString GetDecoratedMessageString() const;
	void SetPlayerNameColorTag(const struct FGameplayTag& PlayerNameColorTag) const;
	bool ShouldDisplayEntry() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWChatEntryWidget">();
	}
	static class UHWChatEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWChatEntryWidget>();
	}
};
static_assert(alignof(UHWChatEntryWidget) == 0x000008, "Wrong alignment on UHWChatEntryWidget");
static_assert(sizeof(UHWChatEntryWidget) == 0x0006E8, "Wrong size on UHWChatEntryWidget");
static_assert(offsetof(UHWChatEntryWidget, ChatData) == 0x0005F8, "Member 'UHWChatEntryWidget::ChatData' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, DefaultChatFormat) == 0x000658, "Member 'UHWChatEntryWidget::DefaultChatFormat' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, VGSChatFormat) == 0x000668, "Member 'UHWChatEntryWidget::VGSChatFormat' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, PlayerNameColorChatFormat) == 0x000678, "Member 'UHWChatEntryWidget::PlayerNameColorChatFormat' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, PlayerNameColorVGSFormat) == 0x000688, "Member 'UHWChatEntryWidget::PlayerNameColorVGSFormat' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, PlayerNameField) == 0x000698, "Member 'UHWChatEntryWidget::PlayerNameField' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, GodNameField) == 0x0006A8, "Member 'UHWChatEntryWidget::GodNameField' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, PlayerDecoratorStringField) == 0x0006B8, "Member 'UHWChatEntryWidget::PlayerDecoratorStringField' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, VGSPromptField) == 0x0006C8, "Member 'UHWChatEntryWidget::VGSPromptField' has a wrong offset!");
static_assert(offsetof(UHWChatEntryWidget, MessageField) == 0x0006D8, "Member 'UHWChatEntryWidget::MessageField' has a wrong offset!");

// Class HemingwayUI.HWChatWindowWidget
// 0x00A0 (0x0698 - 0x05F8)
class UHWChatWindowWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHideTextEntry;                                    // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEditableTextBox*                     EditableText;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWChatWindowState                            CachedWindowState;                                 // 0x0610(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class AHWChatManager>          SoftChatManager;                                   // 0x0618(0x0028)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<EHWChatWindowDisplayedEntryType, float>  FadeOutTimePerType;                                // 0x0640(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         DefaultFadeOutTime;                                // 0x0690(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_694[0x4];                                      // 0x0694(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChatEntryToWindow(const struct FHWChatEntry& ChatEntry);
	void HandleChatEntryReceived(const struct FHWChatEntry& ChatEntry);
	void HandleChatEntrySanitized(bool bSuccess, const class FString& SanitizedMessage, const struct FHWChatEntry& ChatEntry);
	void HandleChatManagerReplicated(class AHWChatManager* ChatManager);
	void HandleChatTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void HandleInvokeVGSAction(const struct FGameplayTag& ActionId);
	void HandleOnHUDShown();
	void HandlePlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void HandleVGSManagerReplicated(class AHWVGSManager* VGSManager);
	void OnListenToChatEntries();
	void SetChatState(EHWChatWindowState ChatState);

	float GetDesiredFadeOutTime() const;
	bool IsInDraftLobby() const;
	bool IsInEndOfMatchLobby() const;
	bool IsTextEntryEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWChatWindowWidget">();
	}
	static class UHWChatWindowWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWChatWindowWidget>();
	}
};
static_assert(alignof(UHWChatWindowWidget) == 0x000008, "Wrong alignment on UHWChatWindowWidget");
static_assert(sizeof(UHWChatWindowWidget) == 0x000698, "Wrong size on UHWChatWindowWidget");
static_assert(offsetof(UHWChatWindowWidget, bHideTextEntry) == 0x000600, "Member 'UHWChatWindowWidget::bHideTextEntry' has a wrong offset!");
static_assert(offsetof(UHWChatWindowWidget, EditableText) == 0x000608, "Member 'UHWChatWindowWidget::EditableText' has a wrong offset!");
static_assert(offsetof(UHWChatWindowWidget, CachedWindowState) == 0x000610, "Member 'UHWChatWindowWidget::CachedWindowState' has a wrong offset!");
static_assert(offsetof(UHWChatWindowWidget, SoftChatManager) == 0x000618, "Member 'UHWChatWindowWidget::SoftChatManager' has a wrong offset!");
static_assert(offsetof(UHWChatWindowWidget, FadeOutTimePerType) == 0x000640, "Member 'UHWChatWindowWidget::FadeOutTimePerType' has a wrong offset!");
static_assert(offsetof(UHWChatWindowWidget, DefaultFadeOutTime) == 0x000690, "Member 'UHWChatWindowWidget::DefaultFadeOutTime' has a wrong offset!");

// Class HemingwayUI.HWCombatLogWidget
// 0x0078 (0x06B0 - 0x0638)
class UHWCombatLogWidget : public UHWCharacterWidget
{
public:
	class UHWVerticalBox*                         DamageDealtWidgetPool;                             // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         DamageTakenWidgetPool;                             // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         NPCDamageDealtWidgetPool;                          // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         NPCDamageTakenWidgetPool;                          // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWCombatLog_DamageEntryWidget> DamageEntryWidgetClass;                        // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0660(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         PlayerMaxDamageEvents;                             // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NPCMaxDamageEvents;                                // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NPCDamageDealtEvents;                              // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NPCDamageTakenEvents;                              // 0x068C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          DamageTakenAlignment;                              // 0x0690(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          DamageDealtAlignment;                              // 0x0691(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_692[0x6];                                      // 0x0692(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWCombatEvent>                 CachedDamageEvents;                                // 0x0698(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleClientDamageEvent(const struct FHWCombatEvent& CombatEvent);
	void HandleDamageEventAdded();
	void SetIsCombatLogOpened(bool bInIsOpened);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCombatLogWidget">();
	}
	static class UHWCombatLogWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCombatLogWidget>();
	}
};
static_assert(alignof(UHWCombatLogWidget) == 0x000008, "Wrong alignment on UHWCombatLogWidget");
static_assert(sizeof(UHWCombatLogWidget) == 0x0006B0, "Wrong size on UHWCombatLogWidget");
static_assert(offsetof(UHWCombatLogWidget, DamageDealtWidgetPool) == 0x000638, "Member 'UHWCombatLogWidget::DamageDealtWidgetPool' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, DamageTakenWidgetPool) == 0x000640, "Member 'UHWCombatLogWidget::DamageTakenWidgetPool' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, NPCDamageDealtWidgetPool) == 0x000648, "Member 'UHWCombatLogWidget::NPCDamageDealtWidgetPool' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, NPCDamageTakenWidgetPool) == 0x000650, "Member 'UHWCombatLogWidget::NPCDamageTakenWidgetPool' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, DamageEntryWidgetClass) == 0x000658, "Member 'UHWCombatLogWidget::DamageEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, DamageTags) == 0x000660, "Member 'UHWCombatLogWidget::DamageTags' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, PlayerMaxDamageEvents) == 0x000680, "Member 'UHWCombatLogWidget::PlayerMaxDamageEvents' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, NPCMaxDamageEvents) == 0x000684, "Member 'UHWCombatLogWidget::NPCMaxDamageEvents' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, NPCDamageDealtEvents) == 0x000688, "Member 'UHWCombatLogWidget::NPCDamageDealtEvents' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, NPCDamageTakenEvents) == 0x00068C, "Member 'UHWCombatLogWidget::NPCDamageTakenEvents' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, DamageTakenAlignment) == 0x000690, "Member 'UHWCombatLogWidget::DamageTakenAlignment' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, DamageDealtAlignment) == 0x000691, "Member 'UHWCombatLogWidget::DamageDealtAlignment' has a wrong offset!");
static_assert(offsetof(UHWCombatLogWidget, CachedDamageEvents) == 0x000698, "Member 'UHWCombatLogWidget::CachedDamageEvents' has a wrong offset!");

// Class HemingwayUI.HWTopStatEntryWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWTopStatEntryWidget : public UHWWidget
{
public:
	bool                                          bIsEnemyStat;                                      // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWTeamState>            TrackedTeam;                                       // 0x05FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWPlayerState>          TrackedPlayer;                                     // 0x0604(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleIsEnemySet(bool bIsEnemy);
	void HandlePlayerUuidReplicated(class AHWPlayerState* PlayerState, const struct FGuid& NewUuid);
	void OnTopPlayerChanged(class AHWPlayerState* PlayerState);
	void UpdatePlayerName(class URH_PlayerInfo* PlayerInfo);
	void UpdatePlayerPlatformIcon(ERHPlatformDisplayType NewPlatform);
	void UpdateTopStatPlayer(class AHWPlayerState* PlayerState);
	void UpdateTrackedTeam(class AHWTeamState* TeamState, const struct FGameplayTag& StatTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTopStatEntryWidget">();
	}
	static class UHWTopStatEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTopStatEntryWidget>();
	}
};
static_assert(alignof(UHWTopStatEntryWidget) == 0x000008, "Wrong alignment on UHWTopStatEntryWidget");
static_assert(sizeof(UHWTopStatEntryWidget) == 0x000610, "Wrong size on UHWTopStatEntryWidget");
static_assert(offsetof(UHWTopStatEntryWidget, bIsEnemyStat) == 0x0005F8, "Member 'UHWTopStatEntryWidget::bIsEnemyStat' has a wrong offset!");
static_assert(offsetof(UHWTopStatEntryWidget, TrackedTeam) == 0x0005FC, "Member 'UHWTopStatEntryWidget::TrackedTeam' has a wrong offset!");
static_assert(offsetof(UHWTopStatEntryWidget, TrackedPlayer) == 0x000604, "Member 'UHWTopStatEntryWidget::TrackedPlayer' has a wrong offset!");

// Class HemingwayUI.HWDeathRecapEntryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWDeathRecapEntryWidget : public UHWWidget
{
public:
	void HandleDamageBundleSet(const struct FHWDeathRecapDamageBundle& DeathRecapBundle, float HighestDamageValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDeathRecapEntryWidget">();
	}
	static class UHWDeathRecapEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDeathRecapEntryWidget>();
	}
};
static_assert(alignof(UHWDeathRecapEntryWidget) == 0x000008, "Wrong alignment on UHWDeathRecapEntryWidget");
static_assert(sizeof(UHWDeathRecapEntryWidget) == 0x0005F8, "Wrong size on UHWDeathRecapEntryWidget");

// Class HemingwayUI.HWFloatingTextWidget
// 0x00A8 (0x06A0 - 0x05F8)
class UHWFloatingTextWidget : public UHWWidget
{
public:
	uint8                                         ClampAxis;                                         // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                ClampMargin;                                       // 0x05FC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_60C[0x24];                                     // 0x060C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 SourceObjectRef;                                   // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentNumber;                                     // 0x0638(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentAdditive;                                   // 0x063C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AdditiveFontSizeMultiplier;                        // 0x0640(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                StartOffset;                                       // 0x0644(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bRandomizeStartOffset;                             // 0x0654(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_655[0x3];                                      // 0x0655(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                RandomStartOffsetRange;                            // 0x0658(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMargin                                OffsetPerIndex;                                    // 0x0668(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMargin>                        OffsetPerIndexList;                                // 0x0678(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x4];                                      // 0x0688(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultNumberToFontSizeRatio;                      // 0x068C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultMinFontSize;                                // 0x0690(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DefaultMaxFontSize;                                // 0x0694(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PoolTag;                                           // 0x0698(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AnimateNumber(int32 Number, const struct FGameplayCueParameters& Parameters, class AActor* OwnerActor);
	void ApplyFontSize(int32 Size);
	void ForceStopAnimation();
	struct FMargin GetDisplayOffset(const struct FGameplayCueParameters& Parameters, const int32 Index_0);
	const class UObject* GetSourceObject();
	void SetHideTimer(float Delay);
	void UpdateNumber(int32 Number, const struct FGameplayCueParameters& Parameters, class AActor* OwnerActor);

	ETeamAttitude GetInstigatorAttitude(const struct FGameplayCueParameters& Parameters) const;
	bool GetIsDamageImmune(const struct FGameplayCueParameters& Parameters) const;
	struct FGameplayTag GetPoolTag() const;
	struct FMargin GetRandomStartPosition() const;
	const class UHWGameplayAbility* GetSourceGameplayAbility(const struct FGameplayCueParameters& Parameters) const;
	EHWFloatingTextOverrideType GetTextOverrideType(const struct FGameplayCueParameters& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextWidget">();
	}
	static class UHWFloatingTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextWidget>();
	}
};
static_assert(alignof(UHWFloatingTextWidget) == 0x000008, "Wrong alignment on UHWFloatingTextWidget");
static_assert(sizeof(UHWFloatingTextWidget) == 0x0006A0, "Wrong size on UHWFloatingTextWidget");
static_assert(offsetof(UHWFloatingTextWidget, ClampAxis) == 0x0005F8, "Member 'UHWFloatingTextWidget::ClampAxis' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, ClampMargin) == 0x0005FC, "Member 'UHWFloatingTextWidget::ClampMargin' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, SourceObjectRef) == 0x000630, "Member 'UHWFloatingTextWidget::SourceObjectRef' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, CurrentNumber) == 0x000638, "Member 'UHWFloatingTextWidget::CurrentNumber' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, CurrentAdditive) == 0x00063C, "Member 'UHWFloatingTextWidget::CurrentAdditive' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, AdditiveFontSizeMultiplier) == 0x000640, "Member 'UHWFloatingTextWidget::AdditiveFontSizeMultiplier' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, StartOffset) == 0x000644, "Member 'UHWFloatingTextWidget::StartOffset' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, bRandomizeStartOffset) == 0x000654, "Member 'UHWFloatingTextWidget::bRandomizeStartOffset' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, RandomStartOffsetRange) == 0x000658, "Member 'UHWFloatingTextWidget::RandomStartOffsetRange' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, OffsetPerIndex) == 0x000668, "Member 'UHWFloatingTextWidget::OffsetPerIndex' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, OffsetPerIndexList) == 0x000678, "Member 'UHWFloatingTextWidget::OffsetPerIndexList' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, DefaultNumberToFontSizeRatio) == 0x00068C, "Member 'UHWFloatingTextWidget::DefaultNumberToFontSizeRatio' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, DefaultMinFontSize) == 0x000690, "Member 'UHWFloatingTextWidget::DefaultMinFontSize' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, DefaultMaxFontSize) == 0x000694, "Member 'UHWFloatingTextWidget::DefaultMaxFontSize' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextWidget, PoolTag) == 0x000698, "Member 'UHWFloatingTextWidget::PoolTag' has a wrong offset!");

// Class HemingwayUI.HWDeathRecapWidget
// 0x0088 (0x0688 - 0x0600)
class UHWDeathRecapWidget : public UHWAnimatedGridPanel
{
public:
	TSubclassOf<class UHWDeathRecapEntryWidget>   DeathRecapEntryWidgetClass;                        // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0608(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsDamageTaken;                                    // 0x0628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_629[0x3];                                      // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToStoreDamage;                                 // 0x062C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumEntries;                                        // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CleanupInterval;                                   // 0x0634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateOnDeath;                                    // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CleanupTimerHandle;                                // 0x0640(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOpened;                                         // 0x0648(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWDeathRecapDamageBundle>      CachedSortedDamageBundles;                         // 0x0650(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWDeathRecapEntryWidget*>       EntryWidgets;                                      // 0x0660(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWDeathRecapDamageBundle>      CachedDamageEvents;                                // 0x0670(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         RefreshRate;                                       // 0x0680(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCharacterDied(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, float RespawnTimerDuration);
	void HandleCleanupTimeElapsed();
	void HandleClientDamageEvent(const struct FHWCombatEvent& CombatEvent);
	void HandleDamageBreakdownReceived(float TotalDamage, float PhysicalDamage, float MagicalDamage, float TrueDamage);
	void HandleDamageEventAdded();
	void HandleLocalPlayerStateReceived(class AHWPlayerState* PlayerState);
	void HandlePlayerStateAbilitySystemActorChanged(class AHWPlayerState* PlayerState, class AHWCharacterAbilitySystemActor* NewABSActor);
	void SetDeathRecapOpen(bool bInIsOpened);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDeathRecapWidget">();
	}
	static class UHWDeathRecapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDeathRecapWidget>();
	}
};
static_assert(alignof(UHWDeathRecapWidget) == 0x000008, "Wrong alignment on UHWDeathRecapWidget");
static_assert(sizeof(UHWDeathRecapWidget) == 0x000688, "Wrong size on UHWDeathRecapWidget");
static_assert(offsetof(UHWDeathRecapWidget, DeathRecapEntryWidgetClass) == 0x000600, "Member 'UHWDeathRecapWidget::DeathRecapEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, DamageTags) == 0x000608, "Member 'UHWDeathRecapWidget::DamageTags' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, bIsDamageTaken) == 0x000628, "Member 'UHWDeathRecapWidget::bIsDamageTaken' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, TimeToStoreDamage) == 0x00062C, "Member 'UHWDeathRecapWidget::TimeToStoreDamage' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, NumEntries) == 0x000630, "Member 'UHWDeathRecapWidget::NumEntries' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, CleanupInterval) == 0x000634, "Member 'UHWDeathRecapWidget::CleanupInterval' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, bUpdateOnDeath) == 0x000638, "Member 'UHWDeathRecapWidget::bUpdateOnDeath' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, CleanupTimerHandle) == 0x000640, "Member 'UHWDeathRecapWidget::CleanupTimerHandle' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, bIsOpened) == 0x000648, "Member 'UHWDeathRecapWidget::bIsOpened' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, CachedSortedDamageBundles) == 0x000650, "Member 'UHWDeathRecapWidget::CachedSortedDamageBundles' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, EntryWidgets) == 0x000660, "Member 'UHWDeathRecapWidget::EntryWidgets' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, CachedDamageEvents) == 0x000670, "Member 'UHWDeathRecapWidget::CachedDamageEvents' has a wrong offset!");
static_assert(offsetof(UHWDeathRecapWidget, RefreshRate) == 0x000680, "Member 'UHWDeathRecapWidget::RefreshRate' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemFilterEntry
// 0x0090 (0x0688 - 0x05F8)
class UHWItemStoreItemFilterEntry : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UHWItemStoreItemFilterEntry* FilterWidget, bool bClearFilters)> OnFilterEnabled; // 0x0600(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemStoreItemFilterEntry* FilterWidget)> OnFilterDisabled; // 0x0610(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x20];                                     // 0x0620(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ToggleFilterAction;                                // 0x0640(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_680[0x8];                                      // 0x0680(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayCharacterStatEntry(const struct FHWDataDisplay_CharacterStat& CharacterStatData);
	void DisplayKeywordEntry(const struct FHWDataDisplay_Keyword& KeywordData);
	bool GetIsExclusive();
	bool GetIsSelected();
	void OnUpdateIsSelected();
	void SetFilterEnabled(bool bFilterEnabled);
	void SetIsSelected(bool bNewSelected, bool bShouldClearFilter);
	void SetToggleEnabled(bool bSetEnabled);
	void ToggleFilter();
	void UpdateLayout(EHWItemStoreLayoutType Layout);

	const class FText GetFilterName() const;
	const struct FGameplayTag GetFilterTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemFilterEntry">();
	}
	static class UHWItemStoreItemFilterEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemFilterEntry>();
	}
};
static_assert(alignof(UHWItemStoreItemFilterEntry) == 0x000008, "Wrong alignment on UHWItemStoreItemFilterEntry");
static_assert(sizeof(UHWItemStoreItemFilterEntry) == 0x000688, "Wrong size on UHWItemStoreItemFilterEntry");
static_assert(offsetof(UHWItemStoreItemFilterEntry, OnFilterEnabled) == 0x000600, "Member 'UHWItemStoreItemFilterEntry::OnFilterEnabled' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterEntry, OnFilterDisabled) == 0x000610, "Member 'UHWItemStoreItemFilterEntry::OnFilterDisabled' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterEntry, ToggleFilterAction) == 0x000640, "Member 'UHWItemStoreItemFilterEntry::ToggleFilterAction' has a wrong offset!");

// Class HemingwayUI.HWItemStoreRoleFilterEntry
// 0x0018 (0x06A0 - 0x0688)
class UHWItemStoreRoleFilterEntry : public UHWItemStoreItemFilterEntry
{
public:
	TWeakObjectPtr<class UHWItemStoreRoleFilterWidget> RoleFilterWidget;                             // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWAllItemListGroup>            CategorySortingInfo;                               // 0x0690(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreRoleFilterEntry">();
	}
	static class UHWItemStoreRoleFilterEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreRoleFilterEntry>();
	}
};
static_assert(alignof(UHWItemStoreRoleFilterEntry) == 0x000008, "Wrong alignment on UHWItemStoreRoleFilterEntry");
static_assert(sizeof(UHWItemStoreRoleFilterEntry) == 0x0006A0, "Wrong size on UHWItemStoreRoleFilterEntry");
static_assert(offsetof(UHWItemStoreRoleFilterEntry, RoleFilterWidget) == 0x000688, "Member 'UHWItemStoreRoleFilterEntry::RoleFilterWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreRoleFilterEntry, CategorySortingInfo) == 0x000690, "Member 'UHWItemStoreRoleFilterEntry::CategorySortingInfo' has a wrong offset!");

// Class HemingwayUI.HWDebugSavePreset
// 0x0020 (0x0048 - 0x0028)
class UHWDebugSavePreset : public USaveGame
{
public:
	class FString                                 PreviousPIEPreset;                                 // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PresetName;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebugSavePreset">();
	}
	static class UHWDebugSavePreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebugSavePreset>();
	}
};
static_assert(alignof(UHWDebugSavePreset) == 0x000008, "Wrong alignment on UHWDebugSavePreset");
static_assert(sizeof(UHWDebugSavePreset) == 0x000048, "Wrong size on UHWDebugSavePreset");
static_assert(offsetof(UHWDebugSavePreset, PreviousPIEPreset) == 0x000028, "Member 'UHWDebugSavePreset::PreviousPIEPreset' has a wrong offset!");
static_assert(offsetof(UHWDebugSavePreset, PresetName) == 0x000038, "Member 'UHWDebugSavePreset::PresetName' has a wrong offset!");

// Class HemingwayUI.HWDebugBaseWidget
// 0x0008 (0x0640 - 0x0638)
class UHWDebugBaseWidget : public UHWCharacterWidget
{
public:
	TWeakObjectPtr<class UHWDebugHUDWidget>       DebugHUDWidget;                                    // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void LoadPreset(class UHWDebugSavePreset* Preset);
	void UpdatePreset(class UHWDebugSavePreset* Preset);

	class UHWDebugSavePreset* GetActivePreset() const;
	class UHWCheatComponent* GetLocalCheatComponent() const;
	class UHWDebugLoggerWidget* GetLogger() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebugBaseWidget">();
	}
	static class UHWDebugBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebugBaseWidget>();
	}
};
static_assert(alignof(UHWDebugBaseWidget) == 0x000008, "Wrong alignment on UHWDebugBaseWidget");
static_assert(sizeof(UHWDebugBaseWidget) == 0x000640, "Wrong size on UHWDebugBaseWidget");
static_assert(offsetof(UHWDebugBaseWidget, DebugHUDWidget) == 0x000638, "Member 'UHWDebugBaseWidget::DebugHUDWidget' has a wrong offset!");

// Class HemingwayUI.HWTextBlock
// 0x0030 (0x03A0 - 0x0370)
class UHWTextBlock : public UTextBlock
{
public:
	struct FHWUIStyleWidgetConfig                 FontStyle;                                         // 0x0368(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyleWidgetConfig                 FontColorStyle;                                    // 0x0374(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_380[0x20];                                     // 0x0380(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFontColorStyleTag(const struct FGameplayTag& NewStyleTag);
	void SetFontStyleTag(const struct FGameplayTag& NewStyleTag);
	void SetWrapTextAt(float InWrapTextAt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTextBlock">();
	}
	static class UHWTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTextBlock>();
	}
};
static_assert(alignof(UHWTextBlock) == 0x000010, "Wrong alignment on UHWTextBlock");
static_assert(sizeof(UHWTextBlock) == 0x0003A0, "Wrong size on UHWTextBlock");
static_assert(offsetof(UHWTextBlock, FontStyle) == 0x000368, "Member 'UHWTextBlock::FontStyle' has a wrong offset!");
static_assert(offsetof(UHWTextBlock, FontColorStyle) == 0x000374, "Member 'UHWTextBlock::FontColorStyle' has a wrong offset!");

// Class HemingwayUI.HWDebug_BotsWidget
// 0x0090 (0x06D0 - 0x0640)
class UHWDebug_BotsWidget : public UHWDebugBaseWidget
{
public:
	class UComboBoxString*                        DatatableNames;                                    // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComboBoxString*                        BotNames;                                          // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComboBoxString*                        ActorNames;                                        // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UComboBoxString*                        SkinNames;                                         // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   SpawnTagGroups;                                    // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UBehaviorTree*                          AutoFireBT;                                        // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_678[0x50];                                     // 0x0678(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	EHWCameraMode                                 CurrentCameraMode;                                 // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateAbility(const int32& AbilityNumber, const float& WaitTime, const int32& Count);
	void ChangeCameraMode(EHWCameraMode Mode);
	void SpawnBot(const int32& Team, const int32& Level);
	void ToggleIgnoreAbilityCostCooldowns();
	void UpdateBotNames();
	void UpdateSkinList(const class FString& GodName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_BotsWidget">();
	}
	static class UHWDebug_BotsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_BotsWidget>();
	}
};
static_assert(alignof(UHWDebug_BotsWidget) == 0x000008, "Wrong alignment on UHWDebug_BotsWidget");
static_assert(sizeof(UHWDebug_BotsWidget) == 0x0006D0, "Wrong size on UHWDebug_BotsWidget");
static_assert(offsetof(UHWDebug_BotsWidget, DatatableNames) == 0x000640, "Member 'UHWDebug_BotsWidget::DatatableNames' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, BotNames) == 0x000648, "Member 'UHWDebug_BotsWidget::BotNames' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, ActorNames) == 0x000650, "Member 'UHWDebug_BotsWidget::ActorNames' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, SkinNames) == 0x000658, "Member 'UHWDebug_BotsWidget::SkinNames' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, SpawnTagGroups) == 0x000660, "Member 'UHWDebug_BotsWidget::SpawnTagGroups' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, AutoFireBT) == 0x000670, "Member 'UHWDebug_BotsWidget::AutoFireBT' has a wrong offset!");
static_assert(offsetof(UHWDebug_BotsWidget, CurrentCameraMode) == 0x0006C8, "Member 'UHWDebug_BotsWidget::CurrentCameraMode' has a wrong offset!");

// Class HemingwayUI.HWDebug_CommandsWidget
// 0x0088 (0x06C8 - 0x0640)
class UHWDebug_CommandsWidget : public UHWDebugBaseWidget
{
public:
	class UComboBoxString*                        CommandCategories;                                 // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   CommandButtons;                                    // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              CommandsDataTable;                                 // 0x0650(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_678[0x50];                                     // 0x0678(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddNewButton(const class FString& Name_0, const class FString& Command);
	void UpdateCommandButtons(const class FString& CommandCategory);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_CommandsWidget">();
	}
	static class UHWDebug_CommandsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_CommandsWidget>();
	}
};
static_assert(alignof(UHWDebug_CommandsWidget) == 0x000008, "Wrong alignment on UHWDebug_CommandsWidget");
static_assert(sizeof(UHWDebug_CommandsWidget) == 0x0006C8, "Wrong size on UHWDebug_CommandsWidget");
static_assert(offsetof(UHWDebug_CommandsWidget, CommandCategories) == 0x000640, "Member 'UHWDebug_CommandsWidget::CommandCategories' has a wrong offset!");
static_assert(offsetof(UHWDebug_CommandsWidget, CommandButtons) == 0x000648, "Member 'UHWDebug_CommandsWidget::CommandButtons' has a wrong offset!");
static_assert(offsetof(UHWDebug_CommandsWidget, CommandsDataTable) == 0x000650, "Member 'UHWDebug_CommandsWidget::CommandsDataTable' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyChoiceEntryWidget
// 0x0040 (0x0668 - 0x0628)
class UHWDraftLobbyChoiceEntryWidget final : public UDraftChoiceWidget
{
public:
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceHovered;     // 0x0628(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceSelected;    // 0x0638(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceDoubleClicked; // 0x0648(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UHWButton*                              ChoiceButton;                                      // 0x0658(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWChoiceButtonState                          ButtonState;                                       // 0x0660(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDisabled;                                       // 0x0661(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_662[0x6];                                      // 0x0662(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleChoiceButtonDoubleClicked();
	void HandleChoiceButtonHovered();
	void HandleChoiceButtonPressed();
	void UpdateButtonState(EHWChoiceButtonState DesiredButtonState, bool bShouldBeDisabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyChoiceEntryWidget">();
	}
	static class UHWDraftLobbyChoiceEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyChoiceEntryWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyChoiceEntryWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyChoiceEntryWidget");
static_assert(sizeof(UHWDraftLobbyChoiceEntryWidget) == 0x000668, "Wrong size on UHWDraftLobbyChoiceEntryWidget");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, OnDraftChoiceHovered) == 0x000628, "Member 'UHWDraftLobbyChoiceEntryWidget::OnDraftChoiceHovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, OnDraftChoiceSelected) == 0x000638, "Member 'UHWDraftLobbyChoiceEntryWidget::OnDraftChoiceSelected' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, OnDraftChoiceDoubleClicked) == 0x000648, "Member 'UHWDraftLobbyChoiceEntryWidget::OnDraftChoiceDoubleClicked' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, ChoiceButton) == 0x000658, "Member 'UHWDraftLobbyChoiceEntryWidget::ChoiceButton' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, ButtonState) == 0x000660, "Member 'UHWDraftLobbyChoiceEntryWidget::ButtonState' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceEntryWidget, bIsDisabled) == 0x000661, "Member 'UHWDraftLobbyChoiceEntryWidget::bIsDisabled' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyChoiceGridWidget
// 0x0060 (0x06B8 - 0x0658)
class UHWDraftLobbyChoiceGridWidget final : public UDraftChoiceGridWidget
{
public:
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceHovered;     // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceSelected;    // 0x0668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FDraftChoice& DraftChoice)> OnDraftChoiceDoubleClicked; // 0x0678(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FDraftChoice                           CachedSelectedDraftChoice;                         // 0x0688(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UHWDraftLobbyChoiceEntryWidget*         CachedHoveredChoiceWidget;                         // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       AssaultBenchChoices;                               // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        bShowBenchChoices;                                 // 0x06A8(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6AB[0x1];                                      // 0x06AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AssaultBenchWidth;                                 // 0x06AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWFilterWidget*                        FilterWidget;                                      // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleDraftBenchChoicesUpdated();
	void HandleDraftChoiceDoubleClicked(const struct FDraftChoice& DraftChoice);
	void HandleDraftChoiceHovered(const struct FDraftChoice& DraftChoice);
	void HandleDraftChoiceSelected(const struct FDraftChoice& DraftChoice);
	void HandleEndDraft();
	void HandleFilterSearchTextChanged(const class FText& SearchText);
	void HandleFilterSortChanged(EHWFilterSortMethod FilterMethod, bool bInvertSort);
	void HandleFilterTagsChanged();
	void HandleLocalPlayerDraftChoiceReplicated(class AHWPlayerState* PlayerState, const class UHWCharacterItem* Choice);
	void HandlePersonalActiveTaskChanged();
	void HandlePlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void ReevaluateAfterLockIn();

	bool AllowExpandedGrid() const;
	class UHWDraftLobbyChoiceEntryWidget* FindChoiceWidgetWithChoiceData(const struct FDraftChoice& ChoiceData) const;
	class UHWMultiPromptWidget* GetExpandGridPromptWidget() const;
	class UWidget* HandleGridChoiceNavigationDown(EUINavigation NavDirection) const;
	class UWidget* HandleGridChoiceNavigationUp(EUINavigation NavDirection) const;
	bool ShouldShowBenchChoices() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyChoiceGridWidget">();
	}
	static class UHWDraftLobbyChoiceGridWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyChoiceGridWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyChoiceGridWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyChoiceGridWidget");
static_assert(sizeof(UHWDraftLobbyChoiceGridWidget) == 0x0006B8, "Wrong size on UHWDraftLobbyChoiceGridWidget");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, OnDraftChoiceHovered) == 0x000658, "Member 'UHWDraftLobbyChoiceGridWidget::OnDraftChoiceHovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, OnDraftChoiceSelected) == 0x000668, "Member 'UHWDraftLobbyChoiceGridWidget::OnDraftChoiceSelected' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, OnDraftChoiceDoubleClicked) == 0x000678, "Member 'UHWDraftLobbyChoiceGridWidget::OnDraftChoiceDoubleClicked' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, CachedSelectedDraftChoice) == 0x000688, "Member 'UHWDraftLobbyChoiceGridWidget::CachedSelectedDraftChoice' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, CachedHoveredChoiceWidget) == 0x000698, "Member 'UHWDraftLobbyChoiceGridWidget::CachedHoveredChoiceWidget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, AssaultBenchChoices) == 0x0006A0, "Member 'UHWDraftLobbyChoiceGridWidget::AssaultBenchChoices' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, bShowBenchChoices) == 0x0006A8, "Member 'UHWDraftLobbyChoiceGridWidget::bShowBenchChoices' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, AssaultBenchWidth) == 0x0006AC, "Member 'UHWDraftLobbyChoiceGridWidget::AssaultBenchWidth' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyChoiceGridWidget, FilterWidget) == 0x0006B0, "Member 'UHWDraftLobbyChoiceGridWidget::FilterWidget' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyLockInButtonWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWDraftLobbyLockInButtonWidget final : public UHWWidget
{
public:
	class UHWButton*                              HitBox;                                            // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyLockInButtonWidget">();
	}
	static class UHWDraftLobbyLockInButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyLockInButtonWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyLockInButtonWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyLockInButtonWidget");
static_assert(sizeof(UHWDraftLobbyLockInButtonWidget) == 0x000600, "Wrong size on UHWDraftLobbyLockInButtonWidget");
static_assert(offsetof(UHWDraftLobbyLockInButtonWidget, HitBox) == 0x0005F8, "Member 'UHWDraftLobbyLockInButtonWidget::HitBox' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyOverallStatusWidget
// 0x0218 (0x0880 - 0x0668)
class UHWDraftLobbyOverallStatusWidget final : public UDraftOverallStatusWidget
{
public:
	bool                                          bDraftLobbyClosing;                                // 0x0668(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWDraftType                                  DraftType;                                         // 0x0669(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_66A[0x6];                                      // 0x066A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              PhaseTransitionTexture;                            // 0x0670(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              AlliedBanTexture;                                  // 0x0698(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              EnemyBanTexture;                                   // 0x06C0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              AlliedPickTexture;                                 // 0x06E8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              EnemyPickTexture;                                  // 0x0710(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            TaskGroupBorderBrush;                              // 0x0740(0x00D0)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              TaskIconSize;                                      // 0x0810(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ActiveTaskIconSize;                                // 0x0820(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           TimeText;                                          // 0x0830(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               ActiveTaskIcon;                                    // 0x0838(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       CompletedTaskTimelineBox;                          // 0x0840(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       PendingTaskTimelineBox;                            // 0x0848(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       ActiveTaskTimelineBox;                             // 0x0850(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             ActivePannerLeftOverlay;                           // 0x0858(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             ActivePannerRightOverlay;                          // 0x0860(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_868[0x8];                                      // 0x0868(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWDraftReplicatedActor> CharacterDraftActor;                               // 0x0870(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_878[0x8];                                      // 0x0878(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDraftTaskCompleted(const struct FDraftTask& CompletedTask);
	void HandleOnPhaseConfigChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void HandlePendingTasksChanges();
	void HandlePlayerControllerTeamChanged(class AController* Controller, const struct FGenericTeamId& TeamId);
	void SetGameModeInfo(const struct FHWGameModeInfo& GameModeInfo, bool bUseAltName);
	void UpdateDraftTimeline();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyOverallStatusWidget">();
	}
	static class UHWDraftLobbyOverallStatusWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyOverallStatusWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyOverallStatusWidget) == 0x000010, "Wrong alignment on UHWDraftLobbyOverallStatusWidget");
static_assert(sizeof(UHWDraftLobbyOverallStatusWidget) == 0x000880, "Wrong size on UHWDraftLobbyOverallStatusWidget");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, bDraftLobbyClosing) == 0x000668, "Member 'UHWDraftLobbyOverallStatusWidget::bDraftLobbyClosing' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, DraftType) == 0x000669, "Member 'UHWDraftLobbyOverallStatusWidget::DraftType' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, PhaseTransitionTexture) == 0x000670, "Member 'UHWDraftLobbyOverallStatusWidget::PhaseTransitionTexture' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, AlliedBanTexture) == 0x000698, "Member 'UHWDraftLobbyOverallStatusWidget::AlliedBanTexture' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, EnemyBanTexture) == 0x0006C0, "Member 'UHWDraftLobbyOverallStatusWidget::EnemyBanTexture' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, AlliedPickTexture) == 0x0006E8, "Member 'UHWDraftLobbyOverallStatusWidget::AlliedPickTexture' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, EnemyPickTexture) == 0x000710, "Member 'UHWDraftLobbyOverallStatusWidget::EnemyPickTexture' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, TaskGroupBorderBrush) == 0x000740, "Member 'UHWDraftLobbyOverallStatusWidget::TaskGroupBorderBrush' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, TaskIconSize) == 0x000810, "Member 'UHWDraftLobbyOverallStatusWidget::TaskIconSize' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, ActiveTaskIconSize) == 0x000820, "Member 'UHWDraftLobbyOverallStatusWidget::ActiveTaskIconSize' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, TimeText) == 0x000830, "Member 'UHWDraftLobbyOverallStatusWidget::TimeText' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, ActiveTaskIcon) == 0x000838, "Member 'UHWDraftLobbyOverallStatusWidget::ActiveTaskIcon' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, CompletedTaskTimelineBox) == 0x000840, "Member 'UHWDraftLobbyOverallStatusWidget::CompletedTaskTimelineBox' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, PendingTaskTimelineBox) == 0x000848, "Member 'UHWDraftLobbyOverallStatusWidget::PendingTaskTimelineBox' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, ActiveTaskTimelineBox) == 0x000850, "Member 'UHWDraftLobbyOverallStatusWidget::ActiveTaskTimelineBox' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, ActivePannerLeftOverlay) == 0x000858, "Member 'UHWDraftLobbyOverallStatusWidget::ActivePannerLeftOverlay' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, ActivePannerRightOverlay) == 0x000860, "Member 'UHWDraftLobbyOverallStatusWidget::ActivePannerRightOverlay' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyOverallStatusWidget, CharacterDraftActor) == 0x000870, "Member 'UHWDraftLobbyOverallStatusWidget::CharacterDraftActor' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyScreenWidget
// 0x0538 (0x0B20 - 0x05E8)
class UHWDraftLobbyScreenWidget final : public UDraftActorWidget
{
public:
	bool                                          bDraftSupportsRoles;                               // 0x05E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ExpandGridActionBinding;                           // 0x05F0(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ShowDetailsActionBinding;                          // 0x0638(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            TradeRoleActionBinding;                            // 0x0680(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6C0[0x8];                                      // 0x06C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            SwapCharacterActionBinding;                        // 0x06C8(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_708[0x8];                                      // 0x0708(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ReturnToCharacterSelectActionBinding;              // 0x0710(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_750[0x8];                                      // 0x0750(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ViewAbilitiesActionBinding;                        // 0x0758(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_798[0x8];                                      // 0x0798(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PlayerActionsActionBinding;                        // 0x07A0(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7E0[0x8];                                      // 0x07E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ToggleFilterActionBinding;                         // 0x07E8(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_828[0x8];                                      // 0x0828(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FocusSearchBarActionBinding;                       // 0x0830(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_870[0x8];                                      // 0x0870(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PrevRoleFilterActionBinding;                       // 0x0878(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            NextRoleFilterActionBinding;                       // 0x08C0(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_900[0x8];                                      // 0x0900(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FocusTextChatActionBinding;                        // 0x0908(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_948[0x8];                                      // 0x0948(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ToggleAspectNavActionBinding;                      // 0x0950(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_990[0x8];                                      // 0x0990(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ViewSettingsActionBinding;                         // 0x0998(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9D8[0x8];                                      // 0x09D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RerollGodActionBinding;                            // 0x09E0(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A20[0x8];                                      // 0x0A20(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ActivateBoostActionBinding;                        // 0x0A28(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A68[0x8];                                      // 0x0A68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            CycleSkinVariantBindingContainer;                  // 0x0A70(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AB0[0x4];                                      // 0x0AB0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AutoBindSkinSelectName;                            // 0x0AB4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLocalPlayerHasLockedInCharacter;                  // 0x0ABC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWDraftLobbyWidgetState                      CurrentDraftState;                                 // 0x0ABD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasShownYourTurnToPickNotification;               // 0x0ABE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ABF[0x1];                                      // 0x0ABF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWDraftLobbyOverallStatusWidget*       LobbyStatus;                                       // 0x0AC0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWDraftLobbySkinSelectWidget*          SkinSelect;                                        // 0x0AC8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWDraftLobbyChoiceGridWidget*          CharacterChoiceGrid;                               // 0x0AD0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasSelectedCharacter;                             // 0x0AD8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBypassBanCheck;                                   // 0x0AD9(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ADA[0x6];                                      // 0x0ADA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWDraftLobbySkinSelectEntryWidget*     SelectedSkinWidget;                                // 0x0AE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE8[0x10];                                     // 0x0AE8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADraftReplicatedActor>   SkinSelectDraftActor;                              // 0x0AF8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDraftTaskId                           LastDetectedCharacterLockInTaskId;                 // 0x0B00(0x0002)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDraftTaskId                           LastDetectedSkinLockInTaskId;                      // 0x0B02(0x0002)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B04[0x14];                                     // 0x0B04(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldPreloadPlayerLoadouts;                      // 0x0B18(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AllSkinSelectPersonalTasksCompleted();
	void EndSkinSelectDraft();
	void EvaluateOverallDraftState();
	void HandleActivateBoostAction();
	void HandleChangeRoleFilterAction(int32 Direction);
	void HandleCycleVariantAction();
	void HandleDraftChoicesChanged(const TArray<class UObject*>& RemovedChoices, const TArray<class UObject*>& AddedOrUpdatedChoices);
	void HandleExpandGridAction();
	void HandleFocusSearchBarAction();
	void HandleFocusTextChatAction();
	void HandleGrantedSkinsUpdated();
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	void HandleLocalPlayerDraftChoiceReplicated(class AHWPlayerState* PlayerState, const class UHWCharacterItem* Choice);
	void HandleLocalPlayerStateReceivedCharacterSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void HandleLocalPlayerStateReceivedRoleSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void HandleLocalPlayerTurnToPick();
	void HandleLockInAction();
	void HandleLockInProgress(float Percent);
	void HandleOnOrderSuccess(class URHStoreItem* StoreItem);
	void HandleOnPhaseConfigChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void HandleOnSkinChanged();
	void HandlePlayerActionsAction();
	void HandlePlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void HandleRequestSelectFailed();
	void HandleRequestSelectSuccessful();
	void HandleRerollGodAction();
	void HandleReturnToCharacterSelectAction();
	void HandleShowDetailsAction();
	void HandleSkinSelectEntryHovered(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem);
	void HandleSkinSelectEntrySelected(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem);
	void HandleSwapCharacterAction();
	void HandleToggleAspectNavAction();
	void HandleToggleFilterAction();
	void HandleTradeRoleAction();
	void HandleTransitionInfoTagChanged(const struct FGameplayTag& TransitionInfoTag);
	void HandleViewAbilitiesAction();
	void HandleViewSettingsAction();
	void LocalPlayerLockedInCharacter(const class UHWCharacterItem* InLockedInCharacterItem);
	void LocalPlayerLockedInSkin(class UHWSkinItem* InLockedInSkinItem);
	void OnBoundSkinSelectDraftActorDestroyed(class AActor* DestroyedActor);
	void OnSelectedCharacterSkinLoaded();
	void PostSetSkinSelectDraftActor();
	void PreClearSkinSelectDraftActor();
	void SetHasSelectedCharacter();
	void SetSkinSelectDraftActor(class ADraftReplicatedActor* InNewDraftActor);
	void SetVoiceChatState(const struct FGuid& PlayerUuid, bool bInVoiceChannel, bool bIsTalking, bool bIsMuted);
	bool ShouldRegisteActivateBoostAction();
	bool ShouldRegisterAspectAction();
	bool ShouldRegisteRerollGodAction();
	bool ShouldRegisterTradeRoleAction();
	void SkinSelectDraftActorAddedToOwner(class ADraftReplicatedActor* NewDraftActor);
	void SkinSelectPersonalTaskChanged();
	void SkinSelectTaskCompleted(const struct FDraftTask& CompletedTask);
	void TransitionToCharacterDraft(EHWDraftLobbyWidgetState PreviousDraftState);
	void TransitionToClosingLobby(EHWDraftLobbyWidgetState PreviousDraftState);
	void TransitionToDraftState(EHWDraftLobbyWidgetState DesiredDraftState, bool bForce);
	void TransitionToEndDraftEarly(EHWDraftLobbyWidgetState PreviousDraftState);
	void TransitionToNoDraft(EHWDraftLobbyWidgetState PreviousDraftState);
	void TransitionToSetup(EHWDraftLobbyWidgetState PreviousDraftState);
	void TransitionToSkinDraft(EHWDraftLobbyWidgetState PreviousDraftState);
	void UpdateGameModeDisplay(const struct FHWGameModeInfo& InGameModeInfo);
	void UpdateLocalPlayerDraftingState(EHWPlayerDraftingState DraftState);
	void VoiceChatDisconnected();

	class AHWPlayerState* GetLocalPlayerState() const;
	class ADraftReplicatedActor* GetSkinSelectDraftActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyScreenWidget">();
	}
	static class UHWDraftLobbyScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyScreenWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyScreenWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyScreenWidget");
static_assert(sizeof(UHWDraftLobbyScreenWidget) == 0x000B20, "Wrong size on UHWDraftLobbyScreenWidget");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bDraftSupportsRoles) == 0x0005E8, "Member 'UHWDraftLobbyScreenWidget::bDraftSupportsRoles' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ExpandGridActionBinding) == 0x0005F0, "Member 'UHWDraftLobbyScreenWidget::ExpandGridActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ShowDetailsActionBinding) == 0x000638, "Member 'UHWDraftLobbyScreenWidget::ShowDetailsActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, TradeRoleActionBinding) == 0x000680, "Member 'UHWDraftLobbyScreenWidget::TradeRoleActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, SwapCharacterActionBinding) == 0x0006C8, "Member 'UHWDraftLobbyScreenWidget::SwapCharacterActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ReturnToCharacterSelectActionBinding) == 0x000710, "Member 'UHWDraftLobbyScreenWidget::ReturnToCharacterSelectActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ViewAbilitiesActionBinding) == 0x000758, "Member 'UHWDraftLobbyScreenWidget::ViewAbilitiesActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, PlayerActionsActionBinding) == 0x0007A0, "Member 'UHWDraftLobbyScreenWidget::PlayerActionsActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ToggleFilterActionBinding) == 0x0007E8, "Member 'UHWDraftLobbyScreenWidget::ToggleFilterActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, FocusSearchBarActionBinding) == 0x000830, "Member 'UHWDraftLobbyScreenWidget::FocusSearchBarActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, PrevRoleFilterActionBinding) == 0x000878, "Member 'UHWDraftLobbyScreenWidget::PrevRoleFilterActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, NextRoleFilterActionBinding) == 0x0008C0, "Member 'UHWDraftLobbyScreenWidget::NextRoleFilterActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, FocusTextChatActionBinding) == 0x000908, "Member 'UHWDraftLobbyScreenWidget::FocusTextChatActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ToggleAspectNavActionBinding) == 0x000950, "Member 'UHWDraftLobbyScreenWidget::ToggleAspectNavActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ViewSettingsActionBinding) == 0x000998, "Member 'UHWDraftLobbyScreenWidget::ViewSettingsActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, RerollGodActionBinding) == 0x0009E0, "Member 'UHWDraftLobbyScreenWidget::RerollGodActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, ActivateBoostActionBinding) == 0x000A28, "Member 'UHWDraftLobbyScreenWidget::ActivateBoostActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, CycleSkinVariantBindingContainer) == 0x000A70, "Member 'UHWDraftLobbyScreenWidget::CycleSkinVariantBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, AutoBindSkinSelectName) == 0x000AB4, "Member 'UHWDraftLobbyScreenWidget::AutoBindSkinSelectName' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bLocalPlayerHasLockedInCharacter) == 0x000ABC, "Member 'UHWDraftLobbyScreenWidget::bLocalPlayerHasLockedInCharacter' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, CurrentDraftState) == 0x000ABD, "Member 'UHWDraftLobbyScreenWidget::CurrentDraftState' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bHasShownYourTurnToPickNotification) == 0x000ABE, "Member 'UHWDraftLobbyScreenWidget::bHasShownYourTurnToPickNotification' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, LobbyStatus) == 0x000AC0, "Member 'UHWDraftLobbyScreenWidget::LobbyStatus' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, SkinSelect) == 0x000AC8, "Member 'UHWDraftLobbyScreenWidget::SkinSelect' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, CharacterChoiceGrid) == 0x000AD0, "Member 'UHWDraftLobbyScreenWidget::CharacterChoiceGrid' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bHasSelectedCharacter) == 0x000AD8, "Member 'UHWDraftLobbyScreenWidget::bHasSelectedCharacter' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bBypassBanCheck) == 0x000AD9, "Member 'UHWDraftLobbyScreenWidget::bBypassBanCheck' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, SelectedSkinWidget) == 0x000AE0, "Member 'UHWDraftLobbyScreenWidget::SelectedSkinWidget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, SkinSelectDraftActor) == 0x000AF8, "Member 'UHWDraftLobbyScreenWidget::SkinSelectDraftActor' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, LastDetectedCharacterLockInTaskId) == 0x000B00, "Member 'UHWDraftLobbyScreenWidget::LastDetectedCharacterLockInTaskId' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, LastDetectedSkinLockInTaskId) == 0x000B02, "Member 'UHWDraftLobbyScreenWidget::LastDetectedSkinLockInTaskId' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyScreenWidget, bShouldPreloadPlayerLoadouts) == 0x000B18, "Member 'UHWDraftLobbyScreenWidget::bShouldPreloadPlayerLoadouts' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemEntry
// 0x0038 (0x0630 - 0x05F8)
class UHWItemStoreItemEntry : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x4];                                      // 0x05F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItem;                                     // 0x05FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0xC];                                      // 0x0604(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_618[0x1];                                      // 0x0618(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldUpdateOwnershipWithoutMatchingItem;         // 0x0619(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61A[0x16];                                     // 0x061A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallGamepadHoverItemEntry();
	void DisplayEquipment(const class UHWEquipmentItem* EquipmentInfo);
	void DisplayGold();
	void DisplayIsSelected();
	void DisplayOwnership(const bool IsOwned, const bool IsUnique);
	void GamepadClickItem();
	void HideTooltip();
	void InventoryChanged(class UHWEquipmentInstance* EquipmentInstance, EHWInventoryChangeReason InventoryChangeReason);
	void OnCurrentInventoryChanged();
	void OnDoubleClickItem();
	void OnPurchaseItem();
	void Populate(const struct FHWItemStoreItemInfo& ItemConfig);
	void PurchaseItem();
	void SelectItem();
	void SetCurrentGold(const float GoldValue);
	void SetListeners(const bool bEnableListeners);
	void SetPrice(int32 NewItemPrice);
	void SetSelected(bool bNewIsSelected);
	void ShowTooltip(class UWidget* ReferenceWidget, bool bShowContextBar, EHWTooltipAxis Axis);
	void TrackItem();
	void UpdateDetailLevel(EHWItemStoreGridDetailLevel DetailLevel);
	void UpdateLayout(EHWItemStoreLayoutType Layout);

	bool CanPurchase() const;
	int32 GetCurrentGold() const;
	const class UHWEquipmentItem* GetEquipmentItem() const;
	bool GetIsOwned() const;
	bool GetIsUnique() const;
	int32 GetPrice() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemEntry">();
	}
	static class UHWItemStoreItemEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemEntry>();
	}
};
static_assert(alignof(UHWItemStoreItemEntry) == 0x000008, "Wrong alignment on UHWItemStoreItemEntry");
static_assert(sizeof(UHWItemStoreItemEntry) == 0x000630, "Wrong size on UHWItemStoreItemEntry");
static_assert(offsetof(UHWItemStoreItemEntry, EquipmentItem) == 0x0005FC, "Member 'UHWItemStoreItemEntry::EquipmentItem' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemEntry, ItemStoreManager) == 0x000610, "Member 'UHWItemStoreItemEntry::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemEntry, bShouldUpdateOwnershipWithoutMatchingItem) == 0x000619, "Member 'UHWItemStoreItemEntry::bShouldUpdateOwnershipWithoutMatchingItem' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemTreeEntry
// 0x0008 (0x0638 - 0x0630)
class UHWItemStoreItemTreeEntry : public UHWItemStoreItemEntry
{
public:
	TWeakObjectPtr<class UHWItemStoreSubTreeWidget> ParentSubTreeWidget;                             // 0x0630(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ForceNavigateBack();
	void SelectItemTreeEntry();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemTreeEntry">();
	}
	static class UHWItemStoreItemTreeEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemTreeEntry>();
	}
};
static_assert(alignof(UHWItemStoreItemTreeEntry) == 0x000008, "Wrong alignment on UHWItemStoreItemTreeEntry");
static_assert(sizeof(UHWItemStoreItemTreeEntry) == 0x000638, "Wrong size on UHWItemStoreItemTreeEntry");
static_assert(offsetof(UHWItemStoreItemTreeEntry, ParentSubTreeWidget) == 0x000630, "Member 'UHWItemStoreItemTreeEntry::ParentSubTreeWidget' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbySkinSelectEntryWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWDraftLobbySkinSelectEntryWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class URHAsyncImage*                          SkinIcon;                                          // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              HitTarget;                                         // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADraftReplicatedActor>   CachedDraftActor;                                  // 0x0638(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDraftChoice                           DraftChoice;                                       // 0x0640(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	void EvaluateStroke();
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void HandleEntryButtonUnhovered();
	void PostSetDraftChoice();
	void SetDraftActor(class ADraftReplicatedActor* InDraftActor);
	void SetDraftChoice(const struct FDraftChoice& InDraftChoice);
	void SetEntrySelected(bool bSelected);

	const class UHWSkinItem* GetDraftActorSkinChoice() const;
	const struct FDraftChoice GetDraftChoice() const;
	bool IsSelectedDraftSkinChoice() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbySkinSelectEntryWidget">();
	}
	static class UHWDraftLobbySkinSelectEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbySkinSelectEntryWidget>();
	}
};
static_assert(alignof(UHWDraftLobbySkinSelectEntryWidget) == 0x000008, "Wrong alignment on UHWDraftLobbySkinSelectEntryWidget");
static_assert(sizeof(UHWDraftLobbySkinSelectEntryWidget) == 0x000650, "Wrong size on UHWDraftLobbySkinSelectEntryWidget");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, OnSkinSelectEntryHovered) == 0x0005F8, "Member 'UHWDraftLobbySkinSelectEntryWidget::OnSkinSelectEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, OnSkinSelectEntryUnhovered) == 0x000608, "Member 'UHWDraftLobbySkinSelectEntryWidget::OnSkinSelectEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, OnSkinSelectEntrySelected) == 0x000618, "Member 'UHWDraftLobbySkinSelectEntryWidget::OnSkinSelectEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, SkinIcon) == 0x000628, "Member 'UHWDraftLobbySkinSelectEntryWidget::SkinIcon' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, HitTarget) == 0x000630, "Member 'UHWDraftLobbySkinSelectEntryWidget::HitTarget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, CachedDraftActor) == 0x000638, "Member 'UHWDraftLobbySkinSelectEntryWidget::CachedDraftActor' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectEntryWidget, DraftChoice) == 0x000640, "Member 'UHWDraftLobbySkinSelectEntryWidget::DraftChoice' has a wrong offset!");

// Class HemingwayUI.HWBaseHUD
// 0x01A8 (0x06A8 - 0x0500)
class AHWBaseHUD : public ARHHUDCommon
{
public:
	uint8                                         Pad_500[0x8];                                      // 0x0500(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AHWPlayerState* LocalPlayerState)> OnLocalPlayerStateReceived; // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMaterialParameterCollectionInstance> CharacterInGameMaterialCollectionInstance; // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWInputUIViewConfig> InputViewConfigMap;                       // 0x0520(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EscInputTag;                                       // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWInputViewRouteData*                  InputViewRouteData;                                // 0x0578(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHWInputPlatformSettings*               PlatformControlSettings;                           // 0x0580(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputMappingContext*                   NavigationMappingContext;                          // 0x0588(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NavigationMappingContextPriority;                  // 0x0590(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ECommonInputMode InputMode)> OnActiveInputModeUpdated;             // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UInputMappingContext*                   ActiveCustomInputMappingContext;                   // 0x05A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5B0[0x18];                                     // 0x05B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWBaseHUDWidget>           HUDWidgetClass;                                    // 0x05C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             HUDViewsTable;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWBaseHUDWidget*                       HUDWidget;                                         // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              DevHUDTable;                                       // 0x05E0(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDebugHUDWidget>          DebugHUDWidgetClass;                               // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWDebugHUDWidget*                      DebugHUDWidget;                                    // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LoadingScreenTag;                                  // 0x0618(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  GamePhasesToEndLoadingScreen;                      // 0x0620(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWWidget*>                      InputHandlerWidgetsStack;                          // 0x0640(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x8];                                      // 0x0650(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UMaterialInterface*> CommonMaterialAnimations;                   // 0x0658(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	bool AddInputHandlerWidgetToStack(class UHWWidget* WidgetToAdd);
	class UHWDebugHUDWidget* CreateDebugHUDWidget();
	void GamePhaseChanged(const struct FGameplayTag& NewPhaseTag);
	void HandleColorPresetUpdated();
	void HandleGamePhaseChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void HandlePlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void HideLoadingScreen();
	void LoadDevHUD(class FName DevHUDName);
	void OnHideHUD();
	void OnShowHUD();
	void RefreshActiveMappingContexts();
	bool RemoveInputHandlerWidgetFromStack(class UHWWidget* WidgetToRemove);
	void ToggleCallouts();
	void ToggleDebugHUD();

	ECommonInputMode GetActiveInputMode() const;
	class UHWBaseHUDWidget* GetBaseHUDWidget() const;
	class UMaterialInterface* GetCommonMaterialAnimation(const struct FGameplayTag& MaterialTag) const;
	struct FGameplayTag GetCurrentPhaseTag() const;
	const TSoftObjectPtr<class UDataTable> GetDevHUDTable() const;
	class UHWViewManager* GetHWViewManager() const;
	class UHWInputPlatformSettings* GetInputPlatformSettings() const;
	bool GetIsHUDShown() const;
	const class AHWGameMode* GetLoadedGameModeDefaultObject() const;
	const struct FGameplayTag GetLoadedGameModeTag() const;
	class AHWPlayerController* GetLocalPlayerController() const;
	class AHWPlayerState* GetLocalPlayerState() const;
	class UHWPlayerSettingsSubsystem* GetPlayerSettingsSubsystem() const;
	class UHWSystemSettingsSubsystem* GetSystemSettingsSubsystem() const;
	class UHWTooltipWidgetManager* GetTooltipWidgetManager() const;
	class UHWWidget* GetTopInputHandlerWidget() const;
	bool IsActorInLocalPlayerLOS(const class AActor* TargetActor, bool bIgnoreTarget) const;
	bool IsLocationInLocalPlayerLOS(const struct FVector& Location, const class AActor* ignoreActor) const;
	bool ShouldShowCallouts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWBaseHUD">();
	}
	static class AHWBaseHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWBaseHUD>();
	}
};
static_assert(alignof(AHWBaseHUD) == 0x000008, "Wrong alignment on AHWBaseHUD");
static_assert(sizeof(AHWBaseHUD) == 0x0006A8, "Wrong size on AHWBaseHUD");
static_assert(offsetof(AHWBaseHUD, OnLocalPlayerStateReceived) == 0x000508, "Member 'AHWBaseHUD::OnLocalPlayerStateReceived' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, CharacterInGameMaterialCollectionInstance) == 0x000518, "Member 'AHWBaseHUD::CharacterInGameMaterialCollectionInstance' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, InputViewConfigMap) == 0x000520, "Member 'AHWBaseHUD::InputViewConfigMap' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, EscInputTag) == 0x000570, "Member 'AHWBaseHUD::EscInputTag' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, InputViewRouteData) == 0x000578, "Member 'AHWBaseHUD::InputViewRouteData' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, PlatformControlSettings) == 0x000580, "Member 'AHWBaseHUD::PlatformControlSettings' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, NavigationMappingContext) == 0x000588, "Member 'AHWBaseHUD::NavigationMappingContext' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, NavigationMappingContextPriority) == 0x000590, "Member 'AHWBaseHUD::NavigationMappingContextPriority' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, OnActiveInputModeUpdated) == 0x000598, "Member 'AHWBaseHUD::OnActiveInputModeUpdated' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, ActiveCustomInputMappingContext) == 0x0005A8, "Member 'AHWBaseHUD::ActiveCustomInputMappingContext' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, HUDWidgetClass) == 0x0005C8, "Member 'AHWBaseHUD::HUDWidgetClass' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, HUDViewsTable) == 0x0005D0, "Member 'AHWBaseHUD::HUDViewsTable' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, HUDWidget) == 0x0005D8, "Member 'AHWBaseHUD::HUDWidget' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, DevHUDTable) == 0x0005E0, "Member 'AHWBaseHUD::DevHUDTable' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, DebugHUDWidgetClass) == 0x000608, "Member 'AHWBaseHUD::DebugHUDWidgetClass' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, DebugHUDWidget) == 0x000610, "Member 'AHWBaseHUD::DebugHUDWidget' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, LoadingScreenTag) == 0x000618, "Member 'AHWBaseHUD::LoadingScreenTag' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, GamePhasesToEndLoadingScreen) == 0x000620, "Member 'AHWBaseHUD::GamePhasesToEndLoadingScreen' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, InputHandlerWidgetsStack) == 0x000640, "Member 'AHWBaseHUD::InputHandlerWidgetsStack' has a wrong offset!");
static_assert(offsetof(AHWBaseHUD, CommonMaterialAnimations) == 0x000658, "Member 'AHWBaseHUD::CommonMaterialAnimations' has a wrong offset!");

// Class HemingwayUI.HWLobbyHUD
// 0x0000 (0x06A8 - 0x06A8)
class AHWLobbyHUD : public AHWBaseHUD
{
public:
	void GMMF();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWLobbyHUD">();
	}
	static class AHWLobbyHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWLobbyHUD>();
	}
};
static_assert(alignof(AHWLobbyHUD) == 0x000008, "Wrong alignment on AHWLobbyHUD");
static_assert(sizeof(AHWLobbyHUD) == 0x0006A8, "Wrong size on AHWLobbyHUD");

// Class HemingwayUI.HWDraftLobbyHUD
// 0x0000 (0x06A8 - 0x06A8)
class AHWDraftLobbyHUD final : public AHWLobbyHUD
{
public:
	class AHWTeamState* GetLocalTeam() const;
	struct FGenericTeamId GetLocalTeamId() const;
	class AHWTeamState* GetTeam(const struct FGenericTeamId& TeamId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyHUD">();
	}
	static class AHWDraftLobbyHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWDraftLobbyHUD>();
	}
};
static_assert(alignof(AHWDraftLobbyHUD) == 0x000008, "Wrong alignment on AHWDraftLobbyHUD");
static_assert(sizeof(AHWDraftLobbyHUD) == 0x0006A8, "Wrong size on AHWDraftLobbyHUD");

// Class HemingwayUI.HWDraftLobbySkinSelectWidget
// 0x0068 (0x0660 - 0x05F8)
class UHWDraftLobbySkinSelectWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem)> OnSkinSelectEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UPanelWidget*                           SkinSelectPanel;                                   // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAspectItemWidget*                 AspectWidget;                                      // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDraftLobbySkinSelectEntryWidget> EntryWidgetClass;                          // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADraftReplicatedActor*                  CachedDraftActor;                                  // 0x0640(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCharacterItem*                       CachedCharacterItem;                               // 0x0648(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSkinItem*                            CachedDisplayedSkinItem;                           // 0x0650(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWStoreItemPipContainerWidget*         SkinVariantPips;                                   // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleSkinChoicesChanged(const TArray<class UObject*>& RemovedChoices, const TArray<class UObject*>& AddedOrUpdatedChoices);
	void HandleSkinEntryHovered(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem);
	void HandleSkinEntrySelected(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem);
	void HandleSkinEntryUnhovered(class UHWDraftLobbySkinSelectEntryWidget* EntryWidget, class UHWInventoryItem* InventoryItem);
	void HandleSkinVariantRequestSelect(class UHWStoreItemDisplayWidget* PipWidget);
	void SelectSkinEntryWithItem(class UHWInventoryItem* BaseInventoryItem, class UHWInventoryItem* VariantInventoryItem);
	void SetCharacterItem(const class UHWCharacterItem* InCharacterItem);
	void SetDraftActor(class ADraftReplicatedActor* InDraftActor);

	class UHWSkinItem* GetDisplayedSkinItem() const;
	class UHWDraftLobbySkinSelectEntryWidget* GetEquippedSkinEntryWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbySkinSelectWidget">();
	}
	static class UHWDraftLobbySkinSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbySkinSelectWidget>();
	}
};
static_assert(alignof(UHWDraftLobbySkinSelectWidget) == 0x000008, "Wrong alignment on UHWDraftLobbySkinSelectWidget");
static_assert(sizeof(UHWDraftLobbySkinSelectWidget) == 0x000660, "Wrong size on UHWDraftLobbySkinSelectWidget");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, OnSkinSelectEntryHovered) == 0x0005F8, "Member 'UHWDraftLobbySkinSelectWidget::OnSkinSelectEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, OnSkinSelectEntryUnhovered) == 0x000608, "Member 'UHWDraftLobbySkinSelectWidget::OnSkinSelectEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, OnSkinSelectEntrySelected) == 0x000618, "Member 'UHWDraftLobbySkinSelectWidget::OnSkinSelectEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, SkinSelectPanel) == 0x000628, "Member 'UHWDraftLobbySkinSelectWidget::SkinSelectPanel' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, AspectWidget) == 0x000630, "Member 'UHWDraftLobbySkinSelectWidget::AspectWidget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, EntryWidgetClass) == 0x000638, "Member 'UHWDraftLobbySkinSelectWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, CachedDraftActor) == 0x000640, "Member 'UHWDraftLobbySkinSelectWidget::CachedDraftActor' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, CachedCharacterItem) == 0x000648, "Member 'UHWDraftLobbySkinSelectWidget::CachedCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, CachedDisplayedSkinItem) == 0x000650, "Member 'UHWDraftLobbySkinSelectWidget::CachedDisplayedSkinItem' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySkinSelectWidget, SkinVariantPips) == 0x000658, "Member 'UHWDraftLobbySkinSelectWidget::SkinVariantPips' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyTeamWidget
// 0x00C8 (0x06C0 - 0x05F8)
class UHWDraftLobbyTeamWidget final : public UHWWidget
{
public:
	struct FGenericTeamId                         DisplayedTeamNumber;                               // 0x05F8(0x0001)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWAutoRegisterTeamType                       AutoTeamType;                                      // 0x05F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGenericTeamId                         TeamNumber;                                        // 0x05FA(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FB[0x5];                                      // 0x05FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDraftTeamBoxRebuilt;                             // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWDraftLobbyPlayerEntryWidget> PlayerEntryWidgetClass;                        // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          EntryHorizontalAlignment;                          // 0x0618(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUniformGridPanel*                    Panel;                                             // 0x0620(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class URHWidget*>                      WidgetsToAbandon;                                  // 0x0628(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class URHWidget>>       SortedPlayerWidgets;                               // 0x0638(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ADraftReplicatedActor>   DraftActor;                                        // 0x0648(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x70];                                     // 0x0650(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URHWidget* CreatePlayerWidgetFor(const struct FHWPersistentPlayerId& PlayerId);
	struct FGenericTeamId GetTeamNumber();
	void OnActiveSessionChanged(class URH_JoinedSession* OldSession, class URH_JoinedSession* NewSession);
	void OnBoundTeamMembersUpdated();
	void OnDraftBoxRebuilt();
	void OnGamePhaseEnded(const struct FGameplayTag& CurrentPhase);
	void OnGameStatePhaseStarted(const struct FGameplayTag& NewPhase);
	void OnGameStateTeamsUpdated();
	void OnPlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void OnTeamAddedToGameState(class AHWTeamState* inTeam);
	void OwnerTeamUpdated(class AController* Controller, const struct FGenericTeamId& TeamId);
	void PostSetTeam();
	void PreClearTeam();
	void SetAutoTeamConfig(EHWAutoRegisterTeamType InAutoTeamType, const struct FGenericTeamId& InTeamNum);
	void SetDraftActor(class ADraftReplicatedActor* InDraftActor);
	void SetPanelWidget(class UHWUniformGridPanel* InPanel);
	void SetTeam(const struct FGenericTeamId& NewTeamNumber);
	void SetVoiceChatState(const struct FGuid& PlayerUuid, bool bInVoiceChannel, bool bIsTalking, bool bIsMuted);
	void VoiceChatDisconnected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyTeamWidget">();
	}
	static class UHWDraftLobbyTeamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyTeamWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyTeamWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyTeamWidget");
static_assert(sizeof(UHWDraftLobbyTeamWidget) == 0x0006C0, "Wrong size on UHWDraftLobbyTeamWidget");
static_assert(offsetof(UHWDraftLobbyTeamWidget, DisplayedTeamNumber) == 0x0005F8, "Member 'UHWDraftLobbyTeamWidget::DisplayedTeamNumber' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, AutoTeamType) == 0x0005F9, "Member 'UHWDraftLobbyTeamWidget::AutoTeamType' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, TeamNumber) == 0x0005FA, "Member 'UHWDraftLobbyTeamWidget::TeamNumber' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, OnDraftTeamBoxRebuilt) == 0x000600, "Member 'UHWDraftLobbyTeamWidget::OnDraftTeamBoxRebuilt' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, PlayerEntryWidgetClass) == 0x000610, "Member 'UHWDraftLobbyTeamWidget::PlayerEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, EntryHorizontalAlignment) == 0x000618, "Member 'UHWDraftLobbyTeamWidget::EntryHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, Panel) == 0x000620, "Member 'UHWDraftLobbyTeamWidget::Panel' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, WidgetsToAbandon) == 0x000628, "Member 'UHWDraftLobbyTeamWidget::WidgetsToAbandon' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, SortedPlayerWidgets) == 0x000638, "Member 'UHWDraftLobbyTeamWidget::SortedPlayerWidgets' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyTeamWidget, DraftActor) == 0x000648, "Member 'UHWDraftLobbyTeamWidget::DraftActor' has a wrong offset!");

// Class HemingwayUI.HWScaleBox
// 0x0018 (0x01D0 - 0x01B8)
class UHWScaleBox final : public UScaleBox
{
public:
	struct FHWUIStyleWidgetConfig                 StyleConfig;                                       // 0x01B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0xC];                                      // 0x01C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScaleBox">();
	}
	static class UHWScaleBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScaleBox>();
	}
};
static_assert(alignof(UHWScaleBox) == 0x000008, "Wrong alignment on UHWScaleBox");
static_assert(sizeof(UHWScaleBox) == 0x0001D0, "Wrong size on UHWScaleBox");
static_assert(offsetof(UHWScaleBox, StyleConfig) == 0x0001B8, "Member 'UHWScaleBox::StyleConfig' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyDetailsPlayer
// 0x0050 (0x0648 - 0x05F8)
class UHWEndOfMatchLobbyDetailsPlayer : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWEndOfMatchLobbyDetailsPlayer* PlayerWidget, int32 RowNumber, bool bIsHovered)> OnDetailsPlayerStatHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x0608(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWEndOfMatchLobbyDetailsStat> StatWidgetClass;                                // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                StatPadding;                                       // 0x0628(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsEnemy;                                          // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWVerticalBox*                         StatContainer;                                     // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UHWEndOfMatchLobbyDetailsStat* GetPlayerStat(const struct FGameplayTag& StatTag);
	void HandleStatHovered(int32 RowNumber, bool bIsHovered);
	void SetCharacterItem(const class UHWCharacterItem* InCharacterItem);
	void SetIsEnemy(const bool bInIsEnemy);
	void SetPlayer(class URH_PlayerInfo* PlayerInfo, const struct FGuid& InPlayerUUID);
	void SetPlayerInfo(class URH_PlayerInfo* PlayerInfo);
	void SetPlayerStats(const TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat>& PlayerDetails);
	void SetStatsHovered(int32 Row, bool bIsHovered, bool bHighlightAll);
	void UpdatePlayerPlatformIcon(ERHPlatformDisplayType PlatformType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyDetailsPlayer">();
	}
	static class UHWEndOfMatchLobbyDetailsPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyDetailsPlayer>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyDetailsPlayer) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyDetailsPlayer");
static_assert(sizeof(UHWEndOfMatchLobbyDetailsPlayer) == 0x000648, "Wrong size on UHWEndOfMatchLobbyDetailsPlayer");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, OnDetailsPlayerStatHovered) == 0x0005F8, "Member 'UHWEndOfMatchLobbyDetailsPlayer::OnDetailsPlayerStatHovered' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, PlayerUuid) == 0x000608, "Member 'UHWEndOfMatchLobbyDetailsPlayer::PlayerUuid' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, CharacterItem) == 0x000618, "Member 'UHWEndOfMatchLobbyDetailsPlayer::CharacterItem' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, StatWidgetClass) == 0x000620, "Member 'UHWEndOfMatchLobbyDetailsPlayer::StatWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, StatPadding) == 0x000628, "Member 'UHWEndOfMatchLobbyDetailsPlayer::StatPadding' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, bIsEnemy) == 0x000638, "Member 'UHWEndOfMatchLobbyDetailsPlayer::bIsEnemy' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsPlayer, StatContainer) == 0x000640, "Member 'UHWEndOfMatchLobbyDetailsPlayer::StatContainer' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderRolesListEntryWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWGodBuilderRolesListEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECharacterRole                                EntryRole;                                         // 0x0610(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleEntryButtonSelected();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderRolesListEntryWidget">();
	}
	static class UHWGodBuilderRolesListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderRolesListEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderRolesListEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderRolesListEntryWidget");
static_assert(sizeof(UHWGodBuilderRolesListEntryWidget) == 0x000618, "Wrong size on UHWGodBuilderRolesListEntryWidget");
static_assert(offsetof(UHWGodBuilderRolesListEntryWidget, HitTarget) == 0x000608, "Member 'UHWGodBuilderRolesListEntryWidget::HitTarget' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderRolesListEntryWidget, EntryRole) == 0x000610, "Member 'UHWGodBuilderRolesListEntryWidget::EntryRole' has a wrong offset!");

// Class HemingwayUI.HWComboBoxEntry
// 0x0000 (0x05F8 - 0x05F8)
class UHWComboBoxEntry : public UHWWidget
{
public:
	void SetIsSelected(bool bIsSelected);
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWComboBoxEntry">();
	}
	static class UHWComboBoxEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWComboBoxEntry>();
	}
};
static_assert(alignof(UHWComboBoxEntry) == 0x000008, "Wrong alignment on UHWComboBoxEntry");
static_assert(sizeof(UHWComboBoxEntry) == 0x0005F8, "Wrong size on UHWComboBoxEntry");

// Class HemingwayUI.HWEndOfMatchLobbyDetailsStat
// 0x0038 (0x0630 - 0x05F8)
class UHWEndOfMatchLobbyDetailsStat : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(int32 RowNumber, bool bIsHovered)> OnDetailsStatHovered;           // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0608(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           StatTag;                                           // 0x060C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StatValue;                                         // 0x0614(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   StatText;                                          // 0x0618(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	int32 GetRow();
	struct FGameplayTag GetStatTag();
	float GetStatValue();
	void HandleIsBestInStat(bool bIsBestInStat);
	void HandleStatHovered(bool bIsHovered);
	void HandleStatSet(const struct FGameplayTag& InStatTag, const class FText& InStatText, const float& InStatValue);
	void SetIsEnemy(bool bIsEnemy);
	void SetRow(int32 InRow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyDetailsStat">();
	}
	static class UHWEndOfMatchLobbyDetailsStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyDetailsStat>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyDetailsStat) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyDetailsStat");
static_assert(sizeof(UHWEndOfMatchLobbyDetailsStat) == 0x000630, "Wrong size on UHWEndOfMatchLobbyDetailsStat");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsStat, OnDetailsStatHovered) == 0x0005F8, "Member 'UHWEndOfMatchLobbyDetailsStat::OnDetailsStatHovered' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsStat, Row) == 0x000608, "Member 'UHWEndOfMatchLobbyDetailsStat::Row' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsStat, StatTag) == 0x00060C, "Member 'UHWEndOfMatchLobbyDetailsStat::StatTag' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsStat, StatValue) == 0x000614, "Member 'UHWEndOfMatchLobbyDetailsStat::StatValue' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsStat, StatText) == 0x000618, "Member 'UHWEndOfMatchLobbyDetailsStat::StatText' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyDetailsTeam
// 0x0028 (0x0620 - 0x05F8)
class UHWEndOfMatchLobbyDetailsTeam : public UHWWidget
{
public:
	struct FGenericTeamId                         TeamId;                                            // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnemy;                                          // 0x05F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FA[0x6];                                      // 0x05FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWEndOfMatchLobbyDetailsPlayer> PlayerWidgetClass;                            // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       PlayerContainer;                                   // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWEndOfMatchLobbyDetailsPlayer*> PlayerWidgets;                                    // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class UHWEndOfMatchLobbyDetailsPlayer* CreatePlayerWidget(const TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat>& TagToTextMap);
	void DetermineHighestInStat(struct FHWEndOfMatchBestInStat* BestInStat, const struct FGameplayTag& Tag);
	const TArray<class UHWEndOfMatchLobbyDetailsPlayer*> GetPlayerWidgets();
	struct FGenericTeamId GetTeamId();
	void SetTeamId(const struct FGenericTeamId& InTeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyDetailsTeam">();
	}
	static class UHWEndOfMatchLobbyDetailsTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyDetailsTeam>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyDetailsTeam) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyDetailsTeam");
static_assert(sizeof(UHWEndOfMatchLobbyDetailsTeam) == 0x000620, "Wrong size on UHWEndOfMatchLobbyDetailsTeam");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsTeam, TeamId) == 0x0005F8, "Member 'UHWEndOfMatchLobbyDetailsTeam::TeamId' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsTeam, bIsEnemy) == 0x0005F9, "Member 'UHWEndOfMatchLobbyDetailsTeam::bIsEnemy' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsTeam, PlayerWidgetClass) == 0x000600, "Member 'UHWEndOfMatchLobbyDetailsTeam::PlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsTeam, PlayerContainer) == 0x000608, "Member 'UHWEndOfMatchLobbyDetailsTeam::PlayerContainer' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsTeam, PlayerWidgets) == 0x000610, "Member 'UHWEndOfMatchLobbyDetailsTeam::PlayerWidgets' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyDetailsWidget
// 0x0078 (0x0670 - 0x05F8)
class UHWEndOfMatchLobbyDetailsWidget : public UHWWidget
{
public:
	TMap<struct FGameplayTag, struct FHWEndOfMatchBestInStat> HighestInStats;                        // 0x05F8(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   StatOrder;                                         // 0x0648(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UHWEndOfMatchLobbyDetailsTeam*          FriendlyTeam;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEndOfMatchLobbyDetailsTeam*          EnemyTeam;                                         // 0x0660(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         StatTitles;                                        // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UHWEndOfMatchLobbyDetailsPlayer* AddPlayerMatchDetails(const TMap<struct FGameplayTag, struct FHWEndOfMatchDetailsStat>& StatToTextMap, const struct FGenericTeamId& TeamId);
	void DetermineHighestInStat();
	TArray<struct FGameplayTag> GetSupportedStats();
	class FText GetTextFormatForStat(const struct FGameplayTag& StatTag);
	void HandlePlayerStatHovered(class UHWEndOfMatchLobbyDetailsPlayer* PlayerWidget, int32 StatRow, bool bIsHovered);
	void HandleStatNamesSet(const TArray<class FText>& StatNames);
	void PopulateTestPage();
	void SetEnemyTeamId(const struct FGenericTeamId& TeamId);
	void SetFriendlyTeamId(const struct FGenericTeamId& TeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyDetailsWidget">();
	}
	static class UHWEndOfMatchLobbyDetailsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyDetailsWidget>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyDetailsWidget) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyDetailsWidget");
static_assert(sizeof(UHWEndOfMatchLobbyDetailsWidget) == 0x000670, "Wrong size on UHWEndOfMatchLobbyDetailsWidget");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsWidget, HighestInStats) == 0x0005F8, "Member 'UHWEndOfMatchLobbyDetailsWidget::HighestInStats' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsWidget, StatOrder) == 0x000648, "Member 'UHWEndOfMatchLobbyDetailsWidget::StatOrder' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsWidget, FriendlyTeam) == 0x000658, "Member 'UHWEndOfMatchLobbyDetailsWidget::FriendlyTeam' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsWidget, EnemyTeam) == 0x000660, "Member 'UHWEndOfMatchLobbyDetailsWidget::EnemyTeam' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyDetailsWidget, StatTitles) == 0x000668, "Member 'UHWEndOfMatchLobbyDetailsWidget::StatTitles' has a wrong offset!");

// Class HemingwayUI.HWGameMenuEscMenuWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWGameMenuEscMenuWidget final : public UHWWidget
{
public:
	class UInputAction*                           EscapeMenuAction;                                  // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleEscapeMenuAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameMenuEscMenuWidget">();
	}
	static class UHWGameMenuEscMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameMenuEscMenuWidget>();
	}
};
static_assert(alignof(UHWGameMenuEscMenuWidget) == 0x000008, "Wrong alignment on UHWGameMenuEscMenuWidget");
static_assert(sizeof(UHWGameMenuEscMenuWidget) == 0x000608, "Wrong size on UHWGameMenuEscMenuWidget");
static_assert(offsetof(UHWGameMenuEscMenuWidget, EscapeMenuAction) == 0x0005F8, "Member 'UHWGameMenuEscMenuWidget::EscapeMenuAction' has a wrong offset!");

// Class HemingwayUI.HWInventoryEquipmentWidget
// 0x00F8 (0x06F0 - 0x05F8)
class UHWInventoryEquipmentWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWEquipmentInstance>    EquipmentInstance;                                 // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWAbilitySystemComponent> OwnerASC;                                        // 0x0608(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldGlowOnEmpty;                                // 0x0610(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0xF];                                      // 0x0611(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIContextCalloutDisplay               TooltipToggleContextCalloutDisplay;                // 0x0620(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExpandText;                                        // 0x0668(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   CollapseText;                                      // 0x0680(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldShowStates;                                 // 0x0698(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_699[0x3];                                      // 0x0699(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseClickHoldTimerThreshold;                      // 0x069C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A0[0x8];                                      // 0x06A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FHWInventorySlot& StartingSlot)> OnInitializeSwapAction; // 0x06A8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCompleteSwapAction;                              // 0x06B8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FHWInventorySlot& SwapTargetSlot)> OnUpdateSwapTargetSlot; // 0x06C8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D8[0x18];                                     // 0x06D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayCanEquipmentItemBeUpgraded(bool bCanBeUpgraded);
	void DisplayEquipment(const class UHWEquipmentItem* EquipmentInfo);
	void DisplayIconOverride(const TSoftObjectPtr<class UTexture2D>& Texture);
	void DisplayIsEquipmentItemComplete(bool bIsComplete);
	void HandleCompleteSwapAction();
	void HandleIconOverrideSet(const struct FGameplayTag& OverrideTag);
	void HandleInitializeSwapAction();
	void HandleMouseClick();
	void HandleMouseDown();
	void HandleMouseHoldAction();
	void HandleMouseUp();
	void HandleOnHover();
	void HandleOnUnHover();
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void HideTooltip();
	void SetDisplayOrientation(EHWOrientation InOrientation);
	void SetShouldGlowOnEmpty(bool bNewShouldGlow);
	void SetShouldShowStates(bool bInShouldShowStates);
	void ShowTooltip(class UWidget* ReferenceWidget, bool bShowContextBar, EHWTooltipAxis Axis);
	void ToggleTooltip();

	class UHWEquipmentInstance* GetEquipmentInstance() const;
	struct FHWInventorySlot GetEquipmentSlot() const;
	bool GetIsSwappingActive() const;
	class UHWAbilitySystemComponent* GetOwnerASC() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInventoryEquipmentWidget">();
	}
	static class UHWInventoryEquipmentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInventoryEquipmentWidget>();
	}
};
static_assert(alignof(UHWInventoryEquipmentWidget) == 0x000008, "Wrong alignment on UHWInventoryEquipmentWidget");
static_assert(sizeof(UHWInventoryEquipmentWidget) == 0x0006F0, "Wrong size on UHWInventoryEquipmentWidget");
static_assert(offsetof(UHWInventoryEquipmentWidget, EquipmentInstance) == 0x000600, "Member 'UHWInventoryEquipmentWidget::EquipmentInstance' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, OwnerASC) == 0x000608, "Member 'UHWInventoryEquipmentWidget::OwnerASC' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, bShouldGlowOnEmpty) == 0x000610, "Member 'UHWInventoryEquipmentWidget::bShouldGlowOnEmpty' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, TooltipToggleContextCalloutDisplay) == 0x000620, "Member 'UHWInventoryEquipmentWidget::TooltipToggleContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, ExpandText) == 0x000668, "Member 'UHWInventoryEquipmentWidget::ExpandText' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, CollapseText) == 0x000680, "Member 'UHWInventoryEquipmentWidget::CollapseText' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, bShouldShowStates) == 0x000698, "Member 'UHWInventoryEquipmentWidget::bShouldShowStates' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, MouseClickHoldTimerThreshold) == 0x00069C, "Member 'UHWInventoryEquipmentWidget::MouseClickHoldTimerThreshold' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, OnInitializeSwapAction) == 0x0006A8, "Member 'UHWInventoryEquipmentWidget::OnInitializeSwapAction' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, OnCompleteSwapAction) == 0x0006B8, "Member 'UHWInventoryEquipmentWidget::OnCompleteSwapAction' has a wrong offset!");
static_assert(offsetof(UHWInventoryEquipmentWidget, OnUpdateSwapTargetSlot) == 0x0006C8, "Member 'UHWInventoryEquipmentWidget::OnUpdateSwapTargetSlot' has a wrong offset!");

// Class HemingwayUI.HWActivatableEquipmentWidget
// 0x0058 (0x0748 - 0x06F0)
class UHWActivatableEquipmentWidget : public UHWInventoryEquipmentWidget
{
public:
	class UHWGameplayEffectCooldownWidget*        CooldownWidget;                                    // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowCooldownForFriendlies;                        // 0x06F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowCooldownForHostiles;                          // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWGameplayEffectBlockedWidget*         BlockedWidget;                                     // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UHWActivatableEquipmentWidget* EquipmentWidget, bool bNewCanLevelUp)> OnCanLevelUpStateChanged; // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bTrackEquipmentLevel;                              // 0x0718(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackPrimaryBuild;                                // 0x0719(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackCost;                                        // 0x071A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71B[0x15];                                     // 0x071B(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldDisplayInputKey;                            // 0x0730(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_731[0xF];                                      // 0x0731(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackSkillPoints;                                 // 0x0740(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWUIAbilityFlowPhase                         CurrentAbilityPhase;                               // 0x0741(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_742[0x6];                                      // 0x0742(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AmmoEquipIconOverride(const TSoftObjectPtr<class UTexture2D>& OverrideTexture);
	void DisplayAbilityCost(const struct FGameplayAttribute& CostAttribute, float Cost, const class FText& textFormat);
	void DisplayAbilityCostMet(bool bCostIsMet);
	void DisplayAbilityPhase_Aiming(EHWUIAbilityFlowPhase PreviousPhase);
	void DisplayAbilityPhase_Fired(EHWUIAbilityFlowPhase PreviousPhase);
	void DisplayAbilityPhase_Inactive(EHWUIAbilityFlowPhase PreviousPhase);
	void DisplayAbilityPhase_PreFire(EHWUIAbilityFlowPhase PreviousPhase);
	void DisplayAmmo(const int32 AmmoCount, const bool bHasEnough, const int32 MaxCount);
	void DisplayCanLevelUp(bool bCanLevelUp);
	void DisplayEquipmentMaxLevel(int32 MaxLevel);
	void DisplayInputTag(const struct FGameplayTag& Tag);
	void DisplayRefireState(const bool bIsRefireIsActive, const class UHWEquipmentComponentSettings_Refireable* RefireSettings);
	void DisplayShowPrimaryRecommendation(bool bShouldShow);
	void DisplayStackCount(const int32 StackCount, const int32 MaxStackCount);
	void EquipmentLevelUpdated();
	void HandleAbilityAmmoChanged(const class UHWEquipmentInstance* SourceEquipmentInstance, const int32 OldAmmo, const int32 NewAmmo);
	void HandleAbilityPhaseChanged(class UHWAbilitySystemComponent* AbilitySystem, const struct FGameplayAbilitySpecHandle& AbilityHandle, const struct FGameplayTagContainer& AbilityTags, const EAbilityFlowPhase PrevPhase, const EAbilityFlowPhase NextPhase);
	void HandleAmmoChanged(class UHWEquipmentComponent_Ammo* AmmoComponent, const class UHWEquipmentComponentSettings_Ammo* AmmoSettings, const int32 PreviousAmmoCount, const int32 NewAmmoCount);
	void HandleEquipmentComponentsInitialized(class UHWEquipmentInstance* InEquipmentInstance);
	void HandleEquipmentLevelChanged(class UHWEquipmentInstance* InEquipmentInstance, const int32 PreviousLevel);
	void HandleRefireStateChanged(class UHWEquipmentComponent_Refireable* RefireComponent, const bool bIsRefireWindowActive, const float RefireWindowTime);
	void HandleStackChanged(class UHWEquipmentInstance* OwningEquipment, class UHWEquipmentComponent_Stacks* StackComponent);
	void OnEquipmentInputTagUpdated(class UHWEquipmentInstance* Equipment, const struct FGameplayTag& InputTag, const struct FGameplayTag& InDisplayInputTag);
	void OnParentEquipmentInstanceChanged(class UHWEquipmentComponent_ChildEquipment* ChildEquipmentComponent);
	void OnPrimaryBuildUpdated(const class UHWCharacterItem* InGodItem, const struct FGuid& BuildGuid);
	void UpdatePrimaryBuildRecommendation();

	bool CanActivateEquipmentAtLevel(const int32 Level) const;
	bool CanEquipmentLevelUp() const;
	bool CheckAbilityCost() const;
	int32 GetEquipmentLevel() const;
	class UHWGameplayAbility* GetGameplayAbility() const;
	float GetRefireDuration() const;
	float GetRefireTimeRemaining() const;
	bool HasAbilityTypeTag(const struct FGameplayTag& AbilityTypeTag) const;
	bool HasTalent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWActivatableEquipmentWidget">();
	}
	static class UHWActivatableEquipmentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWActivatableEquipmentWidget>();
	}
};
static_assert(alignof(UHWActivatableEquipmentWidget) == 0x000008, "Wrong alignment on UHWActivatableEquipmentWidget");
static_assert(sizeof(UHWActivatableEquipmentWidget) == 0x000748, "Wrong size on UHWActivatableEquipmentWidget");
static_assert(offsetof(UHWActivatableEquipmentWidget, CooldownWidget) == 0x0006F0, "Member 'UHWActivatableEquipmentWidget::CooldownWidget' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bShowCooldownForFriendlies) == 0x0006F8, "Member 'UHWActivatableEquipmentWidget::bShowCooldownForFriendlies' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bShowCooldownForHostiles) == 0x0006F9, "Member 'UHWActivatableEquipmentWidget::bShowCooldownForHostiles' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, BlockedWidget) == 0x000700, "Member 'UHWActivatableEquipmentWidget::BlockedWidget' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, OnCanLevelUpStateChanged) == 0x000708, "Member 'UHWActivatableEquipmentWidget::OnCanLevelUpStateChanged' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bTrackEquipmentLevel) == 0x000718, "Member 'UHWActivatableEquipmentWidget::bTrackEquipmentLevel' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bTrackPrimaryBuild) == 0x000719, "Member 'UHWActivatableEquipmentWidget::bTrackPrimaryBuild' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bTrackCost) == 0x00071A, "Member 'UHWActivatableEquipmentWidget::bTrackCost' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bShouldDisplayInputKey) == 0x000730, "Member 'UHWActivatableEquipmentWidget::bShouldDisplayInputKey' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, bTrackSkillPoints) == 0x000740, "Member 'UHWActivatableEquipmentWidget::bTrackSkillPoints' has a wrong offset!");
static_assert(offsetof(UHWActivatableEquipmentWidget, CurrentAbilityPhase) == 0x000741, "Member 'UHWActivatableEquipmentWidget::CurrentAbilityPhase' has a wrong offset!");

// Class HemingwayUI.HWGameMenuWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWGameMenuWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	void HandlePlayerInputRebuilt(EHWInputHardwareType CurrentHardwareType);
	void SetAbilityInfoVisibility(bool bIsVisible);
	void ToggleEscapeMenu();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameMenuWidget">();
	}
	static class UHWGameMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameMenuWidget>();
	}
};
static_assert(alignof(UHWGameMenuWidget) == 0x000008, "Wrong alignment on UHWGameMenuWidget");
static_assert(sizeof(UHWGameMenuWidget) == 0x000600, "Wrong size on UHWGameMenuWidget");

// Class HemingwayUI.HWTeamBarWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWTeamBarWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWTeamBarEntryWidget>      EntryWidgetClass;                                  // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWTeamLayoutOrientation                      TeamLayoutOrientation;                             // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUniformGridPanel*                    EntryWidgetContainer;                              // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWTeamBarEntryWidget*>          TeamEntryWidgets;                                  // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         MinimumShownSlots;                                 // 0x0620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPlaceLocalPlayerFirst;                            // 0x0624(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETeamAttitude                                 TrackedTeamAttitude;                               // 0x0625(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGenericTeamId                         TrackedTeamId;                                     // 0x0626(0x0001)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_627[0x1];                                      // 0x0627(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWTeamState>            TrackedTeam;                                       // 0x0628(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EntryWidgetCreated(class UHWTeamBarEntryWidget* EntryWidget, class UUniformGridSlot* GridSlot);
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleTeamMembersUpdated();
	void HandleTeamsUpdated();
	void SetTeamLayoutOrientation(EHWTeamLayoutOrientation NewOrientation);
	void UpdatedTeamEntries();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTeamBarWidget">();
	}
	static class UHWTeamBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTeamBarWidget>();
	}
};
static_assert(alignof(UHWTeamBarWidget) == 0x000008, "Wrong alignment on UHWTeamBarWidget");
static_assert(sizeof(UHWTeamBarWidget) == 0x000638, "Wrong size on UHWTeamBarWidget");
static_assert(offsetof(UHWTeamBarWidget, EntryWidgetClass) == 0x0005F8, "Member 'UHWTeamBarWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, TeamLayoutOrientation) == 0x000600, "Member 'UHWTeamBarWidget::TeamLayoutOrientation' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, EntryWidgetContainer) == 0x000608, "Member 'UHWTeamBarWidget::EntryWidgetContainer' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, TeamEntryWidgets) == 0x000610, "Member 'UHWTeamBarWidget::TeamEntryWidgets' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, MinimumShownSlots) == 0x000620, "Member 'UHWTeamBarWidget::MinimumShownSlots' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, bPlaceLocalPlayerFirst) == 0x000624, "Member 'UHWTeamBarWidget::bPlaceLocalPlayerFirst' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, TrackedTeamAttitude) == 0x000625, "Member 'UHWTeamBarWidget::TrackedTeamAttitude' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, TrackedTeamId) == 0x000626, "Member 'UHWTeamBarWidget::TrackedTeamId' has a wrong offset!");
static_assert(offsetof(UHWTeamBarWidget, TrackedTeam) == 0x000628, "Member 'UHWTeamBarWidget::TrackedTeam' has a wrong offset!");

// Class HemingwayUI.HWGameplayEffectWidget
// 0x00B0 (0x06A8 - 0x05F8)
class UHWGameplayEffectWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData)> OnEffectTrackStartedEvent; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData)> OnEffectTrackEndedEvent; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData, int32 PreviousStackCount, int32 NewStackCount)> OnEffectStackChangedEvent; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData, float StartTime, float Duration)> OnEffectTimeChangedEvent; // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEffectsTrackedEvent;                             // 0x0638(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEffectsUntrackedEvent;                           // 0x0639(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEffectInhibitionChangedEvent;                    // 0x063A(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnEffectHandleReplacedEvent;                       // 0x063B(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayEffectUIData>> TrackedUIClasses;                               // 0x0640(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TrackedGameplayTags;                               // 0x0650(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bCheckOwnedTags;                                   // 0x0670(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckBlockedAbilityTags;                          // 0x0671(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckGameplayEffectTags;                          // 0x0672(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMatchTrackedTagChildren;                          // 0x0673(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMatchTagFromEffectChildren;                       // 0x0674(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackRemoveInfo;                                  // 0x0675(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackStackChange;                                 // 0x0676(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackTimeChange;                                  // 0x0677(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackInhibitionChange;                            // 0x0678(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackFromLocalActor;                              // 0x0679(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67A[0x6];                                      // 0x067A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWTrackedEffectData>           TrackedEffects;                                    // 0x0680(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWAbilitySystemComponent> CurrentASC;                                      // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x10];                                     // 0x0698(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTrackers();
	void EffectHandleReplaced(const struct FActiveGameplayEffect& ActiveEffect, const struct FActiveGameplayEffectHandle& OldHandle, const struct FActiveGameplayEffectHandle& NewHandle);
	void EffectInhibitionChanged(const struct FActiveGameplayEffect& ActiveEffect, bool bIsInhibited);
	void EffectStackChanged(const struct FActiveGameplayEffect& ActiveEffect, int32 PreviousStackCount, int32 NewStackCount);
	void EffectTimeChanged(const struct FActiveGameplayEffect& ActiveEffect, float NewStartTime, float NewDuration);
	void EffectTrackEnded(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData);
	void EffectTrackStarted(const struct FActiveGameplayEffect& ActiveEffect, const struct FHWTrackedEffectData& EffectData);
	void HandleActiveGameplayEffectAdded(class UAbilitySystemComponent* ASC, const struct FGameplayEffectSpec& EffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle);
	void HandleActiveGameplayEffectInhibitionChange(const struct FActiveGameplayEffectHandle& EffectHandle, bool bIsInhibited);
	void HandleActiveGameplayEffectRemoved_Info(const struct FGameplayEffectRemovalInfo& RemovalInfo);
	void HandleActiveGameplayEffectStackChange(const struct FActiveGameplayEffectHandle& EffectHandle, int32 NewStackCount, int32 PreviousStackCount);
	void HandleActiveGameplayEffectTimeChange(const struct FActiveGameplayEffectHandle& EffectHandle, float NewStartTime, float NewDuration);
	void HandleAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& ActiveGameplayEffect);
	void OnEffectsTracked();
	void OnEffectsUntracked();
	void SetAndTrackNewEffects(class UHWAbilitySystemComponent* ASC, const struct FGameplayTagContainer& NewGameplayTags, const TArray<TSubclassOf<class UGameplayEffectUIData>>& NewClasses, bool bAppend);
	void SetNewTrackedEffectClasses(const TArray<TSubclassOf<class UGameplayEffectUIData>>& NewClasses, bool bAppend);
	void SetNewTrackedEffectTags(const struct FGameplayTagContainer& NewGameplayTags, bool bAppend);
	void TrackEffects(class UHWAbilitySystemComponent* ASC);

	int32 GetActiveEffectsCount() const;
	struct FGameplayTagContainer GetTrackedEffectMatchedTags() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayEffectWidget">();
	}
	static class UHWGameplayEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayEffectWidget>();
	}
};
static_assert(alignof(UHWGameplayEffectWidget) == 0x000008, "Wrong alignment on UHWGameplayEffectWidget");
static_assert(sizeof(UHWGameplayEffectWidget) == 0x0006A8, "Wrong size on UHWGameplayEffectWidget");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectTrackStartedEvent) == 0x0005F8, "Member 'UHWGameplayEffectWidget::OnEffectTrackStartedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectTrackEndedEvent) == 0x000608, "Member 'UHWGameplayEffectWidget::OnEffectTrackEndedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectStackChangedEvent) == 0x000618, "Member 'UHWGameplayEffectWidget::OnEffectStackChangedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectTimeChangedEvent) == 0x000628, "Member 'UHWGameplayEffectWidget::OnEffectTimeChangedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectsTrackedEvent) == 0x000638, "Member 'UHWGameplayEffectWidget::OnEffectsTrackedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectsUntrackedEvent) == 0x000639, "Member 'UHWGameplayEffectWidget::OnEffectsUntrackedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectInhibitionChangedEvent) == 0x00063A, "Member 'UHWGameplayEffectWidget::OnEffectInhibitionChangedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, OnEffectHandleReplacedEvent) == 0x00063B, "Member 'UHWGameplayEffectWidget::OnEffectHandleReplacedEvent' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, TrackedUIClasses) == 0x000640, "Member 'UHWGameplayEffectWidget::TrackedUIClasses' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, TrackedGameplayTags) == 0x000650, "Member 'UHWGameplayEffectWidget::TrackedGameplayTags' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bCheckOwnedTags) == 0x000670, "Member 'UHWGameplayEffectWidget::bCheckOwnedTags' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bCheckBlockedAbilityTags) == 0x000671, "Member 'UHWGameplayEffectWidget::bCheckBlockedAbilityTags' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bCheckGameplayEffectTags) == 0x000672, "Member 'UHWGameplayEffectWidget::bCheckGameplayEffectTags' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bMatchTrackedTagChildren) == 0x000673, "Member 'UHWGameplayEffectWidget::bMatchTrackedTagChildren' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bMatchTagFromEffectChildren) == 0x000674, "Member 'UHWGameplayEffectWidget::bMatchTagFromEffectChildren' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bTrackRemoveInfo) == 0x000675, "Member 'UHWGameplayEffectWidget::bTrackRemoveInfo' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bTrackStackChange) == 0x000676, "Member 'UHWGameplayEffectWidget::bTrackStackChange' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bTrackTimeChange) == 0x000677, "Member 'UHWGameplayEffectWidget::bTrackTimeChange' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bTrackInhibitionChange) == 0x000678, "Member 'UHWGameplayEffectWidget::bTrackInhibitionChange' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, bTrackFromLocalActor) == 0x000679, "Member 'UHWGameplayEffectWidget::bTrackFromLocalActor' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, TrackedEffects) == 0x000680, "Member 'UHWGameplayEffectWidget::TrackedEffects' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectWidget, CurrentASC) == 0x000690, "Member 'UHWGameplayEffectWidget::CurrentASC' has a wrong offset!");

// Class HemingwayUI.HWHardCCFeedbackWidget
// 0x0000 (0x06A8 - 0x06A8)
class UHWHardCCFeedbackWidget : public UHWGameplayEffectWidget
{
public:
	void ToggleFeedback(bool bOn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHardCCFeedbackWidget">();
	}
	static class UHWHardCCFeedbackWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHardCCFeedbackWidget>();
	}
};
static_assert(alignof(UHWHardCCFeedbackWidget) == 0x000008, "Wrong alignment on UHWHardCCFeedbackWidget");
static_assert(sizeof(UHWHardCCFeedbackWidget) == 0x0006A8, "Wrong size on UHWHardCCFeedbackWidget");

// Class HemingwayUI.HWComboBoxStyle
// 0x1B40 (0x1B70 - 0x0030)
class UHWComboBoxStyle final : public UDataAsset
{
public:
	struct FComboBoxStyle                         WidgetStyle;                                       // 0x0030(0x0660)(Edit, NativeAccessSpecifierPublic)
	struct FTableRowStyle                         ItemStyle;                                         // 0x0690(0x0D50)(Edit, NativeAccessSpecifierPublic)
	struct FScrollBarStyle                        ScrollBarStyle;                                    // 0x13E0(0x0770)(Edit, NativeAccessSpecifierPublic)
	struct FMargin                                ContentPadding;                                    // 0x1B50(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWComboBoxEntry>           SelectionWidgetClass;                              // 0x1B60(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWComboBoxEntry>           OptionWidgetClass;                                 // 0x1B68(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWComboBoxStyle">();
	}
	static class UHWComboBoxStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWComboBoxStyle>();
	}
};
static_assert(alignof(UHWComboBoxStyle) == 0x000010, "Wrong alignment on UHWComboBoxStyle");
static_assert(sizeof(UHWComboBoxStyle) == 0x001B70, "Wrong size on UHWComboBoxStyle");
static_assert(offsetof(UHWComboBoxStyle, WidgetStyle) == 0x000030, "Member 'UHWComboBoxStyle::WidgetStyle' has a wrong offset!");
static_assert(offsetof(UHWComboBoxStyle, ItemStyle) == 0x000690, "Member 'UHWComboBoxStyle::ItemStyle' has a wrong offset!");
static_assert(offsetof(UHWComboBoxStyle, ScrollBarStyle) == 0x0013E0, "Member 'UHWComboBoxStyle::ScrollBarStyle' has a wrong offset!");
static_assert(offsetof(UHWComboBoxStyle, ContentPadding) == 0x001B50, "Member 'UHWComboBoxStyle::ContentPadding' has a wrong offset!");
static_assert(offsetof(UHWComboBoxStyle, SelectionWidgetClass) == 0x001B60, "Member 'UHWComboBoxStyle::SelectionWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWComboBoxStyle, OptionWidgetClass) == 0x001B68, "Member 'UHWComboBoxStyle::OptionWidgetClass' has a wrong offset!");

// Class HemingwayUI.HWHomeScreenPromotionRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWHomeScreenPromotionRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHomeScreenPromotionRedirector">();
	}
	static class UHWHomeScreenPromotionRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHomeScreenPromotionRedirector>();
	}
};
static_assert(alignof(UHWHomeScreenPromotionRedirector) == 0x000008, "Wrong alignment on UHWHomeScreenPromotionRedirector");
static_assert(sizeof(UHWHomeScreenPromotionRedirector) == 0x000028, "Wrong size on UHWHomeScreenPromotionRedirector");

// Class HemingwayUI.HWItemStoreCategorizedItemListWidget
// 0x0180 (0x0778 - 0x05F8)
class UHWItemStoreCategorizedItemListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x0600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentGoldValue;                                  // 0x0608(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHWItemStoreMajorCategory, struct FHWMajorCategoryItems> FilteredItems;                     // 0x0610(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EHWItemStoreMajorCategory                     CurrentMajorCategory;                              // 0x0660(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_661[0x3];                                      // 0x0661(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryRowDisplayCount;                           // 0x0664(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreItemFixedCategoryWidget> ItemCategoryClass;                        // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemFixedCategoryWidget*> CurrentCategoryList;                          // 0x0670(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsGodBuilderUsed;                                 // 0x0680(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWMajorCategoryItems                  PinnedBuildMajorCategoryItems;                     // 0x0688(0x0010)(Protected, NativeAccessSpecifierProtected)
	class FText                                   PinnedBuildLabel;                                  // 0x0698(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StartingBuildLabel;                                // 0x06B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   FinalBuildLabel;                                   // 0x06C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItemCache;                                // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NavigateSearchBinding;                             // 0x06E8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_728[0x8];                                      // 0x0728(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            OpenGodBuilderBinding;                             // 0x0730(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_770[0x8];                                      // 0x0770(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCategoryItems(class UHWItemStoreItemFixedCategoryWidget* Widget);
	TArray<class UItemInfoContainer*> GetSearchItemInfos(const class FText& SearchText);
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void OnBuildProfilesLoaded();
	void OnNavigateLeftAction();
	void OnNavigateRightAction();
	void OnNavigateSearchAction();
	void OnNavigateTab();
	void OnOpenGodBuilderAction();
	void OnSelectItem(const class UHWEquipmentItem* SelectedEquipmentItem);
	void Populate(const class UHWCharacterItem* CharacterItem);
	void PopulatePinnedBuildCategories();
	void UpdateFilterLabels(const class FText& LeftLabel, const class FText& CenterLabel, const class FText& RightLabel);
	void UpdateGold(const float GoldValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreCategorizedItemListWidget">();
	}
	static class UHWItemStoreCategorizedItemListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreCategorizedItemListWidget>();
	}
};
static_assert(alignof(UHWItemStoreCategorizedItemListWidget) == 0x000008, "Wrong alignment on UHWItemStoreCategorizedItemListWidget");
static_assert(sizeof(UHWItemStoreCategorizedItemListWidget) == 0x000778, "Wrong size on UHWItemStoreCategorizedItemListWidget");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, ItemStoreManager) == 0x000600, "Member 'UHWItemStoreCategorizedItemListWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, CurrentGoldValue) == 0x000608, "Member 'UHWItemStoreCategorizedItemListWidget::CurrentGoldValue' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, FilteredItems) == 0x000610, "Member 'UHWItemStoreCategorizedItemListWidget::FilteredItems' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, CurrentMajorCategory) == 0x000660, "Member 'UHWItemStoreCategorizedItemListWidget::CurrentMajorCategory' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, CategoryRowDisplayCount) == 0x000664, "Member 'UHWItemStoreCategorizedItemListWidget::CategoryRowDisplayCount' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, ItemCategoryClass) == 0x000668, "Member 'UHWItemStoreCategorizedItemListWidget::ItemCategoryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, CurrentCategoryList) == 0x000670, "Member 'UHWItemStoreCategorizedItemListWidget::CurrentCategoryList' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, bIsGodBuilderUsed) == 0x000680, "Member 'UHWItemStoreCategorizedItemListWidget::bIsGodBuilderUsed' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, PinnedBuildMajorCategoryItems) == 0x000688, "Member 'UHWItemStoreCategorizedItemListWidget::PinnedBuildMajorCategoryItems' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, PinnedBuildLabel) == 0x000698, "Member 'UHWItemStoreCategorizedItemListWidget::PinnedBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, StartingBuildLabel) == 0x0006B0, "Member 'UHWItemStoreCategorizedItemListWidget::StartingBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, FinalBuildLabel) == 0x0006C8, "Member 'UHWItemStoreCategorizedItemListWidget::FinalBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, CharacterItemCache) == 0x0006E0, "Member 'UHWItemStoreCategorizedItemListWidget::CharacterItemCache' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, NavigateSearchBinding) == 0x0006E8, "Member 'UHWItemStoreCategorizedItemListWidget::NavigateSearchBinding' has a wrong offset!");
static_assert(offsetof(UHWItemStoreCategorizedItemListWidget, OpenGodBuilderBinding) == 0x000730, "Member 'UHWItemStoreCategorizedItemListWidget::OpenGodBuilderBinding' has a wrong offset!");

// Class HemingwayUI.HWHomeScreenPromotionWidget
// 0x00D0 (0x06C8 - 0x05F8)
class UHWHomeScreenPromotionWidget : public UHWWidget
{
public:
	struct FHWUIActionBindingContainer            PreviousPanelActionContainer;                      // 0x05F8(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NextPanelActionContainer;                          // 0x0638(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            CloseActionContainer;                              // 0x0678(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B8[0x10];                                     // 0x06B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleNextPanelFired();
	void HandlePreviousPanelFired();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHomeScreenPromotionWidget">();
	}
	static class UHWHomeScreenPromotionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHomeScreenPromotionWidget>();
	}
};
static_assert(alignof(UHWHomeScreenPromotionWidget) == 0x000008, "Wrong alignment on UHWHomeScreenPromotionWidget");
static_assert(sizeof(UHWHomeScreenPromotionWidget) == 0x0006C8, "Wrong size on UHWHomeScreenPromotionWidget");
static_assert(offsetof(UHWHomeScreenPromotionWidget, PreviousPanelActionContainer) == 0x0005F8, "Member 'UHWHomeScreenPromotionWidget::PreviousPanelActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenPromotionWidget, NextPanelActionContainer) == 0x000638, "Member 'UHWHomeScreenPromotionWidget::NextPanelActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenPromotionWidget, CloseActionContainer) == 0x000678, "Member 'UHWHomeScreenPromotionWidget::CloseActionContainer' has a wrong offset!");

// Class HemingwayUI.HWSurrenderPipWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWSurrenderPipWidget : public UHWWidget
{
public:
	void DisplayVoteState(const EHWVoteState VoteState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSurrenderPipWidget">();
	}
	static class UHWSurrenderPipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSurrenderPipWidget>();
	}
};
static_assert(alignof(UHWSurrenderPipWidget) == 0x000008, "Wrong alignment on UHWSurrenderPipWidget");
static_assert(sizeof(UHWSurrenderPipWidget) == 0x0005F8, "Wrong size on UHWSurrenderPipWidget");

// Class HemingwayUI.HWHorizontalBox
// 0x0010 (0x01B8 - 0x01A8)
class UHWHorizontalBox final : public UHorizontalBox
{
public:
	EHWGridNavigationRule                         NavigationRule;                                    // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationRule                             RuleEdgeReached;                                   // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWUINavigationEdgeCustomBehavior             EdgeCustomBehavior;                                // 0x01AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AB[0xD];                                      // 0x01AB(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildNavigation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHorizontalBox">();
	}
	static class UHWHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHorizontalBox>();
	}
};
static_assert(alignof(UHWHorizontalBox) == 0x000008, "Wrong alignment on UHWHorizontalBox");
static_assert(sizeof(UHWHorizontalBox) == 0x0001B8, "Wrong size on UHWHorizontalBox");
static_assert(offsetof(UHWHorizontalBox, NavigationRule) == 0x0001A8, "Member 'UHWHorizontalBox::NavigationRule' has a wrong offset!");
static_assert(offsetof(UHWHorizontalBox, RuleEdgeReached) == 0x0001A9, "Member 'UHWHorizontalBox::RuleEdgeReached' has a wrong offset!");
static_assert(offsetof(UHWHorizontalBox, EdgeCustomBehavior) == 0x0001AA, "Member 'UHWHorizontalBox::EdgeCustomBehavior' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderBuildsListEntryWidget
// 0x01E0 (0x07D8 - 0x05F8)
class UHWGodBuilderBuildsListEntryWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild)> OnBuildEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild)> OnBuildEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild)> OnBuildEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UHWButton*                              HitTarget;                                         // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayAspectWidget*  AspectDisplay;                                     // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              PinButton;                                         // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              FavoriteButton;                                    // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWGodBuild                            GodBuild;                                          // 0x0648(0x0190)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void HandleEntryButtonUnhovered();
	void HandleFavoriteButtonSelected();
	void HandlePinButtonSelected();
	void HandleSetIsFavoriteBuildResult(bool bSuccess, const struct FGuid& InGodBuildId, bool bIsNowFavorite);
	void OnLocalPlayerPinnedBuildUpdated(const class UHWCharacterItem* GodItem, const struct FGuid& BuildGuid);
	void OnPinnedUpdated();
	void SetDisplayedGodBuild(const struct FHWGodBuild& InGodBuild);
	void UpdateEntryDisplay();

	const class UHWCharacterItem* GetGodItemForDisplayedBuild() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildsListEntryWidget">();
	}
	static class UHWGodBuilderBuildsListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildsListEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildsListEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildsListEntryWidget");
static_assert(sizeof(UHWGodBuilderBuildsListEntryWidget) == 0x0007D8, "Wrong size on UHWGodBuilderBuildsListEntryWidget");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, OnBuildEntryHovered) == 0x0005F8, "Member 'UHWGodBuilderBuildsListEntryWidget::OnBuildEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, OnBuildEntryUnhovered) == 0x000608, "Member 'UHWGodBuilderBuildsListEntryWidget::OnBuildEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, OnBuildEntrySelected) == 0x000618, "Member 'UHWGodBuilderBuildsListEntryWidget::OnBuildEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, HitTarget) == 0x000628, "Member 'UHWGodBuilderBuildsListEntryWidget::HitTarget' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, AspectDisplay) == 0x000630, "Member 'UHWGodBuilderBuildsListEntryWidget::AspectDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, PinButton) == 0x000638, "Member 'UHWGodBuilderBuildsListEntryWidget::PinButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, FavoriteButton) == 0x000640, "Member 'UHWGodBuilderBuildsListEntryWidget::FavoriteButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListEntryWidget, GodBuild) == 0x000648, "Member 'UHWGodBuilderBuildsListEntryWidget::GodBuild' has a wrong offset!");

// Class HemingwayUI.HWTooltipableEquipmentWidget
// 0x0118 (0x0750 - 0x0638)
class UHWTooltipableEquipmentWidget : public UHWCharacterWidget
{
public:
	struct FHWUIActionBindingContainer            GPActionBindingContainer;                          // 0x0638(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FUIContextCalloutDisplay               KBMToggleAbilityContextCalloutDisplay;             // 0x0678(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ExpandText;                                        // 0x06C0(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   CollapseText;                                      // 0x06D8(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FUIContextCalloutDisplay               NavigationContextCalloutDisplay;                   // 0x06F0(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAllowMouseToggle;                                 // 0x0738(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_739[0x3];                                      // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWEquipmentInstance>    EquipmentInstanceCache;                            // 0x073C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InventorySlotType;                                 // 0x0744(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideTooltip();
	void ShowTooltip(class UWidget* ReferenceWidget, EHWTooltipAxis Axis);
	void ToggleTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipableEquipmentWidget">();
	}
	static class UHWTooltipableEquipmentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipableEquipmentWidget>();
	}
};
static_assert(alignof(UHWTooltipableEquipmentWidget) == 0x000008, "Wrong alignment on UHWTooltipableEquipmentWidget");
static_assert(sizeof(UHWTooltipableEquipmentWidget) == 0x000750, "Wrong size on UHWTooltipableEquipmentWidget");
static_assert(offsetof(UHWTooltipableEquipmentWidget, GPActionBindingContainer) == 0x000638, "Member 'UHWTooltipableEquipmentWidget::GPActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, KBMToggleAbilityContextCalloutDisplay) == 0x000678, "Member 'UHWTooltipableEquipmentWidget::KBMToggleAbilityContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, ExpandText) == 0x0006C0, "Member 'UHWTooltipableEquipmentWidget::ExpandText' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, CollapseText) == 0x0006D8, "Member 'UHWTooltipableEquipmentWidget::CollapseText' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, NavigationContextCalloutDisplay) == 0x0006F0, "Member 'UHWTooltipableEquipmentWidget::NavigationContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, bAllowMouseToggle) == 0x000738, "Member 'UHWTooltipableEquipmentWidget::bAllowMouseToggle' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, EquipmentInstanceCache) == 0x00073C, "Member 'UHWTooltipableEquipmentWidget::EquipmentInstanceCache' has a wrong offset!");
static_assert(offsetof(UHWTooltipableEquipmentWidget, InventorySlotType) == 0x000744, "Member 'UHWTooltipableEquipmentWidget::InventorySlotType' has a wrong offset!");

// Class HemingwayUI.HWInhandEquipmentWidget
// 0x0050 (0x07A0 - 0x0750)
class UHWInhandEquipmentWidget : public UHWTooltipableEquipmentWidget
{
public:
	TSoftObjectPtr<class UTexture2D>              PhysicalAttackIcon;                                // 0x0750(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              MagicalAttackIcon;                                 // 0x0778(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateImage(const TSoftObjectPtr<class UTexture2D>& Icon, const struct FGameplayTag& AttackTypeTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInhandEquipmentWidget">();
	}
	static class UHWInhandEquipmentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInhandEquipmentWidget>();
	}
};
static_assert(alignof(UHWInhandEquipmentWidget) == 0x000008, "Wrong alignment on UHWInhandEquipmentWidget");
static_assert(sizeof(UHWInhandEquipmentWidget) == 0x0007A0, "Wrong size on UHWInhandEquipmentWidget");
static_assert(offsetof(UHWInhandEquipmentWidget, PhysicalAttackIcon) == 0x000750, "Member 'UHWInhandEquipmentWidget::PhysicalAttackIcon' has a wrong offset!");
static_assert(offsetof(UHWInhandEquipmentWidget, MagicalAttackIcon) == 0x000778, "Member 'UHWInhandEquipmentWidget::MagicalAttackIcon' has a wrong offset!");

// Class HemingwayUI.HWInteractionPromptWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWInteractionPromptWidget : public UHWWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInteractionPromptWidget">();
	}
	static class UHWInteractionPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInteractionPromptWidget>();
	}
};
static_assert(alignof(UHWInteractionPromptWidget) == 0x000008, "Wrong alignment on UHWInteractionPromptWidget");
static_assert(sizeof(UHWInteractionPromptWidget) == 0x0005F8, "Wrong size on UHWInteractionPromptWidget");

// Class HemingwayUI.HWOverlay
// 0x0000 (0x01A8 - 0x01A8)
class UHWOverlay : public UOverlay
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWOverlay">();
	}
	static class UHWOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWOverlay>();
	}
};
static_assert(alignof(UHWOverlay) == 0x000008, "Wrong alignment on UHWOverlay");
static_assert(sizeof(UHWOverlay) == 0x0001A8, "Wrong size on UHWOverlay");

// Class HemingwayUI.HWMatchHistoryScreenEntryWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWMatchHistoryScreenEntryWidget : public UHWWidget
{
public:
	struct FHWPlayerMatchData                     CachedMatchInfo;                                   // 0x05F8(0x0078)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           GameModeTag;                                       // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UHWMatchHistoryScreenEntryWidget* EntryWidget, const struct FHWPlayerMatchData& MatchData)> OnMatchEntrySelected; // 0x0678(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	struct FHWPlayerMatchData GetMatchInfo();
	void HandleEntrySelected();
	void SetMatchInfo(const struct FHWPlayerMatchData& MatchInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMatchHistoryScreenEntryWidget">();
	}
	static class UHWMatchHistoryScreenEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMatchHistoryScreenEntryWidget>();
	}
};
static_assert(alignof(UHWMatchHistoryScreenEntryWidget) == 0x000008, "Wrong alignment on UHWMatchHistoryScreenEntryWidget");
static_assert(sizeof(UHWMatchHistoryScreenEntryWidget) == 0x000688, "Wrong size on UHWMatchHistoryScreenEntryWidget");
static_assert(offsetof(UHWMatchHistoryScreenEntryWidget, CachedMatchInfo) == 0x0005F8, "Member 'UHWMatchHistoryScreenEntryWidget::CachedMatchInfo' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenEntryWidget, GameModeTag) == 0x000670, "Member 'UHWMatchHistoryScreenEntryWidget::GameModeTag' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenEntryWidget, OnMatchEntrySelected) == 0x000678, "Member 'UHWMatchHistoryScreenEntryWidget::OnMatchEntrySelected' has a wrong offset!");

// Class HemingwayUI.HWMatchHistoryScreenWidget
// 0x0118 (0x0710 - 0x05F8)
class UHWMatchHistoryScreenWidget : public UHWWidget
{
public:
	struct FDateTime                              LastVisitedTimestamp;                              // 0x05F8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OffscreenPollTimer;                                // 0x0600(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PollingTimerHandle;                                // 0x0608(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                EntryWidgetMargin;                                 // 0x0610(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWMatchHistoryScreenEntryWidget> EntryWidgetClass;                            // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MatchPlayerWithMatch>    CachedMatchResults;                                // 0x0628(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         MatchEntryContainer;                               // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   SupportedGameModes;                                // 0x0640(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         SupportedTimespans;                                // 0x0650(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWSupportedTimespans                         StartingTimespan;                                  // 0x0651(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_652[0x2];                                      // 0x0652(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurrentGamemodeInfoTag;                            // 0x0654(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CurrentTimespan;                                   // 0x0660(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentGamemodeIndex;                              // 0x0668(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CurrentSupportedTimespanBit;                       // 0x066C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_66D[0x3];                                      // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            CycleGamemodeAction;                               // 0x0670(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            CycleTimespanAction;                               // 0x06B8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEndOfMatchLobbyDetailsWidget*        EndOfMatchDetails;                                 // 0x0700(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWMatchHistoryScreenEntryWidget*       CurrentlySelectedEntry;                            // 0x0708(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UHWMatchHistoryScreenEntryWidget* CreateMatchEntryWidget(const struct FRHAPI_MatchPlayerWithMatch& MatchHistoryInfo);
	void FilterMatchHistory();
	void HandleCycleGamemodeAction();
	void HandleCycleTimespanAction();
	void HandlePlayerMatchesUpdated(class URH_PlayerInfoSubobject* PlayerMatches);
	void OnGamemodeChanged(const struct FGameplayTag& GameModeInfoTag);
	void OnMatchDetailsLoaded();
	void OnMatchEntrySelected(class UHWMatchHistoryScreenEntryWidget* EntryWidget, const struct FHWPlayerMatchData& MatchInfo);
	void OnSelectedMatchLoaded(bool bSuccess, const struct FRHAPI_MatchWithPlayers& SearchResult, const struct FRH_ErrorInfo& ErrorInfo);
	void OnTimespanChanged(EHWSupportedTimespans NewTimespan);
	void PopulateMatchDetailsWithPlayer(const struct FRHAPI_MatchPlayerResponse& MatchPlayerResponse, const struct FTimespan& Duration);
	void SetIsLoading(bool bIsLoading);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMatchHistoryScreenWidget">();
	}
	static class UHWMatchHistoryScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMatchHistoryScreenWidget>();
	}
};
static_assert(alignof(UHWMatchHistoryScreenWidget) == 0x000008, "Wrong alignment on UHWMatchHistoryScreenWidget");
static_assert(sizeof(UHWMatchHistoryScreenWidget) == 0x000710, "Wrong size on UHWMatchHistoryScreenWidget");
static_assert(offsetof(UHWMatchHistoryScreenWidget, LastVisitedTimestamp) == 0x0005F8, "Member 'UHWMatchHistoryScreenWidget::LastVisitedTimestamp' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, OffscreenPollTimer) == 0x000600, "Member 'UHWMatchHistoryScreenWidget::OffscreenPollTimer' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, PollingTimerHandle) == 0x000608, "Member 'UHWMatchHistoryScreenWidget::PollingTimerHandle' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, EntryWidgetMargin) == 0x000610, "Member 'UHWMatchHistoryScreenWidget::EntryWidgetMargin' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, EntryWidgetClass) == 0x000620, "Member 'UHWMatchHistoryScreenWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CachedMatchResults) == 0x000628, "Member 'UHWMatchHistoryScreenWidget::CachedMatchResults' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, MatchEntryContainer) == 0x000638, "Member 'UHWMatchHistoryScreenWidget::MatchEntryContainer' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, SupportedGameModes) == 0x000640, "Member 'UHWMatchHistoryScreenWidget::SupportedGameModes' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, SupportedTimespans) == 0x000650, "Member 'UHWMatchHistoryScreenWidget::SupportedTimespans' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, StartingTimespan) == 0x000651, "Member 'UHWMatchHistoryScreenWidget::StartingTimespan' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CurrentGamemodeInfoTag) == 0x000654, "Member 'UHWMatchHistoryScreenWidget::CurrentGamemodeInfoTag' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CurrentTimespan) == 0x000660, "Member 'UHWMatchHistoryScreenWidget::CurrentTimespan' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CurrentGamemodeIndex) == 0x000668, "Member 'UHWMatchHistoryScreenWidget::CurrentGamemodeIndex' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CurrentSupportedTimespanBit) == 0x00066C, "Member 'UHWMatchHistoryScreenWidget::CurrentSupportedTimespanBit' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CycleGamemodeAction) == 0x000670, "Member 'UHWMatchHistoryScreenWidget::CycleGamemodeAction' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CycleTimespanAction) == 0x0006B8, "Member 'UHWMatchHistoryScreenWidget::CycleTimespanAction' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, EndOfMatchDetails) == 0x000700, "Member 'UHWMatchHistoryScreenWidget::EndOfMatchDetails' has a wrong offset!");
static_assert(offsetof(UHWMatchHistoryScreenWidget, CurrentlySelectedEntry) == 0x000708, "Member 'UHWMatchHistoryScreenWidget::CurrentlySelectedEntry' has a wrong offset!");

// Class HemingwayUI.HWCallToActionDisplayWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWCallToActionDisplayWidget : public UHWWidget
{
public:
	EHWCallToActionListenType                     CurrentListenType;                                 // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x1F];                                     // 0x05F9(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearCTAListener();
	void CTAStateUpdated(bool bIsCTAActive);
	void HandleCTAActiveChildrenCountChanged(int32 ActiveChildrenCount);
	void HandleCTASeenAmountChanged(int32 InventoryAmount, int32 SeenAmount);
	void HandleCTAStateChanged(bool bIsCTAActive);
	void ListenToCTAPath(const TArray<class FName>& InCTAPath, EHWCallToActionListenType ListenType);
	void ListenToCTAPathByItem(const class UHWInventoryItem* InventoryItem, EHWCallToActionListenType ListenType, EHWCallToActionAffixPath Preffix, EHWCallToActionAffixPath Suffix, const class UHWCharacterItem* CharacterContext);
	void ListenToCTAPathByItemPtr(const TSoftObjectPtr<class UHWInventoryItem> InventoryItemPtr, EHWCallToActionListenType ListenType, EHWCallToActionAffixPath Preffix, EHWCallToActionAffixPath Suffix, const class UHWCharacterItem* CharacterContext);
	void ListenToCTAPathByLootId(const struct FRH_LootId& LootId, EHWCallToActionListenType ListenType, EHWCallToActionAffixPath Preffix, EHWCallToActionAffixPath Suffix);
	void SetCTAAndChildrenSeen(ERH_INPUT_STATE RequiredInputState);
	void SetCTASeen(int32 SeenAmount, ERH_INPUT_STATE RequiredInputState);
	void SetIsCTAActive(bool bIsCTAActive);

	const TArray<class FName> GetCurrentCTAPath() const;
	bool IsCTAActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCallToActionDisplayWidget">();
	}
	static class UHWCallToActionDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCallToActionDisplayWidget>();
	}
};
static_assert(alignof(UHWCallToActionDisplayWidget) == 0x000008, "Wrong alignment on UHWCallToActionDisplayWidget");
static_assert(sizeof(UHWCallToActionDisplayWidget) == 0x000618, "Wrong size on UHWCallToActionDisplayWidget");
static_assert(offsetof(UHWCallToActionDisplayWidget, CurrentListenType) == 0x0005F8, "Member 'UHWCallToActionDisplayWidget::CurrentListenType' has a wrong offset!");

// Class HemingwayUI.HWWhatsNewViewRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWWhatsNewViewRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWhatsNewViewRedirector">();
	}
	static class UHWWhatsNewViewRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWhatsNewViewRedirector>();
	}
};
static_assert(alignof(UHWWhatsNewViewRedirector) == 0x000008, "Wrong alignment on UHWWhatsNewViewRedirector");
static_assert(sizeof(UHWWhatsNewViewRedirector) == 0x000028, "Wrong size on UHWWhatsNewViewRedirector");

// Class HemingwayUI.HWEscMenuWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWEscMenuWidget : public UHWWidget
{
public:
	class FText                                   ExitGameWarningPopupHeader;                        // 0x05F8(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   ExitGameWarningPopupDescription;                   // 0x0610(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void HandleQuitExitClicked();
	void MoveToView(const struct FGameplayTag& TargetViewName, bool bCloseEscMenu);
	void OnExitAccepted();

	bool IsMatchmadeSession() const;
	bool IsStandaloneSession() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEscMenuWidget">();
	}
	static class UHWEscMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEscMenuWidget>();
	}
};
static_assert(alignof(UHWEscMenuWidget) == 0x000008, "Wrong alignment on UHWEscMenuWidget");
static_assert(sizeof(UHWEscMenuWidget) == 0x000628, "Wrong size on UHWEscMenuWidget");
static_assert(offsetof(UHWEscMenuWidget, ExitGameWarningPopupHeader) == 0x0005F8, "Member 'UHWEscMenuWidget::ExitGameWarningPopupHeader' has a wrong offset!");
static_assert(offsetof(UHWEscMenuWidget, ExitGameWarningPopupDescription) == 0x000610, "Member 'UHWEscMenuWidget::ExitGameWarningPopupDescription' has a wrong offset!");

// Class HemingwayUI.HWNewsRotatorWidget
// 0x00F0 (0x06E8 - 0x05F8)
class UHWNewsRotatorWidget : public UHWWidget
{
public:
	class FString                                 JsonSection;                                       // 0x05F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimePerSection;                                    // 0x0608(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           StoreViewTag;                                      // 0x060C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PreviousPanelActionContainer;                      // 0x0618(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NextPanelActionContainer;                          // 0x0658(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            CloseActionContainer;                              // 0x0698(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D8[0x10];                                     // 0x06D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BLUEPRINT_CheckShouldShowPanels(const TArray<class URHNewsRotatorData*>& Panels, const TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)>& Delegate);
	void BLUEPRINT_GetPanelDataAsync(const TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)>& Delegate, bool bUnseenOnly);
	class FText GetMainHeaderText();
	void HandleNextPanelFired();
	void HandlePreviousPanelFired();
	void OnJsonChanged(const class FString& JsonName);
	void OnNewsPanelClicked(class URHNewsRotatorData* Panel);
	void SaveSeenPanels();
	void SetPanelAsSeen(class URHNewsRotatorData* Panel);

	class URHNewsSubsystem* GetNewsSubsystem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWNewsRotatorWidget">();
	}
	static class UHWNewsRotatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWNewsRotatorWidget>();
	}
};
static_assert(alignof(UHWNewsRotatorWidget) == 0x000008, "Wrong alignment on UHWNewsRotatorWidget");
static_assert(sizeof(UHWNewsRotatorWidget) == 0x0006E8, "Wrong size on UHWNewsRotatorWidget");
static_assert(offsetof(UHWNewsRotatorWidget, JsonSection) == 0x0005F8, "Member 'UHWNewsRotatorWidget::JsonSection' has a wrong offset!");
static_assert(offsetof(UHWNewsRotatorWidget, TimePerSection) == 0x000608, "Member 'UHWNewsRotatorWidget::TimePerSection' has a wrong offset!");
static_assert(offsetof(UHWNewsRotatorWidget, StoreViewTag) == 0x00060C, "Member 'UHWNewsRotatorWidget::StoreViewTag' has a wrong offset!");
static_assert(offsetof(UHWNewsRotatorWidget, PreviousPanelActionContainer) == 0x000618, "Member 'UHWNewsRotatorWidget::PreviousPanelActionContainer' has a wrong offset!");
static_assert(offsetof(UHWNewsRotatorWidget, NextPanelActionContainer) == 0x000658, "Member 'UHWNewsRotatorWidget::NextPanelActionContainer' has a wrong offset!");
static_assert(offsetof(UHWNewsRotatorWidget, CloseActionContainer) == 0x000698, "Member 'UHWNewsRotatorWidget::CloseActionContainer' has a wrong offset!");

// Class HemingwayUI.HWObjectiveHealthbarWidget
// 0x0000 (0x0638 - 0x0638)
class UHWObjectiveHealthbarWidget : public UHWCharacterWidget
{
public:
	void SetCharacterDisplay(const class AHWCharacter_Base* Character, const class UHWCharacterItem* CharacterItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWObjectiveHealthbarWidget">();
	}
	static class UHWObjectiveHealthbarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWObjectiveHealthbarWidget>();
	}
};
static_assert(alignof(UHWObjectiveHealthbarWidget) == 0x000008, "Wrong alignment on UHWObjectiveHealthbarWidget");
static_assert(sizeof(UHWObjectiveHealthbarWidget) == 0x000638, "Wrong size on UHWObjectiveHealthbarWidget");

// Class HemingwayUI.HWDisplayInfoEffectWidget
// 0x0000 (0x0638 - 0x0638)
class UHWDisplayInfoEffectWidget final : public UHWCharacterWidget
{
public:
	void OnDisplayInfoAdded(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoRemoved(const struct FHWDisplayInfo& InDisplayInfo);
	void RemoveEffectWidgetFromView();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDisplayInfoEffectWidget">();
	}
	static class UHWDisplayInfoEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDisplayInfoEffectWidget>();
	}
};
static_assert(alignof(UHWDisplayInfoEffectWidget) == 0x000008, "Wrong alignment on UHWDisplayInfoEffectWidget");
static_assert(sizeof(UHWDisplayInfoEffectWidget) == 0x000638, "Wrong size on UHWDisplayInfoEffectWidget");

// Class HemingwayUI.HWPassiveMeterPip
// 0x0008 (0x0600 - 0x05F8)
class UHWPassiveMeterPip final : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPipFilled(bool bInFilled);
	void SetPipIndex(int32 Index_0);

	bool GetIsFilled() const;
	int32 GetPipIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPassiveMeterPip">();
	}
	static class UHWPassiveMeterPip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPassiveMeterPip>();
	}
};
static_assert(alignof(UHWPassiveMeterPip) == 0x000008, "Wrong alignment on UHWPassiveMeterPip");
static_assert(sizeof(UHWPassiveMeterPip) == 0x000600, "Wrong size on UHWPassiveMeterPip");

// Class HemingwayUI.HWGodBuilderBuildEditorWidget
// 0x0300 (0x08F8 - 0x05F8)
class UHWGodBuilderBuildEditorWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0xA0];                                     // 0x05F8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            GodBuild;                                          // 0x0698(0x0190)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         VisibleEntries;                                    // 0x0828(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEntriesExpanded;                                  // 0x082C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_82D[0x3];                                      // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x0830(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodBuilderBuildDisplayEntryWidget> EntryWidgetClass;                        // 0x0838(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              RemoveEntryButton;                                 // 0x0840(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              ExpandButton;                                      // 0x0848(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               FavoriteIcon;                                      // 0x0850(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           TitleText;                                         // 0x0858(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEditableTextBox*                     EditableTitleText;                                 // 0x0860(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              TitleTextButton;                                   // 0x0868(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           DescText;                                          // 0x0870(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEditableTextBox*                     EditableDescText;                                  // 0x0878(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              DescTextButton;                                    // 0x0880(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWPlayerNameDisplayWidget*             PlayerNameDisplay;                                 // 0x0888(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryWidget*   FinalBuildEntry;                                   // 0x0890(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryWidget*   StartingItemsEntry;                                // 0x0898(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryWidget*   HoveredBuildEntry;                                 // 0x08A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryItemWidget* HoveredItemEntry;                                // 0x08A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryItemWidget* SelectedItemEntry;                               // 0x08B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilitiesOrderWidget*      AbilitiesOrder;                                    // 0x08B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilitiesOrderEntryWidget* SelectedAbilitiesOrderEntry;                       // 0x08C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayAspectWidget*  AspectDisplay;                                     // 0x08C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              RoleButton;                                        // 0x08D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              ModeButton;                                        // 0x08D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWScrollBox*                           EntryScrollBox;                                    // 0x08E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         EntryBox;                                          // 0x08E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              AddEntryButton;                                    // 0x08F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddBuildEntry(const struct FHWGodBuildEntry& InBuildEntry);
	void ClearSelectedWidgets();
	void HandleAbilityOrderButtonClicked(class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget);
	void HandleAbilityOrderIconHovered(int32 AbilityIndex);
	void HandleAbilityOrderIconUnovered(int32 AbilityIndex);
	void HandleAddEntryButtonClicked();
	void HandleAspectButtonClicked();
	void HandleBuildEntryHovered(class UHWGodBuilderBuildDisplayEntryWidget* EntryWidget);
	void HandleBuildEntryRemoved(const class UHWGodBuilderBuildDisplayEntryWidget* EntryWidget, const struct FHWGodBuildEntry& InGodBuildEntry);
	void HandleBuildItemEntryHovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildItemEntryRightClicked(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildItemEntrySelected(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildItemEntryUnhovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleDescTextButtonClicked();
	void HandleDescTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void HandleEntryScrollBoxScrolled(float CurrentOffset);
	void HandleModeButtonClicked();
	void HandleRemoveEntryButtonClicked();
	void HandleRoleButtonClicked();
	void HandleTitleTextButtonClicked();
	void HandleTitleTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void SetBuildMode(const struct FGameplayTag& InBuildMode);
	void SetBuildRole(ECharacterRole InBuildRole);
	void SetEntriesExpanded(bool bInIsExpanded);
	void UpdateBuildDisplay();

	bool GetEntriesExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildEditorWidget">();
	}
	static class UHWGodBuilderBuildEditorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildEditorWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildEditorWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildEditorWidget");
static_assert(sizeof(UHWGodBuilderBuildEditorWidget) == 0x0008F8, "Wrong size on UHWGodBuilderBuildEditorWidget");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, GodBuild) == 0x000698, "Member 'UHWGodBuilderBuildEditorWidget::GodBuild' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, VisibleEntries) == 0x000828, "Member 'UHWGodBuilderBuildEditorWidget::VisibleEntries' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, bEntriesExpanded) == 0x00082C, "Member 'UHWGodBuilderBuildEditorWidget::bEntriesExpanded' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, GodItem) == 0x000830, "Member 'UHWGodBuilderBuildEditorWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, EntryWidgetClass) == 0x000838, "Member 'UHWGodBuilderBuildEditorWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, RemoveEntryButton) == 0x000840, "Member 'UHWGodBuilderBuildEditorWidget::RemoveEntryButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, ExpandButton) == 0x000848, "Member 'UHWGodBuilderBuildEditorWidget::ExpandButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, FavoriteIcon) == 0x000850, "Member 'UHWGodBuilderBuildEditorWidget::FavoriteIcon' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, TitleText) == 0x000858, "Member 'UHWGodBuilderBuildEditorWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, EditableTitleText) == 0x000860, "Member 'UHWGodBuilderBuildEditorWidget::EditableTitleText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, TitleTextButton) == 0x000868, "Member 'UHWGodBuilderBuildEditorWidget::TitleTextButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, DescText) == 0x000870, "Member 'UHWGodBuilderBuildEditorWidget::DescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, EditableDescText) == 0x000878, "Member 'UHWGodBuilderBuildEditorWidget::EditableDescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, DescTextButton) == 0x000880, "Member 'UHWGodBuilderBuildEditorWidget::DescTextButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, PlayerNameDisplay) == 0x000888, "Member 'UHWGodBuilderBuildEditorWidget::PlayerNameDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, FinalBuildEntry) == 0x000890, "Member 'UHWGodBuilderBuildEditorWidget::FinalBuildEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, StartingItemsEntry) == 0x000898, "Member 'UHWGodBuilderBuildEditorWidget::StartingItemsEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, HoveredBuildEntry) == 0x0008A0, "Member 'UHWGodBuilderBuildEditorWidget::HoveredBuildEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, HoveredItemEntry) == 0x0008A8, "Member 'UHWGodBuilderBuildEditorWidget::HoveredItemEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, SelectedItemEntry) == 0x0008B0, "Member 'UHWGodBuilderBuildEditorWidget::SelectedItemEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, AbilitiesOrder) == 0x0008B8, "Member 'UHWGodBuilderBuildEditorWidget::AbilitiesOrder' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, SelectedAbilitiesOrderEntry) == 0x0008C0, "Member 'UHWGodBuilderBuildEditorWidget::SelectedAbilitiesOrderEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, AspectDisplay) == 0x0008C8, "Member 'UHWGodBuilderBuildEditorWidget::AspectDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, RoleButton) == 0x0008D0, "Member 'UHWGodBuilderBuildEditorWidget::RoleButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, ModeButton) == 0x0008D8, "Member 'UHWGodBuilderBuildEditorWidget::ModeButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, EntryScrollBox) == 0x0008E0, "Member 'UHWGodBuilderBuildEditorWidget::EntryScrollBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, EntryBox) == 0x0008E8, "Member 'UHWGodBuilderBuildEditorWidget::EntryBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildEditorWidget, AddEntryButton) == 0x0008F0, "Member 'UHWGodBuilderBuildEditorWidget::AddEntryButton' has a wrong offset!");

// Class HemingwayUI.HWPersistentBuffBar
// 0x0030 (0x06D8 - 0x06A8)
class UHWPersistentBuffBar : public UHWGameplayEffectWidget
{
public:
	TArray<class UHWBuffWidget*>                  BuffWidgets;                                       // 0x06A8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    BuffWidgetContainer;                               // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWBuffWidgetType                             BuffWidgetType;                                    // 0x06C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumRows;                                           // 0x06C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumCols;                                           // 0x06C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWHorizontalAlignment                        HorizontalAlignment;                               // 0x06CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWVerticalAlignment                          VerticalAlignment;                                 // 0x06CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSortByTimeRemaining;                              // 0x06CE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6CF[0x1];                                      // 0x06CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWBuffWidget>              BuffWidgetClass;                                   // 0x06D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void RefreshBuffs();
	void RemoveBuff(const struct FActiveGameplayEffect& ActiveEffect);
	void SetHorizontalAlignment(EHWHorizontalAlignment InAlignment);
	void SetNumColumns(int32 InNumColumns);
	void SetNumRows(int32 InNumRows);
	void SetVerticalAlignment(EHWVerticalAlignment InAlignment);

	class UHWBuffWidget* GetVisibleBuffWidget(const struct FActiveGameplayEffect& ActiveEffect, int32* OutWidgetIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPersistentBuffBar">();
	}
	static class UHWPersistentBuffBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPersistentBuffBar>();
	}
};
static_assert(alignof(UHWPersistentBuffBar) == 0x000008, "Wrong alignment on UHWPersistentBuffBar");
static_assert(sizeof(UHWPersistentBuffBar) == 0x0006D8, "Wrong size on UHWPersistentBuffBar");
static_assert(offsetof(UHWPersistentBuffBar, BuffWidgets) == 0x0006A8, "Member 'UHWPersistentBuffBar::BuffWidgets' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, BuffWidgetContainer) == 0x0006B8, "Member 'UHWPersistentBuffBar::BuffWidgetContainer' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, BuffWidgetType) == 0x0006C0, "Member 'UHWPersistentBuffBar::BuffWidgetType' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, NumRows) == 0x0006C4, "Member 'UHWPersistentBuffBar::NumRows' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, NumCols) == 0x0006C8, "Member 'UHWPersistentBuffBar::NumCols' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, HorizontalAlignment) == 0x0006CC, "Member 'UHWPersistentBuffBar::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, VerticalAlignment) == 0x0006CD, "Member 'UHWPersistentBuffBar::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, bSortByTimeRemaining) == 0x0006CE, "Member 'UHWPersistentBuffBar::bSortByTimeRemaining' has a wrong offset!");
static_assert(offsetof(UHWPersistentBuffBar, BuffWidgetClass) == 0x0006D0, "Member 'UHWPersistentBuffBar::BuffWidgetClass' has a wrong offset!");

// Class HemingwayUI.HWMinimapWidgetConfig
// 0x0058 (0x0088 - 0x0030)
class UHWMinimapWidgetConfig final : public UDataAsset
{
public:
	bool                                          bDisplayFogOfWar;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FHWMinimapTextureConfig> LevelTextureConfigs;                         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapWidgetConfig">();
	}
	static class UHWMinimapWidgetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapWidgetConfig>();
	}
};
static_assert(alignof(UHWMinimapWidgetConfig) == 0x000008, "Wrong alignment on UHWMinimapWidgetConfig");
static_assert(sizeof(UHWMinimapWidgetConfig) == 0x000088, "Wrong size on UHWMinimapWidgetConfig");
static_assert(offsetof(UHWMinimapWidgetConfig, bDisplayFogOfWar) == 0x000030, "Member 'UHWMinimapWidgetConfig::bDisplayFogOfWar' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidgetConfig, LevelTextureConfigs) == 0x000038, "Member 'UHWMinimapWidgetConfig::LevelTextureConfigs' has a wrong offset!");

// Class HemingwayUI.HWQueueTimerWidget
// 0x0000 (0x05C8 - 0x05C8)
class UHWQueueTimerWidget : public URHQueueTimerWidgetBase
{
public:
	void OnBackfillInfoUpdated(const struct FHWBackfillQueueInfo& QueueInfo);

	bool GetSelectedQueueDetails(struct FRHQueueDetails* OutQueueDetails) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWQueueTimerWidget">();
	}
	static class UHWQueueTimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWQueueTimerWidget>();
	}
};
static_assert(alignof(UHWQueueTimerWidget) == 0x000008, "Wrong alignment on UHWQueueTimerWidget");
static_assert(sizeof(UHWQueueTimerWidget) == 0x0005C8, "Wrong size on UHWQueueTimerWidget");

// Class HemingwayUI.HWGameplayEffectBlockedWidget
// 0x0070 (0x0718 - 0x06A8)
class UHWGameplayEffectBlockedWidget : public UHWGameplayEffectWidget
{
public:
	struct FGameplayTagContainer                  BlockedReasonsToConsider;                          // 0x06A8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	EHWBlockedReasonSortType                      SortType;                                          // 0x06C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurrentBlockedReason;                              // 0x06CC(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D4[0x14];                                     // 0x06D4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  EquipmentBlockedReasonsToConsider;                 // 0x06E8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CurrentEquipmentBlockedReason;                     // 0x0708(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentInstance>    EquipmentInstanceCache;                            // 0x0710(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BlockedChanged(const struct FGameplayTag& OldBlockedReason, const struct FGameplayTag& NewBlockedReason);
	void BlockedFinished(const struct FGameplayTag& OldBlockedReason);
	void BlockedStarted(const struct FGameplayTag& BlockedReason);
	void OnTrackingEquipmentChanged(class UHWEquipmentInstance* EquipmentChanged);

	const struct FGameplayTag GetCurrentBlockedReason() const;
	bool IsBlockedActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayEffectBlockedWidget">();
	}
	static class UHWGameplayEffectBlockedWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayEffectBlockedWidget>();
	}
};
static_assert(alignof(UHWGameplayEffectBlockedWidget) == 0x000008, "Wrong alignment on UHWGameplayEffectBlockedWidget");
static_assert(sizeof(UHWGameplayEffectBlockedWidget) == 0x000718, "Wrong size on UHWGameplayEffectBlockedWidget");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, BlockedReasonsToConsider) == 0x0006A8, "Member 'UHWGameplayEffectBlockedWidget::BlockedReasonsToConsider' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, SortType) == 0x0006C8, "Member 'UHWGameplayEffectBlockedWidget::SortType' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, CurrentBlockedReason) == 0x0006CC, "Member 'UHWGameplayEffectBlockedWidget::CurrentBlockedReason' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, EquipmentBlockedReasonsToConsider) == 0x0006E8, "Member 'UHWGameplayEffectBlockedWidget::EquipmentBlockedReasonsToConsider' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, CurrentEquipmentBlockedReason) == 0x000708, "Member 'UHWGameplayEffectBlockedWidget::CurrentEquipmentBlockedReason' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockedWidget, EquipmentInstanceCache) == 0x000710, "Member 'UHWGameplayEffectBlockedWidget::EquipmentInstanceCache' has a wrong offset!");

// Class HemingwayUI.HWQuickPlayWidget
// 0x0008 (0x05E0 - 0x05D8)
class UHWQuickPlayWidget : public URHQuickPlayWidget
{
public:
	bool                                          bAreRankedRestrictionsEnabled;                     // 0x05D8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LeaveFoundMatch();
	void OnBackfillInfoUpdated(const struct FHWBackfillQueueInfo& BackfillQueueInfo);

	int32 GetHighestAllowedSR() const;
	int32 GetMaxSRDifference() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWQuickPlayWidget">();
	}
	static class UHWQuickPlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWQuickPlayWidget>();
	}
};
static_assert(alignof(UHWQuickPlayWidget) == 0x000008, "Wrong alignment on UHWQuickPlayWidget");
static_assert(sizeof(UHWQuickPlayWidget) == 0x0005E0, "Wrong size on UHWQuickPlayWidget");
static_assert(offsetof(UHWQuickPlayWidget, bAreRankedRestrictionsEnabled) == 0x0005D8, "Member 'UHWQuickPlayWidget::bAreRankedRestrictionsEnabled' has a wrong offset!");

// Class HemingwayUI.HWResourceManager
// 0x0080 (0x06B8 - 0x0638)
class UHWResourceManager : public UHWCharacterWidget
{
public:
	struct FGameplayTag                           DefaultResourceTag;                                // 0x0638(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ResourceType;                                      // 0x0640(0x0008)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             AttributeWidgetContainer;                          // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, TSubclassOf<class UHWGameplayAttributeWidget>> ResourceWidgets;        // 0x0650(0x0050)(Edit, BlueprintVisible, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ResourceTag;                                       // 0x06A0(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGameplayAttributeWidget*             AttributeWidget;                                   // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGameplayAttributeWidget*             DefaultAttributeWidget;                            // 0x06B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void PopulateResourceBar(const struct FGameplayTag& ResourceTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWResourceManager">();
	}
	static class UHWResourceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWResourceManager>();
	}
};
static_assert(alignof(UHWResourceManager) == 0x000008, "Wrong alignment on UHWResourceManager");
static_assert(sizeof(UHWResourceManager) == 0x0006B8, "Wrong size on UHWResourceManager");
static_assert(offsetof(UHWResourceManager, DefaultResourceTag) == 0x000638, "Member 'UHWResourceManager::DefaultResourceTag' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, ResourceType) == 0x000640, "Member 'UHWResourceManager::ResourceType' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, AttributeWidgetContainer) == 0x000648, "Member 'UHWResourceManager::AttributeWidgetContainer' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, ResourceWidgets) == 0x000650, "Member 'UHWResourceManager::ResourceWidgets' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, ResourceTag) == 0x0006A0, "Member 'UHWResourceManager::ResourceTag' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, AttributeWidget) == 0x0006A8, "Member 'UHWResourceManager::AttributeWidget' has a wrong offset!");
static_assert(offsetof(UHWResourceManager, DefaultAttributeWidget) == 0x0006B0, "Member 'UHWResourceManager::DefaultAttributeWidget' has a wrong offset!");

// Class HemingwayUI.HWReticle_LockOnWidget
// 0x0000 (0x0430 - 0x0430)
class AHWReticle_LockOnWidget final : public AHWReticle_LockOn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWReticle_LockOnWidget">();
	}
	static class AHWReticle_LockOnWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWReticle_LockOnWidget>();
	}
};
static_assert(alignof(AHWReticle_LockOnWidget) == 0x000008, "Wrong alignment on AHWReticle_LockOnWidget");
static_assert(sizeof(AHWReticle_LockOnWidget) == 0x000430, "Wrong size on AHWReticle_LockOnWidget");

// Class HemingwayUI.HWRichTextBlockDecorator_Image
// 0x0028 (0x0050 - 0x0028)
class UHWRichTextBlockDecorator_Image final : public URichTextBlockDecorator
{
public:
	class FName                                   ImageStyleRowName;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinWidth;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWidth;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinHeight;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHeight;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWImage*>                       ImagePool;                                         // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRichTextBlockDecorator_Image">();
	}
	static class UHWRichTextBlockDecorator_Image* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRichTextBlockDecorator_Image>();
	}
};
static_assert(alignof(UHWRichTextBlockDecorator_Image) == 0x000008, "Wrong alignment on UHWRichTextBlockDecorator_Image");
static_assert(sizeof(UHWRichTextBlockDecorator_Image) == 0x000050, "Wrong size on UHWRichTextBlockDecorator_Image");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, ImageStyleRowName) == 0x000028, "Member 'UHWRichTextBlockDecorator_Image::ImageStyleRowName' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, MinWidth) == 0x000030, "Member 'UHWRichTextBlockDecorator_Image::MinWidth' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, MaxWidth) == 0x000034, "Member 'UHWRichTextBlockDecorator_Image::MaxWidth' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, MinHeight) == 0x000038, "Member 'UHWRichTextBlockDecorator_Image::MinHeight' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, MaxHeight) == 0x00003C, "Member 'UHWRichTextBlockDecorator_Image::MaxHeight' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_Image, ImagePool) == 0x000040, "Member 'UHWRichTextBlockDecorator_Image::ImagePool' has a wrong offset!");

// Class HemingwayUI.HWRolePreferenceButton
// 0x0010 (0x0608 - 0x05F8)
class UHWRolePreferenceButton : public UHWWidget
{
public:
	class UHWHorizontalBox*                       RoleHorizontalBox;                                 // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWRolePreferenceTag>       RoleTagClass;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandlePlayerRolesSaved();
	void OnRolesFetched(const struct FHWRolePreferenceData& RolePreferenceData, bool bSuccess);
	void SetIsLoading(bool bIsLoading);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRolePreferenceButton">();
	}
	static class UHWRolePreferenceButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRolePreferenceButton>();
	}
};
static_assert(alignof(UHWRolePreferenceButton) == 0x000008, "Wrong alignment on UHWRolePreferenceButton");
static_assert(sizeof(UHWRolePreferenceButton) == 0x000608, "Wrong size on UHWRolePreferenceButton");
static_assert(offsetof(UHWRolePreferenceButton, RoleHorizontalBox) == 0x0005F8, "Member 'UHWRolePreferenceButton::RoleHorizontalBox' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceButton, RoleTagClass) == 0x000600, "Member 'UHWRolePreferenceButton::RoleTagClass' has a wrong offset!");

// Class HemingwayUI.HWRolePreferenceTag
// 0x0000 (0x05F8 - 0x05F8)
class UHWRolePreferenceTag : public UHWWidget
{
public:
	void HandleRoleSet(ECharacterRole CharacterRole);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRolePreferenceTag">();
	}
	static class UHWRolePreferenceTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRolePreferenceTag>();
	}
};
static_assert(alignof(UHWRolePreferenceTag) == 0x000008, "Wrong alignment on UHWRolePreferenceTag");
static_assert(sizeof(UHWRolePreferenceTag) == 0x0005F8, "Wrong size on UHWRolePreferenceTag");

// Class HemingwayUI.HWRolePreferenceWidget
// 0x0200 (0x07F8 - 0x05F8)
class UHWRolePreferenceWidget : public UHWWidget
{
public:
	class UHWRolePreference_EntryWidget*          SelectedRoleEntry;                                 // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGridPanel*                           RoleEntries;                                       // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               RoleMap;                                           // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<ECharacterRole, class UTexture2D*>       RoleMapImages;                                     // 0x0610(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<ECharacterRole, struct FHWRolePreference_RoleText> RoleMapStrings;                          // 0x0660(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWRolePreferenceData>          DefaultRoleOrders;                                 // 0x06B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FHWRolePreferenceData                  StartingRolePreferenceData;                        // 0x06C0(0x0058)(Protected, NativeAccessSpecifierProtected)
	bool                                          bFillEnabled;                                      // 0x0718(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFillHovered;                                      // 0x0719(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEditing;                                        // 0x071A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequiresSave;                                     // 0x071B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71C[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            MoveRoleUpAction;                                  // 0x0720(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_760[0x8];                                      // 0x0760(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            MoveRoleDownAction;                                // 0x0768(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A8[0x8];                                      // 0x07A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            EditPreferenceAction;                              // 0x07B0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7F0[0x8];                                      // 0x07F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FHWRolePreferenceData CollectRolePreferenceData();
	bool GetIsFillEnabled();
	void HandleEditPreferenceAction();
	void HandleMoveRoleDownAction();
	void HandleMoveRoleUpAction();
	void HandleSetPreferenceAction();
	void OnEditPreferenceStarted();
	void OnLoginPlayerChanged(class ULocalPlayer* LocalPlayer);
	void OnRoleEntrySelected(class UHWRolePreference_EntryWidget* SelectedWidget);
	void OnRolesFetched(const struct FHWRolePreferenceData& RolePreferenceData, bool bSuccess);
	void PopulateDefaultRoles(const struct FHWRolePreferenceData& RolePreferenceData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRolePreferenceWidget">();
	}
	static class UHWRolePreferenceWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRolePreferenceWidget>();
	}
};
static_assert(alignof(UHWRolePreferenceWidget) == 0x000008, "Wrong alignment on UHWRolePreferenceWidget");
static_assert(sizeof(UHWRolePreferenceWidget) == 0x0007F8, "Wrong size on UHWRolePreferenceWidget");
static_assert(offsetof(UHWRolePreferenceWidget, SelectedRoleEntry) == 0x0005F8, "Member 'UHWRolePreferenceWidget::SelectedRoleEntry' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, RoleEntries) == 0x000600, "Member 'UHWRolePreferenceWidget::RoleEntries' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, RoleMap) == 0x000608, "Member 'UHWRolePreferenceWidget::RoleMap' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, RoleMapImages) == 0x000610, "Member 'UHWRolePreferenceWidget::RoleMapImages' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, RoleMapStrings) == 0x000660, "Member 'UHWRolePreferenceWidget::RoleMapStrings' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, DefaultRoleOrders) == 0x0006B0, "Member 'UHWRolePreferenceWidget::DefaultRoleOrders' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, StartingRolePreferenceData) == 0x0006C0, "Member 'UHWRolePreferenceWidget::StartingRolePreferenceData' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, bFillEnabled) == 0x000718, "Member 'UHWRolePreferenceWidget::bFillEnabled' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, bFillHovered) == 0x000719, "Member 'UHWRolePreferenceWidget::bFillHovered' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, bIsEditing) == 0x00071A, "Member 'UHWRolePreferenceWidget::bIsEditing' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, bRequiresSave) == 0x00071B, "Member 'UHWRolePreferenceWidget::bRequiresSave' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, MoveRoleUpAction) == 0x000720, "Member 'UHWRolePreferenceWidget::MoveRoleUpAction' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, MoveRoleDownAction) == 0x000768, "Member 'UHWRolePreferenceWidget::MoveRoleDownAction' has a wrong offset!");
static_assert(offsetof(UHWRolePreferenceWidget, EditPreferenceAction) == 0x0007B0, "Member 'UHWRolePreferenceWidget::EditPreferenceAction' has a wrong offset!");

// Class HemingwayUI.HWAccoladeDisplayerWidget
// 0x00D8 (0x06D0 - 0x05F8)
class UHWAccoladeDisplayerWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              AccoladeDisplayConfigDTSoftPtr;                    // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWAccoladeDisplayConfig> EventTagToAccoladeConfigMap;          // 0x0620(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, class UHWAccoladeEntryWidget*> EventTagToCachedWidgetMap;              // 0x0670(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UHWCanvasPanel*                         AccoladeCanvas;                                    // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C8[0x8];                                      // 0x06C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayAccolade(const struct FGameplayTag& AccoladeTag, const struct FHWEventContext& AccoladeContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeDisplayerWidget">();
	}
	static class UHWAccoladeDisplayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeDisplayerWidget>();
	}
};
static_assert(alignof(UHWAccoladeDisplayerWidget) == 0x000008, "Wrong alignment on UHWAccoladeDisplayerWidget");
static_assert(sizeof(UHWAccoladeDisplayerWidget) == 0x0006D0, "Wrong size on UHWAccoladeDisplayerWidget");
static_assert(offsetof(UHWAccoladeDisplayerWidget, AccoladeDisplayConfigDTSoftPtr) == 0x0005F8, "Member 'UHWAccoladeDisplayerWidget::AccoladeDisplayConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWAccoladeDisplayerWidget, EventTagToAccoladeConfigMap) == 0x000620, "Member 'UHWAccoladeDisplayerWidget::EventTagToAccoladeConfigMap' has a wrong offset!");
static_assert(offsetof(UHWAccoladeDisplayerWidget, EventTagToCachedWidgetMap) == 0x000670, "Member 'UHWAccoladeDisplayerWidget::EventTagToCachedWidgetMap' has a wrong offset!");
static_assert(offsetof(UHWAccoladeDisplayerWidget, AccoladeCanvas) == 0x0006C0, "Member 'UHWAccoladeDisplayerWidget::AccoladeCanvas' has a wrong offset!");

// Class HemingwayUI.HWRolePreference_EntryWidget
// 0x0038 (0x0630 - 0x05F8)
class UHWRolePreference_EntryWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWRolePreference_EntryWidget* SelectedWidget)> OnRolePreferenceEntrySelected; // 0x05F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRolePreferenceEntryMoveDown;                     // 0x0608(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRolePreferenceEntryMoveUp;                       // 0x0618(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         PriorityIndex;                                     // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECharacterRole                                CachedCharacterRole;                               // 0x062C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ECharacterRole GetCharacterRole();
	int32 GetPriorityIndex();
	void HandleIsSelected(bool bIsSelected);
	void SetRolePreference(ECharacterRole PreferredRole);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRolePreference_EntryWidget">();
	}
	static class UHWRolePreference_EntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRolePreference_EntryWidget>();
	}
};
static_assert(alignof(UHWRolePreference_EntryWidget) == 0x000008, "Wrong alignment on UHWRolePreference_EntryWidget");
static_assert(sizeof(UHWRolePreference_EntryWidget) == 0x000630, "Wrong size on UHWRolePreference_EntryWidget");
static_assert(offsetof(UHWRolePreference_EntryWidget, OnRolePreferenceEntrySelected) == 0x0005F8, "Member 'UHWRolePreference_EntryWidget::OnRolePreferenceEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWRolePreference_EntryWidget, OnRolePreferenceEntryMoveDown) == 0x000608, "Member 'UHWRolePreference_EntryWidget::OnRolePreferenceEntryMoveDown' has a wrong offset!");
static_assert(offsetof(UHWRolePreference_EntryWidget, OnRolePreferenceEntryMoveUp) == 0x000618, "Member 'UHWRolePreference_EntryWidget::OnRolePreferenceEntryMoveUp' has a wrong offset!");
static_assert(offsetof(UHWRolePreference_EntryWidget, PriorityIndex) == 0x000628, "Member 'UHWRolePreference_EntryWidget::PriorityIndex' has a wrong offset!");
static_assert(offsetof(UHWRolePreference_EntryWidget, CachedCharacterRole) == 0x00062C, "Member 'UHWRolePreference_EntryWidget::CachedCharacterRole' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderAbilitiesListWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWGodBuilderAbilitiesListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                EntryPadding;                                      // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodBuilderAbilitiesListEntryWidget> EntryWidgetClass;                       // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         AbilitiesList;                                     // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAbilityEntrySelected(const class UHWGodAbilityEntryWidget* EntryWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderAbilitiesListWidget">();
	}
	static class UHWGodBuilderAbilitiesListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderAbilitiesListWidget>();
	}
};
static_assert(alignof(UHWGodBuilderAbilitiesListWidget) == 0x000008, "Wrong alignment on UHWGodBuilderAbilitiesListWidget");
static_assert(sizeof(UHWGodBuilderAbilitiesListWidget) == 0x000628, "Wrong size on UHWGodBuilderAbilitiesListWidget");
static_assert(offsetof(UHWGodBuilderAbilitiesListWidget, EntryPadding) == 0x000608, "Member 'UHWGodBuilderAbilitiesListWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesListWidget, EntryWidgetClass) == 0x000618, "Member 'UHWGodBuilderAbilitiesListWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesListWidget, AbilitiesList) == 0x000620, "Member 'UHWGodBuilderAbilitiesListWidget::AbilitiesList' has a wrong offset!");

// Class HemingwayUI.HWSegmentedShieldWidget
// 0x0028 (0x0660 - 0x0638)
class UHWSegmentedShieldWidget final : public UHWCharacterWidget
{
public:
	TSubclassOf<class UHWWidget>                  EntryWidgetClass;                                  // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EntryPoolSize;                                     // 0x0640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSortByTimeLeftDescending;                         // 0x0644(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_645[0x3];                                      // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USpacer*                                Spacer;                                            // 0x0648(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWWidget*>                      SegmentWidgets;                                    // 0x0650(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleOnShieldInstanceHealthChanged(class UHWShieldInstance* ShieldInstance, float NewHealth);
	void HandleOnShieldListUpdated(class UHWShieldManagerComponent* ShieldManagerComponent);
	void HandleShieldManagerUpdated(class UHWShieldManagerComponent* ShieldManagerComponent);
	void SetUpSegmentWidgets();
	void UpdateShieldSegments();

	class UHWHorizontalBox* GetSegmentsContainer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSegmentedShieldWidget">();
	}
	static class UHWSegmentedShieldWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSegmentedShieldWidget>();
	}
};
static_assert(alignof(UHWSegmentedShieldWidget) == 0x000008, "Wrong alignment on UHWSegmentedShieldWidget");
static_assert(sizeof(UHWSegmentedShieldWidget) == 0x000660, "Wrong size on UHWSegmentedShieldWidget");
static_assert(offsetof(UHWSegmentedShieldWidget, EntryWidgetClass) == 0x000638, "Member 'UHWSegmentedShieldWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWSegmentedShieldWidget, EntryPoolSize) == 0x000640, "Member 'UHWSegmentedShieldWidget::EntryPoolSize' has a wrong offset!");
static_assert(offsetof(UHWSegmentedShieldWidget, bSortByTimeLeftDescending) == 0x000644, "Member 'UHWSegmentedShieldWidget::bSortByTimeLeftDescending' has a wrong offset!");
static_assert(offsetof(UHWSegmentedShieldWidget, Spacer) == 0x000648, "Member 'UHWSegmentedShieldWidget::Spacer' has a wrong offset!");
static_assert(offsetof(UHWSegmentedShieldWidget, SegmentWidgets) == 0x000650, "Member 'UHWSegmentedShieldWidget::SegmentWidgets' has a wrong offset!");

// Class HemingwayUI.HWDynamicAnnouncementEvaluator
// 0x0000 (0x0028 - 0x0028)
class UHWDynamicAnnouncementEvaluator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDynamicAnnouncementEvaluator">();
	}
	static class UHWDynamicAnnouncementEvaluator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDynamicAnnouncementEvaluator>();
	}
};
static_assert(alignof(UHWDynamicAnnouncementEvaluator) == 0x000008, "Wrong alignment on UHWDynamicAnnouncementEvaluator");
static_assert(sizeof(UHWDynamicAnnouncementEvaluator) == 0x000028, "Wrong size on UHWDynamicAnnouncementEvaluator");

// Class HemingwayUI.HWDynamicAnnouncementEvaluator_ClientUpdate
// 0x0000 (0x0028 - 0x0028)
class UHWDynamicAnnouncementEvaluator_ClientUpdate final : public UHWDynamicAnnouncementEvaluator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDynamicAnnouncementEvaluator_ClientUpdate">();
	}
	static class UHWDynamicAnnouncementEvaluator_ClientUpdate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDynamicAnnouncementEvaluator_ClientUpdate>();
	}
};
static_assert(alignof(UHWDynamicAnnouncementEvaluator_ClientUpdate) == 0x000008, "Wrong alignment on UHWDynamicAnnouncementEvaluator_ClientUpdate");
static_assert(sizeof(UHWDynamicAnnouncementEvaluator_ClientUpdate) == 0x000028, "Wrong size on UHWDynamicAnnouncementEvaluator_ClientUpdate");

// Class HemingwayUI.HWGameplayAttributeWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWGameplayAttributeWidget : public UHWWidget
{
public:
	TArray<struct FHWTrackedAttributeData>        TrackedAttributesData;                             // 0x05F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWAbilitySystemComponent> CurrentASC;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSuppressUpdateOnVisibility;                       // 0x0610(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttributeTrackEnded(const struct FGameplayAttribute& Attribute);
	void AttributeTrackStarted(const struct FGameplayAttribute& Attribute, float InitialValue);
	void AttributeValueChanged(const struct FGameplayAttribute& Attribute, float OldValue, float NewValue);
	void ClearTrackers();
	void OnAttributesTracked();
	void OnAttributesUntracked();
	void SetAndTrackNewAttributes(const TArray<struct FGameplayAttribute>& NewAttributes, class UHWAbilitySystemComponent* ASC, bool bAppend);
	void SetNewTrackedAttributes(const TArray<struct FGameplayAttribute>& NewAttributes, bool bAppend);
	void SetUpdateSuppressedByVisibility(bool bShouldSuppress);
	void TrackAttributes(class UHWAbilitySystemComponent* ASC);
	void TrackedAttributesChanged();

	float GetTrackedAttributeValue(const struct FGameplayAttribute& Attribute) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayAttributeWidget">();
	}
	static class UHWGameplayAttributeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayAttributeWidget>();
	}
};
static_assert(alignof(UHWGameplayAttributeWidget) == 0x000008, "Wrong alignment on UHWGameplayAttributeWidget");
static_assert(sizeof(UHWGameplayAttributeWidget) == 0x000618, "Wrong size on UHWGameplayAttributeWidget");
static_assert(offsetof(UHWGameplayAttributeWidget, TrackedAttributesData) == 0x0005F8, "Member 'UHWGameplayAttributeWidget::TrackedAttributesData' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeWidget, CurrentASC) == 0x000608, "Member 'UHWGameplayAttributeWidget::CurrentASC' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeWidget, bSuppressUpdateOnVisibility) == 0x000610, "Member 'UHWGameplayAttributeWidget::bSuppressUpdateOnVisibility' has a wrong offset!");

// Class HemingwayUI.HWGameplayAttributeProgressBar
// 0x00D0 (0x06E8 - 0x0618)
class UHWGameplayAttributeProgressBar : public UHWGameplayAttributeWidget
{
public:
	struct FGameplayAttribute                     ValueAttribute;                                    // 0x0618(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     MaxValueAttribute;                                 // 0x0650(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     ValuePerTimeAttribute;                             // 0x0688(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FixedMaxValue;                                     // 0x06C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetValue;                                       // 0x06C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(float Percentage, float Value, float MaxValue)> OnGameplayAttributeProgressBarUpdated; // 0x06C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float ValuePerTime)> OnGameplayAttributeValuePerTimeUpdated;       // 0x06D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SetFixedMaxValue(float NewMaxValue);
	void SetFixedMaxValueAndOffset(float NewMaxValue, float Offset);
	void SetValueOffset(float Offset);
	void UpdateProgressBar(float Percentage, float Value, float MaxValue);
	void UpdateValuePerTime(float ValuePerTime);

	float GetMaxValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayAttributeProgressBar">();
	}
	static class UHWGameplayAttributeProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayAttributeProgressBar>();
	}
};
static_assert(alignof(UHWGameplayAttributeProgressBar) == 0x000008, "Wrong alignment on UHWGameplayAttributeProgressBar");
static_assert(sizeof(UHWGameplayAttributeProgressBar) == 0x0006E8, "Wrong size on UHWGameplayAttributeProgressBar");
static_assert(offsetof(UHWGameplayAttributeProgressBar, ValueAttribute) == 0x000618, "Member 'UHWGameplayAttributeProgressBar::ValueAttribute' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, MaxValueAttribute) == 0x000650, "Member 'UHWGameplayAttributeProgressBar::MaxValueAttribute' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, ValuePerTimeAttribute) == 0x000688, "Member 'UHWGameplayAttributeProgressBar::ValuePerTimeAttribute' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, FixedMaxValue) == 0x0006C0, "Member 'UHWGameplayAttributeProgressBar::FixedMaxValue' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, OffsetValue) == 0x0006C4, "Member 'UHWGameplayAttributeProgressBar::OffsetValue' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, OnGameplayAttributeProgressBarUpdated) == 0x0006C8, "Member 'UHWGameplayAttributeProgressBar::OnGameplayAttributeProgressBarUpdated' has a wrong offset!");
static_assert(offsetof(UHWGameplayAttributeProgressBar, OnGameplayAttributeValuePerTimeUpdated) == 0x0006D8, "Member 'UHWGameplayAttributeProgressBar::OnGameplayAttributeValuePerTimeUpdated' has a wrong offset!");

// Class HemingwayUI.HWSettingsConfigAsset
// 0x0110 (0x0140 - 0x0030)
class UHWSettingsConfigAsset final : public UDataAsset
{
public:
	bool                                          bIsAvailableOffline;                               // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWAllowedPlatformTypesForSetting      AllowedPlatformTypes;                              // 0x0031(0x000D)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWAllowedInputTypesForSetting         AllowedInputTypes;                                 // 0x003E(0x0003)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWSettingConditionAssessor> ConditionAssessorClass;                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAvailableOutOfGame;                             // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWSettingsWidgetConfig                WidgetConfig;                                      // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   SettingName;                                       // 0x0070(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FText>              SettingNameByPlatform;                             // 0x0088(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   SettingDescription;                                // 0x00D8(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FText>              SettingDescriptionByPlatform;                      // 0x00F0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	const class FText GetSettingDescription() const;
	const class FText GetSettingName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingsConfigAsset">();
	}
	static class UHWSettingsConfigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingsConfigAsset>();
	}
};
static_assert(alignof(UHWSettingsConfigAsset) == 0x000008, "Wrong alignment on UHWSettingsConfigAsset");
static_assert(sizeof(UHWSettingsConfigAsset) == 0x000140, "Wrong size on UHWSettingsConfigAsset");
static_assert(offsetof(UHWSettingsConfigAsset, bIsAvailableOffline) == 0x000030, "Member 'UHWSettingsConfigAsset::bIsAvailableOffline' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, AllowedPlatformTypes) == 0x000031, "Member 'UHWSettingsConfigAsset::AllowedPlatformTypes' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, AllowedInputTypes) == 0x00003E, "Member 'UHWSettingsConfigAsset::AllowedInputTypes' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, ConditionAssessorClass) == 0x000048, "Member 'UHWSettingsConfigAsset::ConditionAssessorClass' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, bIsAvailableOutOfGame) == 0x000050, "Member 'UHWSettingsConfigAsset::bIsAvailableOutOfGame' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, WidgetConfig) == 0x000058, "Member 'UHWSettingsConfigAsset::WidgetConfig' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, SettingName) == 0x000070, "Member 'UHWSettingsConfigAsset::SettingName' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, SettingNameByPlatform) == 0x000088, "Member 'UHWSettingsConfigAsset::SettingNameByPlatform' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, SettingDescription) == 0x0000D8, "Member 'UHWSettingsConfigAsset::SettingDescription' has a wrong offset!");
static_assert(offsetof(UHWSettingsConfigAsset, SettingDescriptionByPlatform) == 0x0000F0, "Member 'UHWSettingsConfigAsset::SettingDescriptionByPlatform' has a wrong offset!");

// Class HemingwayUI.HWSettingsEntryWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWSettingsEntryWidget : public UHWWidget
{
public:
	class UHWSettingsConfigAsset*                 WidgetConfig;                                      // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URHSettingsInfoBase*                    SettingsInfo;                                      // 0x0600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x20];                                     // 0x0608(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplySetting();
	void CallSettingUpdated();
	void ExecuteOnHovered(bool IsHovered_0);
	class UWidget* HandleNavigateLeft(EUINavigation Nav);
	class UWidget* HandleNavigateRight(EUINavigation Nav);
	bool IsApplied();
	bool IsSaved();
	void OnSettingsInfoValueChanged(bool bChangedExternally);
	void OnWidgetConfigSet();
	void OnWidgetSettingsInfoSet();
	void RevertSetting();
	void RevertSettingToDefault();
	void SaveSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingsEntryWidget">();
	}
	static class UHWSettingsEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingsEntryWidget>();
	}
};
static_assert(alignof(UHWSettingsEntryWidget) == 0x000008, "Wrong alignment on UHWSettingsEntryWidget");
static_assert(sizeof(UHWSettingsEntryWidget) == 0x000628, "Wrong size on UHWSettingsEntryWidget");
static_assert(offsetof(UHWSettingsEntryWidget, WidgetConfig) == 0x0005F8, "Member 'UHWSettingsEntryWidget::WidgetConfig' has a wrong offset!");
static_assert(offsetof(UHWSettingsEntryWidget, SettingsInfo) == 0x000600, "Member 'UHWSettingsEntryWidget::SettingsInfo' has a wrong offset!");

// Class HemingwayUI.HWKeyBinderWidget
// 0x0040 (0x0668 - 0x0628)
class UHWKeyBinderWidget : public UHWSettingsEntryWidget
{
public:
	uint8                                         Pad_628[0x10];                                     // 0x0628(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EHWKeyRebindOverlapBehavior                   RebindOverlapBehavior;                             // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x17];                                     // 0x0639(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWKeyBinderCategory>           KeyBinderCategories;                               // 0x0650(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWKeyBinderEntryWidget>    BinderKeyEntryClass;                               // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddKeyBinderCategory(const class FText& InCategoryName);
	void AddKeyBinderEntryWidget(class UHWKeyBinderEntryWidget* EntryWidget);
	void ApplyKeyBindings();
	void Clear();
	void DiscardKeyBindings();
	void DisplayMappingName(const class FText& MappingName);
	void DisplayPresetOptions(const TArray<class FText>& Options, const class FText& SelectedOption);
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	void ResetCurrentPreset();
	void SelectPreset(const class FString& PresetDisplayName);
	void SetShouldCaptureKeyDowns(bool bNewShouldCaptureKeyDowns, bool bIsCapturingGamepadKeys);
	void UnappliedKeybindingsUpdated(bool bNewHasUnappliedKeybindings);

	class UHWMappingContextComponent* GetMappingContextComponent() const;
	bool HasUnappliedKeybindings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWKeyBinderWidget">();
	}
	static class UHWKeyBinderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWKeyBinderWidget>();
	}
};
static_assert(alignof(UHWKeyBinderWidget) == 0x000008, "Wrong alignment on UHWKeyBinderWidget");
static_assert(sizeof(UHWKeyBinderWidget) == 0x000668, "Wrong size on UHWKeyBinderWidget");
static_assert(offsetof(UHWKeyBinderWidget, RebindOverlapBehavior) == 0x000638, "Member 'UHWKeyBinderWidget::RebindOverlapBehavior' has a wrong offset!");
static_assert(offsetof(UHWKeyBinderWidget, KeyBinderCategories) == 0x000650, "Member 'UHWKeyBinderWidget::KeyBinderCategories' has a wrong offset!");
static_assert(offsetof(UHWKeyBinderWidget, BinderKeyEntryClass) == 0x000660, "Member 'UHWKeyBinderWidget::BinderKeyEntryClass' has a wrong offset!");

// Class HemingwayUI.HWSettingsPageConfigAsset
// 0x0090 (0x00C0 - 0x0030)
class UHWSettingsPageConfigAsset final : public UDataAsset
{
public:
	TArray<class UHWSettingsConfigAsset*>         SettingConfigs;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   PageName;                                          // 0x0040(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   PageDesc;                                          // 0x0058(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FText>              HeadingByPlatform;                                 // 0x0070(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	const class FText GetPageDesc() const;
	const class FText GetPageName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingsPageConfigAsset">();
	}
	static class UHWSettingsPageConfigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingsPageConfigAsset>();
	}
};
static_assert(alignof(UHWSettingsPageConfigAsset) == 0x000008, "Wrong alignment on UHWSettingsPageConfigAsset");
static_assert(sizeof(UHWSettingsPageConfigAsset) == 0x0000C0, "Wrong size on UHWSettingsPageConfigAsset");
static_assert(offsetof(UHWSettingsPageConfigAsset, SettingConfigs) == 0x000030, "Member 'UHWSettingsPageConfigAsset::SettingConfigs' has a wrong offset!");
static_assert(offsetof(UHWSettingsPageConfigAsset, PageName) == 0x000040, "Member 'UHWSettingsPageConfigAsset::PageName' has a wrong offset!");
static_assert(offsetof(UHWSettingsPageConfigAsset, PageDesc) == 0x000058, "Member 'UHWSettingsPageConfigAsset::PageDesc' has a wrong offset!");
static_assert(offsetof(UHWSettingsPageConfigAsset, HeadingByPlatform) == 0x000070, "Member 'UHWSettingsPageConfigAsset::HeadingByPlatform' has a wrong offset!");

// Class HemingwayUI.HWSettingsMenuConfigAsset
// 0x0010 (0x0040 - 0x0030)
class UHWSettingsMenuConfigAsset final : public UDataAsset
{
public:
	TArray<class UHWSettingsPageConfigAsset*>     SettingsPageConfigs;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingsMenuConfigAsset">();
	}
	static class UHWSettingsMenuConfigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingsMenuConfigAsset>();
	}
};
static_assert(alignof(UHWSettingsMenuConfigAsset) == 0x000008, "Wrong alignment on UHWSettingsMenuConfigAsset");
static_assert(sizeof(UHWSettingsMenuConfigAsset) == 0x000040, "Wrong size on UHWSettingsMenuConfigAsset");
static_assert(offsetof(UHWSettingsMenuConfigAsset, SettingsPageConfigs) == 0x000030, "Member 'UHWSettingsMenuConfigAsset::SettingsPageConfigs' has a wrong offset!");

// Class HemingwayUI.HWSettingConditionAssessor
// 0x0000 (0x0028 - 0x0028)
class UHWSettingConditionAssessor : public UObject
{
public:
	bool IsDisplayConditionMet(const class UHWSettingsConfigAsset* SettingsConfigAsset, const class ARHHUDCommon* HUD) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingConditionAssessor">();
	}
	static class UHWSettingConditionAssessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingConditionAssessor>();
	}
};
static_assert(alignof(UHWSettingConditionAssessor) == 0x000008, "Wrong alignment on UHWSettingConditionAssessor");
static_assert(sizeof(UHWSettingConditionAssessor) == 0x000028, "Wrong size on UHWSettingConditionAssessor");

// Class HemingwayUI.HWPurchaseConfirmWidget
// 0x0098 (0x0690 - 0x05F8)
class UHWPurchaseConfirmWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCollectionItem>       CollectionItem;                                    // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_LootId                             PurchaseLootOverride;                              // 0x0610(0x0014)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class URHCurrency>>     RequestedDynamicDisplayCurrencies;                 // 0x0628(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	int32                                         PurchaseQuantity;                                  // 0x0638(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIContextCalloutDisplay               PurchaseQuantityCallout;                           // 0x0640(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        bIsPurchaseQuantityChangeAllowed;                  // 0x0688(0x0003)(Config, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68B[0x5];                                      // 0x068B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPurchaseQuantity(int32 QuantityIncrement);
	void BroadcastPurchaseConfirmResult(EHWPurchaseConfirmResult Result);
	void DisplayItem(class UHWCollectionItem* Item, int32 Quantity);
	void DisplayPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroup);
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	struct FEventReply HandlePurchaseConfirmResultUpdate();
	void OnDisplayUpsellItem(const class UHWCollectionItem* UpsellItem);
	void OnPurchasePossibleRequestResponse(bool bSuccess, class URHStoreItemPrice* PriceItem);
	void OnPurchaseRequestResponse(bool bSuccess);
	void OpenCurrencyPurchaseScreen(class URHStoreItemPrice* PriceItem);
	void RequestPurchase(EHWCurrencyType CurrencyType, const struct FRH_ItemId& CurrencyId, int32 Quantity);
	void RequestPurchasePossible(EHWCurrencyType CurrencyType, const struct FRH_ItemId& CurrencyId, int32 Quantity);
	void UpdatePurchaseQuantityDisplay(int32 NewQuantity, int32 TotalItemQuantity);

	bool CanChangePurchaseQuantity() const;
	class UHWCollectionItem* GetCollectionItem() const;
	EHWCollectionItemType GetCollectionType() const;
	int32 GetItemAcquireQuantity() const;
	class URHStoreItem* GetStoreItem() const;
	class UHWPurchaseConfirmWidget* GetUpsellPurchaseConfirmWidget() const;
	bool IsPriceReductionPurchase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPurchaseConfirmWidget">();
	}
	static class UHWPurchaseConfirmWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPurchaseConfirmWidget>();
	}
};
static_assert(alignof(UHWPurchaseConfirmWidget) == 0x000008, "Wrong alignment on UHWPurchaseConfirmWidget");
static_assert(sizeof(UHWPurchaseConfirmWidget) == 0x000690, "Wrong size on UHWPurchaseConfirmWidget");
static_assert(offsetof(UHWPurchaseConfirmWidget, CollectionItem) == 0x000608, "Member 'UHWPurchaseConfirmWidget::CollectionItem' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidget, PurchaseLootOverride) == 0x000610, "Member 'UHWPurchaseConfirmWidget::PurchaseLootOverride' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidget, RequestedDynamicDisplayCurrencies) == 0x000628, "Member 'UHWPurchaseConfirmWidget::RequestedDynamicDisplayCurrencies' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidget, PurchaseQuantity) == 0x000638, "Member 'UHWPurchaseConfirmWidget::PurchaseQuantity' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidget, PurchaseQuantityCallout) == 0x000640, "Member 'UHWPurchaseConfirmWidget::PurchaseQuantityCallout' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidget, bIsPurchaseQuantityChangeAllowed) == 0x000688, "Member 'UHWPurchaseConfirmWidget::bIsPurchaseQuantityChangeAllowed' has a wrong offset!");

// Class HemingwayUI.HWAscensionPassPurchaseConfirmWidget
// 0x0028 (0x06B8 - 0x0690)
class UHWAscensionPassPurchaseConfirmWidget : public UHWPurchaseConfirmWidget
{
public:
	TArray<struct FRH_LootId>                     FounderAscensionPassLootIds;                       // 0x0690(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A0[0x18];                                     // 0x06A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdatedRouteData(const class UHWAscensionPassPurchaseConfirmRouteData* Data);
	void UpdateFoundersUpsell(bool bShouldShowUpsell);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAscensionPassPurchaseConfirmWidget">();
	}
	static class UHWAscensionPassPurchaseConfirmWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAscensionPassPurchaseConfirmWidget>();
	}
};
static_assert(alignof(UHWAscensionPassPurchaseConfirmWidget) == 0x000008, "Wrong alignment on UHWAscensionPassPurchaseConfirmWidget");
static_assert(sizeof(UHWAscensionPassPurchaseConfirmWidget) == 0x0006B8, "Wrong size on UHWAscensionPassPurchaseConfirmWidget");
static_assert(offsetof(UHWAscensionPassPurchaseConfirmWidget, FounderAscensionPassLootIds) == 0x000690, "Member 'UHWAscensionPassPurchaseConfirmWidget::FounderAscensionPassLootIds' has a wrong offset!");

// Class HemingwayUI.HWEquipmentLevelBarWidget
// 0x01E8 (0x07E0 - 0x05F8)
class UHWEquipmentLevelBarWidget : public UHWWidget
{
public:
	TArray<class UHWImage*>                       PipWidgets;                                        // 0x05F8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWEquipmentLevelBarPipConfig          EmptyPipConfig;                                    // 0x0610(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FHWEquipmentLevelBarPipConfig          FilledPipConfig;                                   // 0x06F0(0x00E0)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxLevel;                                          // 0x07D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         StartingLevel;                                     // 0x07D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D8[0x8];                                      // 0x07D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FillPipWidgets();
	void LevelUpdated();
	void PipWidgetAdded(class UHWImage* Pip, int32 Level);
	void PipWidgetRemoved(class UHWImage* Pip);
	void SetCurrentAndMaxLevel(int32 InCurrentLevel, int32 InMaxLevel);
	void SetCurrentLevel(int32 InCurrentLevel);
	void SetMaxLevel(int32 InMaxLevel);
	void SetPipColor(int32 PipLevel, const struct FGameplayTag& ColorTag);
	void SetPipColors(const struct FGameplayTag& ColorTag);
	void TrimPipWidgets();

	int32 GetCurrentLevel() const;
	int32 GetMaxLevel() const;
	int32 GetStartingLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentLevelBarWidget">();
	}
	static class UHWEquipmentLevelBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentLevelBarWidget>();
	}
};
static_assert(alignof(UHWEquipmentLevelBarWidget) == 0x000010, "Wrong alignment on UHWEquipmentLevelBarWidget");
static_assert(sizeof(UHWEquipmentLevelBarWidget) == 0x0007E0, "Wrong size on UHWEquipmentLevelBarWidget");
static_assert(offsetof(UHWEquipmentLevelBarWidget, PipWidgets) == 0x0005F8, "Member 'UHWEquipmentLevelBarWidget::PipWidgets' has a wrong offset!");
static_assert(offsetof(UHWEquipmentLevelBarWidget, EmptyPipConfig) == 0x000610, "Member 'UHWEquipmentLevelBarWidget::EmptyPipConfig' has a wrong offset!");
static_assert(offsetof(UHWEquipmentLevelBarWidget, FilledPipConfig) == 0x0006F0, "Member 'UHWEquipmentLevelBarWidget::FilledPipConfig' has a wrong offset!");
static_assert(offsetof(UHWEquipmentLevelBarWidget, MaxLevel) == 0x0007D0, "Member 'UHWEquipmentLevelBarWidget::MaxLevel' has a wrong offset!");
static_assert(offsetof(UHWEquipmentLevelBarWidget, StartingLevel) == 0x0007D4, "Member 'UHWEquipmentLevelBarWidget::StartingLevel' has a wrong offset!");

// Class HemingwayUI.HWEquipmentLevelBarCustomWidget
// 0x0010 (0x07F0 - 0x07E0)
class UHWEquipmentLevelBarCustomWidget : public UHWEquipmentLevelBarWidget
{
public:
	TArray<struct FHWEquipmentLevelBarPipConfig>  CustomPipConfig;                                   // 0x07E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetCurrentLevelWithPipOverride(int32 InCurrentLevel, int32 CustomPipConfigIndex);
	void SetOverrideConfigToPip(class UHWImage* Pip, const int32 CustomPipConfigIndex);
	void SetOverrideConfigToPipLevel(const int32 PipLevel, const int32 CustomPipConfigIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentLevelBarCustomWidget">();
	}
	static class UHWEquipmentLevelBarCustomWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentLevelBarCustomWidget>();
	}
};
static_assert(alignof(UHWEquipmentLevelBarCustomWidget) == 0x000010, "Wrong alignment on UHWEquipmentLevelBarCustomWidget");
static_assert(sizeof(UHWEquipmentLevelBarCustomWidget) == 0x0007F0, "Wrong size on UHWEquipmentLevelBarCustomWidget");
static_assert(offsetof(UHWEquipmentLevelBarCustomWidget, CustomPipConfig) == 0x0007E0, "Member 'UHWEquipmentLevelBarCustomWidget::CustomPipConfig' has a wrong offset!");

// Class HemingwayUI.HWSizeBox
// 0x0000 (0x01D0 - 0x01D0)
class UHWSizeBox final : public USizeBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSizeBox">();
	}
	static class UHWSizeBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSizeBox>();
	}
};
static_assert(alignof(UHWSizeBox) == 0x000008, "Wrong alignment on UHWSizeBox");
static_assert(sizeof(UHWSizeBox) == 0x0001D0, "Wrong size on UHWSizeBox");

// Class HemingwayUI.HWInterface_UIInputHandler
// 0x0000 (0x0000 - 0x0000)
class IHWInterface_UIInputHandler final
{
public:
	void ForceCloseWidget();
	struct FEventReply ProcessViewInput(const struct FGameplayTag& InputTag, ETriggerEvent TriggerEvent);

	class UInputMappingContext* GetCustomInputMappingContext(int32* MappingContextPriority) const;
	bool IsExclusive() const;
	bool ShouldOverrideAllowedInputCategories(EHWAllowedInputCategory* OutAllowedInputCategories) const;
	bool ShouldOverrideAnalogNavigationEnabled(bool* bOutAnalogNavigationEnabled) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInterface_UIInputHandler">();
	}
	static class IHWInterface_UIInputHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHWInterface_UIInputHandler>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHWInterface_UIInputHandler) == 0x000001, "Wrong alignment on IHWInterface_UIInputHandler");
static_assert(sizeof(IHWInterface_UIInputHandler) == 0x000001, "Wrong size on IHWInterface_UIInputHandler");

// Class HemingwayUI.HWTabScreen
// 0x0030 (0x0628 - 0x05F8)
class UHWTabScreen : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x11];                                     // 0x05F8(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableFullNavigationOnTabChange;                  // 0x0609(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60A[0x6];                                      // 0x060A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   PartialNavigationModeInputMapping;                 // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           EnableFullNavigationAction;                        // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x8];                                      // 0x0620(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSelectedTabChanged(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause);
	void OnContextMenuVisibilityChanged(bool bVisible);
	void OnEnableFullNavigationUpdated(bool bFullNavigationEnabled);
	void OnGodWidgetVisibilityChanged(bool bVisible);
	void OnReportPlayerMenuVisibilityChanged(bool bVisible);
	void OnSelectedTabChanged(int32 TabIndex, EHWTabChangeCause Cause);
	void SetEnableFullNavigation(bool bInEnabled);

	class UHWTabBarWidget* GetTabBarWidget() const;
	bool IsContextMenuVisible() const;
	bool IsFullNavigationEnabled() const;
	bool IsReportMenuVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTabScreen">();
	}
	static class UHWTabScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTabScreen>();
	}
};
static_assert(alignof(UHWTabScreen) == 0x000008, "Wrong alignment on UHWTabScreen");
static_assert(sizeof(UHWTabScreen) == 0x000628, "Wrong size on UHWTabScreen");
static_assert(offsetof(UHWTabScreen, bEnableFullNavigationOnTabChange) == 0x000609, "Member 'UHWTabScreen::bEnableFullNavigationOnTabChange' has a wrong offset!");
static_assert(offsetof(UHWTabScreen, PartialNavigationModeInputMapping) == 0x000610, "Member 'UHWTabScreen::PartialNavigationModeInputMapping' has a wrong offset!");
static_assert(offsetof(UHWTabScreen, EnableFullNavigationAction) == 0x000618, "Member 'UHWTabScreen::EnableFullNavigationAction' has a wrong offset!");

// Class HemingwayUI.HWTopStatsTeamWidget
// 0x00E0 (0x06D8 - 0x05F8)
class UHWTopStatsTeamWidget : public UHWWidget
{
public:
	TArray<TWeakObjectPtr<class AHWTeamState>>    TrackedTeams;                                      // 0x05F8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class AHWTeamState>, TWeakObjectPtr<class AHWTeamStatsTracker>> TeamStatTrackers; // 0x0608(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class AHWTeamState>, class UHWTopStatEntryWidget*> StatEntryWidgets;         // 0x0658(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    TopStatsContainer;                                 // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWTopStatEntryWidget>      TopStatWidgetClass;                                // 0x06B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Columns;                                           // 0x06B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           StatTag;                                           // 0x06BC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C4[0x14];                                     // 0x06C4(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTeamMembersUpdated();
	void HandleTeamStatsTrackerReplicated(class AHWTeamState* TeamState, class AHWTeamStatsTracker* StatsTracker);
	void HandleTopStatUpdated(class AHWTeamState* TeamState, const struct FGameplayTag& StatTag_0, class AHWPlayerState* PlayerState);
	void HandleTrackedStatSet(const struct FGameplayTag& NewStatTag);
	void HandleTrackedTeamAdded(class AHWTeamState* NewTeamState);

	class AHWTeamState* GetTrackedTeam(const struct FGenericTeamId& TeamId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTopStatsTeamWidget">();
	}
	static class UHWTopStatsTeamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTopStatsTeamWidget>();
	}
};
static_assert(alignof(UHWTopStatsTeamWidget) == 0x000008, "Wrong alignment on UHWTopStatsTeamWidget");
static_assert(sizeof(UHWTopStatsTeamWidget) == 0x0006D8, "Wrong size on UHWTopStatsTeamWidget");
static_assert(offsetof(UHWTopStatsTeamWidget, TrackedTeams) == 0x0005F8, "Member 'UHWTopStatsTeamWidget::TrackedTeams' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, TeamStatTrackers) == 0x000608, "Member 'UHWTopStatsTeamWidget::TeamStatTrackers' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, StatEntryWidgets) == 0x000658, "Member 'UHWTopStatsTeamWidget::StatEntryWidgets' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, TopStatsContainer) == 0x0006A8, "Member 'UHWTopStatsTeamWidget::TopStatsContainer' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, TopStatWidgetClass) == 0x0006B0, "Member 'UHWTopStatsTeamWidget::TopStatWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, Columns) == 0x0006B8, "Member 'UHWTopStatsTeamWidget::Columns' has a wrong offset!");
static_assert(offsetof(UHWTopStatsTeamWidget, StatTag) == 0x0006BC, "Member 'UHWTopStatsTeamWidget::StatTag' has a wrong offset!");

// Class HemingwayUI.HWTopStatsWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWTopStatsWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWTopStatsTeamWidget>      TeamWidgetClass;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    TeamContainer;                                     // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWTopStatsTeamWidget*> TeamWidgets;                             // 0x0610(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  StatsToTrack;                                      // 0x0660(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         Columns;                                           // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleTeamsUpdated();
	void SetIsTopStatsOpened(bool bInIsOpened);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTopStatsWidget">();
	}
	static class UHWTopStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTopStatsWidget>();
	}
};
static_assert(alignof(UHWTopStatsWidget) == 0x000008, "Wrong alignment on UHWTopStatsWidget");
static_assert(sizeof(UHWTopStatsWidget) == 0x000688, "Wrong size on UHWTopStatsWidget");
static_assert(offsetof(UHWTopStatsWidget, TeamWidgetClass) == 0x000600, "Member 'UHWTopStatsWidget::TeamWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWTopStatsWidget, TeamContainer) == 0x000608, "Member 'UHWTopStatsWidget::TeamContainer' has a wrong offset!");
static_assert(offsetof(UHWTopStatsWidget, TeamWidgets) == 0x000610, "Member 'UHWTopStatsWidget::TeamWidgets' has a wrong offset!");
static_assert(offsetof(UHWTopStatsWidget, StatsToTrack) == 0x000660, "Member 'UHWTopStatsWidget::StatsToTrack' has a wrong offset!");
static_assert(offsetof(UHWTopStatsWidget, Columns) == 0x000680, "Member 'UHWTopStatsWidget::Columns' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptBaseWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWAbilityPromptBaseWidget : public UHWWidget
{
public:
	struct FGameplayTag                           DisplayInfoTag;                                    // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DisplayInfoId;                                     // 0x0600(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  AssociatedActor;                                   // 0x0604(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDisplayInfoData(class UHWDisplayInfoData* DisplayInfoData);

	class AActor* GetAssociatedActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptBaseWidget">();
	}
	static class UHWAbilityPromptBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptBaseWidget>();
	}
};
static_assert(alignof(UHWAbilityPromptBaseWidget) == 0x000008, "Wrong alignment on UHWAbilityPromptBaseWidget");
static_assert(sizeof(UHWAbilityPromptBaseWidget) == 0x000610, "Wrong size on UHWAbilityPromptBaseWidget");
static_assert(offsetof(UHWAbilityPromptBaseWidget, DisplayInfoTag) == 0x0005F8, "Member 'UHWAbilityPromptBaseWidget::DisplayInfoTag' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptBaseWidget, DisplayInfoId) == 0x000600, "Member 'UHWAbilityPromptBaseWidget::DisplayInfoId' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptBaseWidget, AssociatedActor) == 0x000604, "Member 'UHWAbilityPromptBaseWidget::AssociatedActor' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptRadialWidget
// 0x0010 (0x0620 - 0x0610)
class UHWAbilityPromptRadialWidget : public UHWAbilityPromptBaseWidget
{
public:
	class UHWCanvasPanel*                         CanvasEntryContainer;                              // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWRadialMenuWidget*                    RadialWidget;                                      // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleRadialMenuEntryHovered(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);
	void HandleRadialMenuEntrySelected(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);
	void HandleRadialMenuEntryUnhovered(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptRadialWidget">();
	}
	static class UHWAbilityPromptRadialWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptRadialWidget>();
	}
};
static_assert(alignof(UHWAbilityPromptRadialWidget) == 0x000008, "Wrong alignment on UHWAbilityPromptRadialWidget");
static_assert(sizeof(UHWAbilityPromptRadialWidget) == 0x000620, "Wrong size on UHWAbilityPromptRadialWidget");
static_assert(offsetof(UHWAbilityPromptRadialWidget, CanvasEntryContainer) == 0x000610, "Member 'UHWAbilityPromptRadialWidget::CanvasEntryContainer' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptRadialWidget, RadialWidget) == 0x000618, "Member 'UHWAbilityPromptRadialWidget::RadialWidget' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptRadialGodSelector
// 0x0010 (0x0630 - 0x0620)
class UHWAbilityPromptRadialGodSelector final : public UHWAbilityPromptRadialWidget
{
public:
	uint8                                         Pad_620[0x8];                                      // 0x0620(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreLocalPlayer;                                // 0x0628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAbilityConfirm();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptRadialGodSelector">();
	}
	static class UHWAbilityPromptRadialGodSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptRadialGodSelector>();
	}
};
static_assert(alignof(UHWAbilityPromptRadialGodSelector) == 0x000008, "Wrong alignment on UHWAbilityPromptRadialGodSelector");
static_assert(sizeof(UHWAbilityPromptRadialGodSelector) == 0x000630, "Wrong size on UHWAbilityPromptRadialGodSelector");
static_assert(offsetof(UHWAbilityPromptRadialGodSelector, bIgnoreLocalPlayer) == 0x000628, "Member 'UHWAbilityPromptRadialGodSelector::bIgnoreLocalPlayer' has a wrong offset!");

// Class HemingwayUI.HWTradePopupEntryWidget
// 0x0048 (0x0640 - 0x05F8)
class UHWTradePopupEntryWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole)> OnRoleEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole)> OnRoleEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole)> OnRoleEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class AHWPlayerState*                         CachedPlayerState;                                 // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECharacterRole                                EntryRole;                                         // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWTradeRequestResult                         CachedTradeResult;                                 // 0x0631(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWTradeEntryState                            EntryState;                                        // 0x0632(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_633[0x5];                                      // 0x0633(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void HandleEntryButtonUnhovered();
	void HandlePlayerStateReceivedRoleSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void SetPlayerState(class AHWPlayerState* InPlayerState);
	void UpdateEntryDisplayState();

	bool CanLocalPlayerClaimEntry() const;
	ECharacterRole GetEntryRole() const;
	class FString GetPlayerName() const;
	class AHWPlayerState* GetPlayerState() const;
	bool IsLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTradePopupEntryWidget">();
	}
	static class UHWTradePopupEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTradePopupEntryWidget>();
	}
};
static_assert(alignof(UHWTradePopupEntryWidget) == 0x000008, "Wrong alignment on UHWTradePopupEntryWidget");
static_assert(sizeof(UHWTradePopupEntryWidget) == 0x000640, "Wrong size on UHWTradePopupEntryWidget");
static_assert(offsetof(UHWTradePopupEntryWidget, OnRoleEntryHovered) == 0x0005F8, "Member 'UHWTradePopupEntryWidget::OnRoleEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, OnRoleEntryUnhovered) == 0x000608, "Member 'UHWTradePopupEntryWidget::OnRoleEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, OnRoleEntrySelected) == 0x000618, "Member 'UHWTradePopupEntryWidget::OnRoleEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, CachedPlayerState) == 0x000628, "Member 'UHWTradePopupEntryWidget::CachedPlayerState' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, EntryRole) == 0x000630, "Member 'UHWTradePopupEntryWidget::EntryRole' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, CachedTradeResult) == 0x000631, "Member 'UHWTradePopupEntryWidget::CachedTradeResult' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, EntryState) == 0x000632, "Member 'UHWTradePopupEntryWidget::EntryState' has a wrong offset!");
static_assert(offsetof(UHWTradePopupEntryWidget, HitTarget) == 0x000638, "Member 'UHWTradePopupEntryWidget::HitTarget' has a wrong offset!");

// Class HemingwayUI.HWHUDLayoutPresetData
// 0x0050 (0x0080 - 0x0030)
class UHWHUDLayoutPresetData final : public UDataAsset
{
public:
	TMap<EHWHUDLayoutPreset, struct FHWHUDLayoutPresetWidgets> LayoutPresets;                        // 0x0030(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDLayoutPresetData">();
	}
	static class UHWHUDLayoutPresetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDLayoutPresetData>();
	}
};
static_assert(alignof(UHWHUDLayoutPresetData) == 0x000008, "Wrong alignment on UHWHUDLayoutPresetData");
static_assert(sizeof(UHWHUDLayoutPresetData) == 0x000080, "Wrong size on UHWHUDLayoutPresetData");
static_assert(offsetof(UHWHUDLayoutPresetData, LayoutPresets) == 0x000030, "Member 'UHWHUDLayoutPresetData::LayoutPresets' has a wrong offset!");

// Class HemingwayUI.HWTradePopupProposalEntryWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWTradePopupProposalEntryWidget final : public UHWWidget
{
public:
	class AHWPlayerState*                         CachedPlayerState;                                 // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPlayerState(class AHWPlayerState* InPlayerState);

	bool IsLocalPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTradePopupProposalEntryWidget">();
	}
	static class UHWTradePopupProposalEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTradePopupProposalEntryWidget>();
	}
};
static_assert(alignof(UHWTradePopupProposalEntryWidget) == 0x000008, "Wrong alignment on UHWTradePopupProposalEntryWidget");
static_assert(sizeof(UHWTradePopupProposalEntryWidget) == 0x000600, "Wrong size on UHWTradePopupProposalEntryWidget");
static_assert(offsetof(UHWTradePopupProposalEntryWidget, CachedPlayerState) == 0x0005F8, "Member 'UHWTradePopupProposalEntryWidget::CachedPlayerState' has a wrong offset!");

// Class HemingwayUI.HWCanvasPanel
// 0x0000 (0x01A8 - 0x01A8)
class UHWCanvasPanel : public URHCanvasPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCanvasPanel">();
	}
	static class UHWCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCanvasPanel>();
	}
};
static_assert(alignof(UHWCanvasPanel) == 0x000008, "Wrong alignment on UHWCanvasPanel");
static_assert(sizeof(UHWCanvasPanel) == 0x0001A8, "Wrong size on UHWCanvasPanel");

// Class HemingwayUI.HWTradePopupScreenWidget
// 0x0130 (0x0728 - 0x05F8)
class UHWTradePopupScreenWidget final : public UHWWidget
{
public:
	EHWTradeRequestResult                         CachedLocalPlayerTradeResult;                      // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CachedTradePartnerPlayerState;                     // 0x0600(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTradeSender;                                    // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWVerticalBox*                         RoleList;                                          // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTradePopupProposalEntryWidget*       TradeTargetWidget;                                 // 0x0618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTradePopupProposalEntryWidget*       TradeOwnerWidget;                                  // 0x0620(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           TimerText;                                         // 0x0628(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      InfoSwitcher;                                      // 0x0630(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0x10];                                     // 0x0638(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ClosePopupAction;                                  // 0x0648(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            DeclineTradeAction;                                // 0x0690(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            AcceptTradeAction;                                 // 0x06D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWPlayerState*                         CachedHoveredPlayerState;                          // 0x0720(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void HandleAcceptTradeAction();
	void HandleDeclineTradeAction();
	void HandleEntryButtonHovered(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole);
	void HandleEntryButtonSelected(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole);
	void HandleEntryButtonUnhovered(class UHWTradePopupEntryWidget* EntryWidget, ECharacterRole CharacterRole);
	void HandleLocalPlayerStateAssignedRoleChanged(ECharacterRole AssignedRole);
	void HandleLocalPlayerStateReceivedRoleSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void HandleLocalPlayerStateRejectedTradeListUpdated(TArray<class AHWPlayerState*>* RejectedTradeList);
	void HandlePlayerStateReplicated(class AHWPlayerState* PlayerState);
	void HandleProposeTradeButtonSelected(ECharacterRole CharacterRole);
	void HandleRoleSwapTradeAccepted(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleRoleSwapTradeDeclined(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleRoleSwapTradeRequested(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleRoleSwapTradeTimedOut(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState);
	void HandleTeamPlayerStateAssignedRoleChanged(ECharacterRole AssignedRole);
	void HandleTeamPlayerStateReceivedRoleSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);

	bool CanDeclineTradeWith(class AHWPlayerState* TradePlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTradePopupScreenWidget">();
	}
	static class UHWTradePopupScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTradePopupScreenWidget>();
	}
};
static_assert(alignof(UHWTradePopupScreenWidget) == 0x000008, "Wrong alignment on UHWTradePopupScreenWidget");
static_assert(sizeof(UHWTradePopupScreenWidget) == 0x000728, "Wrong size on UHWTradePopupScreenWidget");
static_assert(offsetof(UHWTradePopupScreenWidget, CachedLocalPlayerTradeResult) == 0x0005F8, "Member 'UHWTradePopupScreenWidget::CachedLocalPlayerTradeResult' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, CachedTradePartnerPlayerState) == 0x000600, "Member 'UHWTradePopupScreenWidget::CachedTradePartnerPlayerState' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, bIsTradeSender) == 0x000608, "Member 'UHWTradePopupScreenWidget::bIsTradeSender' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, RoleList) == 0x000610, "Member 'UHWTradePopupScreenWidget::RoleList' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, TradeTargetWidget) == 0x000618, "Member 'UHWTradePopupScreenWidget::TradeTargetWidget' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, TradeOwnerWidget) == 0x000620, "Member 'UHWTradePopupScreenWidget::TradeOwnerWidget' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, TimerText) == 0x000628, "Member 'UHWTradePopupScreenWidget::TimerText' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, InfoSwitcher) == 0x000630, "Member 'UHWTradePopupScreenWidget::InfoSwitcher' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, ClosePopupAction) == 0x000648, "Member 'UHWTradePopupScreenWidget::ClosePopupAction' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, DeclineTradeAction) == 0x000690, "Member 'UHWTradePopupScreenWidget::DeclineTradeAction' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, AcceptTradeAction) == 0x0006D8, "Member 'UHWTradePopupScreenWidget::AcceptTradeAction' has a wrong offset!");
static_assert(offsetof(UHWTradePopupScreenWidget, CachedHoveredPlayerState) == 0x000720, "Member 'UHWTradePopupScreenWidget::CachedHoveredPlayerState' has a wrong offset!");

// Class HemingwayUI.HWEquipmentLevelPipWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWEquipmentLevelPipWidget final : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void IsFilledUpdated();
	void SetIsFilled(bool bNewIsFilled);
	void SetPipColor(const struct FGameplayTag& ColorTag);

	bool GetIsFilled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentLevelPipWidget">();
	}
	static class UHWEquipmentLevelPipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentLevelPipWidget>();
	}
};
static_assert(alignof(UHWEquipmentLevelPipWidget) == 0x000008, "Wrong alignment on UHWEquipmentLevelPipWidget");
static_assert(sizeof(UHWEquipmentLevelPipWidget) == 0x000600, "Wrong size on UHWEquipmentLevelPipWidget");

// Class HemingwayUI.HWVerticalBox
// 0x0010 (0x01B8 - 0x01A8)
class UHWVerticalBox final : public UVerticalBox
{
public:
	EHWGridNavigationRule                         NavigationRule;                                    // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationRule                             RuleEdgeReached;                                   // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWUINavigationEdgeCustomBehavior             EdgeCustomBehavior;                                // 0x01AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AB[0xD];                                      // 0x01AB(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildNavigation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWVerticalBox">();
	}
	static class UHWVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWVerticalBox>();
	}
};
static_assert(alignof(UHWVerticalBox) == 0x000008, "Wrong alignment on UHWVerticalBox");
static_assert(sizeof(UHWVerticalBox) == 0x0001B8, "Wrong size on UHWVerticalBox");
static_assert(offsetof(UHWVerticalBox, NavigationRule) == 0x0001A8, "Member 'UHWVerticalBox::NavigationRule' has a wrong offset!");
static_assert(offsetof(UHWVerticalBox, RuleEdgeReached) == 0x0001A9, "Member 'UHWVerticalBox::RuleEdgeReached' has a wrong offset!");
static_assert(offsetof(UHWVerticalBox, EdgeCustomBehavior) == 0x0001AA, "Member 'UHWVerticalBox::EdgeCustomBehavior' has a wrong offset!");

// Class HemingwayUI.HWScoreboardTeamWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWScoreboardTeamWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class AHWTeamState>            TrackedTeam;                                       // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpectator;                                      // 0x0600(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_601[0x2F];                                     // 0x0601(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBox*                           PlayerContainer;                                   // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                PlayerWidgetPadding;                               // 0x0638(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWScoreboardPlayerWidget>  PlayerWidgetClass;                                 // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWScoreboardPlayerWidget>  EnemyPlayerWidgetClass;                            // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWScoreboardPlayerWidget*>      PlayerWidgets;                                     // 0x0658(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x18];                                     // 0x0668(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldShowStates;                                 // 0x0680(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCachedTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleFireGiantKillsUpdated(class AHWTeamState* TeamState, int32 FireGiantKills);
	void HandleGoldFuryKillsUpdated(class AHWTeamState* TeamState, int32 GoldFuryKills);
	void HandleTeamAssistsUpdated(class AHWTeamState* TeamState, int32 TeamAssists);
	void HandleTeamDeathsUpdated(class AHWTeamState* TeamState, int32 TeamDeaths);
	void HandleTeamGoldEarnedUpdated(class AHWTeamState* TeamState, int32 TeamGoldEarned);
	void HandleTeamKillsUpdated(class AHWTeamState* TeamState, int32 TeamKills);
	void HandleTeamMembersUpdated();
	void HandleTeamStatsTrackerReplicated(class AHWTeamState* TeamState, class AHWTeamStatsTracker* TeamStatsTracker);
	void OnPlayerMuteSelected(class UHWScoreboardPlayerWidget* PlayerWidget, class AHWPlayerState* SelectedPlayer);
	void TeamMemberAdded(class UHWScoreboardPlayerWidget* TeamMemberWidget);
	void TeamMembersCleared();
	void TeamMembersUpdated();
	void UpdatedFireGiantKills(int32 FireGiantKills);
	void UpdatedGoldFuryKills(int32 GoldFuryKills);
	void UpdatedTotalAssists(int32 TotalAssists);
	void UpdatedTotalDeaths(int32 TotalDeaths);
	void UpdatedTotalGold(int32 TeamGoldEarned);
	void UpdatedTotalKills(int32 TotalKills);
	void UpdatedTrackedTeam(class AHWTeamState* NewTeamState);

	TArray<class UHWScoreboardPlayerWidget*> GetPlayerWidgets() const;
	class AHWTeamState* GetTrackedTeam() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScoreboardTeamWidget">();
	}
	static class UHWScoreboardTeamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScoreboardTeamWidget>();
	}
};
static_assert(alignof(UHWScoreboardTeamWidget) == 0x000008, "Wrong alignment on UHWScoreboardTeamWidget");
static_assert(sizeof(UHWScoreboardTeamWidget) == 0x000688, "Wrong size on UHWScoreboardTeamWidget");
static_assert(offsetof(UHWScoreboardTeamWidget, TrackedTeam) == 0x0005F8, "Member 'UHWScoreboardTeamWidget::TrackedTeam' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, bIsSpectator) == 0x000600, "Member 'UHWScoreboardTeamWidget::bIsSpectator' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, PlayerContainer) == 0x000630, "Member 'UHWScoreboardTeamWidget::PlayerContainer' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, PlayerWidgetPadding) == 0x000638, "Member 'UHWScoreboardTeamWidget::PlayerWidgetPadding' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, PlayerWidgetClass) == 0x000648, "Member 'UHWScoreboardTeamWidget::PlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, EnemyPlayerWidgetClass) == 0x000650, "Member 'UHWScoreboardTeamWidget::EnemyPlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, PlayerWidgets) == 0x000658, "Member 'UHWScoreboardTeamWidget::PlayerWidgets' has a wrong offset!");
static_assert(offsetof(UHWScoreboardTeamWidget, bShouldShowStates) == 0x000680, "Member 'UHWScoreboardTeamWidget::bShouldShowStates' has a wrong offset!");

// Class HemingwayUI.HWVGSWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWVGSWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x18];                                     // 0x05F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	ERH_INPUT_STATE                               CurrentInputState;                                 // 0x0610(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseMenu(bool bBroadcast);
	bool GetEntriesForMenu(const struct FGameplayTag& MenuId, TArray<struct FHWVGSUIEntry>* OutMenuEntries);
	void HandleInputStateChanged(ERH_INPUT_STATE NewState);
	void HandlePlayerStateReplicated(class AHWPlayerState* InPlayerState);
	void HandleVGSManagerReplicated(class AHWVGSManager* VGSManager);
	void HandleVGSMenuIdUpdated(const struct FGameplayTag& MenuId);
	bool OpenMenu(const struct FGameplayTag& MenuId, TArray<struct FHWVGSUIEntry>* OutMenuEntries);

	const class UInputMappingContext* GetVGSInputContext() const;
	class AHWVGSManager* GetVGSManager() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWVGSWidget">();
	}
	static class UHWVGSWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWVGSWidget>();
	}
};
static_assert(alignof(UHWVGSWidget) == 0x000008, "Wrong alignment on UHWVGSWidget");
static_assert(sizeof(UHWVGSWidget) == 0x000618, "Wrong size on UHWVGSWidget");
static_assert(offsetof(UHWVGSWidget, CurrentInputState) == 0x000610, "Member 'UHWVGSWidget::CurrentInputState' has a wrong offset!");

// Class HemingwayUI.HWInputViewRouteData
// 0x0008 (0x0030 - 0x0028)
class UHWInputViewRouteData final : public UObject
{
public:
	struct FGameplayTag                           InputTag;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInputViewRouteData">();
	}
	static class UHWInputViewRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInputViewRouteData>();
	}
};
static_assert(alignof(UHWInputViewRouteData) == 0x000008, "Wrong alignment on UHWInputViewRouteData");
static_assert(sizeof(UHWInputViewRouteData) == 0x000030, "Wrong size on UHWInputViewRouteData");
static_assert(offsetof(UHWInputViewRouteData, InputTag) == 0x000028, "Member 'UHWInputViewRouteData::InputTag' has a wrong offset!");

// Class HemingwayUI.HWViewRedirectContext
// 0x0070 (0x0098 - 0x0028)
class UHWViewRedirectContext final : public UObject
{
public:
	struct FRH_ItemId                             ItemId;                                            // 0x0028(0x0014)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCollectionItem>       CollectionItem;                                    // 0x0040(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWViewRedirectType                           RedirectType;                                      // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCharacterItem>        AssociatedCharacterItem;                           // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWViewRedirectContext">();
	}
	static class UHWViewRedirectContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWViewRedirectContext>();
	}
};
static_assert(alignof(UHWViewRedirectContext) == 0x000008, "Wrong alignment on UHWViewRedirectContext");
static_assert(sizeof(UHWViewRedirectContext) == 0x000098, "Wrong size on UHWViewRedirectContext");
static_assert(offsetof(UHWViewRedirectContext, ItemId) == 0x000028, "Member 'UHWViewRedirectContext::ItemId' has a wrong offset!");
static_assert(offsetof(UHWViewRedirectContext, CollectionItem) == 0x000040, "Member 'UHWViewRedirectContext::CollectionItem' has a wrong offset!");
static_assert(offsetof(UHWViewRedirectContext, RedirectType) == 0x000068, "Member 'UHWViewRedirectContext::RedirectType' has a wrong offset!");
static_assert(offsetof(UHWViewRedirectContext, AssociatedCharacterItem) == 0x000070, "Member 'UHWViewRedirectContext::AssociatedCharacterItem' has a wrong offset!");

// Class HemingwayUI.HWPlayerInfoDisplayWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWPlayerInfoDisplayWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class URH_PlayerInfo>          MyPlayerInfo;                                      // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackPlayerLevel;                                 // 0x0600(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_RHFriendAndPlatformFriend*          MyRHFriend;                                        // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayPlayerLevel(int32 PlayerLevel);
	void GetPlayerPlatform(const TDelegate<void(ERHPlatformDisplayType PlatformType)>& Delegate);
	void OnPartyMemberChanged(const struct FGuid& PlayerUuid);
	void OnPlayerPresenceUpdated(class URH_PlayerInfoSubobject* PlayerPresence);
	void OnPlayerProgressionLoaded();
	void RHUpdateFriends(class URH_RHFriendAndPlatformFriend* Friend);
	void SetPlayerInfo(class URH_PlayerInfo* PlayerInfo);

	int32 GetPlayerLevel() const;
	class AHWPlayerState* GetPlayerState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerInfoDisplayWidget">();
	}
	static class UHWPlayerInfoDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerInfoDisplayWidget>();
	}
};
static_assert(alignof(UHWPlayerInfoDisplayWidget) == 0x000008, "Wrong alignment on UHWPlayerInfoDisplayWidget");
static_assert(sizeof(UHWPlayerInfoDisplayWidget) == 0x000610, "Wrong size on UHWPlayerInfoDisplayWidget");
static_assert(offsetof(UHWPlayerInfoDisplayWidget, MyPlayerInfo) == 0x0005F8, "Member 'UHWPlayerInfoDisplayWidget::MyPlayerInfo' has a wrong offset!");
static_assert(offsetof(UHWPlayerInfoDisplayWidget, bTrackPlayerLevel) == 0x000600, "Member 'UHWPlayerInfoDisplayWidget::bTrackPlayerLevel' has a wrong offset!");
static_assert(offsetof(UHWPlayerInfoDisplayWidget, MyRHFriend) == 0x000608, "Member 'UHWPlayerInfoDisplayWidget::MyRHFriend' has a wrong offset!");

// Class HemingwayUI.HWPlayerContextMenuWidget
// 0x0018 (0x0628 - 0x0610)
class UHWPlayerContextMenuWidget : public UHWPlayerInfoDisplayWidget
{
public:
	TMulticastInlineDelegate<void(EHWPlayerContextActions EntryAction, const struct FGuid& PlayerUuid)> OnPlayerContextMenuEntryClicked; // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FHWPlatformBool                        bAllowActivateBoostButton;                         // 0x0620(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_623[0x5];                                      // 0x0623(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActivateBoostButtonClicked();
	void HandleExitButtonClicked();
	void HandleMuteAllButtonClicked();
	void HandleMutePingsButtonClicked();
	void HandleMuteTextButtonClicked();
	void HandleMuteVGSButtonClicked();
	void HandleMuteVoiceButtonClicked();
	void HandleReportButtonClicked();
	void HandleTradeGodsButtonClicked();
	void HandleTradeRolesButtonClicked();
	void HandleViewProfileButtonClicked();
	void ShowContextMenu(class URH_PlayerInfo* PlayerInfo, const struct FGeometry& ReferenceGeometry);

	class URH_PlayerInfo* GetPlayerInfo() const;
	bool ShouldShowActivateBoostButton() const;
	bool ShouldShowMuteAllButton() const;
	bool ShouldShowMutePingsButton() const;
	bool ShouldShowMuteTextButton() const;
	bool ShouldShowMuteVGSButton() const;
	bool ShouldShowMuteVoiceButton() const;
	bool ShouldShowReportButton() const;
	bool ShouldShowTradeGodsButton() const;
	bool ShouldShowTradeRolesButton() const;
	bool ShouldShowViewProfileButton() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerContextMenuWidget">();
	}
	static class UHWPlayerContextMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerContextMenuWidget>();
	}
};
static_assert(alignof(UHWPlayerContextMenuWidget) == 0x000008, "Wrong alignment on UHWPlayerContextMenuWidget");
static_assert(sizeof(UHWPlayerContextMenuWidget) == 0x000628, "Wrong size on UHWPlayerContextMenuWidget");
static_assert(offsetof(UHWPlayerContextMenuWidget, OnPlayerContextMenuEntryClicked) == 0x000610, "Member 'UHWPlayerContextMenuWidget::OnPlayerContextMenuEntryClicked' has a wrong offset!");
static_assert(offsetof(UHWPlayerContextMenuWidget, bAllowActivateBoostButton) == 0x000620, "Member 'UHWPlayerContextMenuWidget::bAllowActivateBoostButton' has a wrong offset!");

// Class HemingwayUI.HWRadialMenuEntryWidget
// 0x0098 (0x0690 - 0x05F8)
class UHWRadialMenuEntryWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData)> OnRadialMenuEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData)> OnRadialMenuEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData)> OnRadialMenuEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class UTexture2D*                             SegmentTexture;                                    // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             HighlightTexture;                                  // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWRadialMenuPageEntry                 EntryData;                                         // 0x0638(0x0048)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UHWImage*                               BackgroundImage;                                   // 0x0680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           EntryContainer;                                    // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DoHover();
	void DoSelect();
	void DoUnhover();
	void SetEntryData(const struct FHWRadialMenuPageEntry& InEntryData);
	void SetRadialSegmentInfo(float MenuOuterRadius, float MenuInnerRadius, float EntryOffset, float DisplayDegrees, float DisplayRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRadialMenuEntryWidget">();
	}
	static class UHWRadialMenuEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRadialMenuEntryWidget>();
	}
};
static_assert(alignof(UHWRadialMenuEntryWidget) == 0x000008, "Wrong alignment on UHWRadialMenuEntryWidget");
static_assert(sizeof(UHWRadialMenuEntryWidget) == 0x000690, "Wrong size on UHWRadialMenuEntryWidget");
static_assert(offsetof(UHWRadialMenuEntryWidget, OnRadialMenuEntryHovered) == 0x0005F8, "Member 'UHWRadialMenuEntryWidget::OnRadialMenuEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, OnRadialMenuEntryUnhovered) == 0x000608, "Member 'UHWRadialMenuEntryWidget::OnRadialMenuEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, OnRadialMenuEntrySelected) == 0x000618, "Member 'UHWRadialMenuEntryWidget::OnRadialMenuEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, SegmentTexture) == 0x000628, "Member 'UHWRadialMenuEntryWidget::SegmentTexture' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, HighlightTexture) == 0x000630, "Member 'UHWRadialMenuEntryWidget::HighlightTexture' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, EntryData) == 0x000638, "Member 'UHWRadialMenuEntryWidget::EntryData' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, BackgroundImage) == 0x000680, "Member 'UHWRadialMenuEntryWidget::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuEntryWidget, EntryContainer) == 0x000688, "Member 'UHWRadialMenuEntryWidget::EntryContainer' has a wrong offset!");

// Class HemingwayUI.HWVoiceChatEntryWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWVoiceChatEntryWidget : public UHWWidget
{
public:
	struct FGuid                                  CurrentlyDisplayedPlayerUuid;                      // 0x05F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearTalkingPlayerDisplay();
	void OnClearTalkingPlayerDisplayComplete();
	void SetTalkingPlayer(const class AHWPlayerState* PlayerState);
	void UpdateTalkingPlayerName(class URH_PlayerInfo* PlayerInfo);
	void UpdateTalkingPlayerPlatformIcon(ERHPlatformDisplayType PlatformDisplayType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWVoiceChatEntryWidget">();
	}
	static class UHWVoiceChatEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWVoiceChatEntryWidget>();
	}
};
static_assert(alignof(UHWVoiceChatEntryWidget) == 0x000008, "Wrong alignment on UHWVoiceChatEntryWidget");
static_assert(sizeof(UHWVoiceChatEntryWidget) == 0x000608, "Wrong size on UHWVoiceChatEntryWidget");
static_assert(offsetof(UHWVoiceChatEntryWidget, CurrentlyDisplayedPlayerUuid) == 0x0005F8, "Member 'UHWVoiceChatEntryWidget::CurrentlyDisplayedPlayerUuid' has a wrong offset!");

// Class HemingwayUI.HWSlider
// 0x0000 (0x0730 - 0x0730)
class UHWSlider final : public USlider
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSlider">();
	}
	static class UHWSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSlider>();
	}
};
static_assert(alignof(UHWSlider) == 0x000010, "Wrong alignment on UHWSlider");
static_assert(sizeof(UHWSlider) == 0x000730, "Wrong size on UHWSlider");

// Class HemingwayUI.HWVoiceChatWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWVoiceChatWidget : public UHWWidget
{
public:
	TArray<class UHWVoiceChatEntryWidget*>        VoiceChatEntryWidgets;                             // 0x05F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class UHWVoiceChatEntryWidget* CreateVoiceChatEntryWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWVoiceChatWidget">();
	}
	static class UHWVoiceChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWVoiceChatWidget>();
	}
};
static_assert(alignof(UHWVoiceChatWidget) == 0x000008, "Wrong alignment on UHWVoiceChatWidget");
static_assert(sizeof(UHWVoiceChatWidget) == 0x000608, "Wrong size on UHWVoiceChatWidget");
static_assert(offsetof(UHWVoiceChatWidget, VoiceChatEntryWidgets) == 0x0005F8, "Member 'UHWVoiceChatWidget::VoiceChatEntryWidgets' has a wrong offset!");

// Class HemingwayUI.HWCustomBotSelectRouteData
// 0x0008 (0x0030 - 0x0028)
class UHWCustomBotSelectRouteData final : public UObject
{
public:
	int32                                         TeamNum;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCustomBotSelectRouteData">();
	}
	static class UHWCustomBotSelectRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCustomBotSelectRouteData>();
	}
};
static_assert(alignof(UHWCustomBotSelectRouteData) == 0x000008, "Wrong alignment on UHWCustomBotSelectRouteData");
static_assert(sizeof(UHWCustomBotSelectRouteData) == 0x000030, "Wrong size on UHWCustomBotSelectRouteData");
static_assert(offsetof(UHWCustomBotSelectRouteData, TeamNum) == 0x000028, "Member 'UHWCustomBotSelectRouteData::TeamNum' has a wrong offset!");

// Class HemingwayUI.HWCustomBotSelectorWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWCustomBotSelectorWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x20];                                     // 0x05F8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWGodSelectorWidget*                   GodSelector;                                       // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ConfirmBotSelection();
	void FillTeamWithBots();
	void HandleOnSelectedGodChanged();
	void SetSelectedDifficulty(EHWBotDifficulty InDifficulty);
	void UpdateDetailedGodDisplay(const class UHWCharacterItem* GodItem);

	int32 GetAssociatedTeamNum() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCustomBotSelectorWidget">();
	}
	static class UHWCustomBotSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCustomBotSelectorWidget>();
	}
};
static_assert(alignof(UHWCustomBotSelectorWidget) == 0x000008, "Wrong alignment on UHWCustomBotSelectorWidget");
static_assert(sizeof(UHWCustomBotSelectorWidget) == 0x000620, "Wrong size on UHWCustomBotSelectorWidget");
static_assert(offsetof(UHWCustomBotSelectorWidget, GodSelector) == 0x000618, "Member 'UHWCustomBotSelectorWidget::GodSelector' has a wrong offset!");

// Class HemingwayUI.HWGameHUD
// 0x00E0 (0x0788 - 0x06A8)
class AHWGameHUD : public AHWBaseHUD
{
public:
	EHWHUDABTestingType                           HUDABTestingType;                                  // 0x06A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UHWBaseHUDWidget>>   AvailableHUDWidgetClasses;                         // 0x06B0(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bIsPingCursorActive)> OnTogglePingCursor;                     // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ToggleMouseCursorTag;                              // 0x06D0(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bToggleMouseCursorPressed;                         // 0x06D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTogglePingCursorPressed;                          // 0x06D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6DA[0xE];                                      // 0x06DA(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AHWCharacterAbilitySystemActor* NewABSActor)> OnLocalPlayerAbilitySystemActorChanged; // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGenericTeamId& NewTeamId)> OnLocalPlayerTeamChanged; // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayCueParameters& DamageParameters)> OnLocalPlayerDamageTaken; // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DamageFeedbackTags;                                // 0x0718(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWBaseHUDWidget>           PostMatchHUDWidgetClass;                           // 0x0738(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_740[0xC];                                      // 0x0740(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HUDNavigationTag;                                  // 0x074C(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_754[0x4];                                      // 0x0754(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPlayerInventoryTrackerInitialized;               // 0x0758(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UHWPlayerInventoryTrackingWidget*       PlayerInventoryTrackingWidget;                     // 0x0768(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSupportsHUDEditor;                                // 0x0770(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWHUDEditorLayoutManager*              HUDEditorLayoutManager;                            // 0x0778(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        bIsHUDEditorEnabled;                               // 0x0780(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_783[0x5];                                      // 0x0783(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DebugLogin(const class FString& Name_0);
	void HandleClientLoadStateChanged();
	void HandleLocalAbilitySystemActorChanged(class AHWPlayerState* PlayerState, class AHWCharacterAbilitySystemActor* NewABSActor);
	void HandlePlayerInputStateChanged(ERH_INPUT_STATE InputState);
	void HandleTeamUpdated(class AHWCharacterAbilitySystemActor* OwningAbilitySystemActor, class AHWTeamState* UpdatedTeam);
	void OverrideShowItemCooldowns(bool bShouldShow);
	void SetAnalogNavigation(bool bAllowAnalogNavigation);
	void ShowAutoBuyBuildSelector();
	void ShowMinutesForDurations(bool bInShowMinutes);
	void TestAccolade(const class FString& AccoladeTag);
	void TestHelpTip(bool bShow, const class FString& HelpTipTag);
	void UpdateAnalogNavigation();
	void UpdateReticleShape();

	class AHWCharacterAbilitySystemActor* GetControlledAbilitySystemActor() const;
	class UHWHelpTipWidget* GetHelpTipWidget() const;
	class UHWHUDEditorLayoutManager* GetHUDEditorLayoutManager() const;
	ETeamAttitude GetLocalAttitudeTowardsActor(const class AActor* Actor) const;
	ETeamAttitude GetLocalAttitudeTowardsTeamId(const struct FGenericTeamId& TeamId) const;
	class AHWTeamState* GetLocalTeam() const;
	struct FGenericTeamId GetLocalTeamId() const;
	struct FGenericTeamId GetNeutralTeamId() const;
	TArray<struct FGenericTeamId> GetOpposingTeamIds() const;
	bool GetShouldShowMinutesForDurations() const;
	class AHWTeamState* GetTeam(const struct FGenericTeamId& TeamId) const;
	bool IsAnalogNavigationEnabled() const;
	bool IsPingCursorEnabled() const;
	bool IsSpectatorHUD() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameHUD">();
	}
	static class AHWGameHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWGameHUD>();
	}
};
static_assert(alignof(AHWGameHUD) == 0x000008, "Wrong alignment on AHWGameHUD");
static_assert(sizeof(AHWGameHUD) == 0x000788, "Wrong size on AHWGameHUD");
static_assert(offsetof(AHWGameHUD, HUDABTestingType) == 0x0006A8, "Member 'AHWGameHUD::HUDABTestingType' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, AvailableHUDWidgetClasses) == 0x0006B0, "Member 'AHWGameHUD::AvailableHUDWidgetClasses' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, OnTogglePingCursor) == 0x0006C0, "Member 'AHWGameHUD::OnTogglePingCursor' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, ToggleMouseCursorTag) == 0x0006D0, "Member 'AHWGameHUD::ToggleMouseCursorTag' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, bToggleMouseCursorPressed) == 0x0006D8, "Member 'AHWGameHUD::bToggleMouseCursorPressed' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, bTogglePingCursorPressed) == 0x0006D9, "Member 'AHWGameHUD::bTogglePingCursorPressed' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, OnLocalPlayerAbilitySystemActorChanged) == 0x0006E8, "Member 'AHWGameHUD::OnLocalPlayerAbilitySystemActorChanged' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, OnLocalPlayerTeamChanged) == 0x0006F8, "Member 'AHWGameHUD::OnLocalPlayerTeamChanged' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, OnLocalPlayerDamageTaken) == 0x000708, "Member 'AHWGameHUD::OnLocalPlayerDamageTaken' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, DamageFeedbackTags) == 0x000718, "Member 'AHWGameHUD::DamageFeedbackTags' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, PostMatchHUDWidgetClass) == 0x000738, "Member 'AHWGameHUD::PostMatchHUDWidgetClass' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, HUDNavigationTag) == 0x00074C, "Member 'AHWGameHUD::HUDNavigationTag' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, OnPlayerInventoryTrackerInitialized) == 0x000758, "Member 'AHWGameHUD::OnPlayerInventoryTrackerInitialized' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, PlayerInventoryTrackingWidget) == 0x000768, "Member 'AHWGameHUD::PlayerInventoryTrackingWidget' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, bSupportsHUDEditor) == 0x000770, "Member 'AHWGameHUD::bSupportsHUDEditor' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, HUDEditorLayoutManager) == 0x000778, "Member 'AHWGameHUD::HUDEditorLayoutManager' has a wrong offset!");
static_assert(offsetof(AHWGameHUD, bIsHUDEditorEnabled) == 0x000780, "Member 'AHWGameHUD::bIsHUDEditorEnabled' has a wrong offset!");

// Class HemingwayUI.HWCustomGameLobby
// 0x0000 (0x0690 - 0x0690)
class UHWCustomGameLobby : public URHCustomGameLobby
{
public:
	void UpdateDoNotTrack(bool bDoNotTrack);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCustomGameLobby">();
	}
	static class UHWCustomGameLobby* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCustomGameLobby>();
	}
};
static_assert(alignof(UHWCustomGameLobby) == 0x000008, "Wrong alignment on UHWCustomGameLobby");
static_assert(sizeof(UHWCustomGameLobby) == 0x000690, "Wrong size on UHWCustomGameLobby");

// Class HemingwayUI.HWDynamicAnnouncementWidget
// 0x00E8 (0x06E0 - 0x05F8)
class UHWDynamicAnnouncementWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              AnnouncementTextTable;                             // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FHWDynamicAnnouncementText> AnnouncementTexts;                          // 0x0620(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAreDynamicAnnouncementEnabled;                    // 0x0670(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x6F];                                     // 0x0671(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddActiveAnnouncement(const class FName& AnnouncementName, const class FString& KV);
	void RemoveActiveAnnouncement(const class FName& AnnouncementName);
	void UpdateDisplayedText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDynamicAnnouncementWidget">();
	}
	static class UHWDynamicAnnouncementWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDynamicAnnouncementWidget>();
	}
};
static_assert(alignof(UHWDynamicAnnouncementWidget) == 0x000008, "Wrong alignment on UHWDynamicAnnouncementWidget");
static_assert(sizeof(UHWDynamicAnnouncementWidget) == 0x0006E0, "Wrong size on UHWDynamicAnnouncementWidget");
static_assert(offsetof(UHWDynamicAnnouncementWidget, AnnouncementTextTable) == 0x0005F8, "Member 'UHWDynamicAnnouncementWidget::AnnouncementTextTable' has a wrong offset!");
static_assert(offsetof(UHWDynamicAnnouncementWidget, AnnouncementTexts) == 0x000620, "Member 'UHWDynamicAnnouncementWidget::AnnouncementTexts' has a wrong offset!");
static_assert(offsetof(UHWDynamicAnnouncementWidget, bAreDynamicAnnouncementEnabled) == 0x000670, "Member 'UHWDynamicAnnouncementWidget::bAreDynamicAnnouncementEnabled' has a wrong offset!");

// Class HemingwayUI.HWCustomLobbyPlayer
// 0x0020 (0x0630 - 0x0610)
class UHWCustomLobbyPlayer : public URHCustomLobbyPlayer
{
public:
	struct FHWCustomBotConfig_Single              AssociatedBotConfig;                               // 0x0610(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsBotState;                                       // 0x0628(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void KickBot();
	void SetBot(const struct FHWCustomBotConfig_Single& botConfig);
	void SwapTeamBot();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCustomLobbyPlayer">();
	}
	static class UHWCustomLobbyPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCustomLobbyPlayer>();
	}
};
static_assert(alignof(UHWCustomLobbyPlayer) == 0x000008, "Wrong alignment on UHWCustomLobbyPlayer");
static_assert(sizeof(UHWCustomLobbyPlayer) == 0x000630, "Wrong size on UHWCustomLobbyPlayer");
static_assert(offsetof(UHWCustomLobbyPlayer, AssociatedBotConfig) == 0x000610, "Member 'UHWCustomLobbyPlayer::AssociatedBotConfig' has a wrong offset!");
static_assert(offsetof(UHWCustomLobbyPlayer, bIsBotState) == 0x000628, "Member 'UHWCustomLobbyPlayer::bIsBotState' has a wrong offset!");

// Class HemingwayUI.HWHelpTipRequest
// 0x0028 (0x0050 - 0x0028)
class UHWHelpTipRequest final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHelpTipRequest">();
	}
	static class UHWHelpTipRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHelpTipRequest>();
	}
};
static_assert(alignof(UHWHelpTipRequest) == 0x000008, "Wrong alignment on UHWHelpTipRequest");
static_assert(sizeof(UHWHelpTipRequest) == 0x000050, "Wrong size on UHWHelpTipRequest");

// Class HemingwayUI.HWMapButton
// 0x0108 (0x0700 - 0x05F8)
class UHWMapButton : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGameModeInfo                        GameModeInfo;                                      // 0x0608(0x00F8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void DisplayGameModeInfo();
	void OnButtonSelected();
	void SetSelected(bool bSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMapButton">();
	}
	static class UHWMapButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMapButton>();
	}
};
static_assert(alignof(UHWMapButton) == 0x000008, "Wrong alignment on UHWMapButton");
static_assert(sizeof(UHWMapButton) == 0x000700, "Wrong size on UHWMapButton");
static_assert(offsetof(UHWMapButton, GameModeInfo) == 0x000608, "Member 'UHWMapButton::GameModeInfo' has a wrong offset!");

// Class HemingwayUI.HWMapSelectWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWMapSelectWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWMapButton>               MapButtonClass;                                    // 0x05F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWMapButton*>                   MapButtons;                                        // 0x0600(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void ClearMapButtons();
	void OnMapButtonAdded(class UHWMapButton* NewMapButton);
	void OnMapButtonsPopulated();

	class UHWQueueDataFactory* GetHWQueueDataFactory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMapSelectWidget">();
	}
	static class UHWMapSelectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMapSelectWidget>();
	}
};
static_assert(alignof(UHWMapSelectWidget) == 0x000008, "Wrong alignment on UHWMapSelectWidget");
static_assert(sizeof(UHWMapSelectWidget) == 0x000610, "Wrong size on UHWMapSelectWidget");
static_assert(offsetof(UHWMapSelectWidget, MapButtonClass) == 0x0005F8, "Member 'UHWMapSelectWidget::MapButtonClass' has a wrong offset!");
static_assert(offsetof(UHWMapSelectWidget, MapButtons) == 0x000600, "Member 'UHWMapSelectWidget::MapButtons' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemFilterWidget
// 0x00C8 (0x06C0 - 0x05F8)
class UHWItemStoreItemFilterWidget : public UHWWidget
{
public:
	class UHWSortableGridPanel*                   FilterEntryContainer;                              // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreItemFilterEntry> FilterEntryClass;                                 // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  DividerEntryClass;                                 // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemFilterEntry*>    VisibleFilterEntries;                              // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemFilterEntry*>    ActiveFilterWidgets;                               // 0x0620(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& AddedFilterTag, const bool bShouldFilter)> OnFilterAdded; // 0x0638(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& RemovedFilterTag, const bool bShouldFilter)> OnFilterRemoved; // 0x0648(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const bool bClearSearchText, const bool bClearRoles)> OnClearFilters; // 0x0658(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FUIContextCalloutDisplay               BackContextCalloutDisplay;                         // 0x0668(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EHWItemStoreLayoutType                        CurrentLayout;                                     // 0x06B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddFilter(class UHWItemStoreItemFilterEntry* FilterWidget, bool bShouldClearFilters);
	void ClearFilters(const bool bClearSearchText, const bool bClearRoles);
	struct FGameplayTagContainer GetAllEntryTags();
	void OnFiltersChanged();
	void PlayerInputTypeChanged(bool bIsGamepad);
	void RemoveFilter(class UHWItemStoreItemFilterEntry* FilterWidget);
	void UpdateLayout(EHWItemStoreLayoutType Layout);

	const class UHWItemStoreItemFilterEntry* GetEntryToFocus() const;
	bool HasActiveFilters() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemFilterWidget">();
	}
	static class UHWItemStoreItemFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemFilterWidget>();
	}
};
static_assert(alignof(UHWItemStoreItemFilterWidget) == 0x000008, "Wrong alignment on UHWItemStoreItemFilterWidget");
static_assert(sizeof(UHWItemStoreItemFilterWidget) == 0x0006C0, "Wrong size on UHWItemStoreItemFilterWidget");
static_assert(offsetof(UHWItemStoreItemFilterWidget, FilterEntryContainer) == 0x0005F8, "Member 'UHWItemStoreItemFilterWidget::FilterEntryContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, FilterEntryClass) == 0x000600, "Member 'UHWItemStoreItemFilterWidget::FilterEntryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, DividerEntryClass) == 0x000608, "Member 'UHWItemStoreItemFilterWidget::DividerEntryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, VisibleFilterEntries) == 0x000610, "Member 'UHWItemStoreItemFilterWidget::VisibleFilterEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, ActiveFilterWidgets) == 0x000620, "Member 'UHWItemStoreItemFilterWidget::ActiveFilterWidgets' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, OnFilterAdded) == 0x000638, "Member 'UHWItemStoreItemFilterWidget::OnFilterAdded' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, OnFilterRemoved) == 0x000648, "Member 'UHWItemStoreItemFilterWidget::OnFilterRemoved' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, OnClearFilters) == 0x000658, "Member 'UHWItemStoreItemFilterWidget::OnClearFilters' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, BackContextCalloutDisplay) == 0x000668, "Member 'UHWItemStoreItemFilterWidget::BackContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemFilterWidget, CurrentLayout) == 0x0006B8, "Member 'UHWItemStoreItemFilterWidget::CurrentLayout' has a wrong offset!");

// Class HemingwayUI.HWItemStoreRoleFilterWidget
// 0x0030 (0x06F0 - 0x06C0)
class UHWItemStoreRoleFilterWidget : public UHWItemStoreItemFilterWidget
{
public:
	TArray<class UHWItemStoreRoleFilterEntry*>    VisibleRoleFilterEntries;                          // 0x06C0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FGameplayTag& AddedFilterTag, const class FText& FilterLabel, const TArray<struct FHWAllItemListGroup>& CategorySortingInfo, const bool bShouldFilter)> OnRoleFilterAdded; // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& RemovedFilterTag, const bool bShouldFilter)> OnRoleFilterRemoved; // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	void AddRoleFilter(const struct FGameplayTag& FilterTag, const class FText& FilterLabel, const TArray<struct FHWAllItemListGroup>& CategorySortingTags);
	void RemoveRoleFilter(const struct FGameplayTag& FilterTag, const bool bShouldFilter);
	void ToggleDefaultFilter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreRoleFilterWidget">();
	}
	static class UHWItemStoreRoleFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreRoleFilterWidget>();
	}
};
static_assert(alignof(UHWItemStoreRoleFilterWidget) == 0x000008, "Wrong alignment on UHWItemStoreRoleFilterWidget");
static_assert(sizeof(UHWItemStoreRoleFilterWidget) == 0x0006F0, "Wrong size on UHWItemStoreRoleFilterWidget");
static_assert(offsetof(UHWItemStoreRoleFilterWidget, VisibleRoleFilterEntries) == 0x0006C0, "Member 'UHWItemStoreRoleFilterWidget::VisibleRoleFilterEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreRoleFilterWidget, OnRoleFilterAdded) == 0x0006D0, "Member 'UHWItemStoreRoleFilterWidget::OnRoleFilterAdded' has a wrong offset!");
static_assert(offsetof(UHWItemStoreRoleFilterWidget, OnRoleFilterRemoved) == 0x0006E0, "Member 'UHWItemStoreRoleFilterWidget::OnRoleFilterRemoved' has a wrong offset!");

// Class HemingwayUI.HWDailyLoginRewardEntryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWDailyLoginRewardEntryWidget : public UHWWidget
{
public:
	void DisplayAsItemReward(const class UPlatformInventoryItem* Item, int32 Quantity);
	void DisplayAsSurpriseReward();
	void SetDay(int32 DayNumber, bool bIsClaimed, bool bIsCurrentDay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDailyLoginRewardEntryWidget">();
	}
	static class UHWDailyLoginRewardEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDailyLoginRewardEntryWidget>();
	}
};
static_assert(alignof(UHWDailyLoginRewardEntryWidget) == 0x000008, "Wrong alignment on UHWDailyLoginRewardEntryWidget");
static_assert(sizeof(UHWDailyLoginRewardEntryWidget) == 0x0005F8, "Wrong size on UHWDailyLoginRewardEntryWidget");

// Class HemingwayUI.HWDraftLobbyPhaseTransitionWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWDraftLobbyPhaseTransitionWidget final : public UHWWidget
{
public:
	EHWDraftType                                  DraftType;                                         // 0x05F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADraftReplicatedActor>   DraftActor;                                        // 0x05FC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayTransitionTaskGroup(const TArray<struct FDraftTask>& TransitionTaskGroup);
	void HandleTasksChanged();
	void SetDraftActor(class ADraftReplicatedActor* InDraftActor);

	class ADraftReplicatedActor* GetDraftActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyPhaseTransitionWidget">();
	}
	static class UHWDraftLobbyPhaseTransitionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyPhaseTransitionWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyPhaseTransitionWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyPhaseTransitionWidget");
static_assert(sizeof(UHWDraftLobbyPhaseTransitionWidget) == 0x000608, "Wrong size on UHWDraftLobbyPhaseTransitionWidget");
static_assert(offsetof(UHWDraftLobbyPhaseTransitionWidget, DraftType) == 0x0005F8, "Member 'UHWDraftLobbyPhaseTransitionWidget::DraftType' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyPhaseTransitionWidget, DraftActor) == 0x0005FC, "Member 'UHWDraftLobbyPhaseTransitionWidget::DraftActor' has a wrong offset!");

// Class HemingwayUI.HWDailyLoginRewardViewRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWDailyLoginRewardViewRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDailyLoginRewardViewRedirector">();
	}
	static class UHWDailyLoginRewardViewRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDailyLoginRewardViewRedirector>();
	}
};
static_assert(alignof(UHWDailyLoginRewardViewRedirector) == 0x000008, "Wrong alignment on UHWDailyLoginRewardViewRedirector");
static_assert(sizeof(UHWDailyLoginRewardViewRedirector) == 0x000028, "Wrong size on UHWDailyLoginRewardViewRedirector");

// Class HemingwayUI.HWDailyLoginRewardWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWDailyLoginRewardWidget : public UHWWidget
{
public:
	struct FRH_ItemId                             LoginProgressItemId;                               // 0x05F8(0x0014)(Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_ItemId                             ClaimBlockerItemId;                                // 0x060C(0x0014)(Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_LootId                             ClaimLootId;                                       // 0x0620(0x0014)(Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RewardsVendorId;                                   // 0x0634(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowDailyLoginRewards;                           // 0x0638(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x17];                                     // 0x0639(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CanClaimLoginRewardUpdated(bool bCanClaim);
	void ClaimLoginReward();
	void DailyProgressUpdated(int32 ClaimedDays);
	void HandleInventoryCacheUpdated(const TArray<int32>& UpdatedItems, class URH_PlayerInfo* PlayerInfo);
	void HandleLocalPlayerInfoReceived(class URH_PlayerInfo* PlayerInfo);
	void IsClaimingRewardUpdated();
	void OnGetVendorLoot(int32 VendorId, const TArray<struct FRH_LootId>& LootIds, const struct FRHAPI_Vendor& Vendor);

	bool CanClaimLoginReward() const;
	TArray<class UHWDailyLoginRewardEntryWidget*> GetDailyLoginEntries() const;
	bool IsClaimingReward() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDailyLoginRewardWidget">();
	}
	static class UHWDailyLoginRewardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDailyLoginRewardWidget>();
	}
};
static_assert(alignof(UHWDailyLoginRewardWidget) == 0x000008, "Wrong alignment on UHWDailyLoginRewardWidget");
static_assert(sizeof(UHWDailyLoginRewardWidget) == 0x000650, "Wrong size on UHWDailyLoginRewardWidget");
static_assert(offsetof(UHWDailyLoginRewardWidget, LoginProgressItemId) == 0x0005F8, "Member 'UHWDailyLoginRewardWidget::LoginProgressItemId' has a wrong offset!");
static_assert(offsetof(UHWDailyLoginRewardWidget, ClaimBlockerItemId) == 0x00060C, "Member 'UHWDailyLoginRewardWidget::ClaimBlockerItemId' has a wrong offset!");
static_assert(offsetof(UHWDailyLoginRewardWidget, ClaimLootId) == 0x000620, "Member 'UHWDailyLoginRewardWidget::ClaimLootId' has a wrong offset!");
static_assert(offsetof(UHWDailyLoginRewardWidget, RewardsVendorId) == 0x000634, "Member 'UHWDailyLoginRewardWidget::RewardsVendorId' has a wrong offset!");
static_assert(offsetof(UHWDailyLoginRewardWidget, bAllowDailyLoginRewards) == 0x000638, "Member 'UHWDailyLoginRewardWidget::bAllowDailyLoginRewards' has a wrong offset!");

// Class HemingwayUI.HWEventsScreenEntryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWEventsScreenEntryWidget : public UHWWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventsScreenEntryWidget">();
	}
	static class UHWEventsScreenEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventsScreenEntryWidget>();
	}
};
static_assert(alignof(UHWEventsScreenEntryWidget) == 0x000008, "Wrong alignment on UHWEventsScreenEntryWidget");
static_assert(sizeof(UHWEventsScreenEntryWidget) == 0x0005F8, "Wrong size on UHWEventsScreenEntryWidget");

// Class HemingwayUI.HWEventsScreenWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWEventsScreenWidget : public UHWWidget
{
public:
	class UHWWidgetSwitcher*                      EventWidgetSwitcher;                               // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             EventsTabsTable;                                   // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTabBarWidget*                        TabBar;                                            // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventsScreenWidget">();
	}
	static class UHWEventsScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventsScreenWidget>();
	}
};
static_assert(alignof(UHWEventsScreenWidget) == 0x000008, "Wrong alignment on UHWEventsScreenWidget");
static_assert(sizeof(UHWEventsScreenWidget) == 0x000610, "Wrong size on UHWEventsScreenWidget");
static_assert(offsetof(UHWEventsScreenWidget, EventWidgetSwitcher) == 0x0005F8, "Member 'UHWEventsScreenWidget::EventWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UHWEventsScreenWidget, EventsTabsTable) == 0x000600, "Member 'UHWEventsScreenWidget::EventsTabsTable' has a wrong offset!");
static_assert(offsetof(UHWEventsScreenWidget, TabBar) == 0x000608, "Member 'UHWEventsScreenWidget::TabBar' has a wrong offset!");

// Class HemingwayUI.HWFounderEditionsWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWFounderEditionsWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EExternalSkuSource, struct FHWFoundersEditionSkus> FoundersSkusPerPlatform;                 // 0x0600(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void HandleInventoryCacheUpdated(const TArray<int32>& ItemIds, class URH_PlayerInfo* PlayerInfo);
	void HandlePortalOffersReceived();
	void PurchaseFoundersLevel(EHWFoundersOwnershipLevel LevelToPurchase);
	void UpdateFoundersLevelOffer(EHWFoundersOwnershipLevel OwnershipLevel, class URHPortalOffer* PortalOffer);
	void UpdateFoundersOwnershipDisplay(EHWFoundersOwnershipLevel OwnershipLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFounderEditionsWidget">();
	}
	static class UHWFounderEditionsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFounderEditionsWidget>();
	}
};
static_assert(alignof(UHWFounderEditionsWidget) == 0x000008, "Wrong alignment on UHWFounderEditionsWidget");
static_assert(sizeof(UHWFounderEditionsWidget) == 0x000650, "Wrong size on UHWFounderEditionsWidget");
static_assert(offsetof(UHWFounderEditionsWidget, FoundersSkusPerPlatform) == 0x000600, "Member 'UHWFounderEditionsWidget::FoundersSkusPerPlatform' has a wrong offset!");

// Class HemingwayUI.HWTooltipWidget_Ability
// 0x0050 (0x0648 - 0x05F8)
class UHWTooltipWidget_Ability : public UHWWidget
{
public:
	TSubclassOf<class UHWTooltipWidget_AbilityDetail> DetailLineClass;                               // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  DividerLineClass;                                  // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWWidget*>                      DividerLines;                                      // 0x0608(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWTooltipWidget_AbilityDetail*> DetailLines;                                       // 0x0618(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWTooltipWidget_AbilityDescription> DescriptionLineClass;                     // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayLongDescription;                           // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWTooltipWidget_AbilityDescription*> DescriptionLines;                             // 0x0638(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddedDescriptionLine(class UHWTooltipWidget_AbilityDescription* AddedLine);
	void AddedDetailLine(class UHWTooltipWidget_AbilityDetail* AddedLine);
	void AddedDividerLine(class UHWWidget* AddedLine);
	void Clear();
	void DisplayEquipmentItem(const class UHWEquipmentItem* EquipmentItem);
	void DisplayIcon(const TSoftObjectPtr<class UTexture2D>& Icon);
	void DisplayRange(float Range);
	void DisplayTitle(const class FText& Title);
	void DisplayType(const struct FGameplayTag& TypeTag);
	void Populate(const class UHWEquipmentItem* EquipmentItem, const int32 AbilityLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_Ability">();
	}
	static class UHWTooltipWidget_Ability* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_Ability>();
	}
};
static_assert(alignof(UHWTooltipWidget_Ability) == 0x000008, "Wrong alignment on UHWTooltipWidget_Ability");
static_assert(sizeof(UHWTooltipWidget_Ability) == 0x000648, "Wrong size on UHWTooltipWidget_Ability");
static_assert(offsetof(UHWTooltipWidget_Ability, DetailLineClass) == 0x0005F8, "Member 'UHWTooltipWidget_Ability::DetailLineClass' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, DividerLineClass) == 0x000600, "Member 'UHWTooltipWidget_Ability::DividerLineClass' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, DividerLines) == 0x000608, "Member 'UHWTooltipWidget_Ability::DividerLines' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, DetailLines) == 0x000618, "Member 'UHWTooltipWidget_Ability::DetailLines' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, DescriptionLineClass) == 0x000628, "Member 'UHWTooltipWidget_Ability::DescriptionLineClass' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, bDisplayLongDescription) == 0x000630, "Member 'UHWTooltipWidget_Ability::bDisplayLongDescription' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Ability, DescriptionLines) == 0x000638, "Member 'UHWTooltipWidget_Ability::DescriptionLines' has a wrong offset!");

// Class HemingwayUI.HWGodDetailsAbilityDetailModal
// 0x0008 (0x0650 - 0x0648)
class UHWGodDetailsAbilityDetailModal : public UHWTooltipWidget_Ability
{
public:
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ToggleDetailModal(bool bDisplay);

	bool IsModalToggledOn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsAbilityDetailModal">();
	}
	static class UHWGodDetailsAbilityDetailModal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsAbilityDetailModal>();
	}
};
static_assert(alignof(UHWGodDetailsAbilityDetailModal) == 0x000008, "Wrong alignment on UHWGodDetailsAbilityDetailModal");
static_assert(sizeof(UHWGodDetailsAbilityDetailModal) == 0x000650, "Wrong size on UHWGodDetailsAbilityDetailModal");

// Class HemingwayUI.HWEventTextBuilderBase
// 0x0010 (0x0038 - 0x0028)
class UHWEventTextBuilderBase final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BroadcastEventTextBuilt(const class FText& BuiltText);
	void BuildEventText(const struct FGameplayTag& EventTextTag, const struct FHWEventContext& EventContext, const class AHWGameHUD* GameHUD);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventTextBuilderBase">();
	}
	static class UHWEventTextBuilderBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventTextBuilderBase>();
	}
};
static_assert(alignof(UHWEventTextBuilderBase) == 0x000008, "Wrong alignment on UHWEventTextBuilderBase");
static_assert(sizeof(UHWEventTextBuilderBase) == 0x000038, "Wrong size on UHWEventTextBuilderBase");

// Class HemingwayUI.HWGodDetailsEntryWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWGodDetailsEntryWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowUnlockPrompt;                           // 0x0600(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowEnterPracticePrompt;                    // 0x0601(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowToggleGodPrompt;                        // 0x0602(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_603[0x5];                                      // 0x0603(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGodSet();
	void SetGodItem(const class UHWCharacterItem* InGodItem, bool bShouldResetView);

	bool ShouldShowEnterPracticePrompt() const;
	bool ShouldShowToggleGodPrompt() const;
	bool ShouldShowUnlockPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsEntryWidget">();
	}
	static class UHWGodDetailsEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsEntryWidget>();
	}
};
static_assert(alignof(UHWGodDetailsEntryWidget) == 0x000008, "Wrong alignment on UHWGodDetailsEntryWidget");
static_assert(sizeof(UHWGodDetailsEntryWidget) == 0x000608, "Wrong size on UHWGodDetailsEntryWidget");
static_assert(offsetof(UHWGodDetailsEntryWidget, GodItem) == 0x0005F8, "Member 'UHWGodDetailsEntryWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsEntryWidget, bShouldShowUnlockPrompt) == 0x000600, "Member 'UHWGodDetailsEntryWidget::bShouldShowUnlockPrompt' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsEntryWidget, bShouldShowEnterPracticePrompt) == 0x000601, "Member 'UHWGodDetailsEntryWidget::bShouldShowEnterPracticePrompt' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsEntryWidget, bShouldShowToggleGodPrompt) == 0x000602, "Member 'UHWGodDetailsEntryWidget::bShouldShowToggleGodPrompt' has a wrong offset!");

// Class HemingwayUI.HWFPSDisplayWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWFPSDisplayWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleFPSDisplayStateChanged();
	void UpdateFPS(float FPSCounter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFPSDisplayWidget">();
	}
	static class UHWFPSDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFPSDisplayWidget>();
	}
};
static_assert(alignof(UHWFPSDisplayWidget) == 0x000008, "Wrong alignment on UHWFPSDisplayWidget");
static_assert(sizeof(UHWFPSDisplayWidget) == 0x000608, "Wrong size on UHWFPSDisplayWidget");

// Class HemingwayUI.HWGodDetailsAbilityOverviewWidget
// 0x00B0 (0x06B8 - 0x0608)
class UHWGodDetailsAbilityOverviewWidget : public UHWGodDetailsEntryWidget
{
public:
	class UHWGodAbilityOverview*                  AbilityOverviewWidget;                             // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsAbilityDetailModal*        AbilityDetailsModalWidget;                         // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           ScrollAbilityInfoUpAction;                         // 0x0618(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           ScrollAbilityInfoDownAction;                       // 0x0620(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_628[0x8];                                      // 0x0628(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            GamepadToggleAbilityDetailsBinding;                // 0x0630(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            KBMToggleAbilityDetailsBinding;                    // 0x0670(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnScrollAbilityInfoDownActionPressed();
	void OnScrollAbilityInfoUpActionPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsAbilityOverviewWidget">();
	}
	static class UHWGodDetailsAbilityOverviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsAbilityOverviewWidget>();
	}
};
static_assert(alignof(UHWGodDetailsAbilityOverviewWidget) == 0x000008, "Wrong alignment on UHWGodDetailsAbilityOverviewWidget");
static_assert(sizeof(UHWGodDetailsAbilityOverviewWidget) == 0x0006B8, "Wrong size on UHWGodDetailsAbilityOverviewWidget");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, AbilityOverviewWidget) == 0x000608, "Member 'UHWGodDetailsAbilityOverviewWidget::AbilityOverviewWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, AbilityDetailsModalWidget) == 0x000610, "Member 'UHWGodDetailsAbilityOverviewWidget::AbilityDetailsModalWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, ScrollAbilityInfoUpAction) == 0x000618, "Member 'UHWGodDetailsAbilityOverviewWidget::ScrollAbilityInfoUpAction' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, ScrollAbilityInfoDownAction) == 0x000620, "Member 'UHWGodDetailsAbilityOverviewWidget::ScrollAbilityInfoDownAction' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, GamepadToggleAbilityDetailsBinding) == 0x000630, "Member 'UHWGodDetailsAbilityOverviewWidget::GamepadToggleAbilityDetailsBinding' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsAbilityOverviewWidget, KBMToggleAbilityDetailsBinding) == 0x000670, "Member 'UHWGodDetailsAbilityOverviewWidget::KBMToggleAbilityDetailsBinding' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderStatsDisplayEntryWidget
// 0x0120 (0x0718 - 0x05F8)
class UHWGodBuilderStatsDisplayEntryWidget : public UHWWidget
{
public:
	int32                                         DisplayedLevel;                                    // 0x05F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x05FC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           StatTag;                                           // 0x0604(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWDataDisplay_CharacterStat           StatDisplayData;                                   // 0x0610(0x00A0)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FHWGodBuildEntry                       FinalBuild;                                        // 0x06B0(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void SetStatIcon(const TSoftObjectPtr<class UTexture2D>& InStatIcon);
	void SetStatValues(const class FText& InValueFormat, float InBaseValue, float InChangeValue);
	void SetTitleText(const class FText& InTitleText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderStatsDisplayEntryWidget">();
	}
	static class UHWGodBuilderStatsDisplayEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderStatsDisplayEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderStatsDisplayEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderStatsDisplayEntryWidget");
static_assert(sizeof(UHWGodBuilderStatsDisplayEntryWidget) == 0x000718, "Wrong size on UHWGodBuilderStatsDisplayEntryWidget");
static_assert(offsetof(UHWGodBuilderStatsDisplayEntryWidget, DisplayedLevel) == 0x0005F8, "Member 'UHWGodBuilderStatsDisplayEntryWidget::DisplayedLevel' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayEntryWidget, CharacterItem) == 0x0005FC, "Member 'UHWGodBuilderStatsDisplayEntryWidget::CharacterItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayEntryWidget, StatTag) == 0x000604, "Member 'UHWGodBuilderStatsDisplayEntryWidget::StatTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayEntryWidget, StatDisplayData) == 0x000610, "Member 'UHWGodBuilderStatsDisplayEntryWidget::StatDisplayData' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayEntryWidget, FinalBuild) == 0x0006B0, "Member 'UHWGodBuilderStatsDisplayEntryWidget::FinalBuild' has a wrong offset!");

// Class HemingwayUI.HWBaseHUDWidget
// 0x0118 (0x0710 - 0x05F8)
class UHWBaseHUDWidget : public UHWWidget
{
public:
	class UHWTooltipWidgetManager*                TooltipWidgetManager;                              // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool bHUDNavigationIsActive)> OnHUDNavigationStateChanged;         // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWWidget* PreviousFocusedWidget, class UHWWidget* NewFocusedWidget)> OnHUDNavigationFocusChanged; // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingContainer            HUDNavNextInputActionContainer;                    // 0x0620(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            HUDNavPreviousInputActionContainer;                // 0x0660(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bHUDNavWrapAround;                                 // 0x06A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x3];                                      // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWWidget>               CurrentFocusedHUDNavWidget;                        // 0x06A4(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6AC[0x14];                                     // 0x06AC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FHWNamedWidget>      NamedWidgets;                                      // 0x06C0(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void EndHUDNavigation();
	class URHPopupManager* GetPopupManager();
	void StartHUDNavigation(bool bResetToFirstWidget);

	TArray<class UHWCanvasPanel*> GetCanvasPanels() const;
	class UHWWidget* GetCurrentFocusedHUDNavWidget() const;
	TArray<class UHWWidget*> GetHUDNavigableWidgets(int32& ActiveWidgetIndex) const;
	TArray<class UHWWidget*> GetHWWidgets() const;
	class UHWScreenAlertManager* GetScreenAlertManager() const;
	TArray<struct FStickyWidgetData> GetStickyWidgetsData() const;
	class UHWTooltipWidgetManager* GetTooltipWidgetManager() const;
	bool IsHUDNavigationActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWBaseHUDWidget">();
	}
	static class UHWBaseHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWBaseHUDWidget>();
	}
};
static_assert(alignof(UHWBaseHUDWidget) == 0x000008, "Wrong alignment on UHWBaseHUDWidget");
static_assert(sizeof(UHWBaseHUDWidget) == 0x000710, "Wrong size on UHWBaseHUDWidget");
static_assert(offsetof(UHWBaseHUDWidget, TooltipWidgetManager) == 0x0005F8, "Member 'UHWBaseHUDWidget::TooltipWidgetManager' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, OnHUDNavigationStateChanged) == 0x000600, "Member 'UHWBaseHUDWidget::OnHUDNavigationStateChanged' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, OnHUDNavigationFocusChanged) == 0x000610, "Member 'UHWBaseHUDWidget::OnHUDNavigationFocusChanged' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, HUDNavNextInputActionContainer) == 0x000620, "Member 'UHWBaseHUDWidget::HUDNavNextInputActionContainer' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, HUDNavPreviousInputActionContainer) == 0x000660, "Member 'UHWBaseHUDWidget::HUDNavPreviousInputActionContainer' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, bHUDNavWrapAround) == 0x0006A0, "Member 'UHWBaseHUDWidget::bHUDNavWrapAround' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, CurrentFocusedHUDNavWidget) == 0x0006A4, "Member 'UHWBaseHUDWidget::CurrentFocusedHUDNavWidget' has a wrong offset!");
static_assert(offsetof(UHWBaseHUDWidget, NamedWidgets) == 0x0006C0, "Member 'UHWBaseHUDWidget::NamedWidgets' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyHUDWidget
// 0x0000 (0x0710 - 0x0710)
class UHWDraftLobbyHUDWidget final : public UHWBaseHUDWidget
{
public:
	bool HasValidJoinedSession() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyHUDWidget">();
	}
	static class UHWDraftLobbyHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyHUDWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyHUDWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyHUDWidget");
static_assert(sizeof(UHWDraftLobbyHUDWidget) == 0x000710, "Wrong size on UHWDraftLobbyHUDWidget");

// Class HemingwayUI.HWGodDetailsGodCollectionWidget
// 0x0208 (0x0810 - 0x0608)
class UHWGodDetailsGodCollectionWidget : public UHWGodDetailsEntryWidget
{
public:
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryHovered; // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryUnhovered; // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntrySelected; // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<EHWCollectionItemType, struct FHWCollectionGridConfig> CollectionGridConfigs;               // 0x0640(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         GamepadPreviewDelay;                               // 0x0690(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_694[0x4];                                      // 0x0694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWItemDisplayWidget>       CollectionWidgetClass;                             // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTabBarWidget*                        CollectionTabs;                                    // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   CollectionGrid;                                    // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      PreviewSwitcher;                                   // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWPlayerCardEquipWidget*               PlayerCardEquipPreview;                            // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   CollectionItemPreview;                             // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SelectedEntryWidget;                               // 0x06C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   EquippedEntryWidget;                               // 0x06D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           GamepadPreviewHandle;                              // 0x06D8(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHWInventoryItem*                       PreviewedInventoryItem;                            // 0x06E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UHWCollectionItem*>              CurrentCollectionItemList;                         // 0x06E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            EquipBindingContainer;                             // 0x0700(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            UnequipBindingContainer;                           // 0x0740(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            CycleSkinVariantBindingContainer;                  // 0x0780(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PreviewSkinVoiceBindingContainer;                  // 0x07C0(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_800[0x10];                                     // 0x0800(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayButtonEquipStatus(EHWButtonEquipStatus ButtonStatus);
	void DisplayCollectionItemStatus(EHWCollectionItemStatus ItemStatus);
	void DisplayCollectionType(EHWCollectionItemType CollectionType);
	void DisplayPriceItem(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroup);
	void EquipPreviewStateUpdated(bool bIsInEquipPreview);
	void HandleActiveCollectionTabChanged(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause);
	void HandleEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEntryButtonUnhovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEquipAction();
	void HandlePendingPurchaseUpdate();
	void HandlePreviewSkinVoiceAction();
	void HandleUnequipAction();
	void OnBoolAppSettingChanged(const struct FGameplayTag& AppSettingTag, bool bValue);
	void OnPlayerCardCancelLoadoutChanges();
	void OnPlayerCardEquipPreviewStateChanged(EHWPlayerCardEquipState EquipState);
	void PreviewInventoryItem(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void SetEquippedCollectionForGod(const class UHWCharacterItem* InGodItem, const class UHWCollectionItem* InCollectionItem);
	void UnequipCollectionItemForGod(const class UHWCharacterItem* InGodItem, const class UHWCollectionItem* InCollectionItem);
	void UpdateUnequipButtonDisplay(bool bIsVisible);

	class UHWSkinItem* GetDefaultSkinForGod(const class UHWCharacterItem* InGodItem) const;
	class UHWSkinItem* GetEquippedSkinForGod(const class UHWCharacterItem* InGodItem) const;
	const class UHWInventoryItem* GetPreviewedInventoryItem() const;
	const class UHWInventoryItem* GetSelectedInventoryItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsGodCollectionWidget">();
	}
	static class UHWGodDetailsGodCollectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsGodCollectionWidget>();
	}
};
static_assert(alignof(UHWGodDetailsGodCollectionWidget) == 0x000008, "Wrong alignment on UHWGodDetailsGodCollectionWidget");
static_assert(sizeof(UHWGodDetailsGodCollectionWidget) == 0x000810, "Wrong size on UHWGodDetailsGodCollectionWidget");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, OnItemDisplayEntryHovered) == 0x000610, "Member 'UHWGodDetailsGodCollectionWidget::OnItemDisplayEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, OnItemDisplayEntryUnhovered) == 0x000620, "Member 'UHWGodDetailsGodCollectionWidget::OnItemDisplayEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, OnItemDisplayEntrySelected) == 0x000630, "Member 'UHWGodDetailsGodCollectionWidget::OnItemDisplayEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CollectionGridConfigs) == 0x000640, "Member 'UHWGodDetailsGodCollectionWidget::CollectionGridConfigs' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, GamepadPreviewDelay) == 0x000690, "Member 'UHWGodDetailsGodCollectionWidget::GamepadPreviewDelay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CollectionWidgetClass) == 0x000698, "Member 'UHWGodDetailsGodCollectionWidget::CollectionWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CollectionTabs) == 0x0006A0, "Member 'UHWGodDetailsGodCollectionWidget::CollectionTabs' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CollectionGrid) == 0x0006A8, "Member 'UHWGodDetailsGodCollectionWidget::CollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, PreviewSwitcher) == 0x0006B0, "Member 'UHWGodDetailsGodCollectionWidget::PreviewSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, PlayerCardEquipPreview) == 0x0006B8, "Member 'UHWGodDetailsGodCollectionWidget::PlayerCardEquipPreview' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CollectionItemPreview) == 0x0006C0, "Member 'UHWGodDetailsGodCollectionWidget::CollectionItemPreview' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, SelectedEntryWidget) == 0x0006C8, "Member 'UHWGodDetailsGodCollectionWidget::SelectedEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, EquippedEntryWidget) == 0x0006D0, "Member 'UHWGodDetailsGodCollectionWidget::EquippedEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, GamepadPreviewHandle) == 0x0006D8, "Member 'UHWGodDetailsGodCollectionWidget::GamepadPreviewHandle' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, PreviewedInventoryItem) == 0x0006E0, "Member 'UHWGodDetailsGodCollectionWidget::PreviewedInventoryItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CurrentCollectionItemList) == 0x0006E8, "Member 'UHWGodDetailsGodCollectionWidget::CurrentCollectionItemList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, EquipBindingContainer) == 0x000700, "Member 'UHWGodDetailsGodCollectionWidget::EquipBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, UnequipBindingContainer) == 0x000740, "Member 'UHWGodDetailsGodCollectionWidget::UnequipBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, CycleSkinVariantBindingContainer) == 0x000780, "Member 'UHWGodDetailsGodCollectionWidget::CycleSkinVariantBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodCollectionWidget, PreviewSkinVoiceBindingContainer) == 0x0007C0, "Member 'UHWGodDetailsGodCollectionWidget::PreviewSkinVoiceBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWEditableTextBox
// 0x0020 (0x10D0 - 0x10B0)
class UHWEditableTextBox final : public URHEditableTextBox
{
public:
	bool                                          bConsumeModifiers;                                 // 0x10B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10B1[0x7];                                     // 0x10B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 NewCharacterCount, int32 CharacterLimit)> OnCharacterCountChanged; // 0x10B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         CharacterLimit;                                    // 0x10C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10CC[0x4];                                     // 0x10CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCharacterCount() const;
	int32 GetCharacterLimit() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEditableTextBox">();
	}
	static class UHWEditableTextBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEditableTextBox>();
	}
};
static_assert(alignof(UHWEditableTextBox) == 0x000010, "Wrong alignment on UHWEditableTextBox");
static_assert(sizeof(UHWEditableTextBox) == 0x0010D0, "Wrong size on UHWEditableTextBox");
static_assert(offsetof(UHWEditableTextBox, bConsumeModifiers) == 0x0010B0, "Member 'UHWEditableTextBox::bConsumeModifiers' has a wrong offset!");
static_assert(offsetof(UHWEditableTextBox, OnCharacterCountChanged) == 0x0010B8, "Member 'UHWEditableTextBox::OnCharacterCountChanged' has a wrong offset!");
static_assert(offsetof(UHWEditableTextBox, CharacterLimit) == 0x0010C8, "Member 'UHWEditableTextBox::CharacterLimit' has a wrong offset!");

// Class HemingwayUI.HWGodAscensionProgressWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWGodAscensionProgressWidget : public UHWWidget
{
public:
	void UpdateLevel(const TSoftObjectPtr<class UTexture2D>& TierCompletedIcon, const TSoftObjectPtr<class UTexture2D>& CurrentTierGoalIcon, const int32 CurrentLevel);
	void UpdateProgress(const int32 TierCompleted, const int32 StartValue, const int32 GoalValue, const int32 TotalProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAscensionProgressWidget">();
	}
	static class UHWGodAscensionProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAscensionProgressWidget>();
	}
};
static_assert(alignof(UHWGodAscensionProgressWidget) == 0x000008, "Wrong alignment on UHWGodAscensionProgressWidget");
static_assert(sizeof(UHWGodAscensionProgressWidget) == 0x0005F8, "Wrong size on UHWGodAscensionProgressWidget");

// Class HemingwayUI.HWGodAscensionTrackEntryWidget
// 0x0110 (0x0708 - 0x05F8)
class UHWGodAscensionTrackEntryWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWGodAscensionTrackEntryWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem, const class URHStoreItem* StoreItem)> OnTrackEntrySelected; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWGodAscensionTrackItemDisplay> RewardDisplayWidgetClass;                     // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodAscensionTrackItemDisplay> SubRewardDisplayWidgetClass;                  // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UPlatformInventoryItem*>         RewardItems;                                       // 0x0618(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class URHStoreItem*>                   RewardStoreItems;                                  // 0x0628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UPlatformInventoryItem*>         PremiumItems;                                      // 0x0638(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       MainHorizontalBox;                                 // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       SubHorizontalBox;                                  // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWGodAscensionTrackItemDisplay*> MainDisplayList;                                  // 0x0658(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWGodAscensionTrackItemDisplay*> SubDisplayList;                                   // 0x0668(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         MainPreviewCountMax;                               // 0x0678(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHCurrency*                            FreeCurrencyItem;                                  // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FreeCurrencyAmount;                                // 0x0688(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68C[0xC];                                      // 0x068C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, bool>                             OwnershipCache;                                    // 0x0698(0x0050)(NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UHWGodAscensionTrackEntryWidget* EntryWidget)> OnClaimAscensionTrackReward; // 0x06E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWGodAscensionTrackEntryWidget* EntryWidget)> OnClaimableUpdated; // 0x06F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	int32 GetCurrentSubSelectionIndex();
	void HandleClaimReward();
	void HandleInputMethodChanged(ECommonInputType NewInputType);
	void NavigateSubItem(int32 Direction);
	void OnClaimOwnershipCheck(bool bOwned);
	void OnRewardItemsAdded();
	void OnRewardOwnershipCheck(bool bOwned, class UPlatformInventoryItem* InventoryItem, int32 Index_0);
	void OnSelectItem(class UHWItemDisplayWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem);
	void UpdateAscensionPassOwnership(bool bOwned);
	void UpdateClaimVisibility(bool bShow);
	void UpdateSelectedHighlight(bool bShow);
	void UpdateTier(int32 TierNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAscensionTrackEntryWidget">();
	}
	static class UHWGodAscensionTrackEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAscensionTrackEntryWidget>();
	}
};
static_assert(alignof(UHWGodAscensionTrackEntryWidget) == 0x000008, "Wrong alignment on UHWGodAscensionTrackEntryWidget");
static_assert(sizeof(UHWGodAscensionTrackEntryWidget) == 0x000708, "Wrong size on UHWGodAscensionTrackEntryWidget");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, OnTrackEntrySelected) == 0x0005F8, "Member 'UHWGodAscensionTrackEntryWidget::OnTrackEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, RewardDisplayWidgetClass) == 0x000608, "Member 'UHWGodAscensionTrackEntryWidget::RewardDisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, SubRewardDisplayWidgetClass) == 0x000610, "Member 'UHWGodAscensionTrackEntryWidget::SubRewardDisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, RewardItems) == 0x000618, "Member 'UHWGodAscensionTrackEntryWidget::RewardItems' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, RewardStoreItems) == 0x000628, "Member 'UHWGodAscensionTrackEntryWidget::RewardStoreItems' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, PremiumItems) == 0x000638, "Member 'UHWGodAscensionTrackEntryWidget::PremiumItems' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, MainHorizontalBox) == 0x000648, "Member 'UHWGodAscensionTrackEntryWidget::MainHorizontalBox' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, SubHorizontalBox) == 0x000650, "Member 'UHWGodAscensionTrackEntryWidget::SubHorizontalBox' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, MainDisplayList) == 0x000658, "Member 'UHWGodAscensionTrackEntryWidget::MainDisplayList' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, SubDisplayList) == 0x000668, "Member 'UHWGodAscensionTrackEntryWidget::SubDisplayList' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, MainPreviewCountMax) == 0x000678, "Member 'UHWGodAscensionTrackEntryWidget::MainPreviewCountMax' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, FreeCurrencyItem) == 0x000680, "Member 'UHWGodAscensionTrackEntryWidget::FreeCurrencyItem' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, FreeCurrencyAmount) == 0x000688, "Member 'UHWGodAscensionTrackEntryWidget::FreeCurrencyAmount' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, OwnershipCache) == 0x000698, "Member 'UHWGodAscensionTrackEntryWidget::OwnershipCache' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, OnClaimAscensionTrackReward) == 0x0006E8, "Member 'UHWGodAscensionTrackEntryWidget::OnClaimAscensionTrackReward' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackEntryWidget, OnClaimableUpdated) == 0x0006F8, "Member 'UHWGodAscensionTrackEntryWidget::OnClaimableUpdated' has a wrong offset!");

// Class HemingwayUI.HWGodAscensionPurchaseWidget
// 0x0048 (0x0750 - 0x0708)
class UHWGodAscensionPurchaseWidget : public UHWGodAscensionTrackEntryWidget
{
public:
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnPurchaseDisplaySelected; // 0x0708(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UHWCollectionItem*                      GenericPassCollectionItem;                         // 0x0718(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URHStoreItem*                           AscensionPassItem;                                 // 0x0720(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SkinItemDisplay;                                   // 0x0728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPurchaseable;                                   // 0x0730(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_731[0x1F];                                     // 0x0731(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPurchaseItemSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void PurchasePass();
	void SetSubListVisibility(bool bVisible);
	void UpdatePrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroup);
	void UpdatePurchasable(const bool bAvailable, const TArray<struct FHWAscensionPurchaseRewardItem>& InRewardItems, class URHStoreItem* PassItem, const class UHWCharacterItem* GodItemReference);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAscensionPurchaseWidget">();
	}
	static class UHWGodAscensionPurchaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAscensionPurchaseWidget>();
	}
};
static_assert(alignof(UHWGodAscensionPurchaseWidget) == 0x000008, "Wrong alignment on UHWGodAscensionPurchaseWidget");
static_assert(sizeof(UHWGodAscensionPurchaseWidget) == 0x000750, "Wrong size on UHWGodAscensionPurchaseWidget");
static_assert(offsetof(UHWGodAscensionPurchaseWidget, OnPurchaseDisplaySelected) == 0x000708, "Member 'UHWGodAscensionPurchaseWidget::OnPurchaseDisplaySelected' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionPurchaseWidget, GenericPassCollectionItem) == 0x000718, "Member 'UHWGodAscensionPurchaseWidget::GenericPassCollectionItem' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionPurchaseWidget, AscensionPassItem) == 0x000720, "Member 'UHWGodAscensionPurchaseWidget::AscensionPassItem' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionPurchaseWidget, SkinItemDisplay) == 0x000728, "Member 'UHWGodAscensionPurchaseWidget::SkinItemDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionPurchaseWidget, bIsPurchaseable) == 0x000730, "Member 'UHWGodAscensionPurchaseWidget::bIsPurchaseable' has a wrong offset!");

// Class HemingwayUI.HWItemDisplayWidget
// 0x0078 (0x0670 - 0x05F8)
class UHWItemDisplayWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryRequestSelect; // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bDisplayOwnershipIcons;                            // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWInventoryItem>        DisplayItem;                                       // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterContextItem;                              // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class URH_PlayerInfo>          PlayerInfoContext;                                 // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelected;                                       // 0x0660(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseListView;                                      // 0x0661(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_662[0x2];                                      // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWInventoryItem>        SelectedVariantItem;                               // 0x0664(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPrice(class URHStoreItemPrice* PriceItem, EHWCurrencyType CurrencyType);
	const class UHWCharacterItem* GetCharacterContext();
	TSoftObjectPtr<class UHWInventoryItem> GetNextVariantItem(TSoftObjectPtr<class UHWInventoryItem> CurrentItem);
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void HandleEntryButtonUnhovered();
	void OnDisplayItemSet();
	void OnSelectVariantItem(const TSoftObjectPtr<class UHWInventoryItem>& InVariantItem, const class URHStoreItem* InStoreItem);
	void RequestSelectFromStoreItemDisplay(class UHWStoreItemDisplayWidget* StoreItemDisplay);
	void SelectEntry();
	void SelectVariantItem(TSoftObjectPtr<class UHWInventoryItem> Item);
	void SetCharacterContext(const class UHWCharacterItem* InCharacterItem);
	void SetDisplayItem(const class UHWInventoryItem* InInventoryItem);
	void SetDisplayOwnershipIcons(bool bInDisplayOwnershipIcons);
	void SetIsEquipped(bool bInIsEquipped);
	void SetIsInteractable(bool bInIsInteractable);
	void SetIsSelected(bool bInIsSelected);
	void SetOverrideItemQuantity(int32 Quantity);
	void SetPlayerInfoContext(class URH_PlayerInfo* InPlayerInfo);
	void SetUseListView(bool bInUseListView);

	const class UHWInventoryItem* GetDisplayedItem() const;
	const class UHWInventoryItem* GetDisplayItem() const;
	TSoftObjectPtr<class UHWInventoryItem> GetInitialSelectedVariantItem() const;
	bool GetIsSelected() const;
	class URH_PlayerInfo* GetPlayerInfoContext() const;
	class UHWInventoryItem* GetSelectedVariantItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemDisplayWidget">();
	}
	static class UHWItemDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemDisplayWidget>();
	}
};
static_assert(alignof(UHWItemDisplayWidget) == 0x000008, "Wrong alignment on UHWItemDisplayWidget");
static_assert(sizeof(UHWItemDisplayWidget) == 0x000670, "Wrong size on UHWItemDisplayWidget");
static_assert(offsetof(UHWItemDisplayWidget, OnItemDisplayEntryHovered) == 0x0005F8, "Member 'UHWItemDisplayWidget::OnItemDisplayEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, OnItemDisplayEntryUnhovered) == 0x000608, "Member 'UHWItemDisplayWidget::OnItemDisplayEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, OnItemDisplayEntrySelected) == 0x000618, "Member 'UHWItemDisplayWidget::OnItemDisplayEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, OnItemDisplayEntryRequestSelect) == 0x000628, "Member 'UHWItemDisplayWidget::OnItemDisplayEntryRequestSelect' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, bDisplayOwnershipIcons) == 0x000638, "Member 'UHWItemDisplayWidget::bDisplayOwnershipIcons' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, HitTarget) == 0x000640, "Member 'UHWItemDisplayWidget::HitTarget' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, DisplayItem) == 0x000648, "Member 'UHWItemDisplayWidget::DisplayItem' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, CharacterContextItem) == 0x000650, "Member 'UHWItemDisplayWidget::CharacterContextItem' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, PlayerInfoContext) == 0x000658, "Member 'UHWItemDisplayWidget::PlayerInfoContext' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, bIsSelected) == 0x000660, "Member 'UHWItemDisplayWidget::bIsSelected' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, bUseListView) == 0x000661, "Member 'UHWItemDisplayWidget::bUseListView' has a wrong offset!");
static_assert(offsetof(UHWItemDisplayWidget, SelectedVariantItem) == 0x000664, "Member 'UHWItemDisplayWidget::SelectedVariantItem' has a wrong offset!");

// Class HemingwayUI.HWGodAscensionTrackItemDisplay
// 0x0048 (0x06B8 - 0x0670)
class UHWGodAscensionTrackItemDisplay : public UHWItemDisplayWidget
{
public:
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem)> OnPlatformItemDisplayEntrySelected; // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UPlatformInventoryItem>  DisplayPlatformItem;                               // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWGodAscensionTrackItemDisplay> RewardDisplayWidgetClass;                     // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHWGodAscensionTrackItemDisplay*> SubDisplays;                                      // 0x0690(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       SubHorizontalBox;                                  // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSubDisplayLimit;                                // 0x06A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6AC[0xC];                                      // 0x06AC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSubRewardItem(const class UPlatformInventoryItem* InventoryItem, bool bIsPremium);
	void ClearAllSubRewardItems();
	void OnDisplayPlatformItemSet();
	void OnRewardItemAdded();
	void OnSelectItem(class UHWItemDisplayWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem);
	void SelectItem(bool bSelected);
	void SetButtonEnabled(bool bEnable);
	void SetClaimable(bool bIsClaimable);
	void SetDisplayAsPremium(bool bIsPremium);
	void SetDisplayPlatformItem(const class UPlatformInventoryItem* InPlatformItem);

	const class UPlatformInventoryItem* GetDisplayPlatformItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAscensionTrackItemDisplay">();
	}
	static class UHWGodAscensionTrackItemDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAscensionTrackItemDisplay>();
	}
};
static_assert(alignof(UHWGodAscensionTrackItemDisplay) == 0x000008, "Wrong alignment on UHWGodAscensionTrackItemDisplay");
static_assert(sizeof(UHWGodAscensionTrackItemDisplay) == 0x0006B8, "Wrong size on UHWGodAscensionTrackItemDisplay");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, OnPlatformItemDisplayEntrySelected) == 0x000670, "Member 'UHWGodAscensionTrackItemDisplay::OnPlatformItemDisplayEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, DisplayPlatformItem) == 0x000680, "Member 'UHWGodAscensionTrackItemDisplay::DisplayPlatformItem' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, RewardDisplayWidgetClass) == 0x000688, "Member 'UHWGodAscensionTrackItemDisplay::RewardDisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, SubDisplays) == 0x000690, "Member 'UHWGodAscensionTrackItemDisplay::SubDisplays' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, SubHorizontalBox) == 0x0006A0, "Member 'UHWGodAscensionTrackItemDisplay::SubHorizontalBox' has a wrong offset!");
static_assert(offsetof(UHWGodAscensionTrackItemDisplay, MaxSubDisplayLimit) == 0x0006A8, "Member 'UHWGodAscensionTrackItemDisplay::MaxSubDisplayLimit' has a wrong offset!");

// Class HemingwayUI.HWGodDetailsGodAscensionWidget
// 0x0388 (0x0990 - 0x0608)
class UHWGodDetailsGodAscensionWidget : public UHWGodDetailsEntryWidget
{
public:
	TSoftObjectPtr<class UDataTable>              SoftGenericItemTable;                              // 0x0608(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              SoftMasteryQuestTable;                             // 0x0630(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              SoftMasteryTable;                                  // 0x0658(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWCollectionItem>       RedirectCollectionItem;                            // 0x0680(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGodQuestEntry                         QuestEntryCache;                                   // 0x06A8(0x00B0)(Protected, NativeAccessSpecifierProtected)
	bool                                          bIsPopulated;                                      // 0x0758(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_759[0x3];                                      // 0x0759(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RewardDisplayCount;                                // 0x075C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWHorizontalBox*                       AscensionTrack;                                    // 0x0760(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodAscensionTrackEntryWidget> AscensionTrackEntryClass;                     // 0x0768(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWGodAscensionTrackEntryWidget*> TrackEntries;                                     // 0x0770(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWGodAscensionProgressWidget*          AscensionProgressWidget;                           // 0x0780(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSegmentedProgressBar*                RewardProgressBar;                                 // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAscensionPurchaseWidget*          AscensionPurchaseWidget;                           // 0x0790(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         RewardVerticalBox;                                 // 0x0798(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UHWGodAscensionTrackEntryWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem, const class URHStoreItem* StoreItem)> OnRewardEntrySelected; // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	int32                                         MasteryLevel;                                      // 0x07B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 SegmentedWidths;                                   // 0x07B8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 SegmentedPaddings;                                 // 0x07C8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D8[0x10];                                     // 0x07D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            UnlockAscensionBindingContainer;                   // 0x07E8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ClaimRewardBindingContainer;                       // 0x0828(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            GotoPreviousRewardBindingContainer;                // 0x0868(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            GotoNextRewardBindingContainer;                    // 0x08A8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FUIContextCalloutDisplay               NavigateRewardsContextCalloutDisplay;              // 0x08E8(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FUIContextCalloutDisplay               TrackNavigationContextCalloutDisplay;              // 0x0930(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_978[0x10];                                     // 0x0978(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWGodAscensionTrackEntryWidget*        SelectedEntryWidget;                               // 0x0988(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleInputMethodChanged(ECommonInputType NewInputType);
	void OnAscensionPassOwnershipCheck(bool bOwned, class URHStoreItem* StoreItem);
	void OnAscensionPassOwnershipUpdate(bool bOwned);
	void OnClaimableUpdated(class UHWGodAscensionTrackEntryWidget* EntryWidget);
	void OnClaimAll();
	void OnClaimAscensionTrackReward(class UHWGodAscensionTrackEntryWidget* EntryWidget);
	void OnClaimRewardActionPressed();
	void OnClaimUpdate(int32 ClaimableCount);
	void OnGotoNextRewardActionPressed();
	void OnGotoPreviousRewardActionPressed();
	void OnProgressUpdate(int32 CurrentProgress, int32 StartValue, int32 NextValue, int32 TierCompleted);
	void OnRepeatableCouponOwnedUpdate(int32 Count);
	void OnRepeatableCouponOwnershipCheck(int32 OwnedCount);
	void OnRepeatableQuestCurrencyUpdate(const TArray<struct FCurrencyRewardInfo>& CurrencyItems);
	void OnSelectAscensionTrackEntry(class UHWGodAscensionTrackEntryWidget* EntryWidget, const class UPlatformInventoryItem* InventoryItem, const class URHStoreItem* StoreItem);
	void OnUnlockAscensionActionPressed();
	void PopulateAscensionPass();
	void SetDefaultSelection();
	void UpdatedPopulatedState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsGodAscensionWidget">();
	}
	static class UHWGodDetailsGodAscensionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsGodAscensionWidget>();
	}
};
static_assert(alignof(UHWGodDetailsGodAscensionWidget) == 0x000008, "Wrong alignment on UHWGodDetailsGodAscensionWidget");
static_assert(sizeof(UHWGodDetailsGodAscensionWidget) == 0x000990, "Wrong size on UHWGodDetailsGodAscensionWidget");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SoftGenericItemTable) == 0x000608, "Member 'UHWGodDetailsGodAscensionWidget::SoftGenericItemTable' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SoftMasteryQuestTable) == 0x000630, "Member 'UHWGodDetailsGodAscensionWidget::SoftMasteryQuestTable' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SoftMasteryTable) == 0x000658, "Member 'UHWGodDetailsGodAscensionWidget::SoftMasteryTable' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, RedirectCollectionItem) == 0x000680, "Member 'UHWGodDetailsGodAscensionWidget::RedirectCollectionItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, QuestEntryCache) == 0x0006A8, "Member 'UHWGodDetailsGodAscensionWidget::QuestEntryCache' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, bIsPopulated) == 0x000758, "Member 'UHWGodDetailsGodAscensionWidget::bIsPopulated' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, RewardDisplayCount) == 0x00075C, "Member 'UHWGodDetailsGodAscensionWidget::RewardDisplayCount' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, AscensionTrack) == 0x000760, "Member 'UHWGodDetailsGodAscensionWidget::AscensionTrack' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, AscensionTrackEntryClass) == 0x000768, "Member 'UHWGodDetailsGodAscensionWidget::AscensionTrackEntryClass' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, TrackEntries) == 0x000770, "Member 'UHWGodDetailsGodAscensionWidget::TrackEntries' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, AscensionProgressWidget) == 0x000780, "Member 'UHWGodDetailsGodAscensionWidget::AscensionProgressWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, RewardProgressBar) == 0x000788, "Member 'UHWGodDetailsGodAscensionWidget::RewardProgressBar' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, AscensionPurchaseWidget) == 0x000790, "Member 'UHWGodDetailsGodAscensionWidget::AscensionPurchaseWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, RewardVerticalBox) == 0x000798, "Member 'UHWGodDetailsGodAscensionWidget::RewardVerticalBox' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, OnRewardEntrySelected) == 0x0007A0, "Member 'UHWGodDetailsGodAscensionWidget::OnRewardEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, MasteryLevel) == 0x0007B0, "Member 'UHWGodDetailsGodAscensionWidget::MasteryLevel' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SegmentedWidths) == 0x0007B8, "Member 'UHWGodDetailsGodAscensionWidget::SegmentedWidths' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SegmentedPaddings) == 0x0007C8, "Member 'UHWGodDetailsGodAscensionWidget::SegmentedPaddings' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, UnlockAscensionBindingContainer) == 0x0007E8, "Member 'UHWGodDetailsGodAscensionWidget::UnlockAscensionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, ClaimRewardBindingContainer) == 0x000828, "Member 'UHWGodDetailsGodAscensionWidget::ClaimRewardBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, GotoPreviousRewardBindingContainer) == 0x000868, "Member 'UHWGodDetailsGodAscensionWidget::GotoPreviousRewardBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, GotoNextRewardBindingContainer) == 0x0008A8, "Member 'UHWGodDetailsGodAscensionWidget::GotoNextRewardBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, NavigateRewardsContextCalloutDisplay) == 0x0008E8, "Member 'UHWGodDetailsGodAscensionWidget::NavigateRewardsContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, TrackNavigationContextCalloutDisplay) == 0x000930, "Member 'UHWGodDetailsGodAscensionWidget::TrackNavigationContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodAscensionWidget, SelectedEntryWidget) == 0x000988, "Member 'UHWGodDetailsGodAscensionWidget::SelectedEntryWidget' has a wrong offset!");

// Class HemingwayUI.HWFilterWidget
// 0x00C8 (0x06C0 - 0x05F8)
class UHWFilterWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(const class FText& SearchText)> OnFilterSearchTextChanged;         // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFilterTagsCleared;                               // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFilterTagsChanged;                               // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& AddedFilterTag)> OnFilterTagAdded;      // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& RemovedFilterTag)> OnFilterTagRemoved;  // 0x0638(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EHWFilterSortMethod FilterMethod, bool bInvertSort)> OnFilterSortChanged; // 0x0648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SpecializationTags;                                // 0x0658(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         RoleFilterThreshold;                               // 0x0678(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SearchText;                                        // 0x0680(0x0018)(Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FilterTags;                                        // 0x0698(0x0020)(Protected, NativeAccessSpecifierProtected)
	EHWFilterSortMethod                           SortMethod;                                        // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInvertSort;                                       // 0x06B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6BA[0x6];                                      // 0x06BA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddExclusiveModeFilterTag(const struct FGameplayTag& ModeFilterTag);
	void AddExclusiveRoleFilterTag(const struct FGameplayTag& RoleFilterTag);
	void AddFilterTag(const struct FGameplayTag& FilterTag);
	void ClearFilterSearchText();
	void ClearFilterTags();
	void RemoveFilterTag(const struct FGameplayTag& FilterTag);
	void SetFilterSearchText(const class FText& InSearchText);
	void SetInvertSort(bool bShouldInvertSort);
	void SetSortMethod(EHWFilterSortMethod NewSortMethod);

	struct FGameplayTagContainer GetPantheonGameplayTags() const;
	bool GetShouldInvertSort() const;
	EHWFilterSortMethod GetSortMethod() const;
	struct FGameplayTagContainer GetSpecializationGameplayTags() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFilterWidget">();
	}
	static class UHWFilterWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFilterWidget>();
	}
};
static_assert(alignof(UHWFilterWidget) == 0x000008, "Wrong alignment on UHWFilterWidget");
static_assert(sizeof(UHWFilterWidget) == 0x0006C0, "Wrong size on UHWFilterWidget");
static_assert(offsetof(UHWFilterWidget, OnFilterSearchTextChanged) == 0x0005F8, "Member 'UHWFilterWidget::OnFilterSearchTextChanged' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, OnFilterTagsCleared) == 0x000608, "Member 'UHWFilterWidget::OnFilterTagsCleared' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, OnFilterTagsChanged) == 0x000618, "Member 'UHWFilterWidget::OnFilterTagsChanged' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, OnFilterTagAdded) == 0x000628, "Member 'UHWFilterWidget::OnFilterTagAdded' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, OnFilterTagRemoved) == 0x000638, "Member 'UHWFilterWidget::OnFilterTagRemoved' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, OnFilterSortChanged) == 0x000648, "Member 'UHWFilterWidget::OnFilterSortChanged' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, SpecializationTags) == 0x000658, "Member 'UHWFilterWidget::SpecializationTags' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, RoleFilterThreshold) == 0x000678, "Member 'UHWFilterWidget::RoleFilterThreshold' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, SearchText) == 0x000680, "Member 'UHWFilterWidget::SearchText' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, FilterTags) == 0x000698, "Member 'UHWFilterWidget::FilterTags' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, SortMethod) == 0x0006B8, "Member 'UHWFilterWidget::SortMethod' has a wrong offset!");
static_assert(offsetof(UHWFilterWidget, bInvertSort) == 0x0006B9, "Member 'UHWFilterWidget::bInvertSort' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderSearchWidget
// 0x0048 (0x0708 - 0x06C0)
class UHWGodBuilderSearchWidget : public UHWFilterWidget
{
public:
	uint8                                         Pad_6C0[0x10];                                     // 0x06C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x06D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_ItemId                             GodAspectId;                                       // 0x06D8(0x0014)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ModeTags;                                          // 0x06F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHWButtonWidget*                        SearchButton;                                      // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleSearchButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderSearchWidget">();
	}
	static class UHWGodBuilderSearchWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderSearchWidget>();
	}
};
static_assert(alignof(UHWGodBuilderSearchWidget) == 0x000008, "Wrong alignment on UHWGodBuilderSearchWidget");
static_assert(sizeof(UHWGodBuilderSearchWidget) == 0x000708, "Wrong size on UHWGodBuilderSearchWidget");
static_assert(offsetof(UHWGodBuilderSearchWidget, GodItem) == 0x0006D0, "Member 'UHWGodBuilderSearchWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderSearchWidget, GodAspectId) == 0x0006D8, "Member 'UHWGodBuilderSearchWidget::GodAspectId' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderSearchWidget, ModeTags) == 0x0006F0, "Member 'UHWGodBuilderSearchWidget::ModeTags' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderSearchWidget, SearchButton) == 0x000700, "Member 'UHWGodBuilderSearchWidget::SearchButton' has a wrong offset!");

// Class HemingwayUI.HWGodDetailsGodBuilderWidget
// 0x0708 (0x0D10 - 0x0608)
class UHWGodDetailsGodBuilderWidget : public UHWGodDetailsEntryWidget
{
public:
	EHWGodBuilderState                            CachedBuilderState;                                // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWTabBarWidget*                        TabBar;                                            // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWBuildsListDisplayType                      CurrentDisplayType;                                // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            CurrentHoveredBuild;                               // 0x0620(0x0190)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         UnhoverItemDelay;                                  // 0x07B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B4[0x4];                                      // 0x07B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWWidgetSwitcher*                      LeftPanelSwitcher;                                 // 0x07B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildsListWidget*          BuildsList;                                        // 0x07C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderRolesListWidget*           RolesList;                                         // 0x07C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilitiesListWidget*       AbilitiesList;                                     // 0x07D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderItemsListWidget*           ItemsList;                                         // 0x07D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderModesListWidget*           ModesList;                                         // 0x07E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x8];                                      // 0x07E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWWidgetSwitcher*                      CenterPanelSwitcher;                               // 0x07F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayWidget*        BuildDisplay;                                      // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildEditorWidget*         BuildEditor;                                       // 0x0800(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderSearchWidget*              SearchWidget;                                      // 0x0808(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      RightPanelSwitcher;                                // 0x0810(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderStatsDisplayWidget*        StatsDisplay;                                      // 0x0818(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderItemDisplayWidget*         ItemDisplay;                                       // 0x0820(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilityDisplayWidget*      AbilityDisplay;                                    // 0x0828(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              PinToStoreButton;                                  // 0x0830(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              CopyToButton;                                      // 0x0838(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              FavoriteButton;                                    // 0x0840(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              UnfavoriteButton;                                  // 0x0848(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              EditButton;                                        // 0x0850(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              DeleteButton;                                      // 0x0858(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              SaveButton;                                        // 0x0860(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              CancelButton;                                      // 0x0868(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  CurrentPreviewingGuid;                             // 0x0870(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  NewlyCreatedGuid;                                  // 0x0880(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            EditBindingContainer;                              // 0x0890(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D0[0x8];                                      // 0x08D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            DeleteBindingContainer;                            // 0x08D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_918[0x8];                                      // 0x0918(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            SaveBindingContainer;                              // 0x0920(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_960[0x8];                                      // 0x0960(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ExpandBindingContainer;                            // 0x0968(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A8[0x8];                                      // 0x09A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            DeleteBuildEntryBindingContainer;                  // 0x09B0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F0[0x8];                                      // 0x09F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PrevLevelStatsBindingContainer;                    // 0x09F8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A38[0x8];                                      // 0x0A38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            NextLevelStatsBindingContainer;                    // 0x0A40(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A80[0x8];                                      // 0x0A80(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ToggleFavoriteBindingContainer;                    // 0x0A88(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC8[0x8];                                      // 0x0AC8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PinBuildBindingContainer;                          // 0x0AD0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B10[0x8];                                      // 0x0B10(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FocusSearchTextBindingContainer;                   // 0x0B18(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B58[0x8];                                      // 0x0B58(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ToggleSearchVisibilityBindingContainer;            // 0x0B60(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_BA0[0x8];                                      // 0x0BA0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RequestSearchBindingContainer;                     // 0x0BA8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_BE8[0x8];                                      // 0x0BE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RemoveItemBindingContainer;                        // 0x0BF0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C30[0x8];                                      // 0x0C30(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            EditItemFilterAction;                              // 0x0C38(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C78[0x8];                                      // 0x0C78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FocusItemSearchActionContainer;                    // 0x0C80(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC0[0x8];                                      // 0x0CC0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            CopyToBindingContainer;                            // 0x0CC8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D08[0x8];                                      // 0x0D08(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAbilitiesListEntrySelected(const class UHWGodAbilityEntryWidget* EntryWidget);
	void HandleBuildCreatedResult(bool bSuccess, const struct FHWGodBuild& InGodBuild);
	void HandleBuildDeletedResult(bool bSuccess, const struct FHWGodBuild& InGodBuild);
	void HandleBuildEditorAbilityButtonClicked();
	void HandleBuildEditorAbilityIconHovered(int32 AbilityIndex);
	void HandleBuildEditorAbilityIconUnhovered(int32 AbilityIndex);
	void HandleBuildEditorFinalBuildUpdated(const struct FHWGodBuildEntry& FinalBuildEntry);
	void HandleBuildEditorModeButtonClicked();
	void HandleBuildEditorRoleButtonClicked();
	void HandleBuildEntryItemHovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildEntryItemRightClicked(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildEntryItemSelected(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildEntryItemUnhoverDelay();
	void HandleBuildEntryItemUnhovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildSearchResult(bool bSuccess, const TArray<struct FHWGodBuild>& InGodBuilds);
	void HandleBuildsListCreateBuildSelected();
	void HandleBuildsListEntryHovered(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild);
	void HandleBuildsListEntrySelected(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild);
	void HandleBuildsListScrolledToEnd();
	void HandleBuildUpdatedResult(bool bSuccess, const struct FRH_ErrorInfo& ErrorInfo, const struct FHWGodBuild& InGodBuild);
	void HandleCancelButtonClicked();
	void HandleCopyToAction();
	void HandleCopyToButtonClicked();
	void HandleCopyToResult(bool bSuccess, const class FText& ErrorMessage);
	void HandleDeleteAction();
	void HandleDeleteBuildEntryAction();
	void HandleDeleteButtonClicked();
	void HandleEditAction();
	void HandleEditButtonClicked();
	void HandleEditItemFilterAction();
	void HandleExpandAction();
	void HandleFavoriteButtonClicked();
	void HandleFocusSearchTextAction();
	void HandleFullGodBuildResult(bool bSuccess, const struct FHWGodBuild& InGodBuild);
	void HandleItemDisplayItemSelected(const class UHWEquipmentItem* SelectedComponentItem);
	void HandleItemSearchAction();
	void HandleItemsListEntryHovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryRightClicked(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntrySelected(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryUnhovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryUnhoveredDelay();
	void HandleModesListEntrySelected(class UHWGodBuilderModesListEntryWidget* EntryWidget, const struct FGameplayTag& EntryMode);
	void HandleNextLevelStatsAction();
	void HandleOnTabChanged(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause);
	void HandlePinBuildAction();
	void HandlePinToStoreButtonClicked();
	void HandlePrevLevelStatsAction();
	void HandleRemoveItemAction();
	void HandleRequestSearchAction();
	void HandleRolesListEntrySelected(class UHWGodBuilderRolesListEntryWidget* EntryWidget, ECharacterRole EntryRole);
	void HandleSaveAction();
	void HandleSaveButtonClicked();
	void HandleSearchButtonClicked();
	void HandleSetIsFavoriteBuildResult(bool bSuccess, const struct FGuid& InGodBuildId, bool bIsNowFavorite);
	void HandleToggleFavoriteAction();
	void HandleToggleSearchVisibilityAction();
	void HandleUnfavoriteButtonClicked();
	void OnLocalPlayerPinnedBuildUpdated(const class UHWCharacterItem* InGodItem, const struct FGuid& BuildGuid);
	void OnShowBuildError(EHWGodBuilderError GodBuilderError, const class FText& InErrorText);
	void SetGodBuilderState(EHWGodBuilderState BuilderState);
	void UpdatePinButton();
	void UpdateRegisteredInputs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsGodBuilderWidget">();
	}
	static class UHWGodDetailsGodBuilderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsGodBuilderWidget>();
	}
};
static_assert(alignof(UHWGodDetailsGodBuilderWidget) == 0x000008, "Wrong alignment on UHWGodDetailsGodBuilderWidget");
static_assert(sizeof(UHWGodDetailsGodBuilderWidget) == 0x000D10, "Wrong size on UHWGodDetailsGodBuilderWidget");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CachedBuilderState) == 0x000608, "Member 'UHWGodDetailsGodBuilderWidget::CachedBuilderState' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, TabBar) == 0x000610, "Member 'UHWGodDetailsGodBuilderWidget::TabBar' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CurrentDisplayType) == 0x000618, "Member 'UHWGodDetailsGodBuilderWidget::CurrentDisplayType' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CurrentHoveredBuild) == 0x000620, "Member 'UHWGodDetailsGodBuilderWidget::CurrentHoveredBuild' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, UnhoverItemDelay) == 0x0007B0, "Member 'UHWGodDetailsGodBuilderWidget::UnhoverItemDelay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, LeftPanelSwitcher) == 0x0007B8, "Member 'UHWGodDetailsGodBuilderWidget::LeftPanelSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, BuildsList) == 0x0007C0, "Member 'UHWGodDetailsGodBuilderWidget::BuildsList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, RolesList) == 0x0007C8, "Member 'UHWGodDetailsGodBuilderWidget::RolesList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, AbilitiesList) == 0x0007D0, "Member 'UHWGodDetailsGodBuilderWidget::AbilitiesList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ItemsList) == 0x0007D8, "Member 'UHWGodDetailsGodBuilderWidget::ItemsList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ModesList) == 0x0007E0, "Member 'UHWGodDetailsGodBuilderWidget::ModesList' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CenterPanelSwitcher) == 0x0007F0, "Member 'UHWGodDetailsGodBuilderWidget::CenterPanelSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, BuildDisplay) == 0x0007F8, "Member 'UHWGodDetailsGodBuilderWidget::BuildDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, BuildEditor) == 0x000800, "Member 'UHWGodDetailsGodBuilderWidget::BuildEditor' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, SearchWidget) == 0x000808, "Member 'UHWGodDetailsGodBuilderWidget::SearchWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, RightPanelSwitcher) == 0x000810, "Member 'UHWGodDetailsGodBuilderWidget::RightPanelSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, StatsDisplay) == 0x000818, "Member 'UHWGodDetailsGodBuilderWidget::StatsDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ItemDisplay) == 0x000820, "Member 'UHWGodDetailsGodBuilderWidget::ItemDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, AbilityDisplay) == 0x000828, "Member 'UHWGodDetailsGodBuilderWidget::AbilityDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, PinToStoreButton) == 0x000830, "Member 'UHWGodDetailsGodBuilderWidget::PinToStoreButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CopyToButton) == 0x000838, "Member 'UHWGodDetailsGodBuilderWidget::CopyToButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, FavoriteButton) == 0x000840, "Member 'UHWGodDetailsGodBuilderWidget::FavoriteButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, UnfavoriteButton) == 0x000848, "Member 'UHWGodDetailsGodBuilderWidget::UnfavoriteButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, EditButton) == 0x000850, "Member 'UHWGodDetailsGodBuilderWidget::EditButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, DeleteButton) == 0x000858, "Member 'UHWGodDetailsGodBuilderWidget::DeleteButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, SaveButton) == 0x000860, "Member 'UHWGodDetailsGodBuilderWidget::SaveButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CancelButton) == 0x000868, "Member 'UHWGodDetailsGodBuilderWidget::CancelButton' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CurrentPreviewingGuid) == 0x000870, "Member 'UHWGodDetailsGodBuilderWidget::CurrentPreviewingGuid' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, NewlyCreatedGuid) == 0x000880, "Member 'UHWGodDetailsGodBuilderWidget::NewlyCreatedGuid' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, EditBindingContainer) == 0x000890, "Member 'UHWGodDetailsGodBuilderWidget::EditBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, DeleteBindingContainer) == 0x0008D8, "Member 'UHWGodDetailsGodBuilderWidget::DeleteBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, SaveBindingContainer) == 0x000920, "Member 'UHWGodDetailsGodBuilderWidget::SaveBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ExpandBindingContainer) == 0x000968, "Member 'UHWGodDetailsGodBuilderWidget::ExpandBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, DeleteBuildEntryBindingContainer) == 0x0009B0, "Member 'UHWGodDetailsGodBuilderWidget::DeleteBuildEntryBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, PrevLevelStatsBindingContainer) == 0x0009F8, "Member 'UHWGodDetailsGodBuilderWidget::PrevLevelStatsBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, NextLevelStatsBindingContainer) == 0x000A40, "Member 'UHWGodDetailsGodBuilderWidget::NextLevelStatsBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ToggleFavoriteBindingContainer) == 0x000A88, "Member 'UHWGodDetailsGodBuilderWidget::ToggleFavoriteBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, PinBuildBindingContainer) == 0x000AD0, "Member 'UHWGodDetailsGodBuilderWidget::PinBuildBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, FocusSearchTextBindingContainer) == 0x000B18, "Member 'UHWGodDetailsGodBuilderWidget::FocusSearchTextBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, ToggleSearchVisibilityBindingContainer) == 0x000B60, "Member 'UHWGodDetailsGodBuilderWidget::ToggleSearchVisibilityBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, RequestSearchBindingContainer) == 0x000BA8, "Member 'UHWGodDetailsGodBuilderWidget::RequestSearchBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, RemoveItemBindingContainer) == 0x000BF0, "Member 'UHWGodDetailsGodBuilderWidget::RemoveItemBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, EditItemFilterAction) == 0x000C38, "Member 'UHWGodDetailsGodBuilderWidget::EditItemFilterAction' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, FocusItemSearchActionContainer) == 0x000C80, "Member 'UHWGodDetailsGodBuilderWidget::FocusItemSearchActionContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsGodBuilderWidget, CopyToBindingContainer) == 0x000CC8, "Member 'UHWGodDetailsGodBuilderWidget::CopyToBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWUILibrary_Core
// 0x0000 (0x0028 - 0x0028)
class UHWUILibrary_Core final : public UBlueprintFunctionLibrary
{
public:
	static void ArrangeUniformPanelElementWidgetsGrid(TArray<class UWidget*>& ElementWidgets, EHWOrientation SpanOrientation, int32 Width, EHWHorizontalAlignment HorizontalAlignment, EHWVerticalAlignment VerticalAlignment);
	static bool CanEnterJunglePracticeMode(const class UObject* WorldContextObject);
	static bool ConstructPlaystyleDescriptorText(const class UObject* WorldContextObject, const class UHWCharacterItem* CharacterItem, const struct FGameplayTagContainer& DescriptorTagsToMatch, const struct FGameplayTag& ArchtypeParentTag, const class FText& DelimiterText, class FText* OutPlaystyleDescriptorText);
	static void ConvertDistanceToDistComponents(class UObject* WorldContextObject, const int32 InTotalMeters, int32* Gigameters, int32* Megameters, int32* Kilometers, int32* Meters);
	static void ConvertDurationToTimeComponents(class UObject* WorldContextObject, const int32 InTotalSeconds, int32* Years, int32* Days, int32* Hours, int32* Minutes, int32* Seconds);
	static void ConvertQuantityToComponents(class UObject* WorldContextObject, const int32 InQuantity, int32* Billions, int32* Millions, int32* Thousands, int32* Units);
	static void CopyToClipboard(const class FString& StringToCopy);
	static void EnterJunglePracticeByGod(const class UObject* WorldContextObject, const struct FGameplayTag& PracticeModeTag, const TSoftObjectPtr<class UHWCharacterItem> CharacterItem, TSoftObjectPtr<class UHWSkinItem> OptionalSkinItem);
	static void EnterJunglePracticeBySkin(const class UObject* WorldContextObject, const struct FGameplayTag& PracticeModeTag, TSoftObjectPtr<class UHWSkinItem> SkinItem);
	static bool EuqalEqual_DraftChoice(const struct FDraftChoice& A, const struct FDraftChoice& B);
	static bool EuqalEqual_DraftTask(const struct FDraftTask& A, const struct FDraftTask& B);
	static bool FindEquipmentItem(const class UObject* WorldContextObject, const struct FRH_ItemId& InItemId, TSoftObjectPtr<class UHWEquipmentItem>* OutEquipmentItem, bool bIncludeHiddenItems);
	static int32 GetCachedProgressCountFromQuestEntry(const class URH_PlayerInfo* PlayerInfo, const struct FGodQuestEntry& InEntry);
	static int32 GetCertEnvironment(const class UObject* WorldContextObject, bool* bOutFound);
	static class UWidget* GetContainerDesiredFocusTarget(const class UPanelWidget* PanelWidget);
	static class FString GetEngineVersionChangeList();
	static double GetRealTimeSecondsForUIMaterial(const class UObject* WorldContextObject);
	static class FString GetRomanNumeralFromInt(int32 Number);
	static class UHWWidget* GetRootUserWidget(const class UWidget* ChildWidget);
	static TSoftObjectPtr<class UTexture2D> GetTeamBasedDisplayTextureForCharacterItem(const class UHWCharacterItem* CharacterItem, const struct FGenericTeamId& TeamId, const struct FGameplayTag& OrderTextureGameplayTag, const struct FGameplayTag& ChaosTextureGameplayTag);
	static class FText GetTimerTextFromSeconds(float TimeInSeconds, bool bAlwaysShowHour, bool bAlwaysShowMinute, bool bShowFractional, bool bZeroPad);
	static EHWQuestTrackerAwardType GetTrackerAwardTypeFromQuestEntry(class UObject* WorldContextObject, const struct FGodQuestEntry& InEntry);
	static class FString GetTruncatedActiveSessionId(const class UObject* WorldContextObject);
	static class FString GetVersionAndMatchDisplayString(const class UObject* WorldContextObject);
	static bool IsCharacterAscensionPassOwned(const class URH_PlayerInfo* PlayerInfo, const class UHWCharacterItem* CharacterItem);
	static bool IsInEditor();
	static bool IsLocalDraftTask(const class UObject* WorldContextObject, const struct FDraftTask& DraftTask);
	static class FText JoinTextArray(const TArray<class FText>& Texts, const class FText& Delimiter);
	static bool NotEqual_DraftChoice(const struct FDraftChoice& A, const struct FDraftChoice& B);
	static bool NotEqual_DraftTask(const struct FDraftTask& A, const struct FDraftTask& B);
	static void PasteFromClipboard(class FString* OutString);
	static void Play2DSoundFromAnnouncerPack(const class UObject* WorldContextObject, const class UHWAnnouncerPackItem* InAnnouncerPack, const struct FAssetRequestKey& AssetKey);
	static void Play2DSoundFromSkinVoicePack(const class UObject* WorldContextObject, const class UHWSkinItem* InSkin, class FName InVoiceRowName);
	static void ReturnToMainLobbyFromEOML(const class UObject* WorldContextObject, TSoftObjectPtr<class UWorld> MainLobbyMap);
	static class FText SanitizeRichText(const class FText& InText);
	static void ToggleHelpTipForTargeterGameplayCue(const class UObject* WorldContextObject, const struct FGameplayCueParameters& GCParams, const struct FGameplayTag& OrderHelpTipTag, const struct FGameplayTag& ChaosHelpTipTag, bool bToggleOn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUILibrary_Core">();
	}
	static class UHWUILibrary_Core* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUILibrary_Core>();
	}
};
static_assert(alignof(UHWUILibrary_Core) == 0x000008, "Wrong alignment on UHWUILibrary_Core");
static_assert(sizeof(UHWUILibrary_Core) == 0x000028, "Wrong size on UHWUILibrary_Core");

// Class HemingwayUI.HWGodDetailsGodOverviewWidget
// 0x0000 (0x0608 - 0x0608)
class UHWGodDetailsGodOverviewWidget : public UHWGodDetailsEntryWidget
{
public:
	bool GetKeywordDataFromPotentialTags(const struct FGameplayTagContainer& PotentialTags, struct FHWDataDisplay_Keyword* OutKeywordData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsGodOverviewWidget">();
	}
	static class UHWGodDetailsGodOverviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsGodOverviewWidget>();
	}
};
static_assert(alignof(UHWGodDetailsGodOverviewWidget) == 0x000008, "Wrong alignment on UHWGodDetailsGodOverviewWidget");
static_assert(sizeof(UHWGodDetailsGodOverviewWidget) == 0x000608, "Wrong size on UHWGodDetailsGodOverviewWidget");

// Class HemingwayUI.HWTooltipWidget_Objective
// 0x0000 (0x05F8 - 0x05F8)
class UHWTooltipWidget_Objective : public UHWWidget
{
public:
	void Clear();
	void DisplayText(const TArray<class FText>& TextList, const int32 SelectedIndex);
	void Populate(const TArray<class FText>& TextList, const int32 SelectedIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_Objective">();
	}
	static class UHWTooltipWidget_Objective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_Objective>();
	}
};
static_assert(alignof(UHWTooltipWidget_Objective) == 0x000008, "Wrong alignment on UHWTooltipWidget_Objective");
static_assert(sizeof(UHWTooltipWidget_Objective) == 0x0005F8, "Wrong size on UHWTooltipWidget_Objective");

// Class HemingwayUI.HWGodDetailsScreenWidget
// 0x01C0 (0x07B8 - 0x05F8)
class UHWGodDetailsScreenWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWTabBarWidget*                        TabBar;                                            // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidgetSwitcher*                      GodDetailsWidgetSwitcher;                          // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsGodOverviewWidget*         GodOverviewWidget;                                 // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsAbilityOverviewWidget*     AbilityOverviewWidget;                             // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsGodCollectionWidget*       GodCollectionWidget;                               // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsGodAscensionWidget*        GodAscensionWidget;                                // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWGodDetailsGodBuilderWidget*          GodBuilderWidget;                                  // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultTabIndex;                                   // 0x0640(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           PreviousGodAction;                                 // 0x0648(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           NextGodAction;                                     // 0x0650(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_658[0x18];                                     // 0x0658(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        ValidGodItem;                                      // 0x0678(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        LastValidGodItem;                                  // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RotatePreviewLeftBindingContainer;                 // 0x0690(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RotatePreviewRightBindingContainer;                // 0x06D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            UnlockGodBindingContainer;                         // 0x0720(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_760[0x4];                                      // 0x0760(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PracticeMapTag;                                    // 0x0764(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            EnterPracticeBinding;                              // 0x0770(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B0[0x8];                                      // 0x07B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleRotatePreviewAction();
	void HandleRotatePreviewActionHeld(float HoldPercent, int32 Direction);
	void OnActiveDetailsWidgetSet(class UHWTabBarWidget* TabBarWidget, int32 Index_0, EHWTabChangeCause Cause);
	void OnChangeGodItem(int32 OffsetFromCurrentGod);
	void OnGodSet();
	void OnNextGodActionPressed();
	void OnPreviousGodActionPressed();
	void OnSelectedCharacterSkinLoaded();
	void OpenGodPurchaseConfirmation();
	void SetActiveDetailsWidget(class UHWTabBarWidget* TabBarWidget, int32 Index_0, EHWTabChangeCause Cause);
	void UpdateGodItemUnlockPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void UpdateGodOwnershipState();
	void UpdateToggleGodPrompt(bool bShow);
	void UpdateUnlockPromptVisibility(bool bCurrentTabShouldShowPrompt, EHWCollectionItemStatus GodItemStatus);

	EHWCollectionItemStatus GetCurrentGodItemStatus() const;
	bool ShouldCurrentTabShowEnterPracticePrompt() const;
	bool ShouldCurrentTabShowUnlockPrompt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodDetailsScreenWidget">();
	}
	static class UHWGodDetailsScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodDetailsScreenWidget>();
	}
};
static_assert(alignof(UHWGodDetailsScreenWidget) == 0x000008, "Wrong alignment on UHWGodDetailsScreenWidget");
static_assert(sizeof(UHWGodDetailsScreenWidget) == 0x0007B8, "Wrong size on UHWGodDetailsScreenWidget");
static_assert(offsetof(UHWGodDetailsScreenWidget, TabBar) == 0x000608, "Member 'UHWGodDetailsScreenWidget::TabBar' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodDetailsWidgetSwitcher) == 0x000610, "Member 'UHWGodDetailsScreenWidget::GodDetailsWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodOverviewWidget) == 0x000618, "Member 'UHWGodDetailsScreenWidget::GodOverviewWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, AbilityOverviewWidget) == 0x000620, "Member 'UHWGodDetailsScreenWidget::AbilityOverviewWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodCollectionWidget) == 0x000628, "Member 'UHWGodDetailsScreenWidget::GodCollectionWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodAscensionWidget) == 0x000630, "Member 'UHWGodDetailsScreenWidget::GodAscensionWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodBuilderWidget) == 0x000638, "Member 'UHWGodDetailsScreenWidget::GodBuilderWidget' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, DefaultTabIndex) == 0x000640, "Member 'UHWGodDetailsScreenWidget::DefaultTabIndex' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, PreviousGodAction) == 0x000648, "Member 'UHWGodDetailsScreenWidget::PreviousGodAction' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, NextGodAction) == 0x000650, "Member 'UHWGodDetailsScreenWidget::NextGodAction' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, GodItem) == 0x000670, "Member 'UHWGodDetailsScreenWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, ValidGodItem) == 0x000678, "Member 'UHWGodDetailsScreenWidget::ValidGodItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, LastValidGodItem) == 0x000680, "Member 'UHWGodDetailsScreenWidget::LastValidGodItem' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, RotatePreviewLeftBindingContainer) == 0x000690, "Member 'UHWGodDetailsScreenWidget::RotatePreviewLeftBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, RotatePreviewRightBindingContainer) == 0x0006D8, "Member 'UHWGodDetailsScreenWidget::RotatePreviewRightBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, UnlockGodBindingContainer) == 0x000720, "Member 'UHWGodDetailsScreenWidget::UnlockGodBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, PracticeMapTag) == 0x000764, "Member 'UHWGodDetailsScreenWidget::PracticeMapTag' has a wrong offset!");
static_assert(offsetof(UHWGodDetailsScreenWidget, EnterPracticeBinding) == 0x000770, "Member 'UHWGodDetailsScreenWidget::EnterPracticeBinding' has a wrong offset!");

// Class HemingwayUI.HWTooltipWidget_Item
// 0x0030 (0x0628 - 0x05F8)
class UHWTooltipWidget_Item : public UHWWidget
{
public:
	TSubclassOf<class UHWTooltipWidget_ItemStat>  StatLineClass;                                     // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWTooltipWidget_ItemStat*>      VisibleLines;                                      // 0x0600(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWTooltipWidget_ItemStat*>      CachedLines;                                       // 0x0610(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UVerticalBox*                           StatLineContainer;                                 // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayAbilityDescription(const class FText& Description);
	void DisplayDescription(const class FText& Description);
	void DisplayIcon(const TSoftObjectPtr<class UTexture2D>& Icon);
	void DisplayTitle(const class FText& Title);
	void DisplayUniqueness(bool bIsUnique);
	void Populate(const class UHWEquipmentItem* EquipmentItem);
	void StatLineAdded(class UHWTooltipWidget_ItemStat* Line);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_Item">();
	}
	static class UHWTooltipWidget_Item* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_Item>();
	}
};
static_assert(alignof(UHWTooltipWidget_Item) == 0x000008, "Wrong alignment on UHWTooltipWidget_Item");
static_assert(sizeof(UHWTooltipWidget_Item) == 0x000628, "Wrong size on UHWTooltipWidget_Item");
static_assert(offsetof(UHWTooltipWidget_Item, StatLineClass) == 0x0005F8, "Member 'UHWTooltipWidget_Item::StatLineClass' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Item, VisibleLines) == 0x000600, "Member 'UHWTooltipWidget_Item::VisibleLines' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Item, CachedLines) == 0x000610, "Member 'UHWTooltipWidget_Item::CachedLines' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_Item, StatLineContainer) == 0x000620, "Member 'UHWTooltipWidget_Item::StatLineContainer' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderItemDisplayWidget
// 0x0018 (0x0640 - 0x0628)
class UHWGodBuilderItemDisplayWidget : public UHWTooltipWidget_Item
{
public:
	uint8                                         Pad_628[0x10];                                     // 0x0628(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWItemStoreTreeViewWidget*             ItemTreeWidget;                                    // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearDisplay();
	void HandleItemTreeItemComponentSelected(const class UHWEquipmentItem* SelectedComponentItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderItemDisplayWidget">();
	}
	static class UHWGodBuilderItemDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderItemDisplayWidget>();
	}
};
static_assert(alignof(UHWGodBuilderItemDisplayWidget) == 0x000008, "Wrong alignment on UHWGodBuilderItemDisplayWidget");
static_assert(sizeof(UHWGodBuilderItemDisplayWidget) == 0x000640, "Wrong size on UHWGodBuilderItemDisplayWidget");
static_assert(offsetof(UHWGodBuilderItemDisplayWidget, ItemTreeWidget) == 0x000638, "Member 'UHWGodBuilderItemDisplayWidget::ItemTreeWidget' has a wrong offset!");

// Class HemingwayUI.HWComboBox
// 0x0050 (0x1DA0 - 0x1D50)
class UHWComboBox final : public UComboBoxKey
{
public:
	TArray<struct FHWComboBoxOption>              DefaultOptions;                                    // 0x1D50(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FName                                   DefaultOption;                                     // 0x1D60(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWComboBoxStyle*                       ComboBoxStyle;                                     // 0x1D68(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWComboBoxEntry>           SelectionWidgetClassOverride;                      // 0x1D70(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWComboBoxEntry>           OptionWidgetClassOverride;                         // 0x1D78(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWComboBoxOption>              CurrentOptions;                                    // 0x1D80(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D90[0x10];                                    // 0x1D90(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOptions(const TArray<struct FHWComboBoxOption>& InOptions, class FName AutoSelectOption, bool bAppend);
	class UWidget* HandleGenerateContentWidget(class FName Item);
	class UWidget* HandleGenerateItemWidget(class FName Item);
	void HandleSelectionChangedEvent(class FName SelectedItem, ESelectInfo SelectionType);

	TArray<class FName> GetAvailableDefaultOptions() const;
	const TArray<struct FHWComboBoxOption> GetOptions() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWComboBox">();
	}
	static class UHWComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWComboBox>();
	}
};
static_assert(alignof(UHWComboBox) == 0x000010, "Wrong alignment on UHWComboBox");
static_assert(sizeof(UHWComboBox) == 0x001DA0, "Wrong size on UHWComboBox");
static_assert(offsetof(UHWComboBox, DefaultOptions) == 0x001D50, "Member 'UHWComboBox::DefaultOptions' has a wrong offset!");
static_assert(offsetof(UHWComboBox, DefaultOption) == 0x001D60, "Member 'UHWComboBox::DefaultOption' has a wrong offset!");
static_assert(offsetof(UHWComboBox, ComboBoxStyle) == 0x001D68, "Member 'UHWComboBox::ComboBoxStyle' has a wrong offset!");
static_assert(offsetof(UHWComboBox, SelectionWidgetClassOverride) == 0x001D70, "Member 'UHWComboBox::SelectionWidgetClassOverride' has a wrong offset!");
static_assert(offsetof(UHWComboBox, OptionWidgetClassOverride) == 0x001D78, "Member 'UHWComboBox::OptionWidgetClassOverride' has a wrong offset!");
static_assert(offsetof(UHWComboBox, CurrentOptions) == 0x001D80, "Member 'UHWComboBox::CurrentOptions' has a wrong offset!");

// Class HemingwayUI.HWGodsScreenGodEntryWidget
// 0x0080 (0x0678 - 0x05F8)
class UHWGodsScreenGodEntryWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(const class UHWCharacterItem* SelectedGodItem, const class UHWGodsScreenGodEntryWidget* EntryWidget)> OnGodSelected; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class UHWCharacterItem* SelectedGodItem, const class UHWGodsScreenGodEntryWidget* EntryWidget)> OnGodHovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_618[0x4];                                      // 0x0618(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x061C(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, TSoftObjectPtr<class UTexture2D>> DisplayTexturesByTag;                // 0x0628(0x0050)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void DisplayIsSelected();
	void OnGodSet();
	void SelectGod();
	void SetGodItem(const class UHWCharacterItem* InGodItem);
	void SetSelected(bool bSelected);
	void UpdateFavoriteDisplay();
	void UpdateOwnershipDisplay();

	TSoftObjectPtr<class UTexture2D> GetTextureForExactGameplayTag(const struct FGameplayTag& GameplayTag) const;
	bool IsComingSoon() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodsScreenGodEntryWidget">();
	}
	static class UHWGodsScreenGodEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodsScreenGodEntryWidget>();
	}
};
static_assert(alignof(UHWGodsScreenGodEntryWidget) == 0x000008, "Wrong alignment on UHWGodsScreenGodEntryWidget");
static_assert(sizeof(UHWGodsScreenGodEntryWidget) == 0x000678, "Wrong size on UHWGodsScreenGodEntryWidget");
static_assert(offsetof(UHWGodsScreenGodEntryWidget, OnGodSelected) == 0x0005F8, "Member 'UHWGodsScreenGodEntryWidget::OnGodSelected' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenGodEntryWidget, OnGodHovered) == 0x000608, "Member 'UHWGodsScreenGodEntryWidget::OnGodHovered' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenGodEntryWidget, GodItem) == 0x00061C, "Member 'UHWGodsScreenGodEntryWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenGodEntryWidget, DisplayTexturesByTag) == 0x000628, "Member 'UHWGodsScreenGodEntryWidget::DisplayTexturesByTag' has a wrong offset!");

// Class HemingwayUI.HWGodsScreenWidget
// 0x0108 (0x0700 - 0x05F8)
class UHWGodsScreenWidget : public UHWWidget
{
public:
	class UHWSortableGridPanel*                   GodsGrid;                                          // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWFilterWidget*                        FilterWidget;                                      // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWGodsScreenGodEntryWidget*>    GodEntries;                                        // 0x0608(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWGodsScreenGodEntryWidget*            HoveredEntry;                                      // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodsScreenGodEntryWidget> GodEntryWidgetClass;                              // 0x0620(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FHWUIActionBindingContainer            ToggleFilterBindingContainer;                      // 0x0628(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FocusSearchBindingContainer;                       // 0x0670(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            FavoriteBindingContainer;                          // 0x06B8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearGodEntries();
	class URHStoreItem* GetStoreItemForItem(class UPlatformInventoryItem* Item);
	void HandleFavoriteAction();
	void HandleFilterSearchTextChanged(const class FText& SearchText);
	void HandleFilterSortChanged(EHWFilterSortMethod FilterMethod, bool bInvertSort);
	void HandleFilterTagsChanged();
	void HandleFocusSearch();
	void HandleToggleFilterAction();
	void OnGodHovered(const class UHWCharacterItem* GodItem, const class UHWGodsScreenGodEntryWidget* EntryWidget);
	void OnGodSelected(const class UHWCharacterItem* GodItem, const class UHWGodsScreenGodEntryWidget* EntryWidget);
	void UpdateGodPackUpsell(bool bHasGodPack);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodsScreenWidget">();
	}
	static class UHWGodsScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodsScreenWidget>();
	}
};
static_assert(alignof(UHWGodsScreenWidget) == 0x000008, "Wrong alignment on UHWGodsScreenWidget");
static_assert(sizeof(UHWGodsScreenWidget) == 0x000700, "Wrong size on UHWGodsScreenWidget");
static_assert(offsetof(UHWGodsScreenWidget, GodsGrid) == 0x0005F8, "Member 'UHWGodsScreenWidget::GodsGrid' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, FilterWidget) == 0x000600, "Member 'UHWGodsScreenWidget::FilterWidget' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, GodEntries) == 0x000608, "Member 'UHWGodsScreenWidget::GodEntries' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, HoveredEntry) == 0x000618, "Member 'UHWGodsScreenWidget::HoveredEntry' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, GodEntryWidgetClass) == 0x000620, "Member 'UHWGodsScreenWidget::GodEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, ToggleFilterBindingContainer) == 0x000628, "Member 'UHWGodsScreenWidget::ToggleFilterBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, FocusSearchBindingContainer) == 0x000670, "Member 'UHWGodsScreenWidget::FocusSearchBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodsScreenWidget, FavoriteBindingContainer) == 0x0006B8, "Member 'UHWGodsScreenWidget::FavoriteBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderCopyToRouteData
// 0x0198 (0x01C0 - 0x0028)
class UHWGodBuilderCopyToRouteData final : public UObject
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0028(0x0190)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UHWCharacterItem>        WeakGodItem;                                       // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderCopyToRouteData">();
	}
	static class UHWGodBuilderCopyToRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderCopyToRouteData>();
	}
};
static_assert(alignof(UHWGodBuilderCopyToRouteData) == 0x000008, "Wrong alignment on UHWGodBuilderCopyToRouteData");
static_assert(sizeof(UHWGodBuilderCopyToRouteData) == 0x0001C0, "Wrong size on UHWGodBuilderCopyToRouteData");
static_assert(offsetof(UHWGodBuilderCopyToRouteData, GodBuild) == 0x000028, "Member 'UHWGodBuilderCopyToRouteData::GodBuild' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderCopyToRouteData, WeakGodItem) == 0x0001B8, "Member 'UHWGodBuilderCopyToRouteData::WeakGodItem' has a wrong offset!");

// Class HemingwayUI.HWSurrenderWidget
// 0x0040 (0x0678 - 0x0638)
class UHWSurrenderWidget : public UHWCharacterWidget
{
public:
	TSubclassOf<class UHWSurrenderPipWidget>      PipWidgetClass;                                    // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumPips;                                        // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWSurrenderPipWidget*>          PipWidgets;                                        // 0x0648(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWTeamState>            CurrentBoundTeamState;                             // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ResultDisplayTime;                                 // 0x0660(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_664[0x14];                                     // 0x0664(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPipWidgetToContainer(const EHWVoteState InitialState);
	void DisplayResult(const EHWVoteResult Result);
	void HandleOnHasSurrenderVotedUpdated(bool bUpdatedHasSurrenderVoted);
	void HandleOnSurrenderResolved(class AHWTeamState* TeamState, const EHWVoteResult Result);
	void HandleOnSurrenderVotesUpdated(class AHWTeamState* TeamState, int32 NumYesVotes, int32 NumNoVotes);
	void OnLocalPlayerVoteStatusUpdated();
	void OnPipWidgetAdded(class UHWSurrenderPipWidget* PipWidget);
	void OnPipWidgetRemoved(class UHWSurrenderPipWidget* PipWidget);
	void OnSurrenderDisplayToggled(bool bDisplay);
	void OnVotesUpdated();
	void ToggleDisplaySurrender(bool bDisplay);
	void UpdateTimerDisplay(float TimeRemaining, float TotalTime);

	bool IsDisplaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSurrenderWidget">();
	}
	static class UHWSurrenderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSurrenderWidget>();
	}
};
static_assert(alignof(UHWSurrenderWidget) == 0x000008, "Wrong alignment on UHWSurrenderWidget");
static_assert(sizeof(UHWSurrenderWidget) == 0x000678, "Wrong size on UHWSurrenderWidget");
static_assert(offsetof(UHWSurrenderWidget, PipWidgetClass) == 0x000638, "Member 'UHWSurrenderWidget::PipWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWSurrenderWidget, MaxNumPips) == 0x000640, "Member 'UHWSurrenderWidget::MaxNumPips' has a wrong offset!");
static_assert(offsetof(UHWSurrenderWidget, PipWidgets) == 0x000648, "Member 'UHWSurrenderWidget::PipWidgets' has a wrong offset!");
static_assert(offsetof(UHWSurrenderWidget, CurrentBoundTeamState) == 0x000658, "Member 'UHWSurrenderWidget::CurrentBoundTeamState' has a wrong offset!");
static_assert(offsetof(UHWSurrenderWidget, ResultDisplayTime) == 0x000660, "Member 'UHWSurrenderWidget::ResultDisplayTime' has a wrong offset!");

// Class HemingwayUI.HWHomeScreenQuestWidget
// 0x0070 (0x0668 - 0x05F8)
class UHWHomeScreenQuestWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              SoftQuestTable;                                    // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowQuests;                                      // 0x0620(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_621[0x3];                                      // 0x0621(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShowQuestCount;                                    // 0x0624(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_628[0x10];                                     // 0x0628(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UHWQuest>>        QuestItems;                                        // 0x0638(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UHWQuest*>                       ShownQuestItems;                                   // 0x0648(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UHWQuest*>                       InvalidQuestItems;                                 // 0x0658(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void AddQuest(const class UHWQuest* Quest);
	void ClearAllQuests();
	void ClearQuest(const class UHWQuest* Quest, bool bAddToBlockList);
	void HandleOnLocalPlayerInventoryLoaded(const TArray<int32>& UpdatedInventoryIds, class URH_PlayerInfo* PlayerInfo);
	void LoadQuestTable();
	void OnLoadQuestItems();
	void OnLoadQuestTable();
	void UpdateQuest(const class UHWQuest* Quest);

	bool GetIfAutoClaimQuest() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHomeScreenQuestWidget">();
	}
	static class UHWHomeScreenQuestWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHomeScreenQuestWidget>();
	}
};
static_assert(alignof(UHWHomeScreenQuestWidget) == 0x000008, "Wrong alignment on UHWHomeScreenQuestWidget");
static_assert(sizeof(UHWHomeScreenQuestWidget) == 0x000668, "Wrong size on UHWHomeScreenQuestWidget");
static_assert(offsetof(UHWHomeScreenQuestWidget, SoftQuestTable) == 0x0005F8, "Member 'UHWHomeScreenQuestWidget::SoftQuestTable' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenQuestWidget, bAllowQuests) == 0x000620, "Member 'UHWHomeScreenQuestWidget::bAllowQuests' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenQuestWidget, ShowQuestCount) == 0x000624, "Member 'UHWHomeScreenQuestWidget::ShowQuestCount' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenQuestWidget, QuestItems) == 0x000638, "Member 'UHWHomeScreenQuestWidget::QuestItems' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenQuestWidget, ShownQuestItems) == 0x000648, "Member 'UHWHomeScreenQuestWidget::ShownQuestItems' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenQuestWidget, InvalidQuestItems) == 0x000658, "Member 'UHWHomeScreenQuestWidget::InvalidQuestItems' has a wrong offset!");

// Class HemingwayUI.HWTooltipWidgetManager
// 0x0078 (0x0670 - 0x05F8)
class UHWTooltipWidgetManager : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWTooltipWidget_Ability*               AbilityTooltipWidget;                              // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Item*                  ItemTooltipWidget;                                 // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Effect*                EffectTooltipWidget;                               // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Objective*             ObjectiveTooltipWidget;                            // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentInfo>        EquipmentInfoCache;                                // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItemCache;                                // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWUIActionBindingContainer>    TooltipBindingContainers;                          // 0x0630(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x8];                                      // 0x0640(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefaultWidgetPromptName;                           // 0x0648(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UHWHUDNavigationPromptsWidget*          HUDNavPromptsWidget;                               // 0x0660(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHUDNavigationPromptsWidget*          HUDNavBottomPromptsWidget;                         // 0x0668(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Clear();
	void DisplayAtPosition(const struct FGeometry& ReferenceGeometry, EHWTooltipAxis Axis);
	void DisplayFromEquipmentInstance(const class UHWEquipmentInstance* EquipmentInstance, class UHWAbilitySystemComponent* ASC, const struct FGeometry& ReferenceGeometry, EHWTooltipAxis Axis);
	void DisplayFromEquipmentItem(const class UHWEquipmentItem* EquipmentItem, const int32 AbilityLevel, const struct FGeometry& ReferenceGeometry, EHWTooltipAxis Axis);
	void DisplayFromObjectiveData(const TArray<class FText>& TextList, const int32 CurrentSelection, const struct FGeometry& ReferenceGeometry, EHWTooltipAxis Axis);
	void DisplayFromUIBuffData(const class UHWGameplayEffectUIBuffData* UIBuffData, const struct FGeometry& ReferenceGeometry, EHWTooltipAxis Axis);
	void HandleHUDNavigationFocusChanged(class UHWWidget* PreviousFocusedWidget, class UHWWidget* NewFocusedWidget);
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void SetTooltipContainerVisibility(bool bNewIsVisible);
	void SetTooltipContextBarVisibility(bool bVisible);
	void UpdatedInputState(ERH_INPUT_STATE NewState);
	void UpdatedTooltipBinding(const bool bShouldShowBindings);
	void UpdatedTooltipDisplayMode(EHWEquipmentItemTooltip_DisplayMode DisplayMode);
	void UpdatedTooltipPosition(bool bIsTopHalf, bool bIsRightHalf);
	void UpdateNavWidgetName(const class FText& Text);

	EHWEquipmentItemTooltip_DisplayMode GetEquipmentItemTooltipDisplayMode() const;
	bool IsShowingTooltip() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidgetManager">();
	}
	static class UHWTooltipWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidgetManager>();
	}
};
static_assert(alignof(UHWTooltipWidgetManager) == 0x000008, "Wrong alignment on UHWTooltipWidgetManager");
static_assert(sizeof(UHWTooltipWidgetManager) == 0x000670, "Wrong size on UHWTooltipWidgetManager");
static_assert(offsetof(UHWTooltipWidgetManager, AbilityTooltipWidget) == 0x000600, "Member 'UHWTooltipWidgetManager::AbilityTooltipWidget' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, ItemTooltipWidget) == 0x000608, "Member 'UHWTooltipWidgetManager::ItemTooltipWidget' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, EffectTooltipWidget) == 0x000610, "Member 'UHWTooltipWidgetManager::EffectTooltipWidget' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, ObjectiveTooltipWidget) == 0x000618, "Member 'UHWTooltipWidgetManager::ObjectiveTooltipWidget' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, EquipmentInfoCache) == 0x000620, "Member 'UHWTooltipWidgetManager::EquipmentInfoCache' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, EquipmentItemCache) == 0x000628, "Member 'UHWTooltipWidgetManager::EquipmentItemCache' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, TooltipBindingContainers) == 0x000630, "Member 'UHWTooltipWidgetManager::TooltipBindingContainers' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, DefaultWidgetPromptName) == 0x000648, "Member 'UHWTooltipWidgetManager::DefaultWidgetPromptName' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, HUDNavPromptsWidget) == 0x000660, "Member 'UHWTooltipWidgetManager::HUDNavPromptsWidget' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidgetManager, HUDNavBottomPromptsWidget) == 0x000668, "Member 'UHWTooltipWidgetManager::HUDNavBottomPromptsWidget' has a wrong offset!");

// Class HemingwayUI.HWHomeScreenWidget
// 0x0138 (0x0730 - 0x05F8)
class UHWHomeScreenWidget : public UHWWidget
{
public:
	struct FGameplayTag                           NewsViewTag;                                       // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            FocusNewsActionContainer;                          // 0x0600(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x8];                                      // 0x0640(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHStoreItem*>                   SkinRotatorOptions;                                // 0x0648(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class URHStoreItem*                           SelectedSkinOption;                                // 0x0658(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FRH_ItemId>  WanderingMarketSources;                            // 0x0660(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            CycleDisplayedSkinActionContainer;                 // 0x06B0(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F0[0x4];                                      // 0x06F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoCycleTime;                                     // 0x06F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHideOwnedSkins;                                   // 0x06F8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F9[0xF];                                      // 0x06F9(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         SavedSkinShowcaseIds;                              // 0x0708(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsVendorsReady;                                   // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VendorsToRequestIds;                               // 0x0720(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)

public:
	void CheckForOnShownEvents();
	void CheckIfSkinShowcaseReady();
	void HandleCycleDisplayedSkinAction();
	void HandleHomeScreenSkinShowcaseUpdated(const struct FGameplayTag& InAppSettingTag, const TArray<class FString>& InValues);
	void HandleNewsActionFired();
	void HandleRedirectSkinRotatorClick();
	void OnCrossplaySettingChanged();
	void RegisterCycleDisplayedSkinAction();
	void RequestSelectOption(class URHStoreItem* Option);
	void UnregisterCycleDisplayedSkinAction();
	void UpdateDisplayedModelSkin(const class UHWSkinItem* InModelSkinItem);
	void UpdateDisplayedOptions(const TArray<class URHStoreItem*>& InOptions);
	void UpdateDisplayedRedirect(const class UHWCollectionItem* InRedirectCollection);

	class URHPartyManager* GetPartyManager() const;
	const class UHWSkinItem* GetSkinItemToDisplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHomeScreenWidget">();
	}
	static class UHWHomeScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHomeScreenWidget>();
	}
};
static_assert(alignof(UHWHomeScreenWidget) == 0x000008, "Wrong alignment on UHWHomeScreenWidget");
static_assert(sizeof(UHWHomeScreenWidget) == 0x000730, "Wrong size on UHWHomeScreenWidget");
static_assert(offsetof(UHWHomeScreenWidget, NewsViewTag) == 0x0005F8, "Member 'UHWHomeScreenWidget::NewsViewTag' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, FocusNewsActionContainer) == 0x000600, "Member 'UHWHomeScreenWidget::FocusNewsActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, SkinRotatorOptions) == 0x000648, "Member 'UHWHomeScreenWidget::SkinRotatorOptions' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, SelectedSkinOption) == 0x000658, "Member 'UHWHomeScreenWidget::SelectedSkinOption' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, WanderingMarketSources) == 0x000660, "Member 'UHWHomeScreenWidget::WanderingMarketSources' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, CycleDisplayedSkinActionContainer) == 0x0006B0, "Member 'UHWHomeScreenWidget::CycleDisplayedSkinActionContainer' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, AutoCycleTime) == 0x0006F4, "Member 'UHWHomeScreenWidget::AutoCycleTime' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, bHideOwnedSkins) == 0x0006F8, "Member 'UHWHomeScreenWidget::bHideOwnedSkins' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, SavedSkinShowcaseIds) == 0x000708, "Member 'UHWHomeScreenWidget::SavedSkinShowcaseIds' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, bIsVendorsReady) == 0x000718, "Member 'UHWHomeScreenWidget::bIsVendorsReady' has a wrong offset!");
static_assert(offsetof(UHWHomeScreenWidget, VendorsToRequestIds) == 0x000720, "Member 'UHWHomeScreenWidget::VendorsToRequestIds' has a wrong offset!");

// Class HemingwayUI.HWUIStyleLocalModifierWidget
// 0x0040 (0x01E8 - 0x01A8)
class UHWUIStyleLocalModifierWidget final : public UHWOverlay
{
public:
	struct FGameplayTag                           LocalModifierTag;                                  // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWBaseHUD>              LocalHUD;                                          // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHUDEditorReady;                                 // 0x01B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWScaleBox*                            ScaleWidget;                                       // 0x01C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C8[0x20];                                     // 0x01C8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCustomModifiersUpdated(const struct FGameplayTag& ModifierTag, const TArray<struct FHWUIStyleLocalCustomModifier>& CustomModifiers);
	void HandleCustomModifierUpdated(const struct FGameplayTag& ModifierTag, const struct FHWUIStyleLocalCustomModifier& CustomModifier);
	void HandleGenericModifierUpdated(const struct FGameplayTag& ModifierTag, const struct FHWUIStyleLocalGenericModifier& GenericModifier);
	void HandleGlobalScaleUpdated(EHWUIStyleGlobalModifierType UpdatedModifier);

	struct FGameplayTag GetLocalModifierTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleLocalModifierWidget">();
	}
	static class UHWUIStyleLocalModifierWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleLocalModifierWidget>();
	}
};
static_assert(alignof(UHWUIStyleLocalModifierWidget) == 0x000008, "Wrong alignment on UHWUIStyleLocalModifierWidget");
static_assert(sizeof(UHWUIStyleLocalModifierWidget) == 0x0001E8, "Wrong size on UHWUIStyleLocalModifierWidget");
static_assert(offsetof(UHWUIStyleLocalModifierWidget, LocalModifierTag) == 0x0001A8, "Member 'UHWUIStyleLocalModifierWidget::LocalModifierTag' has a wrong offset!");
static_assert(offsetof(UHWUIStyleLocalModifierWidget, LocalHUD) == 0x0001B0, "Member 'UHWUIStyleLocalModifierWidget::LocalHUD' has a wrong offset!");
static_assert(offsetof(UHWUIStyleLocalModifierWidget, bIsHUDEditorReady) == 0x0001B8, "Member 'UHWUIStyleLocalModifierWidget::bIsHUDEditorReady' has a wrong offset!");
static_assert(offsetof(UHWUIStyleLocalModifierWidget, ScaleWidget) == 0x0001C0, "Member 'UHWUIStyleLocalModifierWidget::ScaleWidget' has a wrong offset!");

// Class HemingwayUI.HWClientHUD
// 0x00E8 (0x0628 - 0x0540)
class AHWClientHUD : public ARHLobbyHUD
{
public:
	float                                         ForceGCTimeInterval;                               // 0x0540(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_544[0xC];                                      // 0x0544(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWInputPlatformSettings*               PlatformControlSettings;                           // 0x0550(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputMappingContext*                   NavigationMappingContext;                          // 0x0558(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NavigationMappingContextPriority;                  // 0x0560(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LoadingScreenTag;                                  // 0x0564(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GamePhasesToShowLoadingScreen;                     // 0x0570(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        bBlockNonDiamondPurchaseRedirects;                 // 0x0590(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_593[0x5];                                      // 0x0593(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UMaterialInterface*> CommonMaterialAnimations;                   // 0x0598(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWWidgetFadeData>              WidgetFades;                                       // 0x05E8(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              ItemStoreDataTable;                                // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEquipmentItemSortingConfig*          ItemStoreSortingData;                              // 0x0620(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleOrderReadyToDisplay(class URHOrder* Order);
	void HandlePlayerDataReceived();
	void HandleRejoinedMatch(class URH_JoinedSession* JoinedSession);
	void LogAllActiveCTAs();
	bool OpenCurrencyPurchaseScreen(EHWCurrencyType CurrencyType, const struct FRH_ItemId& CurrencyId);
	void RemoveTopViewRoute();
	void RemoveViewRoute(const struct FGameplayTag& ViewTag);
	void ResetAllCTAs();
	bool TryExecuteCrossLevelViewRedirect();

	class UMaterialInterface* GetCommonMaterialAnimation(const struct FGameplayTag& MaterialTag) const;
	class UHWQueueDataFactory* GetHWQueueDataFactory() const;
	class UHWInputPlatformSettings* GetInputPlatformSettings() const;
	class UHWPlayerSettingsSubsystem* GetSettingsSubsystem() const;
	bool IsPlayerLoggedIn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWClientHUD">();
	}
	static class AHWClientHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWClientHUD>();
	}
};
static_assert(alignof(AHWClientHUD) == 0x000008, "Wrong alignment on AHWClientHUD");
static_assert(sizeof(AHWClientHUD) == 0x000628, "Wrong size on AHWClientHUD");
static_assert(offsetof(AHWClientHUD, ForceGCTimeInterval) == 0x000540, "Member 'AHWClientHUD::ForceGCTimeInterval' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, PlatformControlSettings) == 0x000550, "Member 'AHWClientHUD::PlatformControlSettings' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, NavigationMappingContext) == 0x000558, "Member 'AHWClientHUD::NavigationMappingContext' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, NavigationMappingContextPriority) == 0x000560, "Member 'AHWClientHUD::NavigationMappingContextPriority' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, LoadingScreenTag) == 0x000564, "Member 'AHWClientHUD::LoadingScreenTag' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, GamePhasesToShowLoadingScreen) == 0x000570, "Member 'AHWClientHUD::GamePhasesToShowLoadingScreen' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, bBlockNonDiamondPurchaseRedirects) == 0x000590, "Member 'AHWClientHUD::bBlockNonDiamondPurchaseRedirects' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, CommonMaterialAnimations) == 0x000598, "Member 'AHWClientHUD::CommonMaterialAnimations' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, WidgetFades) == 0x0005E8, "Member 'AHWClientHUD::WidgetFades' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, ItemStoreDataTable) == 0x0005F8, "Member 'AHWClientHUD::ItemStoreDataTable' has a wrong offset!");
static_assert(offsetof(AHWClientHUD, ItemStoreSortingData) == 0x000620, "Member 'AHWClientHUD::ItemStoreSortingData' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyResultsWidget
// 0x02E8 (0x08E0 - 0x05F8)
class UHWEndOfMatchLobbyResultsWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEndOfMatchLobbyResultsEntry*         MasteryProgressEntry;                              // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGodQuestEntry                         MasteryQuestEntryCache;                            // 0x0610(0x00B0)(Protected, NativeAccessSpecifierProtected)
	class UHWEndOfMatchLobbyResultsEntry*         PlayerLevelProgressEntry;                          // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWQuest>                PlayerLevelQuestItem;                              // 0x06C8(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEndOfMatchLobbyRankedProgressEntry*  RankedProgressEntry;                               // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x10];                                     // 0x06F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWEndOfMatchRankedProgressSource      RankedTestData;                                    // 0x0708(0x0138)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_840[0x10];                                     // 0x0840(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RateFunUpBindingContainer;                         // 0x0850(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            RateFunDownBindingContainer;                       // 0x0890(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasRatedMatch;                                    // 0x08D0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D1[0x3];                                      // 0x08D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchRating;                                       // 0x08D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D8[0x8];                                      // 0x08D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTestData(const struct FHWEndOfMatchResultsProgressSource& TestData);
	void HandleAscensionUnlockRewardsAdded(const TArray<class UHWCollectionItem*>& MasteryRewardLevels, const class UHWCharacterItem* CharacterItem);
	void HandleCharacterItemSet(const class UHWCharacterItem* CharacterItem);
	void HandleDisplayNameSet(const class FString& PlayerName);
	void HandleMasteryRewardsAdded(const TArray<class UHWCollectionItem*>& MasteryRewardLevels, const class UHWCharacterItem* CharacterItem);
	void HandlePlayerKDASet(float Kills, float Deaths, float Assists);
	void HandlePlayerNameColorSet(const class UHWCollectionItem* PlayerTitle);
	void HandlePlayerTitleSet(const class UHWCollectionItem* PlayerTitle);
	void HandleProgressDisplayCompleted();
	void OnMatchFunRated(int32 Rating);
	void PopulateCharacterInfo();
	void RankedAssetsLoaded(TSoftObjectPtr<class UHWRankedConfig> InRankedConfig, TSoftObjectPtr<class UHWSkillRatingRankings> InSkillRatingRankings);
	void RankedConfigLoaded(TSoftObjectPtr<class UHWRankedConfig> InRankedConfig);
	void RankTypesLoaded(TSoftObjectPtr<class UHWRankedConfig> InRankedConfig, TSoftObjectPtr<class UDataTable> InRankTypeTable);
	void RateMatchFun(int32 Rating);
	void TestRankedData(int32 StartingSR, int32 EndingSR);

	struct FHWEndOfMatchResultsProgressSource GetQuestProgress(const class UHWQuest* QuestItem, int32 CurrentProgress) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyResultsWidget">();
	}
	static class UHWEndOfMatchLobbyResultsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyResultsWidget>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyResultsWidget) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyResultsWidget");
static_assert(sizeof(UHWEndOfMatchLobbyResultsWidget) == 0x0008E0, "Wrong size on UHWEndOfMatchLobbyResultsWidget");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, MasteryProgressEntry) == 0x000608, "Member 'UHWEndOfMatchLobbyResultsWidget::MasteryProgressEntry' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, MasteryQuestEntryCache) == 0x000610, "Member 'UHWEndOfMatchLobbyResultsWidget::MasteryQuestEntryCache' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, PlayerLevelProgressEntry) == 0x0006C0, "Member 'UHWEndOfMatchLobbyResultsWidget::PlayerLevelProgressEntry' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, PlayerLevelQuestItem) == 0x0006C8, "Member 'UHWEndOfMatchLobbyResultsWidget::PlayerLevelQuestItem' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, RankedProgressEntry) == 0x0006F0, "Member 'UHWEndOfMatchLobbyResultsWidget::RankedProgressEntry' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, RankedTestData) == 0x000708, "Member 'UHWEndOfMatchLobbyResultsWidget::RankedTestData' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, RateFunUpBindingContainer) == 0x000850, "Member 'UHWEndOfMatchLobbyResultsWidget::RateFunUpBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, RateFunDownBindingContainer) == 0x000890, "Member 'UHWEndOfMatchLobbyResultsWidget::RateFunDownBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, bHasRatedMatch) == 0x0008D0, "Member 'UHWEndOfMatchLobbyResultsWidget::bHasRatedMatch' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsWidget, MatchRating) == 0x0008D4, "Member 'UHWEndOfMatchLobbyResultsWidget::MatchRating' has a wrong offset!");

// Class HemingwayUI.HWClientHUDWidget
// 0x00C8 (0x07D8 - 0x0710)
class UHWClientHUDWidget : public UHWBaseHUDWidget
{
public:
	struct FHWUIActionBindingContainer            CurrencyPurchaseBinding;                           // 0x0710(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            OptionsMenuBinding;                                // 0x0750(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  OptionsMenuDisallowedViews;                        // 0x0790(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CurrencyPurchaseAllowedViews;                      // 0x07B0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D0[0x8];                                      // 0x07D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	void NativeHandleViewStateChanged(const struct FGameplayTag& CurrentRoute, const struct FGameplayTag& PreviousRoute, EViewManagerLayer Layer);
	void NativeHandleViewStateChangeStarted(const struct FGameplayTag& CurrentRoute, const struct FGameplayTag& NewRoute, EViewManagerLayer Layer);
	void UpdateCurrencyPurchaseInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWClientHUDWidget">();
	}
	static class UHWClientHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWClientHUDWidget>();
	}
};
static_assert(alignof(UHWClientHUDWidget) == 0x000008, "Wrong alignment on UHWClientHUDWidget");
static_assert(sizeof(UHWClientHUDWidget) == 0x0007D8, "Wrong size on UHWClientHUDWidget");
static_assert(offsetof(UHWClientHUDWidget, CurrencyPurchaseBinding) == 0x000710, "Member 'UHWClientHUDWidget::CurrencyPurchaseBinding' has a wrong offset!");
static_assert(offsetof(UHWClientHUDWidget, OptionsMenuBinding) == 0x000750, "Member 'UHWClientHUDWidget::OptionsMenuBinding' has a wrong offset!");
static_assert(offsetof(UHWClientHUDWidget, OptionsMenuDisallowedViews) == 0x000790, "Member 'UHWClientHUDWidget::OptionsMenuDisallowedViews' has a wrong offset!");
static_assert(offsetof(UHWClientHUDWidget, CurrencyPurchaseAllowedViews) == 0x0007B0, "Member 'UHWClientHUDWidget::CurrencyPurchaseAllowedViews' has a wrong offset!");

// Class HemingwayUI.HWCustomLobbyGameModeButton
// 0x0000 (0x05F8 - 0x05F8)
class UHWCustomLobbyGameModeButton : public UHWWidget
{
public:
	void CycleGameMode();
	void DisplayGameModeInfo(const bool bValid, const struct FHWGameModeInfo& GameModeInfo);
	void HandleCustomMatchGameModeInfoChanged();

	class UHWQueueDataFactory* GetQueueDataFactory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCustomLobbyGameModeButton">();
	}
	static class UHWCustomLobbyGameModeButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCustomLobbyGameModeButton>();
	}
};
static_assert(alignof(UHWCustomLobbyGameModeButton) == 0x000008, "Wrong alignment on UHWCustomLobbyGameModeButton");
static_assert(sizeof(UHWCustomLobbyGameModeButton) == 0x0005F8, "Wrong size on UHWCustomLobbyGameModeButton");

// Class HemingwayUI.HWGodBuildContainer
// 0x0190 (0x01B8 - 0x0028)
class UHWGodBuildContainer final : public UObject
{
public:
	struct FHWGodBuild                            GodBuild;                                          // 0x0028(0x0190)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuildContainer">();
	}
	static class UHWGodBuildContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuildContainer>();
	}
};
static_assert(alignof(UHWGodBuildContainer) == 0x000008, "Wrong alignment on UHWGodBuildContainer");
static_assert(sizeof(UHWGodBuildContainer) == 0x0001B8, "Wrong size on UHWGodBuildContainer");
static_assert(offsetof(UHWGodBuildContainer, GodBuild) == 0x000028, "Member 'UHWGodBuildContainer::GodBuild' has a wrong offset!");

// Class HemingwayUI.HWMediaPlayerRouteData
// 0x0010 (0x0038 - 0x0028)
class UHWMediaPlayerRouteData final : public UObject
{
public:
	struct FGameplayTag                           PlaylistTag;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RedirectViewRoute;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMediaPlayerRouteData">();
	}
	static class UHWMediaPlayerRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMediaPlayerRouteData>();
	}
};
static_assert(alignof(UHWMediaPlayerRouteData) == 0x000008, "Wrong alignment on UHWMediaPlayerRouteData");
static_assert(sizeof(UHWMediaPlayerRouteData) == 0x000038, "Wrong size on UHWMediaPlayerRouteData");
static_assert(offsetof(UHWMediaPlayerRouteData, PlaylistTag) == 0x000028, "Member 'UHWMediaPlayerRouteData::PlaylistTag' has a wrong offset!");
static_assert(offsetof(UHWMediaPlayerRouteData, RedirectViewRoute) == 0x000030, "Member 'UHWMediaPlayerRouteData::RedirectViewRoute' has a wrong offset!");

// Class HemingwayUI.HWMediaPlayerWidget
// 0x0068 (0x0678 - 0x0610)
class UHWMediaPlayerWidget : public URHMediaPlayerWidget
{
public:
	TMap<struct FGameplayTag, TSoftObjectPtr<class UDataTable>> PlaylistMap;                         // 0x0610(0x0050)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DefaultPlaylistTag;                                // 0x0660(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x10];                                     // 0x0668(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMediaPlayerWidget">();
	}
	static class UHWMediaPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMediaPlayerWidget>();
	}
};
static_assert(alignof(UHWMediaPlayerWidget) == 0x000008, "Wrong alignment on UHWMediaPlayerWidget");
static_assert(sizeof(UHWMediaPlayerWidget) == 0x000678, "Wrong size on UHWMediaPlayerWidget");
static_assert(offsetof(UHWMediaPlayerWidget, PlaylistMap) == 0x000610, "Member 'UHWMediaPlayerWidget::PlaylistMap' has a wrong offset!");
static_assert(offsetof(UHWMediaPlayerWidget, DefaultPlaylistTag) == 0x000660, "Member 'UHWMediaPlayerWidget::DefaultPlaylistTag' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayPassiveEffectWidget
// 0x0010 (0x06B8 - 0x06A8)
class UHWWorldOverlayPassiveEffectWidget final : public UHWGameplayEffectWidget
{
public:
	uint8                                         Pad_6A8[0x10];                                     // 0x06A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayDuration(bool bShow);
	void DisplayStacks(int32 OldStackCount, int32 NewStackCount);
	float GetDurationRemaining();
	float GetMaxDuration();

	int32 GetStackCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayPassiveEffectWidget">();
	}
	static class UHWWorldOverlayPassiveEffectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayPassiveEffectWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayPassiveEffectWidget) == 0x000008, "Wrong alignment on UHWWorldOverlayPassiveEffectWidget");
static_assert(sizeof(UHWWorldOverlayPassiveEffectWidget) == 0x0006B8, "Wrong size on UHWWorldOverlayPassiveEffectWidget");

// Class HemingwayUI.HWGlobalEmoteSlotData
// 0x0018 (0x0040 - 0x0028)
class UHWGlobalEmoteSlotData final : public UObject
{
public:
	bool                                          bSlotAvailable;                                    // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      EquippedItem;                                      // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWCollectionItemType                         CollectionType;                                    // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGlobalEmoteSlotData">();
	}
	static class UHWGlobalEmoteSlotData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGlobalEmoteSlotData>();
	}
};
static_assert(alignof(UHWGlobalEmoteSlotData) == 0x000008, "Wrong alignment on UHWGlobalEmoteSlotData");
static_assert(sizeof(UHWGlobalEmoteSlotData) == 0x000040, "Wrong size on UHWGlobalEmoteSlotData");
static_assert(offsetof(UHWGlobalEmoteSlotData, bSlotAvailable) == 0x000028, "Member 'UHWGlobalEmoteSlotData::bSlotAvailable' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteSlotData, EquippedItem) == 0x000030, "Member 'UHWGlobalEmoteSlotData::EquippedItem' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteSlotData, SlotIndex) == 0x000038, "Member 'UHWGlobalEmoteSlotData::SlotIndex' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteSlotData, CollectionType) == 0x00003C, "Member 'UHWGlobalEmoteSlotData::CollectionType' has a wrong offset!");

// Class HemingwayUI.HWGlobalEmoteEquipRouteData
// 0x0028 (0x0050 - 0x0028)
class UHWGlobalEmoteEquipRouteData final : public UObject
{
public:
	TSoftObjectPtr<class UHWCollectionItem>       ItemToEquip;                                       // 0x0028(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGlobalEmoteEquipRouteData">();
	}
	static class UHWGlobalEmoteEquipRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGlobalEmoteEquipRouteData>();
	}
};
static_assert(alignof(UHWGlobalEmoteEquipRouteData) == 0x000008, "Wrong alignment on UHWGlobalEmoteEquipRouteData");
static_assert(sizeof(UHWGlobalEmoteEquipRouteData) == 0x000050, "Wrong size on UHWGlobalEmoteEquipRouteData");
static_assert(offsetof(UHWGlobalEmoteEquipRouteData, ItemToEquip) == 0x000028, "Member 'UHWGlobalEmoteEquipRouteData::ItemToEquip' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderAbilityDisplayWidget
// 0x0000 (0x0648 - 0x0648)
class UHWGodBuilderAbilityDisplayWidget : public UHWTooltipWidget_Ability
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderAbilityDisplayWidget">();
	}
	static class UHWGodBuilderAbilityDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderAbilityDisplayWidget>();
	}
};
static_assert(alignof(UHWGodBuilderAbilityDisplayWidget) == 0x000008, "Wrong alignment on UHWGodBuilderAbilityDisplayWidget");
static_assert(sizeof(UHWGodBuilderAbilityDisplayWidget) == 0x000648, "Wrong size on UHWGodBuilderAbilityDisplayWidget");

// Class HemingwayUI.HWGameplayEffectBlockStacksWidget
// 0x0020 (0x06C8 - 0x06A8)
class UHWGameplayEffectBlockStacksWidget : public UHWGameplayEffectWidget
{
public:
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWWidget>                  BlockStackWidgetClass;                             // 0x06B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWWidget*>                      BlockStackWidgets;                                 // 0x06B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddedBlockStackWidget(class UHWWidget* BlockStackWidget);
	void DisplayBlockStacks(int32 NewBlockStackCount);
	void RemovedBlockStackWidget(class UHWWidget* BlockStackWidget);

	int32 GetBlockStackCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayEffectBlockStacksWidget">();
	}
	static class UHWGameplayEffectBlockStacksWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayEffectBlockStacksWidget>();
	}
};
static_assert(alignof(UHWGameplayEffectBlockStacksWidget) == 0x000008, "Wrong alignment on UHWGameplayEffectBlockStacksWidget");
static_assert(sizeof(UHWGameplayEffectBlockStacksWidget) == 0x0006C8, "Wrong size on UHWGameplayEffectBlockStacksWidget");
static_assert(offsetof(UHWGameplayEffectBlockStacksWidget, BlockStackWidgetClass) == 0x0006B0, "Member 'UHWGameplayEffectBlockStacksWidget::BlockStackWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectBlockStacksWidget, BlockStackWidgets) == 0x0006B8, "Member 'UHWGameplayEffectBlockStacksWidget::BlockStackWidgets' has a wrong offset!");

// Class HemingwayUI.HWGlobalEmoteEquipWidget
// 0x0048 (0x0640 - 0x05F8)
class UHWGlobalEmoteEquipWidget : public UHWWidget
{
public:
	int32                                         AvailableSlotCount;                                // 0x05F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCollectionItem>       ItemToEquip;                                       // 0x0600(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FRH_ItemId>                     EquipSlotItemIds;                                  // 0x0628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	EHWCollectionItemType                         CollectionTypeToEquip;                             // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EquipToSlot(int32 SlotIndex);
	void Populate(const TArray<class UHWGlobalEmoteSlotData*>& ListData);
	void UpdateSlotOwnership();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGlobalEmoteEquipWidget">();
	}
	static class UHWGlobalEmoteEquipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGlobalEmoteEquipWidget>();
	}
};
static_assert(alignof(UHWGlobalEmoteEquipWidget) == 0x000008, "Wrong alignment on UHWGlobalEmoteEquipWidget");
static_assert(sizeof(UHWGlobalEmoteEquipWidget) == 0x000640, "Wrong size on UHWGlobalEmoteEquipWidget");
static_assert(offsetof(UHWGlobalEmoteEquipWidget, AvailableSlotCount) == 0x0005F8, "Member 'UHWGlobalEmoteEquipWidget::AvailableSlotCount' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteEquipWidget, ItemToEquip) == 0x000600, "Member 'UHWGlobalEmoteEquipWidget::ItemToEquip' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteEquipWidget, EquipSlotItemIds) == 0x000628, "Member 'UHWGlobalEmoteEquipWidget::EquipSlotItemIds' has a wrong offset!");
static_assert(offsetof(UHWGlobalEmoteEquipWidget, CollectionTypeToEquip) == 0x000638, "Member 'UHWGlobalEmoteEquipWidget::CollectionTypeToEquip' has a wrong offset!");

// Class HemingwayUI.HWNewPlayerExpSubsystem
// 0x0098 (0x00C8 - 0x0030)
class UHWNewPlayerExpSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ConquestSwitchActionName;                          // 0x0080(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NPEArenaQueueId;                                   // 0x0088(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 ArenaQueueId;                                      // 0x0098(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 NPEConquestQueueId;                                // 0x00A8(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FHWPlatformBool                        ArenaVideoRedirect;                                // 0x00B8(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        ArenaTutorialRedirect;                             // 0x00BB(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        ConquestVideoRedirect;                             // 0x00BE(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWPlatformBool                        ConquestTutorialRedirect;                          // 0x00C1(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHUDDataFactoryInitialized(class UObject* DataFactory);
	void OnQueueSelectionChanged();

	class FString GetNPEArenaQueueId() const;
	class FString GetNPEConquestQueueId() const;
	bool IsArenaTutorialRedirectEnabled() const;
	bool IsArenaVideoRedirectEnabled() const;
	bool IsConquestTutorialRedirectEnabled() const;
	bool IsConquestVideoRedirectEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWNewPlayerExpSubsystem">();
	}
	static class UHWNewPlayerExpSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWNewPlayerExpSubsystem>();
	}
};
static_assert(alignof(UHWNewPlayerExpSubsystem) == 0x000008, "Wrong alignment on UHWNewPlayerExpSubsystem");
static_assert(sizeof(UHWNewPlayerExpSubsystem) == 0x0000C8, "Wrong size on UHWNewPlayerExpSubsystem");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ConquestSwitchActionName) == 0x000080, "Member 'UHWNewPlayerExpSubsystem::ConquestSwitchActionName' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, NPEArenaQueueId) == 0x000088, "Member 'UHWNewPlayerExpSubsystem::NPEArenaQueueId' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ArenaQueueId) == 0x000098, "Member 'UHWNewPlayerExpSubsystem::ArenaQueueId' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, NPEConquestQueueId) == 0x0000A8, "Member 'UHWNewPlayerExpSubsystem::NPEConquestQueueId' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ArenaVideoRedirect) == 0x0000B8, "Member 'UHWNewPlayerExpSubsystem::ArenaVideoRedirect' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ArenaTutorialRedirect) == 0x0000BB, "Member 'UHWNewPlayerExpSubsystem::ArenaTutorialRedirect' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ConquestVideoRedirect) == 0x0000BE, "Member 'UHWNewPlayerExpSubsystem::ConquestVideoRedirect' has a wrong offset!");
static_assert(offsetof(UHWNewPlayerExpSubsystem, ConquestTutorialRedirect) == 0x0000C1, "Member 'UHWNewPlayerExpSubsystem::ConquestTutorialRedirect' has a wrong offset!");

// Class HemingwayUI.HWPlayerProfileLoadoutScreenWidget
// 0x0128 (0x0720 - 0x05F8)
class UHWPlayerProfileLoadoutScreenWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryHovered; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntryUnhovered; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem)> OnItemDisplayEntrySelected; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<EHWCollectionItemType, struct FHWLoadoutGridConfig> CollectionGridConfigs;                  // 0x0628(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         GamepadPreviewDelay;                               // 0x0678(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWItemDisplayWidget>       CollectionWidgetClass;                             // 0x0680(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTabBarWidget*                        CollectionTabs;                                    // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   CollectionGrid;                                    // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   CollectionItemPreview;                             // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SelectedEntryWidget;                               // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   EquippedEntryWidget;                               // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           GamepadPreviewHandle;                              // 0x06B0(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6B8[0x8];                                      // 0x06B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWCollectionItem*>              CurrentCollectionItemList;                         // 0x06C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UInputAction*                           EquipAction;                                       // 0x06D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            UnequipBindingContainer;                           // 0x06D8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_718[0x8];                                      // 0x0718(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayButtonEquipStatus(EHWButtonEquipStatus ButtonStatus);
	void DisplayCollectionType(EHWCollectionItemType CollectionType);
	void HandleActiveCollectionTabChanged(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause);
	void HandleEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEntryButtonUnhovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleEquipAction();
	void HandleUnequipAction();
	void OnLocalLoadoutChanged(const struct FHWPlayerLoadout& InPlayerLoadout);
	void PreviewInventoryItem(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void UpdateUnequipButtonDisplay(bool bIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerProfileLoadoutScreenWidget">();
	}
	static class UHWPlayerProfileLoadoutScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerProfileLoadoutScreenWidget>();
	}
};
static_assert(alignof(UHWPlayerProfileLoadoutScreenWidget) == 0x000008, "Wrong alignment on UHWPlayerProfileLoadoutScreenWidget");
static_assert(sizeof(UHWPlayerProfileLoadoutScreenWidget) == 0x000720, "Wrong size on UHWPlayerProfileLoadoutScreenWidget");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, OnItemDisplayEntryHovered) == 0x0005F8, "Member 'UHWPlayerProfileLoadoutScreenWidget::OnItemDisplayEntryHovered' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, OnItemDisplayEntryUnhovered) == 0x000608, "Member 'UHWPlayerProfileLoadoutScreenWidget::OnItemDisplayEntryUnhovered' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, OnItemDisplayEntrySelected) == 0x000618, "Member 'UHWPlayerProfileLoadoutScreenWidget::OnItemDisplayEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CollectionGridConfigs) == 0x000628, "Member 'UHWPlayerProfileLoadoutScreenWidget::CollectionGridConfigs' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, GamepadPreviewDelay) == 0x000678, "Member 'UHWPlayerProfileLoadoutScreenWidget::GamepadPreviewDelay' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CollectionWidgetClass) == 0x000680, "Member 'UHWPlayerProfileLoadoutScreenWidget::CollectionWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CollectionTabs) == 0x000688, "Member 'UHWPlayerProfileLoadoutScreenWidget::CollectionTabs' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CollectionGrid) == 0x000690, "Member 'UHWPlayerProfileLoadoutScreenWidget::CollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CollectionItemPreview) == 0x000698, "Member 'UHWPlayerProfileLoadoutScreenWidget::CollectionItemPreview' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, SelectedEntryWidget) == 0x0006A0, "Member 'UHWPlayerProfileLoadoutScreenWidget::SelectedEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, EquippedEntryWidget) == 0x0006A8, "Member 'UHWPlayerProfileLoadoutScreenWidget::EquippedEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, GamepadPreviewHandle) == 0x0006B0, "Member 'UHWPlayerProfileLoadoutScreenWidget::GamepadPreviewHandle' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, CurrentCollectionItemList) == 0x0006C0, "Member 'UHWPlayerProfileLoadoutScreenWidget::CurrentCollectionItemList' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, EquipAction) == 0x0006D0, "Member 'UHWPlayerProfileLoadoutScreenWidget::EquipAction' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileLoadoutScreenWidget, UnequipBindingContainer) == 0x0006D8, "Member 'UHWPlayerProfileLoadoutScreenWidget::UnequipBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWPlayerProfileRankLeaderboardWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWPlayerProfileRankLeaderboardWidget : public UHWWidget
{
public:
	class FString                                 CurrentLeaderboardId;                              // 0x05F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTabBarWidget*                        TabBarWidget;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_610[0x40];                                     // 0x0610(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckInfoReady();
	void OnLeaderboardDataReady(const struct FHWLeaderboardDataContainer& LeaderboardDataContainer);
	void OnLeaderboardRequest(const bool bSuccess, const class FString& LeaderboardId, const struct FHWLeaderboardDataContainer& LeaderboardDataContainer);
	void OnLocalPlayerDataReady(const class UHWLeaderboardEntry* LocalPlayerData);
	void OnPlayerPlatformUpdate(bool bSuccess, const TArray<class URH_PlayerPlatformInfo*>& Platforms);
	void OnTabSelected(int32 Index_0);
	void ShowLeaderboard(const class FString& LeaderboardId);
	void UpdateTabs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerProfileRankLeaderboardWidget">();
	}
	static class UHWPlayerProfileRankLeaderboardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerProfileRankLeaderboardWidget>();
	}
};
static_assert(alignof(UHWPlayerProfileRankLeaderboardWidget) == 0x000008, "Wrong alignment on UHWPlayerProfileRankLeaderboardWidget");
static_assert(sizeof(UHWPlayerProfileRankLeaderboardWidget) == 0x000650, "Wrong size on UHWPlayerProfileRankLeaderboardWidget");
static_assert(offsetof(UHWPlayerProfileRankLeaderboardWidget, CurrentLeaderboardId) == 0x0005F8, "Member 'UHWPlayerProfileRankLeaderboardWidget::CurrentLeaderboardId' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileRankLeaderboardWidget, TabBarWidget) == 0x000608, "Member 'UHWPlayerProfileRankLeaderboardWidget::TabBarWidget' has a wrong offset!");

// Class HemingwayUI.HWPlayerProfileRankScreenWidget
// 0x0050 (0x0648 - 0x05F8)
class UHWPlayerProfileRankScreenWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWWidget>                  RankTrackClass;                                    // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  DivisionTrackClass;                                // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWSkillRatingRank>             Ranks;                                             // 0x0608(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_618[0x30];                                     // 0x0618(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetLeaderboardData(const class FString& LeaderboardId);
	void OnLeaderboardRequest(const bool bSuccess, const class FString& LeaderboardId, const struct FHWLeaderboardDataContainer& LeaderboardDataContainer);
	void OnLocalPlayerDataReady(const class UHWLeaderboardEntry* LocalPlayerData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerProfileRankScreenWidget">();
	}
	static class UHWPlayerProfileRankScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerProfileRankScreenWidget>();
	}
};
static_assert(alignof(UHWPlayerProfileRankScreenWidget) == 0x000008, "Wrong alignment on UHWPlayerProfileRankScreenWidget");
static_assert(sizeof(UHWPlayerProfileRankScreenWidget) == 0x000648, "Wrong size on UHWPlayerProfileRankScreenWidget");
static_assert(offsetof(UHWPlayerProfileRankScreenWidget, RankTrackClass) == 0x0005F8, "Member 'UHWPlayerProfileRankScreenWidget::RankTrackClass' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileRankScreenWidget, DivisionTrackClass) == 0x000600, "Member 'UHWPlayerProfileRankScreenWidget::DivisionTrackClass' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileRankScreenWidget, Ranks) == 0x000608, "Member 'UHWPlayerProfileRankScreenWidget::Ranks' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyResultsEntry
// 0x0038 (0x0630 - 0x05F8)
class UHWEndOfMatchLobbyResultsEntry : public UHWWidget
{
public:
	TMulticastInlineDelegate<void()>              OnProgressDisplayCompleted;                        // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLevelUpAnimationCompleted;                       // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   ProgressEntryLabel;                                // 0x0618(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void DisplayProgress();
	void HandleLevelUpAnimationCompleted();
	void OnAnimationsCompleted();
	void PopulateDisplay(const struct FHWEndOfMatchResultsProgressSource& ProgressData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyResultsEntry">();
	}
	static class UHWEndOfMatchLobbyResultsEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyResultsEntry>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyResultsEntry) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyResultsEntry");
static_assert(sizeof(UHWEndOfMatchLobbyResultsEntry) == 0x000630, "Wrong size on UHWEndOfMatchLobbyResultsEntry");
static_assert(offsetof(UHWEndOfMatchLobbyResultsEntry, OnProgressDisplayCompleted) == 0x0005F8, "Member 'UHWEndOfMatchLobbyResultsEntry::OnProgressDisplayCompleted' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsEntry, OnLevelUpAnimationCompleted) == 0x000608, "Member 'UHWEndOfMatchLobbyResultsEntry::OnLevelUpAnimationCompleted' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyResultsEntry, ProgressEntryLabel) == 0x000618, "Member 'UHWEndOfMatchLobbyResultsEntry::ProgressEntryLabel' has a wrong offset!");

// Class HemingwayUI.HWPlayerProfileScreenWidget
// 0x0070 (0x0668 - 0x05F8)
class UHWPlayerProfileScreenWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UHWQuest>                PlayerLevelQuestItem;                              // 0x05F8(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            WalletFocusAction;                                 // 0x0620(0x0040)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0x8];                                      // 0x0660(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocalLoadoutChanged(const struct FHWPlayerLoadout& InPlayerLoadout);
	void OnPlayerQuestLoaded();
	void OnUpdatePlayerNameColorItem(const class UHWCollectionItem* TitleItem);
	void OnUpdateTitleItem(const class UHWCollectionItem* TitleItem);
	void OnUpdateXPProgress(int32 CurrentProgress, int32 StartValue, int32 NextValue, int32 CurrentLevel);
	void OnWalletFocusAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerProfileScreenWidget">();
	}
	static class UHWPlayerProfileScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerProfileScreenWidget>();
	}
};
static_assert(alignof(UHWPlayerProfileScreenWidget) == 0x000008, "Wrong alignment on UHWPlayerProfileScreenWidget");
static_assert(sizeof(UHWPlayerProfileScreenWidget) == 0x000668, "Wrong size on UHWPlayerProfileScreenWidget");
static_assert(offsetof(UHWPlayerProfileScreenWidget, PlayerLevelQuestItem) == 0x0005F8, "Member 'UHWPlayerProfileScreenWidget::PlayerLevelQuestItem' has a wrong offset!");
static_assert(offsetof(UHWPlayerProfileScreenWidget, WalletFocusAction) == 0x000620, "Member 'UHWPlayerProfileScreenWidget::WalletFocusAction' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderModesListWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWGodBuilderModesListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                EntryPadding;                                      // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   ModeTags;                                          // 0x0618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodBuilderModesListEntryWidget> EntryWidgetClass;                           // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         ModesList;                                         // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleModeEntrySelected(class UHWGodBuilderModesListEntryWidget* EntryWidget, const struct FGameplayTag& EntryMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderModesListWidget">();
	}
	static class UHWGodBuilderModesListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderModesListWidget>();
	}
};
static_assert(alignof(UHWGodBuilderModesListWidget) == 0x000008, "Wrong alignment on UHWGodBuilderModesListWidget");
static_assert(sizeof(UHWGodBuilderModesListWidget) == 0x000638, "Wrong size on UHWGodBuilderModesListWidget");
static_assert(offsetof(UHWGodBuilderModesListWidget, EntryPadding) == 0x000608, "Member 'UHWGodBuilderModesListWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderModesListWidget, ModeTags) == 0x000618, "Member 'UHWGodBuilderModesListWidget::ModeTags' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderModesListWidget, EntryWidgetClass) == 0x000628, "Member 'UHWGodBuilderModesListWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderModesListWidget, ModesList) == 0x000630, "Member 'UHWGodBuilderModesListWidget::ModesList' has a wrong offset!");

// Class HemingwayUI.HWCurrencyDisplayWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWCurrencyDisplayWidget : public UHWWidget
{
public:
	bool                                          bUseOwnedCurrency;                                 // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHideOnZeroCurrency;                               // 0x05F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayLessThanOwnedCurrency;                     // 0x05FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWCurrencyType                               DisplayedCurrencyType;                             // 0x05FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_ItemId                             DisplayedCurrencyId;                               // 0x05FC(0x0014)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_610[0x8];                                      // 0x0610(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayCurrency(const class URHCurrency* CURRENCY, bool bIsLoading);
	void DisplayCurrencyAmount(int32 NewAmount, bool bIsLessThanOwned);
	void HandleInventoryCacheUpdated(const TArray<int32>& ItemIds, class URH_PlayerInfo* PlayerInfo);
	void OnDisplayedCurrenciesUpdated(const struct FGameplayTag& AppSettingTag, const TArray<class FString>& CurrencyIds);
	void SetAmount(int32 Amount);
	void SetCurrency(const struct FRH_ItemId& CurrencyId);
	void SetCurrencyAndAmount(const struct FRH_ItemId& CurrencyId, int32 Amount);
	void SetCurrencyType(EHWCurrencyType CurrencyType);
	void SetCurrencyTypeAndAmount(EHWCurrencyType CurrencyType, int32 Amount);
	void UpdateIsCurrencyDisplayEnabled(bool bIsCurrencyEnabled);

	const int32 GetDisplayedAmount() const;
	TSoftObjectPtr<class URHCurrency> GetDisplayedCurrency() const;
	EHWCurrencyType GetDisplayedCurrencyType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCurrencyDisplayWidget">();
	}
	static class UHWCurrencyDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCurrencyDisplayWidget>();
	}
};
static_assert(alignof(UHWCurrencyDisplayWidget) == 0x000008, "Wrong alignment on UHWCurrencyDisplayWidget");
static_assert(sizeof(UHWCurrencyDisplayWidget) == 0x000618, "Wrong size on UHWCurrencyDisplayWidget");
static_assert(offsetof(UHWCurrencyDisplayWidget, bUseOwnedCurrency) == 0x0005F8, "Member 'UHWCurrencyDisplayWidget::bUseOwnedCurrency' has a wrong offset!");
static_assert(offsetof(UHWCurrencyDisplayWidget, bHideOnZeroCurrency) == 0x0005F9, "Member 'UHWCurrencyDisplayWidget::bHideOnZeroCurrency' has a wrong offset!");
static_assert(offsetof(UHWCurrencyDisplayWidget, bDisplayLessThanOwnedCurrency) == 0x0005FA, "Member 'UHWCurrencyDisplayWidget::bDisplayLessThanOwnedCurrency' has a wrong offset!");
static_assert(offsetof(UHWCurrencyDisplayWidget, DisplayedCurrencyType) == 0x0005FB, "Member 'UHWCurrencyDisplayWidget::DisplayedCurrencyType' has a wrong offset!");
static_assert(offsetof(UHWCurrencyDisplayWidget, DisplayedCurrencyId) == 0x0005FC, "Member 'UHWCurrencyDisplayWidget::DisplayedCurrencyId' has a wrong offset!");

// Class HemingwayUI.HWAutoBuyBuildEntry
// 0x01C0 (0x07B8 - 0x05F8)
class UHWAutoBuyBuildEntry : public UHWWidget
{
public:
	TSubclassOf<class UHWAutoBuyBuildItemWidget>  ItemEntryClass;                                    // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWAutoGodBuild                        AutoGodBuildCache;                                 // 0x0600(0x0198)(Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelected;                                       // 0x07A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A1[0x17];                                     // 0x07A1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItemWidget(const class UHWAutoBuyBuildItemWidget* NewItemWidget, bool bIsStartingItem);
	void DisplayBuild(const class UHWCharacterItem* InCharacterItem, const struct FHWAutoGodBuild& InAutoGodBuild, const TArray<TSoftObjectPtr<class UTexture2D>>& InSoftAbilityIcons);
	void OnAbilityEquipmentItemsLoaded();
	void SelectBuild(bool bIsFinalSelection);
	void UnselectBuild();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAutoBuyBuildEntry">();
	}
	static class UHWAutoBuyBuildEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAutoBuyBuildEntry>();
	}
};
static_assert(alignof(UHWAutoBuyBuildEntry) == 0x000008, "Wrong alignment on UHWAutoBuyBuildEntry");
static_assert(sizeof(UHWAutoBuyBuildEntry) == 0x0007B8, "Wrong size on UHWAutoBuyBuildEntry");
static_assert(offsetof(UHWAutoBuyBuildEntry, ItemEntryClass) == 0x0005F8, "Member 'UHWAutoBuyBuildEntry::ItemEntryClass' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildEntry, AutoGodBuildCache) == 0x000600, "Member 'UHWAutoBuyBuildEntry::AutoGodBuildCache' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildEntry, CharacterItem) == 0x000798, "Member 'UHWAutoBuyBuildEntry::CharacterItem' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildEntry, bIsSelected) == 0x0007A0, "Member 'UHWAutoBuyBuildEntry::bIsSelected' has a wrong offset!");

// Class HemingwayUI.HWWalletCurrencyEntryWidget
// 0x0028 (0x0640 - 0x0618)
class UHWWalletCurrencyEntryWidget : public UHWCurrencyDisplayWidget
{
public:
	uint8                                         Pad_618[0x28];                                     // 0x0618(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayBoost(const class UHWCollectionItem* Boost, bool bIsLoading);
	void DisplayBoostDuration(const struct FDateTime& ExpirationDate);
	void OnEntryWidgetFocusChanged(bool bFocused);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWalletCurrencyEntryWidget">();
	}
	static class UHWWalletCurrencyEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWalletCurrencyEntryWidget>();
	}
};
static_assert(alignof(UHWWalletCurrencyEntryWidget) == 0x000008, "Wrong alignment on UHWWalletCurrencyEntryWidget");
static_assert(sizeof(UHWWalletCurrencyEntryWidget) == 0x000640, "Wrong size on UHWWalletCurrencyEntryWidget");

// Class HemingwayUI.HWGodBuilderAbilitiesOrderWidget
// 0x00B0 (0x06A8 - 0x05F8)
class UHWGodBuilderAbilitiesOrderWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(int32 AbilityIndex)> OnAbilityOrderIconHovered;                    // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AbilityIndex)> OnAbilityOrderIconUnhovered;                  // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_618[0x10];                                     // 0x0618(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWEquipmentItem*>               AbilityEquipmentItems;                             // 0x0628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x0638(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AbilityCount;                                      // 0x0640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GodLevelCount;                                     // 0x0644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LightBackgroundTag;                                // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DarkBackgroundTag;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           UltimateLevelBackgroundTag;                        // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TextFontTag;                                       // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           TextColorTag;                                      // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            AbilityLevelingCurveTable;                         // 0x0670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilitiesOrderEntryWidget* CachedHoveredEntry;                                // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEditable;                                       // 0x0680(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWGodBuilderAbilitiesOrderEntryWidget> EntryWidgetClass;                      // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         AbilitiesIconBox;                                  // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    AbilitiesOrderGrid;                                // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              ClearButton;                                       // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAbilityOrderEntryHovered(class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget);
	class UWidget* HandleAbilityOrderEntryNavLeft(EUINavigation NavigationDir);
	class UWidget* HandleAbilityOrderEntryNavRight(EUINavigation NavigationDir);
	void HandleAbilityOrderEntrySelected(class UHWGodBuilderAbilitiesOrderEntryWidget* EntryWidget);
	void HandleAbilityOrderIconSelected(int32 AbilityIndex);
	void HandleClearButtonSelected();
	void HideTooltip();
	void OnAbilityEquipmentItemsLoaded(const TArray<struct FHWAbilityItemSet>& InAbilitySet);
	void SetAbilityOrderIndices(const TArray<int32>& InAbilityOrderIndices);
	void SetGodItem(const class UHWCharacterItem* InCharacterItem);
	void SetIsEditable(bool bInIsEditable);
	void ShowTooltip(int32 AbilityIndex, class UWidget* ReferenceWidget, bool bShowContextBar, EHWTooltipAxis Axis);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderAbilitiesOrderWidget">();
	}
	static class UHWGodBuilderAbilitiesOrderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderAbilitiesOrderWidget>();
	}
};
static_assert(alignof(UHWGodBuilderAbilitiesOrderWidget) == 0x000008, "Wrong alignment on UHWGodBuilderAbilitiesOrderWidget");
static_assert(sizeof(UHWGodBuilderAbilitiesOrderWidget) == 0x0006A8, "Wrong size on UHWGodBuilderAbilitiesOrderWidget");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, OnAbilityOrderIconHovered) == 0x0005F8, "Member 'UHWGodBuilderAbilitiesOrderWidget::OnAbilityOrderIconHovered' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, OnAbilityOrderIconUnhovered) == 0x000608, "Member 'UHWGodBuilderAbilitiesOrderWidget::OnAbilityOrderIconUnhovered' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, AbilityEquipmentItems) == 0x000628, "Member 'UHWGodBuilderAbilitiesOrderWidget::AbilityEquipmentItems' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, GodItem) == 0x000638, "Member 'UHWGodBuilderAbilitiesOrderWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, AbilityCount) == 0x000640, "Member 'UHWGodBuilderAbilitiesOrderWidget::AbilityCount' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, GodLevelCount) == 0x000644, "Member 'UHWGodBuilderAbilitiesOrderWidget::GodLevelCount' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, LightBackgroundTag) == 0x000648, "Member 'UHWGodBuilderAbilitiesOrderWidget::LightBackgroundTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, DarkBackgroundTag) == 0x000650, "Member 'UHWGodBuilderAbilitiesOrderWidget::DarkBackgroundTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, UltimateLevelBackgroundTag) == 0x000658, "Member 'UHWGodBuilderAbilitiesOrderWidget::UltimateLevelBackgroundTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, TextFontTag) == 0x000660, "Member 'UHWGodBuilderAbilitiesOrderWidget::TextFontTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, TextColorTag) == 0x000668, "Member 'UHWGodBuilderAbilitiesOrderWidget::TextColorTag' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, AbilityLevelingCurveTable) == 0x000670, "Member 'UHWGodBuilderAbilitiesOrderWidget::AbilityLevelingCurveTable' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, CachedHoveredEntry) == 0x000678, "Member 'UHWGodBuilderAbilitiesOrderWidget::CachedHoveredEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, bIsEditable) == 0x000680, "Member 'UHWGodBuilderAbilitiesOrderWidget::bIsEditable' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, EntryWidgetClass) == 0x000688, "Member 'UHWGodBuilderAbilitiesOrderWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, AbilitiesIconBox) == 0x000690, "Member 'UHWGodBuilderAbilitiesOrderWidget::AbilitiesIconBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, AbilitiesOrderGrid) == 0x000698, "Member 'UHWGodBuilderAbilitiesOrderWidget::AbilitiesOrderGrid' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderWidget, ClearButton) == 0x0006A0, "Member 'UHWGodBuilderAbilitiesOrderWidget::ClearButton' has a wrong offset!");

// Class HemingwayUI.HWWalletWidget
// 0x0178 (0x0770 - 0x05F8)
class UHWWalletWidget : public UHWWidget
{
public:
	TMap<struct FGameplayTag, struct FHWCurrencyIdCollection> CurrencyCategoryToCurrencyCollectionMap; // 0x05F8(0x0050)(BlueprintVisible, BlueprintReadOnly, Config, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWCurrencyCategory> CurrencyCategoryTagToCategoryDetails;      // 0x0648(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWalletCurrencyEntryWidget> EntryWidgetClass;                                // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EntryWidgetPoolSize;                               // 0x06A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWWalletCurrencyEntryWidget*>   EntryWidgets;                                      // 0x06A8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FRH_ItemId                             LoadingCurrencyItemId;                             // 0x06B8(0x0014)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CurrencyCategoryTags;                              // 0x06D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6E0[0x8];                                      // 0x06E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            GoPreviousAction;                                  // 0x06E8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            GoNextAction;                                      // 0x0728(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_768[0x8];                                      // 0x0768(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdateCategoryDisplay(const struct FHWCurrencyCategory& CategoryDetails);
	void ChangeCategory(bool bForward);
	void DisplayFocusedBooster(class UHWCollectionItem* Booster);
	void DisplayFocusedCurrency(class URHCurrency* CURRENCY);
	void FocusFirstEntry();
	void OnEntryWidgetAdded(class UHWWalletCurrencyEntryWidget* AddedEntryWidget);
	void OnEntryWidgetRemoved(class UHWWalletCurrencyEntryWidget* RemovedEntryWidget);
	void OnGoNextAction();
	void OnGoPreviousAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWalletWidget">();
	}
	static class UHWWalletWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWalletWidget>();
	}
};
static_assert(alignof(UHWWalletWidget) == 0x000008, "Wrong alignment on UHWWalletWidget");
static_assert(sizeof(UHWWalletWidget) == 0x000770, "Wrong size on UHWWalletWidget");
static_assert(offsetof(UHWWalletWidget, CurrencyCategoryToCurrencyCollectionMap) == 0x0005F8, "Member 'UHWWalletWidget::CurrencyCategoryToCurrencyCollectionMap' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, CurrencyCategoryTagToCategoryDetails) == 0x000648, "Member 'UHWWalletWidget::CurrencyCategoryTagToCategoryDetails' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, EntryWidgetClass) == 0x000698, "Member 'UHWWalletWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, EntryWidgetPoolSize) == 0x0006A0, "Member 'UHWWalletWidget::EntryWidgetPoolSize' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, EntryWidgets) == 0x0006A8, "Member 'UHWWalletWidget::EntryWidgets' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, LoadingCurrencyItemId) == 0x0006B8, "Member 'UHWWalletWidget::LoadingCurrencyItemId' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, CurrencyCategoryTags) == 0x0006D0, "Member 'UHWWalletWidget::CurrencyCategoryTags' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, GoPreviousAction) == 0x0006E8, "Member 'UHWWalletWidget::GoPreviousAction' has a wrong offset!");
static_assert(offsetof(UHWWalletWidget, GoNextAction) == 0x000728, "Member 'UHWWalletWidget::GoNextAction' has a wrong offset!");

// Class HemingwayUI.HWIconDisplayerBase
// 0x00E8 (0x06E0 - 0x05F8)
class UHWIconDisplayerBase : public UHWWidget
{
public:
	bool                                          bCreateNewOnNoPool;                                // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UHWIconDisplayBaseWidget*>  DisplayedIcons;                                    // 0x0600(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x8];                                      // 0x0650(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UDataTable>              ConfigTableAssetPtr;                               // 0x0658(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWIconWidgetPool> WidgetPools;                                 // 0x0680(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D0[0x10];                                     // 0x06D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddIcon(const struct FHWDisplayInfo& InDisplayInfo);
	void HandleWidgetHideSequenceFinished(class URHWidget* Widget);
	void IconAdded(class UHWIconDisplayBaseWidget* IconWidget);
	void IconHidden(class UHWIconDisplayBaseWidget* IconWidget);
	void IconRemoved(class UHWIconDisplayBaseWidget* IconWidget);
	void IconShown(class UHWIconDisplayBaseWidget* IconWidget);
	void OnDisplayInfoHidden(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoRemoved(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoShown(const struct FHWDisplayInfo& InDisplayInfo);
	void OnManualIconRemoval(const class UHWIconDisplayBaseWidget* IconWidget);
	void RemoveIcon(int32 ID, bool bForce);
	void UpdateBracketHighlight();
	void UpdateIcon(class UHWIconDisplayBaseWidget* IconWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconDisplayerBase">();
	}
	static class UHWIconDisplayerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconDisplayerBase>();
	}
};
static_assert(alignof(UHWIconDisplayerBase) == 0x000008, "Wrong alignment on UHWIconDisplayerBase");
static_assert(sizeof(UHWIconDisplayerBase) == 0x0006E0, "Wrong size on UHWIconDisplayerBase");
static_assert(offsetof(UHWIconDisplayerBase, bCreateNewOnNoPool) == 0x0005F8, "Member 'UHWIconDisplayerBase::bCreateNewOnNoPool' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayerBase, DisplayedIcons) == 0x000600, "Member 'UHWIconDisplayerBase::DisplayedIcons' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayerBase, ConfigTableAssetPtr) == 0x000658, "Member 'UHWIconDisplayerBase::ConfigTableAssetPtr' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayerBase, WidgetPools) == 0x000680, "Member 'UHWIconDisplayerBase::WidgetPools' has a wrong offset!");

// Class HemingwayUI.HWQueueInfoWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWQueueInfoWidget : public UHWWidget
{
public:
	void BP_DisplayQueueInfo(const struct FRHQueueDetails& QueueDetails, const struct FHWGameModeInfo& GameModeInfo);
	bool DisplayQueueInfoForQueueId(const class FString& QueueId);
	void HideQueueInfoWidget();
	void ShowQueueInfoWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWQueueInfoWidget">();
	}
	static class UHWQueueInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWQueueInfoWidget>();
	}
};
static_assert(alignof(UHWQueueInfoWidget) == 0x000008, "Wrong alignment on UHWQueueInfoWidget");
static_assert(sizeof(UHWQueueInfoWidget) == 0x0005F8, "Wrong size on UHWQueueInfoWidget");

// Class HemingwayUI.HWQueueSelectV2EntryWidget
// 0x0038 (0x0630 - 0x05F8)
class UHWQueueSelectV2EntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x20];                                     // 0x05F8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueId;                                           // 0x0618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              HitTarget;                                         // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void PopulateQueueDetails(const struct FRHQueueDetails& QueueDetails);

	class FString GetQueueId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWQueueSelectV2EntryWidget">();
	}
	static class UHWQueueSelectV2EntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWQueueSelectV2EntryWidget>();
	}
};
static_assert(alignof(UHWQueueSelectV2EntryWidget) == 0x000008, "Wrong alignment on UHWQueueSelectV2EntryWidget");
static_assert(sizeof(UHWQueueSelectV2EntryWidget) == 0x000630, "Wrong size on UHWQueueSelectV2EntryWidget");
static_assert(offsetof(UHWQueueSelectV2EntryWidget, QueueId) == 0x000618, "Member 'UHWQueueSelectV2EntryWidget::QueueId' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2EntryWidget, HitTarget) == 0x000628, "Member 'UHWQueueSelectV2EntryWidget::HitTarget' has a wrong offset!");

// Class HemingwayUI.HWPrecompiledShaderViewRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWPrecompiledShaderViewRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPrecompiledShaderViewRedirector">();
	}
	static class UHWPrecompiledShaderViewRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPrecompiledShaderViewRedirector>();
	}
};
static_assert(alignof(UHWPrecompiledShaderViewRedirector) == 0x000008, "Wrong alignment on UHWPrecompiledShaderViewRedirector");
static_assert(sizeof(UHWPrecompiledShaderViewRedirector) == 0x000028, "Wrong size on UHWPrecompiledShaderViewRedirector");

// Class HemingwayUI.HWIconSubsystem
// 0x0010 (0x0040 - 0x0030)
class UHWIconSubsystem final : public UGameInstanceSubsystem
{
public:
	class UHWDataDisplay_CharacterStats*          CharacterStatsDataDisplay;                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWDataDisplay_Keywords*                KeywordsDataDisplay;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const class UHWDataDisplay_CharacterStats* GetCharacterStatsDataDisplay() const;
	const class UHWDataDisplay_Keywords* GetKeywordsDataDisplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconSubsystem">();
	}
	static class UHWIconSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconSubsystem>();
	}
};
static_assert(alignof(UHWIconSubsystem) == 0x000008, "Wrong alignment on UHWIconSubsystem");
static_assert(sizeof(UHWIconSubsystem) == 0x000040, "Wrong size on UHWIconSubsystem");
static_assert(offsetof(UHWIconSubsystem, CharacterStatsDataDisplay) == 0x000030, "Member 'UHWIconSubsystem::CharacterStatsDataDisplay' has a wrong offset!");
static_assert(offsetof(UHWIconSubsystem, KeywordsDataDisplay) == 0x000038, "Member 'UHWIconSubsystem::KeywordsDataDisplay' has a wrong offset!");

// Class HemingwayUI.HWQueueSelectV2ScreenWidget
// 0x00C0 (0x06B8 - 0x05F8)
class UHWQueueSelectV2ScreenWidget : public UHWWidget
{
public:
	EHWQueueSelectState                           CachedQueueSelectState;                            // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWWidgetSwitcher*                      ContentSwitcher;                                   // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CasualEntry;                                       // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            RankedEntry;                                       // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopEntry;                                         // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CasualConquestEntry;                               // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CasualArenaEntry;                                  // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CasualJoustEntry;                                  // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CasualAssaultEntry;                                // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            RankedConquestEntry;                               // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            RankedDuelEntry;                                   // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopConquestEntry;                                 // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopArenaEntry;                                    // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopJoustEntry;                                    // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopAssaultEntry;                                  // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopEasyConquestEntry;                             // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopMediumConquestEntry;                           // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopHardConquestEntry;                             // 0x0680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopEasyArenaEntry;                                // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopMediumArenaEntry;                              // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            CoopHardArenaEntry;                                // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            ConquestTutorialEntry;                             // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            ArenaTutorialEntry;                                // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWQueueSelectV2EntryWidget*            JunglePracticeEntry;                               // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleArenaTutorialEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleCasualEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleConquestTutorialEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleCoopArenaEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleCoopConquestEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleCoopEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandleJunglePracticeEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void HandlePracticeButtonClicked(const class FString& LevelName, const struct FGameplayTag& TransitionTag);
	void HandleRankedEntryClicked(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void JoinEntryQueue(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void RefreshQueueData();
	void SelectEntryQueue(class UHWQueueSelectV2EntryWidget* EntryWidget);
	void SetQueueSelectState(EHWQueueSelectState QueueSelectState);

	class UHWQueueDataFactory* GetQueueDataFactory() const;
	void GetQueueSelectEntries(TArray<class UHWQueueSelectV2EntryWidget*>* OutQueueEntries) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWQueueSelectV2ScreenWidget">();
	}
	static class UHWQueueSelectV2ScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWQueueSelectV2ScreenWidget>();
	}
};
static_assert(alignof(UHWQueueSelectV2ScreenWidget) == 0x000008, "Wrong alignment on UHWQueueSelectV2ScreenWidget");
static_assert(sizeof(UHWQueueSelectV2ScreenWidget) == 0x0006B8, "Wrong size on UHWQueueSelectV2ScreenWidget");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CachedQueueSelectState) == 0x0005F8, "Member 'UHWQueueSelectV2ScreenWidget::CachedQueueSelectState' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, ContentSwitcher) == 0x000600, "Member 'UHWQueueSelectV2ScreenWidget::ContentSwitcher' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CasualEntry) == 0x000608, "Member 'UHWQueueSelectV2ScreenWidget::CasualEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, RankedEntry) == 0x000610, "Member 'UHWQueueSelectV2ScreenWidget::RankedEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopEntry) == 0x000618, "Member 'UHWQueueSelectV2ScreenWidget::CoopEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CasualConquestEntry) == 0x000620, "Member 'UHWQueueSelectV2ScreenWidget::CasualConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CasualArenaEntry) == 0x000628, "Member 'UHWQueueSelectV2ScreenWidget::CasualArenaEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CasualJoustEntry) == 0x000630, "Member 'UHWQueueSelectV2ScreenWidget::CasualJoustEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CasualAssaultEntry) == 0x000638, "Member 'UHWQueueSelectV2ScreenWidget::CasualAssaultEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, RankedConquestEntry) == 0x000640, "Member 'UHWQueueSelectV2ScreenWidget::RankedConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, RankedDuelEntry) == 0x000648, "Member 'UHWQueueSelectV2ScreenWidget::RankedDuelEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopConquestEntry) == 0x000650, "Member 'UHWQueueSelectV2ScreenWidget::CoopConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopArenaEntry) == 0x000658, "Member 'UHWQueueSelectV2ScreenWidget::CoopArenaEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopJoustEntry) == 0x000660, "Member 'UHWQueueSelectV2ScreenWidget::CoopJoustEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopAssaultEntry) == 0x000668, "Member 'UHWQueueSelectV2ScreenWidget::CoopAssaultEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopEasyConquestEntry) == 0x000670, "Member 'UHWQueueSelectV2ScreenWidget::CoopEasyConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopMediumConquestEntry) == 0x000678, "Member 'UHWQueueSelectV2ScreenWidget::CoopMediumConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopHardConquestEntry) == 0x000680, "Member 'UHWQueueSelectV2ScreenWidget::CoopHardConquestEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopEasyArenaEntry) == 0x000688, "Member 'UHWQueueSelectV2ScreenWidget::CoopEasyArenaEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopMediumArenaEntry) == 0x000690, "Member 'UHWQueueSelectV2ScreenWidget::CoopMediumArenaEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, CoopHardArenaEntry) == 0x000698, "Member 'UHWQueueSelectV2ScreenWidget::CoopHardArenaEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, ConquestTutorialEntry) == 0x0006A0, "Member 'UHWQueueSelectV2ScreenWidget::ConquestTutorialEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, ArenaTutorialEntry) == 0x0006A8, "Member 'UHWQueueSelectV2ScreenWidget::ArenaTutorialEntry' has a wrong offset!");
static_assert(offsetof(UHWQueueSelectV2ScreenWidget, JunglePracticeEntry) == 0x0006B0, "Member 'UHWQueueSelectV2ScreenWidget::JunglePracticeEntry' has a wrong offset!");

// Class HemingwayUI.HWButtonWidget
// 0x0528 (0x0B20 - 0x05F8)
class UHWButtonWidget : public UHWWidget
{
public:
	class UHWButton*                              ButtonHitBox;                                      // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               ButtonImage;                                       // 0x0600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNamedSlot*                             ContentSlot;                                       // 0x0608(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAcceptEnterAsClick;                               // 0x0610(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAcceptSpaceAsClick;                               // 0x0611(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_612[0xE];                                      // 0x0612(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           ButtonStyle;                                       // 0x0620(0x03F0)(Edit, Protected, NativeAccessSpecifierProtected)
	EHorizontalAlignment                          ContentHorizontalAlignment;                        // 0x0A10(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EVerticalAlignment                            ContentVerticalAlignment;                          // 0x0A11(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A12[0x6];                                      // 0x0A12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnButtonClicked;                                   // 0x0A18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FHWButtonStateConfig                   NormalStateConfig;                                 // 0x0A28(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWButtonStateConfig                   PressedStateConfig;                                // 0x0A3C(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWButtonStateConfig                   HoveredStateConfig;                                // 0x0A50(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FHWButtonStateConfig                   DisabledStateConfig;                               // 0x0A64(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWButtonImageStateConfig> ImageStateConfigs;                   // 0x0A78(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CurrentImageState;                                 // 0x0AC8(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoStyleText;                                    // 0x0AD0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSkipUserWidgets;                                  // 0x0AD1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBindActionOnFocus;                                // 0x0AD2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD3[0x5];                                      // 0x0AD3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ActionBindingContainer;                            // 0x0AD8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B18[0x8];                                      // 0x0B18(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CopyStyles(TSubclassOf<class UHWButtonWidget> ButtonToCopyFrom);
	void DisplayCheckMark();
	void DisplayLock();
	void HandleUMGButtonClicked();
	void HandleUMGButtonHovered();
	void HandleUMGButtonPressed();
	void HandleUMGButtonReleased();
	void HandleUMGButtonUnhovered();
	void HideContentImage();
	void SetAsButtonState(bool bIsButtonEnabled);
	void SetAsImageState(const struct FGameplayTag& ImageState);
	void SetContentAlignment(EHorizontalAlignment Horizontal, EVerticalAlignment Vertical);
	void UpdatedAsButton();
	void UpdatedAsImageState(const struct FGameplayTag& ImageState);
	void UpdateVFX(bool bShouldShow);

	const struct FGameplayTag GetCurrentImageState() const;
	class UHWButton* GetUMGButton() const;
	class UHWImage* GetUMGImage() const;
	bool IsButtonEnabled() const;
	bool IsDisplayingImageState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWButtonWidget">();
	}
	static class UHWButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWButtonWidget>();
	}
};
static_assert(alignof(UHWButtonWidget) == 0x000010, "Wrong alignment on UHWButtonWidget");
static_assert(sizeof(UHWButtonWidget) == 0x000B20, "Wrong size on UHWButtonWidget");
static_assert(offsetof(UHWButtonWidget, ButtonHitBox) == 0x0005F8, "Member 'UHWButtonWidget::ButtonHitBox' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ButtonImage) == 0x000600, "Member 'UHWButtonWidget::ButtonImage' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ContentSlot) == 0x000608, "Member 'UHWButtonWidget::ContentSlot' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, bAcceptEnterAsClick) == 0x000610, "Member 'UHWButtonWidget::bAcceptEnterAsClick' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, bAcceptSpaceAsClick) == 0x000611, "Member 'UHWButtonWidget::bAcceptSpaceAsClick' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ButtonStyle) == 0x000620, "Member 'UHWButtonWidget::ButtonStyle' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ContentHorizontalAlignment) == 0x000A10, "Member 'UHWButtonWidget::ContentHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ContentVerticalAlignment) == 0x000A11, "Member 'UHWButtonWidget::ContentVerticalAlignment' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, OnButtonClicked) == 0x000A18, "Member 'UHWButtonWidget::OnButtonClicked' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, NormalStateConfig) == 0x000A28, "Member 'UHWButtonWidget::NormalStateConfig' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, PressedStateConfig) == 0x000A3C, "Member 'UHWButtonWidget::PressedStateConfig' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, HoveredStateConfig) == 0x000A50, "Member 'UHWButtonWidget::HoveredStateConfig' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, DisabledStateConfig) == 0x000A64, "Member 'UHWButtonWidget::DisabledStateConfig' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ImageStateConfigs) == 0x000A78, "Member 'UHWButtonWidget::ImageStateConfigs' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, CurrentImageState) == 0x000AC8, "Member 'UHWButtonWidget::CurrentImageState' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, bAutoStyleText) == 0x000AD0, "Member 'UHWButtonWidget::bAutoStyleText' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, bSkipUserWidgets) == 0x000AD1, "Member 'UHWButtonWidget::bSkipUserWidgets' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, bBindActionOnFocus) == 0x000AD2, "Member 'UHWButtonWidget::bBindActionOnFocus' has a wrong offset!");
static_assert(offsetof(UHWButtonWidget, ActionBindingContainer) == 0x000AD8, "Member 'UHWButtonWidget::ActionBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopContentButton
// 0x0050 (0x0B70 - 0x0B20)
class UHWSeasonShopContentButton : public UHWButtonWidget
{
public:
	TSoftObjectPtr<class URHStoreItem>            StoreItem;                                         // 0x0B20(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWInventoryItem>        DisplayItem;                                       // 0x0B48(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetPriceForItem();
	void OnItemPriceUpdated(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void PopulateContent(const struct FHWSeasonShopItemWithCustomData& ShopItem, bool bIsPreviewItem, int32 Page, bool bHasPremium);
	void PurchaseItem();
	void SetStoreItem(class URHStoreItem* InStoreItem, class UHWInventoryItem* InDisplayItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopContentButton">();
	}
	static class UHWSeasonShopContentButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopContentButton>();
	}
};
static_assert(alignof(UHWSeasonShopContentButton) == 0x000010, "Wrong alignment on UHWSeasonShopContentButton");
static_assert(sizeof(UHWSeasonShopContentButton) == 0x000B70, "Wrong size on UHWSeasonShopContentButton");
static_assert(offsetof(UHWSeasonShopContentButton, StoreItem) == 0x000B20, "Member 'UHWSeasonShopContentButton::StoreItem' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopContentButton, DisplayItem) == 0x000B48, "Member 'UHWSeasonShopContentButton::DisplayItem' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopHubWidget
// 0x0068 (0x0660 - 0x05F8)
class UHWSeasonShopHubWidget : public UHWWidget
{
public:
	TSubclassOf<class UHWSeasonShopSeasonButton>  SeasonButtonClass;                                 // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_ItemId                             CoinItemId;                                        // 0x0600(0x0014)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PurchaseCoinsActionContainer;                      // 0x0618(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class URHStoreItem* GetSeasonItemFromId(const struct FRH_LootId& LootId);
	void OpenCoinPurchase();
	void PopulateSeasonButtons(class UPanelWidget* PanelWidget, const TArray<class URHStoreItem*>& SeasonItems);
	void PopulateSeasons(const TArray<class URHStoreItem*>& SeasonItems);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopHubWidget">();
	}
	static class UHWSeasonShopHubWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopHubWidget>();
	}
};
static_assert(alignof(UHWSeasonShopHubWidget) == 0x000008, "Wrong alignment on UHWSeasonShopHubWidget");
static_assert(sizeof(UHWSeasonShopHubWidget) == 0x000660, "Wrong size on UHWSeasonShopHubWidget");
static_assert(offsetof(UHWSeasonShopHubWidget, SeasonButtonClass) == 0x0005F8, "Member 'UHWSeasonShopHubWidget::SeasonButtonClass' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopHubWidget, CoinItemId) == 0x000600, "Member 'UHWSeasonShopHubWidget::CoinItemId' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopHubWidget, PurchaseCoinsActionContainer) == 0x000618, "Member 'UHWSeasonShopHubWidget::PurchaseCoinsActionContainer' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopItemDisplay
// 0x0078 (0x0670 - 0x05F8)
class UHWSeasonShopItemDisplay : public UHWWidget
{
public:
	TSoftObjectPtr<class URHStoreItem>            StoreItem;                                         // 0x05F8(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWInventoryItem>        DisplayItem;                                       // 0x0620(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class URHStoreItem>            SeasonItem;                                        // 0x0648(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetPriceForItem(bool bUseSeasonItem);
	void OnItemPriceUpdated(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void PurchaseItem(bool bUseSeasonItem);
	void SetStoreItem(class URHStoreItem* InStoreItem, class UHWInventoryItem* InDisplayItem, class URHStoreItem* InSeasonItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopItemDisplay">();
	}
	static class UHWSeasonShopItemDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopItemDisplay>();
	}
};
static_assert(alignof(UHWSeasonShopItemDisplay) == 0x000008, "Wrong alignment on UHWSeasonShopItemDisplay");
static_assert(sizeof(UHWSeasonShopItemDisplay) == 0x000670, "Wrong size on UHWSeasonShopItemDisplay");
static_assert(offsetof(UHWSeasonShopItemDisplay, StoreItem) == 0x0005F8, "Member 'UHWSeasonShopItemDisplay::StoreItem' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopItemDisplay, DisplayItem) == 0x000620, "Member 'UHWSeasonShopItemDisplay::DisplayItem' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopItemDisplay, SeasonItem) == 0x000648, "Member 'UHWSeasonShopItemDisplay::SeasonItem' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopMarketWidget
// 0x0098 (0x0690 - 0x05F8)
class UHWSeasonShopMarketWidget : public UHWWidget
{
public:
	class UInputAction*                           PreviousMarketAction;                              // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           NextMarketAction;                                  // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           PreviousPageAction;                                // 0x0608(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           NextPageAction;                                    // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           PurchasePremiumAction;                             // 0x0618(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x18];                                     // 0x0620(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWSeasonShopItemWithCustomData> CurrentSeasonItemDatas;                           // 0x0638(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class URHStoreItem*                           SelectedSeason;                                    // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSeasonItem*                          SelectedSeasonItem;                                // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedPageIndex;                                 // 0x0658(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWSeasonShopContentButton> ContentButtonClass;                                // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWButtonWidget>            SeasonPageButtonClass;                             // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GridPaddingWidth;                                  // 0x0670(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GridPaddingHeight;                                 // 0x0674(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_ItemId                             RedirectItemId;                                    // 0x0678(0x0014)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrentPoints();
	int32 GetDefaultPageIndex();
	bool GetItemsForSeasonPage(int32 PageIndex, TArray<struct FHWSeasonShopItemWithCustomData>* SeasonItems, int32* OwnedCount);
	int32 GetPointsRequiredForPage(int32 PageIndex);
	class URHStoreItem* GetSeasonItemFromId(const struct FRH_LootId& LootId);
	const class UHWSeasonItem* GetSelectedSeason();
	class URHStoreItem* GetStoreItemForItem(class UPlatformInventoryItem* Item);
	int32 GetTotalPagesCount();
	int32 GetUnlockedPagesCount();
	void HandlePendingPurchaseUpdate();
	bool IsPageCompleted(int32 PageIndex);
	bool IsSeasonPageUnlocked(int32 PageIndex);
	void NavigateToNextPage(bool NextPage);
	void NavigateToNextSeason(bool NextSeason);
	void OnAllSeasonVendorsLoaded();
	void OnSeasonPriceUpdated(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void OnSeasonSet(const class URHStoreItem* StoreItem, const class UHWSeasonItem* SeasonItem);
	void OnSeasonShopPagesReady();
	void PopulateGridPanel(class UHWSortableGridPanel* GridPanel, bool bIsPreviewPanel, bool bIsPremiumOwned);
	void PopulateShopPageButtons(class UHWVerticalBox* VerticalBox);
	void PurchaseSeason();
	void SetSelectedSeason(class URHStoreItem* InSeason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopMarketWidget">();
	}
	static class UHWSeasonShopMarketWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopMarketWidget>();
	}
};
static_assert(alignof(UHWSeasonShopMarketWidget) == 0x000008, "Wrong alignment on UHWSeasonShopMarketWidget");
static_assert(sizeof(UHWSeasonShopMarketWidget) == 0x000690, "Wrong size on UHWSeasonShopMarketWidget");
static_assert(offsetof(UHWSeasonShopMarketWidget, PreviousMarketAction) == 0x0005F8, "Member 'UHWSeasonShopMarketWidget::PreviousMarketAction' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, NextMarketAction) == 0x000600, "Member 'UHWSeasonShopMarketWidget::NextMarketAction' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, PreviousPageAction) == 0x000608, "Member 'UHWSeasonShopMarketWidget::PreviousPageAction' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, NextPageAction) == 0x000610, "Member 'UHWSeasonShopMarketWidget::NextPageAction' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, PurchasePremiumAction) == 0x000618, "Member 'UHWSeasonShopMarketWidget::PurchasePremiumAction' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, CurrentSeasonItemDatas) == 0x000638, "Member 'UHWSeasonShopMarketWidget::CurrentSeasonItemDatas' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, SelectedSeason) == 0x000648, "Member 'UHWSeasonShopMarketWidget::SelectedSeason' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, SelectedSeasonItem) == 0x000650, "Member 'UHWSeasonShopMarketWidget::SelectedSeasonItem' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, SelectedPageIndex) == 0x000658, "Member 'UHWSeasonShopMarketWidget::SelectedPageIndex' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, ContentButtonClass) == 0x000660, "Member 'UHWSeasonShopMarketWidget::ContentButtonClass' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, SeasonPageButtonClass) == 0x000668, "Member 'UHWSeasonShopMarketWidget::SeasonPageButtonClass' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, GridPaddingWidth) == 0x000670, "Member 'UHWSeasonShopMarketWidget::GridPaddingWidth' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, GridPaddingHeight) == 0x000674, "Member 'UHWSeasonShopMarketWidget::GridPaddingHeight' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopMarketWidget, RedirectItemId) == 0x000678, "Member 'UHWSeasonShopMarketWidget::RedirectItemId' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopQuestProgressWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWSeasonShopQuestProgressWidget : public UHWWidget
{
public:
	int32                                         ProgressChangeLevel;                               // 0x05F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreLevelXpCap;                                     // 0x05FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostLevelXpCap;                                    // 0x0600(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrencyCapWarningPercentStart;                    // 0x0604(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HandleWanderingMarketMultiplierActive(bool bIsMultiplierActive);

	int32 GetCurrencyCap() const;
	int32 GetCurrentCurrencyCount() const;
	int32 GetCurrentLevelCap() const;
	int32 GetCurrentLevelXp() const;
	int32 GetRewardTokenCount() const;
	int32 GetXpCount() const;
	bool IsPreLevelXpCap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopQuestProgressWidget">();
	}
	static class UHWSeasonShopQuestProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopQuestProgressWidget>();
	}
};
static_assert(alignof(UHWSeasonShopQuestProgressWidget) == 0x000008, "Wrong alignment on UHWSeasonShopQuestProgressWidget");
static_assert(sizeof(UHWSeasonShopQuestProgressWidget) == 0x000608, "Wrong size on UHWSeasonShopQuestProgressWidget");
static_assert(offsetof(UHWSeasonShopQuestProgressWidget, ProgressChangeLevel) == 0x0005F8, "Member 'UHWSeasonShopQuestProgressWidget::ProgressChangeLevel' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopQuestProgressWidget, PreLevelXpCap) == 0x0005FC, "Member 'UHWSeasonShopQuestProgressWidget::PreLevelXpCap' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopQuestProgressWidget, PostLevelXpCap) == 0x000600, "Member 'UHWSeasonShopQuestProgressWidget::PostLevelXpCap' has a wrong offset!");
static_assert(offsetof(UHWSeasonShopQuestProgressWidget, CurrencyCapWarningPercentStart) == 0x000604, "Member 'UHWSeasonShopQuestProgressWidget::CurrencyCapWarningPercentStart' has a wrong offset!");

// Class HemingwayUI.HWSeasonShopSeasonButton
// 0x0000 (0x0B20 - 0x0B20)
class UHWSeasonShopSeasonButton : public UHWButtonWidget
{
public:
	void GetPriceForSeason(class URHStoreItem* SeasonItem);
	void OnItemPriceUpdated(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void PopulateSeason(class URHStoreItem* PriceItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSeasonShopSeasonButton">();
	}
	static class UHWSeasonShopSeasonButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSeasonShopSeasonButton>();
	}
};
static_assert(alignof(UHWSeasonShopSeasonButton) == 0x000010, "Wrong alignment on UHWSeasonShopSeasonButton");
static_assert(sizeof(UHWSeasonShopSeasonButton) == 0x000B20, "Wrong size on UHWSeasonShopSeasonButton");

// Class HemingwayUI.HWGameHUDWidget
// 0x0138 (0x0848 - 0x0710)
class UHWGameHUDWidget : public UHWBaseHUDWidget
{
public:
	struct FHWPlatformBool                        bAdjustToPlayerScreenGeometry;                     // 0x0710(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_713[0x25];                                     // 0x0713(0x0025)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCanvasPanel*                         BaseViewCanvas;                                    // 0x0738(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             ReticleDisplayOptionsTable;                        // 0x0740(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_748[0x38];                                     // 0x0748(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsUsingDynamicReticle;                            // 0x0780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWFloatingTextDisplayManager*          FloatingTextManager;                               // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWFloatingTextPoolManager> FloatingTextPoolManagerClass;                      // 0x0790(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowAutoOpenItemStore;                           // 0x0798(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_799[0x7];                                      // 0x0799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWHelpTipWidget*                       HelpTipWidget;                                     // 0x07A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHelpTipWidget*                       GodHelpTipWidget;                                  // 0x07A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCombatLogWidget*                     CombatLogWidget;                                   // 0x07B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B8[0x24];                                     // 0x07B8(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GoldAmountToPromptHelpTipToPurchase;               // 0x07DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoldAmountToPromptToReturnToBaseToPurchase;        // 0x07E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowHealthWarnPercent;                              // 0x07E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWWidget*                              PrototypeHUD;                                      // 0x07E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<EHWHUDLayoutPreset, class FString>       LayoutOverrides;                                   // 0x07F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UHWHUDLayoutPresetData*                 PresetDataAsset;                                   // 0x0840(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	EHWItemStoreLayoutType GetItemStoreLayout();
	void HandleItemStoreHidden();
	void HandleItemStoreLayoutChanged(EHWItemStoreLayoutType ItemStoreLayoutType);
	void HandleNetworkLagStateChanged(class UWorld* World, class UNetDriver* NetDriver, ENetworkLagState LagState);
	void HandleTagUpdated_IsInFountain(const struct FGameplayTag& CallbackTag, int32 NewCount);
	void HandleTagUpdated_IsTweeningDownLane(const struct FGameplayTag& CallbackTag, int32 NewCount);
	void HandleViewStateChanged(const struct FGameplayTag& CurrentRoute, const struct FGameplayTag& PreviousRoute, EViewManagerLayer Layer);
	void OnItemStoreLayoutChanged();
	void OnNetworkLagStateUpdated(ENetworkPingState PingState, ENetworkLagState LagState);
	void OnTargeterReticleVisibilityChanged(bool bIsTargeterReticleVisible);
	void OpenChatWindow();
	void SetHelpTipVisibility(bool bIsVisible);
	void SetReticleShape(class UObject* NewReticleShape);
	void SetToPlayerScreenGeometry(const struct FVector2D& InSize);
	void UpdateHelpTipVisibility();
	void UpdateReticlePosition(const struct FVector2D& NewPosition);
	void UpdateReticleTarget(bool bIsTargeting);
	void UpdateReticleVisibility(bool bVisible);

	class UHWAutoBuyBuildSelector* GetAutoBuyBuildSelectorWidget() const;
	class UHWCombatLogWidget* GetCombatLogWidget() const;
	class UHWFloatingTextDisplayManager* GetFloatingTextManager() const;
	class UHWHelpTipWidget* GetGodHelpTipWidget() const;
	class UHWHelpTipWidget* GetHelpTipWidget() const;
	class UHWWidget* GetPrototypeHUD() const;
	bool HasValidJoinedSession() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameHUDWidget">();
	}
	static class UHWGameHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameHUDWidget>();
	}
};
static_assert(alignof(UHWGameHUDWidget) == 0x000008, "Wrong alignment on UHWGameHUDWidget");
static_assert(sizeof(UHWGameHUDWidget) == 0x000848, "Wrong size on UHWGameHUDWidget");
static_assert(offsetof(UHWGameHUDWidget, bAdjustToPlayerScreenGeometry) == 0x000710, "Member 'UHWGameHUDWidget::bAdjustToPlayerScreenGeometry' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, BaseViewCanvas) == 0x000738, "Member 'UHWGameHUDWidget::BaseViewCanvas' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, ReticleDisplayOptionsTable) == 0x000740, "Member 'UHWGameHUDWidget::ReticleDisplayOptionsTable' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, bIsUsingDynamicReticle) == 0x000780, "Member 'UHWGameHUDWidget::bIsUsingDynamicReticle' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, FloatingTextManager) == 0x000788, "Member 'UHWGameHUDWidget::FloatingTextManager' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, FloatingTextPoolManagerClass) == 0x000790, "Member 'UHWGameHUDWidget::FloatingTextPoolManagerClass' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, bAllowAutoOpenItemStore) == 0x000798, "Member 'UHWGameHUDWidget::bAllowAutoOpenItemStore' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, HelpTipWidget) == 0x0007A0, "Member 'UHWGameHUDWidget::HelpTipWidget' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, GodHelpTipWidget) == 0x0007A8, "Member 'UHWGameHUDWidget::GodHelpTipWidget' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, CombatLogWidget) == 0x0007B0, "Member 'UHWGameHUDWidget::CombatLogWidget' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, GoldAmountToPromptHelpTipToPurchase) == 0x0007DC, "Member 'UHWGameHUDWidget::GoldAmountToPromptHelpTipToPurchase' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, GoldAmountToPromptToReturnToBaseToPurchase) == 0x0007E0, "Member 'UHWGameHUDWidget::GoldAmountToPromptToReturnToBaseToPurchase' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, LowHealthWarnPercent) == 0x0007E4, "Member 'UHWGameHUDWidget::LowHealthWarnPercent' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, PrototypeHUD) == 0x0007E8, "Member 'UHWGameHUDWidget::PrototypeHUD' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, LayoutOverrides) == 0x0007F0, "Member 'UHWGameHUDWidget::LayoutOverrides' has a wrong offset!");
static_assert(offsetof(UHWGameHUDWidget, PresetDataAsset) == 0x000840, "Member 'UHWGameHUDWidget::PresetDataAsset' has a wrong offset!");

// Class HemingwayUI.HWStoreChestContentDisplay
// 0x0050 (0x0648 - 0x05F8)
class UHWStoreChestContentDisplay : public UHWWidget
{
public:
	TArray<class URHStoreItem*>                   ChestChanceItems;                                  // 0x05F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class URHStoreItem*>                   StoreItems;                                        // 0x0608(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class URHStoreItem*                           CurrentChestItem;                                  // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsChestComplete;                                  // 0x0620(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_621[0x27];                                     // 0x0621(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddItem(class URHStoreItem* StoreItem);
	void ClearItems();
	void DisplayChest(class URHStoreItem* ChestItem);
	void GetPrice(class URHStoreItem* StoreItem);
	void OnChestContentRequest(bool bSuccess, const TArray<class URHStoreItem*>& ContentItems);
	void OnChestItemLoaded();
	void OnInventoryUpdated(const TArray<int32>& UpdatedInventoryIds, class URH_PlayerInfo* PlayerInfo);
	void OnItemsLoaded();
	void OnPriceUpdate(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void OnStoreItemsLoaded();
	void OnUpdateOwnershipCount(int32 CurrentOwnedCount, int32 TotalCount);
	void PurchaseChest(class URHStoreItem* ChestItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreChestContentDisplay">();
	}
	static class UHWStoreChestContentDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreChestContentDisplay>();
	}
};
static_assert(alignof(UHWStoreChestContentDisplay) == 0x000008, "Wrong alignment on UHWStoreChestContentDisplay");
static_assert(sizeof(UHWStoreChestContentDisplay) == 0x000648, "Wrong size on UHWStoreChestContentDisplay");
static_assert(offsetof(UHWStoreChestContentDisplay, ChestChanceItems) == 0x0005F8, "Member 'UHWStoreChestContentDisplay::ChestChanceItems' has a wrong offset!");
static_assert(offsetof(UHWStoreChestContentDisplay, StoreItems) == 0x000608, "Member 'UHWStoreChestContentDisplay::StoreItems' has a wrong offset!");
static_assert(offsetof(UHWStoreChestContentDisplay, CurrentChestItem) == 0x000618, "Member 'UHWStoreChestContentDisplay::CurrentChestItem' has a wrong offset!");
static_assert(offsetof(UHWStoreChestContentDisplay, bIsChestComplete) == 0x000620, "Member 'UHWStoreChestContentDisplay::bIsChestComplete' has a wrong offset!");

// Class HemingwayUI.HWCharacterManaWidget
// 0x0000 (0x0618 - 0x0618)
class UHWCharacterManaWidget : public UHWGameplayAttributeWidget
{
public:
	void UpdateCurrentMana(float OldMana, float NewMana, bool bShouldAnimate);
	void UpdateMaxMana(float OldMaxMana, float NewMaxMana, bool bShouldAnimate);

	float GetCurrentMana() const;
	float GetMaxMana() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterManaWidget">();
	}
	static class UHWCharacterManaWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterManaWidget>();
	}
};
static_assert(alignof(UHWCharacterManaWidget) == 0x000008, "Wrong alignment on UHWCharacterManaWidget");
static_assert(sizeof(UHWCharacterManaWidget) == 0x000618, "Wrong size on UHWCharacterManaWidget");

// Class HemingwayUI.HWStoreItemDisplayWidget
// 0x0070 (0x0668 - 0x05F8)
class UHWStoreItemDisplayWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWStoreItemDisplayWidget* ItemWidget, bool bIsSelected)> OnSelectedStoreItemWidget; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWStoreItemDisplayWidget* ItemWidget)> OnStoreItemWidgetRequestSelect; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bShouldDisplayPrice;                               // 0x0618(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URHStoreItem>            StoreItem;                                         // 0x061C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWInventoryItem>        DisplayItem;                                       // 0x0628(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x4];                                      // 0x0650(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URHStoreItem>            SelectedBundleItem;                                // 0x0654(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowBundle;                                 // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URHStoreItem>            SelectedVariantItem;                               // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayLoadingState(bool bIsLoading);
	void OnDisplayBundleContents(const TArray<class URHStoreItem*>& BundleContents);
	void OnDisplayItem(class UHWInventoryItem* Item);
	void OnDisplayItemAsCurrency(class URHCurrency* CURRENCY);
	void OnDisplayPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void OnDisplaySelectedBundleContentItem(const class URHStoreItem* BundleContentItem);
	void OnDisplaySelectedVariantItem(const class URHStoreItem* Item);
	void OnDisplaySkinVariants(const class UHWSkinItem* BaseSkin);
	void OnSelectedStateChanged(bool bIsSelected);
	void PurchaseItem();
	void SelectBundleContentItem(class URHStoreItem* BundleContentItem);
	void SelectNextBundleItem();
	void SelectNextVariantItem();
	void SelectVariantItem(class URHStoreItem* Item);
	void SetSelectedItem(bool bIsSelected);
	void SetStoreItem(class URHStoreItem* InStoreItem, TSoftObjectPtr<class UHWInventoryItem> InDisplayItem);
	void UpdateItemDisplay();
	void UpdateItemPrice();
	void UpdateShowBundle(bool bShow);
	void UpdateVariants();

	struct FRH_ItemId GetDisplayedItemId() const;
	class URHStoreItem* GetDisplayedStoreItem() const;
	TSoftObjectPtr<class UHWInventoryItem> GetDisplayItem() const;
	TSoftObjectPtr<class URHCurrency> GetDisplayItemAsCurrency() const;
	const class URHStoreItem* GetSelectedBundleItem() const;
	const class URHStoreItem* GetSelectedVariantItem() const;
	class URHStoreItem* GetStoreItem() const;
	bool IsBundle() const;
	bool IsBundleOwned() const;
	bool IsCurrencyDisplayItem() const;
	bool IsDisplayedItemOwned() const;
	bool IsStoreItemOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreItemDisplayWidget">();
	}
	static class UHWStoreItemDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreItemDisplayWidget>();
	}
};
static_assert(alignof(UHWStoreItemDisplayWidget) == 0x000008, "Wrong alignment on UHWStoreItemDisplayWidget");
static_assert(sizeof(UHWStoreItemDisplayWidget) == 0x000668, "Wrong size on UHWStoreItemDisplayWidget");
static_assert(offsetof(UHWStoreItemDisplayWidget, OnSelectedStoreItemWidget) == 0x0005F8, "Member 'UHWStoreItemDisplayWidget::OnSelectedStoreItemWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, OnStoreItemWidgetRequestSelect) == 0x000608, "Member 'UHWStoreItemDisplayWidget::OnStoreItemWidgetRequestSelect' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, bShouldDisplayPrice) == 0x000618, "Member 'UHWStoreItemDisplayWidget::bShouldDisplayPrice' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, StoreItem) == 0x00061C, "Member 'UHWStoreItemDisplayWidget::StoreItem' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, DisplayItem) == 0x000628, "Member 'UHWStoreItemDisplayWidget::DisplayItem' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, SelectedBundleItem) == 0x000654, "Member 'UHWStoreItemDisplayWidget::SelectedBundleItem' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, bShouldShowBundle) == 0x00065C, "Member 'UHWStoreItemDisplayWidget::bShouldShowBundle' has a wrong offset!");
static_assert(offsetof(UHWStoreItemDisplayWidget, SelectedVariantItem) == 0x000660, "Member 'UHWStoreItemDisplayWidget::SelectedVariantItem' has a wrong offset!");

// Class HemingwayUI.HWPlayerQuestDisplayWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWPlayerQuestDisplayWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWQuest>                CurrentQuestData;                                  // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentProgressCount;                              // 0x0600(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentTier;                                       // 0x0604(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsClaimable;                                      // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWQuestRewardInfo>             RewardItems;                                       // 0x0610(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x8];                                      // 0x0620(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClaimQuestReward();
	void OnDisplayFailedInfo();
	void OnQuestClaimed();
	void OnQuestInfoFail(bool bShouldSelfRemove);
	void OnUpdateQuestData(const class UHWQuest* QuestData);
	void UpdateCouponOwnership();
	void UpdateQuestData(const class UHWQuest* QuestData);
	void UpdateRewards();

	EHWQuestDisplayState GetCurrentState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerQuestDisplayWidget">();
	}
	static class UHWPlayerQuestDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerQuestDisplayWidget>();
	}
};
static_assert(alignof(UHWPlayerQuestDisplayWidget) == 0x000008, "Wrong alignment on UHWPlayerQuestDisplayWidget");
static_assert(sizeof(UHWPlayerQuestDisplayWidget) == 0x000628, "Wrong size on UHWPlayerQuestDisplayWidget");
static_assert(offsetof(UHWPlayerQuestDisplayWidget, CurrentQuestData) == 0x0005F8, "Member 'UHWPlayerQuestDisplayWidget::CurrentQuestData' has a wrong offset!");
static_assert(offsetof(UHWPlayerQuestDisplayWidget, CurrentProgressCount) == 0x000600, "Member 'UHWPlayerQuestDisplayWidget::CurrentProgressCount' has a wrong offset!");
static_assert(offsetof(UHWPlayerQuestDisplayWidget, CurrentTier) == 0x000604, "Member 'UHWPlayerQuestDisplayWidget::CurrentTier' has a wrong offset!");
static_assert(offsetof(UHWPlayerQuestDisplayWidget, bIsClaimable) == 0x000608, "Member 'UHWPlayerQuestDisplayWidget::bIsClaimable' has a wrong offset!");
static_assert(offsetof(UHWPlayerQuestDisplayWidget, RewardItems) == 0x000610, "Member 'UHWPlayerQuestDisplayWidget::RewardItems' has a wrong offset!");

// Class HemingwayUI.HWGameplayAttributeLevelXPWidget
// 0x0000 (0x0618 - 0x0618)
class UHWGameplayAttributeLevelXPWidget : public UHWGameplayAttributeWidget
{
public:
	void UpdateLevelDisplay(int32 Level);
	void UpdateRequiredEXPForLevel(int32 CurrentLevel);

	class UHWGameplayAttributeProgressBar* GetProgressBarAttributeWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayAttributeLevelXPWidget">();
	}
	static class UHWGameplayAttributeLevelXPWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayAttributeLevelXPWidget>();
	}
};
static_assert(alignof(UHWGameplayAttributeLevelXPWidget) == 0x000008, "Wrong alignment on UHWGameplayAttributeLevelXPWidget");
static_assert(sizeof(UHWGameplayAttributeLevelXPWidget) == 0x000618, "Wrong size on UHWGameplayAttributeLevelXPWidget");

// Class HemingwayUI.HWStoreChestContentEntry
// 0x0000 (0x0668 - 0x0668)
class UHWStoreChestContentEntry : public UHWStoreItemDisplayWidget
{
public:
	void OnInventoryUpdated(const TArray<int32>& UpdatedInventoryIds, class URH_PlayerInfo* PlayerInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreChestContentEntry">();
	}
	static class UHWStoreChestContentEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreChestContentEntry>();
	}
};
static_assert(alignof(UHWStoreChestContentEntry) == 0x000008, "Wrong alignment on UHWStoreChestContentEntry");
static_assert(sizeof(UHWStoreChestContentEntry) == 0x000668, "Wrong size on UHWStoreChestContentEntry");

// Class HemingwayUI.HWSettingsMenuWidget
// 0x00B8 (0x06B0 - 0x05F8)
class UHWSettingsMenuWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWTabBarWidget*                        TabBar;                                            // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWVerticalBox*                         SettingsContainer;                                 // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWKeyBinderWidget*                     KeyBinderWidget;                                   // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWSettingsMenuConfigAsset*             SettingsConfiguration;                             // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           SaveApplyInputAction;                              // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           ExitInputAction;                                   // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           RevertToDefaultsInputAction;                       // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_638[0x10];                                     // 0x0638(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   UnappliedSettingsPopupHeader;                      // 0x0648(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnappliedSettingsPopupDescription;                 // 0x0660(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnappliedSettingsDiscardLabel;                     // 0x0678(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   UnappliedSettingsApplyLabel;                       // 0x0690(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnApplyAndSave();
	void OnApplySettings();
	void OnCloseSettings();
	void OnDiscardChanges();
	void OnRevertToDefaultsSettings();
	void OnSaveSettings();
	void OnSettingHovered(const bool IsHovered_0, const class UHWSettingsConfigAsset* SettingConfig);
	void SetActiveSettingsGroup(class UHWTabBarWidget* TabBarWidget, int32 Index_0, EHWTabChangeCause Cause);
	void SetAvailableActions(bool bSave, bool bApply, bool bRevert);
	void SetSectionData(const class FText& Text, bool bKeyBindsTab);

	bool HasUnappliedSettings() const;
	bool HasUnsavedSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSettingsMenuWidget">();
	}
	static class UHWSettingsMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSettingsMenuWidget>();
	}
};
static_assert(alignof(UHWSettingsMenuWidget) == 0x000008, "Wrong alignment on UHWSettingsMenuWidget");
static_assert(sizeof(UHWSettingsMenuWidget) == 0x0006B0, "Wrong size on UHWSettingsMenuWidget");
static_assert(offsetof(UHWSettingsMenuWidget, TabBar) == 0x000600, "Member 'UHWSettingsMenuWidget::TabBar' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, SettingsContainer) == 0x000608, "Member 'UHWSettingsMenuWidget::SettingsContainer' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, KeyBinderWidget) == 0x000610, "Member 'UHWSettingsMenuWidget::KeyBinderWidget' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, SettingsConfiguration) == 0x000618, "Member 'UHWSettingsMenuWidget::SettingsConfiguration' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, SaveApplyInputAction) == 0x000620, "Member 'UHWSettingsMenuWidget::SaveApplyInputAction' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, ExitInputAction) == 0x000628, "Member 'UHWSettingsMenuWidget::ExitInputAction' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, RevertToDefaultsInputAction) == 0x000630, "Member 'UHWSettingsMenuWidget::RevertToDefaultsInputAction' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, UnappliedSettingsPopupHeader) == 0x000648, "Member 'UHWSettingsMenuWidget::UnappliedSettingsPopupHeader' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, UnappliedSettingsPopupDescription) == 0x000660, "Member 'UHWSettingsMenuWidget::UnappliedSettingsPopupDescription' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, UnappliedSettingsDiscardLabel) == 0x000678, "Member 'UHWSettingsMenuWidget::UnappliedSettingsDiscardLabel' has a wrong offset!");
static_assert(offsetof(UHWSettingsMenuWidget, UnappliedSettingsApplyLabel) == 0x000690, "Member 'UHWSettingsMenuWidget::UnappliedSettingsApplyLabel' has a wrong offset!");

// Class HemingwayUI.HWStoreChestEntry
// 0x0040 (0x06A8 - 0x0668)
class UHWStoreChestEntry : public UHWStoreItemDisplayWidget
{
public:
	TArray<class URHStoreItem*>                   ChestChanceItems;                                  // 0x0668(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class URHStoreItem*>                   StoreItems;                                        // 0x0678(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class URHStoreItem>            ChestStoreItem;                                    // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_690[0x18];                                     // 0x0690(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInventoryUpdated(const TArray<int32>& UpdatedInventoryIds, class URH_PlayerInfo* PlayerInfo);
	void OnStoreItemsLoaded();
	void OnUpdateOwnershipCount(int32 CurrentOwnedCount, int32 TotalCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreChestEntry">();
	}
	static class UHWStoreChestEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreChestEntry>();
	}
};
static_assert(alignof(UHWStoreChestEntry) == 0x000008, "Wrong alignment on UHWStoreChestEntry");
static_assert(sizeof(UHWStoreChestEntry) == 0x0006A8, "Wrong size on UHWStoreChestEntry");
static_assert(offsetof(UHWStoreChestEntry, ChestChanceItems) == 0x000668, "Member 'UHWStoreChestEntry::ChestChanceItems' has a wrong offset!");
static_assert(offsetof(UHWStoreChestEntry, StoreItems) == 0x000678, "Member 'UHWStoreChestEntry::StoreItems' has a wrong offset!");
static_assert(offsetof(UHWStoreChestEntry, ChestStoreItem) == 0x000688, "Member 'UHWStoreChestEntry::ChestStoreItem' has a wrong offset!");

// Class HemingwayUI.HWPlayerAvatarDisplayWidget
// 0x0038 (0x0630 - 0x05F8)
class UHWPlayerAvatarDisplayWidget : public UHWWidget
{
public:
	bool                                          bShowLocal;                                        // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             DefaultTexture;                                    // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x10];                                     // 0x0608(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrentAvatarItemId;                               // 0x0618(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadPlayerInfo(class URH_PlayerInfo* InPlayerInfo);
	void OnAvatarItemLoad();
	void OnClearAvatar();
	void OnLocalLoadoutChange(const struct FHWPlayerLoadout& InPlayerLoadout);
	void OnRecieveRemotePlayerLoadout(bool bSuccess, const struct FHWPlayerLoadout& InPlayerLoadout);
	void OnUpdateAvatarItem(const class UHWCollectionItem* AvatarItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerAvatarDisplayWidget">();
	}
	static class UHWPlayerAvatarDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerAvatarDisplayWidget>();
	}
};
static_assert(alignof(UHWPlayerAvatarDisplayWidget) == 0x000008, "Wrong alignment on UHWPlayerAvatarDisplayWidget");
static_assert(sizeof(UHWPlayerAvatarDisplayWidget) == 0x000630, "Wrong size on UHWPlayerAvatarDisplayWidget");
static_assert(offsetof(UHWPlayerAvatarDisplayWidget, bShowLocal) == 0x0005F8, "Member 'UHWPlayerAvatarDisplayWidget::bShowLocal' has a wrong offset!");
static_assert(offsetof(UHWPlayerAvatarDisplayWidget, DefaultTexture) == 0x000600, "Member 'UHWPlayerAvatarDisplayWidget::DefaultTexture' has a wrong offset!");
static_assert(offsetof(UHWPlayerAvatarDisplayWidget, CurrentAvatarItemId) == 0x000618, "Member 'UHWPlayerAvatarDisplayWidget::CurrentAvatarItemId' has a wrong offset!");

// Class HemingwayUI.HWContextBarWidget
// 0x0028 (0x0288 - 0x0260)
class UHWContextBarWidget final : public UDynamicEntryBoxBase
{
public:
	uint8                                         Pad_260[0x8];                                      // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        FilteredWidgets;                                   // 0x0268(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWMultiPromptWidget>       PromptClass;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         BackActionPriority;                                // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         SelectActionPriority;                              // 0x0281(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnoreDuplicateActions;                           // 0x0282(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_283[0x5];                                      // 0x0283(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWContextBarWidget">();
	}
	static class UHWContextBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWContextBarWidget>();
	}
};
static_assert(alignof(UHWContextBarWidget) == 0x000008, "Wrong alignment on UHWContextBarWidget");
static_assert(sizeof(UHWContextBarWidget) == 0x000288, "Wrong size on UHWContextBarWidget");
static_assert(offsetof(UHWContextBarWidget, FilteredWidgets) == 0x000268, "Member 'UHWContextBarWidget::FilteredWidgets' has a wrong offset!");
static_assert(offsetof(UHWContextBarWidget, PromptClass) == 0x000278, "Member 'UHWContextBarWidget::PromptClass' has a wrong offset!");
static_assert(offsetof(UHWContextBarWidget, BackActionPriority) == 0x000280, "Member 'UHWContextBarWidget::BackActionPriority' has a wrong offset!");
static_assert(offsetof(UHWContextBarWidget, SelectActionPriority) == 0x000281, "Member 'UHWContextBarWidget::SelectActionPriority' has a wrong offset!");
static_assert(offsetof(UHWContextBarWidget, bIgnoreDuplicateActions) == 0x000282, "Member 'UHWContextBarWidget::bIgnoreDuplicateActions' has a wrong offset!");

// Class HemingwayUI.HWStoreChestsScreen
// 0x00B0 (0x06A8 - 0x05F8)
class UHWStoreChestsScreen : public UHWWidget
{
public:
	TArray<class URHStoreItem*>                   ChestItems;                                        // 0x05F8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x10];                                     // 0x0608(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PurchaseActionBindingContainer;                    // 0x0618(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            SelectChestBindingContainer;                       // 0x0660(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A0[0x8];                                      // 0x06A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddChest(class URHStoreItem* ChestItem);
	void ClearChests();
	void GetChests();
	void OnActionPurchase();
	void OnChestsLoaded();
	void OnSelectChest();
	void ShowSelectChestPrompt(bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreChestsScreen">();
	}
	static class UHWStoreChestsScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreChestsScreen>();
	}
};
static_assert(alignof(UHWStoreChestsScreen) == 0x000008, "Wrong alignment on UHWStoreChestsScreen");
static_assert(sizeof(UHWStoreChestsScreen) == 0x0006A8, "Wrong size on UHWStoreChestsScreen");
static_assert(offsetof(UHWStoreChestsScreen, ChestItems) == 0x0005F8, "Member 'UHWStoreChestsScreen::ChestItems' has a wrong offset!");
static_assert(offsetof(UHWStoreChestsScreen, PurchaseActionBindingContainer) == 0x000618, "Member 'UHWStoreChestsScreen::PurchaseActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWStoreChestsScreen, SelectChestBindingContainer) == 0x000660, "Member 'UHWStoreChestsScreen::SelectChestBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWPortalOfferDisplayWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWPortalOfferDisplayWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class URHPortalOffer>          PortalOffer;                                       // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWPurchaseSaleDisplayWidget*           SaleWidget;                                        // 0x0600(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetPortalOffer(class URHPortalOffer* InPortalOffer);

	class URHPortalOffer* GetPortalOffer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPortalOfferDisplayWidget">();
	}
	static class UHWPortalOfferDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPortalOfferDisplayWidget>();
	}
};
static_assert(alignof(UHWPortalOfferDisplayWidget) == 0x000008, "Wrong alignment on UHWPortalOfferDisplayWidget");
static_assert(sizeof(UHWPortalOfferDisplayWidget) == 0x000608, "Wrong size on UHWPortalOfferDisplayWidget");
static_assert(offsetof(UHWPortalOfferDisplayWidget, PortalOffer) == 0x0005F8, "Member 'UHWPortalOfferDisplayWidget::PortalOffer' has a wrong offset!");
static_assert(offsetof(UHWPortalOfferDisplayWidget, SaleWidget) == 0x000600, "Member 'UHWPortalOfferDisplayWidget::SaleWidget' has a wrong offset!");

// Class HemingwayUI.HWStoreScreenWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWStoreScreenWidget : public UHWWidget
{
public:
	class UHWWidgetSwitcher*                      StoreWidgetSwitcher;                               // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             StoreTabsTable;                                    // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTabBarWidget*                        TabBar;                                            // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleSelectedTabChanged(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause);
	void OnStoreTabChanged(class UHWWidget* NewWidget, const struct FHWStoreScreenTabRow& WidgetConfig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreScreenWidget">();
	}
	static class UHWStoreScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreScreenWidget>();
	}
};
static_assert(alignof(UHWStoreScreenWidget) == 0x000008, "Wrong alignment on UHWStoreScreenWidget");
static_assert(sizeof(UHWStoreScreenWidget) == 0x000610, "Wrong size on UHWStoreScreenWidget");
static_assert(offsetof(UHWStoreScreenWidget, StoreWidgetSwitcher) == 0x0005F8, "Member 'UHWStoreScreenWidget::StoreWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(UHWStoreScreenWidget, StoreTabsTable) == 0x000600, "Member 'UHWStoreScreenWidget::StoreTabsTable' has a wrong offset!");
static_assert(offsetof(UHWStoreScreenWidget, TabBar) == 0x000608, "Member 'UHWStoreScreenWidget::TabBar' has a wrong offset!");

// Class HemingwayUI.HWTileView
// 0x0000 (0x0CA0 - 0x0CA0)
class UHWTileView final : public UTileView
{
public:
	class UHWWidget* GetEntryWidgetFromItem(const class UObject* Item) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTileView">();
	}
	static class UHWTileView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTileView>();
	}
};
static_assert(alignof(UHWTileView) == 0x000010, "Wrong alignment on UHWTileView");
static_assert(sizeof(UHWTileView) == 0x000CA0, "Wrong size on UHWTileView");

// Class HemingwayUI.HWStoreLowScopeDeals
// 0x0108 (0x0700 - 0x05F8)
class UHWStoreLowScopeDeals : public UHWWidget
{
public:
	TSubclassOf<class UHWStoreItemDisplayWidget>  DisplayWidgetClass;                                // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWStoreItemDisplayWidget*>      StoreItemWidgets;                                  // 0x0600(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsDisplayedItemOwned;                             // 0x0610(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWStoreItemDisplayWidget> DisplayedItemWidget;                             // 0x0614(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PracticeMapTag;                                    // 0x0620(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            EnterPracticeBinding;                              // 0x0628(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            CycleItemContentsBinding;                          // 0x0670(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PreviewSkinVoiceBindingContainer;                  // 0x06B8(0x0040)(Edit, BlueprintVisible, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x8];                                      // 0x06F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayGridLoadingState(bool bIsLoading);
	void DisplayItemLoadingState(bool bIsLoading);
	void DisplayStoreItemWidgets(const TArray<class UHWStoreItemDisplayWidget*>& Widgets);
	void HandlePreviewSkinVoiceAction();
	void HandleSelectedStoreItemWidget(class UHWStoreItemDisplayWidget* InWidget, bool bIsSelected);
	void OnDisplayItem(class UHWInventoryItem* Item);
	void OnDisplayPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void PurchaseDisplayedItem();
	void UpdateDisplayedItemsState();

	bool CanPurchaseDisplayedItem() const;
	class UHWStoreItemDisplayWidget* GetDisplayedItemWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreLowScopeDeals">();
	}
	static class UHWStoreLowScopeDeals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreLowScopeDeals>();
	}
};
static_assert(alignof(UHWStoreLowScopeDeals) == 0x000008, "Wrong alignment on UHWStoreLowScopeDeals");
static_assert(sizeof(UHWStoreLowScopeDeals) == 0x000700, "Wrong size on UHWStoreLowScopeDeals");
static_assert(offsetof(UHWStoreLowScopeDeals, DisplayWidgetClass) == 0x0005F8, "Member 'UHWStoreLowScopeDeals::DisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, StoreItemWidgets) == 0x000600, "Member 'UHWStoreLowScopeDeals::StoreItemWidgets' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, bIsDisplayedItemOwned) == 0x000610, "Member 'UHWStoreLowScopeDeals::bIsDisplayedItemOwned' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, DisplayedItemWidget) == 0x000614, "Member 'UHWStoreLowScopeDeals::DisplayedItemWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, PracticeMapTag) == 0x000620, "Member 'UHWStoreLowScopeDeals::PracticeMapTag' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, EnterPracticeBinding) == 0x000628, "Member 'UHWStoreLowScopeDeals::EnterPracticeBinding' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, CycleItemContentsBinding) == 0x000670, "Member 'UHWStoreLowScopeDeals::CycleItemContentsBinding' has a wrong offset!");
static_assert(offsetof(UHWStoreLowScopeDeals, PreviewSkinVoiceBindingContainer) == 0x0006B8, "Member 'UHWStoreLowScopeDeals::PreviewSkinVoiceBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWStoreSupporterScreen
// 0x01E8 (0x07E0 - 0x05F8)
class UHWStoreSupporterScreen : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWStoreItemDisplayWidget*>      StoreItemWidgets;                                  // 0x0608(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWStoreItemDisplayWidget>  DisplayWidgetClass;                                // 0x0618(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UHWStoreItemDisplayWidget*, EHWSupporterStoreDisplayType> DisplayTypeMap;             // 0x0620(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	EHWSupporterStoreDisplayType                  SelectedDisplayType;                               // 0x0670(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDisplayedItemOwned;                             // 0x0671(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_672[0x2];                                      // 0x0672(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWStoreItemDisplayWidget> DisplayedItemWidget;                             // 0x0674(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWItemDisplayWidget*                   SelectedColorEntryWidget;                          // 0x0680(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   PlayerNameColorCollectionGrid;                     // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   EquippedColorEntryWidget;                          // 0x0690(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   QuipCollectionGrid;                                // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SelectedQuipEntryWidget;                           // 0x06A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   TeleportCollectionGrid;                            // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SelectedTeleportEntryWidget;                       // 0x06B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   MixedBundleCollectionGrid;                         // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   SelectedMixedBundleEntryWidget;                    // 0x06C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PurchaseBindingContainer;                          // 0x06C8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            GoToBindingContainer;                              // 0x0708(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PreviewLeftBindingContainer;                       // 0x0750(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_790[0x8];                                      // 0x0790(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            PreviewRightBindingContainer;                      // 0x0798(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D8[0x8];                                      // 0x07D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddStoreItemWidget(class UHWStoreItemDisplayWidget* Widget, EHWSupporterStoreDisplayType DisplayType);
	void DisplayGridLoadingState(bool bIsLoading);
	void DisplayItemLoadingState(bool bIsLoading);
	void HandleColorEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleColorEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleMixedBundleEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleMixedBundleEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleQuipEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleQuipEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleSelectedStoreItemWidget(class UHWStoreItemDisplayWidget* InWidget, bool bIsSelected);
	void HandleTeleportEntryButtonHovered(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleTeleportEntryButtonSelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void NavigateGridLeft();
	void NavigateGridRight();
	void OnDisplayItem(class UHWInventoryItem* Item);
	void OnDisplayPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);
	void OnItemsLoaded();
	void OnPreviewMixedBundle(const class UHWCollectionItem* MixedBundleItem);
	void OnPreviewPlayerNameColor(const class UHWCollectionItem* CollectionItem);
	void OnPreviewQuip(const class UHWCollectionItem* QuipItem);
	void OnPreviewTeleport(const class UHWCollectionItem* TeleportItem);
	void OnUpdateColorGridVisibility(bool bShow);
	void OnUpdateMixedBundleVisibility(bool bShow, class URHStoreItem* StoreItem);
	void OnUpdateQuipGridVisibility(bool bShow);
	void OnUpdateTeleportVisibility(bool bShow);
	void OnUpdateVGSVisibility(bool bShow);
	void PurchaseDisplayedItem();
	void RegisterBindingContainer(bool bIsPurchase);
	void UpdateColorGrid(const TArray<class UHWCollectionItem*>& ColorCollectionItems);
	void UpdateDisplayedItemsState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreSupporterScreen">();
	}
	static class UHWStoreSupporterScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreSupporterScreen>();
	}
};
static_assert(alignof(UHWStoreSupporterScreen) == 0x000008, "Wrong alignment on UHWStoreSupporterScreen");
static_assert(sizeof(UHWStoreSupporterScreen) == 0x0007E0, "Wrong size on UHWStoreSupporterScreen");
static_assert(offsetof(UHWStoreSupporterScreen, StoreItemWidgets) == 0x000608, "Member 'UHWStoreSupporterScreen::StoreItemWidgets' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, DisplayWidgetClass) == 0x000618, "Member 'UHWStoreSupporterScreen::DisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, DisplayTypeMap) == 0x000620, "Member 'UHWStoreSupporterScreen::DisplayTypeMap' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, SelectedDisplayType) == 0x000670, "Member 'UHWStoreSupporterScreen::SelectedDisplayType' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, bIsDisplayedItemOwned) == 0x000671, "Member 'UHWStoreSupporterScreen::bIsDisplayedItemOwned' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, DisplayedItemWidget) == 0x000674, "Member 'UHWStoreSupporterScreen::DisplayedItemWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, SelectedColorEntryWidget) == 0x000680, "Member 'UHWStoreSupporterScreen::SelectedColorEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, PlayerNameColorCollectionGrid) == 0x000688, "Member 'UHWStoreSupporterScreen::PlayerNameColorCollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, EquippedColorEntryWidget) == 0x000690, "Member 'UHWStoreSupporterScreen::EquippedColorEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, QuipCollectionGrid) == 0x000698, "Member 'UHWStoreSupporterScreen::QuipCollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, SelectedQuipEntryWidget) == 0x0006A0, "Member 'UHWStoreSupporterScreen::SelectedQuipEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, TeleportCollectionGrid) == 0x0006A8, "Member 'UHWStoreSupporterScreen::TeleportCollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, SelectedTeleportEntryWidget) == 0x0006B0, "Member 'UHWStoreSupporterScreen::SelectedTeleportEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, MixedBundleCollectionGrid) == 0x0006B8, "Member 'UHWStoreSupporterScreen::MixedBundleCollectionGrid' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, SelectedMixedBundleEntryWidget) == 0x0006C0, "Member 'UHWStoreSupporterScreen::SelectedMixedBundleEntryWidget' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, PurchaseBindingContainer) == 0x0006C8, "Member 'UHWStoreSupporterScreen::PurchaseBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, GoToBindingContainer) == 0x000708, "Member 'UHWStoreSupporterScreen::GoToBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, PreviewLeftBindingContainer) == 0x000750, "Member 'UHWStoreSupporterScreen::PreviewLeftBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWStoreSupporterScreen, PreviewRightBindingContainer) == 0x000798, "Member 'UHWStoreSupporterScreen::PreviewRightBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWHUDEditorEditableEntryCustomField
// 0x0010 (0x0608 - 0x05F8)
class UHWHUDEditorEditableEntryCustomField : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWUIStyleLocalModifierWidget> LocalModifierWidget;                         // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeWithCustomModifier(class UHWUIStyleLocalModifierWidget* InLocalModifierWidget, const struct FHWUIStyleLocalCustomModifier& CustomModifier);
	void LoadPresetCustomField(const struct FHWHUDEditorLayoutCustomModifier& CustomModifier);
	void SetCustomFieldValue(float Value);

	float GetCustomFieldValue() const;
	class FName GetCustomModifierName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorEditableEntryCustomField">();
	}
	static class UHWHUDEditorEditableEntryCustomField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorEditableEntryCustomField>();
	}
};
static_assert(alignof(UHWHUDEditorEditableEntryCustomField) == 0x000008, "Wrong alignment on UHWHUDEditorEditableEntryCustomField");
static_assert(sizeof(UHWHUDEditorEditableEntryCustomField) == 0x000608, "Wrong size on UHWHUDEditorEditableEntryCustomField");
static_assert(offsetof(UHWHUDEditorEditableEntryCustomField, LocalModifierWidget) == 0x0005F8, "Member 'UHWHUDEditorEditableEntryCustomField::LocalModifierWidget' has a wrong offset!");

// Class HemingwayUI.HWHUDEditorEditableEntryDropDown
// 0x0000 (0x0608 - 0x0608)
class UHWHUDEditorEditableEntryDropDown : public UHWHUDEditorEditableEntryCustomField
{
public:
	void DisplayedSelectedOptionIndex(int32 SelectedOptionIndex);
	void DisplayFieldName(const class FText& FieldName);
	void DisplayOptions(const TArray<class FText>& Options);
	void SelectOptionIndex(int32 NewOptionIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorEditableEntryDropDown">();
	}
	static class UHWHUDEditorEditableEntryDropDown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorEditableEntryDropDown>();
	}
};
static_assert(alignof(UHWHUDEditorEditableEntryDropDown) == 0x000008, "Wrong alignment on UHWHUDEditorEditableEntryDropDown");
static_assert(sizeof(UHWHUDEditorEditableEntryDropDown) == 0x000608, "Wrong size on UHWHUDEditorEditableEntryDropDown");

// Class HemingwayUI.HWStoreVIPScreen
// 0x0078 (0x0670 - 0x05F8)
class UHWStoreVIPScreen : public UHWWidget
{
public:
	TSoftObjectPtr<class UHWCollectionItem>       VIPBaseItem;                                       // 0x05F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PurchaseBindingContainer;                          // 0x0620(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0x10];                                     // 0x0660(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePurchaseButtonClicked();
	void UpdateExpirationText(const struct FDateTime& ExpirationTime);
	void UpdatePurchaseButton(EHWVIPOwnershipLevel VIPOwnership, class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroupTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreVIPScreen">();
	}
	static class UHWStoreVIPScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreVIPScreen>();
	}
};
static_assert(alignof(UHWStoreVIPScreen) == 0x000008, "Wrong alignment on UHWStoreVIPScreen");
static_assert(sizeof(UHWStoreVIPScreen) == 0x000670, "Wrong size on UHWStoreVIPScreen");
static_assert(offsetof(UHWStoreVIPScreen, VIPBaseItem) == 0x0005F8, "Member 'UHWStoreVIPScreen::VIPBaseItem' has a wrong offset!");
static_assert(offsetof(UHWStoreVIPScreen, PurchaseBindingContainer) == 0x000620, "Member 'UHWStoreVIPScreen::PurchaseBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWGodAbilityOverview
// 0x0060 (0x0658 - 0x05F8)
class UHWGodAbilityOverview : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWSortableGridPanel*                   AbilityGrid;                                       // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Ability*               AbilityDescriptionWidget;                          // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAbilityEntryWidget*               BasicAttackWidget;                                 // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAbilityEntryWidget*               PassiveWidget;                                     // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodAbilityEntryWidget>   GodAbilityEntryWidgetClass;                        // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GodAbilityCount;                                   // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWGodAbilityEntryWidget*>       VisibleAbilityEntries;                             // 0x0638(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_650[0x8];                                      // 0x0650(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CycleAbilitySelection(bool bGoNext);
	void OnSelectAbility(const class UHWGodAbilityEntryWidget* AbilityEntry);
	void OnSetGodItem();
	void SetGodItem(const class UHWCharacterItem* InGodItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAbilityOverview">();
	}
	static class UHWGodAbilityOverview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAbilityOverview>();
	}
};
static_assert(alignof(UHWGodAbilityOverview) == 0x000008, "Wrong alignment on UHWGodAbilityOverview");
static_assert(sizeof(UHWGodAbilityOverview) == 0x000658, "Wrong size on UHWGodAbilityOverview");
static_assert(offsetof(UHWGodAbilityOverview, AbilityGrid) == 0x000608, "Member 'UHWGodAbilityOverview::AbilityGrid' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, AbilityDescriptionWidget) == 0x000610, "Member 'UHWGodAbilityOverview::AbilityDescriptionWidget' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, BasicAttackWidget) == 0x000618, "Member 'UHWGodAbilityOverview::BasicAttackWidget' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, PassiveWidget) == 0x000620, "Member 'UHWGodAbilityOverview::PassiveWidget' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, GodAbilityEntryWidgetClass) == 0x000628, "Member 'UHWGodAbilityOverview::GodAbilityEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, GodAbilityCount) == 0x000630, "Member 'UHWGodAbilityOverview::GodAbilityCount' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, VisibleAbilityEntries) == 0x000638, "Member 'UHWGodAbilityOverview::VisibleAbilityEntries' has a wrong offset!");
static_assert(offsetof(UHWGodAbilityOverview, GodItem) == 0x000648, "Member 'UHWGodAbilityOverview::GodItem' has a wrong offset!");

// Class HemingwayUI.HWDebug_GeneralWidget
// 0x00B8 (0x06F8 - 0x0640)
class UHWDebug_GeneralWidget : public UHWDebugBaseWidget
{
public:
	int32                                         MaxLevel;                                          // 0x0640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PantheonList;                                      // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class UHWCharacterItem*, class FString>  GodMap;                                            // 0x0658(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FString>            SkinNames;                                         // 0x06A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void LoadSkinNames(const class UHWCharacterItem* Character);
	void SetAbilityCastStyle(EAbilityCastStyle AbilityCastStyle);
	void SetCharacter(const class UHWCharacterItem* Character, const class FString& SkinName);
	void SetMaxLevel();

	TArray<class FName> GetDevHUDNames() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_GeneralWidget">();
	}
	static class UHWDebug_GeneralWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_GeneralWidget>();
	}
};
static_assert(alignof(UHWDebug_GeneralWidget) == 0x000008, "Wrong alignment on UHWDebug_GeneralWidget");
static_assert(sizeof(UHWDebug_GeneralWidget) == 0x0006F8, "Wrong size on UHWDebug_GeneralWidget");
static_assert(offsetof(UHWDebug_GeneralWidget, MaxLevel) == 0x000640, "Member 'UHWDebug_GeneralWidget::MaxLevel' has a wrong offset!");
static_assert(offsetof(UHWDebug_GeneralWidget, PantheonList) == 0x000648, "Member 'UHWDebug_GeneralWidget::PantheonList' has a wrong offset!");
static_assert(offsetof(UHWDebug_GeneralWidget, GodMap) == 0x000658, "Member 'UHWDebug_GeneralWidget::GodMap' has a wrong offset!");
static_assert(offsetof(UHWDebug_GeneralWidget, SkinNames) == 0x0006A8, "Member 'UHWDebug_GeneralWidget::SkinNames' has a wrong offset!");

// Class HemingwayUI.HWCharacterHealthWidget
// 0x0010 (0x0628 - 0x0618)
class UHWCharacterHealthWidget : public UHWGameplayAttributeWidget
{
public:
	TMulticastInlineDelegate<void(float CurrentHealth, float MaxHealth)> OnHealthValuesUpdated;      // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void UpdateCurrentHealth(float OldHealth, float NewHealth, bool bShouldAnimate);
	void UpdateMaxHealth(float OldMaxHealth, float NewMaxHealth, bool bShouldAnimate);

	float GetCurrentHealth() const;
	float GetMaxHealth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterHealthWidget">();
	}
	static class UHWCharacterHealthWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterHealthWidget>();
	}
};
static_assert(alignof(UHWCharacterHealthWidget) == 0x000008, "Wrong alignment on UHWCharacterHealthWidget");
static_assert(sizeof(UHWCharacterHealthWidget) == 0x000628, "Wrong size on UHWCharacterHealthWidget");
static_assert(offsetof(UHWCharacterHealthWidget, OnHealthValuesUpdated) == 0x000618, "Member 'UHWCharacterHealthWidget::OnHealthValuesUpdated' has a wrong offset!");

// Class HemingwayUI.HWDebug_GodHUDWidget
// 0x0008 (0x0648 - 0x0640)
class UHWDebug_GodHUDWidget : public UHWDebugBaseWidget
{
public:
	struct FGameplayTag                           AttributeTag;                                      // 0x0640(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<struct FGameplayTag> GetDebugGameplayTags();
	struct FGameplayTag GetGameplayTagByName(const class FString& TagString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_GodHUDWidget">();
	}
	static class UHWDebug_GodHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_GodHUDWidget>();
	}
};
static_assert(alignof(UHWDebug_GodHUDWidget) == 0x000008, "Wrong alignment on UHWDebug_GodHUDWidget");
static_assert(sizeof(UHWDebug_GodHUDWidget) == 0x000648, "Wrong size on UHWDebug_GodHUDWidget");
static_assert(offsetof(UHWDebug_GodHUDWidget, AttributeTag) == 0x000640, "Member 'UHWDebug_GodHUDWidget::AttributeTag' has a wrong offset!");

// Class HemingwayUI.HWSystemWarningsWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWSystemWarningsWidget : public UHWWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSystemWarningsWidget">();
	}
	static class UHWSystemWarningsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSystemWarningsWidget>();
	}
};
static_assert(alignof(UHWSystemWarningsWidget) == 0x000008, "Wrong alignment on UHWSystemWarningsWidget");
static_assert(sizeof(UHWSystemWarningsWidget) == 0x0005F8, "Wrong size on UHWSystemWarningsWidget");

// Class HemingwayUI.HWTabViewerWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWTabViewerWidget : public UHWWidget
{
public:
	class UDataTable*                             ViewsTable;                                        // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      ViewSwitcher;                                      // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           TabContainer;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  TabWidgetClass;                                    // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ActiveTabViewName;                                 // 0x0618(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DefaultTabViewName;                                // 0x0620(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWWidget*>   ViewWidgetMap;                                     // 0x0628(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWTabEntryWidget*>              TabWidgets;                                        // 0x0678(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void ChangeTabView(const struct FGameplayTag& TabViewName);
	void ClearTabViews();
	void CreateTabViews();
	void OnTabViewAdded(const struct FGameplayTag& TabViewName, class UHWTabEntryWidget* TabEntry, class UHWWidget* TabViewWidget);
	void OnTabViewChanged(const struct FGameplayTag& PreviousTabViewName, const struct FGameplayTag& NewTabViewName);

	class UHWWidget* GetCurrentTabViewWidget() const;
	TArray<class UHWTabEntryWidget*> GetTabEntries() const;
	class UHWTabEntryWidget* GetTabEntry(const struct FGameplayTag& TabViewTag) const;
	TArray<class FName> GetTabViewNames() const;
	void GetTabViewWidgets(TArray<class UHWWidget*>* ViewWidgets) const;
	void SortTabViewNames(TArray<class FName>* TabViewNames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTabViewerWidget">();
	}
	static class UHWTabViewerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTabViewerWidget>();
	}
};
static_assert(alignof(UHWTabViewerWidget) == 0x000008, "Wrong alignment on UHWTabViewerWidget");
static_assert(sizeof(UHWTabViewerWidget) == 0x000688, "Wrong size on UHWTabViewerWidget");
static_assert(offsetof(UHWTabViewerWidget, ViewsTable) == 0x0005F8, "Member 'UHWTabViewerWidget::ViewsTable' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, ViewSwitcher) == 0x000600, "Member 'UHWTabViewerWidget::ViewSwitcher' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, TabContainer) == 0x000608, "Member 'UHWTabViewerWidget::TabContainer' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, TabWidgetClass) == 0x000610, "Member 'UHWTabViewerWidget::TabWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, ActiveTabViewName) == 0x000618, "Member 'UHWTabViewerWidget::ActiveTabViewName' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, DefaultTabViewName) == 0x000620, "Member 'UHWTabViewerWidget::DefaultTabViewName' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, ViewWidgetMap) == 0x000628, "Member 'UHWTabViewerWidget::ViewWidgetMap' has a wrong offset!");
static_assert(offsetof(UHWTabViewerWidget, TabWidgets) == 0x000678, "Member 'UHWTabViewerWidget::TabWidgets' has a wrong offset!");

// Class HemingwayUI.HWPassiveMeterWidgetManager
// 0x0028 (0x0660 - 0x0638)
class UHWPassiveMeterWidgetManager : public UHWCharacterWidget
{
public:
	class UHWPassiveMeterConfig*                  ConfigAsset;                                       // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWPassiveMeterWidget*                  ActivePassiveMeterWidget;                          // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCanvasPanel*                         PassiveMeterCanvas;                                // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePassiveMeterComponentChanged(class AHWCharacterAbilitySystemActor* ABSActor, class UHWPassiveMeterComponent* NewPassiveMeterComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPassiveMeterWidgetManager">();
	}
	static class UHWPassiveMeterWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPassiveMeterWidgetManager>();
	}
};
static_assert(alignof(UHWPassiveMeterWidgetManager) == 0x000008, "Wrong alignment on UHWPassiveMeterWidgetManager");
static_assert(sizeof(UHWPassiveMeterWidgetManager) == 0x000660, "Wrong size on UHWPassiveMeterWidgetManager");
static_assert(offsetof(UHWPassiveMeterWidgetManager, ConfigAsset) == 0x000638, "Member 'UHWPassiveMeterWidgetManager::ConfigAsset' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidgetManager, ActivePassiveMeterWidget) == 0x000640, "Member 'UHWPassiveMeterWidgetManager::ActivePassiveMeterWidget' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterWidgetManager, PassiveMeterCanvas) == 0x000648, "Member 'UHWPassiveMeterWidgetManager::PassiveMeterCanvas' has a wrong offset!");

// Class HemingwayUI.HWDebugHUDWidget
// 0x0028 (0x06B0 - 0x0688)
class UHWDebugHUDWidget : public UHWTabViewerWidget
{
public:
	class UHWDebugLoggerWidget*                   LoggerWidget;                                      // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DefaultPresetName;                                 // 0x0690(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDebugSavePreset>         DefaultPresetClass;                                // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWDebugSavePreset*                     LoadedPreset;                                      // 0x06A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UHWDebugSavePreset* CreateNewPreset(const class FString& PresetName);
	bool HandleCommandTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	bool LoadPreset(const class FString& PresetName, class UHWDebugSavePreset** OutLoadedPreset);
	void PresetChanged();
	void SavePreset(const class FString& PresetName);

	class UHWDebugSavePreset* GetLoadedPreset() const;
	class UHWCheatComponent* GetLocalCheatComponent() const;
	class UHWDebugLoggerWidget* GetLogger() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebugHUDWidget">();
	}
	static class UHWDebugHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebugHUDWidget>();
	}
};
static_assert(alignof(UHWDebugHUDWidget) == 0x000008, "Wrong alignment on UHWDebugHUDWidget");
static_assert(sizeof(UHWDebugHUDWidget) == 0x0006B0, "Wrong size on UHWDebugHUDWidget");
static_assert(offsetof(UHWDebugHUDWidget, LoggerWidget) == 0x000688, "Member 'UHWDebugHUDWidget::LoggerWidget' has a wrong offset!");
static_assert(offsetof(UHWDebugHUDWidget, DefaultPresetName) == 0x000690, "Member 'UHWDebugHUDWidget::DefaultPresetName' has a wrong offset!");
static_assert(offsetof(UHWDebugHUDWidget, DefaultPresetClass) == 0x0006A0, "Member 'UHWDebugHUDWidget::DefaultPresetClass' has a wrong offset!");
static_assert(offsetof(UHWDebugHUDWidget, LoadedPreset) == 0x0006A8, "Member 'UHWDebugHUDWidget::LoadedPreset' has a wrong offset!");

// Class HemingwayUI.HWDebugLoggerTextWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWDebugLoggerTextWidget : public UHWWidget
{
public:
	void DisplayString(const class FString& String);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebugLoggerTextWidget">();
	}
	static class UHWDebugLoggerTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebugLoggerTextWidget>();
	}
};
static_assert(alignof(UHWDebugLoggerTextWidget) == 0x000008, "Wrong alignment on UHWDebugLoggerTextWidget");
static_assert(sizeof(UHWDebugLoggerTextWidget) == 0x0005F8, "Wrong size on UHWDebugLoggerTextWidget");

// Class HemingwayUI.HWNavigationWidgetStitcher
// 0x0018 (0x0198 - 0x0180)
class UHWNavigationWidgetStitcher final : public UWidget
{
public:
	class UPanelWidget*                           ContainerToStitch;                                 // 0x0180(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWOrientation                                StitchOrientation;                                 // 0x0188(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRebuildNavigationOnInitialize;                    // 0x0189(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWGridNavigationRule                         NavigationRule;                                    // 0x018A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationRule                             RuleEdgeReached;                                   // 0x018B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C[0xC];                                      // 0x018C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildNavigation();
	void RequestNavigationRebuild();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWNavigationWidgetStitcher">();
	}
	static class UHWNavigationWidgetStitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWNavigationWidgetStitcher>();
	}
};
static_assert(alignof(UHWNavigationWidgetStitcher) == 0x000008, "Wrong alignment on UHWNavigationWidgetStitcher");
static_assert(sizeof(UHWNavigationWidgetStitcher) == 0x000198, "Wrong size on UHWNavigationWidgetStitcher");
static_assert(offsetof(UHWNavigationWidgetStitcher, ContainerToStitch) == 0x000180, "Member 'UHWNavigationWidgetStitcher::ContainerToStitch' has a wrong offset!");
static_assert(offsetof(UHWNavigationWidgetStitcher, StitchOrientation) == 0x000188, "Member 'UHWNavigationWidgetStitcher::StitchOrientation' has a wrong offset!");
static_assert(offsetof(UHWNavigationWidgetStitcher, bRebuildNavigationOnInitialize) == 0x000189, "Member 'UHWNavigationWidgetStitcher::bRebuildNavigationOnInitialize' has a wrong offset!");
static_assert(offsetof(UHWNavigationWidgetStitcher, NavigationRule) == 0x00018A, "Member 'UHWNavigationWidgetStitcher::NavigationRule' has a wrong offset!");
static_assert(offsetof(UHWNavigationWidgetStitcher, RuleEdgeReached) == 0x00018B, "Member 'UHWNavigationWidgetStitcher::RuleEdgeReached' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyPlayerEntryWidget
// 0x0078 (0x06D0 - 0x0658)
class UHWDraftLobbyPlayerEntryWidget final : public UDraftPlayerStatusWidget
{
public:
	TMulticastInlineDelegate<void(class AHWPlayerState* PlayerState, class UWidget* ReferenceWidget)> OnPlayerEntryMuteButtonClicked; // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         IndexInTeam;                                       // 0x0668(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWPlayerState>          WeakPlayerStatePtr;                                // 0x066C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FHWPersistentPlayerId                  HWPlayerId;                                        // 0x0674(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_694[0x3C];                                     // 0x0694(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleActiveTasksChanged();
	void HandleAllRolesAssigned(const struct FHWAssignedRolesMapWrapper& AssignedRoles);
	void HandleAssignedRoleChanged(ECharacterRole AssignedRole);
	void HandleOnRequestSelectFailed();
	void HandlePlayerStateDraftCharacterChoiceReplicated(class AHWPlayerState* PlayerState, const class UHWCharacterItem* Choice);
	void HandleReceivedRoleSwapResult(class AHWPlayerState* RequestingPlayerState, class AHWPlayerState* TargetPlayerState, EHWTradeRequestResult TradeResult, const struct FPGame_ReplicatedTimerId& TimerId);
	void OnPlayerStateDestroyed(class AActor* DestroyedActor);
	void OnPlayerStateUIRelevantChanged(class AHWPlayerState* PlayerState);
	void PeriodicConnectionUpdate();
	void PeriodicTradeTimerUpdate();
	void PostSetHWPlayerId();
	void SetHWPlayerId(const struct FHWPersistentPlayerId& InHWPlayerId);
	void SetIndexInTeam(int32 Index_0);
	void SetPlayerInfo(const class URH_PlayerInfo* PlayerInfo);
	void SetPlayerPlatformIcon(ERHPlatformDisplayType PlatformDisplayType);
	void SetPlayerState(class AHWPlayerState* InPlayerState);
	void SetVoiceChatState(bool bInVoiceChannel, bool bIsTalking, bool bIsMuted);
	void UpdatePlayerEntryDraftState(EHWPlayerDraftingState DraftState);
	void UpdateRoleIcon(ECharacterRole AssignedRole);
	void UpdateTradeStatus(EHWTradeRequestResult TradeResult);
	void UpdateTradeTimer(int32 TimeRemaining);

	struct FHWPersistentPlayerId GetHWPlayerId() const;
	class AHWPlayerState* GetPlayerState() const;
	const class UHWInventoryItem* GetSelectionStatusItem() const;
	class FText GetSelectionStatusText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyPlayerEntryWidget">();
	}
	static class UHWDraftLobbyPlayerEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyPlayerEntryWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyPlayerEntryWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyPlayerEntryWidget");
static_assert(sizeof(UHWDraftLobbyPlayerEntryWidget) == 0x0006D0, "Wrong size on UHWDraftLobbyPlayerEntryWidget");
static_assert(offsetof(UHWDraftLobbyPlayerEntryWidget, OnPlayerEntryMuteButtonClicked) == 0x000658, "Member 'UHWDraftLobbyPlayerEntryWidget::OnPlayerEntryMuteButtonClicked' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyPlayerEntryWidget, IndexInTeam) == 0x000668, "Member 'UHWDraftLobbyPlayerEntryWidget::IndexInTeam' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyPlayerEntryWidget, WeakPlayerStatePtr) == 0x00066C, "Member 'UHWDraftLobbyPlayerEntryWidget::WeakPlayerStatePtr' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyPlayerEntryWidget, HWPlayerId) == 0x000674, "Member 'UHWDraftLobbyPlayerEntryWidget::HWPlayerId' has a wrong offset!");

// Class HemingwayUI.HWDebugLoggerWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWDebugLoggerWidget : public UHWWidget
{
public:
	int32                                         MaxHistorySize;                                    // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWDebugLoggerTextWidget>   TextWidgetClass;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWDebugLoggerTextWidget*>       TextWidgets;                                       // 0x0608(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWGridPanel*                           TextContainer;                                     // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddLog(const class FString& LogText);
	void CreatedNewTextWidget(class UHWDebugLoggerTextWidget* TextBlock);
	void UpdatedTexts();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebugLoggerWidget">();
	}
	static class UHWDebugLoggerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebugLoggerWidget>();
	}
};
static_assert(alignof(UHWDebugLoggerWidget) == 0x000008, "Wrong alignment on UHWDebugLoggerWidget");
static_assert(sizeof(UHWDebugLoggerWidget) == 0x000620, "Wrong size on UHWDebugLoggerWidget");
static_assert(offsetof(UHWDebugLoggerWidget, MaxHistorySize) == 0x0005F8, "Member 'UHWDebugLoggerWidget::MaxHistorySize' has a wrong offset!");
static_assert(offsetof(UHWDebugLoggerWidget, TextWidgetClass) == 0x000600, "Member 'UHWDebugLoggerWidget::TextWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDebugLoggerWidget, TextWidgets) == 0x000608, "Member 'UHWDebugLoggerWidget::TextWidgets' has a wrong offset!");
static_assert(offsetof(UHWDebugLoggerWidget, TextContainer) == 0x000618, "Member 'UHWDebugLoggerWidget::TextContainer' has a wrong offset!");

// Class HemingwayUI.HWInputKeySelector
// 0x0000 (0x0960 - 0x0960)
class UHWInputKeySelector final : public UInputKeySelector
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInputKeySelector">();
	}
	static class UHWInputKeySelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInputKeySelector>();
	}
};
static_assert(alignof(UHWInputKeySelector) == 0x000010, "Wrong alignment on UHWInputKeySelector");
static_assert(sizeof(UHWInputKeySelector) == 0x000960, "Wrong size on UHWInputKeySelector");

// Class HemingwayUI.HWDebug_ItemSimulatorItemEntry
// 0x0028 (0x0718 - 0x06F0)
class UHWDebug_ItemSimulatorItemEntry final : public UHWInventoryEquipmentWidget
{
public:
	TWeakObjectPtr<class UHWDebug_ItemSimulatorWidget> ItemSimulator;                                // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItem;                                     // 0x06F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EquipSlotTag;                                      // 0x0700(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x10];                                     // 0x0708(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ToggleEquipItemEntry();

	const class UHWEquipmentItem* GetEquipmentItem() const;
	class FString GetSlotDisplay() const;
	bool IsEquipped() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_ItemSimulatorItemEntry">();
	}
	static class UHWDebug_ItemSimulatorItemEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_ItemSimulatorItemEntry>();
	}
};
static_assert(alignof(UHWDebug_ItemSimulatorItemEntry) == 0x000008, "Wrong alignment on UHWDebug_ItemSimulatorItemEntry");
static_assert(sizeof(UHWDebug_ItemSimulatorItemEntry) == 0x000718, "Wrong size on UHWDebug_ItemSimulatorItemEntry");
static_assert(offsetof(UHWDebug_ItemSimulatorItemEntry, ItemSimulator) == 0x0006F0, "Member 'UHWDebug_ItemSimulatorItemEntry::ItemSimulator' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorItemEntry, EquipmentItem) == 0x0006F8, "Member 'UHWDebug_ItemSimulatorItemEntry::EquipmentItem' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorItemEntry, EquipSlotTag) == 0x000700, "Member 'UHWDebug_ItemSimulatorItemEntry::EquipSlotTag' has a wrong offset!");

// Class HemingwayUI.HWDebug_ItemSimulatorWidget
// 0x0050 (0x0690 - 0x0640)
class UHWDebug_ItemSimulatorWidget final : public UHWDebugBaseWidget
{
public:
	TSoftObjectPtr<class UDataTable>              ItemSimulatorConfigTable;                          // 0x0640(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDebug_ItemSimulatorItemEntry> ItemEntryClass;                               // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EntriesPerRow;                                     // 0x0670(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUniformGridPanel*                    ItemContainer;                                     // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWDebug_ItemSimulatorItemEntry*> VisibleItemEntries;                               // 0x0680(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void Clear();
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void Populate();
	void PopulatedEntries();
	void PopulatedItemEntry(class UHWDebug_ItemSimulatorItemEntry* ItemEntry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_ItemSimulatorWidget">();
	}
	static class UHWDebug_ItemSimulatorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_ItemSimulatorWidget>();
	}
};
static_assert(alignof(UHWDebug_ItemSimulatorWidget) == 0x000008, "Wrong alignment on UHWDebug_ItemSimulatorWidget");
static_assert(sizeof(UHWDebug_ItemSimulatorWidget) == 0x000690, "Wrong size on UHWDebug_ItemSimulatorWidget");
static_assert(offsetof(UHWDebug_ItemSimulatorWidget, ItemSimulatorConfigTable) == 0x000640, "Member 'UHWDebug_ItemSimulatorWidget::ItemSimulatorConfigTable' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorWidget, ItemEntryClass) == 0x000668, "Member 'UHWDebug_ItemSimulatorWidget::ItemEntryClass' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorWidget, EntriesPerRow) == 0x000670, "Member 'UHWDebug_ItemSimulatorWidget::EntriesPerRow' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorWidget, ItemContainer) == 0x000678, "Member 'UHWDebug_ItemSimulatorWidget::ItemContainer' has a wrong offset!");
static_assert(offsetof(UHWDebug_ItemSimulatorWidget, VisibleItemEntries) == 0x000680, "Member 'UHWDebug_ItemSimulatorWidget::VisibleItemEntries' has a wrong offset!");

// Class HemingwayUI.HWHUDEditorEditableEntry
// 0x0090 (0x0688 - 0x05F8)
class UHWHUDEditorEditableEntry : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWUIStyleLocalModifierWidget> LocalModifierWidget;                         // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TSubclassOf<class UHWUIStyleCustomModifierDisplayData>, TSubclassOf<class UHWHUDEditorEditableEntryCustomField>> CustomFieldClassMap; // 0x0600(0x0050)(Edit, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UHWHUDEditorEditableEntryCustomField*> CustomModifierFields;                        // 0x0650(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UHWHUDEditorEditableEntry* EditableEntry)> OnEditableEntrySelected; // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UHWDragArea*                            AssociatedDragArea;                                // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHUDEditorHighlighter*                AssociatedHighlighter;                             // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_680[0x8];                                      // 0x0680(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomModifierFieldAdded(class UHWHUDEditorEditableEntryCustomField* AddedCustomField);
	void CustomModifierFieldRemoved(class UHWHUDEditorEditableEntryCustomField* RemovedCustomField);
	void DisplayGenericModifierData(const struct FHWUIStyleLocalGenericModifier& GenericModifier);
	void DisplayLocalModifier(const struct FHWUIStyleLocalModifier& LocalModifier);
	void EntrySelectedStateChanged(bool bIsSelected);
	void HandleDragStateChanged(class UHWDragArea* DragArea, bool bNewIsDragging);
	void HideHighlighter();
	void ReloadValues();
	void SetEntryVisibility(bool bNewIsVisible);
	void SetOpacity(float NewOpacity);
	void SetScale(float NewScale);
	void ShowHighlighter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorEditableEntry">();
	}
	static class UHWHUDEditorEditableEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorEditableEntry>();
	}
};
static_assert(alignof(UHWHUDEditorEditableEntry) == 0x000008, "Wrong alignment on UHWHUDEditorEditableEntry");
static_assert(sizeof(UHWHUDEditorEditableEntry) == 0x000688, "Wrong size on UHWHUDEditorEditableEntry");
static_assert(offsetof(UHWHUDEditorEditableEntry, LocalModifierWidget) == 0x0005F8, "Member 'UHWHUDEditorEditableEntry::LocalModifierWidget' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorEditableEntry, CustomFieldClassMap) == 0x000600, "Member 'UHWHUDEditorEditableEntry::CustomFieldClassMap' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorEditableEntry, CustomModifierFields) == 0x000650, "Member 'UHWHUDEditorEditableEntry::CustomModifierFields' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorEditableEntry, OnEditableEntrySelected) == 0x000660, "Member 'UHWHUDEditorEditableEntry::OnEditableEntrySelected' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorEditableEntry, AssociatedDragArea) == 0x000670, "Member 'UHWHUDEditorEditableEntry::AssociatedDragArea' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorEditableEntry, AssociatedHighlighter) == 0x000678, "Member 'UHWHUDEditorEditableEntry::AssociatedHighlighter' has a wrong offset!");

// Class HemingwayUI.HWDebug_MockItemStoreItemEntry
// 0x0028 (0x0718 - 0x06F0)
class UHWDebug_MockItemStoreItemEntry final : public UHWInventoryEquipmentWidget
{
public:
	TWeakObjectPtr<class UHWDebug_MockItemStoreWidget> MockItemStore;                                // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItem;                                     // 0x06F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EquipSlotTag;                                      // 0x0700(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x10];                                     // 0x0708(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayGold();
	void ToggleEquipItemEntry();

	const class UHWEquipmentItem* GetEquipmentItem() const;
	int32 GetOwnedGold() const;
	int32 GetPrice() const;
	class FString GetSlotDisplay() const;
	bool IsEquipped() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_MockItemStoreItemEntry">();
	}
	static class UHWDebug_MockItemStoreItemEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_MockItemStoreItemEntry>();
	}
};
static_assert(alignof(UHWDebug_MockItemStoreItemEntry) == 0x000008, "Wrong alignment on UHWDebug_MockItemStoreItemEntry");
static_assert(sizeof(UHWDebug_MockItemStoreItemEntry) == 0x000718, "Wrong size on UHWDebug_MockItemStoreItemEntry");
static_assert(offsetof(UHWDebug_MockItemStoreItemEntry, MockItemStore) == 0x0006F0, "Member 'UHWDebug_MockItemStoreItemEntry::MockItemStore' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreItemEntry, EquipmentItem) == 0x0006F8, "Member 'UHWDebug_MockItemStoreItemEntry::EquipmentItem' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreItemEntry, EquipSlotTag) == 0x000700, "Member 'UHWDebug_MockItemStoreItemEntry::EquipSlotTag' has a wrong offset!");

// Class HemingwayUI.HWDebug_MockItemStoreGodItems
// 0x0030 (0x0060 - 0x0030)
class UHWDebug_MockItemStoreGodItems final : public UDataAsset
{
public:
	TArray<struct FHWDebug_MockItemStoreItemConfig> Tier1;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHWDebug_MockItemStoreItemConfig> Tier2;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FHWDebug_MockItemStoreItemConfig> Tier3;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_MockItemStoreGodItems">();
	}
	static class UHWDebug_MockItemStoreGodItems* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_MockItemStoreGodItems>();
	}
};
static_assert(alignof(UHWDebug_MockItemStoreGodItems) == 0x000008, "Wrong alignment on UHWDebug_MockItemStoreGodItems");
static_assert(sizeof(UHWDebug_MockItemStoreGodItems) == 0x000060, "Wrong size on UHWDebug_MockItemStoreGodItems");
static_assert(offsetof(UHWDebug_MockItemStoreGodItems, Tier1) == 0x000030, "Member 'UHWDebug_MockItemStoreGodItems::Tier1' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreGodItems, Tier2) == 0x000040, "Member 'UHWDebug_MockItemStoreGodItems::Tier2' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreGodItems, Tier3) == 0x000050, "Member 'UHWDebug_MockItemStoreGodItems::Tier3' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextPool
// 0x0038 (0x0060 - 0x0028)
class UHWFloatingTextPool final : public UObject
{
public:
	TWeakObjectPtr<class UHWFloatingTextDisplayManager> DisplayManager;                              // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWFloatingTextWidget*>          Pool;                                              // 0x0048(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextPool">();
	}
	static class UHWFloatingTextPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextPool>();
	}
};
static_assert(alignof(UHWFloatingTextPool) == 0x000008, "Wrong alignment on UHWFloatingTextPool");
static_assert(sizeof(UHWFloatingTextPool) == 0x000060, "Wrong size on UHWFloatingTextPool");
static_assert(offsetof(UHWFloatingTextPool, DisplayManager) == 0x000028, "Member 'UHWFloatingTextPool::DisplayManager' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextPool, Pool) == 0x000048, "Member 'UHWFloatingTextPool::Pool' has a wrong offset!");

// Class HemingwayUI.HWDebug_MockItemStoreConfig
// 0x0050 (0x0080 - 0x0030)
class UHWDebug_MockItemStoreConfig final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, TSoftObjectPtr<class UHWDebug_MockItemStoreGodItems>> GodItemAssets;   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_MockItemStoreConfig">();
	}
	static class UHWDebug_MockItemStoreConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_MockItemStoreConfig>();
	}
};
static_assert(alignof(UHWDebug_MockItemStoreConfig) == 0x000008, "Wrong alignment on UHWDebug_MockItemStoreConfig");
static_assert(sizeof(UHWDebug_MockItemStoreConfig) == 0x000080, "Wrong size on UHWDebug_MockItemStoreConfig");
static_assert(offsetof(UHWDebug_MockItemStoreConfig, GodItemAssets) == 0x000030, "Member 'UHWDebug_MockItemStoreConfig::GodItemAssets' has a wrong offset!");

// Class HemingwayUI.HWScrollBox
// 0x0000 (0x0CF0 - 0x0CF0)
#pragma pack(push, 0x1)
class alignas(0x10) UHWScrollBox : public UScrollBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScrollBox">();
	}
	static class UHWScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScrollBox>();
	}
};
#pragma pack(pop)
static_assert(alignof(UHWScrollBox) == 0x000010, "Wrong alignment on UHWScrollBox");
static_assert(sizeof(UHWScrollBox) == 0x000CF0, "Wrong size on UHWScrollBox");

// Class HemingwayUI.HWInputKeyScrollBox
// 0x0030 (0x0D20 - 0x0CF0)
class UHWInputKeyScrollBox final : public UHWScrollBox
{
public:
	TArray<struct FKey>                           ScrollUpKeys;                                      // 0x0CE8(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TArray<struct FKey>                           ScrollDownKeys;                                    // 0x0CF8(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         ScrollSpeed;                                       // 0x0D08(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Priority;                                          // 0x0D0C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bStopAction;                                       // 0x0D10(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInputEnabled;                                     // 0x0D11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D12[0x6];                                      // 0x0D12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x0D18(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ScrollDown();
	void ScrollUp();
	void SetbInputEnabled(const bool bSetInputEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInputKeyScrollBox">();
	}
	static class UHWInputKeyScrollBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInputKeyScrollBox>();
	}
};
static_assert(alignof(UHWInputKeyScrollBox) == 0x000010, "Wrong alignment on UHWInputKeyScrollBox");
static_assert(sizeof(UHWInputKeyScrollBox) == 0x000D20, "Wrong size on UHWInputKeyScrollBox");
static_assert(offsetof(UHWInputKeyScrollBox, ScrollUpKeys) == 0x000CE8, "Member 'UHWInputKeyScrollBox::ScrollUpKeys' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, ScrollDownKeys) == 0x000CF8, "Member 'UHWInputKeyScrollBox::ScrollDownKeys' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, ScrollSpeed) == 0x000D08, "Member 'UHWInputKeyScrollBox::ScrollSpeed' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, Priority) == 0x000D0C, "Member 'UHWInputKeyScrollBox::Priority' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, bStopAction) == 0x000D10, "Member 'UHWInputKeyScrollBox::bStopAction' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, bInputEnabled) == 0x000D11, "Member 'UHWInputKeyScrollBox::bInputEnabled' has a wrong offset!");
static_assert(offsetof(UHWInputKeyScrollBox, InputComponent) == 0x000D18, "Member 'UHWInputKeyScrollBox::InputComponent' has a wrong offset!");

// Class HemingwayUI.HWDebug_MockItemStoreWidget
// 0x0048 (0x0688 - 0x0640)
class UHWDebug_MockItemStoreWidget final : public UHWDebugBaseWidget
{
public:
	class UHWDebug_MockItemStoreConfig*           MockItemStoreConfig;                               // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDebug_MockItemStoreItemEntry> ItemEntryClass;                               // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EntriesPerRow;                                     // 0x0650(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_654[0x4];                                      // 0x0654(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUniformGridPanel*                    Tier1ItemContainer;                                // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    Tier2ItemContainer;                                // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    Tier3ItemContainer;                                // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWDebug_MockItemStoreItemEntry*> VisibleItemEntries;                               // 0x0670(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_680[0x8];                                      // 0x0680(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void Populate();
	void PopulatedEntries();
	void PopulatedItemEntry(class UHWDebug_MockItemStoreItemEntry* ItemEntry);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDebug_MockItemStoreWidget">();
	}
	static class UHWDebug_MockItemStoreWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDebug_MockItemStoreWidget>();
	}
};
static_assert(alignof(UHWDebug_MockItemStoreWidget) == 0x000008, "Wrong alignment on UHWDebug_MockItemStoreWidget");
static_assert(sizeof(UHWDebug_MockItemStoreWidget) == 0x000688, "Wrong size on UHWDebug_MockItemStoreWidget");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, MockItemStoreConfig) == 0x000640, "Member 'UHWDebug_MockItemStoreWidget::MockItemStoreConfig' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, ItemEntryClass) == 0x000648, "Member 'UHWDebug_MockItemStoreWidget::ItemEntryClass' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, EntriesPerRow) == 0x000650, "Member 'UHWDebug_MockItemStoreWidget::EntriesPerRow' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, Tier1ItemContainer) == 0x000658, "Member 'UHWDebug_MockItemStoreWidget::Tier1ItemContainer' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, Tier2ItemContainer) == 0x000660, "Member 'UHWDebug_MockItemStoreWidget::Tier2ItemContainer' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, Tier3ItemContainer) == 0x000668, "Member 'UHWDebug_MockItemStoreWidget::Tier3ItemContainer' has a wrong offset!");
static_assert(offsetof(UHWDebug_MockItemStoreWidget, VisibleItemEntries) == 0x000670, "Member 'UHWDebug_MockItemStoreWidget::VisibleItemEntries' has a wrong offset!");

// Class HemingwayUI.HWItemStoreInventoryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWItemStoreInventoryWidget final : public UHWWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreInventoryWidget">();
	}
	static class UHWItemStoreInventoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreInventoryWidget>();
	}
};
static_assert(alignof(UHWItemStoreInventoryWidget) == 0x000008, "Wrong alignment on UHWItemStoreInventoryWidget");
static_assert(sizeof(UHWItemStoreInventoryWidget) == 0x0005F8, "Wrong size on UHWItemStoreInventoryWidget");

// Class HemingwayUI.HWAbilityHudWidget
// 0x0008 (0x0640 - 0x0638)
class UHWAbilityHudWidget final : public UHWCharacterWidget
{
public:
	struct FGameplayTag                           AbilitySlotType;                                   // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<class UHWActivatableEquipmentWidget*> GetAbilityWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityHudWidget">();
	}
	static class UHWAbilityHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityHudWidget>();
	}
};
static_assert(alignof(UHWAbilityHudWidget) == 0x000008, "Wrong alignment on UHWAbilityHudWidget");
static_assert(sizeof(UHWAbilityHudWidget) == 0x000640, "Wrong size on UHWAbilityHudWidget");
static_assert(offsetof(UHWAbilityHudWidget, AbilitySlotType) == 0x000638, "Member 'UHWAbilityHudWidget::AbilitySlotType' has a wrong offset!");

// Class HemingwayUI.HWImage
// 0x0010 (0x02F0 - 0x02E0)
class UHWImage final : public UImage
{
public:
	struct FHWUIStyleWidgetConfig                 ColorStyle;                                        // 0x02D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHWImageColorStyleLocation                    ColorStyleLocation;                                // 0x02E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0xB];                                      // 0x02E5(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetColorStyleTag(const struct FGameplayTag& NewStyleTag);
	void SetFromIconInfo(const class UIconInfo* IconInfo, bool bCreateMaterialInstance);
	void SetSoftTextureParameterValue(class FName ParameterName, TSoftObjectPtr<class UTexture2D> Texture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWImage">();
	}
	static class UHWImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWImage>();
	}
};
static_assert(alignof(UHWImage) == 0x000010, "Wrong alignment on UHWImage");
static_assert(sizeof(UHWImage) == 0x0002F0, "Wrong size on UHWImage");
static_assert(offsetof(UHWImage, ColorStyle) == 0x0002D8, "Member 'UHWImage::ColorStyle' has a wrong offset!");
static_assert(offsetof(UHWImage, ColorStyleLocation) == 0x0002E4, "Member 'UHWImage::ColorStyleLocation' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptDisplayerConfig
// 0x0050 (0x0080 - 0x0030)
class UHWAbilityPromptDisplayerConfig final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FHWAbilityPromptConfig> AbilityPromptConfigs;                   // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptDisplayerConfig">();
	}
	static class UHWAbilityPromptDisplayerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptDisplayerConfig>();
	}
};
static_assert(alignof(UHWAbilityPromptDisplayerConfig) == 0x000008, "Wrong alignment on UHWAbilityPromptDisplayerConfig");
static_assert(sizeof(UHWAbilityPromptDisplayerConfig) == 0x000080, "Wrong size on UHWAbilityPromptDisplayerConfig");
static_assert(offsetof(UHWAbilityPromptDisplayerConfig, AbilityPromptConfigs) == 0x000030, "Member 'UHWAbilityPromptDisplayerConfig::AbilityPromptConfigs' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptDisplayer
// 0x0060 (0x0658 - 0x05F8)
class UHWAbilityPromptDisplayer : public UHWWidget
{
public:
	class UHWCanvasPanel*                         AbilityPromptContainer;                            // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWAbilityPromptDisplayerConfig*        DisplayerConfig;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, class UHWAbilityPromptBaseWidget*> DisplayedAbilityPrompts;                          // 0x0608(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnDisplayInfoAdded(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoHidden(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoRemoved(const struct FHWDisplayInfo& InDisplayInfo);
	void OnDisplayInfoShown(const struct FHWDisplayInfo& InDisplayInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptDisplayer">();
	}
	static class UHWAbilityPromptDisplayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptDisplayer>();
	}
};
static_assert(alignof(UHWAbilityPromptDisplayer) == 0x000008, "Wrong alignment on UHWAbilityPromptDisplayer");
static_assert(sizeof(UHWAbilityPromptDisplayer) == 0x000658, "Wrong size on UHWAbilityPromptDisplayer");
static_assert(offsetof(UHWAbilityPromptDisplayer, AbilityPromptContainer) == 0x0005F8, "Member 'UHWAbilityPromptDisplayer::AbilityPromptContainer' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptDisplayer, DisplayerConfig) == 0x000600, "Member 'UHWAbilityPromptDisplayer::DisplayerConfig' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptDisplayer, DisplayedAbilityPrompts) == 0x000608, "Member 'UHWAbilityPromptDisplayer::DisplayedAbilityPrompts' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptRadialEntryWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWAbilityPromptRadialEntryWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWAbilityPromptRadialEntryWidget* ChangedEntry, bool NewFlag)> OnEntryHighlightedChanged; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWAbilityPromptRadialEntryWidget* ChangedEntry, bool NewFlag)> OnEntrySelectedChanged; // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsSelected;                                       // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHighlighted;                                    // 0x0619(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HighlightEntry(bool NewIsHighlighted);
	void SelectEntry(bool NewIsSelected);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptRadialEntryWidget">();
	}
	static class UHWAbilityPromptRadialEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptRadialEntryWidget>();
	}
};
static_assert(alignof(UHWAbilityPromptRadialEntryWidget) == 0x000008, "Wrong alignment on UHWAbilityPromptRadialEntryWidget");
static_assert(sizeof(UHWAbilityPromptRadialEntryWidget) == 0x000620, "Wrong size on UHWAbilityPromptRadialEntryWidget");
static_assert(offsetof(UHWAbilityPromptRadialEntryWidget, OnEntryHighlightedChanged) == 0x0005F8, "Member 'UHWAbilityPromptRadialEntryWidget::OnEntryHighlightedChanged' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptRadialEntryWidget, OnEntrySelectedChanged) == 0x000608, "Member 'UHWAbilityPromptRadialEntryWidget::OnEntrySelectedChanged' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptRadialEntryWidget, bIsSelected) == 0x000618, "Member 'UHWAbilityPromptRadialEntryWidget::bIsSelected' has a wrong offset!");
static_assert(offsetof(UHWAbilityPromptRadialEntryWidget, bIsHighlighted) == 0x000619, "Member 'UHWAbilityPromptRadialEntryWidget::bIsHighlighted' has a wrong offset!");

// Class HemingwayUI.HWAbilityPromptRadialGodEntry
// 0x0008 (0x0628 - 0x0620)
class UHWAbilityPromptRadialGodEntry final : public UHWAbilityPromptRadialEntryWidget
{
public:
	TWeakObjectPtr<class AHWPlayerState>          AssociatedPlayerState;                             // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayCharacterItem(const class UHWCharacterItem* CharacterItem);

	class AHWPlayerState* GetAssociatedPlayerState() const;
	ETeamAttitude GetAttitudeTowardsLocal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPromptRadialGodEntry">();
	}
	static class UHWAbilityPromptRadialGodEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPromptRadialGodEntry>();
	}
};
static_assert(alignof(UHWAbilityPromptRadialGodEntry) == 0x000008, "Wrong alignment on UHWAbilityPromptRadialGodEntry");
static_assert(sizeof(UHWAbilityPromptRadialGodEntry) == 0x000628, "Wrong size on UHWAbilityPromptRadialGodEntry");
static_assert(offsetof(UHWAbilityPromptRadialGodEntry, AssociatedPlayerState) == 0x000620, "Member 'UHWAbilityPromptRadialGodEntry::AssociatedPlayerState' has a wrong offset!");

// Class HemingwayUI.HWAbilityReticleWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWAbilityReticleWidget final : public UHWWidget
{
public:
	TWeakObjectPtr<class AHWReticle>              Reticle;                                           // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLockedOn;                                       // 0x0600(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnReticleLockedOn(bool bNewLockedOn);
	void OnReticleLockedOn(bool bNewLockedOn);

	const class UHWCharacterItem* GetTargetCharacterItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityReticleWidget">();
	}
	static class UHWAbilityReticleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityReticleWidget>();
	}
};
static_assert(alignof(UHWAbilityReticleWidget) == 0x000008, "Wrong alignment on UHWAbilityReticleWidget");
static_assert(sizeof(UHWAbilityReticleWidget) == 0x000608, "Wrong size on UHWAbilityReticleWidget");
static_assert(offsetof(UHWAbilityReticleWidget, Reticle) == 0x0005F8, "Member 'UHWAbilityReticleWidget::Reticle' has a wrong offset!");
static_assert(offsetof(UHWAbilityReticleWidget, bIsLockedOn) == 0x000600, "Member 'UHWAbilityReticleWidget::bIsLockedOn' has a wrong offset!");

// Class HemingwayUI.HWAccoladeEntryWidget
// 0x0068 (0x0660 - 0x05F8)
class UHWAccoladeEntryWidget : public UHWWidget
{
public:
	struct FHWAccoladeDisplayConfig               AccoladeConfig;                                    // 0x05F8(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_640[0x20];                                     // 0x0640(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEventData(const struct FHWEventContext& EventContext);
	void StartDisplay(const float FullDuration);
	void StartOutro();
	void StopDisplay();

	float GetOutroDuration() const;
	TSoftObjectPtr<class UMetaSoundSource> GetSoundSourceToPlay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeEntryWidget">();
	}
	static class UHWAccoladeEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeEntryWidget>();
	}
};
static_assert(alignof(UHWAccoladeEntryWidget) == 0x000008, "Wrong alignment on UHWAccoladeEntryWidget");
static_assert(sizeof(UHWAccoladeEntryWidget) == 0x000660, "Wrong size on UHWAccoladeEntryWidget");
static_assert(offsetof(UHWAccoladeEntryWidget, AccoladeConfig) == 0x0005F8, "Member 'UHWAccoladeEntryWidget::AccoladeConfig' has a wrong offset!");

// Class HemingwayUI.HWAccoladeWidget
// 0x00F8 (0x06F0 - 0x05F8)
class UHWAccoladeWidget : public UHWWidget
{
public:
	struct FHWEventContext                        AccoladeContext;                                   // 0x05F8(0x0088)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           AccoladeTag;                                       // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWAccoladeConfig                      AccoladeConfig;                                    // 0x0688(0x0058)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UHWAccoladeWidgetManager*               AccoladeWidgetManager;                             // 0x06E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6E8[0x8];                                      // 0x06E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAccoladeDisplayEnd();
	void OnAccoladeDisplayStart();
	void OnAccoladeOutroStart();
	void OnAccoladeSequenceStart();
	void SetAccoladeData(const struct FGameplayTag& InAccoladeTag, const struct FHWAccoladeConfig& InAccoladeConfig, const struct FHWEventContext& InAccoladeContext);
	void StopAccoladeDisplay();

	const struct FGameplayTag GetAccoladeTag() const;
	float GetOutroDuration() const;
	struct FGameplayTag GetVOTagToPlay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeWidget">();
	}
	static class UHWAccoladeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeWidget>();
	}
};
static_assert(alignof(UHWAccoladeWidget) == 0x000008, "Wrong alignment on UHWAccoladeWidget");
static_assert(sizeof(UHWAccoladeWidget) == 0x0006F0, "Wrong size on UHWAccoladeWidget");
static_assert(offsetof(UHWAccoladeWidget, AccoladeContext) == 0x0005F8, "Member 'UHWAccoladeWidget::AccoladeContext' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidget, AccoladeTag) == 0x000680, "Member 'UHWAccoladeWidget::AccoladeTag' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidget, AccoladeConfig) == 0x000688, "Member 'UHWAccoladeWidget::AccoladeConfig' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidget, AccoladeWidgetManager) == 0x0006E0, "Member 'UHWAccoladeWidget::AccoladeWidgetManager' has a wrong offset!");

// Class HemingwayUI.HWAccoladeConfigAsset
// 0x0050 (0x0080 - 0x0030)
class UHWAccoladeConfigAsset final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FHWAccoladeBucketConfig> BucketTagToBucketConfigs;              // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeConfigAsset">();
	}
	static class UHWAccoladeConfigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeConfigAsset>();
	}
};
static_assert(alignof(UHWAccoladeConfigAsset) == 0x000008, "Wrong alignment on UHWAccoladeConfigAsset");
static_assert(sizeof(UHWAccoladeConfigAsset) == 0x000080, "Wrong size on UHWAccoladeConfigAsset");
static_assert(offsetof(UHWAccoladeConfigAsset, BucketTagToBucketConfigs) == 0x000030, "Member 'UHWAccoladeConfigAsset::BucketTagToBucketConfigs' has a wrong offset!");

// Class HemingwayUI.HWAccoladeWidgetManager
// 0x0310 (0x0908 - 0x05F8)
class UHWAccoladeWidgetManager final : public UHWWidget
{
public:
	TSoftObjectPtr<class UHWAccoladeConfigAsset>  AccoladeConfigAssetSoftPtr;                        // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x10];                                     // 0x0620(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FHWAccoladeConfig> AccoladeTagToAccoladeConfig;                 // 0x0630(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWAccoladeBucketConfig> BucketTagToBucketConfig;               // 0x0680(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x60];                                     // 0x06D0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWAccoladeDisplayData                 CurrentActiveAccoladeData;                         // 0x0730(0x00A0)(Transient, NativeAccessSpecifierPrivate)
	class UHWAccoladeWidget*                      CurrentActiveAccoladeWidget;                       // 0x07D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7D8[0x20];                                     // 0x07D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCanvasPanel*                         AccoladeCanvas;                                    // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWAccoladeWidget*> CachedAccoladeWidgets;                       // 0x0800(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>              AnnouncementsConfigDTSoftPtr;                      // 0x0850(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGameAnnouncementsWidget> AnnouncementsWidgetClass;                          // 0x0878(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWAnnouncementConfig> AnnouncementTagToConfigMap;              // 0x0880(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class UHWGameAnnouncementsWidget*             CachedAnnouncementsWidget;                         // 0x08D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           AccoladeAudioComponentTag;                         // 0x08D8(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USoundBase>              DefaultAccoladeSoundSoftPtr;                       // 0x08E0(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAccoladeComponentUpdated(class UHWAccoladeComponent* AccoladeComponent);
	void HandleAnnouncementComponentUpdated(class UHWAnnouncementComponent* AnnouncementComponent);
	void HandleGameStatsTrackerReplicated(class AHWGameStatsTracker* GameStatsTracker);
	void HandleNewAnnouncementAdded(class AHWGameStatsTracker* GameStatsTracker, const struct FGameplayTag& AnnouncementTag);
	void HandleNewPlayerAccoladeAdded(class AHWPlayerStatsTracker* PlayerStatsTracker, const struct FGameplayTag& AccoladeTag, const struct FHWEventContext& AccoladeContext);
	void HandleNewTeamAccoladeAdded(class AHWTeamStatsTracker* TeamStatsTracker, const struct FGameplayTag& AccoladeTag, const struct FHWEventContext& AccoladeContext);
	void HandlePlayerStatsTrackerReplicated(class AHWPlayerState* PlayerState, class AHWPlayerStatsTracker* PlayerStatsTracker);
	void HandleTeamMembersUpdated();
	void HandleTeamStatsTrackerReplicated(class AHWTeamState* TeamState, class AHWTeamStatsTracker* TeamStatsTracker);
	void HandleTeamsUpdated();
	void OnDefaultSoundLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAccoladeWidgetManager">();
	}
	static class UHWAccoladeWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAccoladeWidgetManager>();
	}
};
static_assert(alignof(UHWAccoladeWidgetManager) == 0x000008, "Wrong alignment on UHWAccoladeWidgetManager");
static_assert(sizeof(UHWAccoladeWidgetManager) == 0x000908, "Wrong size on UHWAccoladeWidgetManager");
static_assert(offsetof(UHWAccoladeWidgetManager, AccoladeConfigAssetSoftPtr) == 0x0005F8, "Member 'UHWAccoladeWidgetManager::AccoladeConfigAssetSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AccoladeTagToAccoladeConfig) == 0x000630, "Member 'UHWAccoladeWidgetManager::AccoladeTagToAccoladeConfig' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, BucketTagToBucketConfig) == 0x000680, "Member 'UHWAccoladeWidgetManager::BucketTagToBucketConfig' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, CurrentActiveAccoladeData) == 0x000730, "Member 'UHWAccoladeWidgetManager::CurrentActiveAccoladeData' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, CurrentActiveAccoladeWidget) == 0x0007D0, "Member 'UHWAccoladeWidgetManager::CurrentActiveAccoladeWidget' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AccoladeCanvas) == 0x0007F8, "Member 'UHWAccoladeWidgetManager::AccoladeCanvas' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, CachedAccoladeWidgets) == 0x000800, "Member 'UHWAccoladeWidgetManager::CachedAccoladeWidgets' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AnnouncementsConfigDTSoftPtr) == 0x000850, "Member 'UHWAccoladeWidgetManager::AnnouncementsConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AnnouncementsWidgetClass) == 0x000878, "Member 'UHWAccoladeWidgetManager::AnnouncementsWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AnnouncementTagToConfigMap) == 0x000880, "Member 'UHWAccoladeWidgetManager::AnnouncementTagToConfigMap' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, CachedAnnouncementsWidget) == 0x0008D0, "Member 'UHWAccoladeWidgetManager::CachedAnnouncementsWidget' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, AccoladeAudioComponentTag) == 0x0008D8, "Member 'UHWAccoladeWidgetManager::AccoladeAudioComponentTag' has a wrong offset!");
static_assert(offsetof(UHWAccoladeWidgetManager, DefaultAccoladeSoundSoftPtr) == 0x0008E0, "Member 'UHWAccoladeWidgetManager::DefaultAccoladeSoundSoftPtr' has a wrong offset!");

// Class HemingwayUI.HWAimReticleWidget
// 0x0010 (0x0648 - 0x0638)
class UHWAimReticleWidget : public UHWCharacterWidget
{
public:
	bool                                          bUseCharacterInhandRange;                          // 0x0638(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseInteractionMarkers;                            // 0x0639(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63A[0xE];                                      // 0x063A(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimateHit();
	void AnimateKill();
	void HandleClientDamageEvent(const struct FHWCombatEvent& CombatEvent);
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void HandleOnEventAdded(const struct FGameplayTag& EventTag, const struct FHWEventContext& EventContext, const bool bStomped);
	void SetIsTargeting(bool bIsTargeting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAimReticleWidget">();
	}
	static class UHWAimReticleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAimReticleWidget>();
	}
};
static_assert(alignof(UHWAimReticleWidget) == 0x000008, "Wrong alignment on UHWAimReticleWidget");
static_assert(sizeof(UHWAimReticleWidget) == 0x000648, "Wrong size on UHWAimReticleWidget");
static_assert(offsetof(UHWAimReticleWidget, bUseCharacterInhandRange) == 0x000638, "Member 'UHWAimReticleWidget::bUseCharacterInhandRange' has a wrong offset!");
static_assert(offsetof(UHWAimReticleWidget, bUseInteractionMarkers) == 0x000639, "Member 'UHWAimReticleWidget::bUseInteractionMarkers' has a wrong offset!");

// Class HemingwayUI.HWGameAnnouncementsWidget
// 0x0000 (0x06F0 - 0x06F0)
class UHWGameAnnouncementsWidget final : public UHWAccoladeWidget
{
public:
	void SetAnnouncementText(const class FText& InAnnouncementText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameAnnouncementsWidget">();
	}
	static class UHWGameAnnouncementsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameAnnouncementsWidget>();
	}
};
static_assert(alignof(UHWGameAnnouncementsWidget) == 0x000008, "Wrong alignment on UHWGameAnnouncementsWidget");
static_assert(sizeof(UHWGameAnnouncementsWidget) == 0x0006F0, "Wrong size on UHWGameAnnouncementsWidget");

// Class HemingwayUI.HWKillTrackerWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWKillTrackerWidget : public UHWWidget
{
public:
	bool                                          bIsEnemy;                                          // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              EmptyPipTexture;                                   // 0x0600(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              FullPipTexture;                                    // 0x0628(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayGodKills(int32 GodKillsCount);
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void OnGodKillsChanged(int32 KillCount);
	void OnSiegeMinionSpawned(int32 TeamId);

	int32 GetKillsBeforeSiegeMinionSpawns() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWKillTrackerWidget">();
	}
	static class UHWKillTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWKillTrackerWidget>();
	}
};
static_assert(alignof(UHWKillTrackerWidget) == 0x000008, "Wrong alignment on UHWKillTrackerWidget");
static_assert(sizeof(UHWKillTrackerWidget) == 0x000650, "Wrong size on UHWKillTrackerWidget");
static_assert(offsetof(UHWKillTrackerWidget, bIsEnemy) == 0x0005F8, "Member 'UHWKillTrackerWidget::bIsEnemy' has a wrong offset!");
static_assert(offsetof(UHWKillTrackerWidget, EmptyPipTexture) == 0x000600, "Member 'UHWKillTrackerWidget::EmptyPipTexture' has a wrong offset!");
static_assert(offsetof(UHWKillTrackerWidget, FullPipTexture) == 0x000628, "Member 'UHWKillTrackerWidget::FullPipTexture' has a wrong offset!");

// Class HemingwayUI.HWTicketTrackerWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWTicketTrackerWidget : public UHWWidget
{
public:
	bool                                          bIsEnemy;                                          // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SuddenDeathTicketCount;                            // 0x05FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHWArenaSuddenDeathState                      SuddenDeathState;                                  // 0x0600(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayTicketCount(int32 TicketCount);
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void OnTicketCountChanged(int32 TicketCount);
	void SuddenDeathChanged(EHWArenaSuddenDeathState CurrentSuddenDeathState);

	int32 GetMaxTicketCount() const;
	EHWArenaSuddenDeathState GetSuddenDeathState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTicketTrackerWidget">();
	}
	static class UHWTicketTrackerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTicketTrackerWidget>();
	}
};
static_assert(alignof(UHWTicketTrackerWidget) == 0x000008, "Wrong alignment on UHWTicketTrackerWidget");
static_assert(sizeof(UHWTicketTrackerWidget) == 0x000608, "Wrong size on UHWTicketTrackerWidget");
static_assert(offsetof(UHWTicketTrackerWidget, bIsEnemy) == 0x0005F8, "Member 'UHWTicketTrackerWidget::bIsEnemy' has a wrong offset!");
static_assert(offsetof(UHWTicketTrackerWidget, SuddenDeathTicketCount) == 0x0005FC, "Member 'UHWTicketTrackerWidget::SuddenDeathTicketCount' has a wrong offset!");
static_assert(offsetof(UHWTicketTrackerWidget, SuddenDeathState) == 0x000600, "Member 'UHWTicketTrackerWidget::SuddenDeathState' has a wrong offset!");

// Class HemingwayUI.HWAutoBuyBuildEntry_Augment
// 0x0048 (0x0640 - 0x05F8)
class UHWAutoBuyBuildEntry_Augment : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWAutoBuyBuildSelector> AutoBuyBuildSelector;                              // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWEquipmentItem>        RelicItem;                                         // 0x0610(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelected;                                       // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayItem(const class UHWEquipmentItem* Item);
	void SelectItem(bool bIsFinalSelection);
	void UnselectItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAutoBuyBuildEntry_Augment">();
	}
	static class UHWAutoBuyBuildEntry_Augment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAutoBuyBuildEntry_Augment>();
	}
};
static_assert(alignof(UHWAutoBuyBuildEntry_Augment) == 0x000008, "Wrong alignment on UHWAutoBuyBuildEntry_Augment");
static_assert(sizeof(UHWAutoBuyBuildEntry_Augment) == 0x000640, "Wrong size on UHWAutoBuyBuildEntry_Augment");
static_assert(offsetof(UHWAutoBuyBuildEntry_Augment, AutoBuyBuildSelector) == 0x000608, "Member 'UHWAutoBuyBuildEntry_Augment::AutoBuyBuildSelector' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildEntry_Augment, RelicItem) == 0x000610, "Member 'UHWAutoBuyBuildEntry_Augment::RelicItem' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildEntry_Augment, bIsSelected) == 0x000638, "Member 'UHWAutoBuyBuildEntry_Augment::bIsSelected' has a wrong offset!");

// Class HemingwayUI.HWAutoBuyBuildItemWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWAutoBuyBuildItemWidget : public UHWWidget
{
public:
	class UHWEquipmentItem*                       EquipmentItem;                                     // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayItem(const class UHWEquipmentItem* NewEquipmentItem);
	void HideTooltip();
	void ShowTooltip();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAutoBuyBuildItemWidget">();
	}
	static class UHWAutoBuyBuildItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAutoBuyBuildItemWidget>();
	}
};
static_assert(alignof(UHWAutoBuyBuildItemWidget) == 0x000008, "Wrong alignment on UHWAutoBuyBuildItemWidget");
static_assert(sizeof(UHWAutoBuyBuildItemWidget) == 0x000600, "Wrong size on UHWAutoBuyBuildItemWidget");
static_assert(offsetof(UHWAutoBuyBuildItemWidget, EquipmentItem) == 0x0005F8, "Member 'UHWAutoBuyBuildItemWidget::EquipmentItem' has a wrong offset!");

// Class HemingwayUI.HWAutoBuyBuildSelector
// 0x00C0 (0x06B8 - 0x05F8)
class UHWAutoBuyBuildSelector : public UHWWidget
{
public:
	class UHWAutoBuyComponent*                    AutoBuyComponent;                                  // 0x05F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWAutoBuyBuildEntry>       BuildEntryClass;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWAutoBuyBuildEntry*>           VisibleAutoBuildWidgetList;                        // 0x0608(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  PinnedGodBuildGuid;                                // 0x0618(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  SelectedGodBuildGuid;                              // 0x0628(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CurrentCharacterItem;                              // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWAutoGodBuild>                AutoGodBuilds;                                     // 0x0640(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHWAutoBuyBuildEntry*                   ManualBuildEntry;                                  // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWAutoBuildSelectionType                     CurrentSelectionType;                              // 0x0658(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_659[0x7];                                      // 0x0659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UHWEquipmentItem>> RelicItems;                                       // 0x0660(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWEquipmentItem>        SelectedBuildRelic;                                // 0x0670(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWAutoBuyBuildEntry_Augment> RelicEntryClass;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWAutoBuyBuildEntry_Augment*>   VisibleRelicWidgetList;                            // 0x06A0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B0[0x8];                                      // 0x06B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearBuilds();
	void HandleABSActorChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor);
	void HandleAutoBuyComponentChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class UHWAutoBuyComponent* NewAutoBuyComponent);
	void HandleAutoBuyStateChanged(EHWAutoBuyState NewState);
	void HandleCharacterItemChange(TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner, const class UHWCharacterItem* NewCharacterItem);
	void LockInRelicSelectionsAndBuild();
	void OnAllBuildsFullyReceived();
	void OnAutoBuildEntryAdded(class UHWAutoBuyBuildEntry* Entry);
	void OnAutoBuildEntrySelected(bool bIsFinalSelection, class UHWAutoBuyBuildEntry* Entry);
	void OnBuildsReceived(bool bSuccess, const TArray<struct FHWGodBuild>& InGodBuilds);
	void OnFullBuildReceived(bool bSuccess, const struct FHWGodBuild& InGodBuild);
	void OnReceiveStoreItems();
	void OnRelicEntryAdded(class UHWAutoBuyBuildEntry_Augment* Entry);
	void OnRelicEntrySelected(bool bIsFinalSelection, class UHWAutoBuyBuildEntry_Augment* Entry);
	void PopulateBuilds(const class UHWCharacterItem* CharacterItem);
	void ShowRelicSelection();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAutoBuyBuildSelector">();
	}
	static class UHWAutoBuyBuildSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAutoBuyBuildSelector>();
	}
};
static_assert(alignof(UHWAutoBuyBuildSelector) == 0x000008, "Wrong alignment on UHWAutoBuyBuildSelector");
static_assert(sizeof(UHWAutoBuyBuildSelector) == 0x0006B8, "Wrong size on UHWAutoBuyBuildSelector");
static_assert(offsetof(UHWAutoBuyBuildSelector, AutoBuyComponent) == 0x0005F8, "Member 'UHWAutoBuyBuildSelector::AutoBuyComponent' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, BuildEntryClass) == 0x000600, "Member 'UHWAutoBuyBuildSelector::BuildEntryClass' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, VisibleAutoBuildWidgetList) == 0x000608, "Member 'UHWAutoBuyBuildSelector::VisibleAutoBuildWidgetList' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, PinnedGodBuildGuid) == 0x000618, "Member 'UHWAutoBuyBuildSelector::PinnedGodBuildGuid' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, SelectedGodBuildGuid) == 0x000628, "Member 'UHWAutoBuyBuildSelector::SelectedGodBuildGuid' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, CurrentCharacterItem) == 0x000638, "Member 'UHWAutoBuyBuildSelector::CurrentCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, AutoGodBuilds) == 0x000640, "Member 'UHWAutoBuyBuildSelector::AutoGodBuilds' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, ManualBuildEntry) == 0x000650, "Member 'UHWAutoBuyBuildSelector::ManualBuildEntry' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, CurrentSelectionType) == 0x000658, "Member 'UHWAutoBuyBuildSelector::CurrentSelectionType' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, RelicItems) == 0x000660, "Member 'UHWAutoBuyBuildSelector::RelicItems' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, SelectedBuildRelic) == 0x000670, "Member 'UHWAutoBuyBuildSelector::SelectedBuildRelic' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, RelicEntryClass) == 0x000698, "Member 'UHWAutoBuyBuildSelector::RelicEntryClass' has a wrong offset!");
static_assert(offsetof(UHWAutoBuyBuildSelector, VisibleRelicWidgetList) == 0x0006A0, "Member 'UHWAutoBuyBuildSelector::VisibleRelicWidgetList' has a wrong offset!");

// Class HemingwayUI.HWCombatLog_DamageEntryWidget
// 0x0098 (0x0690 - 0x05F8)
class UHWCombatLog_DamageEntryWidget : public UHWWidget
{
public:
	class FText                                   DamageDealtText;                                   // 0x05F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FText                                   DamageTakenText;                                   // 0x0610(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	int32                                         ImageHeight;                                       // 0x0628(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ImageWidth;                                        // 0x062C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWRichTextBlock*                       RichTextBlock;                                     // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWEquipmentItem>        EquipmentItem;                                     // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EquipmentInventorySlotType;                        // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EquipmentInventorySlotId;                          // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        TargetCharacterItem;                               // 0x064C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        SourceCharacterItem;                               // 0x0654(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetDisplayName;                                 // 0x0660(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SourceDisplayName;                                 // 0x0670(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Damage;                                            // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InstanceCount;                                     // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDamageTaken;                                    // 0x0688(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEntryUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCombatLog_DamageEntryWidget">();
	}
	static class UHWCombatLog_DamageEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCombatLog_DamageEntryWidget>();
	}
};
static_assert(alignof(UHWCombatLog_DamageEntryWidget) == 0x000008, "Wrong alignment on UHWCombatLog_DamageEntryWidget");
static_assert(sizeof(UHWCombatLog_DamageEntryWidget) == 0x000690, "Wrong size on UHWCombatLog_DamageEntryWidget");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, DamageDealtText) == 0x0005F8, "Member 'UHWCombatLog_DamageEntryWidget::DamageDealtText' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, DamageTakenText) == 0x000610, "Member 'UHWCombatLog_DamageEntryWidget::DamageTakenText' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, ImageHeight) == 0x000628, "Member 'UHWCombatLog_DamageEntryWidget::ImageHeight' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, ImageWidth) == 0x00062C, "Member 'UHWCombatLog_DamageEntryWidget::ImageWidth' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, RichTextBlock) == 0x000630, "Member 'UHWCombatLog_DamageEntryWidget::RichTextBlock' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, EquipmentItem) == 0x000638, "Member 'UHWCombatLog_DamageEntryWidget::EquipmentItem' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, EquipmentInventorySlotType) == 0x000640, "Member 'UHWCombatLog_DamageEntryWidget::EquipmentInventorySlotType' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, EquipmentInventorySlotId) == 0x000648, "Member 'UHWCombatLog_DamageEntryWidget::EquipmentInventorySlotId' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, TargetCharacterItem) == 0x00064C, "Member 'UHWCombatLog_DamageEntryWidget::TargetCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, SourceCharacterItem) == 0x000654, "Member 'UHWCombatLog_DamageEntryWidget::SourceCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, TargetDisplayName) == 0x000660, "Member 'UHWCombatLog_DamageEntryWidget::TargetDisplayName' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, SourceDisplayName) == 0x000670, "Member 'UHWCombatLog_DamageEntryWidget::SourceDisplayName' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, Damage) == 0x000680, "Member 'UHWCombatLog_DamageEntryWidget::Damage' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, InstanceCount) == 0x000684, "Member 'UHWCombatLog_DamageEntryWidget::InstanceCount' has a wrong offset!");
static_assert(offsetof(UHWCombatLog_DamageEntryWidget, bIsDamageTaken) == 0x000688, "Member 'UHWCombatLog_DamageEntryWidget::bIsDamageTaken' has a wrong offset!");

// Class HemingwayUI.HWDamageFeedbackWidget
// 0x0138 (0x0750 - 0x0618)
class UHWDamageFeedbackWidget : public UHWGameplayAttributeWidget
{
public:
	struct FGameplayTagContainer                  AllowedSourceTags;                                 // 0x0618(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bAnimateAllSides;                                  // 0x0638(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowerHealthRatioThreshold;                         // 0x063C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpperHealthRatioThreshold;                         // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDuration;                                       // 0x0644(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDuration;                                       // 0x0648(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinStartingOpacity;                                // 0x064C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxStartingOpacity;                                // 0x0650(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHealthFeedbackOpacity;                          // 0x0654(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartingHealthFeedbackPercent;                     // 0x0658(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65C[0xAC];                                     // 0x065C(0x00AC)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWDamageFeedbackIndicatorData> TrackedDamageIndicatorData;                        // 0x0708(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWDamageIndicatorPointerWidget*> DamageIndicatorPointers;                          // 0x0718(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxInstanceCount;                                  // 0x0728(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWOverlay*                             DamageIndicatorOverlay;                            // 0x0730(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWDamageIndicatorPointerWidget> DamageIndicatorPointerClass;                  // 0x0738(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IntensityDecayPerSecond;                           // 0x0740(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxIntensity;                                      // 0x0744(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffScreenProjectedDistance;                        // 0x0748(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayDamageFeedback(EHWDamageFeedbackSide side, float Opacity);
	void HandleLocalPlayerDamageTaken(const struct FGameplayCueParameters& Parameters);
	void OnDirectionalDamageSettingChanged();
	void UpdateHealthFeedback(float Opacity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDamageFeedbackWidget">();
	}
	static class UHWDamageFeedbackWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDamageFeedbackWidget>();
	}
};
static_assert(alignof(UHWDamageFeedbackWidget) == 0x000008, "Wrong alignment on UHWDamageFeedbackWidget");
static_assert(sizeof(UHWDamageFeedbackWidget) == 0x000750, "Wrong size on UHWDamageFeedbackWidget");
static_assert(offsetof(UHWDamageFeedbackWidget, AllowedSourceTags) == 0x000618, "Member 'UHWDamageFeedbackWidget::AllowedSourceTags' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, bAnimateAllSides) == 0x000638, "Member 'UHWDamageFeedbackWidget::bAnimateAllSides' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, LowerHealthRatioThreshold) == 0x00063C, "Member 'UHWDamageFeedbackWidget::LowerHealthRatioThreshold' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, UpperHealthRatioThreshold) == 0x000640, "Member 'UHWDamageFeedbackWidget::UpperHealthRatioThreshold' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MinDuration) == 0x000644, "Member 'UHWDamageFeedbackWidget::MinDuration' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MaxDuration) == 0x000648, "Member 'UHWDamageFeedbackWidget::MaxDuration' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MinStartingOpacity) == 0x00064C, "Member 'UHWDamageFeedbackWidget::MinStartingOpacity' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MaxStartingOpacity) == 0x000650, "Member 'UHWDamageFeedbackWidget::MaxStartingOpacity' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MaxHealthFeedbackOpacity) == 0x000654, "Member 'UHWDamageFeedbackWidget::MaxHealthFeedbackOpacity' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, StartingHealthFeedbackPercent) == 0x000658, "Member 'UHWDamageFeedbackWidget::StartingHealthFeedbackPercent' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, TrackedDamageIndicatorData) == 0x000708, "Member 'UHWDamageFeedbackWidget::TrackedDamageIndicatorData' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, DamageIndicatorPointers) == 0x000718, "Member 'UHWDamageFeedbackWidget::DamageIndicatorPointers' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MaxInstanceCount) == 0x000728, "Member 'UHWDamageFeedbackWidget::MaxInstanceCount' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, DamageIndicatorOverlay) == 0x000730, "Member 'UHWDamageFeedbackWidget::DamageIndicatorOverlay' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, DamageIndicatorPointerClass) == 0x000738, "Member 'UHWDamageFeedbackWidget::DamageIndicatorPointerClass' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, IntensityDecayPerSecond) == 0x000740, "Member 'UHWDamageFeedbackWidget::IntensityDecayPerSecond' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, MaxIntensity) == 0x000744, "Member 'UHWDamageFeedbackWidget::MaxIntensity' has a wrong offset!");
static_assert(offsetof(UHWDamageFeedbackWidget, OffScreenProjectedDistance) == 0x000748, "Member 'UHWDamageFeedbackWidget::OffScreenProjectedDistance' has a wrong offset!");

// Class HemingwayUI.HWDamageIndicatorPointerWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWDamageIndicatorPointerWidget : public UHWWidget
{
public:
	float                                         InnerMagnitude;                                    // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterMagnitude;                                    // 0x05FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ClearData();
	void SetDamageFeedbackIndicatorData(const struct FHWDamageFeedbackIndicatorData& DamageData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDamageIndicatorPointerWidget">();
	}
	static class UHWDamageIndicatorPointerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDamageIndicatorPointerWidget>();
	}
};
static_assert(alignof(UHWDamageIndicatorPointerWidget) == 0x000008, "Wrong alignment on UHWDamageIndicatorPointerWidget");
static_assert(sizeof(UHWDamageIndicatorPointerWidget) == 0x000600, "Wrong size on UHWDamageIndicatorPointerWidget");
static_assert(offsetof(UHWDamageIndicatorPointerWidget, InnerMagnitude) == 0x0005F8, "Member 'UHWDamageIndicatorPointerWidget::InnerMagnitude' has a wrong offset!");
static_assert(offsetof(UHWDamageIndicatorPointerWidget, OuterMagnitude) == 0x0005FC, "Member 'UHWDamageIndicatorPointerWidget::OuterMagnitude' has a wrong offset!");

// Class HemingwayUI.HWDisplayInfoEffectWidgetManager
// 0x0118 (0x0710 - 0x05F8)
class UHWDisplayInfoEffectWidgetManager : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              ConfigDTSoftPtr;                                   // 0x05F8(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, TSubclassOf<class UHWDisplayInfoEffectWidget>> DisplayInfoTagToWidgetClassMap; // 0x0620(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWDisplayInfoEffectWidget*> CachedWidgetMap;                    // 0x0670(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWDisplayInfoEffectWidget*> ActiveWidgetMap;                    // 0x06C0(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleDisplayInfoAdded(const struct FHWDisplayInfo& InDisplayInfo);
	void HandleDisplayInfoRemoved(const struct FHWDisplayInfo& InDisplayInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDisplayInfoEffectWidgetManager">();
	}
	static class UHWDisplayInfoEffectWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDisplayInfoEffectWidgetManager>();
	}
};
static_assert(alignof(UHWDisplayInfoEffectWidgetManager) == 0x000008, "Wrong alignment on UHWDisplayInfoEffectWidgetManager");
static_assert(sizeof(UHWDisplayInfoEffectWidgetManager) == 0x000710, "Wrong size on UHWDisplayInfoEffectWidgetManager");
static_assert(offsetof(UHWDisplayInfoEffectWidgetManager, ConfigDTSoftPtr) == 0x0005F8, "Member 'UHWDisplayInfoEffectWidgetManager::ConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWDisplayInfoEffectWidgetManager, DisplayInfoTagToWidgetClassMap) == 0x000620, "Member 'UHWDisplayInfoEffectWidgetManager::DisplayInfoTagToWidgetClassMap' has a wrong offset!");
static_assert(offsetof(UHWDisplayInfoEffectWidgetManager, CachedWidgetMap) == 0x000670, "Member 'UHWDisplayInfoEffectWidgetManager::CachedWidgetMap' has a wrong offset!");
static_assert(offsetof(UHWDisplayInfoEffectWidgetManager, ActiveWidgetMap) == 0x0006C0, "Member 'UHWDisplayInfoEffectWidgetManager::ActiveWidgetMap' has a wrong offset!");

// Class HemingwayUI.HWEndOfMatchLobbyRankedProgressEntry
// 0x0000 (0x0630 - 0x0630)
class UHWEndOfMatchLobbyRankedProgressEntry : public UHWEndOfMatchLobbyResultsEntry
{
public:
	void PopulateRankedProgress(const struct FHWEndOfMatchRankedProgressSource& RankedProgress);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyRankedProgressEntry">();
	}
	static class UHWEndOfMatchLobbyRankedProgressEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyRankedProgressEntry>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyRankedProgressEntry) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyRankedProgressEntry");
static_assert(sizeof(UHWEndOfMatchLobbyRankedProgressEntry) == 0x000630, "Wrong size on UHWEndOfMatchLobbyRankedProgressEntry");

// Class HemingwayUI.HWEndOfMatchLobbyWidget
// 0x0118 (0x0710 - 0x05F8)
class UHWEndOfMatchLobbyWidget : public UHWWidget
{
public:
	class FString                                 CachedMatchId;                                     // 0x05F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEndOfMatchLobbyDetailsWidget*        EndOfMatchDetails;                                 // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UWorld>                  MainLobbyMap;                                      // 0x0610(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            LeaveQueueGamepadAction;                           // 0x0640(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PlayAgainGamepadAction;                            // 0x0680(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            FocusTextChatAction;                               // 0x06C0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_700[0x10];                                     // 0x0700(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UHWButton*> GetTabButtons();
	TArray<class UHWOverlay*> GetTabViews();
	void HandleOnQueueStatusChanged(ERH_MatchStatus QueueStatus);
	void OnFocusTextChatAction();
	void OnLeaveQueueGamepadAction();
	void OnPlayAgainGamepadAction();
	void PopulateEndOfMatchDetails();
	void PopulateEndOfMatchDetailsPlayer(class AHWPlayerState* PlayerState);
	void PopulateEndOfMatchDetailsTeam(const struct FGenericTeamId& TeamId, bool bIsFriendly);
	void RejoinSelectedQueue();
	void ReturnToLobby();
	void UpdatePlayAgainButtonState(bool bButtonEnabled);
	void UpdatePlayAgainButtonVisibility(bool bShouldShow);

	class FText GetGameModeName() const;
	class FText GetMatchSessionId() const;
	class URHPartyManager* GetPartyManager() const;
	class URHQueueDataFactory* GetQueueDataFactory() const;
	int32 GetTeamPlacement() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEndOfMatchLobbyWidget">();
	}
	static class UHWEndOfMatchLobbyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEndOfMatchLobbyWidget>();
	}
};
static_assert(alignof(UHWEndOfMatchLobbyWidget) == 0x000008, "Wrong alignment on UHWEndOfMatchLobbyWidget");
static_assert(sizeof(UHWEndOfMatchLobbyWidget) == 0x000710, "Wrong size on UHWEndOfMatchLobbyWidget");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, CachedMatchId) == 0x0005F8, "Member 'UHWEndOfMatchLobbyWidget::CachedMatchId' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, EndOfMatchDetails) == 0x000608, "Member 'UHWEndOfMatchLobbyWidget::EndOfMatchDetails' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, MainLobbyMap) == 0x000610, "Member 'UHWEndOfMatchLobbyWidget::MainLobbyMap' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, LeaveQueueGamepadAction) == 0x000640, "Member 'UHWEndOfMatchLobbyWidget::LeaveQueueGamepadAction' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, PlayAgainGamepadAction) == 0x000680, "Member 'UHWEndOfMatchLobbyWidget::PlayAgainGamepadAction' has a wrong offset!");
static_assert(offsetof(UHWEndOfMatchLobbyWidget, FocusTextChatAction) == 0x0006C0, "Member 'UHWEndOfMatchLobbyWidget::FocusTextChatAction' has a wrong offset!");

// Class HemingwayUI.HWEquipmentAcquisitionPopupManager
// 0x0010 (0x0608 - 0x05F8)
class UHWEquipmentAcquisitionPopupManager : public UHWWidget
{
public:
	class UHWEquipmentPopupDisplayWidget*         PopupDisplayWidget;                                // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDetailLevelSettingUpdated();
	void HandlePlayerInventoryTrackerInitialized();
	void OnEquipmentItemPurchased(class UHWEquipmentInstance* EquipmentInstance);
	void OnEquipmentLevelChanged(class UHWEquipmentInstance* EquipmentChanged, const int32 PreviousLevel);

	EHWEquipmentAcquisitionDetailLevel GetCurrentDetailLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentAcquisitionPopupManager">();
	}
	static class UHWEquipmentAcquisitionPopupManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentAcquisitionPopupManager>();
	}
};
static_assert(alignof(UHWEquipmentAcquisitionPopupManager) == 0x000008, "Wrong alignment on UHWEquipmentAcquisitionPopupManager");
static_assert(sizeof(UHWEquipmentAcquisitionPopupManager) == 0x000608, "Wrong size on UHWEquipmentAcquisitionPopupManager");
static_assert(offsetof(UHWEquipmentAcquisitionPopupManager, PopupDisplayWidget) == 0x0005F8, "Member 'UHWEquipmentAcquisitionPopupManager::PopupDisplayWidget' has a wrong offset!");

// Class HemingwayUI.HWEquipmentPopupWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWEquipmentPopupWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWEquipmentPopupWidget* Widget)> OnWidgetHide;              // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_608[0x10];                                     // 0x0608(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayEquipment(const class UHWEquipmentInstance* EquipmentInstance);
	void HandleDisplayTimerFired();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentPopupWidget">();
	}
	static class UHWEquipmentPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentPopupWidget>();
	}
};
static_assert(alignof(UHWEquipmentPopupWidget) == 0x000008, "Wrong alignment on UHWEquipmentPopupWidget");
static_assert(sizeof(UHWEquipmentPopupWidget) == 0x000618, "Wrong size on UHWEquipmentPopupWidget");
static_assert(offsetof(UHWEquipmentPopupWidget, OnWidgetHide) == 0x0005F8, "Member 'UHWEquipmentPopupWidget::OnWidgetHide' has a wrong offset!");

// Class HemingwayUI.HWEquipmentAcquisitionPopupWidget
// 0x0008 (0x0620 - 0x0618)
class UHWEquipmentAcquisitionPopupWidget : public UHWEquipmentPopupWidget
{
public:
	EHWEquipmentAcquisitionDetailLevel            DetailLevel;                                       // 0x0618(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDetailLevel(EHWEquipmentAcquisitionDetailLevel NewDetailLevel);
	void UpdateLayout();

	EHWEquipmentAcquisitionDetailLevel GetDetailLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentAcquisitionPopupWidget">();
	}
	static class UHWEquipmentAcquisitionPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentAcquisitionPopupWidget>();
	}
};
static_assert(alignof(UHWEquipmentAcquisitionPopupWidget) == 0x000008, "Wrong alignment on UHWEquipmentAcquisitionPopupWidget");
static_assert(sizeof(UHWEquipmentAcquisitionPopupWidget) == 0x000620, "Wrong size on UHWEquipmentAcquisitionPopupWidget");
static_assert(offsetof(UHWEquipmentAcquisitionPopupWidget, DetailLevel) == 0x000618, "Member 'UHWEquipmentAcquisitionPopupWidget::DetailLevel' has a wrong offset!");

// Class HemingwayUI.HWEquipmentPopupDisplayWidget
// 0x0068 (0x0660 - 0x05F8)
class UHWEquipmentPopupDisplayWidget : public UHWWidget
{
public:
	struct FGameplayTag                           InventoryEquipmentType;                            // 0x05F8(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWEquipmentPopupWidget>    EquipmentPopupWidgetClass;                         // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWEquipmentPopupWidget>    AbilityEquipmentPopupWidgetClass;                  // 0x0608(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ItemWidgetDisplayTime;                             // 0x0610(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AbilityWidgetDisplayTime;                          // 0x0614(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         WidgetDisplayLimit;                                // 0x0618(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialPoolSize;                                   // 0x061C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHWEquipmentPopupWidget*>        WidgetPool;                                        // 0x0620(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWEquipmentPopupWidget*>        AbilityWidgetPool;                                 // 0x0630(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWEquipmentPopupWidget*>        VisibleWidgets;                                    // 0x0640(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWEquipmentInstance*>           DisplayQueue;                                      // 0x0650(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	class UHWEquipmentPopupWidget* DisplayEquipment(const class UHWEquipmentInstance* EquipmentInstance);
	void DisplayWidget(class UHWEquipmentPopupWidget* Widget);
	void RecycleAbilityWidget(class UHWEquipmentPopupWidget* Widget);
	void RecycleWidget(class UHWEquipmentPopupWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentPopupDisplayWidget">();
	}
	static class UHWEquipmentPopupDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentPopupDisplayWidget>();
	}
};
static_assert(alignof(UHWEquipmentPopupDisplayWidget) == 0x000008, "Wrong alignment on UHWEquipmentPopupDisplayWidget");
static_assert(sizeof(UHWEquipmentPopupDisplayWidget) == 0x000660, "Wrong size on UHWEquipmentPopupDisplayWidget");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, InventoryEquipmentType) == 0x0005F8, "Member 'UHWEquipmentPopupDisplayWidget::InventoryEquipmentType' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, EquipmentPopupWidgetClass) == 0x000600, "Member 'UHWEquipmentPopupDisplayWidget::EquipmentPopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, AbilityEquipmentPopupWidgetClass) == 0x000608, "Member 'UHWEquipmentPopupDisplayWidget::AbilityEquipmentPopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, ItemWidgetDisplayTime) == 0x000610, "Member 'UHWEquipmentPopupDisplayWidget::ItemWidgetDisplayTime' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, AbilityWidgetDisplayTime) == 0x000614, "Member 'UHWEquipmentPopupDisplayWidget::AbilityWidgetDisplayTime' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, WidgetDisplayLimit) == 0x000618, "Member 'UHWEquipmentPopupDisplayWidget::WidgetDisplayLimit' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, InitialPoolSize) == 0x00061C, "Member 'UHWEquipmentPopupDisplayWidget::InitialPoolSize' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, WidgetPool) == 0x000620, "Member 'UHWEquipmentPopupDisplayWidget::WidgetPool' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, AbilityWidgetPool) == 0x000630, "Member 'UHWEquipmentPopupDisplayWidget::AbilityWidgetPool' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, VisibleWidgets) == 0x000640, "Member 'UHWEquipmentPopupDisplayWidget::VisibleWidgets' has a wrong offset!");
static_assert(offsetof(UHWEquipmentPopupDisplayWidget, DisplayQueue) == 0x000650, "Member 'UHWEquipmentPopupDisplayWidget::DisplayQueue' has a wrong offset!");

// Class HemingwayUI.HWEventHandler_Default
// 0x0000 (0x0028 - 0x0028)
class UHWEventHandler_Default final : public UHWEventHandlerBase
{
public:
	void DisplayAccoladeByTag(const struct FGameplayTag& AccoladeTag, const struct FHWEventContext& EventContext);
	void DisplayEventTextByTag(const struct FGameplayTag& EventTextTag, const struct FHWEventContext& EventContext);
	void PlayVOByTag(const struct FGameplayTag& VOTag);

	class AHWGameHUD* GetHWGameHUD() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventHandler_Default">();
	}
	static class UHWEventHandler_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventHandler_Default>();
	}
};
static_assert(alignof(UHWEventHandler_Default) == 0x000008, "Wrong alignment on UHWEventHandler_Default");
static_assert(sizeof(UHWEventHandler_Default) == 0x000028, "Wrong size on UHWEventHandler_Default");

// Class HemingwayUI.HWEventStompAssessor_Default
// 0x0000 (0x0028 - 0x0028)
class UHWEventStompAssessor_Default final : public UHWEventStompAssessorBase
{
public:
	class AHWGameHUD* GetHWGameHUD() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventStompAssessor_Default">();
	}
	static class UHWEventStompAssessor_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventStompAssessor_Default>();
	}
};
static_assert(alignof(UHWEventStompAssessor_Default) == 0x000008, "Wrong alignment on UHWEventStompAssessor_Default");
static_assert(sizeof(UHWEventStompAssessor_Default) == 0x000028, "Wrong size on UHWEventStompAssessor_Default");

// Class HemingwayUI.HWEventTextEntryWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWEventTextEntryWidget : public UHWWidget
{
public:
	class UHWEventTextBuilderBase*                CachedTextBuilder;                                 // 0x05F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_600[0x20];                                     // 0x0600(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_StartDisplay();
	void BP_StartOutro();
	void HandleTextBuilderTextReady(const class FText& TextToDisplay);
	void LoadEventContext(const struct FHWEventContext& EventContext);
	void SetDisplayText(const class FText& InText);

	float GetOutroDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventTextEntryWidget">();
	}
	static class UHWEventTextEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventTextEntryWidget>();
	}
};
static_assert(alignof(UHWEventTextEntryWidget) == 0x000008, "Wrong alignment on UHWEventTextEntryWidget");
static_assert(sizeof(UHWEventTextEntryWidget) == 0x000620, "Wrong size on UHWEventTextEntryWidget");
static_assert(offsetof(UHWEventTextEntryWidget, CachedTextBuilder) == 0x0005F8, "Member 'UHWEventTextEntryWidget::CachedTextBuilder' has a wrong offset!");

// Class HemingwayUI.HWEventTextWidgetManager
// 0x00B0 (0x06A8 - 0x05F8)
class UHWEventTextWidgetManager : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              EventTextConfigDTSoftPtr;                          // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWEventTextEntryWidget>    EntryWidgetClass;                                  // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntryDuration;                                     // 0x0628(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumEntries;                                     // 0x062C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialPoolSize;                                   // 0x0630(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FHWEventTextConfig> EventTextTagToConfigMap;                    // 0x0638(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UHWEventTextEntryWidget*>        WidgetPool;                                        // 0x0688(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWEventTextEntryWidget*>        VisibleWidgets;                                    // 0x0698(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddEntryToContainer(class UHWEventTextEntryWidget* EntryWidget);
	void RemoveEntryFromContainer(class UHWEventTextEntryWidget* EntryWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEventTextWidgetManager">();
	}
	static class UHWEventTextWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEventTextWidgetManager>();
	}
};
static_assert(alignof(UHWEventTextWidgetManager) == 0x000008, "Wrong alignment on UHWEventTextWidgetManager");
static_assert(sizeof(UHWEventTextWidgetManager) == 0x0006A8, "Wrong size on UHWEventTextWidgetManager");
static_assert(offsetof(UHWEventTextWidgetManager, EventTextConfigDTSoftPtr) == 0x0005F8, "Member 'UHWEventTextWidgetManager::EventTextConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, EntryWidgetClass) == 0x000620, "Member 'UHWEventTextWidgetManager::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, EntryDuration) == 0x000628, "Member 'UHWEventTextWidgetManager::EntryDuration' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, MaxNumEntries) == 0x00062C, "Member 'UHWEventTextWidgetManager::MaxNumEntries' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, InitialPoolSize) == 0x000630, "Member 'UHWEventTextWidgetManager::InitialPoolSize' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, EventTextTagToConfigMap) == 0x000638, "Member 'UHWEventTextWidgetManager::EventTextTagToConfigMap' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, WidgetPool) == 0x000688, "Member 'UHWEventTextWidgetManager::WidgetPool' has a wrong offset!");
static_assert(offsetof(UHWEventTextWidgetManager, VisibleWidgets) == 0x000698, "Member 'UHWEventTextWidgetManager::VisibleWidgets' has a wrong offset!");

// Class HemingwayUI.HWFeedNotificationBaseWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWFeedNotificationBaseWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x18];                                     // 0x05F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetupNotification(const class AActor* EventInstigator, const class AActor* Affected, const TArray<class UObject*>& Info);

	const struct FGameplayTag GetEventTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFeedNotificationBaseWidget">();
	}
	static class UHWFeedNotificationBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFeedNotificationBaseWidget>();
	}
};
static_assert(alignof(UHWFeedNotificationBaseWidget) == 0x000008, "Wrong alignment on UHWFeedNotificationBaseWidget");
static_assert(sizeof(UHWFeedNotificationBaseWidget) == 0x000610, "Wrong size on UHWFeedNotificationBaseWidget");

// Class HemingwayUI.HWFeedNotificationDisplayer
// 0x0080 (0x0678 - 0x05F8)
class UHWFeedNotificationDisplayer final : public UHWWidget
{
public:
	int32                                         MaxDisplayedNotifications;                         // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FHWFeedNotificationConfig> NotificationConfigs;                 // 0x0600(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWFeedNotificationBaseWidget*>  VisibleNotifications;                              // 0x0650(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UPanelWidget*                           NotificationContainer;                             // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWFeedNotificationBaseWidget*>  QueuedNotifications;                               // 0x0668(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleGameFeedNotification(const struct FGameplayTag& EventTag, const class AActor* EventInstigator, const class AActor* Affected, const TArray<class UObject*>& Info);
	void HandleWidgetHideSequenceFinished(class URHWidget* Widget);
	void ShowNextNotification();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFeedNotificationDisplayer">();
	}
	static class UHWFeedNotificationDisplayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFeedNotificationDisplayer>();
	}
};
static_assert(alignof(UHWFeedNotificationDisplayer) == 0x000008, "Wrong alignment on UHWFeedNotificationDisplayer");
static_assert(sizeof(UHWFeedNotificationDisplayer) == 0x000678, "Wrong size on UHWFeedNotificationDisplayer");
static_assert(offsetof(UHWFeedNotificationDisplayer, MaxDisplayedNotifications) == 0x0005F8, "Member 'UHWFeedNotificationDisplayer::MaxDisplayedNotifications' has a wrong offset!");
static_assert(offsetof(UHWFeedNotificationDisplayer, NotificationConfigs) == 0x000600, "Member 'UHWFeedNotificationDisplayer::NotificationConfigs' has a wrong offset!");
static_assert(offsetof(UHWFeedNotificationDisplayer, VisibleNotifications) == 0x000650, "Member 'UHWFeedNotificationDisplayer::VisibleNotifications' has a wrong offset!");
static_assert(offsetof(UHWFeedNotificationDisplayer, NotificationContainer) == 0x000660, "Member 'UHWFeedNotificationDisplayer::NotificationContainer' has a wrong offset!");
static_assert(offsetof(UHWFeedNotificationDisplayer, QueuedNotifications) == 0x000668, "Member 'UHWFeedNotificationDisplayer::QueuedNotifications' has a wrong offset!");

// Class HemingwayUI.HWFeedNotification_GodKill
// 0x0000 (0x0610 - 0x0610)
class UHWFeedNotification_GodKill final : public UHWFeedNotificationBaseWidget
{
public:
	void DisplayAssisters(const TArray<class UHWCharacterItem*>& CharacterItems);
	void DisplayKilled(const class UHWCharacterItem* CharacterItem, bool bIsFriendly, const struct FGenericTeamId& TeamId);
	void DisplayKiller(const class UHWCharacterItem* CharacterItem, bool bIsFriendly, const struct FGenericTeamId& TeamId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFeedNotification_GodKill">();
	}
	static class UHWFeedNotification_GodKill* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFeedNotification_GodKill>();
	}
};
static_assert(alignof(UHWFeedNotification_GodKill) == 0x000008, "Wrong alignment on UHWFeedNotification_GodKill");
static_assert(sizeof(UHWFeedNotification_GodKill) == 0x000610, "Wrong size on UHWFeedNotification_GodKill");

// Class HemingwayUI.HWFloatingTextDisplay
// 0x0070 (0x0668 - 0x05F8)
class UHWFloatingTextDisplay final : public UHWWidget
{
public:
	class UCanvasPanel*                           FloatingTextContainer;                             // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWFloatingTextPoolManager> PoolManager;                                    // 0x0600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  CurrentOwner;                                      // 0x0608(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWDisplayedFloatingText>       DisplayedTexts;                                    // 0x0610(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x28];                                     // 0x0620(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWFloatingTextDisplayQueue>    FloatingTextQueues;                                // 0x0648(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWFloatingTextTimedOffset>     FloatingTextTimedOffsets;                          // 0x0658(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void AdditiveNumberSettingChanged();
	void ClearDisplay();
	bool DisplayNumber(const struct FGameplayCueParameters& Parameters);
	void HandleWidgetAnimationFinished(class UHWFloatingTextWidget* FloatingTextWidget);

	bool CanDisplay(const struct FGameplayCueParameters& Parameters, const struct FHWFloatingTextConfig& Config) const;
	class AActor* GetCurrentOwner() const;
	bool IsDisplayingTexts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextDisplay">();
	}
	static class UHWFloatingTextDisplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextDisplay>();
	}
};
static_assert(alignof(UHWFloatingTextDisplay) == 0x000008, "Wrong alignment on UHWFloatingTextDisplay");
static_assert(sizeof(UHWFloatingTextDisplay) == 0x000668, "Wrong size on UHWFloatingTextDisplay");
static_assert(offsetof(UHWFloatingTextDisplay, FloatingTextContainer) == 0x0005F8, "Member 'UHWFloatingTextDisplay::FloatingTextContainer' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplay, PoolManager) == 0x000600, "Member 'UHWFloatingTextDisplay::PoolManager' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplay, CurrentOwner) == 0x000608, "Member 'UHWFloatingTextDisplay::CurrentOwner' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplay, DisplayedTexts) == 0x000610, "Member 'UHWFloatingTextDisplay::DisplayedTexts' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplay, FloatingTextQueues) == 0x000648, "Member 'UHWFloatingTextDisplay::FloatingTextQueues' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplay, FloatingTextTimedOffsets) == 0x000658, "Member 'UHWFloatingTextDisplay::FloatingTextTimedOffsets' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextDisplayActor
// 0x0038 (0x02D0 - 0x0298)
class AHWFloatingTextDisplayActor final : public AActor
{
public:
	class UHWFloatingTextDisplay*                 DisplayWidget;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetComponent*                     WidgetComponent;                                   // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A8[0x18];                                     // 0x02A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecycleDelayOnOwnerDestroyed;                      // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C4[0xC];                                      // 0x02C4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOwnerDestroyed(class AActor* DestroyedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextDisplayActor">();
	}
	static class AHWFloatingTextDisplayActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWFloatingTextDisplayActor>();
	}
};
static_assert(alignof(AHWFloatingTextDisplayActor) == 0x000008, "Wrong alignment on AHWFloatingTextDisplayActor");
static_assert(sizeof(AHWFloatingTextDisplayActor) == 0x0002D0, "Wrong size on AHWFloatingTextDisplayActor");
static_assert(offsetof(AHWFloatingTextDisplayActor, DisplayWidget) == 0x000298, "Member 'AHWFloatingTextDisplayActor::DisplayWidget' has a wrong offset!");
static_assert(offsetof(AHWFloatingTextDisplayActor, WidgetComponent) == 0x0002A0, "Member 'AHWFloatingTextDisplayActor::WidgetComponent' has a wrong offset!");
static_assert(offsetof(AHWFloatingTextDisplayActor, RecycleDelayOnOwnerDestroyed) == 0x0002C0, "Member 'AHWFloatingTextDisplayActor::RecycleDelayOnOwnerDestroyed' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextDisplayManager
// 0x0070 (0x0668 - 0x05F8)
class UHWFloatingTextDisplayManager : public UHWWidget
{
public:
	class UCanvasPanel*                           FloatingTextContainer;                             // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWFloatingTextPoolManager*             FloatingTextPoolManager;                           // 0x0600(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AActor>, class UHWFloatingTextDisplay*> ActiveFloatingTextDisplays;    // 0x0608(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWFloatingTextDisplay*>         FreeTextDisplays;                                  // 0x0658(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void DisplayFromGameplayCue(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextDisplayManager">();
	}
	static class UHWFloatingTextDisplayManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextDisplayManager>();
	}
};
static_assert(alignof(UHWFloatingTextDisplayManager) == 0x000008, "Wrong alignment on UHWFloatingTextDisplayManager");
static_assert(sizeof(UHWFloatingTextDisplayManager) == 0x000668, "Wrong size on UHWFloatingTextDisplayManager");
static_assert(offsetof(UHWFloatingTextDisplayManager, FloatingTextContainer) == 0x0005F8, "Member 'UHWFloatingTextDisplayManager::FloatingTextContainer' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplayManager, FloatingTextPoolManager) == 0x000600, "Member 'UHWFloatingTextDisplayManager::FloatingTextPoolManager' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplayManager, ActiveFloatingTextDisplays) == 0x000608, "Member 'UHWFloatingTextDisplayManager::ActiveFloatingTextDisplays' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextDisplayManager, FreeTextDisplays) == 0x000658, "Member 'UHWFloatingTextDisplayManager::FreeTextDisplays' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextEffectCompareWidget
// 0x0018 (0x06B8 - 0x06A0)
class UHWFloatingTextEffectCompareWidget : public UHWFloatingTextWidget
{
public:
	class FText                                   AnimatedTextOverride;                              // 0x06A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextEffectCompareWidget">();
	}
	static class UHWFloatingTextEffectCompareWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextEffectCompareWidget>();
	}
};
static_assert(alignof(UHWFloatingTextEffectCompareWidget) == 0x000008, "Wrong alignment on UHWFloatingTextEffectCompareWidget");
static_assert(sizeof(UHWFloatingTextEffectCompareWidget) == 0x0006B8, "Wrong size on UHWFloatingTextEffectCompareWidget");
static_assert(offsetof(UHWFloatingTextEffectCompareWidget, AnimatedTextOverride) == 0x0006A0, "Member 'UHWFloatingTextEffectCompareWidget::AnimatedTextOverride' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextPoolManager
// 0x00C8 (0x00F0 - 0x0028)
class UHWFloatingTextPoolManager : public UObject
{
public:
	struct FGameplayTag                           DefaultPoolTag;                                    // 0x0028(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWFloatingTextConfig> PoolConfigs;                             // 0x0030(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWFloatingTextQueueConfig>     QueueConfigs;                                      // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWFloatingTextTimedOffsetConfig> TimedOffsetConfigs;                              // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWFloatingTextPool*> WidgetPools;                               // 0x00A0(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	class UHWFloatingTextWidget* GetFloatingTextWidget(const struct FGameplayTag& Tag);
	void ReleaseFloatingTextWidget(class UHWFloatingTextWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextPoolManager">();
	}
	static class UHWFloatingTextPoolManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextPoolManager>();
	}
};
static_assert(alignof(UHWFloatingTextPoolManager) == 0x000008, "Wrong alignment on UHWFloatingTextPoolManager");
static_assert(sizeof(UHWFloatingTextPoolManager) == 0x0000F0, "Wrong size on UHWFloatingTextPoolManager");
static_assert(offsetof(UHWFloatingTextPoolManager, DefaultPoolTag) == 0x000028, "Member 'UHWFloatingTextPoolManager::DefaultPoolTag' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextPoolManager, PoolConfigs) == 0x000030, "Member 'UHWFloatingTextPoolManager::PoolConfigs' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextPoolManager, QueueConfigs) == 0x000080, "Member 'UHWFloatingTextPoolManager::QueueConfigs' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextPoolManager, TimedOffsetConfigs) == 0x000090, "Member 'UHWFloatingTextPoolManager::TimedOffsetConfigs' has a wrong offset!");
static_assert(offsetof(UHWFloatingTextPoolManager, WidgetPools) == 0x0000A0, "Member 'UHWFloatingTextPoolManager::WidgetPools' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextScaleConfig
// 0x0010 (0x0040 - 0x0030)
class UHWFloatingTextScaleConfig final : public UDataAsset
{
public:
	TArray<struct FHWFloatingTextScaleEntry>      FloatingTextScaleConfigs;                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextScaleConfig">();
	}
	static class UHWFloatingTextScaleConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextScaleConfig>();
	}
};
static_assert(alignof(UHWFloatingTextScaleConfig) == 0x000008, "Wrong alignment on UHWFloatingTextScaleConfig");
static_assert(sizeof(UHWFloatingTextScaleConfig) == 0x000040, "Wrong size on UHWFloatingTextScaleConfig");
static_assert(offsetof(UHWFloatingTextScaleConfig, FloatingTextScaleConfigs) == 0x000030, "Member 'UHWFloatingTextScaleConfig::FloatingTextScaleConfigs' has a wrong offset!");

// Class HemingwayUI.HWFloatingTextScaleWidget
// 0x0008 (0x06A8 - 0x06A0)
class UHWFloatingTextScaleWidget : public UHWFloatingTextWidget
{
public:
	class UHWFloatingTextScaleConfig*             ScaleConfig;                                       // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWFloatingTextScaleWidget">();
	}
	static class UHWFloatingTextScaleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWFloatingTextScaleWidget>();
	}
};
static_assert(alignof(UHWFloatingTextScaleWidget) == 0x000008, "Wrong alignment on UHWFloatingTextScaleWidget");
static_assert(sizeof(UHWFloatingTextScaleWidget) == 0x0006A8, "Wrong size on UHWFloatingTextScaleWidget");
static_assert(offsetof(UHWFloatingTextScaleWidget, ScaleConfig) == 0x0006A0, "Member 'UHWFloatingTextScaleWidget::ScaleConfig' has a wrong offset!");

// Class HemingwayUI.HWGameplayCueFloatingText
// 0x0000 (0x0040 - 0x0040)
class UHWGameplayCueFloatingText : public UGameplayCueNotify_Static
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayCueFloatingText">();
	}
	static class UHWGameplayCueFloatingText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayCueFloatingText>();
	}
};
static_assert(alignof(UHWGameplayCueFloatingText) == 0x000008, "Wrong alignment on UHWGameplayCueFloatingText");
static_assert(sizeof(UHWGameplayCueFloatingText) == 0x000040, "Wrong size on UHWGameplayCueFloatingText");

// Class HemingwayUI.HWGameResultWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWGameResultWidget : public UHWWidget
{
public:
	void DisplayResult(bool bVictory);
	void HandleOnPhaseConfigChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void HandleOnTeamPlacementOrderUpdated(const TArray<struct FGenericTeamId>& TeamPlacementOrder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameResultWidget">();
	}
	static class UHWGameResultWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameResultWidget>();
	}
};
static_assert(alignof(UHWGameResultWidget) == 0x000008, "Wrong alignment on UHWGameResultWidget");
static_assert(sizeof(UHWGameResultWidget) == 0x0005F8, "Wrong size on UHWGameResultWidget");

// Class HemingwayUI.HWGameScoreWidget
// 0x00A8 (0x06A0 - 0x05F8)
class UHWGameScoreWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurrentPhase;                                      // 0x0608(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FWidgetChild> GameModeSpecificWidget;                           // 0x0610(0x0050)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWGameScoreTeamData>           TeamsData;                                         // 0x0660(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bTrackTeamGoldAdvantage;                           // 0x0670(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x3];                                      // 0x0671(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TiedGoldAdvantageThreshold;                        // 0x0674(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GoldAdvantageUpdateDelay;                          // 0x0678(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackTeamKillAdvantage;                           // 0x0680(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TiedKillAdvantageThreshold;                        // 0x0684(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KillAdvantageUpdateDelay;                          // 0x0688(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackTeamXPAdvantage;                             // 0x0690(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_691[0x3];                                      // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TiedXPAdvantageThreshold;                          // 0x0694(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         XPAdvantageUpdateDelay;                            // 0x0698(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayLocalTeamGoldAdvantage(int32 GoldAdvantage, bool bIsTied);
	void DisplayLocalTeamKillAdvantage(int32 KillAdvantage, bool bIsTied);
	void DisplayLocalTeamXPAdvantage(int32 XPAdvantage, bool bIsTied);
	void DisplayTeamGold(const struct FGenericTeamId& TeamId, int32 Gold);
	void DisplayTeamKills(const struct FGenericTeamId& TeamId, int32 Kills);
	void DisplayTeamXP(const struct FGenericTeamId& TeamId, int32 XP);
	void GamePhaseChanged(const struct FGameplayTag& NewPhaseTag);
	void HandleGamePhaseChanged(const struct FGameplayTag& PhaseTag, float PhaseStartTime, float PhaseDuration);
	void HandleLocalPlayerTeamChanged(const struct FGenericTeamId& NewTeamId);
	void HandleReceivedGameMode();
	void HandleTeamGoldEarnedUpdated(class AHWTeamState* TeamState, int32 NewTeamGold);
	void HandleTeamKillsUpdated(class AHWTeamState* TeamState, int32 NewTeamKills);
	void HandleTeamStatsTrackerReplicated(class AHWTeamState* TeamState, class AHWTeamStatsTracker* TeamStatsTracker);
	void HandleTeamsUpdated();
	void HandleTeamXPEarnedUpdated(class AHWTeamState* TeamState, int32 NewTeamXP);
	void HideTooltip();
	void LocalPlayerTeamChanged(const struct FGenericTeamId& LocalTeamId, const struct FGenericTeamId& EnemyTeamId);
	void ShowTooltip(class UWidget* ReferenceWidget, const TArray<class FText>& Tips, const int32 CurrentIndex, EHWTooltipAxis Axis);
	void UnregisterFromTimerEvents();
	void UpdateGameTime();

	float GetGameTime(bool bCountBackwards) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameScoreWidget">();
	}
	static class UHWGameScoreWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameScoreWidget>();
	}
};
static_assert(alignof(UHWGameScoreWidget) == 0x000008, "Wrong alignment on UHWGameScoreWidget");
static_assert(sizeof(UHWGameScoreWidget) == 0x0006A0, "Wrong size on UHWGameScoreWidget");
static_assert(offsetof(UHWGameScoreWidget, CurrentPhase) == 0x000608, "Member 'UHWGameScoreWidget::CurrentPhase' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, GameModeSpecificWidget) == 0x000610, "Member 'UHWGameScoreWidget::GameModeSpecificWidget' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, TeamsData) == 0x000660, "Member 'UHWGameScoreWidget::TeamsData' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, bTrackTeamGoldAdvantage) == 0x000670, "Member 'UHWGameScoreWidget::bTrackTeamGoldAdvantage' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, TiedGoldAdvantageThreshold) == 0x000674, "Member 'UHWGameScoreWidget::TiedGoldAdvantageThreshold' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, GoldAdvantageUpdateDelay) == 0x000678, "Member 'UHWGameScoreWidget::GoldAdvantageUpdateDelay' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, bTrackTeamKillAdvantage) == 0x000680, "Member 'UHWGameScoreWidget::bTrackTeamKillAdvantage' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, TiedKillAdvantageThreshold) == 0x000684, "Member 'UHWGameScoreWidget::TiedKillAdvantageThreshold' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, KillAdvantageUpdateDelay) == 0x000688, "Member 'UHWGameScoreWidget::KillAdvantageUpdateDelay' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, bTrackTeamXPAdvantage) == 0x000690, "Member 'UHWGameScoreWidget::bTrackTeamXPAdvantage' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, TiedXPAdvantageThreshold) == 0x000694, "Member 'UHWGameScoreWidget::TiedXPAdvantageThreshold' has a wrong offset!");
static_assert(offsetof(UHWGameScoreWidget, XPAdvantageUpdateDelay) == 0x000698, "Member 'UHWGameScoreWidget::XPAdvantageUpdateDelay' has a wrong offset!");

// Class HemingwayUI.HWGoldFuryKillCounter
// 0x0010 (0x0608 - 0x05F8)
class UHWGoldFuryKillCounter : public UHWWidget
{
public:
	bool                                          bTrackFriendlyTeam;                                // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWTeamState>            CurrentTrackedTeam;                                // 0x05FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleGoldFuryKillsUpdated(class AHWTeamState* TeamState, int32 GoldFuryKills);
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleTeamStatsTrackerReplicated(class AHWTeamState* TeamState, class AHWTeamStatsTracker* TeamStatsTracker);
	void HandleTeamsUpdated();
	void UpdateGoldFuryKills(int32 NewKillCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGoldFuryKillCounter">();
	}
	static class UHWGoldFuryKillCounter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGoldFuryKillCounter>();
	}
};
static_assert(alignof(UHWGoldFuryKillCounter) == 0x000008, "Wrong alignment on UHWGoldFuryKillCounter");
static_assert(sizeof(UHWGoldFuryKillCounter) == 0x000608, "Wrong size on UHWGoldFuryKillCounter");
static_assert(offsetof(UHWGoldFuryKillCounter, bTrackFriendlyTeam) == 0x0005F8, "Member 'UHWGoldFuryKillCounter::bTrackFriendlyTeam' has a wrong offset!");
static_assert(offsetof(UHWGoldFuryKillCounter, CurrentTrackedTeam) == 0x0005FC, "Member 'UHWGoldFuryKillCounter::CurrentTrackedTeam' has a wrong offset!");

// Class HemingwayUI.HWHelpTipWidget
// 0x00B0 (0x06E8 - 0x0638)
class UHWHelpTipWidget : public UHWCharacterWidget
{
public:
	TSoftObjectPtr<class UDataTable>              HelpTipConfigDTSoftPtr;                            // 0x0638(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0x68];                                     // 0x0660(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWHelpTipRequest*>              HelpTipQueue;                                      // 0x06C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UHWHelpTipRequest*                      CurrentPlayingHelpTip;                             // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E0[0x8];                                      // 0x06E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHelpTip(const struct FGameplayTag& HelpTipTag);
	void DisplayHelpTipData(const struct FHWHelpTipConfig& HelpTipConfig);
	void HandleTrackedCharacterDied(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, float RespawnTimerDuration);
	void OnHelpTipEndHide();
	void OnHelpTipShown();
	float OnHelpTipStartHide();
	void RemoveHelpTip(const struct FGameplayTag& HelpTipToRemove);
	void ToggleHelpTipVisible(bool bVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHelpTipWidget">();
	}
	static class UHWHelpTipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHelpTipWidget>();
	}
};
static_assert(alignof(UHWHelpTipWidget) == 0x000008, "Wrong alignment on UHWHelpTipWidget");
static_assert(sizeof(UHWHelpTipWidget) == 0x0006E8, "Wrong size on UHWHelpTipWidget");
static_assert(offsetof(UHWHelpTipWidget, HelpTipConfigDTSoftPtr) == 0x000638, "Member 'UHWHelpTipWidget::HelpTipConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWHelpTipWidget, HelpTipQueue) == 0x0006C8, "Member 'UHWHelpTipWidget::HelpTipQueue' has a wrong offset!");
static_assert(offsetof(UHWHelpTipWidget, CurrentPlayingHelpTip) == 0x0006D8, "Member 'UHWHelpTipWidget::CurrentPlayingHelpTip' has a wrong offset!");

// Class HemingwayUI.HWHUDEditorEditableEntrySlider
// 0x0000 (0x0608 - 0x0608)
class UHWHUDEditorEditableEntrySlider : public UHWHUDEditorEditableEntryCustomField
{
public:
	void DisplayFieldName(const class FText& FieldName);
	void DisplaySliderLimits(float Min, float Max);
	void DisplaySliderValue(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorEditableEntrySlider">();
	}
	static class UHWHUDEditorEditableEntrySlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorEditableEntrySlider>();
	}
};
static_assert(alignof(UHWHUDEditorEditableEntrySlider) == 0x000008, "Wrong alignment on UHWHUDEditorEditableEntrySlider");
static_assert(sizeof(UHWHUDEditorEditableEntrySlider) == 0x000608, "Wrong size on UHWHUDEditorEditableEntrySlider");

// Class HemingwayUI.HWHUDEditorHighlighter
// 0x0000 (0x05F8 - 0x05F8)
class UHWHUDEditorHighlighter : public UHWWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorHighlighter">();
	}
	static class UHWHUDEditorHighlighter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorHighlighter>();
	}
};
static_assert(alignof(UHWHUDEditorHighlighter) == 0x000008, "Wrong alignment on UHWHUDEditorHighlighter");
static_assert(sizeof(UHWHUDEditorHighlighter) == 0x0005F8, "Wrong size on UHWHUDEditorHighlighter");

// Class HemingwayUI.HWHUDEditorLayoutManager
// 0x0098 (0x00C0 - 0x0028)
class UHWHUDEditorLayoutManager final : public UObject
{
public:
	struct FHWHUDEditorLayouts                    SavedLayouts;                                      // 0x0028(0x0020)(Protected, NativeAccessSpecifierProtected)
	struct FHWHUDEditorLayout                     DefaultLayout;                                     // 0x0048(0x0060)(Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWGameHUD>              GameHUD;                                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CommitDirtyLayout();
	void LayoutPresetSettingChanged();
	void ResetToDefaultLayout(bool bSaveSettings);
	void ResetToSelectedLayout(bool bSaveSettings);

	EHWHUDLayoutPreset GetActiveHUDLayoutPreset() const;
	bool IsDefaultLayoutSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDEditorLayoutManager">();
	}
	static class UHWHUDEditorLayoutManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDEditorLayoutManager>();
	}
};
static_assert(alignof(UHWHUDEditorLayoutManager) == 0x000008, "Wrong alignment on UHWHUDEditorLayoutManager");
static_assert(sizeof(UHWHUDEditorLayoutManager) == 0x0000C0, "Wrong size on UHWHUDEditorLayoutManager");
static_assert(offsetof(UHWHUDEditorLayoutManager, SavedLayouts) == 0x000028, "Member 'UHWHUDEditorLayoutManager::SavedLayouts' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorLayoutManager, DefaultLayout) == 0x000048, "Member 'UHWHUDEditorLayoutManager::DefaultLayout' has a wrong offset!");
static_assert(offsetof(UHWHUDEditorLayoutManager, GameHUD) == 0x0000A8, "Member 'UHWHUDEditorLayoutManager::GameHUD' has a wrong offset!");

// Class HemingwayUI.HWIconDisplayBaseWidget
// 0x0058 (0x0690 - 0x0638)
class UHWIconDisplayBaseWidget : public UHWCharacterWidget
{
public:
	bool                                          bDisplayInfoIsHidden;                              // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           IconTag;                                           // 0x063C(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  AssociatedActor;                                   // 0x0644(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DisplayInfoId;                                     // 0x064C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWWidgetComponent>      AssociatedWidgetComponent;                         // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const class UHWIconDisplayBaseWidget* IconDisplayBaseWidget)> OnManualRemoval; // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bPreserveIcon;                                     // 0x0668(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_669[0x1];                                      // 0x0669(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bListenToDisplayInfoComponentFlagUpdates;          // 0x066A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_66B[0x25];                                     // 0x066B(0x0025)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleDisplayInfoComponentFlagsUpdated(class UHWDisplayInfoComponent* DisplayInfoComponent);
	void OnDisplayInfoComponentFlagsUpdated(class UHWDisplayInfoComponent* DisplayInfoComponent);
	void OnWidgetComponentVisibilityChanged(bool bIsVisible);
	void SetAsRemoval();
	void SetDisplayInfoData(class UHWDisplayInfoData* DisplayInfoData);
	void SetScale(float NewScale, float MinScale, float MaxScale);

	class AActor* GetAssociatedActor() const;
	struct FTransform GetAssociatedActorTransform() const;
	class UHWWidgetComponent* GetAssociatedWidgetComponent() const;
	class UHWDisplayInfoComponent* GetDisplayInfoComponent() const;
	int32 GetDisplayInfoId() const;
	EHWSmiteTeamId GetIconSmiteTeamId() const;
	struct FGameplayTag GetIconTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconDisplayBaseWidget">();
	}
	static class UHWIconDisplayBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconDisplayBaseWidget>();
	}
};
static_assert(alignof(UHWIconDisplayBaseWidget) == 0x000008, "Wrong alignment on UHWIconDisplayBaseWidget");
static_assert(sizeof(UHWIconDisplayBaseWidget) == 0x000690, "Wrong size on UHWIconDisplayBaseWidget");
static_assert(offsetof(UHWIconDisplayBaseWidget, bDisplayInfoIsHidden) == 0x000638, "Member 'UHWIconDisplayBaseWidget::bDisplayInfoIsHidden' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, IconTag) == 0x00063C, "Member 'UHWIconDisplayBaseWidget::IconTag' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, AssociatedActor) == 0x000644, "Member 'UHWIconDisplayBaseWidget::AssociatedActor' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, DisplayInfoId) == 0x00064C, "Member 'UHWIconDisplayBaseWidget::DisplayInfoId' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, AssociatedWidgetComponent) == 0x000650, "Member 'UHWIconDisplayBaseWidget::AssociatedWidgetComponent' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, OnManualRemoval) == 0x000658, "Member 'UHWIconDisplayBaseWidget::OnManualRemoval' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, bPreserveIcon) == 0x000668, "Member 'UHWIconDisplayBaseWidget::bPreserveIcon' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayBaseWidget, bListenToDisplayInfoComponentFlagUpdates) == 0x00066A, "Member 'UHWIconDisplayBaseWidget::bListenToDisplayInfoComponentFlagUpdates' has a wrong offset!");

// Class HemingwayUI.HWMinimapCharacterIconWidget
// 0x0038 (0x06C8 - 0x0690)
class UHWMinimapCharacterIconWidget : public UHWIconDisplayBaseWidget
{
public:
	bool                                          bTrackHealth;                                      // 0x0690(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackRespawn;                                     // 0x0691(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_692[0x2];                                      // 0x0692(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentHealthPercentage;                           // 0x0694(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackDeath;                                       // 0x06A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0xF];                                      // 0x06A1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackRecall;                                      // 0x06B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B1[0xF];                                      // 0x06B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	EHWIconDisplayBaseTeamSortingZOrder           TeamSortingZOrder;                                 // 0x06C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWMinimapIconColoration                      DefaultColorationType;                             // 0x06C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C2[0x6];                                      // 0x06C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeathUpdated(bool IsActive);
	void HandleTagUpdated_Death(const struct FGameplayTag& Tag, int32 Count);
	void HealthPercentUpdated(float NewPercentage);
	void OnRecallTagChanged(const struct FGameplayTag& Tag, const int32 TagCount);
	void RecallUpdated(bool IsActive);
	void UpdateIconColoration(EHWMinimapIconColoration ColorationType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapCharacterIconWidget">();
	}
	static class UHWMinimapCharacterIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapCharacterIconWidget>();
	}
};
static_assert(alignof(UHWMinimapCharacterIconWidget) == 0x000008, "Wrong alignment on UHWMinimapCharacterIconWidget");
static_assert(sizeof(UHWMinimapCharacterIconWidget) == 0x0006C8, "Wrong size on UHWMinimapCharacterIconWidget");
static_assert(offsetof(UHWMinimapCharacterIconWidget, bTrackHealth) == 0x000690, "Member 'UHWMinimapCharacterIconWidget::bTrackHealth' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, bTrackRespawn) == 0x000691, "Member 'UHWMinimapCharacterIconWidget::bTrackRespawn' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, CurrentHealthPercentage) == 0x000694, "Member 'UHWMinimapCharacterIconWidget::CurrentHealthPercentage' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, bTrackDeath) == 0x0006A0, "Member 'UHWMinimapCharacterIconWidget::bTrackDeath' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, bTrackRecall) == 0x0006B0, "Member 'UHWMinimapCharacterIconWidget::bTrackRecall' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, TeamSortingZOrder) == 0x0006C0, "Member 'UHWMinimapCharacterIconWidget::TeamSortingZOrder' has a wrong offset!");
static_assert(offsetof(UHWMinimapCharacterIconWidget, DefaultColorationType) == 0x0006C1, "Member 'UHWMinimapCharacterIconWidget::DefaultColorationType' has a wrong offset!");

// Class HemingwayUI.HWMinimapFoWWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWMinimapFoWWidget final : public UHWWidget
{
public:
	TWeakObjectPtr<class AActor>                  AssociatedActor;                                   // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AActor* GetAssociatedActor() const;
	float GetMinimapViewRange() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapFoWWidget">();
	}
	static class UHWMinimapFoWWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapFoWWidget>();
	}
};
static_assert(alignof(UHWMinimapFoWWidget) == 0x000008, "Wrong alignment on UHWMinimapFoWWidget");
static_assert(sizeof(UHWMinimapFoWWidget) == 0x000608, "Wrong size on UHWMinimapFoWWidget");
static_assert(offsetof(UHWMinimapFoWWidget, AssociatedActor) == 0x0005F8, "Member 'UHWMinimapFoWWidget::AssociatedActor' has a wrong offset!");

// Class HemingwayUI.HWMinimapMinionCanvasWidget
// 0x0178 (0x0320 - 0x01A8)
class UHWMinimapMinionCanvasWidget final : public UHWCanvasPanel
{
public:
	uint8                                         Pad_1A8[0x10];                                     // 0x01A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWMinimapMinionBlipWidget> MinionBlipWidgetClass;                             // 0x01B8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialDefaultBlipPoolAmount;                      // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialChampionBlipPoolAmount;                     // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         InitialMinotaurBlipPoolAmount;                     // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHWMinionBlipType, struct FHWMinionBlipPool> FriendlyBlipCache;                             // 0x01D0(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<EHWMinionBlipType, struct FHWMinionBlipPool> EnemyBlipCache;                                // 0x0220(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<EHWMinionBlipType, struct FHWMinionStateArray> FriendlyMinionStates;                        // 0x0270(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<EHWMinionBlipType, struct FHWMinionStateArray> EnemyMinionStates;                           // 0x02C0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AHWTeamState>            TrackedTeamState;                                  // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleLocalAbilitySystemActorChanged(class AHWCharacterAbilitySystemActor* NewABSActor);
	void HandleLocalTeamUpdated(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class AHWTeamState* TeamState);
	void HandleUIRelevanceChange();
	void InitializeWidget();
	void PopulateMinionArraysForSpectator();
	void UninitializeWidget();

	bool IsOwnerSpectatorOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapMinionCanvasWidget">();
	}
	static class UHWMinimapMinionCanvasWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapMinionCanvasWidget>();
	}
};
static_assert(alignof(UHWMinimapMinionCanvasWidget) == 0x000008, "Wrong alignment on UHWMinimapMinionCanvasWidget");
static_assert(sizeof(UHWMinimapMinionCanvasWidget) == 0x000320, "Wrong size on UHWMinimapMinionCanvasWidget");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, MinionBlipWidgetClass) == 0x0001B8, "Member 'UHWMinimapMinionCanvasWidget::MinionBlipWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, InitialDefaultBlipPoolAmount) == 0x0001C0, "Member 'UHWMinimapMinionCanvasWidget::InitialDefaultBlipPoolAmount' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, InitialChampionBlipPoolAmount) == 0x0001C4, "Member 'UHWMinimapMinionCanvasWidget::InitialChampionBlipPoolAmount' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, InitialMinotaurBlipPoolAmount) == 0x0001C8, "Member 'UHWMinimapMinionCanvasWidget::InitialMinotaurBlipPoolAmount' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, FriendlyBlipCache) == 0x0001D0, "Member 'UHWMinimapMinionCanvasWidget::FriendlyBlipCache' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, EnemyBlipCache) == 0x000220, "Member 'UHWMinimapMinionCanvasWidget::EnemyBlipCache' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, FriendlyMinionStates) == 0x000270, "Member 'UHWMinimapMinionCanvasWidget::FriendlyMinionStates' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, EnemyMinionStates) == 0x0002C0, "Member 'UHWMinimapMinionCanvasWidget::EnemyMinionStates' has a wrong offset!");
static_assert(offsetof(UHWMinimapMinionCanvasWidget, TrackedTeamState) == 0x000310, "Member 'UHWMinimapMinionCanvasWidget::TrackedTeamState' has a wrong offset!");

// Class HemingwayUI.HWMinimapPingIcon
// 0x0050 (0x06E0 - 0x0690)
class UHWMinimapPingIcon final : public UHWIconDisplayBaseWidget
{
public:
	TMap<struct FGameplayTag, TSoftObjectPtr<class UMetaSoundSource>> PingTagToSFX;                  // 0x0690(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapPingIcon">();
	}
	static class UHWMinimapPingIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapPingIcon>();
	}
};
static_assert(alignof(UHWMinimapPingIcon) == 0x000008, "Wrong alignment on UHWMinimapPingIcon");
static_assert(sizeof(UHWMinimapPingIcon) == 0x0006E0, "Wrong size on UHWMinimapPingIcon");
static_assert(offsetof(UHWMinimapPingIcon, PingTagToSFX) == 0x000690, "Member 'UHWMinimapPingIcon::PingTagToSFX' has a wrong offset!");

// Class HemingwayUI.HWMinimapSmiteNPCIconWidget
// 0x0020 (0x06E8 - 0x06C8)
class UHWMinimapSmiteNPCIconWidget final : public UHWMinimapCharacterIconWidget
{
public:
	TArray<struct FHWHealthTexturePair>           HealthTextures;                                    // 0x06C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x06D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BaseMaterial;                                      // 0x06E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UTexture2D* GetTextureForTeam(EHWSmiteTeamId SmiteTeamId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapSmiteNPCIconWidget">();
	}
	static class UHWMinimapSmiteNPCIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapSmiteNPCIconWidget>();
	}
};
static_assert(alignof(UHWMinimapSmiteNPCIconWidget) == 0x000008, "Wrong alignment on UHWMinimapSmiteNPCIconWidget");
static_assert(sizeof(UHWMinimapSmiteNPCIconWidget) == 0x0006E8, "Wrong size on UHWMinimapSmiteNPCIconWidget");
static_assert(offsetof(UHWMinimapSmiteNPCIconWidget, HealthTextures) == 0x0006C8, "Member 'UHWMinimapSmiteNPCIconWidget::HealthTextures' has a wrong offset!");
static_assert(offsetof(UHWMinimapSmiteNPCIconWidget, DynamicMaterial) == 0x0006D8, "Member 'UHWMinimapSmiteNPCIconWidget::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(UHWMinimapSmiteNPCIconWidget, BaseMaterial) == 0x0006E0, "Member 'UHWMinimapSmiteNPCIconWidget::BaseMaterial' has a wrong offset!");

// Class HemingwayUI.HWMinimapWidget
// 0x0228 (0x0908 - 0x06E0)
class UHWMinimapWidget : public UHWIconDisplayerBase
{
public:
	uint8                                         Pad_6E0[0x8];                                      // 0x06E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWMinimapWidgetConfig*                 MinimapConfig;                                     // 0x06E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCanvasPanel*                         IconCanvasContainer;                               // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWMinimapIconWidgetConfig> IconConfigs;                        // 0x06F8(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_748[0x8];                                      // 0x0748(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   CustomInputMappingContext;                         // 0x0750(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UInputAction*, struct FGameplayTag> KBMInputActionToPingTagMap;                       // 0x0758(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           GamepadMovePingAction;                             // 0x07A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UInputAction*, struct FGameplayTag> GamepadInputActionToPingTagMap;                   // 0x07B0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           GamepadExitPingAction;                             // 0x0800(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_808[0x24];                                     // 0x0808(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFlipped;                                        // 0x082C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_82D[0x3];                                      // 0x082D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWImage*                               VisionHighlightImage;                              // 0x0830(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VisionMapSize;                                     // 0x0838(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_83C[0x4];                                      // 0x083C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2DDynamic*                      VisionHighlightTexture;                            // 0x0840(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      VisionHighlightMI;                                 // 0x0848(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_850[0xB8];                                     // 0x0850(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayMapTexture(const TSoftObjectPtr<class UTexture2D>& MapTexture);
	bool GetPingTagFromPointerEvent(const struct FPointerEvent& InPointerEvent, struct FGameplayTag* OutPingTag);
	void HandleLocalPlayerTeamChanged(const struct FGenericTeamId& NewTeam);
	void HandleTogglePingCursor(bool bIsPingCursorActive);
	void Input_MovePing(const struct FInputActionValue& InputActionValue);
	void MinimapFlippedChanged();
	void OnGrassCollisionChange(class AHWDeployable_Ward* Ward, class AActor* GrassCollision);
	void SendPing(const struct FVector2D& MinimapPosition, const struct FGameplayTag& PingTag, bool bSkipFlipCheck);
	void TogglePingCursorOnHUD(bool bToggleOn);
	void UpdateVisionHighlightMaterial();

	struct FVector2D GetGamepadPingLocation() const;
	float GetMinimapScale() const;
	class FText GetPingWarningText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMinimapWidget">();
	}
	static class UHWMinimapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMinimapWidget>();
	}
};
static_assert(alignof(UHWMinimapWidget) == 0x000008, "Wrong alignment on UHWMinimapWidget");
static_assert(sizeof(UHWMinimapWidget) == 0x000908, "Wrong size on UHWMinimapWidget");
static_assert(offsetof(UHWMinimapWidget, MinimapConfig) == 0x0006E8, "Member 'UHWMinimapWidget::MinimapConfig' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, IconCanvasContainer) == 0x0006F0, "Member 'UHWMinimapWidget::IconCanvasContainer' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, IconConfigs) == 0x0006F8, "Member 'UHWMinimapWidget::IconConfigs' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, CustomInputMappingContext) == 0x000750, "Member 'UHWMinimapWidget::CustomInputMappingContext' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, KBMInputActionToPingTagMap) == 0x000758, "Member 'UHWMinimapWidget::KBMInputActionToPingTagMap' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, GamepadMovePingAction) == 0x0007A8, "Member 'UHWMinimapWidget::GamepadMovePingAction' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, GamepadInputActionToPingTagMap) == 0x0007B0, "Member 'UHWMinimapWidget::GamepadInputActionToPingTagMap' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, GamepadExitPingAction) == 0x000800, "Member 'UHWMinimapWidget::GamepadExitPingAction' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, bIsFlipped) == 0x00082C, "Member 'UHWMinimapWidget::bIsFlipped' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, VisionHighlightImage) == 0x000830, "Member 'UHWMinimapWidget::VisionHighlightImage' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, VisionMapSize) == 0x000838, "Member 'UHWMinimapWidget::VisionMapSize' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, VisionHighlightTexture) == 0x000840, "Member 'UHWMinimapWidget::VisionHighlightTexture' has a wrong offset!");
static_assert(offsetof(UHWMinimapWidget, VisionHighlightMI) == 0x000848, "Member 'UHWMinimapWidget::VisionHighlightMI' has a wrong offset!");

// Class HemingwayUI.HWIconDisplayDeployableWidget
// 0x0008 (0x0698 - 0x0690)
class UHWIconDisplayDeployableWidget : public UHWIconDisplayBaseWidget
{
public:
	EHWIconDisplayBaseTeamSortingZOrder           TeamSortingZOrder;                                 // 0x0690(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAbilitySystemActorTeamUpdated(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class AHWTeamState* TeamState);
	void HandleDeployableOwnerReplicated();

	class AHWDeployable* GetTrackedDeployable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconDisplayDeployableWidget">();
	}
	static class UHWIconDisplayDeployableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconDisplayDeployableWidget>();
	}
};
static_assert(alignof(UHWIconDisplayDeployableWidget) == 0x000008, "Wrong alignment on UHWIconDisplayDeployableWidget");
static_assert(sizeof(UHWIconDisplayDeployableWidget) == 0x000698, "Wrong size on UHWIconDisplayDeployableWidget");
static_assert(offsetof(UHWIconDisplayDeployableWidget, TeamSortingZOrder) == 0x000690, "Member 'UHWIconDisplayDeployableWidget::TeamSortingZOrder' has a wrong offset!");

// Class HemingwayUI.HWIconDisplayJungleWidget
// 0x00A8 (0x0738 - 0x0690)
class UHWIconDisplayJungleWidget final : public UHWIconDisplayBaseWidget
{
public:
	TMap<struct FGameplayTag, struct FHWJungleCampWidgetConfig> CampTypeConfigs;                     // 0x0690(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FHWJungleCampWidgetConfig              DefaultConfig;                                     // 0x06E0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0718(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BaseMaterial;                                      // 0x0720(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWDisplayInfoJungleComponent> AssociatedJungleCamp;                        // 0x0728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_730[0x8];                                      // 0x0730(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConfigureFromTag(const struct FGameplayTag& CampTypeTag);
	void DisplayCampActive(bool bCampIsActive);
	void DisplayRespawnPercentage(float Percentage);
	void HandleJungleCampUpdated();

	struct FHWJungleCampWidgetConfig GetJungleCampConfig() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconDisplayJungleWidget">();
	}
	static class UHWIconDisplayJungleWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconDisplayJungleWidget>();
	}
};
static_assert(alignof(UHWIconDisplayJungleWidget) == 0x000008, "Wrong alignment on UHWIconDisplayJungleWidget");
static_assert(sizeof(UHWIconDisplayJungleWidget) == 0x000738, "Wrong size on UHWIconDisplayJungleWidget");
static_assert(offsetof(UHWIconDisplayJungleWidget, CampTypeConfigs) == 0x000690, "Member 'UHWIconDisplayJungleWidget::CampTypeConfigs' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayJungleWidget, DefaultConfig) == 0x0006E0, "Member 'UHWIconDisplayJungleWidget::DefaultConfig' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayJungleWidget, DynamicMaterial) == 0x000718, "Member 'UHWIconDisplayJungleWidget::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayJungleWidget, BaseMaterial) == 0x000720, "Member 'UHWIconDisplayJungleWidget::BaseMaterial' has a wrong offset!");
static_assert(offsetof(UHWIconDisplayJungleWidget, AssociatedJungleCamp) == 0x000728, "Member 'UHWIconDisplayJungleWidget::AssociatedJungleCamp' has a wrong offset!");

// Class HemingwayUI.HWIconDisplayPingWidgetBase
// 0x0000 (0x0690 - 0x0690)
class UHWIconDisplayPingWidgetBase final : public UHWIconDisplayBaseWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWIconDisplayPingWidgetBase">();
	}
	static class UHWIconDisplayPingWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWIconDisplayPingWidgetBase>();
	}
};
static_assert(alignof(UHWIconDisplayPingWidgetBase) == 0x000008, "Wrong alignment on UHWIconDisplayPingWidgetBase");
static_assert(sizeof(UHWIconDisplayPingWidgetBase) == 0x000690, "Wrong size on UHWIconDisplayPingWidgetBase");

// Class HemingwayUI.HWWorldOverlayDeployableHealthPips
// 0x0000 (0x0698 - 0x0698)
class UHWWorldOverlayDeployableHealthPips final : public UHWIconDisplayDeployableWidget
{
public:
	void SetFilledPips(int32 InFilledPips, ETeamAttitude InTeamAttitude);
	void SetMaxPips(int32 InMaxPips);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayDeployableHealthPips">();
	}
	static class UHWWorldOverlayDeployableHealthPips* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayDeployableHealthPips>();
	}
};
static_assert(alignof(UHWWorldOverlayDeployableHealthPips) == 0x000008, "Wrong alignment on UHWWorldOverlayDeployableHealthPips");
static_assert(sizeof(UHWWorldOverlayDeployableHealthPips) == 0x000698, "Wrong size on UHWWorldOverlayDeployableHealthPips");

// Class HemingwayUI.HWWorldOverlayInteractWidget
// 0x0010 (0x06A0 - 0x0690)
class UHWWorldOverlayInteractWidget final : public UHWIconDisplayBaseWidget
{
public:
	class UHWInteractDisplayInfoData*             InteractDisplayInfoData;                           // 0x0690(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnInteractabilityMemberReplicated();
	void HandleOnInteractionCancelled(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator);
	void HandleOnInteractionCompleted(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator);
	void HandleOnInteractionStarted(class UHWInteractableComponent* Interactable, class AActor* InteractInstigator);
	void HandleOnInteractPromptTextUpdated(const class FText& UpdatedPromptText);
	void HandleOnUpdateIsCurrentlyTargeted(const bool bIsCurrentlyTargeted);
	void UpdateChannelProgressDisplay(float TimeRemaining, float Duration);
	void UpdateInteractDisplay(bool bInProgress, bool bLockedOut);
	void UpdatePromptText(const class FText& InPromptText);

	class UHWInteractableComponent* GetAssociatedInteractableComponent() const;
	class AActor* GetLocalPlayerPawn() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayInteractWidget">();
	}
	static class UHWWorldOverlayInteractWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayInteractWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayInteractWidget) == 0x000008, "Wrong alignment on UHWWorldOverlayInteractWidget");
static_assert(sizeof(UHWWorldOverlayInteractWidget) == 0x0006A0, "Wrong size on UHWWorldOverlayInteractWidget");
static_assert(offsetof(UHWWorldOverlayInteractWidget, InteractDisplayInfoData) == 0x000690, "Member 'UHWWorldOverlayInteractWidget::InteractDisplayInfoData' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayNameplateConfig
// 0x0010 (0x0040 - 0x0030)
class UHWWorldOverlayNameplateConfig final : public UDataAsset
{
public:
	TArray<struct FHWWorldOverlayNameplateCCFlags> CCFlagsList;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayNameplateConfig">();
	}
	static class UHWWorldOverlayNameplateConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayNameplateConfig>();
	}
};
static_assert(alignof(UHWWorldOverlayNameplateConfig) == 0x000008, "Wrong alignment on UHWWorldOverlayNameplateConfig");
static_assert(sizeof(UHWWorldOverlayNameplateConfig) == 0x000040, "Wrong size on UHWWorldOverlayNameplateConfig");
static_assert(offsetof(UHWWorldOverlayNameplateConfig, CCFlagsList) == 0x000030, "Member 'UHWWorldOverlayNameplateConfig::CCFlagsList' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayNameplateWidget
// 0x0020 (0x06B0 - 0x0690)
class UHWWorldOverlayNameplateWidget final : public UHWIconDisplayBaseWidget
{
public:
	TWeakObjectPtr<class AHWPlayerState>          FamiliarPlayerState;                               // 0x0690(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWorldOverlayNameplateConfig*         ConfigAsset;                                       // 0x0698(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A0[0x1];                                      // 0x06A0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EHWNameplateHighlightType                     NameplateHighlightType;                            // 0x06A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A2[0x3];                                      // 0x06A2(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackLastHitIndicator;                            // 0x06A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A6[0xA];                                      // 0x06A6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdateDisplayName(const class FString& DisplayName);
	void DisplayCCImmuneBorderGlow(bool bShowGlow);
	void DisplayCCImmuneText(const class FText& ImmunityText);
	void DisplayTitle(bool bDisplay, class UHWCollectionItem* TitleAsset);
	void HandleCharacterPlayerStateChanged(class AHWCharacter_Base* OwnerCharacter, class AHWPlayerState* NewPlayerState);
	void HandleLocalCharacterNameplateToggled();
	void HandleNameplateNameDisplayOptionChanged();
	void HandlePlayerUuidReplicated(class AHWPlayerState* PlayerState, const struct FGuid& NewUuid);
	void HandleTagUpdated_HasLastHitIndicator(const struct FGameplayTag& Tag, int32 Count);
	void OnHasLastHitIndicator(bool bHasLastHitIndicator);
	void OnLastHitValueSet(double LastHitValue);
	void OnReceivedRemotePlayerLoadout(bool bSuccess, const struct FHWPlayerLoadout& InPlayerLoadout);
	bool ShouldShowTargeted();
	void UpdateCCDisplay(const struct FGameplayTagContainer& ActiveCCTags);
	void UpdateLockedOnState();
	void UpdateNameplateHighlight();
	void UpdateShouldShowFullNameplate(bool bShouldShowFullNameplate);
	void UpdateTargetedState();

	bool GetCharacterName(class FString* OutCharacterName) const;
	bool GetPlayerName(class FString* OutPlayerName) const;
	bool IsLockedOn() const;
	bool IsTargeted() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayNameplateWidget">();
	}
	static class UHWWorldOverlayNameplateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayNameplateWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayNameplateWidget) == 0x000008, "Wrong alignment on UHWWorldOverlayNameplateWidget");
static_assert(sizeof(UHWWorldOverlayNameplateWidget) == 0x0006B0, "Wrong size on UHWWorldOverlayNameplateWidget");
static_assert(offsetof(UHWWorldOverlayNameplateWidget, FamiliarPlayerState) == 0x000690, "Member 'UHWWorldOverlayNameplateWidget::FamiliarPlayerState' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayNameplateWidget, ConfigAsset) == 0x000698, "Member 'UHWWorldOverlayNameplateWidget::ConfigAsset' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayNameplateWidget, NameplateHighlightType) == 0x0006A1, "Member 'UHWWorldOverlayNameplateWidget::NameplateHighlightType' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayNameplateWidget, bTrackLastHitIndicator) == 0x0006A5, "Member 'UHWWorldOverlayNameplateWidget::bTrackLastHitIndicator' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayNPEWidget
// 0x0000 (0x0690 - 0x0690)
class UHWWorldOverlayNPEWidget final : public UHWIconDisplayBaseWidget
{
public:
	void SetHelpTipVisibility(bool bIsVisible);
	void UpdateHelpTipVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayNPEWidget">();
	}
	static class UHWWorldOverlayNPEWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayNPEWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayNPEWidget) == 0x000008, "Wrong alignment on UHWWorldOverlayNPEWidget");
static_assert(sizeof(UHWWorldOverlayNPEWidget) == 0x000690, "Wrong size on UHWWorldOverlayNPEWidget");

// Class HemingwayUI.HWWorldOverlayNameplatePassiveAddonConfig
// 0x0050 (0x0080 - 0x0030)
class UHWWorldOverlayNameplatePassiveAddonConfig final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FHWWorldOverlayNameplatePassiveAddonWidgetConfig> WidgetConfigs; // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayNameplatePassiveAddonConfig">();
	}
	static class UHWWorldOverlayNameplatePassiveAddonConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayNameplatePassiveAddonConfig>();
	}
};
static_assert(alignof(UHWWorldOverlayNameplatePassiveAddonConfig) == 0x000008, "Wrong alignment on UHWWorldOverlayNameplatePassiveAddonConfig");
static_assert(sizeof(UHWWorldOverlayNameplatePassiveAddonConfig) == 0x000080, "Wrong size on UHWWorldOverlayNameplatePassiveAddonConfig");
static_assert(offsetof(UHWWorldOverlayNameplatePassiveAddonConfig, WidgetConfigs) == 0x000030, "Member 'UHWWorldOverlayNameplatePassiveAddonConfig::WidgetConfigs' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayPassiveManager
// 0x0068 (0x06A0 - 0x0638)
class UHWWorldOverlayPassiveManager final : public UHWCharacterWidget
{
public:
	TWeakObjectPtr<class AHWPlayerState>          LocalTrackedPlayerState;                           // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWCharacterAbilitySystemActor> LocalTrackedABSActor;                       // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWorldOverlayNameplatePassiveAddonConfig* PassiveAddonConfigAsset;                       // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x30];                                     // 0x0650(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDisplayPassiveAddon;                              // 0x0680(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWOverlay*                             PassiveAddonContainer;                             // 0x0688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWorldOverlayPassiveWidget*           ActivePassiveWidget;                               // 0x0690(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleCharacterItemChanged_Local(TScriptInterface<class IHWInterface_LoadoutManagement> LoadoutOwner, const class UHWCharacterItem* NewCharacterItem);
	void HandleLocalPlayerStateReceived_Local(class AHWPlayerState* PlayerState);
	void HandlePlayerStateAbilitySystemActorChanged_Local(class AHWPlayerState* PlayerState, class AHWCharacterAbilitySystemActor* NewABSActor);
	void OnPassiveWidgetClassLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayPassiveManager">();
	}
	static class UHWWorldOverlayPassiveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayPassiveManager>();
	}
};
static_assert(alignof(UHWWorldOverlayPassiveManager) == 0x000008, "Wrong alignment on UHWWorldOverlayPassiveManager");
static_assert(sizeof(UHWWorldOverlayPassiveManager) == 0x0006A0, "Wrong size on UHWWorldOverlayPassiveManager");
static_assert(offsetof(UHWWorldOverlayPassiveManager, LocalTrackedPlayerState) == 0x000638, "Member 'UHWWorldOverlayPassiveManager::LocalTrackedPlayerState' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayPassiveManager, LocalTrackedABSActor) == 0x000640, "Member 'UHWWorldOverlayPassiveManager::LocalTrackedABSActor' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayPassiveManager, PassiveAddonConfigAsset) == 0x000648, "Member 'UHWWorldOverlayPassiveManager::PassiveAddonConfigAsset' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayPassiveManager, bDisplayPassiveAddon) == 0x000680, "Member 'UHWWorldOverlayPassiveManager::bDisplayPassiveAddon' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayPassiveManager, PassiveAddonContainer) == 0x000688, "Member 'UHWWorldOverlayPassiveManager::PassiveAddonContainer' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayPassiveManager, ActivePassiveWidget) == 0x000690, "Member 'UHWWorldOverlayPassiveManager::ActivePassiveWidget' has a wrong offset!");

// Class HemingwayUI.HWWorldOverlayPassiveWidget
// 0x0000 (0x0638 - 0x0638)
class UHWWorldOverlayPassiveWidget final : public UHWCharacterWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayPassiveWidget">();
	}
	static class UHWWorldOverlayPassiveWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayPassiveWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayPassiveWidget) == 0x000008, "Wrong alignment on UHWWorldOverlayPassiveWidget");
static_assert(sizeof(UHWWorldOverlayPassiveWidget) == 0x000638, "Wrong size on UHWWorldOverlayPassiveWidget");

// Class HemingwayUI.HWWorldOverlayWidget
// 0x0270 (0x0950 - 0x06E0)
class alignas(0x10) UHWWorldOverlayWidget : public UHWIconDisplayerBase
{
public:
	TMap<struct FGameplayTag, struct FHWWorldOverlayIconWidgetConfig> IconConfigs;                   // 0x06E0(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_730[0x50];                                     // 0x0730(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LOSChecksPerSecond;                                // 0x0780(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_784[0x4];                                      // 0x0784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCanvasPanel*                         WidgetCanvas;                                      // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_790[0x1B0];                                    // 0x0790(0x01B0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableScreenProjection;                           // 0x0940(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_941[0xF];                                      // 0x0941(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlayerSettingsUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWorldOverlayWidget">();
	}
	static class UHWWorldOverlayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWorldOverlayWidget>();
	}
};
static_assert(alignof(UHWWorldOverlayWidget) == 0x000010, "Wrong alignment on UHWWorldOverlayWidget");
static_assert(sizeof(UHWWorldOverlayWidget) == 0x000950, "Wrong size on UHWWorldOverlayWidget");
static_assert(offsetof(UHWWorldOverlayWidget, IconConfigs) == 0x0006E0, "Member 'UHWWorldOverlayWidget::IconConfigs' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayWidget, LOSChecksPerSecond) == 0x000780, "Member 'UHWWorldOverlayWidget::LOSChecksPerSecond' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayWidget, WidgetCanvas) == 0x000788, "Member 'UHWWorldOverlayWidget::WidgetCanvas' has a wrong offset!");
static_assert(offsetof(UHWWorldOverlayWidget, bEnableScreenProjection) == 0x000940, "Member 'UHWWorldOverlayWidget::bEnableScreenProjection' has a wrong offset!");

// Class HemingwayUI.HWInWorldTextWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWInWorldTextWidget final : public UHWWidget
{
public:
	void HandleInWorldTextUpdated(const class FText& NewInWorldText);
	void SetAssociatedWidgetComponent(class UHWInWorldTextWidgetComponent* InComponent);
	void SetWrapText(const bool bShouldWrap, const float InWrapTextAt);

	class UHWTextBlock* GetTextWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInWorldTextWidget">();
	}
	static class UHWInWorldTextWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInWorldTextWidget>();
	}
};
static_assert(alignof(UHWInWorldTextWidget) == 0x000008, "Wrong alignment on UHWInWorldTextWidget");
static_assert(sizeof(UHWInWorldTextWidget) == 0x0005F8, "Wrong size on UHWInWorldTextWidget");

// Class HemingwayUI.HWItemStoreAllItemListWidget
// 0x03D8 (0x09D0 - 0x05F8)
class UHWItemStoreAllItemListWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemCategoryWidget*> VisibleItemCategories;                             // 0x0600(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   ItemCategoryList;                                  // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreItemFilterWidget*           FilterWidget;                                      // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreRoleFilterWidget*           RoleFilterWidget;                                  // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreGodBuilderInfoWidget> GodBuilderInfoClass;                         // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreItemCategoryWidget> ItemCategoryClass;                             // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemEntry*>          SelectedItemEntries;                               // 0x0638(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   OverflowCategoryLabel;                             // 0x0648(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   StartingBuildLabel;                                // 0x0660(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   FinalBuildLabel;                                   // 0x0678(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   PinnedBuildLabel;                                  // 0x0690(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class FText                                   AutoBuildLabel;                                    // 0x06A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItemCache;                                // 0x06C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreGodBuilderInfoWidget*       GodBuilderInfoWidget;                              // 0x06C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEditableTextBox*                     SearchTextBox;                                     // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWAllItemListFilter>           ItemListFilterConfig;                              // 0x06E0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWAllItemListRoleFilters>      ItemListRoleFilterConfig;                          // 0x06F0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UHWItemStoreItemCategoryWidget*         OverflowCategoryWidget;                            // 0x0700(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x41];                                     // 0x0708(0x0041)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsWindows;                                        // 0x0749(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74A[0x6];                                      // 0x074A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIContextCalloutDisplay               SelectItemContextCalloutDisplay;                   // 0x0750(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FUIContextCalloutDisplay               ExitContextCalloutDisplay;                         // 0x0798(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            SearchBindingContainer;                            // 0x07E0(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            FiltersBindingContainer;                           // 0x0820(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ClearFiltersBindingContainer;                      // 0x0860(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NextRoleFilterBindingContainer;                    // 0x08A0(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PreviousRoleFilterBindingContainer;                // 0x08E0(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            InvertCategoryOrderBindingContainer;               // 0x0920(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            OpenGodBuilderBindingContainer;                    // 0x0960(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWNavigationWidgetStitcher*            AllItemListStitcher;                               // 0x09A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A8[0x1C];                                     // 0x09A8(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	EHWItemStoreLayoutType                        CurrentLayout;                                     // 0x09C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWItemStoreGridDetailLevel                   DetailLevel;                                       // 0x09C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C6[0x1];                                      // 0x09C6(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlatformBool                        bUseNewRoleFilters;                                // 0x09C7(0x0003)(Config, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9CA[0x6];                                      // 0x09CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddRoleSortingTag(const struct FGameplayTag& SortingTag, const class FText& FilterLabel, const TArray<struct FHWAllItemListGroup>& CategorySortingInfo, const bool bShouldFilter);
	void AddSortingTag(const struct FGameplayTag& SortingTag, bool bShouldFilter);
	void ClearSearchText();
	void ClearSortingTags(const bool bClearRoles);
	void DisplayInvertCategoriesButton(bool bShouldShow);
	void FindAndSelectItem(const class UHWEquipmentItem* SelectedEquipmentItem);
	void HandleBackFromFilterWidget();
	void HandleCategoryGamepadHovered(class UHWItemStoreItemCategoryWidget* CategoryWidget);
	void HandleDynamicItemAdded(const struct FHWDynamicItemInfo& NewDynamicItem);
	void HandleDynamicItemRemoved(const struct FHWDynamicItemInfo& OldDynamicItem);
	void HandleEquipmentSlotTypeSelected(const struct FGameplayTag& EquipmentSlotType);
	void HandleItemDetailLevelSettingUpdated();
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void OnClearFiltersAction(const bool bClearSearch, const bool bClearRoles);
	void OnClearFiltersActionPressed();
	void OnFilterActionPressed();
	void OnInvertCategoryOrderActionPressed();
	void OnNextRoleFilterActionPressed();
	void OnOpenGodBuilderActionPressed();
	void OnPreviousRoleFilterActionPressed();
	void OnSearchActionPressed();
	void OnSearchTextChanged(const class FText& InText);
	void OnVisibleItemsChanged();
	void PopulateItemsIntoCategories(const TArray<struct FHWAllItemListGroup>& CategorySortingInfo);
	void PopulatePinnedBuildCategories(struct FHWGodBuild* GodBuild);
	void RefreshActiveFocus();
	void RefreshItemVisibility();
	void RemoveRoleSortingTag(const struct FGameplayTag& SortingTag, const bool bShouldFilter);
	void RemoveSortingTag(const struct FGameplayTag& SortingTag, bool bShouldFilter);
	void ScrollToEdge(bool bScrollToTop);
	void UpdateDynamicItemList();
	void UpdateItemListHeader(const class FText& HeaderText);
	void UpdateLayout(EHWItemStoreLayoutType Layout);

	EHWItemStoreGridDetailLevel GetCurrentGridDetailLevel() const;
	EHWItemStoreLayoutType GetCurrentLayoutType() const;
	class UHWItemStoreItemCategoryWidget* GetFirstVisibleItemCategory() const;
	class UHWItemStoreItemEntry* GetItemToFocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreAllItemListWidget">();
	}
	static class UHWItemStoreAllItemListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreAllItemListWidget>();
	}
};
static_assert(alignof(UHWItemStoreAllItemListWidget) == 0x000008, "Wrong alignment on UHWItemStoreAllItemListWidget");
static_assert(sizeof(UHWItemStoreAllItemListWidget) == 0x0009D0, "Wrong size on UHWItemStoreAllItemListWidget");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ItemStoreManager) == 0x0005F8, "Member 'UHWItemStoreAllItemListWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, VisibleItemCategories) == 0x000600, "Member 'UHWItemStoreAllItemListWidget::VisibleItemCategories' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ItemCategoryList) == 0x000610, "Member 'UHWItemStoreAllItemListWidget::ItemCategoryList' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, FilterWidget) == 0x000618, "Member 'UHWItemStoreAllItemListWidget::FilterWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, RoleFilterWidget) == 0x000620, "Member 'UHWItemStoreAllItemListWidget::RoleFilterWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, GodBuilderInfoClass) == 0x000628, "Member 'UHWItemStoreAllItemListWidget::GodBuilderInfoClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ItemCategoryClass) == 0x000630, "Member 'UHWItemStoreAllItemListWidget::ItemCategoryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, SelectedItemEntries) == 0x000638, "Member 'UHWItemStoreAllItemListWidget::SelectedItemEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, OverflowCategoryLabel) == 0x000648, "Member 'UHWItemStoreAllItemListWidget::OverflowCategoryLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, StartingBuildLabel) == 0x000660, "Member 'UHWItemStoreAllItemListWidget::StartingBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, FinalBuildLabel) == 0x000678, "Member 'UHWItemStoreAllItemListWidget::FinalBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, PinnedBuildLabel) == 0x000690, "Member 'UHWItemStoreAllItemListWidget::PinnedBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, AutoBuildLabel) == 0x0006A8, "Member 'UHWItemStoreAllItemListWidget::AutoBuildLabel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, CharacterItemCache) == 0x0006C0, "Member 'UHWItemStoreAllItemListWidget::CharacterItemCache' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, GodBuilderInfoWidget) == 0x0006C8, "Member 'UHWItemStoreAllItemListWidget::GodBuilderInfoWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, SearchTextBox) == 0x0006D8, "Member 'UHWItemStoreAllItemListWidget::SearchTextBox' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ItemListFilterConfig) == 0x0006E0, "Member 'UHWItemStoreAllItemListWidget::ItemListFilterConfig' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ItemListRoleFilterConfig) == 0x0006F0, "Member 'UHWItemStoreAllItemListWidget::ItemListRoleFilterConfig' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, OverflowCategoryWidget) == 0x000700, "Member 'UHWItemStoreAllItemListWidget::OverflowCategoryWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, bIsWindows) == 0x000749, "Member 'UHWItemStoreAllItemListWidget::bIsWindows' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, SelectItemContextCalloutDisplay) == 0x000750, "Member 'UHWItemStoreAllItemListWidget::SelectItemContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ExitContextCalloutDisplay) == 0x000798, "Member 'UHWItemStoreAllItemListWidget::ExitContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, SearchBindingContainer) == 0x0007E0, "Member 'UHWItemStoreAllItemListWidget::SearchBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, FiltersBindingContainer) == 0x000820, "Member 'UHWItemStoreAllItemListWidget::FiltersBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, ClearFiltersBindingContainer) == 0x000860, "Member 'UHWItemStoreAllItemListWidget::ClearFiltersBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, NextRoleFilterBindingContainer) == 0x0008A0, "Member 'UHWItemStoreAllItemListWidget::NextRoleFilterBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, PreviousRoleFilterBindingContainer) == 0x0008E0, "Member 'UHWItemStoreAllItemListWidget::PreviousRoleFilterBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, InvertCategoryOrderBindingContainer) == 0x000920, "Member 'UHWItemStoreAllItemListWidget::InvertCategoryOrderBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, OpenGodBuilderBindingContainer) == 0x000960, "Member 'UHWItemStoreAllItemListWidget::OpenGodBuilderBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, AllItemListStitcher) == 0x0009A0, "Member 'UHWItemStoreAllItemListWidget::AllItemListStitcher' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, CurrentLayout) == 0x0009C4, "Member 'UHWItemStoreAllItemListWidget::CurrentLayout' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, DetailLevel) == 0x0009C5, "Member 'UHWItemStoreAllItemListWidget::DetailLevel' has a wrong offset!");
static_assert(offsetof(UHWItemStoreAllItemListWidget, bUseNewRoleFilters) == 0x0009C7, "Member 'UHWItemStoreAllItemListWidget::bUseNewRoleFilters' has a wrong offset!");

// Class HemingwayUI.HWItemStoreBuildsIntoWidget
// 0x0078 (0x0670 - 0x05F8)
class UHWItemStoreBuildsIntoWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemEntry*>          ItemEntriesPool;                                   // 0x0600(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_610[0x10];                                     // 0x0610(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxEntryCount;                                     // 0x0620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWItemStoreItemEntry*>          VisibleItemEntries;                                // 0x0628(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemEntry*>          OverflowItemEntries;                               // 0x0638(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   BuildsIntoGrid;                                    // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreItemEntry>      BuildsIntoEntryClass;                              // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   ItemTagSortOrder;                                  // 0x0660(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void Clear();
	void DisplayButtonPrompt(bool bShowPrompt);
	void DisplayOverflowButton(int32 OverflowCount);
	void HideOverflowButton();
	void OnBuildsIntoGridCreated();
	void SelectionPanelActivated(bool bActivated);

	bool IsEmpty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreBuildsIntoWidget">();
	}
	static class UHWItemStoreBuildsIntoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreBuildsIntoWidget>();
	}
};
static_assert(alignof(UHWItemStoreBuildsIntoWidget) == 0x000008, "Wrong alignment on UHWItemStoreBuildsIntoWidget");
static_assert(sizeof(UHWItemStoreBuildsIntoWidget) == 0x000670, "Wrong size on UHWItemStoreBuildsIntoWidget");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, ItemStoreManager) == 0x0005F8, "Member 'UHWItemStoreBuildsIntoWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, ItemEntriesPool) == 0x000600, "Member 'UHWItemStoreBuildsIntoWidget::ItemEntriesPool' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, MaxEntryCount) == 0x000620, "Member 'UHWItemStoreBuildsIntoWidget::MaxEntryCount' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, VisibleItemEntries) == 0x000628, "Member 'UHWItemStoreBuildsIntoWidget::VisibleItemEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, OverflowItemEntries) == 0x000638, "Member 'UHWItemStoreBuildsIntoWidget::OverflowItemEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, BuildsIntoGrid) == 0x000648, "Member 'UHWItemStoreBuildsIntoWidget::BuildsIntoGrid' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, BuildsIntoEntryClass) == 0x000650, "Member 'UHWItemStoreBuildsIntoWidget::BuildsIntoEntryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreBuildsIntoWidget, ItemTagSortOrder) == 0x000660, "Member 'UHWItemStoreBuildsIntoWidget::ItemTagSortOrder' has a wrong offset!");

// Class HemingwayUI.HWItemStoreGodBuilderInfoWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWItemStoreGodBuilderInfoWidget : public UHWWidget
{
public:
	void DisplayGodBuildInfo(const struct FHWGodBuild& GodBuild);
	void UpdateGodBuilderInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreGodBuilderInfoWidget">();
	}
	static class UHWItemStoreGodBuilderInfoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreGodBuilderInfoWidget>();
	}
};
static_assert(alignof(UHWItemStoreGodBuilderInfoWidget) == 0x000008, "Wrong alignment on UHWItemStoreGodBuilderInfoWidget");
static_assert(sizeof(UHWItemStoreGodBuilderInfoWidget) == 0x0005F8, "Wrong size on UHWItemStoreGodBuilderInfoWidget");

// Class HemingwayUI.HWItemStoreGodBuildViewer
// 0x0070 (0x06A8 - 0x0638)
class UHWItemStoreGodBuildViewer : public UHWCharacterWidget
{
public:
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        CurrentCharacterItem;                              // 0x0640(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  CurrentlyViewingBuildId;                           // 0x0648(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            PinBuildBindingContainer;                          // 0x0658(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWGodBuilderBuildDisplayWidget*        BuildDisplay;                                      // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayBuilds(const TArray<class UHWGodBuildContainer*>& GodBuildList);
	void DisplayFullBuild(const struct FHWGodBuild& GodBuild);
	void OnCurrentViewingBuildIsPrimaryChanged(bool bCurrentBuildIsPrimary);
	void OnPinBuild();
	void OnPrimaryBuildUpdated(const class UHWCharacterItem* GodItem, const struct FGuid& BuildGuid);
	void PinCurrentBuild();
	void RequestBuildEntries(EHWBuildsListDisplayType ListDisplayType);
	void RequestFullBuild(const struct FGuid& InBuildId);
	void ShowBuildLoading(bool bShouldShow);
	void ShowContentLoading(bool bShouldShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreGodBuildViewer">();
	}
	static class UHWItemStoreGodBuildViewer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreGodBuildViewer>();
	}
};
static_assert(alignof(UHWItemStoreGodBuildViewer) == 0x000008, "Wrong alignment on UHWItemStoreGodBuildViewer");
static_assert(sizeof(UHWItemStoreGodBuildViewer) == 0x0006A8, "Wrong size on UHWItemStoreGodBuildViewer");
static_assert(offsetof(UHWItemStoreGodBuildViewer, CurrentCharacterItem) == 0x000640, "Member 'UHWItemStoreGodBuildViewer::CurrentCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWItemStoreGodBuildViewer, CurrentlyViewingBuildId) == 0x000648, "Member 'UHWItemStoreGodBuildViewer::CurrentlyViewingBuildId' has a wrong offset!");
static_assert(offsetof(UHWItemStoreGodBuildViewer, PinBuildBindingContainer) == 0x000658, "Member 'UHWItemStoreGodBuildViewer::PinBuildBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreGodBuildViewer, BuildDisplay) == 0x0006A0, "Member 'UHWItemStoreGodBuildViewer::BuildDisplay' has a wrong offset!");

// Class HemingwayUI.HWItemStoreInventoryEntry
// 0x0008 (0x0750 - 0x0748)
class UHWItemStoreInventoryEntry : public UHWActivatableEquipmentWidget
{
public:
	TWeakObjectPtr<class UHWEquipmentItem>        TrackedTopParentItem;                              // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const class UHWEquipmentItem* GetTrackedEquipmentItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreInventoryEntry">();
	}
	static class UHWItemStoreInventoryEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreInventoryEntry>();
	}
};
static_assert(alignof(UHWItemStoreInventoryEntry) == 0x000008, "Wrong alignment on UHWItemStoreInventoryEntry");
static_assert(sizeof(UHWItemStoreInventoryEntry) == 0x000750, "Wrong size on UHWItemStoreInventoryEntry");
static_assert(offsetof(UHWItemStoreInventoryEntry, TrackedTopParentItem) == 0x000748, "Member 'UHWItemStoreInventoryEntry::TrackedTopParentItem' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemCategoryWidget
// 0x00C8 (0x06C0 - 0x05F8)
class UHWItemStoreItemCategoryWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreItemEntry>      ItemCategoryEntryClass;                            // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UHWItemStoreItemEntry*>          CategoryItemEntries;                               // 0x0608(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           CategoryHeader;                                    // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   ItemGrid;                                          // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CategoryTag;                                       // 0x0628(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        CharacterItemCache;                                // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWEquipmentItem*>               CurrentItemList;                                   // 0x0638(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SearchText;                                        // 0x0650(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0x60];                                     // 0x0660(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FGameplayTagContainer AddSortingTag(const struct FGameplayTag& SortingTag, bool bShouldFilter);
	class UHWItemStoreItemEntry* AppendEquipmentItem(const class UHWEquipmentItem* EquipmentItem, bool bUpdate);
	void Clear(bool bClearItemData);
	void ClearSearchText();
	const struct FGameplayTagContainer ClearSortingTags(const struct FGameplayTagContainer& TagsToRemove);
	void HandleGamepadHoverItemCategory();
	void OnBuildProfilesLoaded();
	class UHWItemStoreItemEntry* PopulateEquipmentItem(const class UHWEquipmentItem* EquipmentItem);
	void RemoveEquipmentItem(const class UHWEquipmentItem* EquipmentItem);
	const struct FGameplayTagContainer RemoveSortingTag(const struct FGameplayTag& SortingTag, bool bShouldFilter);
	void SelectItemEntry(const class UHWEquipmentItem* EquipmentItem);
	void SetCategoryDescription(const class FText& Text);
	void SetCategoryLabel(const class FText& Label);
	void SetCategoryLongDescription(const class FText& Text);
	void UpdateDetailLevel(EHWItemStoreGridDetailLevel DetailLevel);
	void UpdateLayout(EHWItemStoreLayoutType Layout);
	void UpdateSearchText(const class FText& NewSearchText);

	const struct FGameplayTag GetCategoryConfig() const;
	class UHWItemStoreItemEntry* GetFirstVisibleItemEntry() const;
	class UHWItemStoreItemEntry* GetItemToFocus() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemCategoryWidget">();
	}
	static class UHWItemStoreItemCategoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemCategoryWidget>();
	}
};
static_assert(alignof(UHWItemStoreItemCategoryWidget) == 0x000008, "Wrong alignment on UHWItemStoreItemCategoryWidget");
static_assert(sizeof(UHWItemStoreItemCategoryWidget) == 0x0006C0, "Wrong size on UHWItemStoreItemCategoryWidget");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, ItemStoreManager) == 0x0005F8, "Member 'UHWItemStoreItemCategoryWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, ItemCategoryEntryClass) == 0x000600, "Member 'UHWItemStoreItemCategoryWidget::ItemCategoryEntryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, CategoryItemEntries) == 0x000608, "Member 'UHWItemStoreItemCategoryWidget::CategoryItemEntries' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, CategoryHeader) == 0x000618, "Member 'UHWItemStoreItemCategoryWidget::CategoryHeader' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, ItemGrid) == 0x000620, "Member 'UHWItemStoreItemCategoryWidget::ItemGrid' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, CategoryTag) == 0x000628, "Member 'UHWItemStoreItemCategoryWidget::CategoryTag' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, CharacterItemCache) == 0x000630, "Member 'UHWItemStoreItemCategoryWidget::CharacterItemCache' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, CurrentItemList) == 0x000638, "Member 'UHWItemStoreItemCategoryWidget::CurrentItemList' has a wrong offset!");
static_assert(offsetof(UHWItemStoreItemCategoryWidget, SearchText) == 0x000650, "Member 'UHWItemStoreItemCategoryWidget::SearchText' has a wrong offset!");

// Class HemingwayUI.HWItemStoreItemFixedCategoryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWItemStoreItemFixedCategoryWidget : public UHWWidget
{
public:
	void ClearItemDisplay();
	void OnGoldUpdated(float GoldValue);
	void OnItemSelected(const class UHWEquipmentItem* SelectedEquipmentItem);
	void PopulateItemDisplay(const struct FHWCategoryItems& CategoryItems);
	void SetLabel(const class FText& Label);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreItemFixedCategoryWidget">();
	}
	static class UHWItemStoreItemFixedCategoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreItemFixedCategoryWidget>();
	}
};
static_assert(alignof(UHWItemStoreItemFixedCategoryWidget) == 0x000008, "Wrong alignment on UHWItemStoreItemFixedCategoryWidget");
static_assert(sizeof(UHWItemStoreItemFixedCategoryWidget) == 0x0005F8, "Wrong size on UHWItemStoreItemFixedCategoryWidget");

// Class HemingwayUI.HWItemStoreSelectionWidget
// 0x02A8 (0x08A0 - 0x05F8)
class UHWItemStoreSelectionWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreTreeViewWidget*             ItemTreeWidget;                                    // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Item*                  ItemInfoDisplay;                                   // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreBuildsIntoWidget*           BuildsIntoWidget;                                  // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreItemCategoryWidget*         ItemGrid;                                          // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWItemStoreItemInfo                   SelectedItemInfo;                                  // 0x0620(0x0038)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FHWCanCraftInfo                        SelectedEquipmentCanCraftInfo;                     // 0x0658(0x0080)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FGameplayTag> GridOverrideTags;                                 // 0x06D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FGameplayTag> SlotToEquipmentTypeMap;                           // 0x0728(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_778[0x4];                                      // 0x0778(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentGold;                                       // 0x077C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInShopVolume;                                     // 0x0780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFocused;                                        // 0x0781(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_782[0x6];                                      // 0x0782(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIContextCalloutDisplay               PurchaseContextCalloutDisplay;                     // 0x0788(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FUIContextCalloutDisplay               BackContextCalloutDisplay;                         // 0x07D0(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            SellInputBindingContainer;                         // 0x0818(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            BuildsIntoInputBindingContainer;                   // 0x0858(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_898[0x8];                                      // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayBuildsIntoWidget(bool bShowWidget);
	void DisplayIsFocused(bool bNewIsFocused);
	void DisplayItem(const struct FHWItemStoreItemInfo& DisplayItemInfo);
	void FocusBuildsIntoWidget();
	void HandleAutoBuyStateChanged(EHWAutoBuyState NewState);
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void HandlePlayerInventoryTrackerInitialized();
	void InventoryChanged(class UHWEquipmentInstance* EquipmentInstance, EHWInventoryChangeReason InventoryChangeReason);
	void OnAutoBuyStateChanged(bool bAutoBuyActive);
	void OnBuildsIntoActionPressed();
	void OnLeaveShopVolume();
	void OnSellActionPressed();
	void PlayerInputTypeChanged(bool bIsGamepad);
	void PurchaseSelectedItem();
	void SellSelectedItem();
	void SetUndoAvailable(bool bIsAvailable);
	void UpdateActiveItemDisplay(int32 OwnedActiveItems);
	void UpdateButtons(const struct FHWItemStoreItemInfo& ItemInfo);
	void UpdatePurchaseButton(bool bCanAffordSelectedItem);
	void UpdateSellButton(bool bCanSellSelectedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreSelectionWidget">();
	}
	static class UHWItemStoreSelectionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreSelectionWidget>();
	}
};
static_assert(alignof(UHWItemStoreSelectionWidget) == 0x000008, "Wrong alignment on UHWItemStoreSelectionWidget");
static_assert(sizeof(UHWItemStoreSelectionWidget) == 0x0008A0, "Wrong size on UHWItemStoreSelectionWidget");
static_assert(offsetof(UHWItemStoreSelectionWidget, ItemStoreManager) == 0x0005F8, "Member 'UHWItemStoreSelectionWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, ItemTreeWidget) == 0x000600, "Member 'UHWItemStoreSelectionWidget::ItemTreeWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, ItemInfoDisplay) == 0x000608, "Member 'UHWItemStoreSelectionWidget::ItemInfoDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, BuildsIntoWidget) == 0x000610, "Member 'UHWItemStoreSelectionWidget::BuildsIntoWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, ItemGrid) == 0x000618, "Member 'UHWItemStoreSelectionWidget::ItemGrid' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, SelectedItemInfo) == 0x000620, "Member 'UHWItemStoreSelectionWidget::SelectedItemInfo' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, SelectedEquipmentCanCraftInfo) == 0x000658, "Member 'UHWItemStoreSelectionWidget::SelectedEquipmentCanCraftInfo' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, GridOverrideTags) == 0x0006D8, "Member 'UHWItemStoreSelectionWidget::GridOverrideTags' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, SlotToEquipmentTypeMap) == 0x000728, "Member 'UHWItemStoreSelectionWidget::SlotToEquipmentTypeMap' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, CurrentGold) == 0x00077C, "Member 'UHWItemStoreSelectionWidget::CurrentGold' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, bInShopVolume) == 0x000780, "Member 'UHWItemStoreSelectionWidget::bInShopVolume' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, bIsFocused) == 0x000781, "Member 'UHWItemStoreSelectionWidget::bIsFocused' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, PurchaseContextCalloutDisplay) == 0x000788, "Member 'UHWItemStoreSelectionWidget::PurchaseContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, BackContextCalloutDisplay) == 0x0007D0, "Member 'UHWItemStoreSelectionWidget::BackContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, SellInputBindingContainer) == 0x000818, "Member 'UHWItemStoreSelectionWidget::SellInputBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSelectionWidget, BuildsIntoInputBindingContainer) == 0x000858, "Member 'UHWItemStoreSelectionWidget::BuildsIntoInputBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWItemStoreSubTreeWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWItemStoreSubTreeWidget : public UHWWidget
{
public:
	class UHWImage*                               TopLine;                                           // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHWImage*                               VerticalArrow;                                     // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               HorizontalLine;                                    // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreItemTreeEntry*              ParentItemNode;                                    // 0x0610(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       ChildItemContainer;                                // 0x0618(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x0620(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWItemStoreTreeViewWidget> TreeViewWidget;                                 // 0x0628(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_630[0x1];                                      // 0x0630(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsOwned;                                          // 0x0631(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsParentOwned;                                    // 0x0632(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_633[0x5];                                      // 0x0633(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class UWidget*> GetChildren();
	class UHorizontalBoxSlot* GetSlotByIndex(int32 Index_0);
	void OnChildrenChanged();
	bool PadTreeToDesiredWidth(float TreeWidth);
	void ParentItemNodeClicked();
	void SetSelected(bool bNewIsSelected);
	void UpdateHorizontalLine(EHWItemStoreSubTreeLineWidth LineLength);

	int32 GetChildrenCount() const;
	int32 GetDesiredChildFocusIndex() const;
	bool GetIsOwned() const;
	bool IsOwned() const;
	bool IsParentOwned() const;
	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreSubTreeWidget">();
	}
	static class UHWItemStoreSubTreeWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreSubTreeWidget>();
	}
};
static_assert(alignof(UHWItemStoreSubTreeWidget) == 0x000008, "Wrong alignment on UHWItemStoreSubTreeWidget");
static_assert(sizeof(UHWItemStoreSubTreeWidget) == 0x000638, "Wrong size on UHWItemStoreSubTreeWidget");
static_assert(offsetof(UHWItemStoreSubTreeWidget, TopLine) == 0x0005F8, "Member 'UHWItemStoreSubTreeWidget::TopLine' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, VerticalArrow) == 0x000600, "Member 'UHWItemStoreSubTreeWidget::VerticalArrow' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, HorizontalLine) == 0x000608, "Member 'UHWItemStoreSubTreeWidget::HorizontalLine' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, ParentItemNode) == 0x000610, "Member 'UHWItemStoreSubTreeWidget::ParentItemNode' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, ChildItemContainer) == 0x000618, "Member 'UHWItemStoreSubTreeWidget::ChildItemContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, ItemStoreManager) == 0x000620, "Member 'UHWItemStoreSubTreeWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, TreeViewWidget) == 0x000628, "Member 'UHWItemStoreSubTreeWidget::TreeViewWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, bIsOwned) == 0x000631, "Member 'UHWItemStoreSubTreeWidget::bIsOwned' has a wrong offset!");
static_assert(offsetof(UHWItemStoreSubTreeWidget, bIsParentOwned) == 0x000632, "Member 'UHWItemStoreSubTreeWidget::bIsParentOwned' has a wrong offset!");

// Class HemingwayUI.HWItemStoreTreeViewWidget
// 0x0058 (0x0650 - 0x05F8)
class UHWItemStoreTreeViewWidget : public UHWWidget
{
public:
	TArray<class UHWItemStoreSubTreeWidget*>      VisibleItemTreeWidgets;                            // 0x05F8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UHWItemStoreSubTreeWidget*              ItemTreeRoot;                                      // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWItemStoreSubTreeWidget>  ComponentEntryClass;                               // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UHWEquipmentInstance>> OwnedComponentList;                           // 0x0618(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x0628(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWItemStoreSubTreeWidget> SelectedTreeItemEntry;                           // 0x0630(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreSubTreeWidget*>      WidgetPool;                                        // 0x0638(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         InitialWidgetPoolSize;                             // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BalanceSubTrees();
	class UHWItemStoreSubTreeWidget* GetFreeItemTreeWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreTreeViewWidget">();
	}
	static class UHWItemStoreTreeViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreTreeViewWidget>();
	}
};
static_assert(alignof(UHWItemStoreTreeViewWidget) == 0x000008, "Wrong alignment on UHWItemStoreTreeViewWidget");
static_assert(sizeof(UHWItemStoreTreeViewWidget) == 0x000650, "Wrong size on UHWItemStoreTreeViewWidget");
static_assert(offsetof(UHWItemStoreTreeViewWidget, VisibleItemTreeWidgets) == 0x0005F8, "Member 'UHWItemStoreTreeViewWidget::VisibleItemTreeWidgets' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, ItemTreeRoot) == 0x000608, "Member 'UHWItemStoreTreeViewWidget::ItemTreeRoot' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, ComponentEntryClass) == 0x000610, "Member 'UHWItemStoreTreeViewWidget::ComponentEntryClass' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, OwnedComponentList) == 0x000618, "Member 'UHWItemStoreTreeViewWidget::OwnedComponentList' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, ItemStoreManager) == 0x000628, "Member 'UHWItemStoreTreeViewWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, SelectedTreeItemEntry) == 0x000630, "Member 'UHWItemStoreTreeViewWidget::SelectedTreeItemEntry' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, WidgetPool) == 0x000638, "Member 'UHWItemStoreTreeViewWidget::WidgetPool' has a wrong offset!");
static_assert(offsetof(UHWItemStoreTreeViewWidget, InitialWidgetPoolSize) == 0x000648, "Member 'UHWItemStoreTreeViewWidget::InitialWidgetPoolSize' has a wrong offset!");

// Class HemingwayUI.HWItemStoreWidget
// 0x0248 (0x0880 - 0x0638)
class UHWItemStoreWidget : public UHWCharacterWidget
{
public:
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWItemStoreManagerComponent> ItemStoreManager;                             // 0x0640(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWItemStoreAllItemListWidget*          AllItemListWidget;                                 // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreSelectionWidget*            SelectionWidget;                                   // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCharacterInventoryWidget*            InventoryWidget;                                   // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldUseFixedCategoryListDisplay;                // 0x0668(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ValidEquipmentItemTypes;                           // 0x0670(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWInventoryEntry>              InventorySnapshot;                                 // 0x0690(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6A0[0x10];                                     // 0x06A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   ItemStoreInputMappingContext;                      // 0x06B0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            InventoryBindingContainer;                         // 0x06B8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            UndoBindingContainer;                              // 0x06F8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_738[0x8];                                      // 0x0738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWWidget>               ActiveItemStoreSection;                            // 0x0740(0x0028)(BlueprintVisible, ExportObject, BlueprintReadOnly, InstancedReference, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NavigateLeftTabBinding;                            // 0x0768(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NavigateRightTabBinding;                           // 0x07A8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x8];                                      // 0x07E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            NavigateLeftTabBinding2;                           // 0x07F0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            NavigateRightTabBinding2;                          // 0x0830(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_870[0xA];                                      // 0x0870(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDisableFixedCategoryListDisplay;                  // 0x087A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_87B[0x5];                                      // 0x087B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayAndPopulateItemInfo(const class UHWEquipmentItem* EquipmentItem);
	void FocusAllItemList();
	void FocusSelectionPanel();
	bool GetCurrentPrimaryBuildEntry(int32 BuildIndex, struct FHWGodBuildEntry* OutBuildEntry);
	class UHWWidget* GetLeftItemDisplayWidget();
	void HandleAutoBuyComponentChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class UHWAutoBuyComponent* NewAutoBuyComponent);
	void HandleAutoBuyStateChanged(EHWAutoBuyState NewState);
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void HandleItemPurchase(const class UHWEquipmentItem* PurchasedEquipmentItem);
	void HandleLayoutSettingUpdated();
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void HandlePlayerInventoryTrackerInitialized();
	void HandleSwapAction();
	void HandleUndoAction();
	bool IsUndoEnabled();
	void OnAutoBuyStateChanged(bool bAutoBuyActive);
	void OnBackActionPressed();
	void OnBackActionSimulate();
	void OnGamepadClickItem(const class UHWEquipmentItem* ClickedEquipmentItem, const struct FGameplayTag& SlotTag);
	void OnGamepadHoverBuildsIntoItem(const class UHWEquipmentItem* EquipmentItem);
	void OnGamepadHoverItem(const class UHWEquipmentItem* EquipmentItem, const struct FGameplayTag& SlotTag);
	void OnInventoryActionPressed();
	void OnInventoryTransactionsAvailableChanged(bool bHasTransactionsAvailable);
	void OnItemPurchased(class UHWEquipmentInstance* EquipmentInstance);
	void OnNavigateSplitLeft();
	void OnNavigateSplitRight();
	void OnPrimaryBuildUpdated(const class UHWCharacterItem* GodItem, const struct FGuid& BuildGuid);
	void OnSelectItem(const class UHWEquipmentItem* SelectedEquipmentItem, const struct FGameplayTag& SlotTag, const class UHWEquipmentItem* DefaultSelectedItem);
	void OnShopVolumeChanged(class UHWInventoryManagerComponent* InventoryManager, const class AHWShopVendorVolume* NewShop);
	void OnUpdateLeftPanel(EHWItemStoreLeftDisplayType DisplayType);
	void PlayerInputTypeChanged(bool bIsGamepad);
	void Populate();
	void PopulateItemList(const class UHWCharacterItem* CharacterItem);
	void UpdateGold(const float NewGoldValue);
	void UpdateLayout(EHWItemStoreLayoutType Layout);

	EHWItemStoreLayoutType GetCurrentLayoutType() const;
	class UHWCharacterInventoryWidget* GetInventoryWidgetToFocus() const;
	bool ShouldUseFixedCategoryListDisplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWItemStoreWidget">();
	}
	static class UHWItemStoreWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWItemStoreWidget>();
	}
};
static_assert(alignof(UHWItemStoreWidget) == 0x000008, "Wrong alignment on UHWItemStoreWidget");
static_assert(sizeof(UHWItemStoreWidget) == 0x000880, "Wrong size on UHWItemStoreWidget");
static_assert(offsetof(UHWItemStoreWidget, ItemStoreManager) == 0x000640, "Member 'UHWItemStoreWidget::ItemStoreManager' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, AllItemListWidget) == 0x000650, "Member 'UHWItemStoreWidget::AllItemListWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, SelectionWidget) == 0x000658, "Member 'UHWItemStoreWidget::SelectionWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, InventoryWidget) == 0x000660, "Member 'UHWItemStoreWidget::InventoryWidget' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, bShouldUseFixedCategoryListDisplay) == 0x000668, "Member 'UHWItemStoreWidget::bShouldUseFixedCategoryListDisplay' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, ValidEquipmentItemTypes) == 0x000670, "Member 'UHWItemStoreWidget::ValidEquipmentItemTypes' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, InventorySnapshot) == 0x000690, "Member 'UHWItemStoreWidget::InventorySnapshot' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, ItemStoreInputMappingContext) == 0x0006B0, "Member 'UHWItemStoreWidget::ItemStoreInputMappingContext' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, InventoryBindingContainer) == 0x0006B8, "Member 'UHWItemStoreWidget::InventoryBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, UndoBindingContainer) == 0x0006F8, "Member 'UHWItemStoreWidget::UndoBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, ActiveItemStoreSection) == 0x000740, "Member 'UHWItemStoreWidget::ActiveItemStoreSection' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, NavigateLeftTabBinding) == 0x000768, "Member 'UHWItemStoreWidget::NavigateLeftTabBinding' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, NavigateRightTabBinding) == 0x0007A8, "Member 'UHWItemStoreWidget::NavigateRightTabBinding' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, NavigateLeftTabBinding2) == 0x0007F0, "Member 'UHWItemStoreWidget::NavigateLeftTabBinding2' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, NavigateRightTabBinding2) == 0x000830, "Member 'UHWItemStoreWidget::NavigateRightTabBinding2' has a wrong offset!");
static_assert(offsetof(UHWItemStoreWidget, bDisableFixedCategoryListDisplay) == 0x00087A, "Member 'UHWItemStoreWidget::bDisableFixedCategoryListDisplay' has a wrong offset!");

// Class HemingwayUI.HWKillEventDisplayerWidget
// 0x00B8 (0x06B0 - 0x05F8)
class alignas(0x10) UHWKillEventDisplayerWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UDataTable>              KillEventDisplayConfigDTSoftPtr;                   // 0x05F8(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinDisplayTime;                                    // 0x0620(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FullDisplayTime;                                   // 0x0624(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCanvasPanel*                         KillFeedCanvas;                                    // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWAccoladeEntryWidget*> EventTagToDisplayWidgetMap;             // 0x0630(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_680[0x30];                                     // 0x0680(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOnEventAdded(const struct FGameplayTag& EventTag, const struct FHWEventContext& EventContext, const bool bStomped);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWKillEventDisplayerWidget">();
	}
	static class UHWKillEventDisplayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWKillEventDisplayerWidget>();
	}
};
static_assert(alignof(UHWKillEventDisplayerWidget) == 0x000010, "Wrong alignment on UHWKillEventDisplayerWidget");
static_assert(sizeof(UHWKillEventDisplayerWidget) == 0x0006B0, "Wrong size on UHWKillEventDisplayerWidget");
static_assert(offsetof(UHWKillEventDisplayerWidget, KillEventDisplayConfigDTSoftPtr) == 0x0005F8, "Member 'UHWKillEventDisplayerWidget::KillEventDisplayConfigDTSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWKillEventDisplayerWidget, MinDisplayTime) == 0x000620, "Member 'UHWKillEventDisplayerWidget::MinDisplayTime' has a wrong offset!");
static_assert(offsetof(UHWKillEventDisplayerWidget, FullDisplayTime) == 0x000624, "Member 'UHWKillEventDisplayerWidget::FullDisplayTime' has a wrong offset!");
static_assert(offsetof(UHWKillEventDisplayerWidget, KillFeedCanvas) == 0x000628, "Member 'UHWKillEventDisplayerWidget::KillFeedCanvas' has a wrong offset!");
static_assert(offsetof(UHWKillEventDisplayerWidget, EventTagToDisplayWidgetMap) == 0x000630, "Member 'UHWKillEventDisplayerWidget::EventTagToDisplayWidgetMap' has a wrong offset!");

// Class HemingwayUI.HWObjectiveHealthbarConfigAsset
// 0x0058 (0x0088 - 0x0030)
class UHWObjectiveHealthbarConfigAsset final : public UDataAsset
{
public:
	TSubclassOf<class UHWObjectiveHealthbarWidget> DefaultHealthbarWidgetClass;                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FHWObjectiveHealthbarConfig> ObjectiveHealthbarConfigs;         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWObjectiveHealthbarConfigAsset">();
	}
	static class UHWObjectiveHealthbarConfigAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWObjectiveHealthbarConfigAsset>();
	}
};
static_assert(alignof(UHWObjectiveHealthbarConfigAsset) == 0x000008, "Wrong alignment on UHWObjectiveHealthbarConfigAsset");
static_assert(sizeof(UHWObjectiveHealthbarConfigAsset) == 0x000088, "Wrong size on UHWObjectiveHealthbarConfigAsset");
static_assert(offsetof(UHWObjectiveHealthbarConfigAsset, DefaultHealthbarWidgetClass) == 0x000030, "Member 'UHWObjectiveHealthbarConfigAsset::DefaultHealthbarWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarConfigAsset, ObjectiveHealthbarConfigs) == 0x000038, "Member 'UHWObjectiveHealthbarConfigAsset::ObjectiveHealthbarConfigs' has a wrong offset!");

// Class HemingwayUI.HWObjectiveHealthbarManager
// 0x00A0 (0x0698 - 0x05F8)
class UHWObjectiveHealthbarManager : public UHWWidget
{
public:
	class UHWObjectiveHealthbarConfigAsset*       ConfigAsset;                                       // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AHWBotFactory>>   TrackedBotFactories;                               // 0x0608(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(bool bIsDisplayingHealthBar)> IsDisplayingObjectiveHealthBarUpdated; // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UHWCanvasPanel*                         WidgetCanvas;                                      // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWObjectiveHealthbarWidget*            ActiveHealthbarWidget;                             // 0x0630(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AHWCharacter_Base*                      ActiveTrackedCharacter;                            // 0x0638(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWObjectiveHealthbarWidget*            CachedDefaultHealthbarWidget;                      // 0x0640(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, class UHWObjectiveHealthbarWidget*> CachedCustomHealthbarWidgets;      // 0x0648(0x0050)(ExportObject, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandleOnTeamNPCFactoriesUpdated(class AHWTeamState* TeamState);
	void HandleOnTeamStructuresUpdated(class AHWTeamState* TeamState);
	void HandleOnTeamsUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWObjectiveHealthbarManager">();
	}
	static class UHWObjectiveHealthbarManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWObjectiveHealthbarManager>();
	}
};
static_assert(alignof(UHWObjectiveHealthbarManager) == 0x000008, "Wrong alignment on UHWObjectiveHealthbarManager");
static_assert(sizeof(UHWObjectiveHealthbarManager) == 0x000698, "Wrong size on UHWObjectiveHealthbarManager");
static_assert(offsetof(UHWObjectiveHealthbarManager, ConfigAsset) == 0x0005F8, "Member 'UHWObjectiveHealthbarManager::ConfigAsset' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, TrackedBotFactories) == 0x000608, "Member 'UHWObjectiveHealthbarManager::TrackedBotFactories' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, IsDisplayingObjectiveHealthBarUpdated) == 0x000618, "Member 'UHWObjectiveHealthbarManager::IsDisplayingObjectiveHealthBarUpdated' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, WidgetCanvas) == 0x000628, "Member 'UHWObjectiveHealthbarManager::WidgetCanvas' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, ActiveHealthbarWidget) == 0x000630, "Member 'UHWObjectiveHealthbarManager::ActiveHealthbarWidget' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, ActiveTrackedCharacter) == 0x000638, "Member 'UHWObjectiveHealthbarManager::ActiveTrackedCharacter' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, CachedDefaultHealthbarWidget) == 0x000640, "Member 'UHWObjectiveHealthbarManager::CachedDefaultHealthbarWidget' has a wrong offset!");
static_assert(offsetof(UHWObjectiveHealthbarManager, CachedCustomHealthbarWidgets) == 0x000648, "Member 'UHWObjectiveHealthbarManager::CachedCustomHealthbarWidgets' has a wrong offset!");

// Class HemingwayUI.HWPassiveMeterConfig
// 0x0078 (0x00A8 - 0x0030)
class UHWPassiveMeterConfig final : public UDataAsset
{
public:
	struct FHWPassiveMeterWidgetConfig            DefaultPassiveMeterWidget;                         // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FHWPassiveMeterWidgetConfig> WidgetConfigs;                     // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPassiveMeterConfig">();
	}
	static class UHWPassiveMeterConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPassiveMeterConfig>();
	}
};
static_assert(alignof(UHWPassiveMeterConfig) == 0x000008, "Wrong alignment on UHWPassiveMeterConfig");
static_assert(sizeof(UHWPassiveMeterConfig) == 0x0000A8, "Wrong size on UHWPassiveMeterConfig");
static_assert(offsetof(UHWPassiveMeterConfig, DefaultPassiveMeterWidget) == 0x000030, "Member 'UHWPassiveMeterConfig::DefaultPassiveMeterWidget' has a wrong offset!");
static_assert(offsetof(UHWPassiveMeterConfig, WidgetConfigs) == 0x000058, "Member 'UHWPassiveMeterConfig::WidgetConfigs' has a wrong offset!");

// Class HemingwayUI.HWPausePopupWidget
// 0x00C0 (0x06B8 - 0x05F8)
class UHWPausePopupWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            UnpauseBindingContainerKBM;                        // 0x0600(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x8];                                      // 0x0640(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            UnpauseBindingContainerGamepad;                    // 0x0648(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   PausePopupInputMappingContext;                     // 0x0690(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AHWTeamState*                           PausingTeam;                                       // 0x0698(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A0[0x18];                                     // 0x06A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePauseStateUpdated(bool bIsPaused, class AHWTeamState* InPausingTeam, const struct FDateTime& InPauseStartTime);
	void HandleUnpauseAction();
	void HandleUnpauseDelayUpdated(int32 UnpauseDelayRemaining);
	void UpdateTimerBar(float TimeRemaining, float TotalTime);

	bool IsAlliedTeamPause() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPausePopupWidget">();
	}
	static class UHWPausePopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPausePopupWidget>();
	}
};
static_assert(alignof(UHWPausePopupWidget) == 0x000008, "Wrong alignment on UHWPausePopupWidget");
static_assert(sizeof(UHWPausePopupWidget) == 0x0006B8, "Wrong size on UHWPausePopupWidget");
static_assert(offsetof(UHWPausePopupWidget, UnpauseBindingContainerKBM) == 0x000600, "Member 'UHWPausePopupWidget::UnpauseBindingContainerKBM' has a wrong offset!");
static_assert(offsetof(UHWPausePopupWidget, UnpauseBindingContainerGamepad) == 0x000648, "Member 'UHWPausePopupWidget::UnpauseBindingContainerGamepad' has a wrong offset!");
static_assert(offsetof(UHWPausePopupWidget, PausePopupInputMappingContext) == 0x000690, "Member 'UHWPausePopupWidget::PausePopupInputMappingContext' has a wrong offset!");
static_assert(offsetof(UHWPausePopupWidget, PausingTeam) == 0x000698, "Member 'UHWPausePopupWidget::PausingTeam' has a wrong offset!");

// Class HemingwayUI.HWPauseVoteWidget
// 0x0040 (0x0678 - 0x0638)
class UHWPauseVoteWidget : public UHWCharacterWidget
{
public:
	TSubclassOf<class UHWSurrenderPipWidget>      PipWidgetClass;                                    // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxNumPips;                                        // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWSurrenderPipWidget*>          PipWidgets;                                        // 0x0648(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWTeamState>            CurrentBoundTeamState;                             // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ResultDisplayTime;                                 // 0x0660(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_664[0x14];                                     // 0x0664(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPipWidgetToContainer(const EHWVoteState InitialState);
	void DisplayResult(const EHWVoteResult Result);
	void HandleOnHasPauseVotedUpdated(bool bUpdatedHasPauseVoted);
	void HandleOnPauseResolved(class AHWTeamState* TeamState, const EHWVoteResult Result);
	void HandleOnPauseVotesUpdated(class AHWTeamState* TeamState, int32 NumYesVotes, int32 NumNoVotes);
	void OnLocalPlayerVoteStatusUpdated();
	void OnPauseVoteDisplayToggled(bool bDisplay);
	void OnPipWidgetAdded(class UHWSurrenderPipWidget* PipWidget);
	void OnPipWidgetRemoved(class UHWSurrenderPipWidget* PipWidget);
	void OnVotesUpdated();
	void ToggleDisplayPauseVote(bool bDisplay);
	void UpdateTimerDisplay(float TimeRemaining, float TotalTime);

	bool IsDisplaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPauseVoteWidget">();
	}
	static class UHWPauseVoteWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPauseVoteWidget>();
	}
};
static_assert(alignof(UHWPauseVoteWidget) == 0x000008, "Wrong alignment on UHWPauseVoteWidget");
static_assert(sizeof(UHWPauseVoteWidget) == 0x000678, "Wrong size on UHWPauseVoteWidget");
static_assert(offsetof(UHWPauseVoteWidget, PipWidgetClass) == 0x000638, "Member 'UHWPauseVoteWidget::PipWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWPauseVoteWidget, MaxNumPips) == 0x000640, "Member 'UHWPauseVoteWidget::MaxNumPips' has a wrong offset!");
static_assert(offsetof(UHWPauseVoteWidget, PipWidgets) == 0x000648, "Member 'UHWPauseVoteWidget::PipWidgets' has a wrong offset!");
static_assert(offsetof(UHWPauseVoteWidget, CurrentBoundTeamState) == 0x000658, "Member 'UHWPauseVoteWidget::CurrentBoundTeamState' has a wrong offset!");
static_assert(offsetof(UHWPauseVoteWidget, ResultDisplayTime) == 0x000660, "Member 'UHWPauseVoteWidget::ResultDisplayTime' has a wrong offset!");

// Class HemingwayUI.HWPlayerInventoryHudWidget
// 0x0000 (0x0638 - 0x0638)
class UHWPlayerInventoryHudWidget final : public UHWCharacterWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerInventoryHudWidget">();
	}
	static class UHWPlayerInventoryHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerInventoryHudWidget>();
	}
};
static_assert(alignof(UHWPlayerInventoryHudWidget) == 0x000008, "Wrong alignment on UHWPlayerInventoryHudWidget");
static_assert(sizeof(UHWPlayerInventoryHudWidget) == 0x000638, "Wrong size on UHWPlayerInventoryHudWidget");

// Class HemingwayUI.HWPlayerInventoryTrackingWidget
// 0x0128 (0x0760 - 0x0638)
class UHWPlayerInventoryTrackingWidget final : public UHWCharacterWidget
{
public:
	TArray<struct FHWInventoryEntry>              PlayerInventorySnapshot;                           // 0x0638(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x20];                                     // 0x0648(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWEquipmentItem>        SelectedParentTreeItem;                            // 0x0668(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UHWEquipmentItem>        TrackedEquipmentItem;                              // 0x0690(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UHWEquipmentItem*, int32>          TrackedItemUpgradeCosts;                           // 0x06B8(0x0050)(NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(class UHWEquipmentInstance* EquipmentInstance)> OnPlayerInventoryEquipmentPurchased; // 0x0708(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWEquipmentInstance* EquipmentInstance)> OnPlayerInventoryEquipmentSold; // 0x0718(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWEquipmentInstance* EquipmentInstance, EHWInventoryChangeReason InventoryChangeReason)> OnPlayerInventoryEquipmentChanged; // 0x0728(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UHWEquipmentInstance* EquipmentChanged, int32 PreviousLevel)> OnPlayerInventoryEquipmentLevelChanged; // 0x0738(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTrackedItemUpgradeStatusChanged;                 // 0x0748(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_758[0x8];                                      // 0x0758(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TSoftObjectPtr<class UHWEquipmentItem> GetCurrentSelectedParentTreeItem();
	int32 GetMinimumUpgradeCost(const class UHWEquipmentItem* EquipmentItem);
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void OnEquipmentLevelChanged(class UHWEquipmentInstance* EquipmentChanged, const int32 PreviousLevel);
	void OnItemSelected(const class UHWEquipmentItem* EquipmentItem, const struct FGameplayTag& SlotTag, const class UHWEquipmentItem* DefaultSelectedItem);
	void OnItemTracked(const class UHWEquipmentItem* EquipmentItem, const struct FGameplayTag& SlotTag);
	void OnNewAutoBuyItemStarted(const class UHWEquipmentRecipe* NewRecipe);
	bool SlotHasActiveItem(const struct FHWInventoryEntry& Entry);

	int32 GetActiveItemCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerInventoryTrackingWidget">();
	}
	static class UHWPlayerInventoryTrackingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerInventoryTrackingWidget>();
	}
};
static_assert(alignof(UHWPlayerInventoryTrackingWidget) == 0x000008, "Wrong alignment on UHWPlayerInventoryTrackingWidget");
static_assert(sizeof(UHWPlayerInventoryTrackingWidget) == 0x000760, "Wrong size on UHWPlayerInventoryTrackingWidget");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, PlayerInventorySnapshot) == 0x000638, "Member 'UHWPlayerInventoryTrackingWidget::PlayerInventorySnapshot' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, SelectedParentTreeItem) == 0x000668, "Member 'UHWPlayerInventoryTrackingWidget::SelectedParentTreeItem' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, TrackedEquipmentItem) == 0x000690, "Member 'UHWPlayerInventoryTrackingWidget::TrackedEquipmentItem' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, TrackedItemUpgradeCosts) == 0x0006B8, "Member 'UHWPlayerInventoryTrackingWidget::TrackedItemUpgradeCosts' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, OnPlayerInventoryEquipmentPurchased) == 0x000708, "Member 'UHWPlayerInventoryTrackingWidget::OnPlayerInventoryEquipmentPurchased' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, OnPlayerInventoryEquipmentSold) == 0x000718, "Member 'UHWPlayerInventoryTrackingWidget::OnPlayerInventoryEquipmentSold' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, OnPlayerInventoryEquipmentChanged) == 0x000728, "Member 'UHWPlayerInventoryTrackingWidget::OnPlayerInventoryEquipmentChanged' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, OnPlayerInventoryEquipmentLevelChanged) == 0x000738, "Member 'UHWPlayerInventoryTrackingWidget::OnPlayerInventoryEquipmentLevelChanged' has a wrong offset!");
static_assert(offsetof(UHWPlayerInventoryTrackingWidget, OnTrackedItemUpgradeStatusChanged) == 0x000748, "Member 'UHWPlayerInventoryTrackingWidget::OnTrackedItemUpgradeStatusChanged' has a wrong offset!");

// Class HemingwayUI.HWScoreboardBuffWidget
// 0x0000 (0x06A8 - 0x06A8)
class UHWScoreboardBuffWidget : public UHWGameplayEffectWidget
{
public:
	void CollapseWidget();
	void DisplayBuff(bool bBuffApplied, const class UHWGameplayEffectUIBuffData* UIData);
	void DisplayBuffDuration(const float TimeRemaining);
	void FadeBuff();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScoreboardBuffWidget">();
	}
	static class UHWScoreboardBuffWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScoreboardBuffWidget>();
	}
};
static_assert(alignof(UHWScoreboardBuffWidget) == 0x000008, "Wrong alignment on UHWScoreboardBuffWidget");
static_assert(sizeof(UHWScoreboardBuffWidget) == 0x0006A8, "Wrong size on UHWScoreboardBuffWidget");

// Class HemingwayUI.HWScoreboardGodWidget
// 0x00E8 (0x06E0 - 0x05F8)
class UHWScoreboardGodWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIContextCalloutDisplay               ChangeGodCalloutDisplay;                           // 0x0600(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FUIContextCalloutDisplay               ChangeAbilityCalloutDisplay;                       // 0x0648(0x0048)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWCharacterItem*                       CurrentCharacterItem;                              // 0x0690(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWScoreboardWidget*                    ScoreboardWidget;                                  // 0x0698(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTooltipWidget_Ability*               AbilityDescriptionWidget;                          // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAbilityEntryWidget*               BasicAttackWidget;                                 // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodAbilityEntryWidget*               PassiveWidget;                                     // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   AbilityGrid;                                       // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodAbilityEntryWidget>   GodAbilityEntryWidgetClass;                        // 0x06C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GodAbilityCount;                                   // 0x06C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6CC[0x4];                                      // 0x06CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWGodAbilityEntryWidget*>       VisibleAbilityEntries;                             // 0x06D0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnCharacterItemReceived(const class UHWCharacterItem* SelectedGodItem);
	void OnSelectAbility(const class UHWGodAbilityEntryWidget* AbilityEntry);
	void SetCharacterItem(const class UHWCharacterItem* SelectedGodItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScoreboardGodWidget">();
	}
	static class UHWScoreboardGodWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScoreboardGodWidget>();
	}
};
static_assert(alignof(UHWScoreboardGodWidget) == 0x000008, "Wrong alignment on UHWScoreboardGodWidget");
static_assert(sizeof(UHWScoreboardGodWidget) == 0x0006E0, "Wrong size on UHWScoreboardGodWidget");
static_assert(offsetof(UHWScoreboardGodWidget, ChangeGodCalloutDisplay) == 0x000600, "Member 'UHWScoreboardGodWidget::ChangeGodCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, ChangeAbilityCalloutDisplay) == 0x000648, "Member 'UHWScoreboardGodWidget::ChangeAbilityCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, CurrentCharacterItem) == 0x000690, "Member 'UHWScoreboardGodWidget::CurrentCharacterItem' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, ScoreboardWidget) == 0x000698, "Member 'UHWScoreboardGodWidget::ScoreboardWidget' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, AbilityDescriptionWidget) == 0x0006A0, "Member 'UHWScoreboardGodWidget::AbilityDescriptionWidget' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, BasicAttackWidget) == 0x0006A8, "Member 'UHWScoreboardGodWidget::BasicAttackWidget' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, PassiveWidget) == 0x0006B0, "Member 'UHWScoreboardGodWidget::PassiveWidget' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, AbilityGrid) == 0x0006B8, "Member 'UHWScoreboardGodWidget::AbilityGrid' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, GodAbilityEntryWidgetClass) == 0x0006C0, "Member 'UHWScoreboardGodWidget::GodAbilityEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, GodAbilityCount) == 0x0006C8, "Member 'UHWScoreboardGodWidget::GodAbilityCount' has a wrong offset!");
static_assert(offsetof(UHWScoreboardGodWidget, VisibleAbilityEntries) == 0x0006D0, "Member 'UHWScoreboardGodWidget::VisibleAbilityEntries' has a wrong offset!");

// Class HemingwayUI.HWScoreboardWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWScoreboardWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWUniformGridPanel*                    TeamContainer;                                     // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWScoreboardTeamWidget>    TeamWidgetClass;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWOrientation                                ScoreboardOrientation;                             // 0x0610(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWScoreboardTeamWidget*>        TeamWidgets;                                       // 0x0618(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWScoreboardPlayerWidget*              PreviousSelectedPlayerWidget;                      // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowStates;                                 // 0x0630(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearGodPortraitSelection();
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleTeamsUpdated();
	void OnGodPortraitEntrySelected(class UHWScoreboardPlayerWidget* PlayerWidget, const class UHWCharacterItem* SelectedGodItem, const bool bIsHover);
	void OnPlayerEntrySelected(class UHWScoreboardTeamWidget* TeamWidget, class UHWScoreboardPlayerWidget* PlayerWidget, class APlayerState* SelectedPlayer);
	void OnPlayerMuteSelected(class UHWScoreboardTeamWidget* TeamWidget, class UHWScoreboardPlayerWidget* PlayerWidget, class AHWPlayerState* SelectedPlayer);
	void SelectNextGodPortrait(int32 Direction);
	void TeamsCleared();
	void TeamsPopulated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScoreboardWidget">();
	}
	static class UHWScoreboardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScoreboardWidget>();
	}
};
static_assert(alignof(UHWScoreboardWidget) == 0x000008, "Wrong alignment on UHWScoreboardWidget");
static_assert(sizeof(UHWScoreboardWidget) == 0x000638, "Wrong size on UHWScoreboardWidget");
static_assert(offsetof(UHWScoreboardWidget, TeamContainer) == 0x000600, "Member 'UHWScoreboardWidget::TeamContainer' has a wrong offset!");
static_assert(offsetof(UHWScoreboardWidget, TeamWidgetClass) == 0x000608, "Member 'UHWScoreboardWidget::TeamWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWScoreboardWidget, ScoreboardOrientation) == 0x000610, "Member 'UHWScoreboardWidget::ScoreboardOrientation' has a wrong offset!");
static_assert(offsetof(UHWScoreboardWidget, TeamWidgets) == 0x000618, "Member 'UHWScoreboardWidget::TeamWidgets' has a wrong offset!");
static_assert(offsetof(UHWScoreboardWidget, PreviousSelectedPlayerWidget) == 0x000628, "Member 'UHWScoreboardWidget::PreviousSelectedPlayerWidget' has a wrong offset!");
static_assert(offsetof(UHWScoreboardWidget, bShouldShowStates) == 0x000630, "Member 'UHWScoreboardWidget::bShouldShowStates' has a wrong offset!");

// Class HemingwayUI.HWPlayerCardWidget
// 0x0170 (0x0768 - 0x05F8)
class UHWPlayerCardWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class URH_PlayerInfo>          PlayerInfo;                                        // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWInstanceInfo_PlayerData             PlayerData;                                        // 0x0608(0x0110)(Protected, NativeAccessSpecifierProtected)
	bool                                          bRelyOnPlayerData;                                 // 0x0718(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_719[0x3];                                      // 0x0719(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWCharacterItem>        DraftCharacter;                                    // 0x071C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWSkinItem>             SkinChoice;                                        // 0x0724(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWPlayerState>          PlayerState;                                       // 0x072C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_734[0x34];                                     // 0x0734(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleGetGodMasteryLevel(const class UHWCharacterItem* Character, const class URH_PlayerInfo* InPlayerInfo, int32 Level, float LevelProgressPercent);
	void HandlePlayerLoadStateChanged();
	void OnBoolAppSettingChanged(const struct FGameplayTag& AppSettingTag, bool bValue);
	void OnRecieveRemotePlayerGodLoadout(bool bSuccess, const class UHWCharacterItem* CharacterItem, const struct FHWGodLoadout& InGodLoadout);
	void OnRecieveRemotePlayerLoadout(bool bSuccess, const struct FHWPlayerLoadout& InPlayerLoadout);
	void SetDraftCharacter(const class UHWCharacterItem* Character, bool bFetchMastery);
	void SetShouldShowBadgeCosmetics(bool ShouldShowCosmetics);
	void SetShouldShowTrackerCosmetics(bool ShouldShowCosmetics);
	void UpdateCardVFX(const class UHWCollectionItem* InCardVFXItem);
	void UpdateCharacterSkin(const class UHWSkinItem* Skin);
	void UpdatedCharacterBadges(const TArray<class UHWCollectionItem*>& InBadgeItems);
	void UpdatedCharacterTrackers(const TArray<class UHWCollectionItem*>& InTrackerItems);
	void UpdateDraftCharacter(const class UHWCharacterItem* Character);
	void UpdateFromPlayerState(class AHWPlayerState* InPlayerState);
	void UpdateMasteryLevel(int32 Level);
	void UpdatePlayerInfo(class URH_PlayerInfo* InPlayerInfo);
	void UpdatePlayerLoadState(bool bPlayerIsReady);
	void UpdatePlayerName(const class FString& PlayerName);
	void UpdatePlayerPlatformIcon(ERHPlatformDisplayType NewPlatform);
	void UpdatePlayerTitle(const class UHWCollectionItem* InTitleItem);

	TArray<class UHWItemDisplayWidget*> GetBadgeWidgets() const;
	const class UHWCharacterItem* GetDraftCharacter() const;
	class URH_PlayerInfo* GetPlayerInfo() const;
	class AHWPlayerState* GetPlayerState() const;
	TArray<class UHWItemDisplayWidget*> GetTrackerWidgets() const;
	bool IsFriendly() const;
	bool IsPlayerReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerCardWidget">();
	}
	static class UHWPlayerCardWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerCardWidget>();
	}
};
static_assert(alignof(UHWPlayerCardWidget) == 0x000008, "Wrong alignment on UHWPlayerCardWidget");
static_assert(sizeof(UHWPlayerCardWidget) == 0x000768, "Wrong size on UHWPlayerCardWidget");
static_assert(offsetof(UHWPlayerCardWidget, PlayerInfo) == 0x0005F8, "Member 'UHWPlayerCardWidget::PlayerInfo' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardWidget, PlayerData) == 0x000608, "Member 'UHWPlayerCardWidget::PlayerData' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardWidget, bRelyOnPlayerData) == 0x000718, "Member 'UHWPlayerCardWidget::bRelyOnPlayerData' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardWidget, DraftCharacter) == 0x00071C, "Member 'UHWPlayerCardWidget::DraftCharacter' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardWidget, SkinChoice) == 0x000724, "Member 'UHWPlayerCardWidget::SkinChoice' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardWidget, PlayerState) == 0x00072C, "Member 'UHWPlayerCardWidget::PlayerState' has a wrong offset!");

// Class HemingwayUI.HWCharacterOmiWidget
// 0x0000 (0x0618 - 0x0618)
class UHWCharacterOmiWidget : public UHWGameplayAttributeWidget
{
public:
	void UpdateCurrentOmi(float OldMana, float NewMana, bool bShouldAnimate);
	void UpdateMaxOmi(float OldMaxMana, float NewMaxMana, bool bShouldAnimate);

	float GetCurrentOmi() const;
	float GetMaxOmi() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterOmiWidget">();
	}
	static class UHWCharacterOmiWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterOmiWidget>();
	}
};
static_assert(alignof(UHWCharacterOmiWidget) == 0x000008, "Wrong alignment on UHWCharacterOmiWidget");
static_assert(sizeof(UHWCharacterOmiWidget) == 0x000618, "Wrong size on UHWCharacterOmiWidget");

// Class HemingwayUI.HWCharacterStatEntryWidget
// 0x0018 (0x0630 - 0x0618)
class UHWCharacterStatEntryWidget : public UHWGameplayAttributeWidget
{
public:
	class FText                                   StatDisplayText;                                   // 0x0618(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void InitializeStat(const TArray<struct FGameplayAttribute>& GameplayAttributes, const struct FSlateBrush& StatIcon, int32 MinimumFractionalDigitsToDisplay, int32 MaximumFractionalDigitsToDisplay);
	void SetDisplayValue(float NewValue, EHWCharacterStatBuffStatus BuffStatus);
	void UpdateStatNameDisplay(const bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterStatEntryWidget">();
	}
	static class UHWCharacterStatEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterStatEntryWidget>();
	}
};
static_assert(alignof(UHWCharacterStatEntryWidget) == 0x000008, "Wrong alignment on UHWCharacterStatEntryWidget");
static_assert(sizeof(UHWCharacterStatEntryWidget) == 0x000630, "Wrong size on UHWCharacterStatEntryWidget");
static_assert(offsetof(UHWCharacterStatEntryWidget, StatDisplayText) == 0x000618, "Member 'UHWCharacterStatEntryWidget::StatDisplayText' has a wrong offset!");

// Class HemingwayUI.HWDynamicAnnouncementEvaluator_KVString
// 0x0000 (0x0028 - 0x0028)
class UHWDynamicAnnouncementEvaluator_KVString final : public UHWDynamicAnnouncementEvaluator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDynamicAnnouncementEvaluator_KVString">();
	}
	static class UHWDynamicAnnouncementEvaluator_KVString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDynamicAnnouncementEvaluator_KVString>();
	}
};
static_assert(alignof(UHWDynamicAnnouncementEvaluator_KVString) == 0x000008, "Wrong alignment on UHWDynamicAnnouncementEvaluator_KVString");
static_assert(sizeof(UHWDynamicAnnouncementEvaluator_KVString) == 0x000028, "Wrong size on UHWDynamicAnnouncementEvaluator_KVString");

// Class HemingwayUI.HWCharacterStatsWidget
// 0x00A8 (0x06E0 - 0x0638)
class UHWCharacterStatsWidget : public UHWCharacterWidget
{
public:
	TSoftObjectPtr<class UDataTable>              CharacterStatsTable;                               // 0x0638(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWCharacterStatEntryWidget> CharacterStatDisplayWidgetClass;                  // 0x0660(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_668[0x10];                                     // 0x0668(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWCharacterStatEntryWidget*>    CharacterStatDisplayWidgets;                       // 0x0678(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<EHWCustomCharacterStatWidgetType, class UHWCharacterStatEntryWidget*> CustomCharacterStatDisplayWidgets; // 0x0688(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6D8[0x8];                                      // 0x06D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddedCharacterStatDisplayWidget(EHWCharacterStatCategory StatCategory, class UHWCharacterStatEntryWidget* Widget);
	void DisplayCharacterMovementSpeed(float MovementSpeed);
	void HandleCharacterMovementSpeedChanged(float NewMovementSpeed);
	void UpdateStatNameDisplays(const bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterStatsWidget">();
	}
	static class UHWCharacterStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterStatsWidget>();
	}
};
static_assert(alignof(UHWCharacterStatsWidget) == 0x000008, "Wrong alignment on UHWCharacterStatsWidget");
static_assert(sizeof(UHWCharacterStatsWidget) == 0x0006E0, "Wrong size on UHWCharacterStatsWidget");
static_assert(offsetof(UHWCharacterStatsWidget, CharacterStatsTable) == 0x000638, "Member 'UHWCharacterStatsWidget::CharacterStatsTable' has a wrong offset!");
static_assert(offsetof(UHWCharacterStatsWidget, CharacterStatDisplayWidgetClass) == 0x000660, "Member 'UHWCharacterStatsWidget::CharacterStatDisplayWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCharacterStatsWidget, CharacterStatDisplayWidgets) == 0x000678, "Member 'UHWCharacterStatsWidget::CharacterStatDisplayWidgets' has a wrong offset!");
static_assert(offsetof(UHWCharacterStatsWidget, CustomCharacterStatDisplayWidgets) == 0x000688, "Member 'UHWCharacterStatsWidget::CustomCharacterStatDisplayWidgets' has a wrong offset!");

// Class HemingwayUI.HWGameplayAttributeNumber
// 0x0010 (0x0628 - 0x0618)
class UHWGameplayAttributeNumber : public UHWGameplayAttributeWidget
{
public:
	TMulticastInlineDelegate<void(float Number)>  OnGameplayAttributeNumberUpdated;                  // 0x0618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void UpdateNumber(float Number);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayAttributeNumber">();
	}
	static class UHWGameplayAttributeNumber* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayAttributeNumber>();
	}
};
static_assert(alignof(UHWGameplayAttributeNumber) == 0x000008, "Wrong alignment on UHWGameplayAttributeNumber");
static_assert(sizeof(UHWGameplayAttributeNumber) == 0x000628, "Wrong size on UHWGameplayAttributeNumber");
static_assert(offsetof(UHWGameplayAttributeNumber, OnGameplayAttributeNumberUpdated) == 0x000618, "Member 'UHWGameplayAttributeNumber::OnGameplayAttributeNumberUpdated' has a wrong offset!");

// Class HemingwayUI.HWGameplayEffectCCWidget
// 0x0018 (0x06C0 - 0x06A8)
class UHWGameplayEffectCCWidget final : public UHWGameplayEffectWidget
{
public:
	TMulticastInlineDelegate<void(bool bDisplayOn)> OnCCDisplayChanged;                              // 0x06A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B8[0x8];                                      // 0x06B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CCEnd();
	void CCStarted(const struct FHWDataDisplay_Keyword& KeywordData);
	void UpdateDurationProgress(float CurrentProgress);

	float GetTimeRemaining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayEffectCCWidget">();
	}
	static class UHWGameplayEffectCCWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayEffectCCWidget>();
	}
};
static_assert(alignof(UHWGameplayEffectCCWidget) == 0x000008, "Wrong alignment on UHWGameplayEffectCCWidget");
static_assert(sizeof(UHWGameplayEffectCCWidget) == 0x0006C0, "Wrong size on UHWGameplayEffectCCWidget");
static_assert(offsetof(UHWGameplayEffectCCWidget, OnCCDisplayChanged) == 0x0006A8, "Member 'UHWGameplayEffectCCWidget::OnCCDisplayChanged' has a wrong offset!");

// Class HemingwayUI.HWGodAbilityEntryWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWGodAbilityEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x18];                                     // 0x05F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWLoadedAbilityItem>           LoadedAbilityItems;                                // 0x0610(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_620[0x8];                                      // 0x0620(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_UpdatePipDisplay(int32 CurrentIndex, int32 TotalPips);
	void CycleAbilityInSet(bool bForward);
	void DisplayEquipmentItem(const class UHWEquipmentItem* EquipmentItem);
	void HandleSelected(bool bSelected);
	void SwitchToAbilitySetIndex(int32 Index_0, bool bForceBroadcast);
	void ToggleLoadingState(bool bLoading);
	void UpdateSelectedIndicator(bool bIsSelected);

	bool IsSelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAbilityEntryWidget">();
	}
	static class UHWGodAbilityEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAbilityEntryWidget>();
	}
};
static_assert(alignof(UHWGodAbilityEntryWidget) == 0x000008, "Wrong alignment on UHWGodAbilityEntryWidget");
static_assert(sizeof(UHWGodAbilityEntryWidget) == 0x000628, "Wrong size on UHWGodAbilityEntryWidget");
static_assert(offsetof(UHWGodAbilityEntryWidget, LoadedAbilityItems) == 0x000610, "Member 'UHWGodAbilityEntryWidget::LoadedAbilityItems' has a wrong offset!");

// Class HemingwayUI.HWGameplayEffectCooldownWidget
// 0x0020 (0x06C8 - 0x06A8)
class UHWGameplayEffectCooldownWidget : public UHWGameplayEffectWidget
{
public:
	float                                         EndTime;                                           // 0x06A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x06AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const int32 PreviousAmmoCount, const int32 NewAmmoCount)> OnAssociatedEquipmentAmmoChangedDelegate; // 0x06B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C0[0x8];                                      // 0x06C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CooldownFinished();
	void CooldownStarted(float RemainingTime);
	void CooldownTimeUpdated(float OldRemainingTime, float NewRemainingTime);
	void OnAssociatedEquipmentAmmoChanged(int32 PreviousAmmoCount, int32 NewAmmoCount);

	int32 GetAssociatedEquipmentAmmoCount() const;
	float GetTimeElapsed() const;
	float GetTimeRemaining() const;
	float GetTimeRemainingPercent() const;
	bool IsCooldownActive() const;
	bool ShouldShowCooldown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGameplayEffectCooldownWidget">();
	}
	static class UHWGameplayEffectCooldownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGameplayEffectCooldownWidget>();
	}
};
static_assert(alignof(UHWGameplayEffectCooldownWidget) == 0x000008, "Wrong alignment on UHWGameplayEffectCooldownWidget");
static_assert(sizeof(UHWGameplayEffectCooldownWidget) == 0x0006C8, "Wrong size on UHWGameplayEffectCooldownWidget");
static_assert(offsetof(UHWGameplayEffectCooldownWidget, EndTime) == 0x0006A8, "Member 'UHWGameplayEffectCooldownWidget::EndTime' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectCooldownWidget, Duration) == 0x0006AC, "Member 'UHWGameplayEffectCooldownWidget::Duration' has a wrong offset!");
static_assert(offsetof(UHWGameplayEffectCooldownWidget, OnAssociatedEquipmentAmmoChangedDelegate) == 0x0006B0, "Member 'UHWGameplayEffectCooldownWidget::OnAssociatedEquipmentAmmoChangedDelegate' has a wrong offset!");

// Class HemingwayUI.HWPlayerKDAWidget
// 0x0000 (0x0638 - 0x0638)
class UHWPlayerKDAWidget : public UHWCharacterWidget
{
public:
	void HandlePlayerAssistsUpdated(class AHWPlayerState* PlayerState, int32 OldAssists, int32 NewAssists);
	void HandlePlayerDeathsUpdated(class AHWPlayerState* PlayerState, int32 OldDeaths, int32 NewDeaths);
	void HandlePlayerKillsUpdated(class AHWPlayerState* PlayerState, int32 OldKills, int32 NewKills);
	void HandlePlayerStatsTrackerReplicated(class AHWPlayerState* PlayerState, class AHWPlayerStatsTracker* PlayerStatsTracker);
	void UpdatePlayerAssists(int32 OldAssists, int32 NewAssists);
	void UpdatePlayerDeaths(int32 OldDeaths, int32 NewDeaths);
	void UpdatePlayerKills(int32 OldKills, int32 NewKills);

	int32 GetPlayerAssists() const;
	int32 GetPlayerDeaths() const;
	int32 GetPlayerKills() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerKDAWidget">();
	}
	static class UHWPlayerKDAWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerKDAWidget>();
	}
};
static_assert(alignof(UHWPlayerKDAWidget) == 0x000008, "Wrong alignment on UHWPlayerKDAWidget");
static_assert(sizeof(UHWPlayerKDAWidget) == 0x000638, "Wrong size on UHWPlayerKDAWidget");

// Class HemingwayUI.HWCurrencyPurchaseWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWCurrencyPurchaseWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWCurrencyPurchaseEntryWidget> PurchaseEntryWidgetClass;                      // 0x0608(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWCurrencyPurchaseEntryWidget*> PurchaseEntryWidgets;                              // 0x0610(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void HandlePortalOffersReceived();
	void OnAddedEntryWidget(class UHWCurrencyPurchaseEntryWidget* EntryWidget);
	void OnEntriesPopulated();
	void OnRemovedEntryWidget(class UHWCurrencyPurchaseEntryWidget* EntryWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCurrencyPurchaseWidget">();
	}
	static class UHWCurrencyPurchaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCurrencyPurchaseWidget>();
	}
};
static_assert(alignof(UHWCurrencyPurchaseWidget) == 0x000008, "Wrong alignment on UHWCurrencyPurchaseWidget");
static_assert(sizeof(UHWCurrencyPurchaseWidget) == 0x000620, "Wrong size on UHWCurrencyPurchaseWidget");
static_assert(offsetof(UHWCurrencyPurchaseWidget, PurchaseEntryWidgetClass) == 0x000608, "Member 'UHWCurrencyPurchaseWidget::PurchaseEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPurchaseWidget, PurchaseEntryWidgets) == 0x000610, "Member 'UHWCurrencyPurchaseWidget::PurchaseEntryWidgets' has a wrong offset!");

// Class HemingwayUI.HWCharacterAbilitiesOverviewWidget
// 0x0050 (0x0688 - 0x0638)
class UHWCharacterAbilitiesOverviewWidget : public UHWCharacterWidget
{
public:
	struct FGameplayTag                           InventorySlotType;                                 // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWOrientation                                SlotsOrientation;                                  // 0x0640(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_641[0x3];                                      // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumInventorySlotIndex;                         // 0x0644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaximumInventorySlotIndex;                         // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWTooltipWidget_AbilityOverview> TooltipAbilityWidgetClass;                   // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWTooltipWidget_AbilityOverview*> TooltipAbilityWidgets;                           // 0x0658(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_668[0x20];                                     // 0x0668(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TooltipAbilityWidgetAdded(class UHWTooltipWidget_AbilityOverview* TooltipWidget_Ability);
	void TooltipAbilityWidgetRemoved(class UHWTooltipWidget_AbilityOverview* TooltipWidget_Ability);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterAbilitiesOverviewWidget">();
	}
	static class UHWCharacterAbilitiesOverviewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterAbilitiesOverviewWidget>();
	}
};
static_assert(alignof(UHWCharacterAbilitiesOverviewWidget) == 0x000008, "Wrong alignment on UHWCharacterAbilitiesOverviewWidget");
static_assert(sizeof(UHWCharacterAbilitiesOverviewWidget) == 0x000688, "Wrong size on UHWCharacterAbilitiesOverviewWidget");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, InventorySlotType) == 0x000638, "Member 'UHWCharacterAbilitiesOverviewWidget::InventorySlotType' has a wrong offset!");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, SlotsOrientation) == 0x000640, "Member 'UHWCharacterAbilitiesOverviewWidget::SlotsOrientation' has a wrong offset!");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, MinimumInventorySlotIndex) == 0x000644, "Member 'UHWCharacterAbilitiesOverviewWidget::MinimumInventorySlotIndex' has a wrong offset!");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, MaximumInventorySlotIndex) == 0x000648, "Member 'UHWCharacterAbilitiesOverviewWidget::MaximumInventorySlotIndex' has a wrong offset!");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, TooltipAbilityWidgetClass) == 0x000650, "Member 'UHWCharacterAbilitiesOverviewWidget::TooltipAbilityWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCharacterAbilitiesOverviewWidget, TooltipAbilityWidgets) == 0x000658, "Member 'UHWCharacterAbilitiesOverviewWidget::TooltipAbilityWidgets' has a wrong offset!");

// Class HemingwayUI.HWCharacterInventoryWidget
// 0x0268 (0x08A0 - 0x0638)
class UHWCharacterInventoryWidget : public UHWCharacterWidget
{
public:
	struct FGameplayTag                           InventorySlotType;                                 // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWOrientation                                SlotsOrientation;                                  // 0x0640(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_641[0x3];                                      // 0x0641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumInventorySlotIndex;                         // 0x0644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaximumInventorySlotIndex;                         // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaximumInventorySlotIndexActive;                   // 0x064C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              EmptySlotVisibility;                               // 0x0650(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldGlowEmptySlots;                             // 0x0651(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_652[0x6];                                      // 0x0652(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWInventoryEquipmentWidget> EquipmentWidgetClass;                             // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FHWInventorySlotWidgetOverride> SlotWidgetClassOverrides;                          // 0x0660(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	EHWShowActivePassive                          ShowActivePassive;                                 // 0x0670(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWInventoryEquipmentWidget*>    EquipmentWidgets;                                  // 0x0678(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x4];                                      // 0x0688(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackEquipmentLevelUps;                           // 0x068C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackEquipmentUpgrades;                           // 0x068D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_68E[0x12];                                     // 0x068E(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSuppressUpdateOnVisibility;                       // 0x06A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldShowStates;                                 // 0x06A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A2[0x6];                                      // 0x06A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            ActionBindingContainer;                            // 0x06A8(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   ExpandText;                                        // 0x06E8(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   CollapseText;                                      // 0x0700(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FUIContextCalloutDisplay               NavigationContextCalloutDisplay;                   // 0x0718(0x0048)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_760[0x4];                                      // 0x0760(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bClientCanReorder;                                 // 0x0764(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_765[0x3];                                      // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWEquipmentItemDragWidget> InventoryDragWidgetClass;                          // 0x0768(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DragWidgetAlignment_KBM;                           // 0x0770(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DragWidgetAlignment_Gamepad;                       // 0x0780(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingContainer            MoveItemActionBindingContainer;                    // 0x0790(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingContainer            CancelSwapActionBindingContainer;                  // 0x07D0(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHWUIActionBindingContainer            SwapConsumablesActionBindingContainer;             // 0x0810(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bAllowSwapConsumables;                             // 0x0850(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWInventorySlot                       PrimaryConsumableSlot;                             // 0x0854(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHWInventorySlot                       SecondaryConsumableSlot;                           // 0x0860(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWEquipmentItemDragWidget*             DragWidget;                                        // 0x0870(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_878[0x28];                                     // 0x0878(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelSwapAction();
	void CleanupSwapAction();
	void CompleteSwapAction();
	void DisplayHasEquipmentToLevelUp(bool bCanLevelUp);
	void EquipmentWidgetAdded(class UHWInventoryEquipmentWidget* AddedEquipmentWidget);
	void EquipmentWidgetRemoved(class UHWInventoryEquipmentWidget* RemovedEquipmentWidget);
	void EquipmentWidgetUpdated(class UHWInventoryEquipmentWidget* UpdatedEquipmentWidget);
	void HandleEquipmentLevelUpStateChanged(class UHWActivatableEquipmentWidget* EquipmentWidget, bool bNewCanLevelUp);
	void HandleInventoryEquipmentChanged(class UHWInventoryManagerComponent* InventoryManager, class UHWEquipmentInstance* EquipmentInstance, const struct FHWInventorySlot& InventorySlot, const EHWInventoryChangeReason InventoryChangeReason);
	void HandlePlayerInventoryTrackerInitialized();
	void HandlePostKeyHandled(const struct FKey& Key, EInputEvent InputEvent);
	void InitializeSwapAction(const struct FHWInventorySlot& StartingSlot);
	void OnSwapConsumablesActionPressed();
	void OnSwapItemActionPressed();
	void OnUpdateSwappingStatus(bool bNewIsSwappingActive);
	void OnUpdateTrackedItemUpgradeStatus();
	void SetShouldShowStates(bool bInShouldShowStates);
	void SetSlotsOrientation(EHWOrientation NewOrientation);
	void SetSuppressUpdateOnVisibility(bool bInSuppressUpdateOnVisibility);
	void UpdateSwappingStatus(bool bNewIsSwappingActive);
	void UpdateSwapTarget(const struct FHWInventorySlot& NewTargetSwapSlot);

	int32 GetEquipmentCount() const;
	class UHWInventoryEquipmentWidget* GetEquipmentWidgetByInstance(class UHWEquipmentInstance* EquipmentInstance) const;
	class UHWInventoryEquipmentWidget* GetEquipmentWidgetBySlot(const struct FHWInventorySlot& InventorySlot) const;
	TSubclassOf<class UHWInventoryEquipmentWidget> GetEquipmentWidgetClassForSlot(const struct FHWInventorySlot& InventorySlot) const;
	bool GetIsSwappingActive() const;
	bool HasEquipmentToLevelUp() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterInventoryWidget">();
	}
	static class UHWCharacterInventoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterInventoryWidget>();
	}
};
static_assert(alignof(UHWCharacterInventoryWidget) == 0x000008, "Wrong alignment on UHWCharacterInventoryWidget");
static_assert(sizeof(UHWCharacterInventoryWidget) == 0x0008A0, "Wrong size on UHWCharacterInventoryWidget");
static_assert(offsetof(UHWCharacterInventoryWidget, InventorySlotType) == 0x000638, "Member 'UHWCharacterInventoryWidget::InventorySlotType' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, SlotsOrientation) == 0x000640, "Member 'UHWCharacterInventoryWidget::SlotsOrientation' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, MinimumInventorySlotIndex) == 0x000644, "Member 'UHWCharacterInventoryWidget::MinimumInventorySlotIndex' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, MaximumInventorySlotIndex) == 0x000648, "Member 'UHWCharacterInventoryWidget::MaximumInventorySlotIndex' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, MaximumInventorySlotIndexActive) == 0x00064C, "Member 'UHWCharacterInventoryWidget::MaximumInventorySlotIndexActive' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, EmptySlotVisibility) == 0x000650, "Member 'UHWCharacterInventoryWidget::EmptySlotVisibility' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bShouldGlowEmptySlots) == 0x000651, "Member 'UHWCharacterInventoryWidget::bShouldGlowEmptySlots' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, EquipmentWidgetClass) == 0x000658, "Member 'UHWCharacterInventoryWidget::EquipmentWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, SlotWidgetClassOverrides) == 0x000660, "Member 'UHWCharacterInventoryWidget::SlotWidgetClassOverrides' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, ShowActivePassive) == 0x000670, "Member 'UHWCharacterInventoryWidget::ShowActivePassive' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, EquipmentWidgets) == 0x000678, "Member 'UHWCharacterInventoryWidget::EquipmentWidgets' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bTrackEquipmentLevelUps) == 0x00068C, "Member 'UHWCharacterInventoryWidget::bTrackEquipmentLevelUps' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bTrackEquipmentUpgrades) == 0x00068D, "Member 'UHWCharacterInventoryWidget::bTrackEquipmentUpgrades' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bSuppressUpdateOnVisibility) == 0x0006A0, "Member 'UHWCharacterInventoryWidget::bSuppressUpdateOnVisibility' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bShouldShowStates) == 0x0006A1, "Member 'UHWCharacterInventoryWidget::bShouldShowStates' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, ActionBindingContainer) == 0x0006A8, "Member 'UHWCharacterInventoryWidget::ActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, ExpandText) == 0x0006E8, "Member 'UHWCharacterInventoryWidget::ExpandText' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, CollapseText) == 0x000700, "Member 'UHWCharacterInventoryWidget::CollapseText' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, NavigationContextCalloutDisplay) == 0x000718, "Member 'UHWCharacterInventoryWidget::NavigationContextCalloutDisplay' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bClientCanReorder) == 0x000764, "Member 'UHWCharacterInventoryWidget::bClientCanReorder' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, InventoryDragWidgetClass) == 0x000768, "Member 'UHWCharacterInventoryWidget::InventoryDragWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, DragWidgetAlignment_KBM) == 0x000770, "Member 'UHWCharacterInventoryWidget::DragWidgetAlignment_KBM' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, DragWidgetAlignment_Gamepad) == 0x000780, "Member 'UHWCharacterInventoryWidget::DragWidgetAlignment_Gamepad' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, MoveItemActionBindingContainer) == 0x000790, "Member 'UHWCharacterInventoryWidget::MoveItemActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, CancelSwapActionBindingContainer) == 0x0007D0, "Member 'UHWCharacterInventoryWidget::CancelSwapActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, SwapConsumablesActionBindingContainer) == 0x000810, "Member 'UHWCharacterInventoryWidget::SwapConsumablesActionBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, bAllowSwapConsumables) == 0x000850, "Member 'UHWCharacterInventoryWidget::bAllowSwapConsumables' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, PrimaryConsumableSlot) == 0x000854, "Member 'UHWCharacterInventoryWidget::PrimaryConsumableSlot' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, SecondaryConsumableSlot) == 0x000860, "Member 'UHWCharacterInventoryWidget::SecondaryConsumableSlot' has a wrong offset!");
static_assert(offsetof(UHWCharacterInventoryWidget, DragWidget) == 0x000870, "Member 'UHWCharacterInventoryWidget::DragWidget' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderAbilitiesOrderEntryWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWGodBuilderAbilitiesOrderEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x20];                                     // 0x05F8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityIndex;                                      // 0x0618(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonHovered();
	void HandleEntryButtonSelected();
	void SetBackgroundColorStyle(const struct FGameplayTag& InStyleTag);
	void SetIsSelected(bool bInIsSelected);
	void SetText(const class FText& InText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderAbilitiesOrderEntryWidget">();
	}
	static class UHWGodBuilderAbilitiesOrderEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderAbilitiesOrderEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderAbilitiesOrderEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderAbilitiesOrderEntryWidget");
static_assert(sizeof(UHWGodBuilderAbilitiesOrderEntryWidget) == 0x000628, "Wrong size on UHWGodBuilderAbilitiesOrderEntryWidget");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderEntryWidget, AbilityIndex) == 0x000618, "Member 'UHWGodBuilderAbilitiesOrderEntryWidget::AbilityIndex' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderAbilitiesOrderEntryWidget, HitTarget) == 0x000620, "Member 'UHWGodBuilderAbilitiesOrderEntryWidget::HitTarget' has a wrong offset!");

// Class HemingwayUI.HWEquipmentItemDragWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWEquipmentItemDragWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x28];                                     // 0x05F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAlignmentVector(const struct FVector2D& Alignment);
	void SetEquipmentItem(const class UHWEquipmentItem* EquipmentItem);
	void SetIsDragging(bool bNewIsDragging);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWEquipmentItemDragWidget">();
	}
	static class UHWEquipmentItemDragWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWEquipmentItemDragWidget>();
	}
};
static_assert(alignof(UHWEquipmentItemDragWidget) == 0x000008, "Wrong alignment on UHWEquipmentItemDragWidget");
static_assert(sizeof(UHWEquipmentItemDragWidget) == 0x000620, "Wrong size on UHWEquipmentItemDragWidget");

// Class HemingwayUI.HWCharacterShieldWidget
// 0x0030 (0x0668 - 0x0638)
class UHWCharacterShieldWidget : public UHWCharacterWidget
{
public:
	uint8                                         Pad_638[0x10];                                     // 0x0638(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalShieldHealth;                                 // 0x0648(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float ShieldHealthValue)> OnShieldHealthUpdated;                   // 0x0650(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          bUpdatePositionOnHealthChange;                     // 0x0660(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_661[0x7];                                      // 0x0661(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CharacterHealthUpdated();
	void CharacterMaxHealthUpdated();
	void HandleCharacterChanged(class AHWCharacterAbilitySystemActor* CharacterAbilitySystemActor, class AHWCharacter_Base* NewCharacterOwner);
	void HandleShieldInstanceHealthChanged(class UHWShieldInstance* ShieldInstance, float NewHealth);
	void HandleShieldListUpdated(class UHWShieldManagerComponent* ShieldManagerComponent);
	void HandleShieldManagerUpdated(class UHWShieldManagerComponent* ShieldManagerComponent);
	void TotalShieldHealthUpdated();

	bool CalculateInlineShieldsRatios(float* FrontSpacerRatio, float* OmniShieldRatio, float* PhysicalShieldRatio, float* MagicalShieldRatio, float* BackSpacerRatio) const;
	float GetCharacterHealth() const;
	float GetCharacterMaxHealth() const;
	class UHWShieldManagerComponent* GetShieldManagerComponent() const;
	float GetShieldStartPosition(const struct FGeometry& ReferenceGeometry, EOrientation Orientation) const;
	float GetShieldStartPositionPercent() const;
	float GetTotalShieldHealthPercent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCharacterShieldWidget">();
	}
	static class UHWCharacterShieldWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCharacterShieldWidget>();
	}
};
static_assert(alignof(UHWCharacterShieldWidget) == 0x000008, "Wrong alignment on UHWCharacterShieldWidget");
static_assert(sizeof(UHWCharacterShieldWidget) == 0x000668, "Wrong size on UHWCharacterShieldWidget");
static_assert(offsetof(UHWCharacterShieldWidget, TotalShieldHealth) == 0x000648, "Member 'UHWCharacterShieldWidget::TotalShieldHealth' has a wrong offset!");
static_assert(offsetof(UHWCharacterShieldWidget, OnShieldHealthUpdated) == 0x000650, "Member 'UHWCharacterShieldWidget::OnShieldHealthUpdated' has a wrong offset!");
static_assert(offsetof(UHWCharacterShieldWidget, bUpdatePositionOnHealthChange) == 0x000660, "Member 'UHWCharacterShieldWidget::bUpdatePositionOnHealthChange' has a wrong offset!");

// Class HemingwayUI.HWInventoryItemWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWInventoryItemWidget : public UHWWidget
{
public:
	TSoftObjectPtr<class UHWInventoryItem>        InventoryItemPtr;                                  // 0x05F8(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Clear();
	void DisplayInventoryItem(const class UHWInventoryItem* InventoryItem);
	void HideTooltip();
	void SetInventoryItem(const class UHWInventoryItem* InInventoryItem);
	void ShowTooltip(class UWidget* ReferenceWidget, EHWTooltipAxis Axis);

	const class UHWInventoryItem* GetInventoryItem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInventoryItemWidget">();
	}
	static class UHWInventoryItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInventoryItemWidget>();
	}
};
static_assert(alignof(UHWInventoryItemWidget) == 0x000008, "Wrong alignment on UHWInventoryItemWidget");
static_assert(sizeof(UHWInventoryItemWidget) == 0x000620, "Wrong size on UHWInventoryItemWidget");
static_assert(offsetof(UHWInventoryItemWidget, InventoryItemPtr) == 0x0005F8, "Member 'UHWInventoryItemWidget::InventoryItemPtr' has a wrong offset!");

// Class HemingwayUI.HWGodAspectItemWidget
// 0x0040 (0x0660 - 0x0620)
class UHWGodAspectItemWidget : public UHWInventoryItemWidget
{
public:
	TSoftObjectPtr<class UHWCharacterItem>        CharacterItem;                                     // 0x0620(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_648[0x14];                                     // 0x0648(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableGodAspectWidget;                            // 0x065C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSaveOnDraftLobby;                                 // 0x065D(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65E[0x2];                                      // 0x065E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeEquipAspect();
	void EquipAspect();
	void EquippedStateUpdated(bool bIsEquipped);
	void RefreshAccountLevelRequirementDisplay();
	void SetFromCharacterItem(const class UHWCharacterItem* InCharacterItem);
	void SetFromCharacterItemId(const struct FRH_ItemId& InCharacterItemId);
	void ToggleEquipState();
	void UpdateEquippedState();

	int32 GetAccountLevelRequirement() const;
	bool HasAspectItem() const;
	bool IsAccountLevelRequirementMet() const;
	bool IsEquippedToLoadout() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodAspectItemWidget">();
	}
	static class UHWGodAspectItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodAspectItemWidget>();
	}
};
static_assert(alignof(UHWGodAspectItemWidget) == 0x000008, "Wrong alignment on UHWGodAspectItemWidget");
static_assert(sizeof(UHWGodAspectItemWidget) == 0x000660, "Wrong size on UHWGodAspectItemWidget");
static_assert(offsetof(UHWGodAspectItemWidget, CharacterItem) == 0x000620, "Member 'UHWGodAspectItemWidget::CharacterItem' has a wrong offset!");
static_assert(offsetof(UHWGodAspectItemWidget, bEnableGodAspectWidget) == 0x00065C, "Member 'UHWGodAspectItemWidget::bEnableGodAspectWidget' has a wrong offset!");
static_assert(offsetof(UHWGodAspectItemWidget, bSaveOnDraftLobby) == 0x00065D, "Member 'UHWGodAspectItemWidget::bSaveOnDraftLobby' has a wrong offset!");

// Class HemingwayUI.HWSpectatorGraphWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWSpectatorGraphWidget : public UHWWidget
{
public:
	struct FTimerHandle                           TeamDataRefreshTimerHandle;                        // 0x05F8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TeamDataRefreshRate;                               // 0x0600(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWTeamStatsTracker*                    CachedOrderStatsTracker;                           // 0x0608(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AHWTeamStatsTracker*                    CachedChaosStatsTracker;                           // 0x0610(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool HasCachedTeamStatTrackers();
	void OnTeamDataUpdated(float XPDifference, float GoldDifference, float GameElapsedTime);
	void UpdateTeamData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorGraphWidget">();
	}
	static class UHWSpectatorGraphWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorGraphWidget>();
	}
};
static_assert(alignof(UHWSpectatorGraphWidget) == 0x000008, "Wrong alignment on UHWSpectatorGraphWidget");
static_assert(sizeof(UHWSpectatorGraphWidget) == 0x000618, "Wrong size on UHWSpectatorGraphWidget");
static_assert(offsetof(UHWSpectatorGraphWidget, TeamDataRefreshTimerHandle) == 0x0005F8, "Member 'UHWSpectatorGraphWidget::TeamDataRefreshTimerHandle' has a wrong offset!");
static_assert(offsetof(UHWSpectatorGraphWidget, TeamDataRefreshRate) == 0x000600, "Member 'UHWSpectatorGraphWidget::TeamDataRefreshRate' has a wrong offset!");
static_assert(offsetof(UHWSpectatorGraphWidget, CachedOrderStatsTracker) == 0x000608, "Member 'UHWSpectatorGraphWidget::CachedOrderStatsTracker' has a wrong offset!");
static_assert(offsetof(UHWSpectatorGraphWidget, CachedChaosStatsTracker) == 0x000610, "Member 'UHWSpectatorGraphWidget::CachedChaosStatsTracker' has a wrong offset!");

// Class HemingwayUI.HWSpectatorHUD
// 0x0100 (0x0888 - 0x0788)
class AHWSpectatorHUD : public AHWGameHUD
{
public:
	TArray<struct FGameplayTag>                   SpectatorInputTags;                                // 0x0788(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGenericTeamId& NewTeamId)> OnTrackTeamPlayersChanged; // 0x0798(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A8[0x20];                                     // 0x07A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWTeamState>            TrackedOrderTeamState;                             // 0x07C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AHWTeamState>            TrackedChaosTeamState;                             // 0x07D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AHWCharacterAbilitySystemActor*, bool> OrderTeamFireGiantBuffs;                       // 0x07D8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class AHWCharacterAbilitySystemActor*, bool> ChaosTeamFireGiantBuffs;                       // 0x0828(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_878[0x10];                                     // 0x0878(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleChaosTeamMembersUpdated();
	void HandleOrderTeamMembersUpdated();
	void HandleTeamsUpdated();
	void HandleTrackedTeamsUpdated();
	void SwapPlayerStatesForTeam(const struct FGenericTeamId& TeamId, class AHWPlayerState* playerStateA, class AHWPlayerState* playerStateB);
	void UpdatedSortedPlayerStatesForTeam(const struct FGenericTeamId& TeamId);

	class AHWPlayerController_Spectator* GetSpectatorPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorHUD">();
	}
	static class AHWSpectatorHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHWSpectatorHUD>();
	}
};
static_assert(alignof(AHWSpectatorHUD) == 0x000008, "Wrong alignment on AHWSpectatorHUD");
static_assert(sizeof(AHWSpectatorHUD) == 0x000888, "Wrong size on AHWSpectatorHUD");
static_assert(offsetof(AHWSpectatorHUD, SpectatorInputTags) == 0x000788, "Member 'AHWSpectatorHUD::SpectatorInputTags' has a wrong offset!");
static_assert(offsetof(AHWSpectatorHUD, OnTrackTeamPlayersChanged) == 0x000798, "Member 'AHWSpectatorHUD::OnTrackTeamPlayersChanged' has a wrong offset!");
static_assert(offsetof(AHWSpectatorHUD, TrackedOrderTeamState) == 0x0007C8, "Member 'AHWSpectatorHUD::TrackedOrderTeamState' has a wrong offset!");
static_assert(offsetof(AHWSpectatorHUD, TrackedChaosTeamState) == 0x0007D0, "Member 'AHWSpectatorHUD::TrackedChaosTeamState' has a wrong offset!");
static_assert(offsetof(AHWSpectatorHUD, OrderTeamFireGiantBuffs) == 0x0007D8, "Member 'AHWSpectatorHUD::OrderTeamFireGiantBuffs' has a wrong offset!");
static_assert(offsetof(AHWSpectatorHUD, ChaosTeamFireGiantBuffs) == 0x000828, "Member 'AHWSpectatorHUD::ChaosTeamFireGiantBuffs' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderAbilitiesListEntryWidget
// 0x0000 (0x0628 - 0x0628)
class UHWGodBuilderAbilitiesListEntryWidget : public UHWGodAbilityEntryWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderAbilitiesListEntryWidget">();
	}
	static class UHWGodBuilderAbilitiesListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderAbilitiesListEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderAbilitiesListEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderAbilitiesListEntryWidget");
static_assert(sizeof(UHWGodBuilderAbilitiesListEntryWidget) == 0x000628, "Wrong size on UHWGodBuilderAbilitiesListEntryWidget");

// Class HemingwayUI.HWSpectatorHUDWidget
// 0x0030 (0x0878 - 0x0848)
class UHWSpectatorHUDWidget : public UHWGameHUDWidget
{
public:
	uint8                                         Pad_848[0x8];                                      // 0x0848(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWWidgetSwitcher*                      TeamPanels_Switcher;                               // 0x0850(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TeamPanelOptionTags;                               // 0x0858(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorHUDWidget">();
	}
	static class UHWSpectatorHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorHUDWidget>();
	}
};
static_assert(alignof(UHWSpectatorHUDWidget) == 0x000008, "Wrong alignment on UHWSpectatorHUDWidget");
static_assert(sizeof(UHWSpectatorHUDWidget) == 0x000878, "Wrong size on UHWSpectatorHUDWidget");
static_assert(offsetof(UHWSpectatorHUDWidget, TeamPanels_Switcher) == 0x000850, "Member 'UHWSpectatorHUDWidget::TeamPanels_Switcher' has a wrong offset!");
static_assert(offsetof(UHWSpectatorHUDWidget, TeamPanelOptionTags) == 0x000858, "Member 'UHWSpectatorHUDWidget::TeamPanelOptionTags' has a wrong offset!");

// Class HemingwayUI.HWSpectatorMatchStatsPlayerWidget
// 0x0000 (0x0638 - 0x0638)
class UHWSpectatorMatchStatsPlayerWidget : public UHWCharacterWidget
{
public:
	void PopulatePlayerInfo(const TSoftObjectPtr<class UTexture2D>& PlayerIcon, const struct FGenericTeamId& TeamId);
	void UpdatePlayerStatValues(int32 Value, float Percent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorMatchStatsPlayerWidget">();
	}
	static class UHWSpectatorMatchStatsPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorMatchStatsPlayerWidget>();
	}
};
static_assert(alignof(UHWSpectatorMatchStatsPlayerWidget) == 0x000008, "Wrong alignment on UHWSpectatorMatchStatsPlayerWidget");
static_assert(sizeof(UHWSpectatorMatchStatsPlayerWidget) == 0x000638, "Wrong size on UHWSpectatorMatchStatsPlayerWidget");

// Class HemingwayUI.HWGodBuilderBuildDisplayWidget
// 0x0230 (0x0828 - 0x05F8)
class UHWGodBuilderBuildDisplayWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x50];                                     // 0x05F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuild                            DisplayedGodBuild;                                 // 0x0648(0x0190)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWCharacterItem>        GodItem;                                           // 0x07D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEntriesExpanded;                                  // 0x07E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E1[0x7];                                      // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWGodBuilderBuildDisplayEntryWidget> EntryWidgetClass;                        // 0x07E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               FavoriteIcon;                                      // 0x07F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWPlayerNameDisplayWidget*             PlayerNameDisplay;                                 // 0x07F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryWidget*   FinalBuildEntry;                                   // 0x0800(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryWidget*   StartingItemsEntry;                                // 0x0808(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderAbilitiesOrderWidget*      AbilitiesOrder;                                    // 0x0810(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayAspectWidget*  AspectDisplay;                                     // 0x0818(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         EntryBox;                                          // 0x0820(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FHWGodBuild GetDisplayedBuild();
	void HandleAbilityOrderIconHovered(int32 AbilityIndex);
	void HandleAbilityOrderIconUnovered(int32 AbilityIndex);
	void HandleBuildItemEntryHovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildItemEntrySelected(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleBuildItemEntryUnhovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void SetDisplayedBuild(const struct FHWGodBuild& InGodBuild);
	void SetEntriesExpanded(bool bInIsExpanded);
	void SetGodItem(const class UHWCharacterItem* InCharacterItem);
	void UpdateBuildDisplay();

	bool GetEntriesExpanded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildDisplayWidget">();
	}
	static class UHWGodBuilderBuildDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildDisplayWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildDisplayWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildDisplayWidget");
static_assert(sizeof(UHWGodBuilderBuildDisplayWidget) == 0x000828, "Wrong size on UHWGodBuilderBuildDisplayWidget");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, DisplayedGodBuild) == 0x000648, "Member 'UHWGodBuilderBuildDisplayWidget::DisplayedGodBuild' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, GodItem) == 0x0007D8, "Member 'UHWGodBuilderBuildDisplayWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, bEntriesExpanded) == 0x0007E0, "Member 'UHWGodBuilderBuildDisplayWidget::bEntriesExpanded' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, EntryWidgetClass) == 0x0007E8, "Member 'UHWGodBuilderBuildDisplayWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, FavoriteIcon) == 0x0007F0, "Member 'UHWGodBuilderBuildDisplayWidget::FavoriteIcon' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, PlayerNameDisplay) == 0x0007F8, "Member 'UHWGodBuilderBuildDisplayWidget::PlayerNameDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, FinalBuildEntry) == 0x000800, "Member 'UHWGodBuilderBuildDisplayWidget::FinalBuildEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, StartingItemsEntry) == 0x000808, "Member 'UHWGodBuilderBuildDisplayWidget::StartingItemsEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, AbilitiesOrder) == 0x000810, "Member 'UHWGodBuilderBuildDisplayWidget::AbilitiesOrder' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, AspectDisplay) == 0x000818, "Member 'UHWGodBuilderBuildDisplayWidget::AspectDisplay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayWidget, EntryBox) == 0x000820, "Member 'UHWGodBuilderBuildDisplayWidget::EntryBox' has a wrong offset!");

// Class HemingwayUI.HWSpectatorMatchStatsWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWSpectatorMatchStatsWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialDelayTimeForPMCalculations;                 // 0x0600(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWSpectatorMatchStatsPlayerWidget> PlayerStatsWidgetClass;                    // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWSpectatorMatchStatsPlayerWidget*> PlayerStatsWidgets;                            // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    MatchStatsContainer;                               // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           DataRefreshTimerHandle;                            // 0x0628(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DataRefreshRate;                                   // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UComboBoxString*                        StatsOptionsComboBox;                              // 0x0638(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWSpectatorStatTypes                         CurrentStatSelection;                              // 0x0640(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           LocalizedStatSelectionOptions;                     // 0x0648(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UHWButton*                              MinimizePanel_Button;                              // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      Minimize_Switcher;                                 // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  StatOptionTags;                                    // 0x0668(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	void HandleMinimizePanelButtonPressed();
	void HandleTeamMembersUpdated();
	void HandleTeamsUpdated();
	void OnAllPlayersCleared();
	void OnPlayerAdded(class UHWSpectatorMatchStatsPlayerWidget* PlayerWidget, int32 RowIndex);
	void OnSelectionChanged(const class FString& SelectedItem, ESelectInfo SelectionType);
	void UpdatePlayerData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorMatchStatsWidget">();
	}
	static class UHWSpectatorMatchStatsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorMatchStatsWidget>();
	}
};
static_assert(alignof(UHWSpectatorMatchStatsWidget) == 0x000008, "Wrong alignment on UHWSpectatorMatchStatsWidget");
static_assert(sizeof(UHWSpectatorMatchStatsWidget) == 0x000688, "Wrong size on UHWSpectatorMatchStatsWidget");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, InitialDelayTimeForPMCalculations) == 0x000600, "Member 'UHWSpectatorMatchStatsWidget::InitialDelayTimeForPMCalculations' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, PlayerStatsWidgetClass) == 0x000608, "Member 'UHWSpectatorMatchStatsWidget::PlayerStatsWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, PlayerStatsWidgets) == 0x000610, "Member 'UHWSpectatorMatchStatsWidget::PlayerStatsWidgets' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, MatchStatsContainer) == 0x000620, "Member 'UHWSpectatorMatchStatsWidget::MatchStatsContainer' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, DataRefreshTimerHandle) == 0x000628, "Member 'UHWSpectatorMatchStatsWidget::DataRefreshTimerHandle' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, DataRefreshRate) == 0x000630, "Member 'UHWSpectatorMatchStatsWidget::DataRefreshRate' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, StatsOptionsComboBox) == 0x000638, "Member 'UHWSpectatorMatchStatsWidget::StatsOptionsComboBox' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, CurrentStatSelection) == 0x000640, "Member 'UHWSpectatorMatchStatsWidget::CurrentStatSelection' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, LocalizedStatSelectionOptions) == 0x000648, "Member 'UHWSpectatorMatchStatsWidget::LocalizedStatSelectionOptions' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, MinimizePanel_Button) == 0x000658, "Member 'UHWSpectatorMatchStatsWidget::MinimizePanel_Button' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, Minimize_Switcher) == 0x000660, "Member 'UHWSpectatorMatchStatsWidget::Minimize_Switcher' has a wrong offset!");
static_assert(offsetof(UHWSpectatorMatchStatsWidget, StatOptionTags) == 0x000668, "Member 'UHWSpectatorMatchStatsWidget::StatOptionTags' has a wrong offset!");

// Class HemingwayUI.HWSpectatorPlayerViewWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWSpectatorPlayerViewWidget : public UHWWidget
{
public:
	class AHWPlayerState*                         CurrentTrackedPlayerState;                         // 0x05F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSpectatorTargetChanged(class AHWPlayerState* NewPlayerState);

	TArray<class UHWCharacterWidget*> GetSpectatorPlayerViewHWWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorPlayerViewWidget">();
	}
	static class UHWSpectatorPlayerViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorPlayerViewWidget>();
	}
};
static_assert(alignof(UHWSpectatorPlayerViewWidget) == 0x000008, "Wrong alignment on UHWSpectatorPlayerViewWidget");
static_assert(sizeof(UHWSpectatorPlayerViewWidget) == 0x000600, "Wrong size on UHWSpectatorPlayerViewWidget");
static_assert(offsetof(UHWSpectatorPlayerViewWidget, CurrentTrackedPlayerState) == 0x0005F8, "Member 'UHWSpectatorPlayerViewWidget::CurrentTrackedPlayerState' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderModesListEntryWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWGodBuilderModesListEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitTarget;                                         // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           EntryMode;                                         // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleEntryButtonSelected();
	void SetEntryMode(const struct FGameplayTag& InEntryMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderModesListEntryWidget">();
	}
	static class UHWGodBuilderModesListEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderModesListEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderModesListEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderModesListEntryWidget");
static_assert(sizeof(UHWGodBuilderModesListEntryWidget) == 0x000618, "Wrong size on UHWGodBuilderModesListEntryWidget");
static_assert(offsetof(UHWGodBuilderModesListEntryWidget, HitTarget) == 0x000608, "Member 'UHWGodBuilderModesListEntryWidget::HitTarget' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderModesListEntryWidget, EntryMode) == 0x000610, "Member 'UHWGodBuilderModesListEntryWidget::EntryMode' has a wrong offset!");

// Class HemingwayUI.HWSpectatorTeamWidget
// 0x0038 (0x0630 - 0x05F8)
class UHWSpectatorTeamWidget : public UHWWidget
{
public:
	struct FGenericTeamId                         TeamIdToTrack;                                     // 0x05F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AHWTeamState>            TrackedTeamState;                                  // 0x05FC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWScoreboardPlayerWidget>  TeamPlayerWidgetClass;                             // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWScoreboardPlayerWidget*>      TeamPlayerWidgets;                                 // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWUniformGridPanel*                    PlayerContainer;                                   // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SelectedIndex;                                     // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleLocalTeamUpdated(const struct FGenericTeamId& TeamId);
	bool HandlePlayerSwap(int32 Index_0, int32 Direction);
	void HandleTeamMembersUpdated();
	void OnShowButtons(bool bShow);
	void OnTeamMemberAdded(class UHWScoreboardPlayerWidget* TeamWidget, int32 RowIndex);
	void OnTeamMembersCleared();
	void OnUnselect(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSpectatorTeamWidget">();
	}
	static class UHWSpectatorTeamWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSpectatorTeamWidget>();
	}
};
static_assert(alignof(UHWSpectatorTeamWidget) == 0x000008, "Wrong alignment on UHWSpectatorTeamWidget");
static_assert(sizeof(UHWSpectatorTeamWidget) == 0x000630, "Wrong size on UHWSpectatorTeamWidget");
static_assert(offsetof(UHWSpectatorTeamWidget, TeamIdToTrack) == 0x0005F8, "Member 'UHWSpectatorTeamWidget::TeamIdToTrack' has a wrong offset!");
static_assert(offsetof(UHWSpectatorTeamWidget, TrackedTeamState) == 0x0005FC, "Member 'UHWSpectatorTeamWidget::TrackedTeamState' has a wrong offset!");
static_assert(offsetof(UHWSpectatorTeamWidget, TeamPlayerWidgetClass) == 0x000608, "Member 'UHWSpectatorTeamWidget::TeamPlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWSpectatorTeamWidget, TeamPlayerWidgets) == 0x000610, "Member 'UHWSpectatorTeamWidget::TeamPlayerWidgets' has a wrong offset!");
static_assert(offsetof(UHWSpectatorTeamWidget, PlayerContainer) == 0x000620, "Member 'UHWSpectatorTeamWidget::PlayerContainer' has a wrong offset!");
static_assert(offsetof(UHWSpectatorTeamWidget, SelectedIndex) == 0x000628, "Member 'UHWSpectatorTeamWidget::SelectedIndex' has a wrong offset!");

// Class HemingwayUI.HWTeamBarEntryCooldownWidget
// 0x0010 (0x06D8 - 0x06C8)
class UHWTeamBarEntryCooldownWidget : public UHWGameplayEffectCooldownWidget
{
public:
	struct FHWInventorySlot                       TrackedAbilitySlot;                                // 0x06C8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAbilityUnlocked;                                // 0x06D4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D5[0x3];                                      // 0x06D5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleAbilityUnlocked(const struct FHWInventorySlot& AbilitySlot, bool IsUnlocked);
	void OnAbilityUnlocked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTeamBarEntryCooldownWidget">();
	}
	static class UHWTeamBarEntryCooldownWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTeamBarEntryCooldownWidget>();
	}
};
static_assert(alignof(UHWTeamBarEntryCooldownWidget) == 0x000008, "Wrong alignment on UHWTeamBarEntryCooldownWidget");
static_assert(sizeof(UHWTeamBarEntryCooldownWidget) == 0x0006D8, "Wrong size on UHWTeamBarEntryCooldownWidget");
static_assert(offsetof(UHWTeamBarEntryCooldownWidget, TrackedAbilitySlot) == 0x0006C8, "Member 'UHWTeamBarEntryCooldownWidget::TrackedAbilitySlot' has a wrong offset!");
static_assert(offsetof(UHWTeamBarEntryCooldownWidget, bIsAbilityUnlocked) == 0x0006D4, "Member 'UHWTeamBarEntryCooldownWidget::bIsAbilityUnlocked' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderBuildDisplayEntryItemWidget
// 0x0078 (0x0670 - 0x05F8)
class UHWGodBuilderBuildDisplayEntryItemWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x40];                                     // 0x05F8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	EHWGodBuilderItemEntryType                    CachedEntryType;                                   // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWEquipmentItem>        DisplayedItem;                                     // 0x0640(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              HitArea;                                           // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DoHover();
	void DoUnhover();
	void HandleEntryClicked();
	void HandleEntryHovered();
	void HandleEntryRightClicked();
	void HandleEntryUnhovered();
	void HideTooltip();
	void SetIsSelected(bool bInIsSelected);
	void SetSlotTextVisibility(ESlateVisibility InSlotTextVisibility);
	void ShowTooltip(class UWidget* ReferenceWidget, bool bShowContextBar, EHWTooltipAxis Axis);
	void UpdateDisplayedItem();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildDisplayEntryItemWidget">();
	}
	static class UHWGodBuilderBuildDisplayEntryItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildDisplayEntryItemWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildDisplayEntryItemWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildDisplayEntryItemWidget");
static_assert(sizeof(UHWGodBuilderBuildDisplayEntryItemWidget) == 0x000670, "Wrong size on UHWGodBuilderBuildDisplayEntryItemWidget");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryItemWidget, CachedEntryType) == 0x000638, "Member 'UHWGodBuilderBuildDisplayEntryItemWidget::CachedEntryType' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryItemWidget, DisplayedItem) == 0x000640, "Member 'UHWGodBuilderBuildDisplayEntryItemWidget::DisplayedItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryItemWidget, HitArea) == 0x000668, "Member 'UHWGodBuilderBuildDisplayEntryItemWidget::HitArea' has a wrong offset!");

// Class HemingwayUI.HWTeamBarEntryWidget
// 0x0000 (0x0638 - 0x0638)
class UHWTeamBarEntryWidget : public UHWCharacterWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTeamBarEntryWidget">();
	}
	static class UHWTeamBarEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTeamBarEntryWidget>();
	}
};
static_assert(alignof(UHWTeamBarEntryWidget) == 0x000008, "Wrong alignment on UHWTeamBarEntryWidget");
static_assert(sizeof(UHWTeamBarEntryWidget) == 0x000638, "Wrong size on UHWTeamBarEntryWidget");

// Class HemingwayUI.HWAbilityPopupWidget
// 0x0048 (0x0640 - 0x05F8)
class UHWAbilityPopupWidget final : public UHWWidget
{
public:
	struct FHWUIActionBindingContainer            ClosePopupActionBinding;                           // 0x05F8(0x0040)(Edit, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAbilityPopupWidget">();
	}
	static class UHWAbilityPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAbilityPopupWidget>();
	}
};
static_assert(alignof(UHWAbilityPopupWidget) == 0x000008, "Wrong alignment on UHWAbilityPopupWidget");
static_assert(sizeof(UHWAbilityPopupWidget) == 0x000640, "Wrong size on UHWAbilityPopupWidget");
static_assert(offsetof(UHWAbilityPopupWidget, ClosePopupActionBinding) == 0x0005F8, "Member 'UHWAbilityPopupWidget::ClosePopupActionBinding' has a wrong offset!");

// Class HemingwayUI.HWGodSelectorEntryWidget
// 0x0050 (0x0648 - 0x05F8)
class UHWGodSelectorEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x50];                                     // 0x05F8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HoverGodEntry(bool bHovered);
	void SelectGodEntry(bool bSelected);
	void SetDisabled(bool bDisabled);
	void SetGodData(const class UHWCharacterItem* InGodItem);
	void SetGodEntryDisplay(const class UHWCharacterItem* InGodItem);
	void SetSelected(bool bSelected);

	const class UHWCharacterItem* GetAssociatedGodItem() const;
	bool IsEntryDisabled() const;
	bool IsEntrySelected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodSelectorEntryWidget">();
	}
	static class UHWGodSelectorEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodSelectorEntryWidget>();
	}
};
static_assert(alignof(UHWGodSelectorEntryWidget) == 0x000008, "Wrong alignment on UHWGodSelectorEntryWidget");
static_assert(sizeof(UHWGodSelectorEntryWidget) == 0x000648, "Wrong size on UHWGodSelectorEntryWidget");

// Class HemingwayUI.HWDraftLobbyBoosterEntryWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWDraftLobbyBoosterEntryWidget final : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWInventoryItem>        DisplayItem;                                       // 0x0608(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemDisplayWidget*                   BoosterItemDisplay;                                // 0x0610(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAppliedTeamBoostersUpdated();
	void HandleBoosterItemDisplaySelected(class UHWItemDisplayWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void RefreshDisplay();

	bool IsBoosterApplied() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyBoosterEntryWidget">();
	}
	static class UHWDraftLobbyBoosterEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyBoosterEntryWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyBoosterEntryWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyBoosterEntryWidget");
static_assert(sizeof(UHWDraftLobbyBoosterEntryWidget) == 0x000618, "Wrong size on UHWDraftLobbyBoosterEntryWidget");
static_assert(offsetof(UHWDraftLobbyBoosterEntryWidget, DisplayItem) == 0x000608, "Member 'UHWDraftLobbyBoosterEntryWidget::DisplayItem' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyBoosterEntryWidget, BoosterItemDisplay) == 0x000610, "Member 'UHWDraftLobbyBoosterEntryWidget::BoosterItemDisplay' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyBoosterPopupWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWDraftLobbyBoosterPopupWidget final : public UHWWidget
{
public:
	TSubclassOf<class UHWDraftLobbyBoosterEntryWidget> BoosterEntryWidgetClass;                      // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       BoostersBox;                                       // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleOnBoosterClicked(class UHWDraftLobbyBoosterEntryWidget* EntryWidget, const class UHWInventoryItem* InventoryItem);
	void HandleOnOrderSuccess(class URHStoreItem* StoreItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyBoosterPopupWidget">();
	}
	static class UHWDraftLobbyBoosterPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyBoosterPopupWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyBoosterPopupWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyBoosterPopupWidget");
static_assert(sizeof(UHWDraftLobbyBoosterPopupWidget) == 0x000608, "Wrong size on UHWDraftLobbyBoosterPopupWidget");
static_assert(offsetof(UHWDraftLobbyBoosterPopupWidget, BoosterEntryWidgetClass) == 0x0005F8, "Member 'UHWDraftLobbyBoosterPopupWidget::BoosterEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyBoosterPopupWidget, BoostersBox) == 0x000600, "Member 'UHWDraftLobbyBoosterPopupWidget::BoostersBox' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbyActiveTaskDisplayEntryWidget
// 0x0000 (0x05F8 - 0x05F8)
class UHWDraftLobbyActiveTaskDisplayEntryWidget final : public UHWWidget
{
public:
	void SetDraftTask(const struct FDraftTask& DraftTask, const class FString& PlayerName, bool bIsCompleteTask, bool bIsEnemyTask, bool bIsLocalTask);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyActiveTaskDisplayEntryWidget">();
	}
	static class UHWDraftLobbyActiveTaskDisplayEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyActiveTaskDisplayEntryWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyActiveTaskDisplayEntryWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyActiveTaskDisplayEntryWidget");
static_assert(sizeof(UHWDraftLobbyActiveTaskDisplayEntryWidget) == 0x0005F8, "Wrong size on UHWDraftLobbyActiveTaskDisplayEntryWidget");

// Class HemingwayUI.HWDraftLobbyActiveTaskDisplayWidget
// 0x0048 (0x0640 - 0x05F8)
class UHWDraftLobbyActiveTaskDisplayWidget final : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(bool bHasLocalActiveTask, const TArray<struct FDraftTask>& ActiveTasks)> OnActiveTaskDisplayChanged; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         MaxTaskEntries;                                    // 0x0608(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60C[0x4];                                      // 0x060C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWDraftLobbyActiveTaskDisplayEntryWidget> EntryWidgetClass;                   // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                EntryPadding;                                      // 0x0618(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       EntryContainer;                                    // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ADraftReplicatedActor>   DraftActor;                                        // 0x0630(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EHWDraftType                                  DraftType;                                         // 0x0638(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleTasksChanged();
	void SetDraftActor(class ADraftReplicatedActor* InDraftActor);
	void UpdateTaskDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbyActiveTaskDisplayWidget">();
	}
	static class UHWDraftLobbyActiveTaskDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbyActiveTaskDisplayWidget>();
	}
};
static_assert(alignof(UHWDraftLobbyActiveTaskDisplayWidget) == 0x000008, "Wrong alignment on UHWDraftLobbyActiveTaskDisplayWidget");
static_assert(sizeof(UHWDraftLobbyActiveTaskDisplayWidget) == 0x000640, "Wrong size on UHWDraftLobbyActiveTaskDisplayWidget");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, OnActiveTaskDisplayChanged) == 0x0005F8, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::OnActiveTaskDisplayChanged' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, MaxTaskEntries) == 0x000608, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::MaxTaskEntries' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, EntryWidgetClass) == 0x000610, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, EntryPadding) == 0x000618, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, EntryContainer) == 0x000628, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::EntryContainer' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, DraftActor) == 0x000630, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::DraftActor' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbyActiveTaskDisplayWidget, DraftType) == 0x000638, "Member 'UHWDraftLobbyActiveTaskDisplayWidget::DraftType' has a wrong offset!");

// Class HemingwayUI.HWDraftLobbySettingsPopupWidget
// 0x00D8 (0x06D0 - 0x05F8)
class UHWDraftLobbySettingsPopupWidget final : public UHWWidget
{
public:
	struct FHWUIActionBindingContainer            ClosePopupActionBinding;                           // 0x05F8(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0x8];                                      // 0x0638(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWSettingsConfigAsset>  AutoBuildSettingAsset;                             // 0x0640(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWSettingsConfigAsset>  AutoSkillSettingAsset;                             // 0x0668(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWSettingsConfigAsset>  AutoFilterSettingAsset;                            // 0x0690(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSettingsEntryWidget*                 AutoBuildSettingWidget;                            // 0x06B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSettingsEntryWidget*                 AutoSkillSettingWidget;                            // 0x06C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSettingsEntryWidget*                 AutoFilterSettingWidget;                           // 0x06C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDraftLobbySettingsPopupWidget">();
	}
	static class UHWDraftLobbySettingsPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDraftLobbySettingsPopupWidget>();
	}
};
static_assert(alignof(UHWDraftLobbySettingsPopupWidget) == 0x000008, "Wrong alignment on UHWDraftLobbySettingsPopupWidget");
static_assert(sizeof(UHWDraftLobbySettingsPopupWidget) == 0x0006D0, "Wrong size on UHWDraftLobbySettingsPopupWidget");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, ClosePopupActionBinding) == 0x0005F8, "Member 'UHWDraftLobbySettingsPopupWidget::ClosePopupActionBinding' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoBuildSettingAsset) == 0x000640, "Member 'UHWDraftLobbySettingsPopupWidget::AutoBuildSettingAsset' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoSkillSettingAsset) == 0x000668, "Member 'UHWDraftLobbySettingsPopupWidget::AutoSkillSettingAsset' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoFilterSettingAsset) == 0x000690, "Member 'UHWDraftLobbySettingsPopupWidget::AutoFilterSettingAsset' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoBuildSettingWidget) == 0x0006B8, "Member 'UHWDraftLobbySettingsPopupWidget::AutoBuildSettingWidget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoSkillSettingWidget) == 0x0006C0, "Member 'UHWDraftLobbySettingsPopupWidget::AutoSkillSettingWidget' has a wrong offset!");
static_assert(offsetof(UHWDraftLobbySettingsPopupWidget, AutoFilterSettingWidget) == 0x0006C8, "Member 'UHWDraftLobbySettingsPopupWidget::AutoFilterSettingWidget' has a wrong offset!");

// Class HemingwayUI.HWAnimatedProgressBar
// 0x02C8 (0x08C0 - 0x05F8)
class UHWAnimatedProgressBar : public UHWWidget
{
public:
	bool                                          bGainedTextIsOnLeft;                               // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationPercentPerSecond;                         // 0x05FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWProgressBar*                         ProgressBar;                                       // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProgressBarStyle                      BarStyle;                                          // 0x0610(0x0290)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A0[0x8];                                      // 0x08A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAnimationCompleted;                              // 0x08A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetPercent();
	void OnProgressBarPercentChanged(float InPercent);
	void SetGainedProgressDisplay(int32 GainedProgress, bool bShow);
	void SetPercent(float InPercent, bool bAnimate);

	bool IsAnimating() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAnimatedProgressBar">();
	}
	static class UHWAnimatedProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAnimatedProgressBar>();
	}
};
static_assert(alignof(UHWAnimatedProgressBar) == 0x000010, "Wrong alignment on UHWAnimatedProgressBar");
static_assert(sizeof(UHWAnimatedProgressBar) == 0x0008C0, "Wrong size on UHWAnimatedProgressBar");
static_assert(offsetof(UHWAnimatedProgressBar, bGainedTextIsOnLeft) == 0x0005F8, "Member 'UHWAnimatedProgressBar::bGainedTextIsOnLeft' has a wrong offset!");
static_assert(offsetof(UHWAnimatedProgressBar, AnimationPercentPerSecond) == 0x0005FC, "Member 'UHWAnimatedProgressBar::AnimationPercentPerSecond' has a wrong offset!");
static_assert(offsetof(UHWAnimatedProgressBar, ProgressBar) == 0x000600, "Member 'UHWAnimatedProgressBar::ProgressBar' has a wrong offset!");
static_assert(offsetof(UHWAnimatedProgressBar, BarStyle) == 0x000610, "Member 'UHWAnimatedProgressBar::BarStyle' has a wrong offset!");
static_assert(offsetof(UHWAnimatedProgressBar, OnAnimationCompleted) == 0x0008A8, "Member 'UHWAnimatedProgressBar::OnAnimationCompleted' has a wrong offset!");

// Class HemingwayUI.HWLobbyHUDWidget
// 0x0000 (0x0710 - 0x0710)
class UHWLobbyHUDWidget final : public UHWBaseHUDWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWLobbyHUDWidget">();
	}
	static class UHWLobbyHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWLobbyHUDWidget>();
	}
};
static_assert(alignof(UHWLobbyHUDWidget) == 0x000008, "Wrong alignment on UHWLobbyHUDWidget");
static_assert(sizeof(UHWLobbyHUDWidget) == 0x000710, "Wrong size on UHWLobbyHUDWidget");

// Class HemingwayUI.HWLoadingScreenGodIconWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWLoadingScreenGodIconWidget final : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWCharacterItem>        DraftCharacter;                                    // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateDraftCharacter(const class UHWCharacterItem* Character);

	const class UHWCharacterItem* GetDraftCharacter() const;
	bool IsFriendly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWLoadingScreenGodIconWidget">();
	}
	static class UHWLoadingScreenGodIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWLoadingScreenGodIconWidget>();
	}
};
static_assert(alignof(UHWLoadingScreenGodIconWidget) == 0x000008, "Wrong alignment on UHWLoadingScreenGodIconWidget");
static_assert(sizeof(UHWLoadingScreenGodIconWidget) == 0x000608, "Wrong size on UHWLoadingScreenGodIconWidget");
static_assert(offsetof(UHWLoadingScreenGodIconWidget, DraftCharacter) == 0x0005F8, "Member 'UHWLoadingScreenGodIconWidget::DraftCharacter' has a wrong offset!");

// Class HemingwayUI.HWPersistentWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWPersistentWidget : public UHWWidget
{
public:
	struct FGameplayTag                           PersistentWidgetTag;                               // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnHUDInitialized();
	void RemovePersistent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPersistentWidget">();
	}
	static class UHWPersistentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPersistentWidget>();
	}
};
static_assert(alignof(UHWPersistentWidget) == 0x000008, "Wrong alignment on UHWPersistentWidget");
static_assert(sizeof(UHWPersistentWidget) == 0x000600, "Wrong size on UHWPersistentWidget");
static_assert(offsetof(UHWPersistentWidget, PersistentWidgetTag) == 0x0005F8, "Member 'UHWPersistentWidget::PersistentWidgetTag' has a wrong offset!");

// Class HemingwayUI.HWLoadingScreenWidget
// 0x0060 (0x0660 - 0x0600)
class UHWLoadingScreenWidget : public UHWPersistentWidget
{
public:
	TSubclassOf<class UHWPlayerCardWidget>        PlayerEntryWidgetClass;                            // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGuid, class UHWPlayerCardWidget*> PlayerWidgets;                                    // 0x0608(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddedPlayerEntryWidget(class UHWPlayerCardWidget* AddedWidget);
	void CreateWidgetsForCharacters(const TArray<struct FHWLoadingScreenTestData>& FriendlyCharactersItems, const TArray<struct FHWLoadingScreenTestData>& EnemyCharactersItems, const int32 LocalPlayerIndex, const int32 LocalTeamId);
	void HandleTeamsUpdated();
	void RemovedPlayerEntryWidget(class UHWPlayerCardWidget* RemovedWidget);
	void UpdateGameModeDisplay(const struct FHWGameModeInfo& GameModeInfo);
	void UpdateLocalTeamId(int32 TeamId);
	void UpdateTeamMembers(class AHWTeamState* Team);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWLoadingScreenWidget">();
	}
	static class UHWLoadingScreenWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWLoadingScreenWidget>();
	}
};
static_assert(alignof(UHWLoadingScreenWidget) == 0x000008, "Wrong alignment on UHWLoadingScreenWidget");
static_assert(sizeof(UHWLoadingScreenWidget) == 0x000660, "Wrong size on UHWLoadingScreenWidget");
static_assert(offsetof(UHWLoadingScreenWidget, PlayerEntryWidgetClass) == 0x000600, "Member 'UHWLoadingScreenWidget::PlayerEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWLoadingScreenWidget, PlayerWidgets) == 0x000608, "Member 'UHWLoadingScreenWidget::PlayerWidgets' has a wrong offset!");

// Class HemingwayUI.HWGainLossProgressBar
// 0x0060 (0x0658 - 0x05F8)
class UHWGainLossProgressBar : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0xC];                                      // 0x05F8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GainPercentFadePerSecond;                          // 0x0604(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GainFadeStartDelay;                                // 0x0608(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GainAnimationPercentThreshold;                     // 0x060C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GainStartPercent;                                  // 0x0610(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GainTargetPercent;                                 // 0x0614(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_618[0x10];                                     // 0x0618(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LossPercentFadePerSecond;                          // 0x0628(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LossFadeStartDelay;                                // 0x062C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LossAnimationPercentThreshold;                     // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LossStartPercent;                                  // 0x0634(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LossTargetPercent;                                 // 0x0638(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63C[0xC];                                      // 0x063C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWGainLossBarPercentRangeConfig> PercentConfigs;                                  // 0x0648(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void DisplayCurrentValuePercent(float Percent);
	void DisplayGainPercent(float Percent);
	void DisplayLossPercent(float Percent);
	void PercentRageConfigChanged(float NewPercent, const struct FHWGainLossBarPercentRangeConfig& NewPercentConfig);
	void SetCurrentValue(float NewCurrentValue, bool bAnimate);
	void SetGainEnabled(bool bGainIsEnabled);
	void SetLossEnabled(bool bLossIsEnabled);
	void SetMaxValue(float NewMaxValue);
	void SetPercentRangeConfigs(const TArray<struct FHWGainLossBarPercentRangeConfig>& NewPercentRangeConfigs);
	void SetValues(float NewCurrentValue, float NewMaxValue, bool bAnimate);

	float GetCurrentValue() const;
	float GetMaxValue() const;
	bool IsRunningGainAnimation() const;
	bool IsRunningLossAnimation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGainLossProgressBar">();
	}
	static class UHWGainLossProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGainLossProgressBar>();
	}
};
static_assert(alignof(UHWGainLossProgressBar) == 0x000008, "Wrong alignment on UHWGainLossProgressBar");
static_assert(sizeof(UHWGainLossProgressBar) == 0x000658, "Wrong size on UHWGainLossProgressBar");
static_assert(offsetof(UHWGainLossProgressBar, GainPercentFadePerSecond) == 0x000604, "Member 'UHWGainLossProgressBar::GainPercentFadePerSecond' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, GainFadeStartDelay) == 0x000608, "Member 'UHWGainLossProgressBar::GainFadeStartDelay' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, GainAnimationPercentThreshold) == 0x00060C, "Member 'UHWGainLossProgressBar::GainAnimationPercentThreshold' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, GainStartPercent) == 0x000610, "Member 'UHWGainLossProgressBar::GainStartPercent' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, GainTargetPercent) == 0x000614, "Member 'UHWGainLossProgressBar::GainTargetPercent' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, LossPercentFadePerSecond) == 0x000628, "Member 'UHWGainLossProgressBar::LossPercentFadePerSecond' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, LossFadeStartDelay) == 0x00062C, "Member 'UHWGainLossProgressBar::LossFadeStartDelay' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, LossAnimationPercentThreshold) == 0x000630, "Member 'UHWGainLossProgressBar::LossAnimationPercentThreshold' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, LossStartPercent) == 0x000634, "Member 'UHWGainLossProgressBar::LossStartPercent' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, LossTargetPercent) == 0x000638, "Member 'UHWGainLossProgressBar::LossTargetPercent' has a wrong offset!");
static_assert(offsetof(UHWGainLossProgressBar, PercentConfigs) == 0x000648, "Member 'UHWGainLossProgressBar::PercentConfigs' has a wrong offset!");

// Class HemingwayUI.HWRadialMenuWidget
// 0x00B8 (0x06B0 - 0x05F8)
class UHWRadialMenuWidget final : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x30];                                     // 0x05F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWRadialMenuEntryWidget*               CurrentHoveredEntry;                               // 0x0628(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OuterRadius;                                       // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InnerRadius;                                       // 0x0634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DeadZoneRadius;                                    // 0x0638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoHoverFirstEntry;                              // 0x063C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayTitle;                                     // 0x063D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCursorEnabled;                                  // 0x063E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCenterMouseOnWheel;                               // 0x063F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLockCursorToEntry;                                // 0x0640(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EOrientation                                  MiddleOrientation;                                 // 0x0641(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUnhoverWidgetInDeadzone;                          // 0x0642(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHoverOutsideRadius;                               // 0x0643(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SegmentGap;                                        // 0x0644(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EntryOffset;                                       // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              BackgroundTexture;                                 // 0x0650(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWRadialMenuEntryWidget>   EntryClass;                                        // 0x0678(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCanvasPanel*                         CanvasEntryContainer;                              // 0x0680(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsRadialActive;                                   // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_691[0x3];                                      // 0x0691(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartAngleOffset;                                  // 0x0694(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_698[0x8];                                      // 0x0698(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWRadialMenuEntryWidget*>       EntryWidgets;                                      // 0x06A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void DisplayPage(const struct FHWRadialMenuPage& MenuPage);
	bool GetIsRadialActive();
	void HandleRadialEntryHovered(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);
	void HandleRadialEntrySelected(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);
	void HandleRadialEntryUnhovered(class UHWRadialMenuEntryWidget* EntryWidget, const struct FHWRadialMenuPageEntry& EntryData);
	void SetRadialActive(bool bActivateRadial);
	void SetRadialActiveDelay(float Delay);
	void SetSectionText(const class FText& InSectionText);
	void SetTitleText(const class FText& InTitleText);
	void UpdateCachedGamepadPosition(const struct FVector2D& GamepadPosition);
	void UpdateCursorRotation(float RotationDeg);
	void UpdateIsInDeadzone(bool bIsInDeadzone);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRadialMenuWidget">();
	}
	static class UHWRadialMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRadialMenuWidget>();
	}
};
static_assert(alignof(UHWRadialMenuWidget) == 0x000008, "Wrong alignment on UHWRadialMenuWidget");
static_assert(sizeof(UHWRadialMenuWidget) == 0x0006B0, "Wrong size on UHWRadialMenuWidget");
static_assert(offsetof(UHWRadialMenuWidget, CurrentHoveredEntry) == 0x000628, "Member 'UHWRadialMenuWidget::CurrentHoveredEntry' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, OuterRadius) == 0x000630, "Member 'UHWRadialMenuWidget::OuterRadius' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, InnerRadius) == 0x000634, "Member 'UHWRadialMenuWidget::InnerRadius' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, DeadZoneRadius) == 0x000638, "Member 'UHWRadialMenuWidget::DeadZoneRadius' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bAutoHoverFirstEntry) == 0x00063C, "Member 'UHWRadialMenuWidget::bAutoHoverFirstEntry' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bDisplayTitle) == 0x00063D, "Member 'UHWRadialMenuWidget::bDisplayTitle' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bIsCursorEnabled) == 0x00063E, "Member 'UHWRadialMenuWidget::bIsCursorEnabled' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bCenterMouseOnWheel) == 0x00063F, "Member 'UHWRadialMenuWidget::bCenterMouseOnWheel' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bLockCursorToEntry) == 0x000640, "Member 'UHWRadialMenuWidget::bLockCursorToEntry' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, MiddleOrientation) == 0x000641, "Member 'UHWRadialMenuWidget::MiddleOrientation' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bUnhoverWidgetInDeadzone) == 0x000642, "Member 'UHWRadialMenuWidget::bUnhoverWidgetInDeadzone' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bHoverOutsideRadius) == 0x000643, "Member 'UHWRadialMenuWidget::bHoverOutsideRadius' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, SegmentGap) == 0x000644, "Member 'UHWRadialMenuWidget::SegmentGap' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, EntryOffset) == 0x000648, "Member 'UHWRadialMenuWidget::EntryOffset' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, BackgroundTexture) == 0x000650, "Member 'UHWRadialMenuWidget::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, EntryClass) == 0x000678, "Member 'UHWRadialMenuWidget::EntryClass' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, CanvasEntryContainer) == 0x000680, "Member 'UHWRadialMenuWidget::CanvasEntryContainer' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, bIsRadialActive) == 0x000690, "Member 'UHWRadialMenuWidget::bIsRadialActive' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, StartAngleOffset) == 0x000694, "Member 'UHWRadialMenuWidget::StartAngleOffset' has a wrong offset!");
static_assert(offsetof(UHWRadialMenuWidget, EntryWidgets) == 0x0006A0, "Member 'UHWRadialMenuWidget::EntryWidgets' has a wrong offset!");

// Class HemingwayUI.HWProgressBar
// 0x0010 (0x0480 - 0x0470)
class UHWProgressBar : public UProgressBar
{
public:
	struct FHWUIStyleWidgetConfig                 ColorStyle;                                        // 0x0468(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	EHWProgressBarColorStyleLocation              ColorStyleLocation;                                // 0x0474(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_475[0xB];                                      // 0x0475(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMaterialInstanceDynamic* GetFillDynamicMaterial();
	void SetColorStyleTag(const struct FGameplayTag& NewStyleTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWProgressBar">();
	}
	static class UHWProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWProgressBar>();
	}
};
static_assert(alignof(UHWProgressBar) == 0x000010, "Wrong alignment on UHWProgressBar");
static_assert(sizeof(UHWProgressBar) == 0x000480, "Wrong size on UHWProgressBar");
static_assert(offsetof(UHWProgressBar, ColorStyle) == 0x000468, "Member 'UHWProgressBar::ColorStyle' has a wrong offset!");
static_assert(offsetof(UHWProgressBar, ColorStyleLocation) == 0x000474, "Member 'UHWProgressBar::ColorStyleLocation' has a wrong offset!");

// Class HemingwayUI.HWSegmentedProgressBar
// 0x0030 (0x04B0 - 0x0480)
class UHWSegmentedProgressBar final : public UHWProgressBar
{
public:
	TArray<float>                                 LevelBreakpoints;                                  // 0x0480(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 LevelBreakpointPaddings;                           // 0x0490(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x10];                                     // 0x04A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<float> GetLevelBreakpoints();
	void SetLevel(int32 InLevel);
	void SetLevelBreakpoint(const float InPercent);
	void SetLevelBreakpointPadding(const int32 InLevel, const float InPercent);
	void SetLevelBreakpointPaddings(const TArray<float>& Values);
	void SetLevelBreakpoints(const TArray<float>& Values);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSegmentedProgressBar">();
	}
	static class UHWSegmentedProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSegmentedProgressBar>();
	}
};
static_assert(alignof(UHWSegmentedProgressBar) == 0x000010, "Wrong alignment on UHWSegmentedProgressBar");
static_assert(sizeof(UHWSegmentedProgressBar) == 0x0004B0, "Wrong size on UHWSegmentedProgressBar");
static_assert(offsetof(UHWSegmentedProgressBar, LevelBreakpoints) == 0x000480, "Member 'UHWSegmentedProgressBar::LevelBreakpoints' has a wrong offset!");
static_assert(offsetof(UHWSegmentedProgressBar, LevelBreakpointPaddings) == 0x000490, "Member 'UHWSegmentedProgressBar::LevelBreakpointPaddings' has a wrong offset!");

// Class HemingwayUI.HWSlidingPanelWidget
// 0x0098 (0x0690 - 0x05F8)
class UHWSlidingPanelWidget : public UHWWidget
{
public:
	class UHWOverlay*                             ContainerOverlay;                                  // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWImage*                               BackgroundImage;                                   // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidget*                              ContentWidget;                                     // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  ContantClass;                                      // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ToggleAction;                                      // 0x0618(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   OpenPanelPromptTextOverride;                       // 0x0658(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	class FText                                   ClosePanelPromptTextOverride;                      // 0x0670(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x8];                                      // 0x0688(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClosePanel();
	void OpenPanel();

	bool IsOpen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSlidingPanelWidget">();
	}
	static class UHWSlidingPanelWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSlidingPanelWidget>();
	}
};
static_assert(alignof(UHWSlidingPanelWidget) == 0x000008, "Wrong alignment on UHWSlidingPanelWidget");
static_assert(sizeof(UHWSlidingPanelWidget) == 0x000690, "Wrong size on UHWSlidingPanelWidget");
static_assert(offsetof(UHWSlidingPanelWidget, ContainerOverlay) == 0x0005F8, "Member 'UHWSlidingPanelWidget::ContainerOverlay' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, BackgroundImage) == 0x000600, "Member 'UHWSlidingPanelWidget::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, ContentWidget) == 0x000608, "Member 'UHWSlidingPanelWidget::ContentWidget' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, ContantClass) == 0x000610, "Member 'UHWSlidingPanelWidget::ContantClass' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, ToggleAction) == 0x000618, "Member 'UHWSlidingPanelWidget::ToggleAction' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, OpenPanelPromptTextOverride) == 0x000658, "Member 'UHWSlidingPanelWidget::OpenPanelPromptTextOverride' has a wrong offset!");
static_assert(offsetof(UHWSlidingPanelWidget, ClosePanelPromptTextOverride) == 0x000670, "Member 'UHWSlidingPanelWidget::ClosePanelPromptTextOverride' has a wrong offset!");

// Class HemingwayUI.HWTabBarEntryWidget
// 0x0080 (0x0678 - 0x05F8)
class UHWTabBarEntryWidget : public UHWWidget
{
public:
	struct FHWTabEntryData                        TabDisplayData;                                    // 0x05F8(0x0068)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	int32                                         TabIndex;                                          // 0x0660(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWTabBarWidget>         OwnerTabBar;                                       // 0x0664(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelected;                                       // 0x066C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_66D[0x3];                                      // 0x066D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCallToActionDisplayWidget*           CTADisplay;                                        // 0x0670(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayIsSelected();
	void DisplayTab();
	void SelectedTab();

	class UHWCallToActionDisplayWidget* GetCTADisplayWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTabBarEntryWidget">();
	}
	static class UHWTabBarEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTabBarEntryWidget>();
	}
};
static_assert(alignof(UHWTabBarEntryWidget) == 0x000008, "Wrong alignment on UHWTabBarEntryWidget");
static_assert(sizeof(UHWTabBarEntryWidget) == 0x000678, "Wrong size on UHWTabBarEntryWidget");
static_assert(offsetof(UHWTabBarEntryWidget, TabDisplayData) == 0x0005F8, "Member 'UHWTabBarEntryWidget::TabDisplayData' has a wrong offset!");
static_assert(offsetof(UHWTabBarEntryWidget, TabIndex) == 0x000660, "Member 'UHWTabBarEntryWidget::TabIndex' has a wrong offset!");
static_assert(offsetof(UHWTabBarEntryWidget, OwnerTabBar) == 0x000664, "Member 'UHWTabBarEntryWidget::OwnerTabBar' has a wrong offset!");
static_assert(offsetof(UHWTabBarEntryWidget, bIsSelected) == 0x00066C, "Member 'UHWTabBarEntryWidget::bIsSelected' has a wrong offset!");
static_assert(offsetof(UHWTabBarEntryWidget, CTADisplay) == 0x000670, "Member 'UHWTabBarEntryWidget::CTADisplay' has a wrong offset!");

// Class HemingwayUI.HWDragArea
// 0x0030 (0x0628 - 0x05F8)
class UHWDragArea : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWDragArea* DragArea, bool bNewIsDragging)> OnDragStateChanged; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EHWDragAreaCanvasSlotSearch                   CanvasSlotSearch;                                  // 0x0608(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoRecalculateAnchors;                           // 0x0609(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60A[0x2];                                      // 0x060A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCanvasPanelSlot>        CanvasSlot;                                        // 0x060C(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_614[0x14];                                     // 0x0614(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAssociatedWidgetLayout(const struct FAnchorData& NewLayout);
	void SetIsDragging(bool bNewIsDragging);

	class UCanvasPanelSlot* GetAssociatedCanvasSlot() const;
	struct FAnchorData GetAssociatedWidgetLayout() const;
	bool GetIsDragging() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDragArea">();
	}
	static class UHWDragArea* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDragArea>();
	}
};
static_assert(alignof(UHWDragArea) == 0x000008, "Wrong alignment on UHWDragArea");
static_assert(sizeof(UHWDragArea) == 0x000628, "Wrong size on UHWDragArea");
static_assert(offsetof(UHWDragArea, OnDragStateChanged) == 0x0005F8, "Member 'UHWDragArea::OnDragStateChanged' has a wrong offset!");
static_assert(offsetof(UHWDragArea, CanvasSlotSearch) == 0x000608, "Member 'UHWDragArea::CanvasSlotSearch' has a wrong offset!");
static_assert(offsetof(UHWDragArea, bAutoRecalculateAnchors) == 0x000609, "Member 'UHWDragArea::bAutoRecalculateAnchors' has a wrong offset!");
static_assert(offsetof(UHWDragArea, CanvasSlot) == 0x00060C, "Member 'UHWDragArea::CanvasSlot' has a wrong offset!");

// Class HemingwayUI.HWTabBarWidget
// 0x0088 (0x0680 - 0x05F8)
class UHWTabBarWidget : public UHWWidget
{
public:
	class UHWWidgetSwitcher*                      ViewSwitcher;                                      // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGridPanel*                           TabContainer;                                      // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWOrientation                                TabOrientation;                                    // 0x0608(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWWidget>                  TabWidgetClass;                                    // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                TabWidgetMargins;                                  // 0x0618(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWTabEntryData>                NavButtonData;                                     // 0x0628(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         DefaultTabIndex;                                   // 0x0638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayActionsInContextBar;                       // 0x063C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayActionCallouts;                            // 0x063D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeftAlignCallouts;                                // 0x063E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63F[0x1];                                      // 0x063F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UHWTabBarWidget* TabBarWidget, int32 TabIndex, EHWTabChangeCause Cause)> OnSelectedTabChanged; // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UHWTabBarEntryWidget*>           TabWidgets;                                        // 0x0650(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           NextTabInputAction;                                // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           PreviousTabInputAction;                            // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AllowLoopingTabsWithInput;                         // 0x0670(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0xF];                                      // 0x0671(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearCTAs(bool bRequireItemsOnly);
	void CreateTabs();
	TArray<struct FHWTabEntryData> GetTabData();
	void HandleBooleanAppSettingUpdated(const struct FGameplayTag& AppSettingTag, bool bValue);
	bool IsTabActive(const int32 TabIndex);
	void ListenToCTAsByItem(const class UHWInventoryItem* InventoryItem);
	void ListenToCTAsByItemPtr(const TSoftObjectPtr<class UHWInventoryItem> InventoryItemPtr);
	void RegisterInputBinds();
	void SetActiveTab(int32 TabIndex, EHWTabChangeCause Cause);
	void SetActiveTabByWidget(class UHWWidget* Widget, EHWTabChangeCause Cause);
	void SetTabDisabled(const int32 TabIndex, bool bIsDisabled);
	void SetTabHidden(const int32 TabIndex, bool bHidden);
	void SetViewSwitcher(class UHWWidgetSwitcher* InViewSwitcher);
	void UnregisterInputBinds();
	void UpdateInputCallouts(bool bShouldShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTabBarWidget">();
	}
	static class UHWTabBarWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTabBarWidget>();
	}
};
static_assert(alignof(UHWTabBarWidget) == 0x000008, "Wrong alignment on UHWTabBarWidget");
static_assert(sizeof(UHWTabBarWidget) == 0x000680, "Wrong size on UHWTabBarWidget");
static_assert(offsetof(UHWTabBarWidget, ViewSwitcher) == 0x0005F8, "Member 'UHWTabBarWidget::ViewSwitcher' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, TabContainer) == 0x000600, "Member 'UHWTabBarWidget::TabContainer' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, TabOrientation) == 0x000608, "Member 'UHWTabBarWidget::TabOrientation' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, TabWidgetClass) == 0x000610, "Member 'UHWTabBarWidget::TabWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, TabWidgetMargins) == 0x000618, "Member 'UHWTabBarWidget::TabWidgetMargins' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, NavButtonData) == 0x000628, "Member 'UHWTabBarWidget::NavButtonData' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, DefaultTabIndex) == 0x000638, "Member 'UHWTabBarWidget::DefaultTabIndex' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, bDisplayActionsInContextBar) == 0x00063C, "Member 'UHWTabBarWidget::bDisplayActionsInContextBar' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, bDisplayActionCallouts) == 0x00063D, "Member 'UHWTabBarWidget::bDisplayActionCallouts' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, bLeftAlignCallouts) == 0x00063E, "Member 'UHWTabBarWidget::bLeftAlignCallouts' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, OnSelectedTabChanged) == 0x000640, "Member 'UHWTabBarWidget::OnSelectedTabChanged' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, TabWidgets) == 0x000650, "Member 'UHWTabBarWidget::TabWidgets' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, NextTabInputAction) == 0x000660, "Member 'UHWTabBarWidget::NextTabInputAction' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, PreviousTabInputAction) == 0x000668, "Member 'UHWTabBarWidget::PreviousTabInputAction' has a wrong offset!");
static_assert(offsetof(UHWTabBarWidget, AllowLoopingTabsWithInput) == 0x000670, "Member 'UHWTabBarWidget::AllowLoopingTabsWithInput' has a wrong offset!");

// Class HemingwayUI.HWTabEntryWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWTabEntryWidget : public UHWWidget
{
public:
	struct FGameplayTag                           TabViewTag;                                        // 0x05F8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   TabDisplayText;                                    // 0x0600(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsSelected;                                       // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UHWTabViewerWidget>      OwnerTabViewer;                                    // 0x061C(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayIsSelected();
	void DisplayTab();
	void SelectedTab();

	const struct FGameplayTag GetTabViewTag() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTabEntryWidget">();
	}
	static class UHWTabEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTabEntryWidget>();
	}
};
static_assert(alignof(UHWTabEntryWidget) == 0x000008, "Wrong alignment on UHWTabEntryWidget");
static_assert(sizeof(UHWTabEntryWidget) == 0x000628, "Wrong size on UHWTabEntryWidget");
static_assert(offsetof(UHWTabEntryWidget, TabViewTag) == 0x0005F8, "Member 'UHWTabEntryWidget::TabViewTag' has a wrong offset!");
static_assert(offsetof(UHWTabEntryWidget, TabDisplayText) == 0x000600, "Member 'UHWTabEntryWidget::TabDisplayText' has a wrong offset!");
static_assert(offsetof(UHWTabEntryWidget, bIsSelected) == 0x000618, "Member 'UHWTabEntryWidget::bIsSelected' has a wrong offset!");
static_assert(offsetof(UHWTabEntryWidget, OwnerTabViewer) == 0x00061C, "Member 'UHWTabEntryWidget::OwnerTabViewer' has a wrong offset!");

// Class HemingwayUI.HWOrderAcquisitionWidget
// 0x0020 (0x0688 - 0x0668)
class UHWOrderAcquisitionWidget : public UHWStoreItemDisplayWidget
{
public:
	class UDataTable*                             HeaderOverridesTable;                              // 0x0668(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWListView*                            EntryListView;                                     // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URHOrder*                               CurrentDisplayedOrder;                             // 0x0678(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOrderItemData*                         CurrentDisplayedOrderItem;                         // 0x0680(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleItemSelectionChanged(const class UObject* Data);
	void OnDisplayOrder(const class URHOrder* Order);
	void OnDisplaySelectedItem(const class UOrderItemData* SelectedOrderItem);

	class FText GetHeaderText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWOrderAcquisitionWidget">();
	}
	static class UHWOrderAcquisitionWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWOrderAcquisitionWidget>();
	}
};
static_assert(alignof(UHWOrderAcquisitionWidget) == 0x000008, "Wrong alignment on UHWOrderAcquisitionWidget");
static_assert(sizeof(UHWOrderAcquisitionWidget) == 0x000688, "Wrong size on UHWOrderAcquisitionWidget");
static_assert(offsetof(UHWOrderAcquisitionWidget, HeaderOverridesTable) == 0x000668, "Member 'UHWOrderAcquisitionWidget::HeaderOverridesTable' has a wrong offset!");
static_assert(offsetof(UHWOrderAcquisitionWidget, EntryListView) == 0x000670, "Member 'UHWOrderAcquisitionWidget::EntryListView' has a wrong offset!");
static_assert(offsetof(UHWOrderAcquisitionWidget, CurrentDisplayedOrder) == 0x000678, "Member 'UHWOrderAcquisitionWidget::CurrentDisplayedOrder' has a wrong offset!");
static_assert(offsetof(UHWOrderAcquisitionWidget, CurrentDisplayedOrderItem) == 0x000680, "Member 'UHWOrderAcquisitionWidget::CurrentDisplayedOrderItem' has a wrong offset!");

// Class HemingwayUI.HWDataDisplay_CharacterStats
// 0x0078 (0x00A0 - 0x0028)
class UHWDataDisplay_CharacterStats final : public UObject
{
public:
	TSoftObjectPtr<class UDataTable>              StatsDisplayTablePtr;                              // 0x0028(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWDataDisplay_CharacterStat> StatDisplayMap;                   // 0x0050(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void OnDisplayTableLoaded();

	bool GetCharacterStatDisplayData(const struct FGameplayTag& StatTag, struct FHWDataDisplay_CharacterStat* OutDisplayData) const;
	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDataDisplay_CharacterStats">();
	}
	static class UHWDataDisplay_CharacterStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDataDisplay_CharacterStats>();
	}
};
static_assert(alignof(UHWDataDisplay_CharacterStats) == 0x000008, "Wrong alignment on UHWDataDisplay_CharacterStats");
static_assert(sizeof(UHWDataDisplay_CharacterStats) == 0x0000A0, "Wrong size on UHWDataDisplay_CharacterStats");
static_assert(offsetof(UHWDataDisplay_CharacterStats, StatsDisplayTablePtr) == 0x000028, "Member 'UHWDataDisplay_CharacterStats::StatsDisplayTablePtr' has a wrong offset!");
static_assert(offsetof(UHWDataDisplay_CharacterStats, StatDisplayMap) == 0x000050, "Member 'UHWDataDisplay_CharacterStats::StatDisplayMap' has a wrong offset!");

// Class HemingwayUI.HWDataDisplay_Keywords
// 0x0088 (0x00B0 - 0x0028)
class UHWDataDisplay_Keywords final : public UObject
{
public:
	TMulticastInlineDelegate<void()>              OnKeywordDisplayDataReady;                         // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              KeywordDisplayTablePtr;                            // 0x0038(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWDataDisplay_Keyword> KeywordDisplayMap;                      // 0x0060(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void OnDisplayTableLoaded();

	bool GetKeywordDisplayData(const struct FGameplayTag& KeywordTag, struct FHWDataDisplay_Keyword* OutDisplayData) const;
	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDataDisplay_Keywords">();
	}
	static class UHWDataDisplay_Keywords* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDataDisplay_Keywords>();
	}
};
static_assert(alignof(UHWDataDisplay_Keywords) == 0x000008, "Wrong alignment on UHWDataDisplay_Keywords");
static_assert(sizeof(UHWDataDisplay_Keywords) == 0x0000B0, "Wrong size on UHWDataDisplay_Keywords");
static_assert(offsetof(UHWDataDisplay_Keywords, OnKeywordDisplayDataReady) == 0x000028, "Member 'UHWDataDisplay_Keywords::OnKeywordDisplayDataReady' has a wrong offset!");
static_assert(offsetof(UHWDataDisplay_Keywords, KeywordDisplayTablePtr) == 0x000038, "Member 'UHWDataDisplay_Keywords::KeywordDisplayTablePtr' has a wrong offset!");
static_assert(offsetof(UHWDataDisplay_Keywords, KeywordDisplayMap) == 0x000060, "Member 'UHWDataDisplay_Keywords::KeywordDisplayMap' has a wrong offset!");

// Class HemingwayUI.HWPurchaseConfirmRouteData
// 0x0048 (0x0070 - 0x0028)
class UHWPurchaseConfirmRouteData : public UObject
{
public:
	TSoftObjectPtr<class UHWCollectionItem>       ItemToPurchase;                                    // 0x0028(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_LootId                             PurchaseLootOverride;                              // 0x0050(0x0014)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloseOnPurchasePending;                           // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayBeforeCloseOnPending;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPurchaseConfirmRouteData">();
	}
	static class UHWPurchaseConfirmRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPurchaseConfirmRouteData>();
	}
};
static_assert(alignof(UHWPurchaseConfirmRouteData) == 0x000008, "Wrong alignment on UHWPurchaseConfirmRouteData");
static_assert(sizeof(UHWPurchaseConfirmRouteData) == 0x000070, "Wrong size on UHWPurchaseConfirmRouteData");
static_assert(offsetof(UHWPurchaseConfirmRouteData, ItemToPurchase) == 0x000028, "Member 'UHWPurchaseConfirmRouteData::ItemToPurchase' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmRouteData, PurchaseLootOverride) == 0x000050, "Member 'UHWPurchaseConfirmRouteData::PurchaseLootOverride' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmRouteData, bCloseOnPurchasePending) == 0x000064, "Member 'UHWPurchaseConfirmRouteData::bCloseOnPurchasePending' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmRouteData, DelayBeforeCloseOnPending) == 0x000068, "Member 'UHWPurchaseConfirmRouteData::DelayBeforeCloseOnPending' has a wrong offset!");

// Class HemingwayUI.HWAscensionPassPurchaseConfirmRouteData
// 0x0030 (0x00A0 - 0x0070)
class UHWAscensionPassPurchaseConfirmRouteData final : public UHWPurchaseConfirmRouteData
{
public:
	struct FRH_LootId                             PassLootId;                                        // 0x0070(0x0014)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCharacterItem*                       GodItemReference;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHWAscensionPurchaseRewardItem> RewardItems;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAscensionPassPurchaseConfirmRouteData">();
	}
	static class UHWAscensionPassPurchaseConfirmRouteData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAscensionPassPurchaseConfirmRouteData>();
	}
};
static_assert(alignof(UHWAscensionPassPurchaseConfirmRouteData) == 0x000008, "Wrong alignment on UHWAscensionPassPurchaseConfirmRouteData");
static_assert(sizeof(UHWAscensionPassPurchaseConfirmRouteData) == 0x0000A0, "Wrong size on UHWAscensionPassPurchaseConfirmRouteData");
static_assert(offsetof(UHWAscensionPassPurchaseConfirmRouteData, PassLootId) == 0x000070, "Member 'UHWAscensionPassPurchaseConfirmRouteData::PassLootId' has a wrong offset!");
static_assert(offsetof(UHWAscensionPassPurchaseConfirmRouteData, GodItemReference) == 0x000088, "Member 'UHWAscensionPassPurchaseConfirmRouteData::GodItemReference' has a wrong offset!");
static_assert(offsetof(UHWAscensionPassPurchaseConfirmRouteData, RewardItems) == 0x000090, "Member 'UHWAscensionPassPurchaseConfirmRouteData::RewardItems' has a wrong offset!");

// Class HemingwayUI.HWModelPlayer
// 0x00C8 (0x06C0 - 0x05F8)
class UHWModelPlayer : public UHWWidget
{
public:
	struct FGameplayTag                           ModelPlayerScene;                                  // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerVoiceEventOnLoad;                          // 0x0600(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_601[0x17];                                     // 0x0601(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasNiagaraSystem;                                 // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasSkeletalMesh;                                  // 0x0619(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61A[0x16];                                     // 0x061A(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RotatePreviewLeftBindingContainer;                 // 0x0630(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_670[0x8];                                      // 0x0670(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIActionBindingContainer            RotatePreviewRightBindingContainer;                // 0x0678(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B8[0x4];                                      // 0x06B8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowModelRotation;                               // 0x06BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6BD[0x3];                                      // 0x06BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelAssetLoading();
	TArray<class FName> GetCosmeticMaterialsName(const EHWCollectionItemType CollectionType);
	TArray<class FName> GetCosmeticNiagaraSystemName(const EHWCollectionItemType CollectionType);
	TArray<class FName> GetCosmeticSkeletalMeshName(const EHWCollectionItemType CollectionType);
	void HandleMouseMoveRotation(float Direction);
	void HandleRotatePreviewAction();
	void HandleRotatePreviewActionHeld(float HoldPercent, int32 Direction);
	void LoadItemSkinAssets(class UHWCollectionItem* CollectionItem);
	void LoadSelectedCharacterSkins(const class UHWCharacterItem* GodItem);
	void OnSelectedCharacterSkinLoaded();
	void OnSelectedItemSkinLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWModelPlayer">();
	}
	static class UHWModelPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWModelPlayer>();
	}
};
static_assert(alignof(UHWModelPlayer) == 0x000008, "Wrong alignment on UHWModelPlayer");
static_assert(sizeof(UHWModelPlayer) == 0x0006C0, "Wrong size on UHWModelPlayer");
static_assert(offsetof(UHWModelPlayer, ModelPlayerScene) == 0x0005F8, "Member 'UHWModelPlayer::ModelPlayerScene' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, bTriggerVoiceEventOnLoad) == 0x000600, "Member 'UHWModelPlayer::bTriggerVoiceEventOnLoad' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, bHasNiagaraSystem) == 0x000618, "Member 'UHWModelPlayer::bHasNiagaraSystem' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, bHasSkeletalMesh) == 0x000619, "Member 'UHWModelPlayer::bHasSkeletalMesh' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, RotatePreviewLeftBindingContainer) == 0x000630, "Member 'UHWModelPlayer::RotatePreviewLeftBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, RotatePreviewRightBindingContainer) == 0x000678, "Member 'UHWModelPlayer::RotatePreviewRightBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWModelPlayer, bAllowModelRotation) == 0x0006BC, "Member 'UHWModelPlayer::bAllowModelRotation' has a wrong offset!");

// Class HemingwayUI.HWControllerData
// 0x0118 (0x0140 - 0x0028)
class UHWControllerData : public UObject
{
public:
	EHWInputHardwareType                          InputHardwareType;                                 // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHWInputKeyBrushConfiguration>  InputBrushDataMap;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHWInputKeyBrushConfiguration>  InputBrushBackgroundDataMap;                       // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          UseDefaultBrushBackground;                         // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            DefaultBrushBackground;                            // 0x0060(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FHWInputKeySetBrushConfiguration> InputBrushKeySets;                               // 0x0130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWControllerData">();
	}
	static class UHWControllerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWControllerData>();
	}
};
static_assert(alignof(UHWControllerData) == 0x000010, "Wrong alignment on UHWControllerData");
static_assert(sizeof(UHWControllerData) == 0x000140, "Wrong size on UHWControllerData");
static_assert(offsetof(UHWControllerData, InputHardwareType) == 0x000028, "Member 'UHWControllerData::InputHardwareType' has a wrong offset!");
static_assert(offsetof(UHWControllerData, InputBrushDataMap) == 0x000030, "Member 'UHWControllerData::InputBrushDataMap' has a wrong offset!");
static_assert(offsetof(UHWControllerData, InputBrushBackgroundDataMap) == 0x000040, "Member 'UHWControllerData::InputBrushBackgroundDataMap' has a wrong offset!");
static_assert(offsetof(UHWControllerData, UseDefaultBrushBackground) == 0x000050, "Member 'UHWControllerData::UseDefaultBrushBackground' has a wrong offset!");
static_assert(offsetof(UHWControllerData, DefaultBrushBackground) == 0x000060, "Member 'UHWControllerData::DefaultBrushBackground' has a wrong offset!");
static_assert(offsetof(UHWControllerData, InputBrushKeySets) == 0x000130, "Member 'UHWControllerData::InputBrushKeySets' has a wrong offset!");

// Class HemingwayUI.HWStoreItemPipContainerWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWStoreItemPipContainerWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(class UHWStoreItemDisplayWidget* PipWidget)> OnStorePipRequestSelect; // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UHWStoreItemDisplayWidget>  PipWidgetClass;                                    // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWStoreItemDisplayWidget*>      PipWidgets;                                        // 0x0610(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class URHStoreItem>>    StoreItems;                                        // 0x0620(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bDisplayNullEntries;                               // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_631[0x7];                                      // 0x0631(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePipRequestSelect(class UHWStoreItemDisplayWidget* PipWidget);
	void PipWidgetAdded(class UHWStoreItemDisplayWidget* PipWidget);
	void PipWidgetRemoved(class UHWStoreItemDisplayWidget* PipWidget);
	void SelectFromVariantSkinItem(const class UHWSkinItem* InVariantSkinItem);
	void SelectStoreItem(class URHStoreItem* InStoreItem);
	void SetFromSkinVariants(const class UHWSkinItem* InBaseSkinItem, bool bPlayableOnly);
	void SetStoreItems(const TArray<class URHStoreItem*>& InStoreItems);
	void UpdateItems();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWStoreItemPipContainerWidget">();
	}
	static class UHWStoreItemPipContainerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWStoreItemPipContainerWidget>();
	}
};
static_assert(alignof(UHWStoreItemPipContainerWidget) == 0x000008, "Wrong alignment on UHWStoreItemPipContainerWidget");
static_assert(sizeof(UHWStoreItemPipContainerWidget) == 0x000638, "Wrong size on UHWStoreItemPipContainerWidget");
static_assert(offsetof(UHWStoreItemPipContainerWidget, OnStorePipRequestSelect) == 0x0005F8, "Member 'UHWStoreItemPipContainerWidget::OnStorePipRequestSelect' has a wrong offset!");
static_assert(offsetof(UHWStoreItemPipContainerWidget, PipWidgetClass) == 0x000608, "Member 'UHWStoreItemPipContainerWidget::PipWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWStoreItemPipContainerWidget, PipWidgets) == 0x000610, "Member 'UHWStoreItemPipContainerWidget::PipWidgets' has a wrong offset!");
static_assert(offsetof(UHWStoreItemPipContainerWidget, StoreItems) == 0x000620, "Member 'UHWStoreItemPipContainerWidget::StoreItems' has a wrong offset!");
static_assert(offsetof(UHWStoreItemPipContainerWidget, bDisplayNullEntries) == 0x000630, "Member 'UHWStoreItemPipContainerWidget::bDisplayNullEntries' has a wrong offset!");

// Class HemingwayUI.HWInputPlatformSettings
// 0x0010 (0x0040 - 0x0030)
class UHWInputPlatformSettings final : public UDataAsset
{
public:
	TArray<TSubclassOf<class UHWControllerData>>  ControllerDataClasses;                             // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInputPlatformSettings">();
	}
	static class UHWInputPlatformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWInputPlatformSettings>();
	}
};
static_assert(alignof(UHWInputPlatformSettings) == 0x000008, "Wrong alignment on UHWInputPlatformSettings");
static_assert(sizeof(UHWInputPlatformSettings) == 0x000040, "Wrong size on UHWInputPlatformSettings");
static_assert(offsetof(UHWInputPlatformSettings, ControllerDataClasses) == 0x000030, "Member 'UHWInputPlatformSettings::ControllerDataClasses' has a wrong offset!");

// Class HemingwayUI.HWMultiPromptWidget
// 0x00B0 (0x06A8 - 0x05F8)
class UHWMultiPromptWidget : public UHWWidget
{
public:
	bool                                          bHandleInputTypeChange;                            // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   InputTags;                                         // 0x0600(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           InputAction;                                       // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWSinglePromptWidget>      PromptClass;                                       // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWWidget>                  JoinerClass;                                       // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDislayPromptText;                                 // 0x0628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverridePromptText;                               // 0x0629(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62A[0x6];                                      // 0x062A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OverrideText;                                      // 0x0630(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoHideOnNoKeys;                                 // 0x0648(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWWidget*>                      AllDynamicWidgets;                                 // 0x0650(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0x4];                                      // 0x0660(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTrackInputChangesFromTags;                        // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bHasKeysForInputTags)> OnInputTagsUpdated;                    // 0x0668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	ETriggerEvent                                 LastTriggerEvent;                                  // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_679[0x7];                                      // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint32>                                BoundAbilityInputHandles;                          // 0x0680(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bWantsToTrackInputActions;                         // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ETriggerEvent KeyTriggerEvent)> OnKeyTriggerEventChanged;          // 0x0698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddedJoiner(class UHWWidget* NewPrompt);
	void AddedPrompt(class UHWSinglePromptWidget* NewPrompt);
	void DisplayText(const class FText& TextToDisplay);
	void HandlePlayerInputRebuilt(EHWInputHardwareType CurrentHardwareType);
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void OnHoldActionProgressed(float HoldPercent);
	void OnInputTypeChanged(ERH_INPUT_STATE NewState);
	void SetInputByAction(const class UInputAction* InAction);
	void SetInputByKeys(const TArray<struct FKey>& Keys);
	void SetInputByTag(const struct FGameplayTag& NewTag);
	void SetInputByTags(const TArray<struct FGameplayTag>& NewTags);
	void TrackInputActions(const bool bTrack);
	void TriggerPromptAction();
	void UpdateOverrideText(const class FText& Prompt);

	ERH_INPUT_STATE GetInputType() const;
	class UHWEnhancedPlayerInput* GetPlayerInput() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWMultiPromptWidget">();
	}
	static class UHWMultiPromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWMultiPromptWidget>();
	}
};
static_assert(alignof(UHWMultiPromptWidget) == 0x000008, "Wrong alignment on UHWMultiPromptWidget");
static_assert(sizeof(UHWMultiPromptWidget) == 0x0006A8, "Wrong size on UHWMultiPromptWidget");
static_assert(offsetof(UHWMultiPromptWidget, bHandleInputTypeChange) == 0x0005F8, "Member 'UHWMultiPromptWidget::bHandleInputTypeChange' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, InputTags) == 0x000600, "Member 'UHWMultiPromptWidget::InputTags' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, InputAction) == 0x000610, "Member 'UHWMultiPromptWidget::InputAction' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, PromptClass) == 0x000618, "Member 'UHWMultiPromptWidget::PromptClass' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, JoinerClass) == 0x000620, "Member 'UHWMultiPromptWidget::JoinerClass' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, bDislayPromptText) == 0x000628, "Member 'UHWMultiPromptWidget::bDislayPromptText' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, bOverridePromptText) == 0x000629, "Member 'UHWMultiPromptWidget::bOverridePromptText' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, OverrideText) == 0x000630, "Member 'UHWMultiPromptWidget::OverrideText' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, bAutoHideOnNoKeys) == 0x000648, "Member 'UHWMultiPromptWidget::bAutoHideOnNoKeys' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, AllDynamicWidgets) == 0x000650, "Member 'UHWMultiPromptWidget::AllDynamicWidgets' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, bTrackInputChangesFromTags) == 0x000664, "Member 'UHWMultiPromptWidget::bTrackInputChangesFromTags' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, OnInputTagsUpdated) == 0x000668, "Member 'UHWMultiPromptWidget::OnInputTagsUpdated' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, LastTriggerEvent) == 0x000678, "Member 'UHWMultiPromptWidget::LastTriggerEvent' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, BoundAbilityInputHandles) == 0x000680, "Member 'UHWMultiPromptWidget::BoundAbilityInputHandles' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, bWantsToTrackInputActions) == 0x000690, "Member 'UHWMultiPromptWidget::bWantsToTrackInputActions' has a wrong offset!");
static_assert(offsetof(UHWMultiPromptWidget, OnKeyTriggerEventChanged) == 0x000698, "Member 'UHWMultiPromptWidget::OnKeyTriggerEventChanged' has a wrong offset!");

// Class HemingwayUI.HWSinglePromptWidget
// 0x0020 (0x0618 - 0x05F8)
class UHWSinglePromptWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x18];                                     // 0x05F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDisplayKeyPress;                                  // 0x0610(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayIconOnly(const struct FSlateBrush& Brush);
	void DisplayKeyPressed(bool bIsPressed);
	void DisplayKeyTextOnly(const class FText& Label);
	void DisplayKeyWithBackground(const struct FSlateBrush& Brush, const class FText& Label);
	void HandleKeyStateChanged(const struct FKey& Key, EInputEvent InputEvent);
	void HandleSwapActionStateChanged(const TArray<struct FKey>& SwapKeys, bool bIsSwapActionActive);
	void HoldActionProgressed(float HoldPercent);
	void SetIsHoldAction(bool bIsHold);
	void SetKeyInput(const struct FKey& NewKey);
	void SetKeyInputByKeySet(const TArray<struct FKey>& NewKeys);

	const struct FKey GetDisplayedKey() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSinglePromptWidget">();
	}
	static class UHWSinglePromptWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSinglePromptWidget>();
	}
};
static_assert(alignof(UHWSinglePromptWidget) == 0x000008, "Wrong alignment on UHWSinglePromptWidget");
static_assert(sizeof(UHWSinglePromptWidget) == 0x000618, "Wrong size on UHWSinglePromptWidget");
static_assert(offsetof(UHWSinglePromptWidget, bDisplayKeyPress) == 0x000610, "Member 'UHWSinglePromptWidget::bDisplayKeyPress' has a wrong offset!");

// Class HemingwayUI.HWUIActionRouter
// 0x00A0 (0x0210 - 0x0170)
class UHWUIActionRouter final : public UCommonUIActionRouterBase
{
public:
	uint8                                         Pad_170[0x28];                                     // 0x0170(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIContextCalloutDisplay>       UIContextCalloutDisplayList;                       // 0x0198(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A8[0x68];                                     // 0x01A8(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearActiveInputModeOverride();
	void OverrideActiveInputMode(ECommonInputMode DesiredInputMode);
	void SetAnalogCursorEnabled(bool bEnabled, bool bInTickCursor);
	void UpdateLockCursorToScreen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIActionRouter">();
	}
	static class UHWUIActionRouter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIActionRouter>();
	}
};
static_assert(alignof(UHWUIActionRouter) == 0x000008, "Wrong alignment on UHWUIActionRouter");
static_assert(sizeof(UHWUIActionRouter) == 0x000210, "Wrong size on UHWUIActionRouter");
static_assert(offsetof(UHWUIActionRouter, UIContextCalloutDisplayList) == 0x000198, "Member 'UHWUIActionRouter::UIContextCalloutDisplayList' has a wrong offset!");

// Class HemingwayUI.HWSystemWarningsViewRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWSystemWarningsViewRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWSystemWarningsViewRedirector">();
	}
	static class UHWSystemWarningsViewRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWSystemWarningsViewRedirector>();
	}
};
static_assert(alignof(UHWSystemWarningsViewRedirector) == 0x000008, "Wrong alignment on UHWSystemWarningsViewRedirector");
static_assert(sizeof(UHWSystemWarningsViewRedirector) == 0x000028, "Wrong size on UHWSystemWarningsViewRedirector");

// Class HemingwayUI.HWInterface_HUDUINavigatable
// 0x0000 (0x0000 - 0x0000)
class IHWInterface_HUDUINavigatable final
{
public:
	const TArray<struct FHWUIActionBindingContainer> GetActionBindingContainers();
	const class FText GetWidgetName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInterface_HUDUINavigatable">();
	}
	static class IHWInterface_HUDUINavigatable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHWInterface_HUDUINavigatable>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHWInterface_HUDUINavigatable) == 0x000001, "Wrong alignment on IHWInterface_HUDUINavigatable");
static_assert(sizeof(IHWInterface_HUDUINavigatable) == 0x000001, "Wrong size on IHWInterface_HUDUINavigatable");

// Class HemingwayUI.HWKeyBinderEntryWidget
// 0x0028 (0x0620 - 0x05F8)
class UHWKeyBinderEntryWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class UHWKeyBinderWidget>      KeyBinderWidget;                                   // 0x05F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UHWPlayerMappableKeySettings> KeySettings;                                  // 0x0600(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWInputKeySelector*                    KeyboardKeySelector;                               // 0x0610(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWInputKeySelector*                    GamepadKeySelector;                                // 0x0618(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayGamepadKeys(const TArray<struct FKey>& Keys);
	void DisplayKeyboardKeys(const TArray<struct FKey>& Keys);
	void DisplayKeySelectorEnabled(bool bIsKeyboard, bool bSelectorIsEnabled);
	void DisplayLabelText(const class FText& LabelText);
	void HandleGamepadKeyChanged(const struct FInputChord& SelectedKey);
	void HandleGamepadKeyCleared();
	void HandleIsSelectingKeyChanged();
	void HandleKeyboardKeyChanged(const struct FInputChord& SelectedKey);
	void HandleKeyboardKeyCleared();
	void HandleOnHover();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWKeyBinderEntryWidget">();
	}
	static class UHWKeyBinderEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWKeyBinderEntryWidget>();
	}
};
static_assert(alignof(UHWKeyBinderEntryWidget) == 0x000008, "Wrong alignment on UHWKeyBinderEntryWidget");
static_assert(sizeof(UHWKeyBinderEntryWidget) == 0x000620, "Wrong size on UHWKeyBinderEntryWidget");
static_assert(offsetof(UHWKeyBinderEntryWidget, KeyBinderWidget) == 0x0005F8, "Member 'UHWKeyBinderEntryWidget::KeyBinderWidget' has a wrong offset!");
static_assert(offsetof(UHWKeyBinderEntryWidget, KeySettings) == 0x000600, "Member 'UHWKeyBinderEntryWidget::KeySettings' has a wrong offset!");
static_assert(offsetof(UHWKeyBinderEntryWidget, KeyboardKeySelector) == 0x000610, "Member 'UHWKeyBinderEntryWidget::KeyboardKeySelector' has a wrong offset!");
static_assert(offsetof(UHWKeyBinderEntryWidget, GamepadKeySelector) == 0x000618, "Member 'UHWKeyBinderEntryWidget::GamepadKeySelector' has a wrong offset!");

// Class HemingwayUI.HWPersistentWidgetSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UHWPersistentWidgetSubsystem final : public UGameInstanceSubsystem
{
public:
	struct FGameplayTag                           WatermarkTag;                                      // 0x0030(0x0008)(Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UDataTable>              PersistentWidgetTableSoftPtr;                      // 0x0038(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x20];                                      // 0x0060(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWPersistentWidget*>            PersistentWidgets;                                 // 0x0080(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x40];                                      // 0x0090(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HidePersistentWidget(const struct FGameplayTag& WidgetTag);
	void ShowPersistentWidget(const struct FGameplayTag& WidgetTag, EHWViewportZOrder LayerZOrder, int32 ZOrderOffset);

	bool IsPersistentWidgetActive(const struct FGameplayTag& WidgetTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPersistentWidgetSubsystem">();
	}
	static class UHWPersistentWidgetSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPersistentWidgetSubsystem>();
	}
};
static_assert(alignof(UHWPersistentWidgetSubsystem) == 0x000008, "Wrong alignment on UHWPersistentWidgetSubsystem");
static_assert(sizeof(UHWPersistentWidgetSubsystem) == 0x0000D0, "Wrong size on UHWPersistentWidgetSubsystem");
static_assert(offsetof(UHWPersistentWidgetSubsystem, WatermarkTag) == 0x000030, "Member 'UHWPersistentWidgetSubsystem::WatermarkTag' has a wrong offset!");
static_assert(offsetof(UHWPersistentWidgetSubsystem, PersistentWidgetTableSoftPtr) == 0x000038, "Member 'UHWPersistentWidgetSubsystem::PersistentWidgetTableSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWPersistentWidgetSubsystem, PersistentWidgets) == 0x000080, "Member 'UHWPersistentWidgetSubsystem::PersistentWidgets' has a wrong offset!");

// Class HemingwayUI.HWUIStyle
// 0x0078 (0x00A8 - 0x0030)
class UHWUIStyle final : public UDataAsset
{
public:
	struct FHWUIStyle_Scale                       ScaleStyle;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStyle_Font                        FontStyle;                                         // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyle_Color                       ColorStyle;                                        // 0x0088(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	TArray<class FName> GetFontStyleTypenameOptions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyle">();
	}
	static class UHWUIStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyle>();
	}
};
static_assert(alignof(UHWUIStyle) == 0x000008, "Wrong alignment on UHWUIStyle");
static_assert(sizeof(UHWUIStyle) == 0x0000A8, "Wrong size on UHWUIStyle");
static_assert(offsetof(UHWUIStyle, ScaleStyle) == 0x000030, "Member 'UHWUIStyle::ScaleStyle' has a wrong offset!");
static_assert(offsetof(UHWUIStyle, FontStyle) == 0x000038, "Member 'UHWUIStyle::FontStyle' has a wrong offset!");
static_assert(offsetof(UHWUIStyle, ColorStyle) == 0x000088, "Member 'UHWUIStyle::ColorStyle' has a wrong offset!");

// Class HemingwayUI.HWInterface_UIStyleLocalModifier
// 0x0000 (0x0000 - 0x0000)
class IHWInterface_UIStyleLocalModifier final
{
public:
	struct FGameplayTag GetLocalModifierTagOverride();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWInterface_UIStyleLocalModifier">();
	}
	static class IHWInterface_UIStyleLocalModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHWInterface_UIStyleLocalModifier>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IHWInterface_UIStyleLocalModifier) == 0x000001, "Wrong alignment on IHWInterface_UIStyleLocalModifier");
static_assert(sizeof(IHWInterface_UIStyleLocalModifier) == 0x000001, "Wrong size on IHWInterface_UIStyleLocalModifier");

// Class HemingwayUI.HWUIStyleCustomModifierDisplayData
// 0x0018 (0x0040 - 0x0028)
class UHWUIStyleCustomModifierDisplayData : public UObject
{
public:
	class FText                                   DisplayName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleCustomModifierDisplayData">();
	}
	static class UHWUIStyleCustomModifierDisplayData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleCustomModifierDisplayData>();
	}
};
static_assert(alignof(UHWUIStyleCustomModifierDisplayData) == 0x000008, "Wrong alignment on UHWUIStyleCustomModifierDisplayData");
static_assert(sizeof(UHWUIStyleCustomModifierDisplayData) == 0x000040, "Wrong size on UHWUIStyleCustomModifierDisplayData");
static_assert(offsetof(UHWUIStyleCustomModifierDisplayData, DisplayName) == 0x000028, "Member 'UHWUIStyleCustomModifierDisplayData::DisplayName' has a wrong offset!");

// Class HemingwayUI.HWPurchaseConfirmWidgetManager
// 0x00E0 (0x06D8 - 0x05F8)
class UHWPurchaseConfirmWidgetManager : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      ItemToPurchase;                                    // 0x0600(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRH_LootId                             PurchaseLootOverride;                              // 0x0608(0x0014)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61C[0xC];                                      // 0x061C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHWCollectionItemType, TSubclassOf<class UHWPurchaseConfirmWidget>> CollectionPurchaseWidgetClasses; // 0x0628(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UHWPurchaseConfirmWidget*>       PurchaseConfirmWidgets;                            // 0x0678(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWPurchaseConfirmWidget*               ActivePurchaseConfirmWidget;                       // 0x0688(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            CurrencyPurchaseBinding;                           // 0x0690(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D0[0x8];                                      // 0x06D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPurchaseWidget(class UHWPurchaseConfirmWidget* PurchaseWidget);
	void UpdateCurrencyPurchaseInput();

	class UHWPurchaseConfirmWidget* GetActivePurchaseConfirmWidget() const;
	EHWCollectionItemType GetCurrentCollectionType() const;
	class UHWCollectionItem* GetItemToPurchase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPurchaseConfirmWidgetManager">();
	}
	static class UHWPurchaseConfirmWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPurchaseConfirmWidgetManager>();
	}
};
static_assert(alignof(UHWPurchaseConfirmWidgetManager) == 0x000008, "Wrong alignment on UHWPurchaseConfirmWidgetManager");
static_assert(sizeof(UHWPurchaseConfirmWidgetManager) == 0x0006D8, "Wrong size on UHWPurchaseConfirmWidgetManager");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, ItemToPurchase) == 0x000600, "Member 'UHWPurchaseConfirmWidgetManager::ItemToPurchase' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, PurchaseLootOverride) == 0x000608, "Member 'UHWPurchaseConfirmWidgetManager::PurchaseLootOverride' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, CollectionPurchaseWidgetClasses) == 0x000628, "Member 'UHWPurchaseConfirmWidgetManager::CollectionPurchaseWidgetClasses' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, PurchaseConfirmWidgets) == 0x000678, "Member 'UHWPurchaseConfirmWidgetManager::PurchaseConfirmWidgets' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, ActivePurchaseConfirmWidget) == 0x000688, "Member 'UHWPurchaseConfirmWidgetManager::ActivePurchaseConfirmWidget' has a wrong offset!");
static_assert(offsetof(UHWPurchaseConfirmWidgetManager, CurrencyPurchaseBinding) == 0x000690, "Member 'UHWPurchaseConfirmWidgetManager::CurrencyPurchaseBinding' has a wrong offset!");

// Class HemingwayUI.HWUIStyleCustomModifier_Slider
// 0x0008 (0x0048 - 0x0040)
class UHWUIStyleCustomModifier_Slider final : public UHWUIStyleCustomModifierDisplayData
{
public:
	float                                         Min;                                               // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleCustomModifier_Slider">();
	}
	static class UHWUIStyleCustomModifier_Slider* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleCustomModifier_Slider>();
	}
};
static_assert(alignof(UHWUIStyleCustomModifier_Slider) == 0x000008, "Wrong alignment on UHWUIStyleCustomModifier_Slider");
static_assert(sizeof(UHWUIStyleCustomModifier_Slider) == 0x000048, "Wrong size on UHWUIStyleCustomModifier_Slider");
static_assert(offsetof(UHWUIStyleCustomModifier_Slider, Min) == 0x000040, "Member 'UHWUIStyleCustomModifier_Slider::Min' has a wrong offset!");
static_assert(offsetof(UHWUIStyleCustomModifier_Slider, Max) == 0x000044, "Member 'UHWUIStyleCustomModifier_Slider::Max' has a wrong offset!");

// Class HemingwayUI.HWUIStyleCustomModifier_DropDown
// 0x0010 (0x0050 - 0x0040)
class UHWUIStyleCustomModifier_DropDown final : public UHWUIStyleCustomModifierDisplayData
{
public:
	TArray<class FText>                           Options;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleCustomModifier_DropDown">();
	}
	static class UHWUIStyleCustomModifier_DropDown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleCustomModifier_DropDown>();
	}
};
static_assert(alignof(UHWUIStyleCustomModifier_DropDown) == 0x000008, "Wrong alignment on UHWUIStyleCustomModifier_DropDown");
static_assert(sizeof(UHWUIStyleCustomModifier_DropDown) == 0x000050, "Wrong size on UHWUIStyleCustomModifier_DropDown");
static_assert(offsetof(UHWUIStyleCustomModifier_DropDown, Options) == 0x000040, "Member 'UHWUIStyleCustomModifier_DropDown::Options' has a wrong offset!");

// Class HemingwayUI.HWUIStyleLocalModifierData
// 0x0088 (0x00B8 - 0x0030)
class UHWUIStyleLocalModifierData final : public UDataAsset
{
public:
	struct FHWUIStyleLocalModifier                LocalModifier;                                     // 0x0030(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleLocalModifierData">();
	}
	static class UHWUIStyleLocalModifierData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleLocalModifierData>();
	}
};
static_assert(alignof(UHWUIStyleLocalModifierData) == 0x000008, "Wrong alignment on UHWUIStyleLocalModifierData");
static_assert(sizeof(UHWUIStyleLocalModifierData) == 0x0000B8, "Wrong size on UHWUIStyleLocalModifierData");
static_assert(offsetof(UHWUIStyleLocalModifierData, LocalModifier) == 0x000030, "Member 'UHWUIStyleLocalModifierData::LocalModifier' has a wrong offset!");

// Class HemingwayUI.HWUIStyleSubsystemConfig
// 0x0128 (0x0158 - 0x0030)
class UHWUIStyleSubsystemConfig final : public UDataAsset
{
public:
	TSoftObjectPtr<class UDataTable>              SharedStylesTable;                                 // 0x0030(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              GameStylesTable;                                   // 0x0058(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LobbyStylesTable;                                  // 0x0080(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              ColorPaletteTable;                                 // 0x00A8(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UDataTable>>      ColorPalettePresets;                               // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              GlobalModifierDefaultsTable;                       // 0x00E0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              LocalModifierDefaultsTable;                        // 0x0108(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverridePS5Configs;                               // 0x0130(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStylePlatformModifiers            PS5Modifiers;                                      // 0x0134(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideXBoxConfigs;                              // 0x013C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStylePlatformModifiers            XBoxModifiers;                                     // 0x0140(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverrideSteamDeckConfigs;                         // 0x0148(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWUIStylePlatformModifiers            SteamDeckModifiers;                                // 0x014C(0x0008)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleSubsystemConfig">();
	}
	static class UHWUIStyleSubsystemConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleSubsystemConfig>();
	}
};
static_assert(alignof(UHWUIStyleSubsystemConfig) == 0x000008, "Wrong alignment on UHWUIStyleSubsystemConfig");
static_assert(sizeof(UHWUIStyleSubsystemConfig) == 0x000158, "Wrong size on UHWUIStyleSubsystemConfig");
static_assert(offsetof(UHWUIStyleSubsystemConfig, SharedStylesTable) == 0x000030, "Member 'UHWUIStyleSubsystemConfig::SharedStylesTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, GameStylesTable) == 0x000058, "Member 'UHWUIStyleSubsystemConfig::GameStylesTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, LobbyStylesTable) == 0x000080, "Member 'UHWUIStyleSubsystemConfig::LobbyStylesTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, ColorPaletteTable) == 0x0000A8, "Member 'UHWUIStyleSubsystemConfig::ColorPaletteTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, ColorPalettePresets) == 0x0000D0, "Member 'UHWUIStyleSubsystemConfig::ColorPalettePresets' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, GlobalModifierDefaultsTable) == 0x0000E0, "Member 'UHWUIStyleSubsystemConfig::GlobalModifierDefaultsTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, LocalModifierDefaultsTable) == 0x000108, "Member 'UHWUIStyleSubsystemConfig::LocalModifierDefaultsTable' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, bOverridePS5Configs) == 0x000130, "Member 'UHWUIStyleSubsystemConfig::bOverridePS5Configs' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, PS5Modifiers) == 0x000134, "Member 'UHWUIStyleSubsystemConfig::PS5Modifiers' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, bOverrideXBoxConfigs) == 0x00013C, "Member 'UHWUIStyleSubsystemConfig::bOverrideXBoxConfigs' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, XBoxModifiers) == 0x000140, "Member 'UHWUIStyleSubsystemConfig::XBoxModifiers' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, bOverrideSteamDeckConfigs) == 0x000148, "Member 'UHWUIStyleSubsystemConfig::bOverrideSteamDeckConfigs' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystemConfig, SteamDeckModifiers) == 0x00014C, "Member 'UHWUIStyleSubsystemConfig::SteamDeckModifiers' has a wrong offset!");

// Class HemingwayUI.HWUIStyleSubsystem
// 0x0260 (0x0290 - 0x0030)
class UHWUIStyleSubsystem final : public UGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UHWUIStyleSubsystemConfig> StyleSubsystemConfigSoftPtr;                     // 0x0030(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0xD0];                                      // 0x0058(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class UHWUIStyle*>  Styles;                                            // 0x0128(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<EHWUIStyleGlobalModifierType, struct FHWUIStyleGlobalModifier> GlobalModifiers;             // 0x0178(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWUIStyleLocalModifier> LocalModifiers;                        // 0x01C8(0x0050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UHWUIStyleLocalModifierWidget>> LocalModifierWidgets;                // 0x0218(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bShouldApplyPlatformModifiers;                     // 0x0228(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_229[0x67];                                     // 0x0229(0x0067)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetGlobalModifier(EHWUIStyleGlobalModifierType GlobalModifierType);
	void ResetLocalModifier(const struct FGameplayTag& LocalModifierTag);
	void SetGlobalColorModifier(EHWUIStyleGlobalModifierType GlobalModifierType, const struct FHWUIStyleGlobalModifier_Color& NewColorModifier);
	void SetGlobalFontModifier(EHWUIStyleGlobalModifierType GlobalModifierType, const struct FHWUIStyleGlobalModifier_Font& NewFontModifier);
	void SetGlobalScaleModifier(EHWUIStyleGlobalModifierType GlobalModifierType, const struct FHWUIStyleGlobalModifier_Scale& NewScaleModifier);
	void SetLocalCustomModifier(const struct FGameplayTag& LocalModifierTag, const struct FHWUIStyleLocalCustomModifier& NewCustomModifier);
	void SetLocalCustomModifiers(const struct FGameplayTag& LocalModifierTag, const TArray<struct FHWUIStyleLocalCustomModifier>& NewGenericModifiers);
	void SetLocalGenericModifier(const struct FGameplayTag& LocalModifierTag, const struct FHWUIStyleLocalGenericModifier& NewGenericModifier);
	void SetLocalModifier(const struct FGameplayTag& LocalModifierTag, const struct FHWUIStyleLocalModifier& NewLocalModifier);

	bool GetColorFromPalette(const struct FGameplayTag& ColorTag, struct FLinearColor* OutColor, EHWUIStyleGlobalModifierType GlobalModifier) const;
	bool GetColorStyle(const struct FGameplayTag& StyleTag, EHWUIStyleGlobalModifierType ModifierToApply, struct FHWUIStyle_Color* OutColorStyle) const;
	bool GetFontStyle(const struct FGameplayTag& StyleTag, EHWUIStyleGlobalModifierType ModifierToApply, EHWUIStylePlatformModifierType PlatformModifiers, struct FHWUIStyle_Font* OutFontStyle) const;
	bool GetGlobalColorModifier(EHWUIStyleGlobalModifierType GlobalModifierType, struct FHWUIStyleGlobalModifier_Color* OutColorModifier) const;
	bool GetGlobalFontModifier(EHWUIStyleGlobalModifierType GlobalModifierType, struct FHWUIStyleGlobalModifier_Font* OutFontModifier) const;
	bool GetGlobalScaleModifier(EHWUIStyleGlobalModifierType GlobalModifierType, struct FHWUIStyleGlobalModifier_Scale* OutScaleModifier) const;
	bool GetLocalCustomModifier(const struct FGameplayTag& LocalModifierTag, class FName CustomModifierName, struct FHWUIStyleLocalCustomModifier* OutCustomModifier) const;
	bool GetLocalCustomModifiers(const struct FGameplayTag& LocalModifierTag, TArray<struct FHWUIStyleLocalCustomModifier>* OutCustomModifiers) const;
	bool GetLocalGenericModifier(const struct FGameplayTag& LocalModifierTag, struct FHWUIStyleLocalGenericModifier* OutLocalModifier) const;
	bool GetLocalModifier(const struct FGameplayTag& LocalModifierTag, struct FHWUIStyleLocalModifier* OutLocalModifier) const;
	bool GetScaleStyle(const struct FGameplayTag& StyleTag, EHWUIStyleGlobalModifierType ModifierToApply, struct FHWUIStyle_Scale* OutScaleStyle) const;
	const class UHWUIStyle* GetStyleFromTag(const struct FGameplayTag& StyleTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUIStyleSubsystem">();
	}
	static class UHWUIStyleSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUIStyleSubsystem>();
	}
};
static_assert(alignof(UHWUIStyleSubsystem) == 0x000008, "Wrong alignment on UHWUIStyleSubsystem");
static_assert(sizeof(UHWUIStyleSubsystem) == 0x000290, "Wrong size on UHWUIStyleSubsystem");
static_assert(offsetof(UHWUIStyleSubsystem, StyleSubsystemConfigSoftPtr) == 0x000030, "Member 'UHWUIStyleSubsystem::StyleSubsystemConfigSoftPtr' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystem, Styles) == 0x000128, "Member 'UHWUIStyleSubsystem::Styles' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystem, GlobalModifiers) == 0x000178, "Member 'UHWUIStyleSubsystem::GlobalModifiers' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystem, LocalModifiers) == 0x0001C8, "Member 'UHWUIStyleSubsystem::LocalModifiers' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystem, LocalModifierWidgets) == 0x000218, "Member 'UHWUIStyleSubsystem::LocalModifierWidgets' has a wrong offset!");
static_assert(offsetof(UHWUIStyleSubsystem, bShouldApplyPlatformModifiers) == 0x000228, "Member 'UHWUIStyleSubsystem::bShouldApplyPlatformModifiers' has a wrong offset!");

// Class HemingwayUI.HWViewRedirectorSubsystem
// 0x0088 (0x00B8 - 0x0030)
class UHWViewRedirectorSubsystem final : public ULocalPlayerSubsystem
{
public:
	TSoftObjectPtr<class UDataTable>              RedirectConfigTablePtr;                            // 0x0030(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FHWViewRedirectorConfig> RedirectConfigs;                       // 0x0058(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHWPendingCrossLevelViewRedirect> PendingLevelRedirects;                           // 0x00A8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void ExecutePendingCrossLevelRedirect();
	void RedirectByCollection(TSoftObjectPtr<class UHWCollectionItem> CollectionItem, EHWViewRedirectType RedirectType, const TSoftObjectPtr<class UHWCharacterItem> AssociatedCharacter);
	void RedirectByItemId(const struct FRH_ItemId& ItemId, EHWViewRedirectType RedirectType, const TSoftObjectPtr<class UHWCharacterItem> AssociatedCharacter);

	bool CanRedirectItem(const class UHWCollectionItem* CollectionItem, EHWViewRedirectType RedirectType) const;
	bool HasPendingCrossLevelRedirects() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWViewRedirectorSubsystem">();
	}
	static class UHWViewRedirectorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWViewRedirectorSubsystem>();
	}
};
static_assert(alignof(UHWViewRedirectorSubsystem) == 0x000008, "Wrong alignment on UHWViewRedirectorSubsystem");
static_assert(sizeof(UHWViewRedirectorSubsystem) == 0x0000B8, "Wrong size on UHWViewRedirectorSubsystem");
static_assert(offsetof(UHWViewRedirectorSubsystem, RedirectConfigTablePtr) == 0x000030, "Member 'UHWViewRedirectorSubsystem::RedirectConfigTablePtr' has a wrong offset!");
static_assert(offsetof(UHWViewRedirectorSubsystem, RedirectConfigs) == 0x000058, "Member 'UHWViewRedirectorSubsystem::RedirectConfigs' has a wrong offset!");
static_assert(offsetof(UHWViewRedirectorSubsystem, PendingLevelRedirects) == 0x0000A8, "Member 'UHWViewRedirectorSubsystem::PendingLevelRedirects' has a wrong offset!");

// Class HemingwayUI.HWTooltipWidget_AbilityDescription
// 0x0000 (0x05F8 - 0x05F8)
class UHWTooltipWidget_AbilityDescription : public UHWWidget
{
public:
	void DisplayDescription(const class FText& Description);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_AbilityDescription">();
	}
	static class UHWTooltipWidget_AbilityDescription* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_AbilityDescription>();
	}
};
static_assert(alignof(UHWTooltipWidget_AbilityDescription) == 0x000008, "Wrong alignment on UHWTooltipWidget_AbilityDescription");
static_assert(sizeof(UHWTooltipWidget_AbilityDescription) == 0x0005F8, "Wrong size on UHWTooltipWidget_AbilityDescription");

// Class HemingwayUI.HWTooltipWidget_AbilityDetail
// 0x0000 (0x05F8 - 0x05F8)
class UHWTooltipWidget_AbilityDetail : public UHWWidget
{
public:
	void DisplayCustomText(const class FText& Text);
	void DisplayKeywordText(const class FText& Text, const struct FHWDataDisplay_Keyword& KeywordData);
	class FText FormatScaling(const class FText& ScalingValueText, const struct FHWDataDisplay_CharacterStat& StatData);
	class FText FormatScalingTexts(const TArray<class FText>& IndividualScalingTexts);
	class FText FormatValue(float Value, bool bIsCurrentLevel);
	class FText FormatValues(const TArray<class FText>& ValueTexts);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_AbilityDetail">();
	}
	static class UHWTooltipWidget_AbilityDetail* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_AbilityDetail>();
	}
};
static_assert(alignof(UHWTooltipWidget_AbilityDetail) == 0x000008, "Wrong alignment on UHWTooltipWidget_AbilityDetail");
static_assert(sizeof(UHWTooltipWidget_AbilityDetail) == 0x0005F8, "Wrong size on UHWTooltipWidget_AbilityDetail");

// Class HemingwayUI.HWTooltipWidget_AbilityOverview
// 0x0030 (0x0678 - 0x0648)
class UHWTooltipWidget_AbilityOverview : public UHWTooltipWidget_Ability
{
public:
	class UHWEquipmentInstance*                   CachedEquipmentInstance;                           // 0x0648(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x10];                                     // 0x0650(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWTooltipWidget_AbilityDetail> UpgradeLineClass;                              // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWTooltipWidget_AbilityDetail*> UpgradeLines;                                      // 0x0668(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddedUpgradeLine(class UHWTooltipWidget_AbilityDetail* AddedLine);
	void DisplayAsNextAutoSkillLevelUp(bool bShould);
	void DisplayCanLevelUpAndUse(bool bCanLevelUp, bool bCanUse);
	void DisplayCooldown(float Cooldown);
	void DisplayCost(float Cost);
	void DisplayCurrentLevel(int32 CurrentLevel);
	void DisplayLevelLock(int32 LevelLock, bool bIsAbilityUnlocked);
	void OnEquipmentInstanceAdded();

	const class UHWEquipmentInstance* GetCachedEquipmentInstance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_AbilityOverview">();
	}
	static class UHWTooltipWidget_AbilityOverview* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_AbilityOverview>();
	}
};
static_assert(alignof(UHWTooltipWidget_AbilityOverview) == 0x000008, "Wrong alignment on UHWTooltipWidget_AbilityOverview");
static_assert(sizeof(UHWTooltipWidget_AbilityOverview) == 0x000678, "Wrong size on UHWTooltipWidget_AbilityOverview");
static_assert(offsetof(UHWTooltipWidget_AbilityOverview, CachedEquipmentInstance) == 0x000648, "Member 'UHWTooltipWidget_AbilityOverview::CachedEquipmentInstance' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_AbilityOverview, UpgradeLineClass) == 0x000660, "Member 'UHWTooltipWidget_AbilityOverview::UpgradeLineClass' has a wrong offset!");
static_assert(offsetof(UHWTooltipWidget_AbilityOverview, UpgradeLines) == 0x000668, "Member 'UHWTooltipWidget_AbilityOverview::UpgradeLines' has a wrong offset!");

// Class HemingwayUI.HWTooltipWidget_Effect
// 0x0000 (0x05F8 - 0x05F8)
class UHWTooltipWidget_Effect : public UHWWidget
{
public:
	void Clear();
	void DisplayDescription(const class FText& Description);
	void DisplayTitle(const class FText& Title);
	void Populate(const class UHWGameplayEffectUIBuffData* UIBuffData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_Effect">();
	}
	static class UHWTooltipWidget_Effect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_Effect>();
	}
};
static_assert(alignof(UHWTooltipWidget_Effect) == 0x000008, "Wrong alignment on UHWTooltipWidget_Effect");
static_assert(sizeof(UHWTooltipWidget_Effect) == 0x0005F8, "Wrong size on UHWTooltipWidget_Effect");

// Class HemingwayUI.HWHUDNavigationPromptsWidget
// 0x0040 (0x0638 - 0x05F8)
class UHWHUDNavigationPromptsWidget : public UHWWidget
{
public:
	class UHWMultiPromptWidget*                   NextPromptWidget;                                  // 0x05F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWMultiPromptWidget*                   PreviousPromptWidget;                              // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWMultiPromptWidget*                   BackPromptWidget;                                  // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWMultiPromptWidget*>           HUDNavPromptWidgetList;                            // 0x0610(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UInputAction*>                   IgnoreInputActions;                                // 0x0620(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_630[0x8];                                      // 0x0630(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleHUDNavigationFocusChanged(class UHWWidget* PreviousFocusedWidget, class UHWWidget* NewFocusedWidget);
	void HandleHUDNavigationStateChanged(bool bHUDNavigationIsActive);
	void HandlePlayerInputTypeChanged(ERH_INPUT_STATE NewState);
	void UpdatedBindingVisibility(bool bShouldShow);
	void UpdatedInputState(ERH_INPUT_STATE NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWHUDNavigationPromptsWidget">();
	}
	static class UHWHUDNavigationPromptsWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWHUDNavigationPromptsWidget>();
	}
};
static_assert(alignof(UHWHUDNavigationPromptsWidget) == 0x000008, "Wrong alignment on UHWHUDNavigationPromptsWidget");
static_assert(sizeof(UHWHUDNavigationPromptsWidget) == 0x000638, "Wrong size on UHWHUDNavigationPromptsWidget");
static_assert(offsetof(UHWHUDNavigationPromptsWidget, NextPromptWidget) == 0x0005F8, "Member 'UHWHUDNavigationPromptsWidget::NextPromptWidget' has a wrong offset!");
static_assert(offsetof(UHWHUDNavigationPromptsWidget, PreviousPromptWidget) == 0x000600, "Member 'UHWHUDNavigationPromptsWidget::PreviousPromptWidget' has a wrong offset!");
static_assert(offsetof(UHWHUDNavigationPromptsWidget, BackPromptWidget) == 0x000608, "Member 'UHWHUDNavigationPromptsWidget::BackPromptWidget' has a wrong offset!");
static_assert(offsetof(UHWHUDNavigationPromptsWidget, HUDNavPromptWidgetList) == 0x000610, "Member 'UHWHUDNavigationPromptsWidget::HUDNavPromptWidgetList' has a wrong offset!");
static_assert(offsetof(UHWHUDNavigationPromptsWidget, IgnoreInputActions) == 0x000620, "Member 'UHWHUDNavigationPromptsWidget::IgnoreInputActions' has a wrong offset!");

// Class HemingwayUI.HWUILibrary_Tooltip
// 0x0000 (0x0028 - 0x0028)
class UHWUILibrary_Tooltip final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUILibrary_Tooltip">();
	}
	static class UHWUILibrary_Tooltip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUILibrary_Tooltip>();
	}
};
static_assert(alignof(UHWUILibrary_Tooltip) == 0x000008, "Wrong alignment on UHWUILibrary_Tooltip");
static_assert(sizeof(UHWUILibrary_Tooltip) == 0x000028, "Wrong size on UHWUILibrary_Tooltip");

// Class HemingwayUI.HWTooltipWidget_ItemStat
// 0x0000 (0x05F8 - 0x05F8)
class UHWTooltipWidget_ItemStat : public UHWWidget
{
public:
	void DisplayStatIcon(const TSoftObjectPtr<class UTexture2D>& StatIcon);
	void DisplayStatTags(const struct FGameplayTagContainer& StatTags);
	void DisplayStatText(const class FText& StatText);
	void DisplayStatValue(float StatValue, const class FText& ValueText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWTooltipWidget_ItemStat">();
	}
	static class UHWTooltipWidget_ItemStat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWTooltipWidget_ItemStat>();
	}
};
static_assert(alignof(UHWTooltipWidget_ItemStat) == 0x000008, "Wrong alignment on UHWTooltipWidget_ItemStat");
static_assert(sizeof(UHWTooltipWidget_ItemStat) == 0x0005F8, "Wrong size on UHWTooltipWidget_ItemStat");

// Class HemingwayUI.HWGodBuilderItemsListItemEntryWidget
// 0x0048 (0x0678 - 0x0630)
class UHWGodBuilderItemsListItemEntryWidget : public UHWItemStoreItemEntry
{
public:
	uint8                                         Pad_630[0x40];                                     // 0x0630(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              HitArea;                                           // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleItemsListEntryHovered();
	void HandleItemsListEntryRightClicked();
	void HandleItemsListEntrySelected();
	void HandleItemsListEntryUnhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderItemsListItemEntryWidget">();
	}
	static class UHWGodBuilderItemsListItemEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderItemsListItemEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderItemsListItemEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderItemsListItemEntryWidget");
static_assert(sizeof(UHWGodBuilderItemsListItemEntryWidget) == 0x000678, "Wrong size on UHWGodBuilderItemsListItemEntryWidget");
static_assert(offsetof(UHWGodBuilderItemsListItemEntryWidget, HitArea) == 0x000670, "Member 'UHWGodBuilderItemsListItemEntryWidget::HitArea' has a wrong offset!");

// Class HemingwayUI.HWAnimatedWidgetSwitcher
// 0x0000 (0x0220 - 0x0220)
class UHWAnimatedWidgetSwitcher final : public UCommonAnimatedSwitcher
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWAnimatedWidgetSwitcher">();
	}
	static class UHWAnimatedWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWAnimatedWidgetSwitcher>();
	}
};
static_assert(alignof(UHWAnimatedWidgetSwitcher) == 0x000008, "Wrong alignment on UHWAnimatedWidgetSwitcher");
static_assert(sizeof(UHWAnimatedWidgetSwitcher) == 0x000220, "Wrong size on UHWAnimatedWidgetSwitcher");

// Class HemingwayUI.HWBorder
// 0x0020 (0x0360 - 0x0340)
class UHWBorder final : public UBorder
{
public:
	struct FHWUIStyleWidgetConfig                 BorderColorStyle;                                  // 0x0338(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHWUIStyleWidgetConfig                 ContentColorStyle;                                 // 0x0344(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBorderColorStyleTag(const struct FGameplayTag& NewStyleTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWBorder">();
	}
	static class UHWBorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWBorder>();
	}
};
static_assert(alignof(UHWBorder) == 0x000010, "Wrong alignment on UHWBorder");
static_assert(sizeof(UHWBorder) == 0x000360, "Wrong size on UHWBorder");
static_assert(offsetof(UHWBorder, BorderColorStyle) == 0x000338, "Member 'UHWBorder::BorderColorStyle' has a wrong offset!");
static_assert(offsetof(UHWBorder, ContentColorStyle) == 0x000344, "Member 'UHWBorder::ContentColorStyle' has a wrong offset!");

// Class HemingwayUI.HWButton
// 0x0020 (0x0650 - 0x0630)
class UHWButton final : public UButton
{
public:
	TMulticastInlineDelegate<void()>              OnDoubleClicked;                                   // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EHWButtonFocusMode                            FocusMode;                                         // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DoubleClickTime;                                   // 0x063C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastClickedTime;                                   // 0x0640(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_644[0xC];                                      // 0x0644(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleInputStateChanged(ERH_INPUT_STATE InputState);
	void OnClick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWButton">();
	}
	static class UHWButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWButton>();
	}
};
static_assert(alignof(UHWButton) == 0x000010, "Wrong alignment on UHWButton");
static_assert(sizeof(UHWButton) == 0x000650, "Wrong size on UHWButton");
static_assert(offsetof(UHWButton, OnDoubleClicked) == 0x000628, "Member 'UHWButton::OnDoubleClicked' has a wrong offset!");
static_assert(offsetof(UHWButton, FocusMode) == 0x000638, "Member 'UHWButton::FocusMode' has a wrong offset!");
static_assert(offsetof(UHWButton, DoubleClickTime) == 0x00063C, "Member 'UHWButton::DoubleClickTime' has a wrong offset!");
static_assert(offsetof(UHWButton, LastClickedTime) == 0x000640, "Member 'UHWButton::LastClickedTime' has a wrong offset!");

// Class HemingwayUI.HWCheckBox
// 0x0000 (0x0CB0 - 0x0CB0)
class UHWCheckBox final : public UCheckBox
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCheckBox">();
	}
	static class UHWCheckBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCheckBox>();
	}
};
static_assert(alignof(UHWCheckBox) == 0x000010, "Wrong alignment on UHWCheckBox");
static_assert(sizeof(UHWCheckBox) == 0x000CB0, "Wrong size on UHWCheckBox");

// Class HemingwayUI.HWListView
// 0x0010 (0x0C80 - 0x0C70)
class UHWListView final : public UCommonListView
{
public:
	bool                                          bHandleNavigation;                                 // 0x0C70(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandleNavigationWrap;                             // 0x0C71(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C72[0xE];                                      // 0x0C72(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ListViewSetSelectedItem(class UObject* Item, bool bBroadcastClick);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWListView">();
	}
	static class UHWListView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWListView>();
	}
};
static_assert(alignof(UHWListView) == 0x000010, "Wrong alignment on UHWListView");
static_assert(sizeof(UHWListView) == 0x000C80, "Wrong size on UHWListView");
static_assert(offsetof(UHWListView, bHandleNavigation) == 0x000C70, "Member 'UHWListView::bHandleNavigation' has a wrong offset!");
static_assert(offsetof(UHWListView, bHandleNavigationWrap) == 0x000C71, "Member 'UHWListView::bHandleNavigationWrap' has a wrong offset!");

// Class HemingwayUI.HWRichTextBlock
// 0x00C0 (0x0960 - 0x08A0)
class UHWRichTextBlock final : public URichTextBlock
{
public:
	class UDataTable*                             HWTextStyleSet;                                    // 0x08A0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FName, struct FGameplayTag>        OverridenColorStyleTags;                           // 0x08A8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FGameplayTag>        OverridenFontStyleTags;                            // 0x08F8(0x0050)(Protected, NativeAccessSpecifierProtected)
	EHWUIStyleGlobalModifierType                  OverrideFontGlobalModifier;                        // 0x0948(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWUIStyleGlobalModifierType                  OverrideColorGlobalModifier;                       // 0x0949(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94A[0x16];                                     // 0x094A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTagOverrides(bool bClearFontOverrides, bool bClearFontColorOverrides, bool bReloadTextStyles);
	void SetFontColorStyleTag(class FName StyleRowName, const struct FGameplayTag& NewStyleTag);
	void SetFontStyleTag(class FName StyleRowName, const struct FGameplayTag& NewStyleTag);

	EHWUIStyleGlobalModifierType GetColorGlobalModifier(const class FName& RowName) const;
	EHWUIStyleGlobalModifierType GetFontGlobalModifier(const class FName& RowName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRichTextBlock">();
	}
	static class UHWRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRichTextBlock>();
	}
};
static_assert(alignof(UHWRichTextBlock) == 0x000010, "Wrong alignment on UHWRichTextBlock");
static_assert(sizeof(UHWRichTextBlock) == 0x000960, "Wrong size on UHWRichTextBlock");
static_assert(offsetof(UHWRichTextBlock, HWTextStyleSet) == 0x0008A0, "Member 'UHWRichTextBlock::HWTextStyleSet' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlock, OverridenColorStyleTags) == 0x0008A8, "Member 'UHWRichTextBlock::OverridenColorStyleTags' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlock, OverridenFontStyleTags) == 0x0008F8, "Member 'UHWRichTextBlock::OverridenFontStyleTags' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlock, OverrideFontGlobalModifier) == 0x000948, "Member 'UHWRichTextBlock::OverrideFontGlobalModifier' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlock, OverrideColorGlobalModifier) == 0x000949, "Member 'UHWRichTextBlock::OverrideColorGlobalModifier' has a wrong offset!");

// Class HemingwayUI.HWScrollingTextBlock
// 0x0020 (0x03C0 - 0x03A0)
class UHWScrollingTextBlock final : public UHWTextBlock
{
public:
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsScrollingEnabled;                               // 0x03A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A9[0x3];                                      // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartDelay;                                        // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndDelay;                                          // 0x03B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInDelay;                                       // 0x03B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutDelay;                                      // 0x03BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ResetScrollState();
	void SetScrollingEnabled(bool bInIsScrollingEnabled);

	bool IsScrollingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScrollingTextBlock">();
	}
	static class UHWScrollingTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScrollingTextBlock>();
	}
};
static_assert(alignof(UHWScrollingTextBlock) == 0x000010, "Wrong alignment on UHWScrollingTextBlock");
static_assert(sizeof(UHWScrollingTextBlock) == 0x0003C0, "Wrong size on UHWScrollingTextBlock");
static_assert(offsetof(UHWScrollingTextBlock, bIsScrollingEnabled) == 0x0003A8, "Member 'UHWScrollingTextBlock::bIsScrollingEnabled' has a wrong offset!");
static_assert(offsetof(UHWScrollingTextBlock, Speed) == 0x0003AC, "Member 'UHWScrollingTextBlock::Speed' has a wrong offset!");
static_assert(offsetof(UHWScrollingTextBlock, StartDelay) == 0x0003B0, "Member 'UHWScrollingTextBlock::StartDelay' has a wrong offset!");
static_assert(offsetof(UHWScrollingTextBlock, EndDelay) == 0x0003B4, "Member 'UHWScrollingTextBlock::EndDelay' has a wrong offset!");
static_assert(offsetof(UHWScrollingTextBlock, FadeInDelay) == 0x0003B8, "Member 'UHWScrollingTextBlock::FadeInDelay' has a wrong offset!");
static_assert(offsetof(UHWScrollingTextBlock, FadeOutDelay) == 0x0003BC, "Member 'UHWScrollingTextBlock::FadeOutDelay' has a wrong offset!");

// Class HemingwayUI.HWUILibrary_UMGWrappers
// 0x0000 (0x0028 - 0x0028)
class UHWUILibrary_UMGWrappers final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUILibrary_UMGWrappers">();
	}
	static class UHWUILibrary_UMGWrappers* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUILibrary_UMGWrappers>();
	}
};
static_assert(alignof(UHWUILibrary_UMGWrappers) == 0x000008, "Wrong alignment on UHWUILibrary_UMGWrappers");
static_assert(sizeof(UHWUILibrary_UMGWrappers) == 0x000028, "Wrong size on UHWUILibrary_UMGWrappers");

// Class HemingwayUI.HWUniformGridPanel
// 0x0010 (0x01D0 - 0x01C0)
class UHWUniformGridPanel final : public UUniformGridPanel
{
public:
	EHWGridNavigationRule                         NavigationRule;                                    // 0x01C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EUINavigationRule                             RuleEdgeReached;                                   // 0x01C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C2[0xE];                                      // 0x01C2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RebuildNavigation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWUniformGridPanel">();
	}
	static class UHWUniformGridPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWUniformGridPanel>();
	}
};
static_assert(alignof(UHWUniformGridPanel) == 0x000008, "Wrong alignment on UHWUniformGridPanel");
static_assert(sizeof(UHWUniformGridPanel) == 0x0001D0, "Wrong size on UHWUniformGridPanel");
static_assert(offsetof(UHWUniformGridPanel, NavigationRule) == 0x0001C0, "Member 'UHWUniformGridPanel::NavigationRule' has a wrong offset!");
static_assert(offsetof(UHWUniformGridPanel, RuleEdgeReached) == 0x0001C1, "Member 'UHWUniformGridPanel::RuleEdgeReached' has a wrong offset!");

// Class HemingwayUI.HWWidgetSwitcher
// 0x0000 (0x01B0 - 0x01B0)
class UHWWidgetSwitcher final : public UWidgetSwitcher
{
public:
	void HideWidget();
	void SetNextActiveWidget(bool bLoopAround);
	void SetPreviousActiveWidget(bool bLoopAround);
	void ShowWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWidgetSwitcher">();
	}
	static class UHWWidgetSwitcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWidgetSwitcher>();
	}
};
static_assert(alignof(UHWWidgetSwitcher) == 0x000008, "Wrong alignment on UHWWidgetSwitcher");
static_assert(sizeof(UHWWidgetSwitcher) == 0x0001B0, "Wrong size on UHWWidgetSwitcher");

// Class HemingwayUI.HWRichTextBlockDecorator_InputPrompt
// 0x0018 (0x0040 - 0x0028)
class UHWRichTextBlockDecorator_InputPrompt : public URichTextBlockDecorator
{
public:
	TSubclassOf<class UHWMultiPromptWidget>       PromptClass;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinWidth;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWidth;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinHeight;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHeight;                                         // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRichTextBlockDecorator_InputPrompt">();
	}
	static class UHWRichTextBlockDecorator_InputPrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRichTextBlockDecorator_InputPrompt>();
	}
};
static_assert(alignof(UHWRichTextBlockDecorator_InputPrompt) == 0x000008, "Wrong alignment on UHWRichTextBlockDecorator_InputPrompt");
static_assert(sizeof(UHWRichTextBlockDecorator_InputPrompt) == 0x000040, "Wrong size on UHWRichTextBlockDecorator_InputPrompt");
static_assert(offsetof(UHWRichTextBlockDecorator_InputPrompt, PromptClass) == 0x000028, "Member 'UHWRichTextBlockDecorator_InputPrompt::PromptClass' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_InputPrompt, MinWidth) == 0x000030, "Member 'UHWRichTextBlockDecorator_InputPrompt::MinWidth' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_InputPrompt, MaxWidth) == 0x000034, "Member 'UHWRichTextBlockDecorator_InputPrompt::MaxWidth' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_InputPrompt, MinHeight) == 0x000038, "Member 'UHWRichTextBlockDecorator_InputPrompt::MinHeight' has a wrong offset!");
static_assert(offsetof(UHWRichTextBlockDecorator_InputPrompt, MaxHeight) == 0x00003C, "Member 'UHWRichTextBlockDecorator_InputPrompt::MaxHeight' has a wrong offset!");

// Class HemingwayUI.HWRichTextBlockDecorator_Keyword
// 0x0008 (0x0030 - 0x0028)
class UHWRichTextBlockDecorator_Keyword final : public URichTextBlockDecorator
{
public:
	class FName                                   KeywordStyleRowName;                               // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRichTextBlockDecorator_Keyword">();
	}
	static class UHWRichTextBlockDecorator_Keyword* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRichTextBlockDecorator_Keyword>();
	}
};
static_assert(alignof(UHWRichTextBlockDecorator_Keyword) == 0x000008, "Wrong alignment on UHWRichTextBlockDecorator_Keyword");
static_assert(sizeof(UHWRichTextBlockDecorator_Keyword) == 0x000030, "Wrong size on UHWRichTextBlockDecorator_Keyword");
static_assert(offsetof(UHWRichTextBlockDecorator_Keyword, KeywordStyleRowName) == 0x000028, "Member 'UHWRichTextBlockDecorator_Keyword::KeywordStyleRowName' has a wrong offset!");

// Class HemingwayUI.HWNoEditorViewRedirector
// 0x0000 (0x0028 - 0x0028)
class UHWNoEditorViewRedirector final : public URHViewRedirecter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWNoEditorViewRedirector">();
	}
	static class UHWNoEditorViewRedirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWNoEditorViewRedirector>();
	}
};
static_assert(alignof(UHWNoEditorViewRedirector) == 0x000008, "Wrong alignment on UHWNoEditorViewRedirector");
static_assert(sizeof(UHWNoEditorViewRedirector) == 0x000028, "Wrong size on UHWNoEditorViewRedirector");

// Class HemingwayUI.HWViewManager
// 0x0000 (0x0180 - 0x0180)
class UHWViewManager final : public URHViewManager
{
public:
	bool AddUniqueRoute(const struct FGameplayTag& RouteTag, bool bForceTransition, class UObject* RouteData);
	bool PopTopRouteFromLayer(const struct FGameplayTag& ReferenceRouteTag, bool bForceTransition);
	bool RefreshRoute(const struct FGameplayTag& RouteTag, class UObject* RouteData);
	bool ToggleRoute(const struct FGameplayTag& RouteTag, bool bForceTransition, class UObject* RouteData);

	class URHWidget* GetViewRouteWidget(const struct FGameplayTag& RouteTag) const;
	class UHWWidget* GetViewWidgetByTag(const struct FGameplayTag& RouteTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWViewManager">();
	}
	static class UHWViewManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWViewManager>();
	}
};
static_assert(alignof(UHWViewManager) == 0x000008, "Wrong alignment on UHWViewManager");
static_assert(sizeof(UHWViewManager) == 0x000180, "Wrong size on UHWViewManager");

// Class HemingwayUI.HWCurrencyPriceDisplayWidget
// 0x0038 (0x0630 - 0x05F8)
class UHWCurrencyPriceDisplayWidget : public UHWWidget
{
public:
	bool                                          bDisplayLessThanOwnedCurrency;                     // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x3];                                      // 0x05F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class URHStoreItemPrice>       DisplayedStoreItemPrice;                           // 0x05FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x14];                                     // 0x0604(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowSaleTag;                                      // 0x0618(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShowOriginalPrice;                                // 0x0619(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61A[0x6];                                      // 0x061A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWPurchaseSaleDisplayWidget*           SaleDisplayWidget;                                 // 0x0620(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DisplayedQuantity;                                 // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFromStoreItemPrice(const class URHStoreItemPrice* StoreItemPrice, int32 InQuantity);
	void SetQuantity(int32 NewQuantity);
	void UpdateSaleState(bool bIsOnSale, int32 NumCurrencies);

	TArray<class UHWCurrencyDisplayWidget*> GetCurrencyDisplaySaleWidgets() const;
	TArray<class UHWCurrencyDisplayWidget*> GetCurrencyDisplayWidgets() const;
	const struct FRH_ItemId GetDisplayedCurrencyId() const;
	EHWCurrencyType GetDisplayedCurrencyType() const;
	TArray<class UWidget*> GetDividerSaleWidgets() const;
	TArray<class UWidget*> GetDividerWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCurrencyPriceDisplayWidget">();
	}
	static class UHWCurrencyPriceDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCurrencyPriceDisplayWidget>();
	}
};
static_assert(alignof(UHWCurrencyPriceDisplayWidget) == 0x000008, "Wrong alignment on UHWCurrencyPriceDisplayWidget");
static_assert(sizeof(UHWCurrencyPriceDisplayWidget) == 0x000630, "Wrong size on UHWCurrencyPriceDisplayWidget");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, bDisplayLessThanOwnedCurrency) == 0x0005F8, "Member 'UHWCurrencyPriceDisplayWidget::bDisplayLessThanOwnedCurrency' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, DisplayedStoreItemPrice) == 0x0005FC, "Member 'UHWCurrencyPriceDisplayWidget::DisplayedStoreItemPrice' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, bShowSaleTag) == 0x000618, "Member 'UHWCurrencyPriceDisplayWidget::bShowSaleTag' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, bShowOriginalPrice) == 0x000619, "Member 'UHWCurrencyPriceDisplayWidget::bShowOriginalPrice' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, SaleDisplayWidget) == 0x000620, "Member 'UHWCurrencyPriceDisplayWidget::SaleDisplayWidget' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPriceDisplayWidget, DisplayedQuantity) == 0x000628, "Member 'UHWCurrencyPriceDisplayWidget::DisplayedQuantity' has a wrong offset!");

// Class HemingwayUI.HWPurchaseSaleDisplayWidget
// 0x0008 (0x0600 - 0x05F8)
class UHWPurchaseSaleDisplayWidget : public UHWWidget
{
public:
	bool                                          bDisplayHighestPercentage;                         // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayDiscountPercentage(int32 Discount);
	void SetFromPortalOffer(class URHPortalOffer* InPortalOffer);
	void SetFromStoreItemPrice(const class URHStoreItemPrice* StoreItemPrice);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPurchaseSaleDisplayWidget">();
	}
	static class UHWPurchaseSaleDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPurchaseSaleDisplayWidget>();
	}
};
static_assert(alignof(UHWPurchaseSaleDisplayWidget) == 0x000008, "Wrong alignment on UHWPurchaseSaleDisplayWidget");
static_assert(sizeof(UHWPurchaseSaleDisplayWidget) == 0x000600, "Wrong size on UHWPurchaseSaleDisplayWidget");
static_assert(offsetof(UHWPurchaseSaleDisplayWidget, bDisplayHighestPercentage) == 0x0005F8, "Member 'UHWPurchaseSaleDisplayWidget::bDisplayHighestPercentage' has a wrong offset!");

// Class HemingwayUI.HWCurrencyPurchaseEntryWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWCurrencyPurchaseEntryWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class URHStoreItem>            StoreItem;                                         // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UHWCollectionItem>       CurrencyWrapper;                                   // 0x0600(0x0028)(Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisplayCurrency(const class URHCurrency* CURRENCY);
	void DisplayImages(const TSoftObjectPtr<class UTexture2D>& Image, const TSoftObjectPtr<class UTexture2D>& SplashImage);
	void DisplayLoadingPriceState(bool bIsLoading);
	void DisplayLootPrice(class URHStoreItemPrice* PriceItem, const struct FGameplayTag& PriceGroup);
	void DisplayPortalOffer(const class URHPortalOffer* PortalOffer);
	void DisplayQuantities(int32 Quantity, int32 BonusQuantity);
	void Purchase();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCurrencyPurchaseEntryWidget">();
	}
	static class UHWCurrencyPurchaseEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCurrencyPurchaseEntryWidget>();
	}
};
static_assert(alignof(UHWCurrencyPurchaseEntryWidget) == 0x000008, "Wrong alignment on UHWCurrencyPurchaseEntryWidget");
static_assert(sizeof(UHWCurrencyPurchaseEntryWidget) == 0x000628, "Wrong size on UHWCurrencyPurchaseEntryWidget");
static_assert(offsetof(UHWCurrencyPurchaseEntryWidget, StoreItem) == 0x0005F8, "Member 'UHWCurrencyPurchaseEntryWidget::StoreItem' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPurchaseEntryWidget, CurrencyWrapper) == 0x000600, "Member 'UHWCurrencyPurchaseEntryWidget::CurrencyWrapper' has a wrong offset!");

// Class HemingwayUI.HWCurrencyPurchaseViewData
// 0x0018 (0x0040 - 0x0028)
class UHWCurrencyPurchaseViewData final : public UObject
{
public:
	EHWCurrencyType                               CurrencyType;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrencyId;                                        // 0x002C(0x0014)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWCurrencyPurchaseViewData">();
	}
	static class UHWCurrencyPurchaseViewData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWCurrencyPurchaseViewData>();
	}
};
static_assert(alignof(UHWCurrencyPurchaseViewData) == 0x000008, "Wrong alignment on UHWCurrencyPurchaseViewData");
static_assert(sizeof(UHWCurrencyPurchaseViewData) == 0x000040, "Wrong size on UHWCurrencyPurchaseViewData");
static_assert(offsetof(UHWCurrencyPurchaseViewData, CurrencyType) == 0x000028, "Member 'UHWCurrencyPurchaseViewData::CurrencyType' has a wrong offset!");
static_assert(offsetof(UHWCurrencyPurchaseViewData, CurrencyId) == 0x00002C, "Member 'UHWCurrencyPurchaseViewData::CurrencyId' has a wrong offset!");

// Class HemingwayUI.HWDynamicAnnouncementEvaluator_KVBoolean
// 0x0000 (0x0028 - 0x0028)
class UHWDynamicAnnouncementEvaluator_KVBoolean final : public UHWDynamicAnnouncementEvaluator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWDynamicAnnouncementEvaluator_KVBoolean">();
	}
	static class UHWDynamicAnnouncementEvaluator_KVBoolean* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWDynamicAnnouncementEvaluator_KVBoolean>();
	}
};
static_assert(alignof(UHWDynamicAnnouncementEvaluator_KVBoolean) == 0x000008, "Wrong alignment on UHWDynamicAnnouncementEvaluator_KVBoolean");
static_assert(sizeof(UHWDynamicAnnouncementEvaluator_KVBoolean) == 0x000028, "Wrong size on UHWDynamicAnnouncementEvaluator_KVBoolean");

// Class HemingwayUI.HWGodBuilderBuildDisplayAspectWidget
// 0x0020 (0x0680 - 0x0660)
class UHWGodBuilderBuildDisplayAspectWidget : public UHWGodAspectItemWidget
{
public:
	uint8                                         Pad_660[0x10];                                     // 0x0660(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEditable;                                       // 0x0670(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              AspectHitBox;                                      // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleAspectButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildDisplayAspectWidget">();
	}
	static class UHWGodBuilderBuildDisplayAspectWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildDisplayAspectWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildDisplayAspectWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildDisplayAspectWidget");
static_assert(sizeof(UHWGodBuilderBuildDisplayAspectWidget) == 0x000680, "Wrong size on UHWGodBuilderBuildDisplayAspectWidget");
static_assert(offsetof(UHWGodBuilderBuildDisplayAspectWidget, bIsEditable) == 0x000670, "Member 'UHWGodBuilderBuildDisplayAspectWidget::bIsEditable' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayAspectWidget, AspectHitBox) == 0x000678, "Member 'UHWGodBuilderBuildDisplayAspectWidget::AspectHitBox' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderBuildDisplayEntryWidget
// 0x0160 (0x0758 - 0x05F8)
class UHWGodBuilderBuildDisplayEntryWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x50];                                     // 0x05F8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VisibleItemEntries;                                // 0x0648(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGodBuildEntry                       DisplayedBuildEntry;                               // 0x0650(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsEditable;                                       // 0x06B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWGodBuilderEntryType                        BuildType;                                         // 0x06B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHovered;                                        // 0x06BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6BB[0x5];                                      // 0x06BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWButton*                              EntryButton;                                       // 0x06C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             TitleTextOverlay;                                  // 0x06C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           TitleText;                                         // 0x06D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEditableTextBox*                     EditableTitleText;                                 // 0x06D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              TitleTextButton;                                   // 0x06E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             ShortDescTextOverlay;                              // 0x06E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           ShortDescText;                                     // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWEditableTextBox*                     EditableShortDescText;                             // 0x06F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              ShortDescTextButton;                               // 0x0700(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWOverlay*                             LongDescTextOverlay;                               // 0x0708(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           LongDescText;                                      // 0x0710(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMultiLineEditableText*                 EditableLongDescText;                              // 0x0718(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              LongDescTextButton;                                // 0x0720(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       ItemEntriesBox;                                    // 0x0728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryItemWidget* StarterItem;                                     // 0x0730(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildDisplayEntryItemWidget* RelicItem;                                       // 0x0738(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWHorizontalBox*                       ButtonsBox;                                        // 0x0740(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              AddItemButton;                                     // 0x0748(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              RemoveItemButton;                                  // 0x0750(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FHWGodBuildEntry GetDisplayedBuildEntry(bool bRefreshItems);
	void HandleAddItemButtonClicked();
	void HandleEntryButtonHovered();
	void HandleItemEntryHovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleItemEntryRightClicked(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleItemEntrySelected(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleItemEntryUnhovered(class UHWGodBuilderBuildDisplayEntryItemWidget* EntryWidget, const TSoftObjectPtr<class UHWEquipmentItem>& InDisplayedItem);
	void HandleLongDescTextButtonClicked();
	void HandleLongDescTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void HandleRemoveItemButtonClicked();
	void HandleShortDescTextButtonClicked();
	void HandleShortDescTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void HandleTitleTextButtonClicked();
	void HandleTitleTextCommitted(const class FText& Text, ETextCommit CommitMethod);
	void SetEntryExpanded(bool bInIsExpanded);
	void SetEntryType(EHWGodBuilderEntryType InEntryType);
	void SetIsEditable(bool bInIsEditable);
	void SetIsHovered(bool bInIsHovered);
	void UpdateBuildEntryDisplay();

	EHWGodBuilderEntryType GetEntryType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildDisplayEntryWidget">();
	}
	static class UHWGodBuilderBuildDisplayEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildDisplayEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildDisplayEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildDisplayEntryWidget");
static_assert(sizeof(UHWGodBuilderBuildDisplayEntryWidget) == 0x000758, "Wrong size on UHWGodBuilderBuildDisplayEntryWidget");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, VisibleItemEntries) == 0x000648, "Member 'UHWGodBuilderBuildDisplayEntryWidget::VisibleItemEntries' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, DisplayedBuildEntry) == 0x000650, "Member 'UHWGodBuilderBuildDisplayEntryWidget::DisplayedBuildEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, bIsEditable) == 0x0006B8, "Member 'UHWGodBuilderBuildDisplayEntryWidget::bIsEditable' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, BuildType) == 0x0006B9, "Member 'UHWGodBuilderBuildDisplayEntryWidget::BuildType' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, bIsHovered) == 0x0006BA, "Member 'UHWGodBuilderBuildDisplayEntryWidget::bIsHovered' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, EntryButton) == 0x0006C0, "Member 'UHWGodBuilderBuildDisplayEntryWidget::EntryButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, TitleTextOverlay) == 0x0006C8, "Member 'UHWGodBuilderBuildDisplayEntryWidget::TitleTextOverlay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, TitleText) == 0x0006D0, "Member 'UHWGodBuilderBuildDisplayEntryWidget::TitleText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, EditableTitleText) == 0x0006D8, "Member 'UHWGodBuilderBuildDisplayEntryWidget::EditableTitleText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, TitleTextButton) == 0x0006E0, "Member 'UHWGodBuilderBuildDisplayEntryWidget::TitleTextButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, ShortDescTextOverlay) == 0x0006E8, "Member 'UHWGodBuilderBuildDisplayEntryWidget::ShortDescTextOverlay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, ShortDescText) == 0x0006F0, "Member 'UHWGodBuilderBuildDisplayEntryWidget::ShortDescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, EditableShortDescText) == 0x0006F8, "Member 'UHWGodBuilderBuildDisplayEntryWidget::EditableShortDescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, ShortDescTextButton) == 0x000700, "Member 'UHWGodBuilderBuildDisplayEntryWidget::ShortDescTextButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, LongDescTextOverlay) == 0x000708, "Member 'UHWGodBuilderBuildDisplayEntryWidget::LongDescTextOverlay' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, LongDescText) == 0x000710, "Member 'UHWGodBuilderBuildDisplayEntryWidget::LongDescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, EditableLongDescText) == 0x000718, "Member 'UHWGodBuilderBuildDisplayEntryWidget::EditableLongDescText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, LongDescTextButton) == 0x000720, "Member 'UHWGodBuilderBuildDisplayEntryWidget::LongDescTextButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, ItemEntriesBox) == 0x000728, "Member 'UHWGodBuilderBuildDisplayEntryWidget::ItemEntriesBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, StarterItem) == 0x000730, "Member 'UHWGodBuilderBuildDisplayEntryWidget::StarterItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, RelicItem) == 0x000738, "Member 'UHWGodBuilderBuildDisplayEntryWidget::RelicItem' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, ButtonsBox) == 0x000740, "Member 'UHWGodBuilderBuildDisplayEntryWidget::ButtonsBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, AddItemButton) == 0x000748, "Member 'UHWGodBuilderBuildDisplayEntryWidget::AddItemButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildDisplayEntryWidget, RemoveItemButton) == 0x000750, "Member 'UHWGodBuilderBuildDisplayEntryWidget::RemoveItemButton' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderBuildsListWidget
// 0x0090 (0x0688 - 0x05F8)
class UHWGodBuilderBuildsListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x40];                                     // 0x05F8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EntryCount;                                        // 0x0638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                EntryPadding;                                      // 0x063C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWGodBuilderBuildsListEntryWidget> EntryWidgetClass;                          // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWGodBuilderBuildsListEntryWidget*     CachedSelectedEntry;                               // 0x0658(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWWidgetSwitcher*                      LoadingSwitcher;                                   // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         BuildsList;                                        // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWScrollBox*                           BuildsScrollBox;                                   // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              CreateBuildButton;                                 // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VisibleEntries;                                    // 0x0680(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBuildHovered(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild);
	void HandleBuildSelected(class UHWGodBuilderBuildsListEntryWidget* EntryWidget, const struct FHWGodBuild& GodBuild);
	void HandleBuildsListScrolled(float CurrentOffset);
	void HandleBuildUpdated(bool bSuccess, const struct FHWGodBuild& InGodBuild);
	void HandleCreateBuildButtonSelected();
	void UpdateListDisplay(EHWBuildsListDisplayType BuildsType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderBuildsListWidget">();
	}
	static class UHWGodBuilderBuildsListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderBuildsListWidget>();
	}
};
static_assert(alignof(UHWGodBuilderBuildsListWidget) == 0x000008, "Wrong alignment on UHWGodBuilderBuildsListWidget");
static_assert(sizeof(UHWGodBuilderBuildsListWidget) == 0x000688, "Wrong size on UHWGodBuilderBuildsListWidget");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, EntryCount) == 0x000638, "Member 'UHWGodBuilderBuildsListWidget::EntryCount' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, EntryPadding) == 0x00063C, "Member 'UHWGodBuilderBuildsListWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, EntryWidgetClass) == 0x000650, "Member 'UHWGodBuilderBuildsListWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, CachedSelectedEntry) == 0x000658, "Member 'UHWGodBuilderBuildsListWidget::CachedSelectedEntry' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, LoadingSwitcher) == 0x000660, "Member 'UHWGodBuilderBuildsListWidget::LoadingSwitcher' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, BuildsList) == 0x000668, "Member 'UHWGodBuilderBuildsListWidget::BuildsList' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, BuildsScrollBox) == 0x000670, "Member 'UHWGodBuilderBuildsListWidget::BuildsScrollBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, CreateBuildButton) == 0x000678, "Member 'UHWGodBuilderBuildsListWidget::CreateBuildButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderBuildsListWidget, VisibleEntries) == 0x000680, "Member 'UHWGodBuilderBuildsListWidget::VisibleEntries' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderCopyToPopupWidget
// 0x01E0 (0x07D8 - 0x05F8)
class UHWGodBuilderCopyToPopupWidget : public UHWWidget
{
public:
	struct FHWGodBuild                            DisplayedBuild;                                    // 0x05F8(0x0190)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UHWGodSelectorWidget*                   GodSelector;                                       // 0x0788(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ConfirimBindingContainer;                          // 0x0790(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D0[0x8];                                      // 0x07D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayedBuildUpdated();
	void HandleConfirmAction();
	void HandleConfirmButtonClicked();

	const class UHWCharacterItem* GetSelectedGod() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderCopyToPopupWidget">();
	}
	static class UHWGodBuilderCopyToPopupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderCopyToPopupWidget>();
	}
};
static_assert(alignof(UHWGodBuilderCopyToPopupWidget) == 0x000008, "Wrong alignment on UHWGodBuilderCopyToPopupWidget");
static_assert(sizeof(UHWGodBuilderCopyToPopupWidget) == 0x0007D8, "Wrong size on UHWGodBuilderCopyToPopupWidget");
static_assert(offsetof(UHWGodBuilderCopyToPopupWidget, DisplayedBuild) == 0x0005F8, "Member 'UHWGodBuilderCopyToPopupWidget::DisplayedBuild' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderCopyToPopupWidget, GodSelector) == 0x000788, "Member 'UHWGodBuilderCopyToPopupWidget::GodSelector' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderCopyToPopupWidget, ConfirimBindingContainer) == 0x000790, "Member 'UHWGodBuilderCopyToPopupWidget::ConfirimBindingContainer' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderItemsListCategoryEntryWidget
// 0x0040 (0x0700 - 0x06C0)
class UHWGodBuilderItemsListCategoryEntryWidget : public UHWItemStoreItemCategoryWidget
{
public:
	uint8                                         Pad_6C0[0x40];                                     // 0x06C0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleItemsListEntryHovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryRightClicked(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntrySelected(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryUnhovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderItemsListCategoryEntryWidget">();
	}
	static class UHWGodBuilderItemsListCategoryEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderItemsListCategoryEntryWidget>();
	}
};
static_assert(alignof(UHWGodBuilderItemsListCategoryEntryWidget) == 0x000008, "Wrong alignment on UHWGodBuilderItemsListCategoryEntryWidget");
static_assert(sizeof(UHWGodBuilderItemsListCategoryEntryWidget) == 0x000700, "Wrong size on UHWGodBuilderItemsListCategoryEntryWidget");

// Class HemingwayUI.HWGodBuilderItemsListWidget
// 0x0110 (0x0708 - 0x05F8)
class UHWGodBuilderItemsListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x40];                                     // 0x05F8(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UHWGodBuilderItemsListCategoryEntryWidget> ItemCategoryClass;                  // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWSortableGridPanel*                   ItemCategoryList;                                  // 0x0640(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWGodBuilderItemsListCategoryEntryWidget*> VisibleItemCategories;                  // 0x0648(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UHWItemStoreItemEntry*>          SelectedItemEntries;                               // 0x0658(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UHWScrollBox*                           Grid_ScrollBox;                                    // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWItemStoreItemFilterWidget*           FilterWidget;                                      // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWNavigationWidgetStitcher*            ItemListStitcher;                                  // 0x0678(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHWUIActionBindingContainer            ClearFiltersBindingContainer;                      // 0x0680(0x0040)(Edit, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C0[0x4];                                      // 0x06C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShouldFocusToFilter;                              // 0x06C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldFocusSearch;                                // 0x06C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C6[0x2];                                      // 0x06C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UHWEquipmentItem>> DynamicItemList;                                  // 0x06C8(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UDataTable*                             CharSpecificItemDataTable;                         // 0x06D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   GodSpecificLabel;                                  // 0x06E0(0x0018)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6F8[0x10];                                     // 0x06F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void ClearSearchText();
	void FindAndSelectItem(const class UHWEquipmentItem* SelectedEquipmentItem);
	void HandleItemsListEntryHovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryRightClicked(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntrySelected(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void HandleItemsListEntryUnhovered(class UHWGodBuilderItemsListItemEntryWidget* EntryWidget, const class UHWEquipmentItem* InDisplayedItem);
	void OnCharacterSpecificItemTableFullyLoaded();
	void OnCharacterSpecificItemTableLoaded(TSoftObjectPtr<class UDataTable> ItemDataTableSoftPtr);
	void OnClearFiltersActionPressed();
	void OnFilterAdded(const struct FGameplayTag& AddedFilterTag, const bool bShouldFilter);
	void OnFilterCleared(const bool bClearSearchText, const bool bClearRoles);
	void OnFilterRemoved(const struct FGameplayTag& RemovedFilterTag, const bool bShouldFilter);
	void OnSearchTextChanged(const class FText& InText);
	void SetDesiredFocusToFilter(bool bToFilter);
	void SetDesiredFocusToSearch(bool bToSearch);
	void ShouldShowFilter(bool bShouldShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderItemsListWidget">();
	}
	static class UHWGodBuilderItemsListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderItemsListWidget>();
	}
};
static_assert(alignof(UHWGodBuilderItemsListWidget) == 0x000008, "Wrong alignment on UHWGodBuilderItemsListWidget");
static_assert(sizeof(UHWGodBuilderItemsListWidget) == 0x000708, "Wrong size on UHWGodBuilderItemsListWidget");
static_assert(offsetof(UHWGodBuilderItemsListWidget, ItemCategoryClass) == 0x000638, "Member 'UHWGodBuilderItemsListWidget::ItemCategoryClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, ItemCategoryList) == 0x000640, "Member 'UHWGodBuilderItemsListWidget::ItemCategoryList' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, VisibleItemCategories) == 0x000648, "Member 'UHWGodBuilderItemsListWidget::VisibleItemCategories' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, SelectedItemEntries) == 0x000658, "Member 'UHWGodBuilderItemsListWidget::SelectedItemEntries' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, Grid_ScrollBox) == 0x000668, "Member 'UHWGodBuilderItemsListWidget::Grid_ScrollBox' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, FilterWidget) == 0x000670, "Member 'UHWGodBuilderItemsListWidget::FilterWidget' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, ItemListStitcher) == 0x000678, "Member 'UHWGodBuilderItemsListWidget::ItemListStitcher' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, ClearFiltersBindingContainer) == 0x000680, "Member 'UHWGodBuilderItemsListWidget::ClearFiltersBindingContainer' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, bShouldFocusToFilter) == 0x0006C4, "Member 'UHWGodBuilderItemsListWidget::bShouldFocusToFilter' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, bShouldFocusSearch) == 0x0006C5, "Member 'UHWGodBuilderItemsListWidget::bShouldFocusSearch' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, DynamicItemList) == 0x0006C8, "Member 'UHWGodBuilderItemsListWidget::DynamicItemList' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, CharSpecificItemDataTable) == 0x0006D8, "Member 'UHWGodBuilderItemsListWidget::CharSpecificItemDataTable' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderItemsListWidget, GodSpecificLabel) == 0x0006E0, "Member 'UHWGodBuilderItemsListWidget::GodSpecificLabel' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderRolesListWidget
// 0x0030 (0x0628 - 0x05F8)
class UHWGodBuilderRolesListWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                EntryPadding;                                      // 0x0608(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodBuilderRolesListEntryWidget> EntryWidgetClass;                           // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         RolesList;                                         // 0x0620(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleRoleEntrySelected(class UHWGodBuilderRolesListEntryWidget* EntryWidget, ECharacterRole EntryRole);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderRolesListWidget">();
	}
	static class UHWGodBuilderRolesListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderRolesListWidget>();
	}
};
static_assert(alignof(UHWGodBuilderRolesListWidget) == 0x000008, "Wrong alignment on UHWGodBuilderRolesListWidget");
static_assert(sizeof(UHWGodBuilderRolesListWidget) == 0x000628, "Wrong size on UHWGodBuilderRolesListWidget");
static_assert(offsetof(UHWGodBuilderRolesListWidget, EntryPadding) == 0x000608, "Member 'UHWGodBuilderRolesListWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderRolesListWidget, EntryWidgetClass) == 0x000618, "Member 'UHWGodBuilderRolesListWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderRolesListWidget, RolesList) == 0x000620, "Member 'UHWGodBuilderRolesListWidget::RolesList' has a wrong offset!");

// Class HemingwayUI.HWGodBuilderStatsDisplayWidget
// 0x00D0 (0x06C8 - 0x05F8)
class UHWGodBuilderStatsDisplayWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x78];                                     // 0x05F8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   StatDisplayTags;                                   // 0x0670(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodBuilderStatsDisplayEntryWidget> StatDisplayEntryWidgetClass;             // 0x0680(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                EntryPadding;                                      // 0x0688(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UHWTextBlock*                           LevelText;                                         // 0x0698(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              LeftButton;                                        // 0x06A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWButton*                              RightButton;                                       // 0x06A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWVerticalBox*                         StatsList;                                         // 0x06B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B8[0x10];                                     // 0x06B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleLeftButtonClicked();
	void HandleRightButtonClicked();
	void HandleStatsLevelChanged(int32 Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodBuilderStatsDisplayWidget">();
	}
	static class UHWGodBuilderStatsDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodBuilderStatsDisplayWidget>();
	}
};
static_assert(alignof(UHWGodBuilderStatsDisplayWidget) == 0x000008, "Wrong alignment on UHWGodBuilderStatsDisplayWidget");
static_assert(sizeof(UHWGodBuilderStatsDisplayWidget) == 0x0006C8, "Wrong size on UHWGodBuilderStatsDisplayWidget");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, StatDisplayTags) == 0x000670, "Member 'UHWGodBuilderStatsDisplayWidget::StatDisplayTags' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, StatDisplayEntryWidgetClass) == 0x000680, "Member 'UHWGodBuilderStatsDisplayWidget::StatDisplayEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, EntryPadding) == 0x000688, "Member 'UHWGodBuilderStatsDisplayWidget::EntryPadding' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, LevelText) == 0x000698, "Member 'UHWGodBuilderStatsDisplayWidget::LevelText' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, LeftButton) == 0x0006A0, "Member 'UHWGodBuilderStatsDisplayWidget::LeftButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, RightButton) == 0x0006A8, "Member 'UHWGodBuilderStatsDisplayWidget::RightButton' has a wrong offset!");
static_assert(offsetof(UHWGodBuilderStatsDisplayWidget, StatsList) == 0x0006B0, "Member 'UHWGodBuilderStatsDisplayWidget::StatsList' has a wrong offset!");

// Class HemingwayUI.HWGodSelectorWidget
// 0x0070 (0x0668 - 0x05F8)
class UHWGodSelectorWidget : public UHWWidget
{
public:
	TMulticastInlineDelegate<void(const class UHWCharacterItem* GodItem)> OnGodHovered;              // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnGodSelectionChanged;                             // 0x0608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bAllowsMultipleSelections;                         // 0x0618(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UHWCharacterItem>> CurrentSelectedGods;                              // 0x0620(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSubclassOf<class UHWGodSelectorEntryWidget>  EntryWidgetClass;                                  // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UHWGodSelectorEntryWidget*>      GodEntryWidgets;                                   // 0x0638(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DisabledGodsTagContainer;                          // 0x0648(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	void BP_SetGodChoices(const TArray<class UHWCharacterItem*>& GodChoices);
	void ClearCurrentSelection();
	void HandleGodEntryHoverStateUpdated(const class UHWCharacterItem* GodItem, bool bIsHovered);
	void HandleGodEntrySelectStateUpdated(const class UHWCharacterItem* GodItem, bool bIsSelected);
	void OnGodEntriesAdded(TArray<class UHWGodSelectorEntryWidget*>& GodEntries);
	void OnGodEntriesCleared();
	void SelectAtIndex(int32 Index_0);
	void SetDisabledChoices(const struct FGameplayTagContainer& InDisabledGodsTagContainer);

	void BP_GetCurrentSelectedGods(TArray<class UHWCharacterItem*>* OutSelectedGods) const;
	class UHWGodSelectorEntryWidget* GetGodEntryWidgetForGod(const class UHWCharacterItem* GodItem) const;
	class UHWGodSubsystem* GetGodSubsystem() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWGodSelectorWidget">();
	}
	static class UHWGodSelectorWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWGodSelectorWidget>();
	}
};
static_assert(alignof(UHWGodSelectorWidget) == 0x000008, "Wrong alignment on UHWGodSelectorWidget");
static_assert(sizeof(UHWGodSelectorWidget) == 0x000668, "Wrong size on UHWGodSelectorWidget");
static_assert(offsetof(UHWGodSelectorWidget, OnGodHovered) == 0x0005F8, "Member 'UHWGodSelectorWidget::OnGodHovered' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, OnGodSelectionChanged) == 0x000608, "Member 'UHWGodSelectorWidget::OnGodSelectionChanged' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, bAllowsMultipleSelections) == 0x000618, "Member 'UHWGodSelectorWidget::bAllowsMultipleSelections' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, CurrentSelectedGods) == 0x000620, "Member 'UHWGodSelectorWidget::CurrentSelectedGods' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, EntryWidgetClass) == 0x000630, "Member 'UHWGodSelectorWidget::EntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, GodEntryWidgets) == 0x000638, "Member 'UHWGodSelectorWidget::GodEntryWidgets' has a wrong offset!");
static_assert(offsetof(UHWGodSelectorWidget, DisabledGodsTagContainer) == 0x000648, "Member 'UHWGodSelectorWidget::DisabledGodsTagContainer' has a wrong offset!");

// Class HemingwayUI.HWScreenAlertManager
// 0x0060 (0x0658 - 0x05F8)
class UHWScreenAlertManager : public UHWWidget
{
public:
	class UDataTable*                             AlertTable;                                        // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCanvasPanel*                         Container;                                         // 0x0600(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_608[0x50];                                     // 0x0608(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddedAlert(class UHWImage* AlertImage, const struct FGameplayTag& InAlertTag, const struct FHWScreenAlertConfig& InConfig);
	void TriggerAlertFromNamedWidget(const struct FGameplayTag& AlertTag, float Duration, const class FName& Name_0);
	void TriggerAlertFromWidgetGeometry(const struct FGameplayTag& AlertTag, float Duration, const struct FGeometry& ReferenceGeometry, const struct FVector2D& Coordinates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWScreenAlertManager">();
	}
	static class UHWScreenAlertManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWScreenAlertManager>();
	}
};
static_assert(alignof(UHWScreenAlertManager) == 0x000008, "Wrong alignment on UHWScreenAlertManager");
static_assert(sizeof(UHWScreenAlertManager) == 0x000658, "Wrong size on UHWScreenAlertManager");
static_assert(offsetof(UHWScreenAlertManager, AlertTable) == 0x0005F8, "Member 'UHWScreenAlertManager::AlertTable' has a wrong offset!");
static_assert(offsetof(UHWScreenAlertManager, Container) == 0x000600, "Member 'UHWScreenAlertManager::Container' has a wrong offset!");

// Class HemingwayUI.HWWatermarkWidget
// 0x0080 (0x0680 - 0x0600)
class UHWWatermarkWidget : public UHWPersistentWidget
{
public:
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReleasePhaseText;                                  // 0x0608(0x0018)(BlueprintVisible, BlueprintReadOnly, Config, Protected, NativeAccessSpecifierProtected)
	bool                                          bDisplayReleasePhase;                              // 0x0620(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ShortSessionId;                                    // 0x0628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayPlayerId;                                  // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x063C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerName;                                        // 0x0640(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomizePosition;                                // 0x0650(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomizeDelay;                                    // 0x0654(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              OuterMargin;                                       // 0x0658(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              InnerMargin;                                       // 0x0668(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSessionUpdated(class URH_SessionView* SessionView);
	void PlayerInfoPositionUpdated(const struct FVector2D& NewPosition);
	void PlayerInfoUpdated();
	void SessionInfoUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWWatermarkWidget">();
	}
	static class UHWWatermarkWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWWatermarkWidget>();
	}
};
static_assert(alignof(UHWWatermarkWidget) == 0x000008, "Wrong alignment on UHWWatermarkWidget");
static_assert(sizeof(UHWWatermarkWidget) == 0x000680, "Wrong size on UHWWatermarkWidget");
static_assert(offsetof(UHWWatermarkWidget, ReleasePhaseText) == 0x000608, "Member 'UHWWatermarkWidget::ReleasePhaseText' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, bDisplayReleasePhase) == 0x000620, "Member 'UHWWatermarkWidget::bDisplayReleasePhase' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, ShortSessionId) == 0x000628, "Member 'UHWWatermarkWidget::ShortSessionId' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, bDisplayPlayerId) == 0x000638, "Member 'UHWWatermarkWidget::bDisplayPlayerId' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, PlayerId) == 0x00063C, "Member 'UHWWatermarkWidget::PlayerId' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, PlayerName) == 0x000640, "Member 'UHWWatermarkWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, bRandomizePosition) == 0x000650, "Member 'UHWWatermarkWidget::bRandomizePosition' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, RandomizeDelay) == 0x000654, "Member 'UHWWatermarkWidget::RandomizeDelay' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, OuterMargin) == 0x000658, "Member 'UHWWatermarkWidget::OuterMargin' has a wrong offset!");
static_assert(offsetof(UHWWatermarkWidget, InnerMargin) == 0x000668, "Member 'UHWWatermarkWidget::InnerMargin' has a wrong offset!");

// Class HemingwayUI.HWOrderAcquisitionEntryWidget
// 0x0000 (0x0668 - 0x0668)
class UHWOrderAcquisitionEntryWidget : public UHWStoreItemDisplayWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWOrderAcquisitionEntryWidget">();
	}
	static class UHWOrderAcquisitionEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWOrderAcquisitionEntryWidget>();
	}
};
static_assert(alignof(UHWOrderAcquisitionEntryWidget) == 0x000008, "Wrong alignment on UHWOrderAcquisitionEntryWidget");
static_assert(sizeof(UHWOrderAcquisitionEntryWidget) == 0x000668, "Wrong size on UHWOrderAcquisitionEntryWidget");

// Class HemingwayUI.HWLocalPlayerWidget
// 0x0000 (0x0610 - 0x0610)
class UHWLocalPlayerWidget : public UHWPlayerInfoDisplayWidget
{
public:
	void DisplayCurrencyPurchaseCallout(bool bShouldDisplay);
	void GetPlayerVIPStatus();
	void HandleVIPBoostButtonClicked();
	void OnUserLoginChanged(bool bLoggedIn, int32 UserId, int32 UserIndex);
	void OpenCurrencyPurchase();
	void UpdateCurrencyPurchaseButton();
	void UpdatePlayerName(const class FString& PlayerName);
	void UpdatePlayerVIPDuration(const struct FDateTime& ExpirationTime);
	void UpdatePlayerVIPOwnership(EHWVIPOwnershipLevel VIPOwnership);

	TArray<class UHWCurrencyDisplayWidget*> GetDynamicCurrencyDisplayWidgets() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWLocalPlayerWidget">();
	}
	static class UHWLocalPlayerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWLocalPlayerWidget>();
	}
};
static_assert(alignof(UHWLocalPlayerWidget) == 0x000008, "Wrong alignment on UHWLocalPlayerWidget");
static_assert(sizeof(UHWLocalPlayerWidget) == 0x000610, "Wrong size on UHWLocalPlayerWidget");

// Class HemingwayUI.HWPlayerNameDisplayWidget
// 0x0050 (0x0648 - 0x05F8)
class UHWPlayerNameDisplayWidget : public UHWWidget
{
public:
	bool                                          bShowLocal;                                        // 0x05F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplaysVIPIcon;                                  // 0x05F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FA[0x16];                                     // 0x05FA(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             CurrentPlayerNameColorItemId;                      // 0x0610(0x0014)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URH_PlayerInfo*                         MyPlayerInfo;                                      // 0x0628(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AHWPlayerState*                         MyPlayerState;                                     // 0x0630(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URH_RHFriendAndPlatformFriend*          MyFriendAndPlatformFriend;                         // 0x0638(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_640[0x8];                                      // 0x0640(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePlayerStateVIPOwnershipUpdated(class AHWPlayerState* PlayerState, EHWVIPOwnershipLevel VIPOwnershipLevel);
	void HandleTeamsUpdated();
	void LoadFriend(class URH_RHFriendAndPlatformFriend* InFriend);
	void LoadPlayerInfo(class URH_PlayerInfo* InPlayerInfo);
	void LoadPlayerInfoFromId(const struct FHWPersistentPlayerId& InPlayerInfo);
	void LoadPlayerInfoFromPlayerUuid(const struct FGuid& InPlayerId);
	void OnLocalLoadoutChange(const struct FHWPlayerLoadout& InPlayerLoadout);
	void OnPlayerNameColorItemLoad();
	void OnReceiveRemotePlayerLoadout(bool bSuccess, const struct FHWPlayerLoadout& InPlayerLoadout);
	void OnUpdatePlayerName(const class FString& Name_0);
	void OnUpdatePlayerNameAndVIPOwnership(const class FString& Name_0, EHWVIPOwnershipLevel VIPOwnership);
	void OnUpdatePlayerNameColorItem(const class UHWCollectionItem* NameItem);
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerNameDisplayWidget">();
	}
	static class UHWPlayerNameDisplayWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerNameDisplayWidget>();
	}
};
static_assert(alignof(UHWPlayerNameDisplayWidget) == 0x000008, "Wrong alignment on UHWPlayerNameDisplayWidget");
static_assert(sizeof(UHWPlayerNameDisplayWidget) == 0x000648, "Wrong size on UHWPlayerNameDisplayWidget");
static_assert(offsetof(UHWPlayerNameDisplayWidget, bShowLocal) == 0x0005F8, "Member 'UHWPlayerNameDisplayWidget::bShowLocal' has a wrong offset!");
static_assert(offsetof(UHWPlayerNameDisplayWidget, bDisplaysVIPIcon) == 0x0005F9, "Member 'UHWPlayerNameDisplayWidget::bDisplaysVIPIcon' has a wrong offset!");
static_assert(offsetof(UHWPlayerNameDisplayWidget, CurrentPlayerNameColorItemId) == 0x000610, "Member 'UHWPlayerNameDisplayWidget::CurrentPlayerNameColorItemId' has a wrong offset!");
static_assert(offsetof(UHWPlayerNameDisplayWidget, MyPlayerInfo) == 0x000628, "Member 'UHWPlayerNameDisplayWidget::MyPlayerInfo' has a wrong offset!");
static_assert(offsetof(UHWPlayerNameDisplayWidget, MyPlayerState) == 0x000630, "Member 'UHWPlayerNameDisplayWidget::MyPlayerState' has a wrong offset!");
static_assert(offsetof(UHWPlayerNameDisplayWidget, MyFriendAndPlatformFriend) == 0x000638, "Member 'UHWPlayerNameDisplayWidget::MyFriendAndPlatformFriend' has a wrong offset!");

// Class HemingwayUI.HWPlayerCardEquipWidget
// 0x0598 (0x0B90 - 0x05F8)
class UHWPlayerCardEquipWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x30];                                     // 0x05F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreviewItemIndex;                                  // 0x0628(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWPlayerLoadout                       PreviewPlayerLoadout;                              // 0x0630(0x00B8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FHWPlayerLoadout                       SavedPlayerLoadout;                                // 0x06E8(0x00B8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FHWGodLoadout                          PreviewGodLoadout;                                 // 0x07A0(0x0128)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FHWGodLoadout                          SavedGodLoadout;                                   // 0x08C8(0x0128)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FHWGodLoadout                          PreSavedGodLoadout;                                // 0x09F0(0x0128)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UHWCharacterItem*                       GodItem;                                           // 0x0B18(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UHWCollectionItem*                      PreviewItem;                                       // 0x0B20(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHWPlayerCardEquipState                       WidgetState;                                       // 0x0B28(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWPlayerCardWidget*                    PlayerCard;                                        // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B38[0x8];                                      // 0x0B38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHWCollectionItem*>              BadgeItems;                                        // 0x0B40(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UHWCollectionItem*>              TrackerItems;                                      // 0x0B50(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UInputAction*                           ConfirmLoadoutAction;                              // 0x0B60(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B68[0x8];                                      // 0x0B68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           PreviewNextSlotAction;                             // 0x0B70(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B78[0x8];                                      // 0x0B78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputAction*                           PreviewPrevSlotAction;                             // 0x0B80(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B88[0x8];                                      // 0x0B88(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayBadgeEquipPreview(const TArray<class UHWCollectionItem*>& InBadgeItems);
	void DisplayTrackerEquipPreview(const TArray<class UHWCollectionItem*>& InTrackerItems);
	void HandleChangePreviewSlotAction(int32 Direction);
	void HandleConfirmLoadoutAction();
	void HandleNavigationLeft();
	void HandleNavigationRight();
	void PreviewCollectionItem(const class UHWCollectionItem* InItem);
	void SetGodLoadout(const class UHWCharacterItem* InGodItem);
	void UpdateEquipState(EHWPlayerCardEquipState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPlayerCardEquipWidget">();
	}
	static class UHWPlayerCardEquipWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPlayerCardEquipWidget>();
	}
};
static_assert(alignof(UHWPlayerCardEquipWidget) == 0x000008, "Wrong alignment on UHWPlayerCardEquipWidget");
static_assert(sizeof(UHWPlayerCardEquipWidget) == 0x000B90, "Wrong size on UHWPlayerCardEquipWidget");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewItemIndex) == 0x000628, "Member 'UHWPlayerCardEquipWidget::PreviewItemIndex' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewPlayerLoadout) == 0x000630, "Member 'UHWPlayerCardEquipWidget::PreviewPlayerLoadout' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, SavedPlayerLoadout) == 0x0006E8, "Member 'UHWPlayerCardEquipWidget::SavedPlayerLoadout' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewGodLoadout) == 0x0007A0, "Member 'UHWPlayerCardEquipWidget::PreviewGodLoadout' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, SavedGodLoadout) == 0x0008C8, "Member 'UHWPlayerCardEquipWidget::SavedGodLoadout' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreSavedGodLoadout) == 0x0009F0, "Member 'UHWPlayerCardEquipWidget::PreSavedGodLoadout' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, GodItem) == 0x000B18, "Member 'UHWPlayerCardEquipWidget::GodItem' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewItem) == 0x000B20, "Member 'UHWPlayerCardEquipWidget::PreviewItem' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, WidgetState) == 0x000B28, "Member 'UHWPlayerCardEquipWidget::WidgetState' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PlayerCard) == 0x000B30, "Member 'UHWPlayerCardEquipWidget::PlayerCard' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, BadgeItems) == 0x000B40, "Member 'UHWPlayerCardEquipWidget::BadgeItems' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, TrackerItems) == 0x000B50, "Member 'UHWPlayerCardEquipWidget::TrackerItems' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, ConfirmLoadoutAction) == 0x000B60, "Member 'UHWPlayerCardEquipWidget::ConfirmLoadoutAction' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewNextSlotAction) == 0x000B70, "Member 'UHWPlayerCardEquipWidget::PreviewNextSlotAction' has a wrong offset!");
static_assert(offsetof(UHWPlayerCardEquipWidget, PreviewPrevSlotAction) == 0x000B80, "Member 'UHWPlayerCardEquipWidget::PreviewPrevSlotAction' has a wrong offset!");

// Class HemingwayUI.HWPortalPurchaseConfirmWidget
// 0x0018 (0x0610 - 0x05F8)
class UHWPortalPurchaseConfirmWidget : public UHWWidget
{
public:
	TWeakObjectPtr<class URHStoreItem>            PortalOfferItem;                                   // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x10];                                     // 0x0600(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Checkout();
	void Close();
	void DisplayPortalOffer(class URHPortalOffer* InPortalOffer);
	void HandleApplicationSystemOverlayStateChanged(bool bSystemUIIsDisplayed);
	void HandlePurchasePortalItem(class URHStoreItem* Item);
	void UpdateCheckoutStatus(bool bHasPendingCheckout);

	bool HasPendingCheckout() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPortalPurchaseConfirmWidget">();
	}
	static class UHWPortalPurchaseConfirmWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPortalPurchaseConfirmWidget>();
	}
};
static_assert(alignof(UHWPortalPurchaseConfirmWidget) == 0x000008, "Wrong alignment on UHWPortalPurchaseConfirmWidget");
static_assert(sizeof(UHWPortalPurchaseConfirmWidget) == 0x000610, "Wrong size on UHWPortalPurchaseConfirmWidget");
static_assert(offsetof(UHWPortalPurchaseConfirmWidget, PortalOfferItem) == 0x0005F8, "Member 'UHWPortalPurchaseConfirmWidget::PortalOfferItem' has a wrong offset!");

// Class HemingwayUI.HWRallyHereContextMenu
// 0x0020 (0x0638 - 0x0618)
class UHWRallyHereContextMenu : public URHContextMenu
{
public:
	bool                                          bShowingBot;                                       // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_619[0x3];                                      // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWCustomBotConfig_Single              botConfig;                                         // 0x061C(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	int32                                         BotTeam;                                           // 0x0634(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBot(const struct FHWCustomBotConfig_Single& botConfig_0, const int32& inTeam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWRallyHereContextMenu">();
	}
	static class UHWRallyHereContextMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWRallyHereContextMenu>();
	}
};
static_assert(alignof(UHWRallyHereContextMenu) == 0x000008, "Wrong alignment on UHWRallyHereContextMenu");
static_assert(sizeof(UHWRallyHereContextMenu) == 0x000638, "Wrong size on UHWRallyHereContextMenu");
static_assert(offsetof(UHWRallyHereContextMenu, bShowingBot) == 0x000618, "Member 'UHWRallyHereContextMenu::bShowingBot' has a wrong offset!");
static_assert(offsetof(UHWRallyHereContextMenu, botConfig) == 0x00061C, "Member 'UHWRallyHereContextMenu::botConfig' has a wrong offset!");
static_assert(offsetof(UHWRallyHereContextMenu, BotTeam) == 0x000634, "Member 'UHWRallyHereContextMenu::BotTeam' has a wrong offset!");

// Class HemingwayUI.HWPrecompiledShaderWidget
// 0x0010 (0x0608 - 0x05F8)
class UHWPrecompiledShaderWidget : public UHWWidget
{
public:
	uint8                                         Pad_5F8[0x10];                                     // 0x05F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdatePrecompiledState(EHWPrecompiledShaderState NewState);
	void UpdateTaskCount(int32 CompletedTaskCount, int32 TotalTasks);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HWPrecompiledShaderWidget">();
	}
	static class UHWPrecompiledShaderWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHWPrecompiledShaderWidget>();
	}
};
static_assert(alignof(UHWPrecompiledShaderWidget) == 0x000008, "Wrong alignment on UHWPrecompiledShaderWidget");
static_assert(sizeof(UHWPrecompiledShaderWidget) == 0x000608, "Wrong size on UHWPrecompiledShaderWidget");

}

