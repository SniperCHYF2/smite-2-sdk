#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Items_CircesHexstone

#include "Basic.hpp"

#include "Hemingway_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_Items_CircesHexstone.GA_Items_CircesHexstone_C.AttemptAbilityAttackHit
// 0x00D0 (0x00D0 - 0x0000)
struct GA_Items_CircesHexstone_C_AttemptAbilityAttackHit final
{
public:
	class UHWAbilityTask_FireAttack*              AttackTask;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHWAbilityAttackInstance               Attack;                                            // 0x0008(0x0080)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0088(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTagContainer                  HitTags;                                           // 0x00B0(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit) == 0x000008, "Wrong alignment on GA_Items_CircesHexstone_C_AttemptAbilityAttackHit");
static_assert(sizeof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit) == 0x0000D0, "Wrong size on GA_Items_CircesHexstone_C_AttemptAbilityAttackHit");
static_assert(offsetof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit, AttackTask) == 0x000000, "Member 'GA_Items_CircesHexstone_C_AttemptAbilityAttackHit::AttackTask' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit, Attack) == 0x000008, "Member 'GA_Items_CircesHexstone_C_AttemptAbilityAttackHit::Attack' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit, TargetData) == 0x000088, "Member 'GA_Items_CircesHexstone_C_AttemptAbilityAttackHit::TargetData' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_AttemptAbilityAttackHit, HitTags) == 0x0000B0, "Member 'GA_Items_CircesHexstone_C_AttemptAbilityAttackHit::HitTags' has a wrong offset!");

// Function GA_Items_CircesHexstone.GA_Items_CircesHexstone_C.ExecuteUbergraph_GA_Items_CircesHexstone
// 0x0130 (0x0130 - 0x0000)
struct GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWAbilityTask_FireAttack*              K2Node_Event_AttackTask;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHWAbilityAttackInstance               K2Node_Event_Attack;                               // 0x0020(0x0080)(ConstParm)
	struct FGameplayAbilityTargetDataHandle       K2Node_Event_TargetData;                           // 0x00A0(0x0028)(ConstParm)
	struct FGameplayTagContainer                  K2Node_Event_HitTags;                              // 0x00C8(0x0020)(ConstParm)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsFromTargetData_ReturnValue;   // 0x00F0(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0124(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone) == 0x000008, "Wrong alignment on GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone");
static_assert(sizeof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone) == 0x000130, "Wrong size on GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, EntryPoint) == 0x000000, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, Temp_bool_Variable) == 0x000004, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, Temp_int_Array_Index_Variable) == 0x000008, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_Event_AttackTask) == 0x000018, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_Event_AttackTask' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_Event_Attack) == 0x000020, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_Event_Attack' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_Event_TargetData) == 0x0000A0, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_Event_TargetData' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_Event_HitTags) == 0x0000C8, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_Event_HitTags' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_Event_bWasCancelled) == 0x0000E8, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_GetAllActorsFromTargetData_ReturnValue) == 0x0000F0, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_GetAllActorsFromTargetData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_Array_Get_Item) == 0x000100, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_Array_Length_ReturnValue) == 0x000108, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x000110, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, K2Node_DynamicCast_bSuccess) == 0x000120, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_Less_IntInt_ReturnValue) == 0x000121, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000122, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000124, "Member 'GA_Items_CircesHexstone_C_ExecuteUbergraph_GA_Items_CircesHexstone::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");

// Function GA_Items_CircesHexstone.GA_Items_CircesHexstone_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_Items_CircesHexstone_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_Items_CircesHexstone_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_Items_CircesHexstone_C_K2_OnEndAbility");
static_assert(sizeof(GA_Items_CircesHexstone_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_Items_CircesHexstone_C_K2_OnEndAbility");
static_assert(offsetof(GA_Items_CircesHexstone_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_Items_CircesHexstone_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_Items_CircesHexstone.GA_Items_CircesHexstone_C.GetFiringMontageInfo
// 0x0038 (0x0038 - 0x0000)
struct GA_Items_CircesHexstone_C_GetFiringMontageInfo final
{
public:
	struct FHWMontageInfo                         ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor)
	class AActor*                                 CallFunc_GetAvatarActorFromActorInfo_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHWMontageInfo                         CallFunc_GetItemMontage_Montage;                   // 0x0020(0x0018)(NoDestructor)
};
static_assert(alignof(GA_Items_CircesHexstone_C_GetFiringMontageInfo) == 0x000008, "Wrong alignment on GA_Items_CircesHexstone_C_GetFiringMontageInfo");
static_assert(sizeof(GA_Items_CircesHexstone_C_GetFiringMontageInfo) == 0x000038, "Wrong size on GA_Items_CircesHexstone_C_GetFiringMontageInfo");
static_assert(offsetof(GA_Items_CircesHexstone_C_GetFiringMontageInfo, ReturnValue) == 0x000000, "Member 'GA_Items_CircesHexstone_C_GetFiringMontageInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_GetFiringMontageInfo, CallFunc_GetAvatarActorFromActorInfo_ReturnValue) == 0x000018, "Member 'GA_Items_CircesHexstone_C_GetFiringMontageInfo::CallFunc_GetAvatarActorFromActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_Items_CircesHexstone_C_GetFiringMontageInfo, CallFunc_GetItemMontage_Montage) == 0x000020, "Member 'GA_Items_CircesHexstone_C_GetFiringMontageInfo::CallFunc_GetItemMontage_Montage' has a wrong offset!");

}

