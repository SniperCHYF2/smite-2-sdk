#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BanPickDraftCommon

#include "Basic.hpp"

#include "NetCore_structs.hpp"


namespace SDK
{

// Enum BanPickDraftCommon.EDraftTaskType
// NumValues: 0x0007
enum class EDraftTaskType : uint8
{
	PickAndLock                              = 0,
	Pick                                     = 1,
	Lock                                     = 2,
	Ban                                      = 3,
	Block                                    = 4,
	Redraft                                  = 5,
	EDraftTaskType_MAX                       = 6,
};

// Enum BanPickDraftCommon.EDraftPickExclusivity
// NumValues: 0x0004
enum class EDraftPickExclusivity : uint8
{
	NotExclusive                             = 0,
	ExclusiveToTeam                          = 1,
	ExclusiveToAll                           = 2,
	EDraftPickExclusivity_MAX                = 3,
};

// Enum BanPickDraftCommon.EDraftBanEffects
// NumValues: 0x0003
enum class EDraftBanEffects : uint8
{
	EffectsAll                               = 0,
	EffectsOpposingTeams                     = 1,
	EDraftBanEffects_MAX                     = 2,
};

// Enum BanPickDraftCommon.EDraftSelectProxyRules
// NumValues: 0x0004
enum class EDraftSelectProxyRules : uint8
{
	DelayOrAbstain                           = 0,
	Random                                   = 1,
	Captain                                  = 2,
	EDraftSelectProxyRules_MAX               = 3,
};

// Enum BanPickDraftCommon.ECanCompleteDraftTaskResult
// NumValues: 0x000B
enum class ECanCompleteDraftTaskResult : uint8
{
	Ok                                       = 0,
	NotValidTask                             = 1,
	Unavailable                              = 2,
	UnavailableByOwnership                   = 3,
	Banned                                   = 4,
	AlreadyPicked                            = 5,
	AlreadyLocked                            = 6,
	CannotAbstain                            = 7,
	CannotLock                               = 8,
	CannotBan                                = 9,
	ECanCompleteDraftTaskResult_MAX          = 10,
};

// Enum BanPickDraftCommon.EDraftChoiceOwnershipState
// NumValues: 0x0004
enum class EDraftChoiceOwnershipState : uint8
{
	Owned                                    = 0,
	NotOwned                                 = 1,
	WaitingToCheckInventory                  = 2,
	EDraftChoiceOwnershipState_MAX           = 3,
};

// Enum BanPickDraftCommon.EPGame_ReplicateTimerState
// NumValues: 0x0006
enum class EPGame_ReplicateTimerState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Overtime                                 = 2,
	Unlimited                                = 3,
	Paused                                   = 4,
	EPGame_MAX                               = 5,
};

// ScriptStruct BanPickDraftCommon.DraftTaskId
// 0x0002 (0x0002 - 0x0000)
struct FDraftTaskId final
{
public:
	uint16                                        ID;                                                // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDraftTaskId) == 0x000002, "Wrong alignment on FDraftTaskId");
static_assert(sizeof(FDraftTaskId) == 0x000002, "Wrong size on FDraftTaskId");
static_assert(offsetof(FDraftTaskId, ID) == 0x000000, "Member 'FDraftTaskId::ID' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.DraftPlayerIdHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDraftPlayerIdHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDraftPlayerIdHandle) == 0x000008, "Wrong alignment on FDraftPlayerIdHandle");
static_assert(sizeof(FDraftPlayerIdHandle) == 0x000010, "Wrong size on FDraftPlayerIdHandle");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimerId
// 0x0001 (0x0001 - 0x0000)
struct FPGame_ReplicatedTimerId final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPGame_ReplicatedTimerId) == 0x000001, "Wrong alignment on FPGame_ReplicatedTimerId");
static_assert(sizeof(FPGame_ReplicatedTimerId) == 0x000001, "Wrong size on FPGame_ReplicatedTimerId");
static_assert(offsetof(FPGame_ReplicatedTimerId, ID) == 0x000000, "Member 'FPGame_ReplicatedTimerId::ID' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.DraftTask
// 0x003C (0x0048 - 0x000C)
struct FDraftTask final : public FFastArraySerializerItem
{
public:
	struct FDraftTaskId                           TaskId;                                            // 0x000C(0x0002)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDraftTaskType                                TaskType;                                          // 0x000E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SelectedChoice;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDraftPlayerIdHandle                   Player;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDraftPlayerIdHandle                   SelectingProxy;                                    // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamNum;                                           // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaltingTask;                                      // 0x003C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeForTask;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPGame_ReplicatedTimerId               TimerId;                                           // 0x0044(0x0001)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDraftTask) == 0x000008, "Wrong alignment on FDraftTask");
static_assert(sizeof(FDraftTask) == 0x000048, "Wrong size on FDraftTask");
static_assert(offsetof(FDraftTask, TaskId) == 0x00000C, "Member 'FDraftTask::TaskId' has a wrong offset!");
static_assert(offsetof(FDraftTask, TaskType) == 0x00000E, "Member 'FDraftTask::TaskType' has a wrong offset!");
static_assert(offsetof(FDraftTask, SelectedChoice) == 0x000010, "Member 'FDraftTask::SelectedChoice' has a wrong offset!");
static_assert(offsetof(FDraftTask, Player) == 0x000018, "Member 'FDraftTask::Player' has a wrong offset!");
static_assert(offsetof(FDraftTask, SelectingProxy) == 0x000028, "Member 'FDraftTask::SelectingProxy' has a wrong offset!");
static_assert(offsetof(FDraftTask, TeamNum) == 0x000038, "Member 'FDraftTask::TeamNum' has a wrong offset!");
static_assert(offsetof(FDraftTask, bHaltingTask) == 0x00003C, "Member 'FDraftTask::bHaltingTask' has a wrong offset!");
static_assert(offsetof(FDraftTask, TimeForTask) == 0x000040, "Member 'FDraftTask::TimeForTask' has a wrong offset!");
static_assert(offsetof(FDraftTask, TimerId) == 0x000044, "Member 'FDraftTask::TimerId' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.DraftPlayerIdInternal
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDraftPlayerIdInternal
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDraftPlayerIdInternal) == 0x000008, "Wrong alignment on FDraftPlayerIdInternal");
static_assert(sizeof(FDraftPlayerIdInternal) == 0x000008, "Wrong size on FDraftPlayerIdInternal");

// ScriptStruct BanPickDraftCommon.DraftTaskList
// 0x0028 (0x0130 - 0x0108)
struct FDraftTaskList final : public FFastArraySerializer
{
public:
	TArray<struct FDraftTask>                     Tasks;                                             // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x18];                                     // 0x0118(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDraftTaskList) == 0x000008, "Wrong alignment on FDraftTaskList");
static_assert(sizeof(FDraftTaskList) == 0x000130, "Wrong size on FDraftTaskList");
static_assert(offsetof(FDraftTaskList, Tasks) == 0x000108, "Member 'FDraftTaskList::Tasks' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimer
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FPGame_ReplicatedTimer final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPGame_ReplicateTimerState                    TimerState;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeRemaining;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14[0x24];                                      // 0x0014(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_ReplicatedTimer) == 0x000008, "Wrong alignment on FPGame_ReplicatedTimer");
static_assert(sizeof(FPGame_ReplicatedTimer) == 0x000038, "Wrong size on FPGame_ReplicatedTimer");
static_assert(offsetof(FPGame_ReplicatedTimer, TimerState) == 0x000008, "Member 'FPGame_ReplicatedTimer::TimerState' has a wrong offset!");
static_assert(offsetof(FPGame_ReplicatedTimer, InitialTime) == 0x00000C, "Member 'FPGame_ReplicatedTimer::InitialTime' has a wrong offset!");
static_assert(offsetof(FPGame_ReplicatedTimer, TimeRemaining) == 0x000010, "Member 'FPGame_ReplicatedTimer::TimeRemaining' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimerManagerEntry
// 0x004C (0x0058 - 0x000C)
struct FPGame_ReplicatedTimerManagerEntry final : public FFastArraySerializerItem
{
public:
	struct FPGame_ReplicatedTimerId               ID;                                                // 0x000C(0x0001)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPGame_ReplicatedTimer                 Timer;                                             // 0x0010(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_ReplicatedTimerManagerEntry) == 0x000008, "Wrong alignment on FPGame_ReplicatedTimerManagerEntry");
static_assert(sizeof(FPGame_ReplicatedTimerManagerEntry) == 0x000058, "Wrong size on FPGame_ReplicatedTimerManagerEntry");
static_assert(offsetof(FPGame_ReplicatedTimerManagerEntry, ID) == 0x00000C, "Member 'FPGame_ReplicatedTimerManagerEntry::ID' has a wrong offset!");
static_assert(offsetof(FPGame_ReplicatedTimerManagerEntry, Timer) == 0x000010, "Member 'FPGame_ReplicatedTimerManagerEntry::Timer' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.DraftChoice
// 0x0010 (0x0010 - 0x0000)
struct FDraftChoice final
{
public:
	class UObject*                                ChoiceObject;                                      // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsVisibleToUI : 1;                                // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUnavailable : 1;                                // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUnavailableByOwnership : 1;                     // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBanned : 1;                                     // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlreadyPicked : 1;                                // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAlreadyLocked : 1;                                // 0x0008(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCannotLock : 1;                                   // 0x0008(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelectedByTeammate : 1;                           // 0x0008(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelectedByOpponent : 1;                           // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSelectedBySelf : 1;                               // 0x0009(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPendingCompleteBySelf : 1;                        // 0x0009(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPickedByLocalTeam : 1;                            // 0x0009(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPickedByOpponent : 1;                             // 0x0009(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockedByLocalPlayer : 1;                          // 0x0009(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EDraftChoiceOwnershipState                    OwnershipState;                                    // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDraftChoice) == 0x000008, "Wrong alignment on FDraftChoice");
static_assert(sizeof(FDraftChoice) == 0x000010, "Wrong size on FDraftChoice");
static_assert(offsetof(FDraftChoice, ChoiceObject) == 0x000000, "Member 'FDraftChoice::ChoiceObject' has a wrong offset!");
static_assert(offsetof(FDraftChoice, OwnershipState) == 0x00000A, "Member 'FDraftChoice::OwnershipState' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimerManagerBase
// 0x0018 (0x0120 - 0x0108)
struct FPGame_ReplicatedTimerManagerBase : public FFastArraySerializer
{
public:
	TArray<struct FPGame_ReplicatedTimerManagerEntry> Timers;                                        // 0x0108(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_ReplicatedTimerManagerBase) == 0x000008, "Wrong alignment on FPGame_ReplicatedTimerManagerBase");
static_assert(sizeof(FPGame_ReplicatedTimerManagerBase) == 0x000120, "Wrong size on FPGame_ReplicatedTimerManagerBase");
static_assert(offsetof(FPGame_ReplicatedTimerManagerBase, Timers) == 0x000108, "Member 'FPGame_ReplicatedTimerManagerBase::Timers' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimerManager
// 0x0020 (0x0140 - 0x0120)
struct FPGame_ReplicatedTimerManager final : public FPGame_ReplicatedTimerManagerBase
{
public:
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         NextTimerId;                                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_ReplicatedTimerManager) == 0x000008, "Wrong alignment on FPGame_ReplicatedTimerManager");
static_assert(sizeof(FPGame_ReplicatedTimerManager) == 0x000140, "Wrong size on FPGame_ReplicatedTimerManager");
static_assert(offsetof(FPGame_ReplicatedTimerManager, NextTimerId) == 0x000138, "Member 'FPGame_ReplicatedTimerManager::NextTimerId' has a wrong offset!");

// ScriptStruct BanPickDraftCommon.PGame_ReplicatedTimerManagerSlave
// 0x0050 (0x0170 - 0x0120)
struct FPGame_ReplicatedTimerManagerSlave final : public FPGame_ReplicatedTimerManagerBase
{
public:
	uint8                                         Pad_120[0x50];                                     // 0x0120(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPGame_ReplicatedTimerManagerSlave) == 0x000008, "Wrong alignment on FPGame_ReplicatedTimerManagerSlave");
static_assert(sizeof(FPGame_ReplicatedTimerManagerSlave) == 0x000170, "Wrong size on FPGame_ReplicatedTimerManagerSlave");

}

