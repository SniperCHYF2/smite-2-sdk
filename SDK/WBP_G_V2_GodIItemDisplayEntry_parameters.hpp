#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V2_GodIItemDisplayEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "HemingwayUI_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.AmmoEquipIconOverride
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              OverrideTexture;                                   // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride) == 0x000028, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride, OverrideTexture) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_AmmoEquipIconOverride::OverrideTexture' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature
// 0x0700 (0x0700 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature) == 0x000700, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature, ActiveEffect) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature::ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature, EffectData) == 0x000400, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_2_OnEffectTrackStarted__DelegateSignature::EffectData' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature
// 0x0700 (0x0700 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature final
{
public:
	struct FActiveGameplayEffect                  ActiveEffect;                                      // 0x0000(0x0400)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FHWTrackedEffectData                   EffectData;                                        // 0x0400(0x0300)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature) == 0x000700, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature, ActiveEffect) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature::ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature, EffectData) == 0x000400, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_BndEvt__WBP_G_V2_GodIItemDisplayEntry_CooldownWidget_K2Node_ComponentBoundEvent_3_OnEffectTrackEnded__DelegateSignature::EffectData' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.Check Item Fire
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire final
{
public:
	ETriggerEvent                                 KeyTriggerEvent;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire, KeyTriggerEvent) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_Check_Item_Fire::KeyTriggerEvent' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayAbilityPhase_Aiming
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Aiming::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayAbilityPhase_Fired
// 0x0005 (0x0005 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAbilityTypeTag_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAbilityTypeTag_ReturnValue_1;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAbilityTypeTag_ReturnValue_2;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired) == 0x000005, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired::PreviousPhase' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired, CallFunc_HasAbilityTypeTag_ReturnValue) == 0x000001, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired::CallFunc_HasAbilityTypeTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired, CallFunc_HasAbilityTypeTag_ReturnValue_1) == 0x000002, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired::CallFunc_HasAbilityTypeTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired, CallFunc_HasAbilityTypeTag_ReturnValue_2) == 0x000003, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired::CallFunc_HasAbilityTypeTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Fired::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayAbilityPhase_Inactive
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_Inactive::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayAbilityPhase_PreFire
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAbilityPhase_PreFire::PreviousPhase' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayAmmo
// 0x00A8 (0x00A8 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasEnough;                                        // 0x0004(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCount;                                          // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo) == 0x0000A8, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, AmmoCount) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::AmmoCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, bHasEnough) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::bHasEnough' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, MaxCount) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::MaxCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, Temp_bool_Variable) == 0x00000C, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, CallFunc_Greater_IntInt_ReturnValue) == 0x00000D, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, Temp_byte_Variable) == 0x00000E, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, Temp_byte_Variable_1) == 0x00000F, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, K2Node_Select_Default) == 0x000028, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, K2Node_MakeArray_Array) == 0x000080, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo, CallFunc_Format_ReturnValue) == 0x000090, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayAmmo::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayCanEquipmentItemBeUpgraded
// 0x0005 (0x0005 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded final
{
public:
	bool                                          bCanBeUpgraded;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded) == 0x000005, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded, bCanBeUpgraded) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded::bCanBeUpgraded' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded, Temp_byte_Variable) == 0x000002, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded, K2Node_Select_Default) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayCanEquipmentItemBeUpgraded::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayEquipment
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment final
{
public:
	const class UHWEquipmentItem*                 EquipmentInfo;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_1;                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasTag_ReturnValue_2;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UIconInfo*                              CallFunc_GetIconInfoByTag_OutIcon;                 // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIconInfoByTag_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetFirstMatchingTag_ReturnValue;          // 0x001C(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment) == 0x000028, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, EquipmentInfo) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::EquipmentInfo' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_HasTag_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_HasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_HasTag_ReturnValue_1) == 0x000009, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_HasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_HasTag_ReturnValue_2) == 0x00000A, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_HasTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_BooleanOR_ReturnValue_1) == 0x00000C, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, Temp_byte_Variable) == 0x00000E, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, Temp_byte_Variable_1) == 0x00000F, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_GetIconInfoByTag_OutIcon) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_GetIconInfoByTag_OutIcon' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_GetIconInfoByTag_ReturnValue) == 0x000018, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_GetIconInfoByTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, Temp_bool_Variable) == 0x000019, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, K2Node_Select_Default) == 0x00001A, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, CallFunc_GetFirstMatchingTag_ReturnValue) == 0x00001C, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::CallFunc_GetFirstMatchingTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000024, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayEquipment::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayIconOverride
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride) == 0x000028, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride, Texture) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayIconOverride::Texture' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayInputTag
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag) == 0x000004, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag) == 0x000008, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag, Tag) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayInputTag::Tag' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayIsEquipmentItemComplete
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete final
{
public:
	bool                                          bIsComplete;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete, bIsComplete) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayIsEquipmentItemComplete::bIsComplete' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.DisplayStackCount
// 0x0028 (0x0028 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount final
{
public:
	int32                                         StackCount;                                        // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStackCount;                                     // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount) == 0x000028, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount, StackCount) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount::StackCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount, MaxStackCount) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount::MaxStackCount' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_DisplayStackCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry
// 0x0F70 (0x0F70 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffect                  K2Node_ComponentBoundEvent_ActiveEffect_1;         // 0x0008(0x0400)(ConstParm)
	struct FHWTrackedEffectData                   K2Node_ComponentBoundEvent_EffectData_1;           // 0x0408(0x0300)(ConstParm)
	struct FActiveGameplayEffect                  K2Node_ComponentBoundEvent_ActiveEffect;           // 0x0708(0x0400)(ConstParm)
	struct FHWTrackedEffectData                   K2Node_ComponentBoundEvent_EffectData;             // 0x0B08(0x0300)(ConstParm)
	TSoftObjectPtr<class UTexture2D>              K2Node_Event_OverrideTexture;                      // 0x0E08(0x0028)(ConstParm, UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0E30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0E31(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E32[0x2];                                      // 0x0E32(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0E34(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_E6C[0x4];                                      // 0x0E6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0E70(0x0078)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0EE8(0x0078)(ConstParm)
	bool                                          CallFunc_GetIsSwappingActive_ReturnValue;          // 0x0F60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F61[0x7];                                      // 0x0F61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0F68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry) == 0x000F70, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, EntryPoint) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_ComponentBoundEvent_ActiveEffect_1) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_ComponentBoundEvent_ActiveEffect_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_ComponentBoundEvent_EffectData_1) == 0x000408, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_ComponentBoundEvent_EffectData_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_ComponentBoundEvent_ActiveEffect) == 0x000708, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_ComponentBoundEvent_ActiveEffect' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_ComponentBoundEvent_EffectData) == 0x000B08, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_ComponentBoundEvent_EffectData' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_Event_OverrideTexture) == 0x000E08, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_Event_OverrideTexture' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000E30, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000E31, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_Event_MyGeometry) == 0x000E34, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_Event_MouseEvent_1) == 0x000E70, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, K2Node_Event_MouseEvent) == 0x000EE8, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, CallFunc_GetIsSwappingActive_ReturnValue) == 0x000F60, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::CallFunc_GetIsSwappingActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry, CallFunc_PlayAnimationForward_ReturnValue) == 0x000F68, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_ExecuteUbergraph_WBP_G_V2_GodIItemDisplayEntry::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.HandlePlayerInputTypeChanged
// 0x0002 (0x0002 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged) == 0x000002, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_HandlePlayerInputTypeChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.InitializeWidget
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget) == 0x000008, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_InitializeWidget::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.On_HitArea_Border_MouseButtonDown
// 0x0220 (0x0220 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown) == 0x000220, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown, MyGeometry) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown, MouseEvent) == 0x000038, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown, ReturnValue) == 0x0000B0, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.On_HitArea_Border_MouseButtonUp
// 0x0220 (0x0220 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp) == 0x000220, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp, MyGeometry) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp, MouseEvent) == 0x000038, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp, ReturnValue) == 0x0000B0, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_On_HitArea_Border_MouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.OnMouseEnter
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter) == 0x0000B0, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.OnMouseLeave
// 0x0078 (0x0078 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave) == 0x000078, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.PlayPhaseAnimation
// 0x0038 (0x0038 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation final
{
public:
	EHWUIAbilityFlowPhase                         PreviousPhase;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                PhaseWidget;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PhaseAnim;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoopAnimation;                                    // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       PhaseAnim_0;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation) == 0x000038, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, PreviousPhase) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::PreviousPhase' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, PhaseWidget) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::PhaseWidget' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, PhaseAnim) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::PhaseAnim' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, bLoopAnimation) == 0x000018, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, PhaseAnim_0) == 0x000020, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::PhaseAnim_0' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, CallFunc_SelectInt_ReturnValue) == 0x000028, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PlayPhaseAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.SetDisplayOrientation
// 0x0001 (0x0001 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation final
{
public:
	EHWOrientation                                InOrientation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation) == 0x000001, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation) == 0x000001, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation, InOrientation) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_SetDisplayOrientation::InOrientation' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.StopPhaseAnimation
// 0x0010 (0x0010 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation final
{
public:
	EHWUIAbilityFlowPhase                         PhaseAnimation;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation) == 0x000010, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation, PhaseAnimation) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation::PhaseAnimation' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_StopPhaseAnimation::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.Update Empty Glow
// 0x0018 (0x0018 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWEquipmentInstance*                   CallFunc_GetEquipmentInstance_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow) == 0x000018, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow, CallFunc_GetEquipmentInstance_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow::CallFunc_GetEquipmentInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_Update_Empty_Glow::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.UpdateActiveSheen
// 0x0018 (0x0018 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCooldownActive_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen) == 0x000018, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen, CallFunc_IsCooldownActive_ReturnValue) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateActiveSheen::CallFunc_IsCooldownActive_ReturnValue' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.UpdateGrayscale
// 0x0018 (0x0018 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCooldownActive_ReturnValue;             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale) == 0x000018, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_byte_Variable) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_byte_Variable_1) == 0x000001, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_bool_Variable) == 0x000002, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, Temp_bool_Variable_1) == 0x000005, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, CallFunc_IsCooldownActive_ReturnValue) == 0x000006, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::CallFunc_IsCooldownActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, K2Node_Select_Default) == 0x000010, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, K2Node_Select_Default_1) == 0x000011, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000014, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_UpdateGrayscale::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_G_V2_GodIItemDisplayEntry.WBP_G_V2_GodIItemDisplayEntry_C.BP_GetDesiredFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong size on WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_G_V2_GodIItemDisplayEntry_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");

}

