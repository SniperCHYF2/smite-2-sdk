#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PopupManager

#include "Basic.hpp"

#include "PopupManager_classes.hpp"
#include "PopupManager_parameters.hpp"


namespace SDK
{

// Function PopupManager.PopupManager_C.ButtonPressed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UPopupManager_C::ButtonPressed(class UWidget* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "ButtonPressed");

	Params::PopupManager_C_ButtonPressed Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UPopupManager_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.ExecuteUbergraph_PopupManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPopupManager_C::ExecuteUbergraph_PopupManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "ExecuteUbergraph_PopupManager");

	Params::PopupManager_C_ExecuteUbergraph_PopupManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.HandleCancelButtonClicked
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UPopupManager_C::HandleCancelButtonClicked(class UWidget* InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "HandleCancelButtonClicked");

	Params::PopupManager_C_HandleCancelButtonClicked Parms{};

	Parms.InIndex = InIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.HidePopup
// (Event, Protected, BlueprintEvent)

void UPopupManager_C::HidePopup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "HidePopup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.InitializeWidget
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPopupManager_C::InitializeWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "InitializeWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.InitializeWidgetNavigation
// (Event, Public, BlueprintEvent)

void UPopupManager_C::InitializeWidgetNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "InitializeWidgetNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.IsTopViewFromRH
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UPopupManager_C::IsTopViewFromRH()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "IsTopViewFromRH");

	Params::PopupManager_C_IsTopViewFromRH Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PopupManager.PopupManager_C.NavigateBack
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UPopupManager_C::NavigateBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "NavigateBack");

	Params::PopupManager_C_NavigateBack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PopupManager.PopupManager_C.OnHide
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UPopupManager_C::OnHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "OnHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UPopupManager_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "OnKeyDown");

	Params::PopupManager_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PopupManager.PopupManager_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGeometry&                 MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FKeyEvent&                 InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UPopupManager_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "OnKeyUp");

	Params::PopupManager_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PopupManager.PopupManager_C.OnShown
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UPopupManager_C::OnShown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "OnShown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PopupManager.PopupManager_C.SetupButtons
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FRHPopupButtonConfig>&    ButtonInfo                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UPopupManager_C::SetupButtons(TArray<struct FRHPopupButtonConfig>& ButtonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupButtons");

	Params::PopupManager_C_SetupButtons Parms{};

	Parms.ButtonInfo = std::move(ButtonInfo);

	UObject::ProcessEvent(Func, &Parms);

	ButtonInfo = std::move(Parms.ButtonInfo);
}


// Function PopupManager.PopupManager_C.SetupDescription
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      NewDescText                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UPopupManager_C::SetupDescription(const class FText& NewDescText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupDescription");

	Params::PopupManager_C_SetupDescription Parms{};

	Parms.NewDescText = std::move(NewDescText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.SetupHeader
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      NewHeaderText                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UPopupManager_C::SetupHeader(const class FText& NewHeaderText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupHeader");

	Params::PopupManager_C_SetupHeader Parms{};

	Parms.NewHeaderText = std::move(NewHeaderText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.SetupSubHeaderText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      NewSubHeaderText                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void UPopupManager_C::SetupSubHeaderText(const class FText& NewSubHeaderText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupSubHeaderText");

	Params::PopupManager_C_SetupSubHeaderText Parms{};

	Parms.NewSubHeaderText = std::move(NewSubHeaderText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.SetupTextEntry
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasTextEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FText&                      DefaultEntryText                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void UPopupManager_C::SetupTextEntry(bool HasTextEntry, const class FText& DefaultEntryText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupTextEntry");

	Params::PopupManager_C_SetupTextEntry Parms{};

	Parms.HasTextEntry = HasTextEntry;
	Parms.DefaultEntryText = std::move(DefaultEntryText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.SetupWarningText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      NewWarningText                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UPopupManager_C::SetupWarningText(const class FText& NewWarningText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "SetupWarningText");

	Params::PopupManager_C_SetupWarningText Parms{};

	Parms.NewWarningText = std::move(NewWarningText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.ShowPopup
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRHPopupConfig&            popupData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UPopupManager_C::ShowPopup(const struct FRHPopupConfig& popupData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "ShowPopup");

	Params::PopupManager_C_ShowPopup Parms{};

	Parms.popupData = std::move(popupData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.UpdateTopViewRoute
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsShowing                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPopupManager_C::UpdateTopViewRoute(bool bIsShowing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "UpdateTopViewRoute");

	Params::PopupManager_C_UpdateTopViewRoute Parms{};

	Parms.bIsShowing = bIsShowing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PopupManager.PopupManager_C.BP_GetDesiredFocusTarget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UPopupManager_C::BP_GetDesiredFocusTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PopupManager_C", "BP_GetDesiredFocusTarget");

	Params::PopupManager_C_BP_GetDesiredFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

