#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NewsRotatorButton

#include "Basic.hpp"

#include "RallyHereStart_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_NewsRotatorButton.WBP_NewsRotatorButton_C
// 0x0070 (0x0628 - 0x05B8)
class UWBP_NewsRotatorButton_C final : public URHWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OnClickAnimation;                                  // 0x05C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 EmptyPip;                                          // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                PipButton;                                         // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SelectedPip;                                       // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SelectedPipWrapper;                                // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Timer;                                             // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TimerBackground;                                   // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsActivePip;                                       // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ButtonIndex)> OnClicked;                                     // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ButtonIndex;                                       // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_614[0x4];                                      // 0x0614(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SFXHover;                                          // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFXClick;                                          // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__PipButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__PipButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__PipButton_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__PipButton_K2Node_ComponentBoundEvent_3_OnButtonPressedEvent__DelegateSignature();
	void ExecuteUbergraph_WBP_NewsRotatorButton(int32 EntryPoint);
	void PlayClickSFX();
	void PlayHoverSFX();
	void SetActiveButton(bool IsActive);
	void SetTimerPercent(double Timer_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_NewsRotatorButton_C">();
	}
	static class UWBP_NewsRotatorButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_NewsRotatorButton_C>();
	}
};
static_assert(alignof(UWBP_NewsRotatorButton_C) == 0x000008, "Wrong alignment on UWBP_NewsRotatorButton_C");
static_assert(sizeof(UWBP_NewsRotatorButton_C) == 0x000628, "Wrong size on UWBP_NewsRotatorButton_C");
static_assert(offsetof(UWBP_NewsRotatorButton_C, UberGraphFrame) == 0x0005B8, "Member 'UWBP_NewsRotatorButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, OnClickAnimation) == 0x0005C0, "Member 'UWBP_NewsRotatorButton_C::OnClickAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, EmptyPip) == 0x0005C8, "Member 'UWBP_NewsRotatorButton_C::EmptyPip' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, PipButton) == 0x0005D0, "Member 'UWBP_NewsRotatorButton_C::PipButton' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, SelectedPip) == 0x0005D8, "Member 'UWBP_NewsRotatorButton_C::SelectedPip' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, SelectedPipWrapper) == 0x0005E0, "Member 'UWBP_NewsRotatorButton_C::SelectedPipWrapper' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, Timer) == 0x0005E8, "Member 'UWBP_NewsRotatorButton_C::Timer' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, TimerBackground) == 0x0005F0, "Member 'UWBP_NewsRotatorButton_C::TimerBackground' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, IsActivePip) == 0x0005F8, "Member 'UWBP_NewsRotatorButton_C::IsActivePip' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, OnClicked) == 0x000600, "Member 'UWBP_NewsRotatorButton_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, ButtonIndex) == 0x000610, "Member 'UWBP_NewsRotatorButton_C::ButtonIndex' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, SFXHover) == 0x000618, "Member 'UWBP_NewsRotatorButton_C::SFXHover' has a wrong offset!");
static_assert(offsetof(UWBP_NewsRotatorButton_C, SFXClick) == 0x000620, "Member 'UWBP_NewsRotatorButton_C::SFXClick' has a wrong offset!");

}

