#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_DailyLoginRewardEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_C_DailyLoginRewardEntry.WBP_C_DailyLoginRewardEntry_C.DisplayAsItemReward
// 0x0090 (0x0090 - 0x0000)
struct WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward final
{
public:
	const class UPlatformInventoryItem*           Item;                                              // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Quantity;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0018)()
};
static_assert(alignof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward) == 0x000008, "Wrong alignment on WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward");
static_assert(sizeof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward) == 0x000090, "Wrong size on WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, Item) == 0x000000, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::Item' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, Quantity) == 0x000008, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::Quantity' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000010, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_C_DailyLoginRewardEntry_C_DisplayAsItemReward::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_C_DailyLoginRewardEntry.WBP_C_DailyLoginRewardEntry_C.SetDay
// 0x0138 (0x0138 - 0x0000)
struct WBP_C_DailyLoginRewardEntry_C_SetDay final
{
public:
	int32                                         DayNumber;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsClaimed;                                        // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCurrentDay;                                     // 0x0005(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 NewLocalVar;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0050)(HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0088(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x00C0(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_103[0x5];                                      // 0x0103(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0108(0x0018)()
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_2;                           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_DailyLoginRewardEntry_C_SetDay) == 0x000008, "Wrong alignment on WBP_C_DailyLoginRewardEntry_C_SetDay");
static_assert(sizeof(WBP_C_DailyLoginRewardEntry_C_SetDay) == 0x000138, "Wrong size on WBP_C_DailyLoginRewardEntry_C_SetDay");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, DayNumber) == 0x000000, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::DayNumber' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, bIsClaimed) == 0x000004, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::bIsClaimed' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, bIsCurrentDay) == 0x000005, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::bIsCurrentDay' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, NewLocalVar) == 0x000008, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_real_Variable) == 0x000010, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_real_Variable_1) == 0x000070, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_MakeArray_Array) == 0x000078, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, CallFunc_Format_ReturnValue) == 0x000088, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_bool_Variable) == 0x0000A0, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_text_Variable) == 0x0000A8, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_text_Variable_1) == 0x0000C0, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_bool_Variable_1) == 0x0000D8, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_object_Variable) == 0x0000E0, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_object_Variable_1) == 0x0000E8, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_bool_Variable_2) == 0x0000F0, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_object_Variable_2) == 0x0000F8, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_bool_Variable_3) == 0x000100, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_byte_Variable) == 0x000101, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_byte_Variable_1) == 0x000102, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_Select_Default) == 0x000108, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_Select_Default_1) == 0x000120, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_Select_Default_2) == 0x000128, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, Temp_bool_Variable_4) == 0x000130, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_Select_Default_3) == 0x000131, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_C_DailyLoginRewardEntry_C_SetDay, K2Node_Select_Default_4) == 0x000134, "Member 'WBP_C_DailyLoginRewardEntry_C_SetDay::K2Node_Select_Default_4' has a wrong offset!");

}

