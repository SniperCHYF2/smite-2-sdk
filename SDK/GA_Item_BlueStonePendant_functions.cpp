#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Item_BlueStonePendant

#include "Basic.hpp"

#include "GA_Item_BlueStonePendant_classes.hpp"
#include "GA_Item_BlueStonePendant_parameters.hpp"


namespace SDK
{

// Function GA_Item_BlueStonePendant.GA_Item_BlueStonePendant_C.ExecuteUbergraph_GA_Item_BlueStonePendant
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Item_BlueStonePendant_C::ExecuteUbergraph_GA_Item_BlueStonePendant(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Item_BlueStonePendant_C", "ExecuteUbergraph_GA_Item_BlueStonePendant");

	Params::GA_Item_BlueStonePendant_C_ExecuteUbergraph_GA_Item_BlueStonePendant Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Item_BlueStonePendant.GA_Item_BlueStonePendant_C.IsAbilityRefire
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UHWGameplayAbility_Enhanced*      Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsRefire                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Item_BlueStonePendant_C::IsAbilityRefire(class UHWGameplayAbility_Enhanced* Ability, bool* IsRefire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Item_BlueStonePendant_C", "IsAbilityRefire");

	Params::GA_Item_BlueStonePendant_C_IsAbilityRefire Parms{};

	Parms.Ability = Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRefire != nullptr)
		*IsRefire = Parms.IsRefire;
}


// Function GA_Item_BlueStonePendant.GA_Item_BlueStonePendant_C.IsAbilitySwap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UHWGameplayAbility_Enhanced*      Ability                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsAbilitySwap_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_Item_BlueStonePendant_C::IsAbilitySwap(class UHWGameplayAbility_Enhanced* Ability, bool* IsAbilitySwap_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Item_BlueStonePendant_C", "IsAbilitySwap");

	Params::GA_Item_BlueStonePendant_C_IsAbilitySwap Parms{};

	Parms.Ability = Ability;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAbilitySwap_0 != nullptr)
		*IsAbilitySwap_0 = Parms.IsAbilitySwap_0;
}


// Function GA_Item_BlueStonePendant.GA_Item_BlueStonePendant_C.OnOwnerDealtDamage
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DamageEventData                                        (BlueprintVisible, BlueprintReadOnly, Parm)

void UGA_Item_BlueStonePendant_C::OnOwnerDealtDamage(const struct FDamageEventData& DamageEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Item_BlueStonePendant_C", "OnOwnerDealtDamage");

	Params::GA_Item_BlueStonePendant_C_OnOwnerDealtDamage Parms{};

	Parms.DamageEventData = std::move(DamageEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_Item_BlueStonePendant.GA_Item_BlueStonePendant_C.SetupListeners
// (Event, Protected, BlueprintEvent)

void UGA_Item_BlueStonePendant_C::SetupListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_Item_BlueStonePendant_C", "SetupListeners");

	UObject::ProcessEvent(Func, nullptr);
}

}

