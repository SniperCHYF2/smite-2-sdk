#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RallyHereAPI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RallyHereAPI.ERHAPI_BackfillStyle
// NumValues: 0x0003
enum class ERHAPI_BackfillStyle : uint8
{
	TeamRequest                              = 0,
	Composition                              = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_ClientType
// NumValues: 0x000C
enum class ERHAPI_ClientType : uint8
{
	Unknown                                  = 0,
	Win                                      = 1,
	Mac                                      = 2,
	Xboxone                                  = 3,
	PS4                                      = 4,
	_Switch                                  = 5,
	Android                                  = 6,
	Ios                                      = 7,
	PS5                                      = 8,
	_Linux                                   = 9,
	Xsx                                      = 10,
	ERHAPI_MAX                               = 11,
};

// Enum RallyHereAPI.ERHAPI_CreateInventoryType
// NumValues: 0x0003
enum class ERHAPI_CreateInventoryType : uint8
{
	Persistent                               = 0,
	Transient                                = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_CrossplayInput
// NumValues: 0x0005
enum class ERHAPI_CrossplayInput : uint8
{
	Any                                      = 0,
	Kbm                                      = 1,
	Gamepad                                  = 2,
	Touch                                    = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_CrossplayPlatform
// NumValues: 0x0004
enum class ERHAPI_CrossplayPlatform : uint8
{
	Any                                      = 0,
	Xbox                                     = 1,
	Playstation                              = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_DeleteTicketReason
// NumValues: 0x0006
enum class ERHAPI_DeleteTicketReason : uint8
{
	Assigned                                 = 0,
	Backfilled                               = 1,
	LeftQueue                                = 2,
	Timeout                                  = 3,
	PartyChanged                             = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_DependenciesSchemasPortal
// NumValues: 0x0010
enum class ERHAPI_DependenciesSchemasPortal : uint8
{
	Anon                                     = 0,
	Amazon                                   = 1,
	Steam                                    = 2,
	Psn                                      = 3,
	Xboxlive                                 = 4,
	Basic                                    = 5,
	Google                                   = 6,
	Rallyhere                                = 7,
	Twitch                                   = 8,
	NintendoSwitch                           = 9,
	Apple                                    = 10,
	Nintendo                                 = 11,
	Legacyname                               = 12,
	Epic                                     = 13,
	NintendoPpid                             = 14,
	ERHAPI_MAX                               = 15,
};

// Enum RallyHereAPI.ERHAPI_Determiner
// NumValues: 0x0005
enum class ERHAPI_Determiner : uint8
{
	All                                      = 0,
	Any                                      = 1,
	One                                      = 2,
	None                                     = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_DeviceType
// NumValues: 0x0005
enum class ERHAPI_DeviceType : uint8
{
	Pc                                       = 0,
	XboxSeries                               = 1,
	XboxOne                                  = 2,
	Web                                      = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_EntitlementActionType
// NumValues: 0x0005
enum class ERHAPI_EntitlementActionType : uint8
{
	Grant                                    = 0,
	Refund                                   = 1,
	Chargeback                               = 2,
	ChargebackReversal                       = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_EntitlementEventStatus
// NumValues: 0x0006
enum class ERHAPI_EntitlementEventStatus : uint8
{
	Success                                  = 0,
	SkuNotFound                              = 1,
	NotImplemented                           = 2,
	PlayerNotFound                           = 3,
	BanFailed                                = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_EntitlementStatus
// NumValues: 0x0007
enum class ERHAPI_EntitlementStatus : uint8
{
	Unknown                                  = 0,
	Submitted                                = 1,
	Fulfilled                                = 2,
	Failed                                   = 3,
	PreviouslyApplied                        = 4,
	Skipped                                  = 5,
	ERHAPI_MAX                               = 6,
};

// Enum RallyHereAPI.ERHAPI_EntitlementType
// NumValues: 0x0004
enum class ERHAPI_EntitlementType : uint8
{
	Consumable                               = 0,
	Durable                                  = 1,
	DurableSingleUse                         = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_EntityType
// NumValues: 0x0003
enum class ERHAPI_EntityType : uint8
{
	Match                                    = 0,
	Unknown                                  = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_FastapicommonPlatformsPortal
// NumValues: 0x0025
enum class ERHAPI_FastapicommonPlatformsPortal : uint8
{
	Free                                     = 0,
	Sweat                                    = 1,
	Unknown                                  = 2,
	Standard                                 = 3,
	Anon                                     = 4,
	Kongregate                               = 5,
	Amazon                                   = 6,
	Steam                                    = 7,
	Tcls                                     = 8,
	LevelupLatam                             = 9,
	LevelupBra                               = 10,
	Psn                                      = 11,
	XboxLive                                 = 12,
	Basic                                    = 13,
	Facebook                                 = 14,
	Google                                   = 15,
	Rallyhere                                = 16,
	RivalsMobile                             = 17,
	Twitch                                   = 18,
	PaladinsStrike                           = 19,
	SmiteBlitz                               = 20,
	FacebookSmite                            = 21,
	FacebookPaladins                         = 22,
	FacebookHotg                             = 23,
	NintendoSwitch                           = 24,
	Tune                                     = 25,
	Apple                                    = 26,
	Discord                                  = 27,
	Nintendo                                 = 28,
	Legacyname                               = 29,
	Epic                                     = 30,
	Forte                                    = 31,
	Simulmedia                               = 32,
	Luna                                     = 33,
	GooglePlay                               = 34,
	NintendoPpid                             = 35,
	ERHAPI_MAX                               = 36,
};

// Enum RallyHereAPI.ERHAPI_FileType
// NumValues: 0x0003
enum class ERHAPI_FileType : uint8
{
	File                                     = 0,
	DeveloperFile                            = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_FriendshipStatus
// NumValues: 0x0006
enum class ERHAPI_FriendshipStatus : uint8
{
	None                                     = 0,
	Friends                                  = 1,
	FriendRequestSent                        = 2,
	FriendRequestPending                     = 3,
	FriendRequestDeclinedByOther             = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_GrantType
// NumValues: 0x0010
enum class ERHAPI_GrantType : uint8
{
	Anon                                     = 0,
	Google                                   = 1,
	Apple                                    = 2,
	Refresh                                  = 3,
	Epic                                     = 4,
	Xboxlive                                 = 5,
	PS4V1                                    = 6,
	PS4V3                                    = 7,
	PS5V3                                    = 8,
	Nintendo                                 = 9,
	NintendoSwitch                           = 10,
	Steam                                    = 11,
	Basic                                    = 12,
	Rallyhere                                = 13,
	ClientCredentials                        = 14,
	ERHAPI_MAX                               = 15,
};

// Enum RallyHereAPI.ERHAPI_GuideEntityType
// NumValues: 0x0002
enum class ERHAPI_GuideEntityType : uint8
{
	Player                                   = 0,
	ERHAPI_MAX                               = 1,
};

// Enum RallyHereAPI.ERHAPI_HostType
// NumValues: 0x0004
enum class ERHAPI_HostType : uint8
{
	Dedicated                                = 0,
	Player                                   = 1,
	Preallocated                             = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_Input
// NumValues: 0x0004
enum class ERHAPI_Input : uint8
{
	Kbm                                      = 0,
	Gamepad                                  = 1,
	Touch                                    = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_InstanceHealthStatus
// NumValues: 0x0005
enum class ERHAPI_InstanceHealthStatus : uint8
{
	Healthy                                  = 0,
	Unhealthy                                = 1,
	Degraded                                 = 2,
	Unknown                                  = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_InstanceJoinableStatus
// NumValues: 0x0007
enum class ERHAPI_InstanceJoinableStatus : uint8
{
	Requested                                = 0,
	Allocated                                = 1,
	Pending                                  = 2,
	Joinable                                 = 3,
	Unjoinable                               = 4,
	Closed                                   = 5,
	ERHAPI_MAX                               = 6,
};

// Enum RallyHereAPI.ERHAPI_IntraSessionPermissions
// NumValues: 0x0004
enum class ERHAPI_IntraSessionPermissions : uint8
{
	Invite                                   = 0,
	Kick                                     = 1,
	Move                                     = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_InventoryBucket
// NumValues: 0x0011
enum class ERHAPI_InventoryBucket : uint8
{
	Free                                     = 0,
	Sweat                                    = 1,
	None                                     = 2,
	Anon                                     = 3,
	Amazon                                   = 4,
	Steam                                    = 5,
	Psn                                      = 6,
	XboxLive                                 = 7,
	Google                                   = 8,
	Twitch                                   = 9,
	NintendoSwitch                           = 10,
	Apple                                    = 11,
	Nintendo                                 = 12,
	Epic                                     = 13,
	GooglePlay                               = 14,
	NintendoPpid                             = 15,
	ERHAPI_MAX                               = 16,
};

// Enum RallyHereAPI.ERHAPI_InventoryOperation
// NumValues: 0x0008
enum class ERHAPI_InventoryOperation : uint8
{
	Invalid                                  = 0,
	Add                                      = 1,
	Subtract                                 = 2,
	Set                                      = 3,
	CheckGreaterThanOrEqual                  = 4,
	CheckLessThan                            = 5,
	CheckGreaterThanOrEqualAndSubtract       = 6,
	ERHAPI_MAX                               = 7,
};

// Enum RallyHereAPI.ERHAPI_InventoryPlatform
// NumValues: 0x0011
enum class ERHAPI_InventoryPlatform : uint8
{
	Anon                                     = 0,
	Basic                                    = 1,
	XboxLive                                 = 2,
	Psn                                      = 3,
	NintendoNaid                             = 4,
	NintendoSwitch                           = 5,
	NintendoPpid                             = 6,
	Google                                   = 7,
	GooglePlay                               = 8,
	Apple                                    = 9,
	Epic                                     = 10,
	Steam                                    = 11,
	Amazon                                   = 12,
	Twitch                                   = 13,
	Rallyhere                                = 14,
	Legacyname                               = 15,
	ERHAPI_MAX                               = 16,
};

// Enum RallyHereAPI.ERHAPI_InventorySelector
// NumValues: 0x0007
enum class ERHAPI_InventorySelector : uint8
{
	Invalid                                  = 0,
	Own                                      = 1,
	Rent                                     = 2,
	RentTimeframeLocked                      = 3,
	OwnTransient                             = 4,
	InheritEntitlementInventory              = 5,
	ERHAPI_MAX                               = 6,
};

// Enum RallyHereAPI.ERHAPI_InventoryType
// NumValues: 0x0004
enum class ERHAPI_InventoryType : uint8
{
	Persistent                               = 0,
	Transient                                = 1,
	AlwaysOwned                              = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_InviteSource
// NumValues: 0x0004
enum class ERHAPI_InviteSource : uint8
{
	Backfill                                 = 0,
	Matchmaking                              = 1,
	Player                                   = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_ItemType
// NumValues: 0x0006
enum class ERHAPI_ItemType : uint8
{
	Unit                                     = 0,
	Recipe                                   = 1,
	RecipeWithPriceReduction                 = 2,
	Entitlement                              = 3,
	DynamicBundle                            = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_LeaderboardSortOrder
// NumValues: 0x0003
enum class ERHAPI_LeaderboardSortOrder : uint8
{
	Asc                                      = 0,
	Desc                                     = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_LeaderboardSource
// NumValues: 0x0003
enum class ERHAPI_LeaderboardSource : uint8
{
	Inventory                                = 0,
	Rank                                     = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_LinkAction
// NumValues: 0x0006
enum class ERHAPI_LinkAction : uint8
{
	Link                                     = 0,
	Unlink                                   = 1,
	NewPerson                                = 2,
	XprogEnable                              = 3,
	XprogDisable                             = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_MatchHostType
// NumValues: 0x0003
enum class ERHAPI_MatchHostType : uint8
{
	Dedicated                                = 0,
	Player                                   = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_MatchPlatform
// NumValues: 0x0011
enum class ERHAPI_MatchPlatform : uint8
{
	Anon                                     = 0,
	Basic                                    = 1,
	XboxLive                                 = 2,
	Psn                                      = 3,
	NintendoNaid                             = 4,
	NintendoSwitch                           = 5,
	NintendoPpid                             = 6,
	Google                                   = 7,
	GooglePlay                               = 8,
	Apple                                    = 9,
	Epic                                     = 10,
	Steam                                    = 11,
	Amazon                                   = 12,
	Twitch                                   = 13,
	Rallyhere                                = 14,
	Legacyname                               = 15,
	ERHAPI_MAX                               = 16,
};

// Enum RallyHereAPI.ERHAPI_MatchState
// NumValues: 0x0003
enum class ERHAPI_MatchState : uint8
{
	Pending                                  = 0,
	Closed                                   = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_MMRGroupingMethod
// NumValues: 0x0005
enum class ERHAPI_MMRGroupingMethod : uint8
{
	Worst                                    = 0,
	Best                                     = 1,
	AverageByVariance                        = 2,
	Average                                  = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_OAuthGrantType
// NumValues: 0x0002
enum class ERHAPI_OAuthGrantType : uint8
{
	ClientCredentials                        = 0,
	ERHAPI_MAX                               = 1,
};

// Enum RallyHereAPI.ERHAPI_OAuthPortal
// NumValues: 0x000A
enum class ERHAPI_OAuthPortal : uint8
{
	Google                                   = 0,
	Apple                                    = 1,
	Epic                                     = 2,
	Xbox                                     = 3,
	Psn                                      = 4,
	Nintendo                                 = 5,
	Steam                                    = 6,
	Amazon                                   = 7,
	Twitch                                   = 8,
	ERHAPI_MAX                               = 9,
};

// Enum RallyHereAPI.ERHAPI_OAuthTokenEchangeGrantType
// NumValues: 0x0002
enum class ERHAPI_OAuthTokenEchangeGrantType : uint8
{
	AuthorizationCode                        = 0,
	ERHAPI_MAX                               = 1,
};

// Enum RallyHereAPI.ERHAPI_OffsetReset
// NumValues: 0x0003
enum class ERHAPI_OffsetReset : uint8
{
	Latest                                   = 0,
	Earliest                                 = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_OnlineStatus
// NumValues: 0x0005
enum class ERHAPI_OnlineStatus : uint8
{
	Online                                   = 0,
	Away                                     = 1,
	Invisible                                = 2,
	Offline                                  = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_Operation
// NumValues: 0x0009
enum class ERHAPI_Operation : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	LessThan                                 = 2,
	LessThanEqual                            = 3,
	GreaterThan                              = 4,
	GreaterThanEqual                         = 5,
	IncludedInSet                            = 6,
	ExcludedFromSet                          = 7,
	ERHAPI_MAX                               = 8,
};

// Enum RallyHereAPI.ERHAPI_OpportunityAbortReason
// NumValues: 0x0003
enum class ERHAPI_OpportunityAbortReason : uint8
{
	Cancel                                   = 0,
	Other                                    = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_OpportunityState
// NumValues: 0x0004
enum class ERHAPI_OpportunityState : uint8
{
	Start                                    = 0,
	Complete                                 = 1,
	Abort                                    = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_Platform
// NumValues: 0x0011
enum class ERHAPI_Platform : uint8
{
	Anon                                     = 0,
	Basic                                    = 1,
	XboxLive                                 = 2,
	Psn                                      = 3,
	NintendoNaid                             = 4,
	NintendoSwitch                           = 5,
	NintendoPpid                             = 6,
	Google                                   = 7,
	GooglePlay                               = 8,
	Apple                                    = 9,
	Epic                                     = 10,
	Steam                                    = 11,
	Amazon                                   = 12,
	Twitch                                   = 13,
	Rallyhere                                = 14,
	Legacyname                               = 15,
	ERHAPI_MAX                               = 16,
};

// Enum RallyHereAPI.ERHAPI_PlatformID
// NumValues: 0x000D
enum class ERHAPI_PlatformID : uint8
{
	Anon                                     = 0,
	Amazon                                   = 1,
	Steam                                    = 2,
	Psn                                      = 3,
	XboxLive                                 = 4,
	Basic                                    = 5,
	Google                                   = 6,
	Twitch                                   = 7,
	NintendoSwitch                           = 8,
	Apple                                    = 9,
	Nintendo                                 = 10,
	Epic                                     = 11,
	ERHAPI_MAX                               = 12,
};

// Enum RallyHereAPI.ERHAPI_PlatformRegion
// NumValues: 0x0004
enum class ERHAPI_PlatformRegion : uint8
{
	Unknown                                  = 0,
	Na                                       = 1,
	Eu                                       = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_PlayerListType
// NumValues: 0x0003
enum class ERHAPI_PlayerListType : uint8
{
	Global                                   = 0,
	Friends                                  = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_PlayerOrderDetailType
// NumValues: 0x0007
enum class ERHAPI_PlayerOrderDetailType : uint8
{
	Unknown                                  = 0,
	InventoryChange                          = 1,
	DynamicBundleLti                         = 2,
	ClaimPromoCode                           = 3,
	ReturnPromoCode                          = 4,
	NewOrder                                 = 5,
	ERHAPI_MAX                               = 6,
};

// Enum RallyHereAPI.ERHAPI_PlayerOrderEntryResult
// NumValues: 0x0033
enum class ERHAPI_PlayerOrderEntryResult : uint8
{
	Success                                  = 0,
	InternalError                            = 1,
	InvalidEntryType                         = 2,
	NotAllowedOnCurrentPortal                = 3,
	LootNotFound                             = 4,
	LootNotActive                            = 5,
	PriceItemNotFound                        = 6,
	PriceNotAllowed                          = 7,
	DynamicBundleInvalid                     = 8,
	TooManyRequests                          = 9,
	PriceDoesNotMatch                        = 10,
	VendorVersionDoesNotMatch                = 11,
	DynamicBundleLtisDoNotMatch              = 12,
	CannotAffordPrice                        = 13,
	CannotAffordCoupon                       = 14,
	FailedToSpendPrice                       = 15,
	FailedToSpendCoupon                      = 16,
	LootNotForSaleWithPriceItem              = 17,
	CouponsDisabled                          = 18,
	CouponItemNotFound                       = 19,
	CouponItemNotActive                      = 20,
	CouponItemNotApplicableForQuantity       = 21,
	CouponItemNotApplicableForPriceItem      = 22,
	CouponItemNotApplicableForLoot           = 23,
	QuantityNotAllowed                       = 24,
	PromotionExpired                         = 25,
	PromotionNotFound                        = 26,
	PromotionNoUsesLeft                      = 27,
	PromotionNotAvailable                    = 28,
	PromotionClaimedAlready                  = 29,
	DynamicBundlesNotAvailable               = 30,
	TransientSingleLootAlreadyApplied        = 31,
	LootNotFillableFromClient                = 32,
	PermissionDenied                         = 33,
	FailedToFindAnySubLoot                   = 34,
	FailedToFillAnySubLoot                   = 35,
	FailedToFillAllRandom                    = 36,
	CannotMeetLootBlocker                    = 37,
	CannotMeetLootRequired                   = 38,
	FailedToConsumeLootRequired              = 39,
	FailedToSubmitNewOrder                   = 40,
	FailedToModifyInventory                  = 41,
	InventoryNotFound                        = 42,
	ItemNotFound                             = 43,
	ItemNotActive                            = 44,
	TooManyInvCustomAttributes               = 45,
	AlwaysOwnedInventoryCannotBeModified     = 46,
	AvailableUntilIsInPast                   = 47,
	Rollback                                 = 48,
	NotStarted                               = 49,
	ERHAPI_MAX                               = 50,
};

// Enum RallyHereAPI.ERHAPI_PlayerOrderEntryType
// NumValues: 0x000D
enum class ERHAPI_PlayerOrderEntryType : uint8
{
	FillLoot                                 = 0,
	PurchaseLoot                             = 1,
	PurchaseDynamicBundle                    = 2,
	PromotionCode                            = 3,
	FillLootSingleTransient                  = 4,
	FillEntitledLoot                         = 5,
	CreateNewPersistentInventory             = 6,
	UpdateExistingPersistentInventory        = 7,
	CreateNewTransientInventory              = 8,
	UpdateExistingTransientInventory         = 9,
	UpdateInventory                          = 10,
	CustomLoot                               = 11,
	ERHAPI_MAX                               = 12,
};

// Enum RallyHereAPI.ERHAPI_PlayersToValidate
// NumValues: 0x0004
enum class ERHAPI_PlayersToValidate : uint8
{
	Leader                                   = 0,
	AllMembers                               = 1,
	AnyMember                                = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_PlayerVisibility
// NumValues: 0x0005
enum class ERHAPI_PlayerVisibility : uint8
{
	All                                      = 0,
	Team                                     = 1,
	Self                                     = 2,
	None                                     = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_Portal
// NumValues: 0x0025
enum class ERHAPI_Portal : uint8
{
	Free                                     = 0,
	Sweat                                    = 1,
	Unknown                                  = 2,
	Standard                                 = 3,
	Anon                                     = 4,
	Kongregate                               = 5,
	Amazon                                   = 6,
	Steam                                    = 7,
	Tcls                                     = 8,
	LevelupLatam                             = 9,
	LevelupBra                               = 10,
	Psn                                      = 11,
	XboxLive                                 = 12,
	Basic                                    = 13,
	Facebook                                 = 14,
	Google                                   = 15,
	UNUSED14                                 = 16,
	RivalsMobile                             = 17,
	Twitch                                   = 18,
	PaladinsStrike                           = 19,
	SmiteBlitz                               = 20,
	FacebookSmite                            = 21,
	FacebookPaladins                         = 22,
	FacebookHotg                             = 23,
	NintendoSwitch                           = 24,
	Tune                                     = 25,
	Apple                                    = 26,
	Discord                                  = 27,
	Nintendo                                 = 28,
	UNUSED27                                 = 29,
	Epic                                     = 30,
	Forte                                    = 31,
	Simulmedia                               = 32,
	Luna                                     = 33,
	GooglePlay                               = 34,
	NintendoPpid                             = 35,
	ERHAPI_MAX                               = 36,
};

// Enum RallyHereAPI.ERHAPI_PortalTokenDetailsGrantType
// NumValues: 0x0004
enum class ERHAPI_PortalTokenDetailsGrantType : uint8
{
	PS4V1                                    = 0,
	PS4V3                                    = 1,
	PS5V3                                    = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_ProfileJoinMode
// NumValues: 0x0004
enum class ERHAPI_ProfileJoinMode : uint8
{
	Normal                                   = 0,
	Backfill                                 = 1,
	CreatedBefore                            = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_QuantityType
// NumValues: 0x0003
enum class ERHAPI_QuantityType : uint8
{
	Relative                                 = 0,
	Absolute                                 = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_JsonValueType
// NumValues: 0x0008
enum class ERHAPI_JsonValueType : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	ERHAPI_MAX                               = 7,
};

// Enum RallyHereAPI.ERHAPI_ReportReason
// NumValues: 0x000B
enum class ERHAPI_ReportReason : uint8
{
	Cheating                                 = 0,
	HateSpeech                               = 1,
	Harassment                               = 2,
	RealLifeThreat                           = 3,
	Teaming                                  = 4,
	IntentionalFeeding                       = 5,
	StreamSniping                            = 6,
	Afk                                      = 7,
	DidntPlayAssignedRole                    = 8,
	Other                                    = 9,
	ERHAPI_MAX                               = 10,
};

// Enum RallyHereAPI.ERHAPI_RestrictionIssuerType
// NumValues: 0x0008
enum class ERHAPI_RestrictionIssuerType : uint8
{
	Support                                  = 0,
	Gm                                       = 1,
	Admin                                    = 2,
	Anticheat                                = 3,
	PunishSystem                             = 4,
	Guardian                                 = 5,
	Shop                                     = 6,
	ERHAPI_MAX                               = 7,
};

// Enum RallyHereAPI.ERHAPI_RestrictionReasonCode
// NumValues: 0x0012
enum class ERHAPI_RestrictionReasonCode : uint8
{
	CheatingAutodetected                     = 0,
	SpeedhackAutodetect                      = 1,
	Other                                    = 2,
	CheatingObserved                         = 3,
	CheatingReportedByPlayer                 = 4,
	Threats                                  = 5,
	Language                                 = 6,
	Griefing                                 = 7,
	Fraud                                    = 8,
	RevokeFailed                             = 9,
	Unknown                                  = 10,
	Guardian                                 = 11,
	IssuerProcess                            = 12,
	AccountMigration                         = 13,
	UserRequest                              = 14,
	Maintenance                              = 15,
	PendingDeletion                          = 16,
	ERHAPI_MAX                               = 17,
};

// Enum RallyHereAPI.ERHAPI_RestrictionType
// NumValues: 0x0005
enum class ERHAPI_RestrictionType : uint8
{
	AccountBan                               = 0,
	AccountLockout                           = 1,
	AccountPendingDeletion                   = 2,
	AccountDenyAuth                          = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_RoleAuthBypass
// NumValues: 0x0004
enum class ERHAPI_RoleAuthBypass : uint8
{
	None                                     = 0,
	Limited                                  = 1,
	Locked                                   = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereAPI.ERHAPI_RuleType
// NumValues: 0x0005
enum class ERHAPI_RuleType : uint8
{
	Inventory                                = 0,
	InventoryLevel                           = 1,
	JoiningSessionSize                       = 2,
	RegionList                               = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_SearchFavoriteGuideSort
// NumValues: 0x0006
enum class ERHAPI_SearchFavoriteGuideSort : uint8
{
	Created                                  = 0,
	Modified                                 = 1,
	Upvotes                                  = 2,
	Promoted                                 = 3,
	FavoritedAt                              = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_SearchGuideSort
// NumValues: 0x0005
enum class ERHAPI_SearchGuideSort : uint8
{
	Created                                  = 0,
	Modified                                 = 1,
	Upvotes                                  = 2,
	Promoted                                 = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_SessionPlayerStatus
// NumValues: 0x0005
enum class ERHAPI_SessionPlayerStatus : uint8
{
	Leader                                   = 0,
	Member                                   = 1,
	Invited                                  = 2,
	Reserved                                 = 3,
	ERHAPI_MAX                               = 4,
};

// Enum RallyHereAPI.ERHAPI_SortDirection
// NumValues: 0x0003
enum class ERHAPI_SortDirection : uint8
{
	Asc                                      = 0,
	Desc                                     = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_SortOrder
// NumValues: 0x0003
enum class ERHAPI_SortOrder : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_Source
// NumValues: 0x003F
enum class ERHAPI_Source : uint8
{
	Unknown                                  = 0,
	WebOrderRepair                           = 1,
	InGame                                   = 2,
	WebSite                                  = 3,
	NoSale                                   = 4,
	Support                                  = 5,
	Activity                                 = 6,
	Refund                                   = 7,
	System                                   = 8,
	Rewards                                  = 9,
	Esports                                  = 10,
	Treasure                                 = 11,
	Console                                  = 12,
	Odyssey                                  = 13,
	Steam                                    = 14,
	_Return                                  = 15,
	JsonGate                                 = 16,
	SendGift                                 = 17,
	ReceiveGift                              = 18,
	SteamDlc                                 = 19,
	TwitchMilestone                          = 20,
	TwitchPrime                              = 21,
	Psn                                      = 22,
	Xbox                                     = 23,
	PtsGrant                                 = 24,
	Instance                                 = 25,
	AccountTransfer                          = 26,
	Promocode                                = 27,
	TriumphSystem                            = 28,
	LoginGrant                               = 29,
	EomUncapped                              = 30,
	EomCapped                                = 31,
	FacebookDrop                             = 32,
	DatabaseScript                           = 33,
	AccountLinking                           = 34,
	Clan                                     = 35,
	Conversion                               = 36,
	Apple                                    = 37,
	Google                                   = 38,
	GooglePlay                               = 39,
	PortalDurable                            = 40,
	PartnerAchievement                       = 41,
	MixerDrop                                = 42,
	Nintendo                                 = 43,
	StreamViewingProgress                    = 44,
	Discord                                  = 45,
	FirstLoginGrant                          = 46,
	TwitchFuel                               = 47,
	DiscordDlc                               = 48,
	Netease                                  = 49,
	EpicGames                                = 50,
	Forte                                    = 51,
	Facebook                                 = 52,
	Hirez                                    = 53,
	DailyReward                              = 54,
	AddAccountEmailReward                    = 55,
	ClientClaim                              = 56,
	Client                                   = 57,
	Entitlements                             = 58,
	Amazon                                   = 59,
	Simulmedia                               = 60,
	Luna                                     = 61,
	ERHAPI_MAX                               = 62,
};

// Enum RallyHereAPI.ERHAPI_TeamOverflowAction
// NumValues: 0x0006
enum class ERHAPI_TeamOverflowAction : uint8
{
	Fail                                     = 0,
	AllowOverflow                            = 1,
	PartialWithOverflow                      = 2,
	PartialWithoutOverflow                   = 3,
	Overfill                                 = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_VendorType
// NumValues: 0x0003
enum class ERHAPI_VendorType : uint8
{
	Recipe                                   = 0,
	RandomlySampled                          = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_VivoxSessionActionSingle
// NumValues: 0x0006
enum class ERHAPI_VivoxSessionActionSingle : uint8
{
	Join                                     = 0,
	JoinMuted                                = 1,
	Kick                                     = 2,
	Mute                                     = 3,
	Transcribe                               = 4,
	ERHAPI_MAX                               = 5,
};

// Enum RallyHereAPI.ERHAPI_VoipSessionType
// NumValues: 0x0003
enum class ERHAPI_VoipSessionType : uint8
{
	Session                                  = 0,
	Team                                     = 1,
	ERHAPI_MAX                               = 2,
};

// Enum RallyHereAPI.ERHAPI_XpQuantityTransform
// NumValues: 0x0005
enum class ERHAPI_XpQuantityTransform : uint8
{
	None                                     = 0,
	FromCurrentXpToTargetAdditionalLevelMinXp = 1,
	FromCurrentLevelMinXpToTargetAdditionalLevelMinXp = 2,
	FromZeroToTargetExactLevelMinXp          = 3,
	ERHAPI_MAX                               = 4,
};

// ScriptStruct RallyHereAPI.RHAPI_Model
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FRHAPI_Model
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Model) == 0x000008, "Wrong alignment on FRHAPI_Model");
static_assert(sizeof(FRHAPI_Model) == 0x000008, "Wrong size on FRHAPI_Model");

// ScriptStruct RallyHereAPI.RHAPI_LocationInner
// 0x0000 (0x0008 - 0x0008)
struct FRHAPI_LocationInner final : public FRHAPI_Model
{
};
static_assert(alignof(FRHAPI_LocationInner) == 0x000008, "Wrong alignment on FRHAPI_LocationInner");
static_assert(sizeof(FRHAPI_LocationInner) == 0x000008, "Wrong size on FRHAPI_LocationInner");

// ScriptStruct RallyHereAPI.RHAPI_ValidationError
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_ValidationError final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_LocationInner>           Loc;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_ValidationError) == 0x000008, "Wrong alignment on FRHAPI_ValidationError");
static_assert(sizeof(FRHAPI_ValidationError) == 0x000038, "Wrong size on FRHAPI_ValidationError");
static_assert(offsetof(FRHAPI_ValidationError, Loc) == 0x000008, "Member 'FRHAPI_ValidationError::Loc' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidationError, Msg) == 0x000018, "Member 'FRHAPI_ValidationError::Msg' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidationError, Type) == 0x000028, "Member 'FRHAPI_ValidationError::Type' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchInstance
// 0x0088 (0x0090 - 0x0008)
struct FRHAPI_MatchInstance final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceRequestTemplateId_Optional;                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplateId_IsSet;                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplateId_IsNull;                  // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map_Optional;                                      // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Map_IsSet;                                         // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Map_IsNull;                                        // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchHostType                          HostType_Optional;                                 // 0x008A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostType_IsSet;                                    // 0x008B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostType_IsNull;                                   // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchInstance) == 0x000008, "Wrong alignment on FRHAPI_MatchInstance");
static_assert(sizeof(FRHAPI_MatchInstance) == 0x000090, "Wrong size on FRHAPI_MatchInstance");
static_assert(offsetof(FRHAPI_MatchInstance, InstanceId) == 0x000008, "Member 'FRHAPI_MatchInstance::InstanceId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostPlayerUuid_Optional) == 0x000018, "Member 'FRHAPI_MatchInstance::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostPlayerUuid_IsSet) == 0x000028, "Member 'FRHAPI_MatchInstance::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostPlayerUuid_IsNull) == 0x000029, "Member 'FRHAPI_MatchInstance::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, RegionId_Optional) == 0x000030, "Member 'FRHAPI_MatchInstance::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, RegionId_IsSet) == 0x000040, "Member 'FRHAPI_MatchInstance::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, RegionId_IsNull) == 0x000041, "Member 'FRHAPI_MatchInstance::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, InstanceRequestTemplateId_Optional) == 0x000048, "Member 'FRHAPI_MatchInstance::InstanceRequestTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, InstanceRequestTemplateId_IsSet) == 0x000058, "Member 'FRHAPI_MatchInstance::InstanceRequestTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, InstanceRequestTemplateId_IsNull) == 0x000059, "Member 'FRHAPI_MatchInstance::InstanceRequestTemplateId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, Map_Optional) == 0x000060, "Member 'FRHAPI_MatchInstance::Map_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, Map_IsSet) == 0x000070, "Member 'FRHAPI_MatchInstance::Map_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, Map_IsNull) == 0x000071, "Member 'FRHAPI_MatchInstance::Map_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, GameMode_Optional) == 0x000078, "Member 'FRHAPI_MatchInstance::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, GameMode_IsSet) == 0x000088, "Member 'FRHAPI_MatchInstance::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, GameMode_IsNull) == 0x000089, "Member 'FRHAPI_MatchInstance::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostType_Optional) == 0x00008A, "Member 'FRHAPI_MatchInstance::HostType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostType_IsSet) == 0x00008B, "Member 'FRHAPI_MatchInstance::HostType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInstance, HostType_IsNull) == 0x00008C, "Member 'FRHAPI_MatchInstance::HostType_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankRankData
// 0x0060 (0x0068 - 0x0008)
struct FRHAPI_RankRankData final : public FRHAPI_Model
{
public:
	float                                         Mu;                                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sigma;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RankRankData) == 0x000008, "Wrong alignment on FRHAPI_RankRankData");
static_assert(sizeof(FRHAPI_RankRankData) == 0x000068, "Wrong size on FRHAPI_RankRankData");
static_assert(offsetof(FRHAPI_RankRankData, Mu) == 0x000008, "Member 'FRHAPI_RankRankData::Mu' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankRankData, Sigma) == 0x00000C, "Member 'FRHAPI_RankRankData::Sigma' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankRankData, CustomData_Optional) == 0x000010, "Member 'FRHAPI_RankRankData::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankRankData, CustomData_IsSet) == 0x000060, "Member 'FRHAPI_RankRankData::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CalculatedRank
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_CalculatedRank final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_RankRankData                    Rank;                                              // 0x0018(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SecondsInMatch;                                    // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CalculatedRank) == 0x000008, "Wrong alignment on FRHAPI_CalculatedRank");
static_assert(sizeof(FRHAPI_CalculatedRank) == 0x000088, "Wrong size on FRHAPI_CalculatedRank");
static_assert(offsetof(FRHAPI_CalculatedRank, PlayerUuid) == 0x000008, "Member 'FRHAPI_CalculatedRank::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculatedRank, Rank) == 0x000018, "Member 'FRHAPI_CalculatedRank::Rank' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculatedRank, SecondsInMatch) == 0x000080, "Member 'FRHAPI_CalculatedRank::SecondsInMatch' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankedTeam
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_RankedTeam final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_CalculatedRank>          Players;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TeamRank;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RankedTeam) == 0x000008, "Wrong alignment on FRHAPI_RankedTeam");
static_assert(sizeof(FRHAPI_RankedTeam) == 0x000020, "Wrong size on FRHAPI_RankedTeam");
static_assert(offsetof(FRHAPI_RankedTeam, Players) == 0x000008, "Member 'FRHAPI_RankedTeam::Players' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankedTeam, TeamRank) == 0x000018, "Member 'FRHAPI_RankedTeam::TeamRank' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankUpdateRequest
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_RankUpdateRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RankId;                                            // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchLengthSeconds;                                // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_RankedTeam>              Teams;                                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RankUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_RankUpdateRequest");
static_assert(sizeof(FRHAPI_RankUpdateRequest) == 0x000038, "Wrong size on FRHAPI_RankUpdateRequest");
static_assert(offsetof(FRHAPI_RankUpdateRequest, InstanceId_Optional) == 0x000008, "Member 'FRHAPI_RankUpdateRequest::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequest, InstanceId_IsSet) == 0x000018, "Member 'FRHAPI_RankUpdateRequest::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequest, RankId) == 0x00001C, "Member 'FRHAPI_RankUpdateRequest::RankId' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequest, MatchLengthSeconds) == 0x000020, "Member 'FRHAPI_RankUpdateRequest::MatchLengthSeconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequest, Teams) == 0x000028, "Member 'FRHAPI_RankUpdateRequest::Teams' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchTimelineProperties
// 0x0500 (0x0508 - 0x0008)
struct FRHAPI_MatchTimelineProperties final : public FRHAPI_Model
{
public:
	int32                                         Int1_Optional;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int1_IsSet;                                        // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int1_IsNull;                                       // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int2_Optional;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int2_IsSet;                                        // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int2_IsNull;                                       // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int3_Optional;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int3_IsSet;                                        // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int3_IsNull;                                       // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int4_Optional;                                     // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int4_IsSet;                                        // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int4_IsNull;                                       // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int5_Optional;                                     // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int5_IsSet;                                        // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int5_IsNull;                                       // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int6_Optional;                                     // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int6_IsSet;                                        // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int6_IsNull;                                       // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int7_Optional;                                     // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int7_IsSet;                                        // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int7_IsNull;                                       // 0x003D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int8_Optional;                                     // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int8_IsSet;                                        // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int8_IsNull;                                       // 0x0045(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int9_Optional;                                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int9_IsSet;                                        // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int9_IsNull;                                       // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int10_Optional;                                    // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int10_IsSet;                                       // 0x0054(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int10_IsNull;                                      // 0x0055(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int11_Optional;                                    // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int11_IsSet;                                       // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int11_IsNull;                                      // 0x005D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int12_Optional;                                    // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int12_IsSet;                                       // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int12_IsNull;                                      // 0x0065(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int13_Optional;                                    // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int13_IsSet;                                       // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int13_IsNull;                                      // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int14_Optional;                                    // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int14_IsSet;                                       // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int14_IsNull;                                      // 0x0075(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int15_Optional;                                    // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int15_IsSet;                                       // 0x007C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int15_IsNull;                                      // 0x007D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int16_Optional;                                    // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int16_IsSet;                                       // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int16_IsNull;                                      // 0x0085(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int17_Optional;                                    // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int17_IsSet;                                       // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int17_IsNull;                                      // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int18_Optional;                                    // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int18_IsSet;                                       // 0x0094(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int18_IsNull;                                      // 0x0095(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_96[0x2];                                       // 0x0096(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int19_Optional;                                    // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int19_IsSet;                                       // 0x009C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int19_IsNull;                                      // 0x009D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int20_Optional;                                    // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int20_IsSet;                                       // 0x00A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int20_IsNull;                                      // 0x00A5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int21_Optional;                                    // 0x00A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int21_IsSet;                                       // 0x00AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int21_IsNull;                                      // 0x00AD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int22_Optional;                                    // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int22_IsSet;                                       // 0x00B4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int22_IsNull;                                      // 0x00B5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int23_Optional;                                    // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int23_IsSet;                                       // 0x00BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int23_IsNull;                                      // 0x00BD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int24_Optional;                                    // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int24_IsSet;                                       // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int24_IsNull;                                      // 0x00C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int25_Optional;                                    // 0x00C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int25_IsSet;                                       // 0x00CC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int25_IsNull;                                      // 0x00CD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int26_Optional;                                    // 0x00D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int26_IsSet;                                       // 0x00D4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int26_IsNull;                                      // 0x00D5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int27_Optional;                                    // 0x00D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int27_IsSet;                                       // 0x00DC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int27_IsNull;                                      // 0x00DD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE[0x2];                                       // 0x00DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int28_Optional;                                    // 0x00E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int28_IsSet;                                       // 0x00E4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int28_IsNull;                                      // 0x00E5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6[0x2];                                       // 0x00E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int29_Optional;                                    // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int29_IsSet;                                       // 0x00EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int29_IsNull;                                      // 0x00ED(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE[0x2];                                       // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int30_Optional;                                    // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int30_IsSet;                                       // 0x00F4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int30_IsNull;                                      // 0x00F5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int31_Optional;                                    // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int31_IsSet;                                       // 0x00FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int31_IsNull;                                      // 0x00FD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE[0x2];                                       // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Int32_Optional;                                    // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int32_IsSet;                                       // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Int32_IsNull;                                      // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str1_Optional;                                     // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str1_IsSet;                                        // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str1_IsNull;                                       // 0x0119(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str2_Optional;                                     // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str2_IsSet;                                        // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str2_IsNull;                                       // 0x0131(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str3_Optional;                                     // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str3_IsSet;                                        // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str3_IsNull;                                       // 0x0149(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str4_Optional;                                     // 0x0150(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str4_IsSet;                                        // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str4_IsNull;                                       // 0x0161(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str5_Optional;                                     // 0x0168(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str5_IsSet;                                        // 0x0178(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str5_IsNull;                                       // 0x0179(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str6_Optional;                                     // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str6_IsSet;                                        // 0x0190(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str6_IsNull;                                       // 0x0191(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str7_Optional;                                     // 0x0198(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str7_IsSet;                                        // 0x01A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str7_IsNull;                                       // 0x01A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA[0x6];                                      // 0x01AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str8_Optional;                                     // 0x01B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str8_IsSet;                                        // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str8_IsNull;                                       // 0x01C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str9_Optional;                                     // 0x01C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str9_IsSet;                                        // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str9_IsNull;                                       // 0x01D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA[0x6];                                      // 0x01DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str10_Optional;                                    // 0x01E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str10_IsSet;                                       // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str10_IsNull;                                      // 0x01F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str11_Optional;                                    // 0x01F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str11_IsSet;                                       // 0x0208(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str11_IsNull;                                      // 0x0209(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str12_Optional;                                    // 0x0210(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str12_IsSet;                                       // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str12_IsNull;                                      // 0x0221(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str13_Optional;                                    // 0x0228(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str13_IsSet;                                       // 0x0238(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str13_IsNull;                                      // 0x0239(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str14_Optional;                                    // 0x0240(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str14_IsSet;                                       // 0x0250(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str14_IsNull;                                      // 0x0251(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str15_Optional;                                    // 0x0258(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str15_IsSet;                                       // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str15_IsNull;                                      // 0x0269(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str16_Optional;                                    // 0x0270(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str16_IsSet;                                       // 0x0280(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str16_IsNull;                                      // 0x0281(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str17_Optional;                                    // 0x0288(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str17_IsSet;                                       // 0x0298(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str17_IsNull;                                      // 0x0299(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29A[0x6];                                      // 0x029A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str18_Optional;                                    // 0x02A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str18_IsSet;                                       // 0x02B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str18_IsNull;                                      // 0x02B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str19_Optional;                                    // 0x02B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str19_IsSet;                                       // 0x02C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str19_IsNull;                                      // 0x02C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str20_Optional;                                    // 0x02D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str20_IsSet;                                       // 0x02E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str20_IsNull;                                      // 0x02E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str21_Optional;                                    // 0x02E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str21_IsSet;                                       // 0x02F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str21_IsNull;                                      // 0x02F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str22_Optional;                                    // 0x0300(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str22_IsSet;                                       // 0x0310(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str22_IsNull;                                      // 0x0311(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str23_Optional;                                    // 0x0318(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str23_IsSet;                                       // 0x0328(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str23_IsNull;                                      // 0x0329(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str24_Optional;                                    // 0x0330(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str24_IsSet;                                       // 0x0340(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str24_IsNull;                                      // 0x0341(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str25_Optional;                                    // 0x0348(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str25_IsSet;                                       // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str25_IsNull;                                      // 0x0359(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str26_Optional;                                    // 0x0360(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str26_IsSet;                                       // 0x0370(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str26_IsNull;                                      // 0x0371(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str27_Optional;                                    // 0x0378(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str27_IsSet;                                       // 0x0388(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str27_IsNull;                                      // 0x0389(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str28_Optional;                                    // 0x0390(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str28_IsSet;                                       // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str28_IsNull;                                      // 0x03A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str29_Optional;                                    // 0x03A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str29_IsSet;                                       // 0x03B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str29_IsNull;                                      // 0x03B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str30_Optional;                                    // 0x03C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str30_IsSet;                                       // 0x03D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str30_IsNull;                                      // 0x03D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str31_Optional;                                    // 0x03D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str31_IsSet;                                       // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str31_IsNull;                                      // 0x03E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str32_Optional;                                    // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str32_IsSet;                                       // 0x0400(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Str32_IsNull;                                      // 0x0401(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x2];                                      // 0x0402(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float1_Optional;                                   // 0x0404(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float1_IsSet;                                      // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float1_IsNull;                                     // 0x0409(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40A[0x2];                                      // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float2_Optional;                                   // 0x040C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float2_IsSet;                                      // 0x0410(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float2_IsNull;                                     // 0x0411(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float3_Optional;                                   // 0x0414(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float3_IsSet;                                      // 0x0418(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float3_IsNull;                                     // 0x0419(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x2];                                      // 0x041A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float4_Optional;                                   // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float4_IsSet;                                      // 0x0420(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float4_IsNull;                                     // 0x0421(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float5_Optional;                                   // 0x0424(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float5_IsSet;                                      // 0x0428(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float5_IsNull;                                     // 0x0429(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float6_Optional;                                   // 0x042C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float6_IsSet;                                      // 0x0430(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float6_IsNull;                                     // 0x0431(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x2];                                      // 0x0432(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float7_Optional;                                   // 0x0434(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float7_IsSet;                                      // 0x0438(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float7_IsNull;                                     // 0x0439(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43A[0x2];                                      // 0x043A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float8_Optional;                                   // 0x043C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float8_IsSet;                                      // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float8_IsNull;                                     // 0x0441(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_442[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float9_Optional;                                   // 0x0444(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float9_IsSet;                                      // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float9_IsNull;                                     // 0x0449(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44A[0x2];                                      // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float10_Optional;                                  // 0x044C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float10_IsSet;                                     // 0x0450(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float10_IsNull;                                    // 0x0451(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_452[0x2];                                      // 0x0452(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float11_Optional;                                  // 0x0454(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float11_IsSet;                                     // 0x0458(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float11_IsNull;                                    // 0x0459(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45A[0x2];                                      // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float12_Optional;                                  // 0x045C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float12_IsSet;                                     // 0x0460(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float12_IsNull;                                    // 0x0461(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x2];                                      // 0x0462(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float13_Optional;                                  // 0x0464(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float13_IsSet;                                     // 0x0468(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float13_IsNull;                                    // 0x0469(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46A[0x2];                                      // 0x046A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float14_Optional;                                  // 0x046C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float14_IsSet;                                     // 0x0470(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float14_IsNull;                                    // 0x0471(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_472[0x2];                                      // 0x0472(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float15_Optional;                                  // 0x0474(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float15_IsSet;                                     // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float15_IsNull;                                    // 0x0479(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47A[0x2];                                      // 0x047A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float16_Optional;                                  // 0x047C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float16_IsSet;                                     // 0x0480(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float16_IsNull;                                    // 0x0481(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float17_Optional;                                  // 0x0484(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float17_IsSet;                                     // 0x0488(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float17_IsNull;                                    // 0x0489(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48A[0x2];                                      // 0x048A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float18_Optional;                                  // 0x048C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float18_IsSet;                                     // 0x0490(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float18_IsNull;                                    // 0x0491(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float19_Optional;                                  // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float19_IsSet;                                     // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float19_IsNull;                                    // 0x0499(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float20_Optional;                                  // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float20_IsSet;                                     // 0x04A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float20_IsNull;                                    // 0x04A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A2[0x2];                                      // 0x04A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float21_Optional;                                  // 0x04A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float21_IsSet;                                     // 0x04A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float21_IsNull;                                    // 0x04A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AA[0x2];                                      // 0x04AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float22_Optional;                                  // 0x04AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float22_IsSet;                                     // 0x04B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float22_IsNull;                                    // 0x04B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B2[0x2];                                      // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float23_Optional;                                  // 0x04B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float23_IsSet;                                     // 0x04B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float23_IsNull;                                    // 0x04B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BA[0x2];                                      // 0x04BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float24_Optional;                                  // 0x04BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float24_IsSet;                                     // 0x04C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float24_IsNull;                                    // 0x04C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C2[0x2];                                      // 0x04C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float25_Optional;                                  // 0x04C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float25_IsSet;                                     // 0x04C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float25_IsNull;                                    // 0x04C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CA[0x2];                                      // 0x04CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float26_Optional;                                  // 0x04CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float26_IsSet;                                     // 0x04D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float26_IsNull;                                    // 0x04D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D2[0x2];                                      // 0x04D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float27_Optional;                                  // 0x04D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float27_IsSet;                                     // 0x04D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float27_IsNull;                                    // 0x04D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DA[0x2];                                      // 0x04DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float28_Optional;                                  // 0x04DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float28_IsSet;                                     // 0x04E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float28_IsNull;                                    // 0x04E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0x2];                                      // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float29_Optional;                                  // 0x04E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float29_IsSet;                                     // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float29_IsNull;                                    // 0x04E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float30_Optional;                                  // 0x04EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float30_IsSet;                                     // 0x04F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float30_IsNull;                                    // 0x04F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F2[0x2];                                      // 0x04F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float31_Optional;                                  // 0x04F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float31_IsSet;                                     // 0x04F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float31_IsNull;                                    // 0x04F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FA[0x2];                                      // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Float32_Optional;                                  // 0x04FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float32_IsSet;                                     // 0x0500(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Float32_IsNull;                                    // 0x0501(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_502[0x6];                                      // 0x0502(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchTimelineProperties) == 0x000008, "Wrong alignment on FRHAPI_MatchTimelineProperties");
static_assert(sizeof(FRHAPI_MatchTimelineProperties) == 0x000508, "Wrong size on FRHAPI_MatchTimelineProperties");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int1_Optional) == 0x000008, "Member 'FRHAPI_MatchTimelineProperties::Int1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int1_IsSet) == 0x00000C, "Member 'FRHAPI_MatchTimelineProperties::Int1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int1_IsNull) == 0x00000D, "Member 'FRHAPI_MatchTimelineProperties::Int1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int2_Optional) == 0x000010, "Member 'FRHAPI_MatchTimelineProperties::Int2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int2_IsSet) == 0x000014, "Member 'FRHAPI_MatchTimelineProperties::Int2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int2_IsNull) == 0x000015, "Member 'FRHAPI_MatchTimelineProperties::Int2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int3_Optional) == 0x000018, "Member 'FRHAPI_MatchTimelineProperties::Int3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int3_IsSet) == 0x00001C, "Member 'FRHAPI_MatchTimelineProperties::Int3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int3_IsNull) == 0x00001D, "Member 'FRHAPI_MatchTimelineProperties::Int3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int4_Optional) == 0x000020, "Member 'FRHAPI_MatchTimelineProperties::Int4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int4_IsSet) == 0x000024, "Member 'FRHAPI_MatchTimelineProperties::Int4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int4_IsNull) == 0x000025, "Member 'FRHAPI_MatchTimelineProperties::Int4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int5_Optional) == 0x000028, "Member 'FRHAPI_MatchTimelineProperties::Int5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int5_IsSet) == 0x00002C, "Member 'FRHAPI_MatchTimelineProperties::Int5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int5_IsNull) == 0x00002D, "Member 'FRHAPI_MatchTimelineProperties::Int5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int6_Optional) == 0x000030, "Member 'FRHAPI_MatchTimelineProperties::Int6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int6_IsSet) == 0x000034, "Member 'FRHAPI_MatchTimelineProperties::Int6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int6_IsNull) == 0x000035, "Member 'FRHAPI_MatchTimelineProperties::Int6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int7_Optional) == 0x000038, "Member 'FRHAPI_MatchTimelineProperties::Int7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int7_IsSet) == 0x00003C, "Member 'FRHAPI_MatchTimelineProperties::Int7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int7_IsNull) == 0x00003D, "Member 'FRHAPI_MatchTimelineProperties::Int7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int8_Optional) == 0x000040, "Member 'FRHAPI_MatchTimelineProperties::Int8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int8_IsSet) == 0x000044, "Member 'FRHAPI_MatchTimelineProperties::Int8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int8_IsNull) == 0x000045, "Member 'FRHAPI_MatchTimelineProperties::Int8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int9_Optional) == 0x000048, "Member 'FRHAPI_MatchTimelineProperties::Int9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int9_IsSet) == 0x00004C, "Member 'FRHAPI_MatchTimelineProperties::Int9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int9_IsNull) == 0x00004D, "Member 'FRHAPI_MatchTimelineProperties::Int9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int10_Optional) == 0x000050, "Member 'FRHAPI_MatchTimelineProperties::Int10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int10_IsSet) == 0x000054, "Member 'FRHAPI_MatchTimelineProperties::Int10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int10_IsNull) == 0x000055, "Member 'FRHAPI_MatchTimelineProperties::Int10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int11_Optional) == 0x000058, "Member 'FRHAPI_MatchTimelineProperties::Int11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int11_IsSet) == 0x00005C, "Member 'FRHAPI_MatchTimelineProperties::Int11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int11_IsNull) == 0x00005D, "Member 'FRHAPI_MatchTimelineProperties::Int11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int12_Optional) == 0x000060, "Member 'FRHAPI_MatchTimelineProperties::Int12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int12_IsSet) == 0x000064, "Member 'FRHAPI_MatchTimelineProperties::Int12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int12_IsNull) == 0x000065, "Member 'FRHAPI_MatchTimelineProperties::Int12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int13_Optional) == 0x000068, "Member 'FRHAPI_MatchTimelineProperties::Int13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int13_IsSet) == 0x00006C, "Member 'FRHAPI_MatchTimelineProperties::Int13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int13_IsNull) == 0x00006D, "Member 'FRHAPI_MatchTimelineProperties::Int13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int14_Optional) == 0x000070, "Member 'FRHAPI_MatchTimelineProperties::Int14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int14_IsSet) == 0x000074, "Member 'FRHAPI_MatchTimelineProperties::Int14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int14_IsNull) == 0x000075, "Member 'FRHAPI_MatchTimelineProperties::Int14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int15_Optional) == 0x000078, "Member 'FRHAPI_MatchTimelineProperties::Int15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int15_IsSet) == 0x00007C, "Member 'FRHAPI_MatchTimelineProperties::Int15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int15_IsNull) == 0x00007D, "Member 'FRHAPI_MatchTimelineProperties::Int15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int16_Optional) == 0x000080, "Member 'FRHAPI_MatchTimelineProperties::Int16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int16_IsSet) == 0x000084, "Member 'FRHAPI_MatchTimelineProperties::Int16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int16_IsNull) == 0x000085, "Member 'FRHAPI_MatchTimelineProperties::Int16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int17_Optional) == 0x000088, "Member 'FRHAPI_MatchTimelineProperties::Int17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int17_IsSet) == 0x00008C, "Member 'FRHAPI_MatchTimelineProperties::Int17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int17_IsNull) == 0x00008D, "Member 'FRHAPI_MatchTimelineProperties::Int17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int18_Optional) == 0x000090, "Member 'FRHAPI_MatchTimelineProperties::Int18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int18_IsSet) == 0x000094, "Member 'FRHAPI_MatchTimelineProperties::Int18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int18_IsNull) == 0x000095, "Member 'FRHAPI_MatchTimelineProperties::Int18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int19_Optional) == 0x000098, "Member 'FRHAPI_MatchTimelineProperties::Int19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int19_IsSet) == 0x00009C, "Member 'FRHAPI_MatchTimelineProperties::Int19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int19_IsNull) == 0x00009D, "Member 'FRHAPI_MatchTimelineProperties::Int19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int20_Optional) == 0x0000A0, "Member 'FRHAPI_MatchTimelineProperties::Int20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int20_IsSet) == 0x0000A4, "Member 'FRHAPI_MatchTimelineProperties::Int20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int20_IsNull) == 0x0000A5, "Member 'FRHAPI_MatchTimelineProperties::Int20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int21_Optional) == 0x0000A8, "Member 'FRHAPI_MatchTimelineProperties::Int21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int21_IsSet) == 0x0000AC, "Member 'FRHAPI_MatchTimelineProperties::Int21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int21_IsNull) == 0x0000AD, "Member 'FRHAPI_MatchTimelineProperties::Int21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int22_Optional) == 0x0000B0, "Member 'FRHAPI_MatchTimelineProperties::Int22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int22_IsSet) == 0x0000B4, "Member 'FRHAPI_MatchTimelineProperties::Int22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int22_IsNull) == 0x0000B5, "Member 'FRHAPI_MatchTimelineProperties::Int22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int23_Optional) == 0x0000B8, "Member 'FRHAPI_MatchTimelineProperties::Int23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int23_IsSet) == 0x0000BC, "Member 'FRHAPI_MatchTimelineProperties::Int23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int23_IsNull) == 0x0000BD, "Member 'FRHAPI_MatchTimelineProperties::Int23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int24_Optional) == 0x0000C0, "Member 'FRHAPI_MatchTimelineProperties::Int24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int24_IsSet) == 0x0000C4, "Member 'FRHAPI_MatchTimelineProperties::Int24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int24_IsNull) == 0x0000C5, "Member 'FRHAPI_MatchTimelineProperties::Int24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int25_Optional) == 0x0000C8, "Member 'FRHAPI_MatchTimelineProperties::Int25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int25_IsSet) == 0x0000CC, "Member 'FRHAPI_MatchTimelineProperties::Int25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int25_IsNull) == 0x0000CD, "Member 'FRHAPI_MatchTimelineProperties::Int25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int26_Optional) == 0x0000D0, "Member 'FRHAPI_MatchTimelineProperties::Int26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int26_IsSet) == 0x0000D4, "Member 'FRHAPI_MatchTimelineProperties::Int26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int26_IsNull) == 0x0000D5, "Member 'FRHAPI_MatchTimelineProperties::Int26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int27_Optional) == 0x0000D8, "Member 'FRHAPI_MatchTimelineProperties::Int27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int27_IsSet) == 0x0000DC, "Member 'FRHAPI_MatchTimelineProperties::Int27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int27_IsNull) == 0x0000DD, "Member 'FRHAPI_MatchTimelineProperties::Int27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int28_Optional) == 0x0000E0, "Member 'FRHAPI_MatchTimelineProperties::Int28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int28_IsSet) == 0x0000E4, "Member 'FRHAPI_MatchTimelineProperties::Int28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int28_IsNull) == 0x0000E5, "Member 'FRHAPI_MatchTimelineProperties::Int28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int29_Optional) == 0x0000E8, "Member 'FRHAPI_MatchTimelineProperties::Int29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int29_IsSet) == 0x0000EC, "Member 'FRHAPI_MatchTimelineProperties::Int29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int29_IsNull) == 0x0000ED, "Member 'FRHAPI_MatchTimelineProperties::Int29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int30_Optional) == 0x0000F0, "Member 'FRHAPI_MatchTimelineProperties::Int30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int30_IsSet) == 0x0000F4, "Member 'FRHAPI_MatchTimelineProperties::Int30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int30_IsNull) == 0x0000F5, "Member 'FRHAPI_MatchTimelineProperties::Int30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int31_Optional) == 0x0000F8, "Member 'FRHAPI_MatchTimelineProperties::Int31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int31_IsSet) == 0x0000FC, "Member 'FRHAPI_MatchTimelineProperties::Int31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int31_IsNull) == 0x0000FD, "Member 'FRHAPI_MatchTimelineProperties::Int31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int32_Optional) == 0x000100, "Member 'FRHAPI_MatchTimelineProperties::Int32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int32_IsSet) == 0x000104, "Member 'FRHAPI_MatchTimelineProperties::Int32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Int32_IsNull) == 0x000105, "Member 'FRHAPI_MatchTimelineProperties::Int32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str1_Optional) == 0x000108, "Member 'FRHAPI_MatchTimelineProperties::Str1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str1_IsSet) == 0x000118, "Member 'FRHAPI_MatchTimelineProperties::Str1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str1_IsNull) == 0x000119, "Member 'FRHAPI_MatchTimelineProperties::Str1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str2_Optional) == 0x000120, "Member 'FRHAPI_MatchTimelineProperties::Str2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str2_IsSet) == 0x000130, "Member 'FRHAPI_MatchTimelineProperties::Str2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str2_IsNull) == 0x000131, "Member 'FRHAPI_MatchTimelineProperties::Str2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str3_Optional) == 0x000138, "Member 'FRHAPI_MatchTimelineProperties::Str3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str3_IsSet) == 0x000148, "Member 'FRHAPI_MatchTimelineProperties::Str3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str3_IsNull) == 0x000149, "Member 'FRHAPI_MatchTimelineProperties::Str3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str4_Optional) == 0x000150, "Member 'FRHAPI_MatchTimelineProperties::Str4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str4_IsSet) == 0x000160, "Member 'FRHAPI_MatchTimelineProperties::Str4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str4_IsNull) == 0x000161, "Member 'FRHAPI_MatchTimelineProperties::Str4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str5_Optional) == 0x000168, "Member 'FRHAPI_MatchTimelineProperties::Str5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str5_IsSet) == 0x000178, "Member 'FRHAPI_MatchTimelineProperties::Str5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str5_IsNull) == 0x000179, "Member 'FRHAPI_MatchTimelineProperties::Str5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str6_Optional) == 0x000180, "Member 'FRHAPI_MatchTimelineProperties::Str6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str6_IsSet) == 0x000190, "Member 'FRHAPI_MatchTimelineProperties::Str6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str6_IsNull) == 0x000191, "Member 'FRHAPI_MatchTimelineProperties::Str6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str7_Optional) == 0x000198, "Member 'FRHAPI_MatchTimelineProperties::Str7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str7_IsSet) == 0x0001A8, "Member 'FRHAPI_MatchTimelineProperties::Str7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str7_IsNull) == 0x0001A9, "Member 'FRHAPI_MatchTimelineProperties::Str7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str8_Optional) == 0x0001B0, "Member 'FRHAPI_MatchTimelineProperties::Str8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str8_IsSet) == 0x0001C0, "Member 'FRHAPI_MatchTimelineProperties::Str8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str8_IsNull) == 0x0001C1, "Member 'FRHAPI_MatchTimelineProperties::Str8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str9_Optional) == 0x0001C8, "Member 'FRHAPI_MatchTimelineProperties::Str9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str9_IsSet) == 0x0001D8, "Member 'FRHAPI_MatchTimelineProperties::Str9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str9_IsNull) == 0x0001D9, "Member 'FRHAPI_MatchTimelineProperties::Str9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str10_Optional) == 0x0001E0, "Member 'FRHAPI_MatchTimelineProperties::Str10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str10_IsSet) == 0x0001F0, "Member 'FRHAPI_MatchTimelineProperties::Str10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str10_IsNull) == 0x0001F1, "Member 'FRHAPI_MatchTimelineProperties::Str10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str11_Optional) == 0x0001F8, "Member 'FRHAPI_MatchTimelineProperties::Str11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str11_IsSet) == 0x000208, "Member 'FRHAPI_MatchTimelineProperties::Str11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str11_IsNull) == 0x000209, "Member 'FRHAPI_MatchTimelineProperties::Str11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str12_Optional) == 0x000210, "Member 'FRHAPI_MatchTimelineProperties::Str12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str12_IsSet) == 0x000220, "Member 'FRHAPI_MatchTimelineProperties::Str12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str12_IsNull) == 0x000221, "Member 'FRHAPI_MatchTimelineProperties::Str12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str13_Optional) == 0x000228, "Member 'FRHAPI_MatchTimelineProperties::Str13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str13_IsSet) == 0x000238, "Member 'FRHAPI_MatchTimelineProperties::Str13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str13_IsNull) == 0x000239, "Member 'FRHAPI_MatchTimelineProperties::Str13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str14_Optional) == 0x000240, "Member 'FRHAPI_MatchTimelineProperties::Str14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str14_IsSet) == 0x000250, "Member 'FRHAPI_MatchTimelineProperties::Str14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str14_IsNull) == 0x000251, "Member 'FRHAPI_MatchTimelineProperties::Str14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str15_Optional) == 0x000258, "Member 'FRHAPI_MatchTimelineProperties::Str15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str15_IsSet) == 0x000268, "Member 'FRHAPI_MatchTimelineProperties::Str15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str15_IsNull) == 0x000269, "Member 'FRHAPI_MatchTimelineProperties::Str15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str16_Optional) == 0x000270, "Member 'FRHAPI_MatchTimelineProperties::Str16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str16_IsSet) == 0x000280, "Member 'FRHAPI_MatchTimelineProperties::Str16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str16_IsNull) == 0x000281, "Member 'FRHAPI_MatchTimelineProperties::Str16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str17_Optional) == 0x000288, "Member 'FRHAPI_MatchTimelineProperties::Str17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str17_IsSet) == 0x000298, "Member 'FRHAPI_MatchTimelineProperties::Str17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str17_IsNull) == 0x000299, "Member 'FRHAPI_MatchTimelineProperties::Str17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str18_Optional) == 0x0002A0, "Member 'FRHAPI_MatchTimelineProperties::Str18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str18_IsSet) == 0x0002B0, "Member 'FRHAPI_MatchTimelineProperties::Str18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str18_IsNull) == 0x0002B1, "Member 'FRHAPI_MatchTimelineProperties::Str18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str19_Optional) == 0x0002B8, "Member 'FRHAPI_MatchTimelineProperties::Str19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str19_IsSet) == 0x0002C8, "Member 'FRHAPI_MatchTimelineProperties::Str19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str19_IsNull) == 0x0002C9, "Member 'FRHAPI_MatchTimelineProperties::Str19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str20_Optional) == 0x0002D0, "Member 'FRHAPI_MatchTimelineProperties::Str20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str20_IsSet) == 0x0002E0, "Member 'FRHAPI_MatchTimelineProperties::Str20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str20_IsNull) == 0x0002E1, "Member 'FRHAPI_MatchTimelineProperties::Str20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str21_Optional) == 0x0002E8, "Member 'FRHAPI_MatchTimelineProperties::Str21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str21_IsSet) == 0x0002F8, "Member 'FRHAPI_MatchTimelineProperties::Str21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str21_IsNull) == 0x0002F9, "Member 'FRHAPI_MatchTimelineProperties::Str21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str22_Optional) == 0x000300, "Member 'FRHAPI_MatchTimelineProperties::Str22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str22_IsSet) == 0x000310, "Member 'FRHAPI_MatchTimelineProperties::Str22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str22_IsNull) == 0x000311, "Member 'FRHAPI_MatchTimelineProperties::Str22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str23_Optional) == 0x000318, "Member 'FRHAPI_MatchTimelineProperties::Str23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str23_IsSet) == 0x000328, "Member 'FRHAPI_MatchTimelineProperties::Str23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str23_IsNull) == 0x000329, "Member 'FRHAPI_MatchTimelineProperties::Str23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str24_Optional) == 0x000330, "Member 'FRHAPI_MatchTimelineProperties::Str24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str24_IsSet) == 0x000340, "Member 'FRHAPI_MatchTimelineProperties::Str24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str24_IsNull) == 0x000341, "Member 'FRHAPI_MatchTimelineProperties::Str24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str25_Optional) == 0x000348, "Member 'FRHAPI_MatchTimelineProperties::Str25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str25_IsSet) == 0x000358, "Member 'FRHAPI_MatchTimelineProperties::Str25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str25_IsNull) == 0x000359, "Member 'FRHAPI_MatchTimelineProperties::Str25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str26_Optional) == 0x000360, "Member 'FRHAPI_MatchTimelineProperties::Str26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str26_IsSet) == 0x000370, "Member 'FRHAPI_MatchTimelineProperties::Str26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str26_IsNull) == 0x000371, "Member 'FRHAPI_MatchTimelineProperties::Str26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str27_Optional) == 0x000378, "Member 'FRHAPI_MatchTimelineProperties::Str27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str27_IsSet) == 0x000388, "Member 'FRHAPI_MatchTimelineProperties::Str27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str27_IsNull) == 0x000389, "Member 'FRHAPI_MatchTimelineProperties::Str27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str28_Optional) == 0x000390, "Member 'FRHAPI_MatchTimelineProperties::Str28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str28_IsSet) == 0x0003A0, "Member 'FRHAPI_MatchTimelineProperties::Str28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str28_IsNull) == 0x0003A1, "Member 'FRHAPI_MatchTimelineProperties::Str28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str29_Optional) == 0x0003A8, "Member 'FRHAPI_MatchTimelineProperties::Str29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str29_IsSet) == 0x0003B8, "Member 'FRHAPI_MatchTimelineProperties::Str29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str29_IsNull) == 0x0003B9, "Member 'FRHAPI_MatchTimelineProperties::Str29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str30_Optional) == 0x0003C0, "Member 'FRHAPI_MatchTimelineProperties::Str30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str30_IsSet) == 0x0003D0, "Member 'FRHAPI_MatchTimelineProperties::Str30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str30_IsNull) == 0x0003D1, "Member 'FRHAPI_MatchTimelineProperties::Str30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str31_Optional) == 0x0003D8, "Member 'FRHAPI_MatchTimelineProperties::Str31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str31_IsSet) == 0x0003E8, "Member 'FRHAPI_MatchTimelineProperties::Str31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str31_IsNull) == 0x0003E9, "Member 'FRHAPI_MatchTimelineProperties::Str31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str32_Optional) == 0x0003F0, "Member 'FRHAPI_MatchTimelineProperties::Str32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str32_IsSet) == 0x000400, "Member 'FRHAPI_MatchTimelineProperties::Str32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Str32_IsNull) == 0x000401, "Member 'FRHAPI_MatchTimelineProperties::Str32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float1_Optional) == 0x000404, "Member 'FRHAPI_MatchTimelineProperties::Float1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float1_IsSet) == 0x000408, "Member 'FRHAPI_MatchTimelineProperties::Float1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float1_IsNull) == 0x000409, "Member 'FRHAPI_MatchTimelineProperties::Float1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float2_Optional) == 0x00040C, "Member 'FRHAPI_MatchTimelineProperties::Float2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float2_IsSet) == 0x000410, "Member 'FRHAPI_MatchTimelineProperties::Float2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float2_IsNull) == 0x000411, "Member 'FRHAPI_MatchTimelineProperties::Float2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float3_Optional) == 0x000414, "Member 'FRHAPI_MatchTimelineProperties::Float3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float3_IsSet) == 0x000418, "Member 'FRHAPI_MatchTimelineProperties::Float3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float3_IsNull) == 0x000419, "Member 'FRHAPI_MatchTimelineProperties::Float3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float4_Optional) == 0x00041C, "Member 'FRHAPI_MatchTimelineProperties::Float4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float4_IsSet) == 0x000420, "Member 'FRHAPI_MatchTimelineProperties::Float4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float4_IsNull) == 0x000421, "Member 'FRHAPI_MatchTimelineProperties::Float4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float5_Optional) == 0x000424, "Member 'FRHAPI_MatchTimelineProperties::Float5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float5_IsSet) == 0x000428, "Member 'FRHAPI_MatchTimelineProperties::Float5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float5_IsNull) == 0x000429, "Member 'FRHAPI_MatchTimelineProperties::Float5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float6_Optional) == 0x00042C, "Member 'FRHAPI_MatchTimelineProperties::Float6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float6_IsSet) == 0x000430, "Member 'FRHAPI_MatchTimelineProperties::Float6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float6_IsNull) == 0x000431, "Member 'FRHAPI_MatchTimelineProperties::Float6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float7_Optional) == 0x000434, "Member 'FRHAPI_MatchTimelineProperties::Float7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float7_IsSet) == 0x000438, "Member 'FRHAPI_MatchTimelineProperties::Float7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float7_IsNull) == 0x000439, "Member 'FRHAPI_MatchTimelineProperties::Float7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float8_Optional) == 0x00043C, "Member 'FRHAPI_MatchTimelineProperties::Float8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float8_IsSet) == 0x000440, "Member 'FRHAPI_MatchTimelineProperties::Float8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float8_IsNull) == 0x000441, "Member 'FRHAPI_MatchTimelineProperties::Float8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float9_Optional) == 0x000444, "Member 'FRHAPI_MatchTimelineProperties::Float9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float9_IsSet) == 0x000448, "Member 'FRHAPI_MatchTimelineProperties::Float9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float9_IsNull) == 0x000449, "Member 'FRHAPI_MatchTimelineProperties::Float9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float10_Optional) == 0x00044C, "Member 'FRHAPI_MatchTimelineProperties::Float10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float10_IsSet) == 0x000450, "Member 'FRHAPI_MatchTimelineProperties::Float10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float10_IsNull) == 0x000451, "Member 'FRHAPI_MatchTimelineProperties::Float10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float11_Optional) == 0x000454, "Member 'FRHAPI_MatchTimelineProperties::Float11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float11_IsSet) == 0x000458, "Member 'FRHAPI_MatchTimelineProperties::Float11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float11_IsNull) == 0x000459, "Member 'FRHAPI_MatchTimelineProperties::Float11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float12_Optional) == 0x00045C, "Member 'FRHAPI_MatchTimelineProperties::Float12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float12_IsSet) == 0x000460, "Member 'FRHAPI_MatchTimelineProperties::Float12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float12_IsNull) == 0x000461, "Member 'FRHAPI_MatchTimelineProperties::Float12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float13_Optional) == 0x000464, "Member 'FRHAPI_MatchTimelineProperties::Float13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float13_IsSet) == 0x000468, "Member 'FRHAPI_MatchTimelineProperties::Float13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float13_IsNull) == 0x000469, "Member 'FRHAPI_MatchTimelineProperties::Float13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float14_Optional) == 0x00046C, "Member 'FRHAPI_MatchTimelineProperties::Float14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float14_IsSet) == 0x000470, "Member 'FRHAPI_MatchTimelineProperties::Float14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float14_IsNull) == 0x000471, "Member 'FRHAPI_MatchTimelineProperties::Float14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float15_Optional) == 0x000474, "Member 'FRHAPI_MatchTimelineProperties::Float15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float15_IsSet) == 0x000478, "Member 'FRHAPI_MatchTimelineProperties::Float15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float15_IsNull) == 0x000479, "Member 'FRHAPI_MatchTimelineProperties::Float15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float16_Optional) == 0x00047C, "Member 'FRHAPI_MatchTimelineProperties::Float16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float16_IsSet) == 0x000480, "Member 'FRHAPI_MatchTimelineProperties::Float16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float16_IsNull) == 0x000481, "Member 'FRHAPI_MatchTimelineProperties::Float16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float17_Optional) == 0x000484, "Member 'FRHAPI_MatchTimelineProperties::Float17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float17_IsSet) == 0x000488, "Member 'FRHAPI_MatchTimelineProperties::Float17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float17_IsNull) == 0x000489, "Member 'FRHAPI_MatchTimelineProperties::Float17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float18_Optional) == 0x00048C, "Member 'FRHAPI_MatchTimelineProperties::Float18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float18_IsSet) == 0x000490, "Member 'FRHAPI_MatchTimelineProperties::Float18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float18_IsNull) == 0x000491, "Member 'FRHAPI_MatchTimelineProperties::Float18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float19_Optional) == 0x000494, "Member 'FRHAPI_MatchTimelineProperties::Float19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float19_IsSet) == 0x000498, "Member 'FRHAPI_MatchTimelineProperties::Float19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float19_IsNull) == 0x000499, "Member 'FRHAPI_MatchTimelineProperties::Float19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float20_Optional) == 0x00049C, "Member 'FRHAPI_MatchTimelineProperties::Float20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float20_IsSet) == 0x0004A0, "Member 'FRHAPI_MatchTimelineProperties::Float20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float20_IsNull) == 0x0004A1, "Member 'FRHAPI_MatchTimelineProperties::Float20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float21_Optional) == 0x0004A4, "Member 'FRHAPI_MatchTimelineProperties::Float21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float21_IsSet) == 0x0004A8, "Member 'FRHAPI_MatchTimelineProperties::Float21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float21_IsNull) == 0x0004A9, "Member 'FRHAPI_MatchTimelineProperties::Float21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float22_Optional) == 0x0004AC, "Member 'FRHAPI_MatchTimelineProperties::Float22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float22_IsSet) == 0x0004B0, "Member 'FRHAPI_MatchTimelineProperties::Float22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float22_IsNull) == 0x0004B1, "Member 'FRHAPI_MatchTimelineProperties::Float22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float23_Optional) == 0x0004B4, "Member 'FRHAPI_MatchTimelineProperties::Float23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float23_IsSet) == 0x0004B8, "Member 'FRHAPI_MatchTimelineProperties::Float23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float23_IsNull) == 0x0004B9, "Member 'FRHAPI_MatchTimelineProperties::Float23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float24_Optional) == 0x0004BC, "Member 'FRHAPI_MatchTimelineProperties::Float24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float24_IsSet) == 0x0004C0, "Member 'FRHAPI_MatchTimelineProperties::Float24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float24_IsNull) == 0x0004C1, "Member 'FRHAPI_MatchTimelineProperties::Float24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float25_Optional) == 0x0004C4, "Member 'FRHAPI_MatchTimelineProperties::Float25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float25_IsSet) == 0x0004C8, "Member 'FRHAPI_MatchTimelineProperties::Float25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float25_IsNull) == 0x0004C9, "Member 'FRHAPI_MatchTimelineProperties::Float25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float26_Optional) == 0x0004CC, "Member 'FRHAPI_MatchTimelineProperties::Float26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float26_IsSet) == 0x0004D0, "Member 'FRHAPI_MatchTimelineProperties::Float26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float26_IsNull) == 0x0004D1, "Member 'FRHAPI_MatchTimelineProperties::Float26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float27_Optional) == 0x0004D4, "Member 'FRHAPI_MatchTimelineProperties::Float27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float27_IsSet) == 0x0004D8, "Member 'FRHAPI_MatchTimelineProperties::Float27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float27_IsNull) == 0x0004D9, "Member 'FRHAPI_MatchTimelineProperties::Float27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float28_Optional) == 0x0004DC, "Member 'FRHAPI_MatchTimelineProperties::Float28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float28_IsSet) == 0x0004E0, "Member 'FRHAPI_MatchTimelineProperties::Float28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float28_IsNull) == 0x0004E1, "Member 'FRHAPI_MatchTimelineProperties::Float28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float29_Optional) == 0x0004E4, "Member 'FRHAPI_MatchTimelineProperties::Float29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float29_IsSet) == 0x0004E8, "Member 'FRHAPI_MatchTimelineProperties::Float29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float29_IsNull) == 0x0004E9, "Member 'FRHAPI_MatchTimelineProperties::Float29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float30_Optional) == 0x0004EC, "Member 'FRHAPI_MatchTimelineProperties::Float30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float30_IsSet) == 0x0004F0, "Member 'FRHAPI_MatchTimelineProperties::Float30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float30_IsNull) == 0x0004F1, "Member 'FRHAPI_MatchTimelineProperties::Float30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float31_Optional) == 0x0004F4, "Member 'FRHAPI_MatchTimelineProperties::Float31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float31_IsSet) == 0x0004F8, "Member 'FRHAPI_MatchTimelineProperties::Float31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float31_IsNull) == 0x0004F9, "Member 'FRHAPI_MatchTimelineProperties::Float31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float32_Optional) == 0x0004FC, "Member 'FRHAPI_MatchTimelineProperties::Float32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float32_IsSet) == 0x000500, "Member 'FRHAPI_MatchTimelineProperties::Float32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineProperties, Float32_IsNull) == 0x000501, "Member 'FRHAPI_MatchTimelineProperties::Float32_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchTimelineEvent
// 0x06F0 (0x06F8 - 0x0008)
struct FRHAPI_MatchTimelineEvent final : public FRHAPI_Model
{
public:
	float                                         CreatedInto_Optional;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedInto_IsSet;                                 // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedInto_IsNull;                                // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedDt_Optional;                                // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedDt_IsSet;                                   // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedDt_IsNull;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type_Optional;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type2_Optional;                                    // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type2_IsSet;                                       // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type2_IsNull;                                      // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type3_Optional;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type3_IsSet;                                       // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type3_IsNull;                                      // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type4_Optional;                                    // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type4_IsSet;                                       // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type4_IsNull;                                      // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocX_Optional;                                     // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocX_IsSet;                                        // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocX_IsNull;                                       // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocY_Optional;                                     // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocY_IsSet;                                        // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocY_IsNull;                                       // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocZ_Optional;                                     // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocZ_IsSet;                                        // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocZ_IsNull;                                       // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0094(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x00A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsNull;                                 // 0x00A5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SourcePlayerUuid_Optional;                         // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsSet;                            // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsNull;                           // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceId_Optional;                                 // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId_IsSet;                                    // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId_IsNull;                                   // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceId2_Optional;                                // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId2_IsSet;                                   // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId2_IsNull;                                  // 0x00E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceId3_Optional;                                // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId3_IsSet;                                   // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId3_IsNull;                                  // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceId4_Optional;                                // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId4_IsSet;                                   // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceId4_IsNull;                                  // 0x0119(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  TargetPlayerUuid_Optional;                         // 0x011C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayerUuid_IsSet;                            // 0x012C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayerUuid_IsNull;                           // 0x012D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetId_Optional;                                 // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId_IsSet;                                    // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId_IsNull;                                   // 0x0141(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetId2_Optional;                                // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId2_IsSet;                                   // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId2_IsNull;                                  // 0x0159(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetId3_Optional;                                // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId3_IsSet;                                   // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId3_IsNull;                                  // 0x0171(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TargetId4_Optional;                                // 0x0178(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId4_IsSet;                                   // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetId4_IsNull;                                  // 0x0189(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchTimelineProperties         Properties_Optional;                               // 0x0190(0x0508)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Properties_IsSet;                                  // 0x0698(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x06A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x06F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x06F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F2[0x6];                                      // 0x06F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchTimelineEvent) == 0x000008, "Wrong alignment on FRHAPI_MatchTimelineEvent");
static_assert(sizeof(FRHAPI_MatchTimelineEvent) == 0x0006F8, "Wrong size on FRHAPI_MatchTimelineEvent");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedInto_Optional) == 0x000008, "Member 'FRHAPI_MatchTimelineEvent::CreatedInto_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedInto_IsSet) == 0x00000C, "Member 'FRHAPI_MatchTimelineEvent::CreatedInto_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedInto_IsNull) == 0x00000D, "Member 'FRHAPI_MatchTimelineEvent::CreatedInto_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedDt_Optional) == 0x000010, "Member 'FRHAPI_MatchTimelineEvent::CreatedDt_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedDt_IsSet) == 0x000018, "Member 'FRHAPI_MatchTimelineEvent::CreatedDt_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CreatedDt_IsNull) == 0x000019, "Member 'FRHAPI_MatchTimelineEvent::CreatedDt_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type_Optional) == 0x000020, "Member 'FRHAPI_MatchTimelineEvent::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type_IsSet) == 0x000030, "Member 'FRHAPI_MatchTimelineEvent::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type_IsNull) == 0x000031, "Member 'FRHAPI_MatchTimelineEvent::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type2_Optional) == 0x000038, "Member 'FRHAPI_MatchTimelineEvent::Type2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type2_IsSet) == 0x000048, "Member 'FRHAPI_MatchTimelineEvent::Type2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type2_IsNull) == 0x000049, "Member 'FRHAPI_MatchTimelineEvent::Type2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type3_Optional) == 0x000050, "Member 'FRHAPI_MatchTimelineEvent::Type3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type3_IsSet) == 0x000060, "Member 'FRHAPI_MatchTimelineEvent::Type3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type3_IsNull) == 0x000061, "Member 'FRHAPI_MatchTimelineEvent::Type3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type4_Optional) == 0x000068, "Member 'FRHAPI_MatchTimelineEvent::Type4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type4_IsSet) == 0x000078, "Member 'FRHAPI_MatchTimelineEvent::Type4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Type4_IsNull) == 0x000079, "Member 'FRHAPI_MatchTimelineEvent::Type4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocX_Optional) == 0x00007C, "Member 'FRHAPI_MatchTimelineEvent::LocX_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocX_IsSet) == 0x000080, "Member 'FRHAPI_MatchTimelineEvent::LocX_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocX_IsNull) == 0x000081, "Member 'FRHAPI_MatchTimelineEvent::LocX_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocY_Optional) == 0x000084, "Member 'FRHAPI_MatchTimelineEvent::LocY_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocY_IsSet) == 0x000088, "Member 'FRHAPI_MatchTimelineEvent::LocY_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocY_IsNull) == 0x000089, "Member 'FRHAPI_MatchTimelineEvent::LocY_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocZ_Optional) == 0x00008C, "Member 'FRHAPI_MatchTimelineEvent::LocZ_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocZ_IsSet) == 0x000090, "Member 'FRHAPI_MatchTimelineEvent::LocZ_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, LocZ_IsNull) == 0x000091, "Member 'FRHAPI_MatchTimelineEvent::LocZ_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, PlayerUuid_Optional) == 0x000094, "Member 'FRHAPI_MatchTimelineEvent::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, PlayerUuid_IsSet) == 0x0000A4, "Member 'FRHAPI_MatchTimelineEvent::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, PlayerUuid_IsNull) == 0x0000A5, "Member 'FRHAPI_MatchTimelineEvent::PlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourcePlayerUuid_Optional) == 0x0000A8, "Member 'FRHAPI_MatchTimelineEvent::SourcePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourcePlayerUuid_IsSet) == 0x0000B8, "Member 'FRHAPI_MatchTimelineEvent::SourcePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourcePlayerUuid_IsNull) == 0x0000B9, "Member 'FRHAPI_MatchTimelineEvent::SourcePlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId_Optional) == 0x0000C0, "Member 'FRHAPI_MatchTimelineEvent::SourceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId_IsSet) == 0x0000D0, "Member 'FRHAPI_MatchTimelineEvent::SourceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId_IsNull) == 0x0000D1, "Member 'FRHAPI_MatchTimelineEvent::SourceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId2_Optional) == 0x0000D8, "Member 'FRHAPI_MatchTimelineEvent::SourceId2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId2_IsSet) == 0x0000E8, "Member 'FRHAPI_MatchTimelineEvent::SourceId2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId2_IsNull) == 0x0000E9, "Member 'FRHAPI_MatchTimelineEvent::SourceId2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId3_Optional) == 0x0000F0, "Member 'FRHAPI_MatchTimelineEvent::SourceId3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId3_IsSet) == 0x000100, "Member 'FRHAPI_MatchTimelineEvent::SourceId3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId3_IsNull) == 0x000101, "Member 'FRHAPI_MatchTimelineEvent::SourceId3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId4_Optional) == 0x000108, "Member 'FRHAPI_MatchTimelineEvent::SourceId4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId4_IsSet) == 0x000118, "Member 'FRHAPI_MatchTimelineEvent::SourceId4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, SourceId4_IsNull) == 0x000119, "Member 'FRHAPI_MatchTimelineEvent::SourceId4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetPlayerUuid_Optional) == 0x00011C, "Member 'FRHAPI_MatchTimelineEvent::TargetPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetPlayerUuid_IsSet) == 0x00012C, "Member 'FRHAPI_MatchTimelineEvent::TargetPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetPlayerUuid_IsNull) == 0x00012D, "Member 'FRHAPI_MatchTimelineEvent::TargetPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId_Optional) == 0x000130, "Member 'FRHAPI_MatchTimelineEvent::TargetId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId_IsSet) == 0x000140, "Member 'FRHAPI_MatchTimelineEvent::TargetId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId_IsNull) == 0x000141, "Member 'FRHAPI_MatchTimelineEvent::TargetId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId2_Optional) == 0x000148, "Member 'FRHAPI_MatchTimelineEvent::TargetId2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId2_IsSet) == 0x000158, "Member 'FRHAPI_MatchTimelineEvent::TargetId2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId2_IsNull) == 0x000159, "Member 'FRHAPI_MatchTimelineEvent::TargetId2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId3_Optional) == 0x000160, "Member 'FRHAPI_MatchTimelineEvent::TargetId3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId3_IsSet) == 0x000170, "Member 'FRHAPI_MatchTimelineEvent::TargetId3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId3_IsNull) == 0x000171, "Member 'FRHAPI_MatchTimelineEvent::TargetId3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId4_Optional) == 0x000178, "Member 'FRHAPI_MatchTimelineEvent::TargetId4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId4_IsSet) == 0x000188, "Member 'FRHAPI_MatchTimelineEvent::TargetId4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, TargetId4_IsNull) == 0x000189, "Member 'FRHAPI_MatchTimelineEvent::TargetId4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Properties_Optional) == 0x000190, "Member 'FRHAPI_MatchTimelineEvent::Properties_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, Properties_IsSet) == 0x000698, "Member 'FRHAPI_MatchTimelineEvent::Properties_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CustomData_Optional) == 0x0006A0, "Member 'FRHAPI_MatchTimelineEvent::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CustomData_IsSet) == 0x0006F0, "Member 'FRHAPI_MatchTimelineEvent::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelineEvent, CustomData_IsNull) == 0x0006F1, "Member 'FRHAPI_MatchTimelineEvent::CustomData_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchTimelinePage
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_MatchTimelinePage final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_MatchTimelineEvent>      Events_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Events_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchTimelinePage) == 0x000008, "Wrong alignment on FRHAPI_MatchTimelinePage");
static_assert(sizeof(FRHAPI_MatchTimelinePage) == 0x000038, "Wrong size on FRHAPI_MatchTimelinePage");
static_assert(offsetof(FRHAPI_MatchTimelinePage, Events_Optional) == 0x000008, "Member 'FRHAPI_MatchTimelinePage::Events_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelinePage, Events_IsSet) == 0x000018, "Member 'FRHAPI_MatchTimelinePage::Events_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelinePage, Cursor_Optional) == 0x000020, "Member 'FRHAPI_MatchTimelinePage::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelinePage, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_MatchTimelinePage::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchTimelinePage, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_MatchTimelinePage::Cursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_JsonValue
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRHAPI_JsonValue final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_JsonValue) == 0x000008, "Wrong alignment on FRHAPI_JsonValue");
static_assert(sizeof(FRHAPI_JsonValue) == 0x000010, "Wrong size on FRHAPI_JsonValue");

// ScriptStruct RallyHereAPI.RHAPI_SettingData
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_SettingData final : public FRHAPI_Model
{
public:
	int32                                         V;                                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonValue                       Value;                                             // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Value_IsNull;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Etag_Optional;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Etag_IsSet;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Etag_IsNull;                                       // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastModified_Optional;                             // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModified_IsSet;                                // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModified_IsNull;                               // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SettingData) == 0x000008, "Wrong alignment on FRHAPI_SettingData");
static_assert(sizeof(FRHAPI_SettingData) == 0x000050, "Wrong size on FRHAPI_SettingData");
static_assert(offsetof(FRHAPI_SettingData, V) == 0x000008, "Member 'FRHAPI_SettingData::V' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, Value) == 0x000010, "Member 'FRHAPI_SettingData::Value' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, Value_IsNull) == 0x000020, "Member 'FRHAPI_SettingData::Value_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, Etag_Optional) == 0x000028, "Member 'FRHAPI_SettingData::Etag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, Etag_IsSet) == 0x000038, "Member 'FRHAPI_SettingData::Etag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, Etag_IsNull) == 0x000039, "Member 'FRHAPI_SettingData::Etag_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, LastModified_Optional) == 0x000040, "Member 'FRHAPI_SettingData::LastModified_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, LastModified_IsSet) == 0x000048, "Member 'FRHAPI_SettingData::LastModified_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingData, LastModified_IsNull) == 0x000049, "Member 'FRHAPI_SettingData::LastModified_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchSession
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_MatchSession final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchSession) == 0x000008, "Wrong alignment on FRHAPI_MatchSession");
static_assert(sizeof(FRHAPI_MatchSession) == 0x000030, "Wrong size on FRHAPI_MatchSession");
static_assert(offsetof(FRHAPI_MatchSession, SessionId) == 0x000008, "Member 'FRHAPI_MatchSession::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSession, MatchmakingProfileId_Optional) == 0x000018, "Member 'FRHAPI_MatchSession::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSession, MatchmakingProfileId_IsSet) == 0x000028, "Member 'FRHAPI_MatchSession::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSession, MatchmakingProfileId_IsNull) == 0x000029, "Member 'FRHAPI_MatchSession::MatchmakingProfileId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexStat
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_PexStat final : public FRHAPI_Model
{
public:
	float                                         Min_Optional;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Min_IsSet;                                         // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Min_IsNull;                                        // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Max_Optional;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Max_IsSet;                                         // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Max_IsNull;                                        // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Avg_Optional;                                      // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Avg_IsSet;                                         // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Avg_IsNull;                                        // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stddev_Optional;                                   // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stddev_IsSet;                                      // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stddev_IsNull;                                     // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexStat) == 0x000008, "Wrong alignment on FRHAPI_PexStat");
static_assert(sizeof(FRHAPI_PexStat) == 0x000028, "Wrong size on FRHAPI_PexStat");
static_assert(offsetof(FRHAPI_PexStat, Min_Optional) == 0x000008, "Member 'FRHAPI_PexStat::Min_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Min_IsSet) == 0x00000C, "Member 'FRHAPI_PexStat::Min_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Min_IsNull) == 0x00000D, "Member 'FRHAPI_PexStat::Min_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Max_Optional) == 0x000010, "Member 'FRHAPI_PexStat::Max_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Max_IsSet) == 0x000014, "Member 'FRHAPI_PexStat::Max_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Max_IsNull) == 0x000015, "Member 'FRHAPI_PexStat::Max_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Avg_Optional) == 0x000018, "Member 'FRHAPI_PexStat::Avg_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Avg_IsSet) == 0x00001C, "Member 'FRHAPI_PexStat::Avg_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Avg_IsNull) == 0x00001D, "Member 'FRHAPI_PexStat::Avg_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Stddev_Optional) == 0x000020, "Member 'FRHAPI_PexStat::Stddev_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Stddev_IsSet) == 0x000024, "Member 'FRHAPI_PexStat::Stddev_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexStat, Stddev_IsNull) == 0x000025, "Member 'FRHAPI_PexStat::Stddev_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexCount
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_PexCount final : public FRHAPI_Model
{
public:
	float                                         Count_Optional;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Count_IsSet;                                       // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Count_IsNull;                                      // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexCount) == 0x000008, "Wrong alignment on FRHAPI_PexCount");
static_assert(sizeof(FRHAPI_PexCount) == 0x000010, "Wrong size on FRHAPI_PexCount");
static_assert(offsetof(FRHAPI_PexCount, Count_Optional) == 0x000008, "Member 'FRHAPI_PexCount::Count_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexCount, Count_IsSet) == 0x00000C, "Member 'FRHAPI_PexCount::Count_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexCount, Count_IsNull) == 0x00000D, "Member 'FRHAPI_PexCount::Count_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexHostScores
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_PexHostScores final : public FRHAPI_Model
{
public:
	bool                                          OverallMatchScore_Optional;                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverallMatchScore_IsSet;                           // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverallMatchScore_IsNull;                          // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_Optional;                                 // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_IsSet;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_IsNull;                                   // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_Optional;                            // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_IsSet;                               // 0x000F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_IsNull;                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_Optional;                             // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_IsSet;                                // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_IsNull;                               // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_Optional;                     // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_IsSet;                        // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_IsNull;                       // 0x0016(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_Optional;                           // 0x0017(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_IsSet;                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_IsNull;                             // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_Optional;                           // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_IsSet;                              // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_IsNull;                             // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_Optional;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_IsSet;                              // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_IsNull;                             // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_Optional;                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_IsSet;                       // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_IsNull;                      // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_Optional;                            // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_IsSet;                               // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_IsNull;                              // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_Optional;                            // 0x0026(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_IsSet;                               // 0x0027(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_IsNull;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_Optional;                          // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_IsSet;                             // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_IsNull;                            // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_Optional;                                // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_IsSet;                                   // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_IsNull;                                  // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_Optional;                        // 0x002F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_IsSet;                           // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_IsNull;                          // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_Optional;                       // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_IsSet;                          // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_IsNull;                         // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_Optional;                    // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_IsSet;                       // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_IsNull;                      // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayersScore_Optional;                  // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayersScore_IsSet;                     // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayersScore_IsNull;                    // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexHostScores) == 0x000008, "Wrong alignment on FRHAPI_PexHostScores");
static_assert(sizeof(FRHAPI_PexHostScores) == 0x000040, "Wrong size on FRHAPI_PexHostScores");
static_assert(offsetof(FRHAPI_PexHostScores, OverallMatchScore_Optional) == 0x000008, "Member 'FRHAPI_PexHostScores::OverallMatchScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, OverallMatchScore_IsSet) == 0x000009, "Member 'FRHAPI_PexHostScores::OverallMatchScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, OverallMatchScore_IsNull) == 0x00000A, "Member 'FRHAPI_PexHostScores::OverallMatchScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, AppScore_Optional) == 0x00000B, "Member 'FRHAPI_PexHostScores::AppScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, AppScore_IsSet) == 0x00000C, "Member 'FRHAPI_PexHostScores::AppScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, AppScore_IsNull) == 0x00000D, "Member 'FRHAPI_PexHostScores::AppScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, GameplayScore_Optional) == 0x00000E, "Member 'FRHAPI_PexHostScores::GameplayScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, GameplayScore_IsSet) == 0x00000F, "Member 'FRHAPI_PexHostScores::GameplayScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, GameplayScore_IsNull) == 0x000010, "Member 'FRHAPI_PexHostScores::GameplayScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, NetworkScore_Optional) == 0x000011, "Member 'FRHAPI_PexHostScores::NetworkScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, NetworkScore_IsSet) == 0x000012, "Member 'FRHAPI_PexHostScores::NetworkScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, NetworkScore_IsNull) == 0x000013, "Member 'FRHAPI_PexHostScores::NetworkScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, ConnectionCountScore_Optional) == 0x000014, "Member 'FRHAPI_PexHostScores::ConnectionCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, ConnectionCountScore_IsSet) == 0x000015, "Member 'FRHAPI_PexHostScores::ConnectionCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, ConnectionCountScore_IsNull) == 0x000016, "Member 'FRHAPI_PexHostScores::ConnectionCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, FrameTimeScore_Optional) == 0x000017, "Member 'FRHAPI_PexHostScores::FrameTimeScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, FrameTimeScore_IsSet) == 0x000018, "Member 'FRHAPI_PexHostScores::FrameTimeScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, FrameTimeScore_IsNull) == 0x000019, "Member 'FRHAPI_PexHostScores::FrameTimeScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DeltaTimeScore_Optional) == 0x00001A, "Member 'FRHAPI_PexHostScores::DeltaTimeScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DeltaTimeScore_IsSet) == 0x00001B, "Member 'FRHAPI_PexHostScores::DeltaTimeScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DeltaTimeScore_IsNull) == 0x00001C, "Member 'FRHAPI_PexHostScores::DeltaTimeScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TickCountScore_Optional) == 0x00001D, "Member 'FRHAPI_PexHostScores::TickCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TickCountScore_IsSet) == 0x00001E, "Member 'FRHAPI_PexHostScores::TickCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TickCountScore_IsNull) == 0x00001F, "Member 'FRHAPI_PexHostScores::TickCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DelayedTickCountScore_Optional) == 0x000020, "Member 'FRHAPI_PexHostScores::DelayedTickCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DelayedTickCountScore_IsSet) == 0x000021, "Member 'FRHAPI_PexHostScores::DelayedTickCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, DelayedTickCountScore_IsNull) == 0x000022, "Member 'FRHAPI_PexHostScores::DelayedTickCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryWsScore_Optional) == 0x000023, "Member 'FRHAPI_PexHostScores::MemoryWsScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryWsScore_IsSet) == 0x000024, "Member 'FRHAPI_PexHostScores::MemoryWsScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryWsScore_IsNull) == 0x000025, "Member 'FRHAPI_PexHostScores::MemoryWsScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryVbScore_Optional) == 0x000026, "Member 'FRHAPI_PexHostScores::MemoryVbScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryVbScore_IsSet) == 0x000027, "Member 'FRHAPI_PexHostScores::MemoryVbScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, MemoryVbScore_IsNull) == 0x000028, "Member 'FRHAPI_PexHostScores::MemoryVbScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, CpuProcessScore_Optional) == 0x000029, "Member 'FRHAPI_PexHostScores::CpuProcessScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, CpuProcessScore_IsSet) == 0x00002A, "Member 'FRHAPI_PexHostScores::CpuProcessScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, CpuProcessScore_IsNull) == 0x00002B, "Member 'FRHAPI_PexHostScores::CpuProcessScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, PingScore_Optional) == 0x00002C, "Member 'FRHAPI_PexHostScores::PingScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, PingScore_IsSet) == 0x00002D, "Member 'FRHAPI_PexHostScores::PingScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, PingScore_IsNull) == 0x00002E, "Member 'FRHAPI_PexHostScores::PingScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, InPacketLossScore_Optional) == 0x00002F, "Member 'FRHAPI_PexHostScores::InPacketLossScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, InPacketLossScore_IsSet) == 0x000030, "Member 'FRHAPI_PexHostScores::InPacketLossScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, InPacketLossScore_IsNull) == 0x000031, "Member 'FRHAPI_PexHostScores::InPacketLossScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, OutPacketLossScore_Optional) == 0x000032, "Member 'FRHAPI_PexHostScores::OutPacketLossScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, OutPacketLossScore_IsSet) == 0x000033, "Member 'FRHAPI_PexHostScores::OutPacketLossScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, OutPacketLossScore_IsNull) == 0x000034, "Member 'FRHAPI_PexHostScores::OutPacketLossScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalDisconnectsScore_Optional) == 0x000035, "Member 'FRHAPI_PexHostScores::TotalDisconnectsScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalDisconnectsScore_IsSet) == 0x000036, "Member 'FRHAPI_PexHostScores::TotalDisconnectsScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalDisconnectsScore_IsNull) == 0x000037, "Member 'FRHAPI_PexHostScores::TotalDisconnectsScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalUniquePlayersScore_Optional) == 0x000038, "Member 'FRHAPI_PexHostScores::TotalUniquePlayersScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalUniquePlayersScore_IsSet) == 0x000039, "Member 'FRHAPI_PexHostScores::TotalUniquePlayersScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostScores, TotalUniquePlayersScore_IsNull) == 0x00003A, "Member 'FRHAPI_PexHostScores::TotalUniquePlayersScore_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexHostResponse
// 0x05C0 (0x05C8 - 0x0008)
struct FRHAPI_PexHostResponse final : public FRHAPI_Model
{
public:
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         FrameTime_Optional;                                // 0x0018(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsSet;                                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsNull;                                  // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DeltaTime_Optional;                                // 0x0048(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsSet;                                   // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsNull;                                  // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TickCount_Optional;                                // 0x0078(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsSet;                                   // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsNull;                                  // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DelayedTickCount_Optional;                         // 0x00A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsSet;                            // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsNull;                           // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryWs_Optional;                                 // 0x00D8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsSet;                                    // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsNull;                                   // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryVb_Optional;                                 // 0x0108(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsSet;                                    // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsNull;                                   // 0x0131(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         CpuProcess_Optional;                               // 0x0138(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsSet;                                  // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsNull;                                 // 0x0161(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         Ping_Optional;                                     // 0x0168(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ping_IsSet;                                        // 0x0190(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ping_IsNull;                                       // 0x0191(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPackets_Optional;                                // 0x0198(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsSet;                                   // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsNull;                                  // 0x01C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPackets_Optional;                               // 0x01C8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsSet;                                  // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsNull;                                 // 0x01F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPackets_Optional;                             // 0x01F8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsSet;                                // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsNull;                               // 0x0221(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLoss_Optional;                             // 0x0228(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsSet;                                // 0x0250(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsNull;                               // 0x0251(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLoss_Optional;                            // 0x0258(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsSet;                               // 0x0280(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsNull;                              // 0x0281(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLoss_Optional;                          // 0x0288(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsSet;                             // 0x02B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsNull;                            // 0x02B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLossPct_Optional;                          // 0x02B8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsSet;                             // 0x02E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsNull;                            // 0x02E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLossPct_Optional;                         // 0x02E8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsSet;                            // 0x0310(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsNull;                           // 0x0311(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLossPct_Optional;                       // 0x0318(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsSet;                          // 0x0340(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsNull;                         // 0x0341(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalDisconnects_Optional;                         // 0x0348(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsSet;                            // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsNull;                           // 0x0359(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        MatchDuration_Optional;                            // 0x0360(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsSet;                               // 0x0370(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsNull;                              // 0x0371(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         ConnectionCount_Optional;                          // 0x0378(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ConnectionCount_IsSet;                             // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCount_IsNull;                            // 0x03A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalUniquePlayers_Optional;                       // 0x03A8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayers_IsSet;                          // 0x03B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayers_IsNull;                         // 0x03B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexHostScores                   Scores_Optional;                                   // 0x03C0(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Scores_IsSet;                                      // 0x0400(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Scores_IsNull;                                     // 0x0401(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId_Optional;                                 // 0x0418(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0428(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0429(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x0430(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x0441(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x0448(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0458(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0459(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45A[0x6];                                      // 0x045A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x0460(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x0470(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x0471(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x0478(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x0488(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x0489(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48A[0x6];                                      // 0x048A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x0490(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x04A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x04A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A2[0x6];                                      // 0x04A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x04A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x04B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x04B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BA[0x6];                                      // 0x04BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x04C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x04D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x04D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D2[0x6];                                      // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x04D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x04E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x04EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x04F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x04F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F2[0x2];                                      // 0x04F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x04F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x04F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x04F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FA[0x2];                                      // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x04FC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x050C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x050D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50E[0x2];                                      // 0x050E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  OwningPlayerUuid_Optional;                         // 0x0510(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x0520(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x0521(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_522[0x6];                                      // 0x0522(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0528(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0538(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x0539(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53A[0x6];                                      // 0x053A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceInfo_Optional;                               // 0x0540(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsSet;                                  // 0x0550(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsNull;                                 // 0x0551(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x0552(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0553(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x0554(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_555[0x3];                                      // 0x0555(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0558(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x05A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x05A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AA[0x6];                                      // 0x05AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MachineClass_Optional;                             // 0x05B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsSet;                                // 0x05C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsNull;                               // 0x05C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C2[0x6];                                      // 0x05C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexHostResponse) == 0x000008, "Wrong alignment on FRHAPI_PexHostResponse");
static_assert(sizeof(FRHAPI_PexHostResponse) == 0x0005C8, "Wrong size on FRHAPI_PexHostResponse");
static_assert(offsetof(FRHAPI_PexHostResponse, CreatedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_PexHostResponse::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CreatedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_PexHostResponse::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, FrameTime_Optional) == 0x000018, "Member 'FRHAPI_PexHostResponse::FrameTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, FrameTime_IsSet) == 0x000040, "Member 'FRHAPI_PexHostResponse::FrameTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, FrameTime_IsNull) == 0x000041, "Member 'FRHAPI_PexHostResponse::FrameTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeltaTime_Optional) == 0x000048, "Member 'FRHAPI_PexHostResponse::DeltaTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeltaTime_IsSet) == 0x000070, "Member 'FRHAPI_PexHostResponse::DeltaTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeltaTime_IsNull) == 0x000071, "Member 'FRHAPI_PexHostResponse::DeltaTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TickCount_Optional) == 0x000078, "Member 'FRHAPI_PexHostResponse::TickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TickCount_IsSet) == 0x0000A0, "Member 'FRHAPI_PexHostResponse::TickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TickCount_IsNull) == 0x0000A1, "Member 'FRHAPI_PexHostResponse::TickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DelayedTickCount_Optional) == 0x0000A8, "Member 'FRHAPI_PexHostResponse::DelayedTickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DelayedTickCount_IsSet) == 0x0000D0, "Member 'FRHAPI_PexHostResponse::DelayedTickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DelayedTickCount_IsNull) == 0x0000D1, "Member 'FRHAPI_PexHostResponse::DelayedTickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryWs_Optional) == 0x0000D8, "Member 'FRHAPI_PexHostResponse::MemoryWs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryWs_IsSet) == 0x000100, "Member 'FRHAPI_PexHostResponse::MemoryWs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryWs_IsNull) == 0x000101, "Member 'FRHAPI_PexHostResponse::MemoryWs_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryVb_Optional) == 0x000108, "Member 'FRHAPI_PexHostResponse::MemoryVb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryVb_IsSet) == 0x000130, "Member 'FRHAPI_PexHostResponse::MemoryVb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MemoryVb_IsNull) == 0x000131, "Member 'FRHAPI_PexHostResponse::MemoryVb_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CpuProcess_Optional) == 0x000138, "Member 'FRHAPI_PexHostResponse::CpuProcess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CpuProcess_IsSet) == 0x000160, "Member 'FRHAPI_PexHostResponse::CpuProcess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CpuProcess_IsNull) == 0x000161, "Member 'FRHAPI_PexHostResponse::CpuProcess_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Ping_Optional) == 0x000168, "Member 'FRHAPI_PexHostResponse::Ping_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Ping_IsSet) == 0x000190, "Member 'FRHAPI_PexHostResponse::Ping_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Ping_IsNull) == 0x000191, "Member 'FRHAPI_PexHostResponse::Ping_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPackets_Optional) == 0x000198, "Member 'FRHAPI_PexHostResponse::InPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPackets_IsSet) == 0x0001C0, "Member 'FRHAPI_PexHostResponse::InPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPackets_IsNull) == 0x0001C1, "Member 'FRHAPI_PexHostResponse::InPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPackets_Optional) == 0x0001C8, "Member 'FRHAPI_PexHostResponse::OutPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPackets_IsSet) == 0x0001F0, "Member 'FRHAPI_PexHostResponse::OutPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPackets_IsNull) == 0x0001F1, "Member 'FRHAPI_PexHostResponse::OutPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPackets_Optional) == 0x0001F8, "Member 'FRHAPI_PexHostResponse::TotalPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPackets_IsSet) == 0x000220, "Member 'FRHAPI_PexHostResponse::TotalPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPackets_IsNull) == 0x000221, "Member 'FRHAPI_PexHostResponse::TotalPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLoss_Optional) == 0x000228, "Member 'FRHAPI_PexHostResponse::InPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLoss_IsSet) == 0x000250, "Member 'FRHAPI_PexHostResponse::InPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLoss_IsNull) == 0x000251, "Member 'FRHAPI_PexHostResponse::InPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLoss_Optional) == 0x000258, "Member 'FRHAPI_PexHostResponse::OutPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLoss_IsSet) == 0x000280, "Member 'FRHAPI_PexHostResponse::OutPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLoss_IsNull) == 0x000281, "Member 'FRHAPI_PexHostResponse::OutPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLoss_Optional) == 0x000288, "Member 'FRHAPI_PexHostResponse::TotalPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLoss_IsSet) == 0x0002B0, "Member 'FRHAPI_PexHostResponse::TotalPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLoss_IsNull) == 0x0002B1, "Member 'FRHAPI_PexHostResponse::TotalPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLossPct_Optional) == 0x0002B8, "Member 'FRHAPI_PexHostResponse::InPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLossPct_IsSet) == 0x0002E0, "Member 'FRHAPI_PexHostResponse::InPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, InPacketLossPct_IsNull) == 0x0002E1, "Member 'FRHAPI_PexHostResponse::InPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLossPct_Optional) == 0x0002E8, "Member 'FRHAPI_PexHostResponse::OutPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLossPct_IsSet) == 0x000310, "Member 'FRHAPI_PexHostResponse::OutPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OutPacketLossPct_IsNull) == 0x000311, "Member 'FRHAPI_PexHostResponse::OutPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLossPct_Optional) == 0x000318, "Member 'FRHAPI_PexHostResponse::TotalPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLossPct_IsSet) == 0x000340, "Member 'FRHAPI_PexHostResponse::TotalPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalPacketLossPct_IsNull) == 0x000341, "Member 'FRHAPI_PexHostResponse::TotalPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalDisconnects_Optional) == 0x000348, "Member 'FRHAPI_PexHostResponse::TotalDisconnects_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalDisconnects_IsSet) == 0x000358, "Member 'FRHAPI_PexHostResponse::TotalDisconnects_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalDisconnects_IsNull) == 0x000359, "Member 'FRHAPI_PexHostResponse::TotalDisconnects_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchDuration_Optional) == 0x000360, "Member 'FRHAPI_PexHostResponse::MatchDuration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchDuration_IsSet) == 0x000370, "Member 'FRHAPI_PexHostResponse::MatchDuration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchDuration_IsNull) == 0x000371, "Member 'FRHAPI_PexHostResponse::MatchDuration_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ConnectionCount_Optional) == 0x000378, "Member 'FRHAPI_PexHostResponse::ConnectionCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ConnectionCount_IsSet) == 0x0003A0, "Member 'FRHAPI_PexHostResponse::ConnectionCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ConnectionCount_IsNull) == 0x0003A1, "Member 'FRHAPI_PexHostResponse::ConnectionCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalUniquePlayers_Optional) == 0x0003A8, "Member 'FRHAPI_PexHostResponse::TotalUniquePlayers_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalUniquePlayers_IsSet) == 0x0003B8, "Member 'FRHAPI_PexHostResponse::TotalUniquePlayers_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, TotalUniquePlayers_IsNull) == 0x0003B9, "Member 'FRHAPI_PexHostResponse::TotalUniquePlayers_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Scores_Optional) == 0x0003C0, "Member 'FRHAPI_PexHostResponse::Scores_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Scores_IsSet) == 0x000400, "Member 'FRHAPI_PexHostResponse::Scores_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Scores_IsNull) == 0x000401, "Member 'FRHAPI_PexHostResponse::Scores_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchID) == 0x000408, "Member 'FRHAPI_PexHostResponse::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, RegionId_Optional) == 0x000418, "Member 'FRHAPI_PexHostResponse::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, RegionId_IsSet) == 0x000428, "Member 'FRHAPI_PexHostResponse::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, RegionId_IsNull) == 0x000429, "Member 'FRHAPI_PexHostResponse::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ServerId_Optional) == 0x000430, "Member 'FRHAPI_PexHostResponse::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ServerId_IsSet) == 0x000440, "Member 'FRHAPI_PexHostResponse::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ServerId_IsNull) == 0x000441, "Member 'FRHAPI_PexHostResponse::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AllocationId_Optional) == 0x000448, "Member 'FRHAPI_PexHostResponse::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AllocationId_IsSet) == 0x000458, "Member 'FRHAPI_PexHostResponse::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AllocationId_IsNull) == 0x000459, "Member 'FRHAPI_PexHostResponse::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterProvider_Optional) == 0x000460, "Member 'FRHAPI_PexHostResponse::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterProvider_IsSet) == 0x000470, "Member 'FRHAPI_PexHostResponse::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterProvider_IsNull) == 0x000471, "Member 'FRHAPI_PexHostResponse::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterLocation_Optional) == 0x000478, "Member 'FRHAPI_PexHostResponse::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterLocation_IsSet) == 0x000488, "Member 'FRHAPI_PexHostResponse::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DatacenterLocation_IsNull) == 0x000489, "Member 'FRHAPI_PexHostResponse::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AddressIp_Optional) == 0x000490, "Member 'FRHAPI_PexHostResponse::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AddressIp_IsSet) == 0x0004A0, "Member 'FRHAPI_PexHostResponse::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, AddressIp_IsNull) == 0x0004A1, "Member 'FRHAPI_PexHostResponse::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MapName_Optional) == 0x0004A8, "Member 'FRHAPI_PexHostResponse::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MapName_IsSet) == 0x0004B8, "Member 'FRHAPI_PexHostResponse::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MapName_IsNull) == 0x0004B9, "Member 'FRHAPI_PexHostResponse::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, GameMode_Optional) == 0x0004C0, "Member 'FRHAPI_PexHostResponse::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, GameMode_IsSet) == 0x0004D0, "Member 'FRHAPI_PexHostResponse::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, GameMode_IsNull) == 0x0004D1, "Member 'FRHAPI_PexHostResponse::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchmakingProfileId_Optional) == 0x0004D8, "Member 'FRHAPI_PexHostResponse::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchmakingProfileId_IsSet) == 0x0004E8, "Member 'FRHAPI_PexHostResponse::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MatchmakingProfileId_IsNull) == 0x0004E9, "Member 'FRHAPI_PexHostResponse::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedTeamSize_Optional) == 0x0004EC, "Member 'FRHAPI_PexHostResponse::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedTeamSize_IsSet) == 0x0004F0, "Member 'FRHAPI_PexHostResponse::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedTeamSize_IsNull) == 0x0004F1, "Member 'FRHAPI_PexHostResponse::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedPlayerCount_Optional) == 0x0004F4, "Member 'FRHAPI_PexHostResponse::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedPlayerCount_IsSet) == 0x0004F8, "Member 'FRHAPI_PexHostResponse::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, ExpectedPlayerCount_IsNull) == 0x0004F9, "Member 'FRHAPI_PexHostResponse::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, HostPlayerUuid_Optional) == 0x0004FC, "Member 'FRHAPI_PexHostResponse::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, HostPlayerUuid_IsSet) == 0x00050C, "Member 'FRHAPI_PexHostResponse::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, HostPlayerUuid_IsNull) == 0x00050D, "Member 'FRHAPI_PexHostResponse::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OwningPlayerUuid_Optional) == 0x000510, "Member 'FRHAPI_PexHostResponse::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OwningPlayerUuid_IsSet) == 0x000520, "Member 'FRHAPI_PexHostResponse::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, OwningPlayerUuid_IsNull) == 0x000521, "Member 'FRHAPI_PexHostResponse::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Version_Optional) == 0x000528, "Member 'FRHAPI_PexHostResponse::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Version_IsSet) == 0x000538, "Member 'FRHAPI_PexHostResponse::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, Version_IsNull) == 0x000539, "Member 'FRHAPI_PexHostResponse::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeviceInfo_Optional) == 0x000540, "Member 'FRHAPI_PexHostResponse::DeviceInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeviceInfo_IsSet) == 0x000550, "Member 'FRHAPI_PexHostResponse::DeviceInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, DeviceInfo_IsNull) == 0x000551, "Member 'FRHAPI_PexHostResponse::DeviceInfo_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, PlatformId_Optional) == 0x000552, "Member 'FRHAPI_PexHostResponse::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, PlatformId_IsSet) == 0x000553, "Member 'FRHAPI_PexHostResponse::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, PlatformId_IsNull) == 0x000554, "Member 'FRHAPI_PexHostResponse::PlatformId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CustomData_Optional) == 0x000558, "Member 'FRHAPI_PexHostResponse::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CustomData_IsSet) == 0x0005A8, "Member 'FRHAPI_PexHostResponse::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, CustomData_IsNull) == 0x0005A9, "Member 'FRHAPI_PexHostResponse::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MachineClass_Optional) == 0x0005B0, "Member 'FRHAPI_PexHostResponse::MachineClass_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MachineClass_IsSet) == 0x0005C0, "Member 'FRHAPI_PexHostResponse::MachineClass_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostResponse, MachineClass_IsNull) == 0x0005C1, "Member 'FRHAPI_PexHostResponse::MachineClass_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BlockedPlayer
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_BlockedPlayer final : public FRHAPI_Model
{
public:
	struct FGuid                                  BlockedPlayerUuid;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModifiedOn;                                    // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_BlockedPlayer) == 0x000008, "Wrong alignment on FRHAPI_BlockedPlayer");
static_assert(sizeof(FRHAPI_BlockedPlayer) == 0x000020, "Wrong size on FRHAPI_BlockedPlayer");
static_assert(offsetof(FRHAPI_BlockedPlayer, BlockedPlayerUuid) == 0x000008, "Member 'FRHAPI_BlockedPlayer::BlockedPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_BlockedPlayer, LastModifiedOn) == 0x000018, "Member 'FRHAPI_BlockedPlayer::LastModifiedOn' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_VoipTokenResponse
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_VoipTokenResponse final : public FRHAPI_Model
{
public:
	class FString                                 Token;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Issuer;                                            // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Server;                                            // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChannelName_Optional;                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChannelName_IsSet;                                 // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_VoipTokenResponse) == 0x000008, "Wrong alignment on FRHAPI_VoipTokenResponse");
static_assert(sizeof(FRHAPI_VoipTokenResponse) == 0x000050, "Wrong size on FRHAPI_VoipTokenResponse");
static_assert(offsetof(FRHAPI_VoipTokenResponse, Token) == 0x000008, "Member 'FRHAPI_VoipTokenResponse::Token' has a wrong offset!");
static_assert(offsetof(FRHAPI_VoipTokenResponse, Issuer) == 0x000018, "Member 'FRHAPI_VoipTokenResponse::Issuer' has a wrong offset!");
static_assert(offsetof(FRHAPI_VoipTokenResponse, Server) == 0x000028, "Member 'FRHAPI_VoipTokenResponse::Server' has a wrong offset!");
static_assert(offsetof(FRHAPI_VoipTokenResponse, ChannelName_Optional) == 0x000038, "Member 'FRHAPI_VoipTokenResponse::ChannelName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_VoipTokenResponse, ChannelName_IsSet) == 0x000048, "Member 'FRHAPI_VoipTokenResponse::ChannelName_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerPresenceUpdateSelf
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_PlayerPresenceUpdateSelf final : public FRHAPI_Model
{
public:
	ERHAPI_OnlineStatus                           Status_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message_Optional;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Message_IsSet;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoNotDisturb_Optional;                             // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoNotDisturb_IsSet;                                // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerPresenceUpdateSelf) == 0x000008, "Wrong alignment on FRHAPI_PlayerPresenceUpdateSelf");
static_assert(sizeof(FRHAPI_PlayerPresenceUpdateSelf) == 0x000080, "Wrong size on FRHAPI_PlayerPresenceUpdateSelf");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, Status_Optional) == 0x000008, "Member 'FRHAPI_PlayerPresenceUpdateSelf::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, Status_IsSet) == 0x000009, "Member 'FRHAPI_PlayerPresenceUpdateSelf::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, Message_Optional) == 0x000010, "Member 'FRHAPI_PlayerPresenceUpdateSelf::Message_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, Message_IsSet) == 0x000020, "Member 'FRHAPI_PlayerPresenceUpdateSelf::Message_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, DoNotDisturb_Optional) == 0x000021, "Member 'FRHAPI_PlayerPresenceUpdateSelf::DoNotDisturb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, DoNotDisturb_IsSet) == 0x000022, "Member 'FRHAPI_PlayerPresenceUpdateSelf::DoNotDisturb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, CustomData_Optional) == 0x000028, "Member 'FRHAPI_PlayerPresenceUpdateSelf::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresenceUpdateSelf, CustomData_IsSet) == 0x000078, "Member 'FRHAPI_PlayerPresenceUpdateSelf::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideSectionFull
// 0x0360 (0x0368 - 0x0008)
struct FRHAPI_GuideSectionFull final : public FRHAPI_Model
{
public:
	class FString                                 SectionType;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortDesc_Optional;                                // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsSet;                                   // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsNull;                                  // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content_Optional;                                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsSet;                                     // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsNull;                                    // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref1_Optional;                                     // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsSet;                                        // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsNull;                                       // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref2_Optional;                                     // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsSet;                                        // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsNull;                                       // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref3_Optional;                                     // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsSet;                                        // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsNull;                                       // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref4_Optional;                                     // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsSet;                                        // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsNull;                                       // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref5_Optional;                                     // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsSet;                                        // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsNull;                                       // 0x00C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref6_Optional;                                     // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsSet;                                        // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsNull;                                       // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref7_Optional;                                     // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsSet;                                        // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsNull;                                       // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref8_Optional;                                     // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsSet;                                        // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsNull;                                       // 0x0111(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref9_Optional;                                     // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsSet;                                        // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsNull;                                       // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref10_Optional;                                    // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsSet;                                       // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsNull;                                      // 0x0141(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref11_Optional;                                    // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsSet;                                       // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsNull;                                      // 0x0159(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref12_Optional;                                    // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsSet;                                       // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsNull;                                      // 0x0171(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref13_Optional;                                    // 0x0178(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsSet;                                       // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsNull;                                      // 0x0189(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref14_Optional;                                    // 0x0190(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsSet;                                       // 0x01A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsNull;                                      // 0x01A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref15_Optional;                                    // 0x01A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsSet;                                       // 0x01B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsNull;                                      // 0x01B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref16_Optional;                                    // 0x01C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsSet;                                       // 0x01D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsNull;                                      // 0x01D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref17_Optional;                                    // 0x01D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsSet;                                       // 0x01E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsNull;                                      // 0x01E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref18_Optional;                                    // 0x01F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsSet;                                       // 0x0200(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsNull;                                      // 0x0201(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref19_Optional;                                    // 0x0208(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsSet;                                       // 0x0218(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsNull;                                      // 0x0219(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref20_Optional;                                    // 0x0220(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsSet;                                       // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsNull;                                      // 0x0231(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref21_Optional;                                    // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsSet;                                       // 0x0248(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsNull;                                      // 0x0249(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref22_Optional;                                    // 0x0250(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsSet;                                       // 0x0260(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsNull;                                      // 0x0261(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref23_Optional;                                    // 0x0268(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsSet;                                       // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsNull;                                      // 0x0279(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A[0x6];                                      // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref24_Optional;                                    // 0x0280(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsSet;                                       // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsNull;                                      // 0x0291(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref25_Optional;                                    // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsSet;                                       // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsNull;                                      // 0x02A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref26_Optional;                                    // 0x02B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsSet;                                       // 0x02C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsNull;                                      // 0x02C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref27_Optional;                                    // 0x02C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsSet;                                       // 0x02D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsNull;                                      // 0x02D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref28_Optional;                                    // 0x02E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsSet;                                       // 0x02F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsNull;                                      // 0x02F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref29_Optional;                                    // 0x02F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsSet;                                       // 0x0308(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsNull;                                      // 0x0309(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref30_Optional;                                    // 0x0310(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsSet;                                       // 0x0320(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsNull;                                      // 0x0321(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref31_Optional;                                    // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsSet;                                       // 0x0338(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsNull;                                      // 0x0339(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref32_Optional;                                    // 0x0340(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsSet;                                       // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsNull;                                      // 0x0351(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Modified;                                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_GuideSectionFull) == 0x000008, "Wrong alignment on FRHAPI_GuideSectionFull");
static_assert(sizeof(FRHAPI_GuideSectionFull) == 0x000368, "Wrong size on FRHAPI_GuideSectionFull");
static_assert(offsetof(FRHAPI_GuideSectionFull, SectionType) == 0x000008, "Member 'FRHAPI_GuideSectionFull::SectionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Name) == 0x000018, "Member 'FRHAPI_GuideSectionFull::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, ShortDesc_Optional) == 0x000028, "Member 'FRHAPI_GuideSectionFull::ShortDesc_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, ShortDesc_IsSet) == 0x000038, "Member 'FRHAPI_GuideSectionFull::ShortDesc_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, ShortDesc_IsNull) == 0x000039, "Member 'FRHAPI_GuideSectionFull::ShortDesc_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Content_Optional) == 0x000040, "Member 'FRHAPI_GuideSectionFull::Content_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Content_IsSet) == 0x000050, "Member 'FRHAPI_GuideSectionFull::Content_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Content_IsNull) == 0x000051, "Member 'FRHAPI_GuideSectionFull::Content_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref1_Optional) == 0x000058, "Member 'FRHAPI_GuideSectionFull::Ref1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref1_IsSet) == 0x000068, "Member 'FRHAPI_GuideSectionFull::Ref1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref1_IsNull) == 0x000069, "Member 'FRHAPI_GuideSectionFull::Ref1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref2_Optional) == 0x000070, "Member 'FRHAPI_GuideSectionFull::Ref2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref2_IsSet) == 0x000080, "Member 'FRHAPI_GuideSectionFull::Ref2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref2_IsNull) == 0x000081, "Member 'FRHAPI_GuideSectionFull::Ref2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref3_Optional) == 0x000088, "Member 'FRHAPI_GuideSectionFull::Ref3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref3_IsSet) == 0x000098, "Member 'FRHAPI_GuideSectionFull::Ref3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref3_IsNull) == 0x000099, "Member 'FRHAPI_GuideSectionFull::Ref3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref4_Optional) == 0x0000A0, "Member 'FRHAPI_GuideSectionFull::Ref4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref4_IsSet) == 0x0000B0, "Member 'FRHAPI_GuideSectionFull::Ref4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref4_IsNull) == 0x0000B1, "Member 'FRHAPI_GuideSectionFull::Ref4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref5_Optional) == 0x0000B8, "Member 'FRHAPI_GuideSectionFull::Ref5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref5_IsSet) == 0x0000C8, "Member 'FRHAPI_GuideSectionFull::Ref5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref5_IsNull) == 0x0000C9, "Member 'FRHAPI_GuideSectionFull::Ref5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref6_Optional) == 0x0000D0, "Member 'FRHAPI_GuideSectionFull::Ref6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref6_IsSet) == 0x0000E0, "Member 'FRHAPI_GuideSectionFull::Ref6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref6_IsNull) == 0x0000E1, "Member 'FRHAPI_GuideSectionFull::Ref6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref7_Optional) == 0x0000E8, "Member 'FRHAPI_GuideSectionFull::Ref7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref7_IsSet) == 0x0000F8, "Member 'FRHAPI_GuideSectionFull::Ref7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref7_IsNull) == 0x0000F9, "Member 'FRHAPI_GuideSectionFull::Ref7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref8_Optional) == 0x000100, "Member 'FRHAPI_GuideSectionFull::Ref8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref8_IsSet) == 0x000110, "Member 'FRHAPI_GuideSectionFull::Ref8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref8_IsNull) == 0x000111, "Member 'FRHAPI_GuideSectionFull::Ref8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref9_Optional) == 0x000118, "Member 'FRHAPI_GuideSectionFull::Ref9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref9_IsSet) == 0x000128, "Member 'FRHAPI_GuideSectionFull::Ref9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref9_IsNull) == 0x000129, "Member 'FRHAPI_GuideSectionFull::Ref9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref10_Optional) == 0x000130, "Member 'FRHAPI_GuideSectionFull::Ref10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref10_IsSet) == 0x000140, "Member 'FRHAPI_GuideSectionFull::Ref10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref10_IsNull) == 0x000141, "Member 'FRHAPI_GuideSectionFull::Ref10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref11_Optional) == 0x000148, "Member 'FRHAPI_GuideSectionFull::Ref11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref11_IsSet) == 0x000158, "Member 'FRHAPI_GuideSectionFull::Ref11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref11_IsNull) == 0x000159, "Member 'FRHAPI_GuideSectionFull::Ref11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref12_Optional) == 0x000160, "Member 'FRHAPI_GuideSectionFull::Ref12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref12_IsSet) == 0x000170, "Member 'FRHAPI_GuideSectionFull::Ref12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref12_IsNull) == 0x000171, "Member 'FRHAPI_GuideSectionFull::Ref12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref13_Optional) == 0x000178, "Member 'FRHAPI_GuideSectionFull::Ref13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref13_IsSet) == 0x000188, "Member 'FRHAPI_GuideSectionFull::Ref13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref13_IsNull) == 0x000189, "Member 'FRHAPI_GuideSectionFull::Ref13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref14_Optional) == 0x000190, "Member 'FRHAPI_GuideSectionFull::Ref14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref14_IsSet) == 0x0001A0, "Member 'FRHAPI_GuideSectionFull::Ref14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref14_IsNull) == 0x0001A1, "Member 'FRHAPI_GuideSectionFull::Ref14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref15_Optional) == 0x0001A8, "Member 'FRHAPI_GuideSectionFull::Ref15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref15_IsSet) == 0x0001B8, "Member 'FRHAPI_GuideSectionFull::Ref15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref15_IsNull) == 0x0001B9, "Member 'FRHAPI_GuideSectionFull::Ref15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref16_Optional) == 0x0001C0, "Member 'FRHAPI_GuideSectionFull::Ref16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref16_IsSet) == 0x0001D0, "Member 'FRHAPI_GuideSectionFull::Ref16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref16_IsNull) == 0x0001D1, "Member 'FRHAPI_GuideSectionFull::Ref16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref17_Optional) == 0x0001D8, "Member 'FRHAPI_GuideSectionFull::Ref17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref17_IsSet) == 0x0001E8, "Member 'FRHAPI_GuideSectionFull::Ref17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref17_IsNull) == 0x0001E9, "Member 'FRHAPI_GuideSectionFull::Ref17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref18_Optional) == 0x0001F0, "Member 'FRHAPI_GuideSectionFull::Ref18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref18_IsSet) == 0x000200, "Member 'FRHAPI_GuideSectionFull::Ref18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref18_IsNull) == 0x000201, "Member 'FRHAPI_GuideSectionFull::Ref18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref19_Optional) == 0x000208, "Member 'FRHAPI_GuideSectionFull::Ref19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref19_IsSet) == 0x000218, "Member 'FRHAPI_GuideSectionFull::Ref19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref19_IsNull) == 0x000219, "Member 'FRHAPI_GuideSectionFull::Ref19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref20_Optional) == 0x000220, "Member 'FRHAPI_GuideSectionFull::Ref20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref20_IsSet) == 0x000230, "Member 'FRHAPI_GuideSectionFull::Ref20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref20_IsNull) == 0x000231, "Member 'FRHAPI_GuideSectionFull::Ref20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref21_Optional) == 0x000238, "Member 'FRHAPI_GuideSectionFull::Ref21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref21_IsSet) == 0x000248, "Member 'FRHAPI_GuideSectionFull::Ref21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref21_IsNull) == 0x000249, "Member 'FRHAPI_GuideSectionFull::Ref21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref22_Optional) == 0x000250, "Member 'FRHAPI_GuideSectionFull::Ref22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref22_IsSet) == 0x000260, "Member 'FRHAPI_GuideSectionFull::Ref22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref22_IsNull) == 0x000261, "Member 'FRHAPI_GuideSectionFull::Ref22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref23_Optional) == 0x000268, "Member 'FRHAPI_GuideSectionFull::Ref23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref23_IsSet) == 0x000278, "Member 'FRHAPI_GuideSectionFull::Ref23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref23_IsNull) == 0x000279, "Member 'FRHAPI_GuideSectionFull::Ref23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref24_Optional) == 0x000280, "Member 'FRHAPI_GuideSectionFull::Ref24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref24_IsSet) == 0x000290, "Member 'FRHAPI_GuideSectionFull::Ref24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref24_IsNull) == 0x000291, "Member 'FRHAPI_GuideSectionFull::Ref24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref25_Optional) == 0x000298, "Member 'FRHAPI_GuideSectionFull::Ref25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref25_IsSet) == 0x0002A8, "Member 'FRHAPI_GuideSectionFull::Ref25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref25_IsNull) == 0x0002A9, "Member 'FRHAPI_GuideSectionFull::Ref25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref26_Optional) == 0x0002B0, "Member 'FRHAPI_GuideSectionFull::Ref26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref26_IsSet) == 0x0002C0, "Member 'FRHAPI_GuideSectionFull::Ref26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref26_IsNull) == 0x0002C1, "Member 'FRHAPI_GuideSectionFull::Ref26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref27_Optional) == 0x0002C8, "Member 'FRHAPI_GuideSectionFull::Ref27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref27_IsSet) == 0x0002D8, "Member 'FRHAPI_GuideSectionFull::Ref27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref27_IsNull) == 0x0002D9, "Member 'FRHAPI_GuideSectionFull::Ref27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref28_Optional) == 0x0002E0, "Member 'FRHAPI_GuideSectionFull::Ref28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref28_IsSet) == 0x0002F0, "Member 'FRHAPI_GuideSectionFull::Ref28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref28_IsNull) == 0x0002F1, "Member 'FRHAPI_GuideSectionFull::Ref28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref29_Optional) == 0x0002F8, "Member 'FRHAPI_GuideSectionFull::Ref29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref29_IsSet) == 0x000308, "Member 'FRHAPI_GuideSectionFull::Ref29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref29_IsNull) == 0x000309, "Member 'FRHAPI_GuideSectionFull::Ref29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref30_Optional) == 0x000310, "Member 'FRHAPI_GuideSectionFull::Ref30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref30_IsSet) == 0x000320, "Member 'FRHAPI_GuideSectionFull::Ref30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref30_IsNull) == 0x000321, "Member 'FRHAPI_GuideSectionFull::Ref30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref31_Optional) == 0x000328, "Member 'FRHAPI_GuideSectionFull::Ref31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref31_IsSet) == 0x000338, "Member 'FRHAPI_GuideSectionFull::Ref31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref31_IsNull) == 0x000339, "Member 'FRHAPI_GuideSectionFull::Ref31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref32_Optional) == 0x000340, "Member 'FRHAPI_GuideSectionFull::Ref32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref32_IsSet) == 0x000350, "Member 'FRHAPI_GuideSectionFull::Ref32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Ref32_IsNull) == 0x000351, "Member 'FRHAPI_GuideSectionFull::Ref32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Created) == 0x000358, "Member 'FRHAPI_GuideSectionFull::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionFull, Modified) == 0x000360, "Member 'FRHAPI_GuideSectionFull::Modified' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideFull
// 0x03E8 (0x03F0 - 0x0008)
struct FRHAPI_GuideFull final : public FRHAPI_Model
{
public:
	class FString                                 GuideType;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortDesc_Optional;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsSet;                                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsNull;                                  // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PromotionPriority_Optional;                        // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PromotionPriority_IsSet;                           // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref1_Optional;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsSet;                                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsNull;                                       // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref2_Optional;                                     // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsSet;                                        // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsNull;                                       // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref3_Optional;                                     // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsSet;                                        // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsNull;                                       // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref4_Optional;                                     // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsSet;                                        // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsNull;                                       // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref5_Optional;                                     // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsSet;                                        // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsNull;                                       // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref6_Optional;                                     // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsSet;                                        // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsNull;                                       // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref7_Optional;                                     // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsSet;                                        // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsNull;                                       // 0x0109(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref8_Optional;                                     // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsSet;                                        // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsNull;                                       // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref9_Optional;                                     // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsSet;                                        // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsNull;                                       // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref10_Optional;                                    // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsSet;                                       // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsNull;                                      // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref11_Optional;                                    // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsSet;                                       // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsNull;                                      // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref12_Optional;                                    // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsSet;                                       // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsNull;                                      // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref13_Optional;                                    // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsSet;                                       // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsNull;                                      // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref14_Optional;                                    // 0x01A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsSet;                                       // 0x01B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsNull;                                      // 0x01B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref15_Optional;                                    // 0x01B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsSet;                                       // 0x01C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsNull;                                      // 0x01C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref16_Optional;                                    // 0x01D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsSet;                                       // 0x01E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsNull;                                      // 0x01E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref17_Optional;                                    // 0x01E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsSet;                                       // 0x01F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsNull;                                      // 0x01F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref18_Optional;                                    // 0x0200(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsSet;                                       // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsNull;                                      // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref19_Optional;                                    // 0x0218(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsSet;                                       // 0x0228(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsNull;                                      // 0x0229(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref20_Optional;                                    // 0x0230(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsSet;                                       // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsNull;                                      // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref21_Optional;                                    // 0x0248(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsSet;                                       // 0x0258(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsNull;                                      // 0x0259(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref22_Optional;                                    // 0x0260(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsSet;                                       // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsNull;                                      // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref23_Optional;                                    // 0x0278(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsSet;                                       // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsNull;                                      // 0x0289(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref24_Optional;                                    // 0x0290(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsSet;                                       // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsNull;                                      // 0x02A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref25_Optional;                                    // 0x02A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsSet;                                       // 0x02B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsNull;                                      // 0x02B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref26_Optional;                                    // 0x02C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsSet;                                       // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsNull;                                      // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref27_Optional;                                    // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsSet;                                       // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsNull;                                      // 0x02E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref28_Optional;                                    // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsSet;                                       // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsNull;                                      // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref29_Optional;                                    // 0x0308(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsSet;                                       // 0x0318(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsNull;                                      // 0x0319(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref30_Optional;                                    // 0x0320(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsSet;                                       // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsNull;                                      // 0x0331(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref31_Optional;                                    // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsSet;                                       // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsNull;                                      // 0x0349(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref32_Optional;                                    // 0x0350(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsSet;                                       // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsNull;                                      // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GuideId;                                           // 0x0364(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_GuideEntityType                        OwnerEntityType;                                   // 0x0374(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwnerEntityId;                                     // 0x0378(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Modified;                                          // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Favorites_Optional;                                // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Favorites_IsSet;                                   // 0x039C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Upvotes_Optional;                                  // 0x03A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Upvotes_IsSet;                                     // 0x03A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Downvotes_Optional;                                // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Downvotes_IsSet;                                   // 0x03AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Etag;                                              // 0x03B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content_Optional;                                  // 0x03C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsSet;                                     // 0x03D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsNull;                                    // 0x03D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_GuideSectionFull>        Sections_Optional;                                 // 0x03D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sections_IsSet;                                    // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_GuideFull) == 0x000008, "Wrong alignment on FRHAPI_GuideFull");
static_assert(sizeof(FRHAPI_GuideFull) == 0x0003F0, "Wrong size on FRHAPI_GuideFull");
static_assert(offsetof(FRHAPI_GuideFull, GuideType) == 0x000008, "Member 'FRHAPI_GuideFull::GuideType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Language) == 0x000018, "Member 'FRHAPI_GuideFull::Language' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, GameVersion) == 0x000028, "Member 'FRHAPI_GuideFull::GameVersion' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Name) == 0x000038, "Member 'FRHAPI_GuideFull::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, ShortDesc_Optional) == 0x000048, "Member 'FRHAPI_GuideFull::ShortDesc_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, ShortDesc_IsSet) == 0x000058, "Member 'FRHAPI_GuideFull::ShortDesc_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, ShortDesc_IsNull) == 0x000059, "Member 'FRHAPI_GuideFull::ShortDesc_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, PromotionPriority_Optional) == 0x00005C, "Member 'FRHAPI_GuideFull::PromotionPriority_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, PromotionPriority_IsSet) == 0x000060, "Member 'FRHAPI_GuideFull::PromotionPriority_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref1_Optional) == 0x000068, "Member 'FRHAPI_GuideFull::Ref1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref1_IsSet) == 0x000078, "Member 'FRHAPI_GuideFull::Ref1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref1_IsNull) == 0x000079, "Member 'FRHAPI_GuideFull::Ref1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref2_Optional) == 0x000080, "Member 'FRHAPI_GuideFull::Ref2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref2_IsSet) == 0x000090, "Member 'FRHAPI_GuideFull::Ref2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref2_IsNull) == 0x000091, "Member 'FRHAPI_GuideFull::Ref2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref3_Optional) == 0x000098, "Member 'FRHAPI_GuideFull::Ref3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref3_IsSet) == 0x0000A8, "Member 'FRHAPI_GuideFull::Ref3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref3_IsNull) == 0x0000A9, "Member 'FRHAPI_GuideFull::Ref3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref4_Optional) == 0x0000B0, "Member 'FRHAPI_GuideFull::Ref4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref4_IsSet) == 0x0000C0, "Member 'FRHAPI_GuideFull::Ref4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref4_IsNull) == 0x0000C1, "Member 'FRHAPI_GuideFull::Ref4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref5_Optional) == 0x0000C8, "Member 'FRHAPI_GuideFull::Ref5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref5_IsSet) == 0x0000D8, "Member 'FRHAPI_GuideFull::Ref5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref5_IsNull) == 0x0000D9, "Member 'FRHAPI_GuideFull::Ref5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref6_Optional) == 0x0000E0, "Member 'FRHAPI_GuideFull::Ref6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref6_IsSet) == 0x0000F0, "Member 'FRHAPI_GuideFull::Ref6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref6_IsNull) == 0x0000F1, "Member 'FRHAPI_GuideFull::Ref6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref7_Optional) == 0x0000F8, "Member 'FRHAPI_GuideFull::Ref7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref7_IsSet) == 0x000108, "Member 'FRHAPI_GuideFull::Ref7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref7_IsNull) == 0x000109, "Member 'FRHAPI_GuideFull::Ref7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref8_Optional) == 0x000110, "Member 'FRHAPI_GuideFull::Ref8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref8_IsSet) == 0x000120, "Member 'FRHAPI_GuideFull::Ref8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref8_IsNull) == 0x000121, "Member 'FRHAPI_GuideFull::Ref8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref9_Optional) == 0x000128, "Member 'FRHAPI_GuideFull::Ref9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref9_IsSet) == 0x000138, "Member 'FRHAPI_GuideFull::Ref9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref9_IsNull) == 0x000139, "Member 'FRHAPI_GuideFull::Ref9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref10_Optional) == 0x000140, "Member 'FRHAPI_GuideFull::Ref10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref10_IsSet) == 0x000150, "Member 'FRHAPI_GuideFull::Ref10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref10_IsNull) == 0x000151, "Member 'FRHAPI_GuideFull::Ref10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref11_Optional) == 0x000158, "Member 'FRHAPI_GuideFull::Ref11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref11_IsSet) == 0x000168, "Member 'FRHAPI_GuideFull::Ref11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref11_IsNull) == 0x000169, "Member 'FRHAPI_GuideFull::Ref11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref12_Optional) == 0x000170, "Member 'FRHAPI_GuideFull::Ref12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref12_IsSet) == 0x000180, "Member 'FRHAPI_GuideFull::Ref12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref12_IsNull) == 0x000181, "Member 'FRHAPI_GuideFull::Ref12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref13_Optional) == 0x000188, "Member 'FRHAPI_GuideFull::Ref13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref13_IsSet) == 0x000198, "Member 'FRHAPI_GuideFull::Ref13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref13_IsNull) == 0x000199, "Member 'FRHAPI_GuideFull::Ref13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref14_Optional) == 0x0001A0, "Member 'FRHAPI_GuideFull::Ref14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref14_IsSet) == 0x0001B0, "Member 'FRHAPI_GuideFull::Ref14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref14_IsNull) == 0x0001B1, "Member 'FRHAPI_GuideFull::Ref14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref15_Optional) == 0x0001B8, "Member 'FRHAPI_GuideFull::Ref15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref15_IsSet) == 0x0001C8, "Member 'FRHAPI_GuideFull::Ref15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref15_IsNull) == 0x0001C9, "Member 'FRHAPI_GuideFull::Ref15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref16_Optional) == 0x0001D0, "Member 'FRHAPI_GuideFull::Ref16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref16_IsSet) == 0x0001E0, "Member 'FRHAPI_GuideFull::Ref16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref16_IsNull) == 0x0001E1, "Member 'FRHAPI_GuideFull::Ref16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref17_Optional) == 0x0001E8, "Member 'FRHAPI_GuideFull::Ref17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref17_IsSet) == 0x0001F8, "Member 'FRHAPI_GuideFull::Ref17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref17_IsNull) == 0x0001F9, "Member 'FRHAPI_GuideFull::Ref17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref18_Optional) == 0x000200, "Member 'FRHAPI_GuideFull::Ref18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref18_IsSet) == 0x000210, "Member 'FRHAPI_GuideFull::Ref18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref18_IsNull) == 0x000211, "Member 'FRHAPI_GuideFull::Ref18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref19_Optional) == 0x000218, "Member 'FRHAPI_GuideFull::Ref19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref19_IsSet) == 0x000228, "Member 'FRHAPI_GuideFull::Ref19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref19_IsNull) == 0x000229, "Member 'FRHAPI_GuideFull::Ref19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref20_Optional) == 0x000230, "Member 'FRHAPI_GuideFull::Ref20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref20_IsSet) == 0x000240, "Member 'FRHAPI_GuideFull::Ref20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref20_IsNull) == 0x000241, "Member 'FRHAPI_GuideFull::Ref20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref21_Optional) == 0x000248, "Member 'FRHAPI_GuideFull::Ref21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref21_IsSet) == 0x000258, "Member 'FRHAPI_GuideFull::Ref21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref21_IsNull) == 0x000259, "Member 'FRHAPI_GuideFull::Ref21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref22_Optional) == 0x000260, "Member 'FRHAPI_GuideFull::Ref22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref22_IsSet) == 0x000270, "Member 'FRHAPI_GuideFull::Ref22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref22_IsNull) == 0x000271, "Member 'FRHAPI_GuideFull::Ref22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref23_Optional) == 0x000278, "Member 'FRHAPI_GuideFull::Ref23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref23_IsSet) == 0x000288, "Member 'FRHAPI_GuideFull::Ref23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref23_IsNull) == 0x000289, "Member 'FRHAPI_GuideFull::Ref23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref24_Optional) == 0x000290, "Member 'FRHAPI_GuideFull::Ref24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref24_IsSet) == 0x0002A0, "Member 'FRHAPI_GuideFull::Ref24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref24_IsNull) == 0x0002A1, "Member 'FRHAPI_GuideFull::Ref24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref25_Optional) == 0x0002A8, "Member 'FRHAPI_GuideFull::Ref25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref25_IsSet) == 0x0002B8, "Member 'FRHAPI_GuideFull::Ref25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref25_IsNull) == 0x0002B9, "Member 'FRHAPI_GuideFull::Ref25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref26_Optional) == 0x0002C0, "Member 'FRHAPI_GuideFull::Ref26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref26_IsSet) == 0x0002D0, "Member 'FRHAPI_GuideFull::Ref26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref26_IsNull) == 0x0002D1, "Member 'FRHAPI_GuideFull::Ref26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref27_Optional) == 0x0002D8, "Member 'FRHAPI_GuideFull::Ref27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref27_IsSet) == 0x0002E8, "Member 'FRHAPI_GuideFull::Ref27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref27_IsNull) == 0x0002E9, "Member 'FRHAPI_GuideFull::Ref27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref28_Optional) == 0x0002F0, "Member 'FRHAPI_GuideFull::Ref28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref28_IsSet) == 0x000300, "Member 'FRHAPI_GuideFull::Ref28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref28_IsNull) == 0x000301, "Member 'FRHAPI_GuideFull::Ref28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref29_Optional) == 0x000308, "Member 'FRHAPI_GuideFull::Ref29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref29_IsSet) == 0x000318, "Member 'FRHAPI_GuideFull::Ref29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref29_IsNull) == 0x000319, "Member 'FRHAPI_GuideFull::Ref29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref30_Optional) == 0x000320, "Member 'FRHAPI_GuideFull::Ref30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref30_IsSet) == 0x000330, "Member 'FRHAPI_GuideFull::Ref30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref30_IsNull) == 0x000331, "Member 'FRHAPI_GuideFull::Ref30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref31_Optional) == 0x000338, "Member 'FRHAPI_GuideFull::Ref31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref31_IsSet) == 0x000348, "Member 'FRHAPI_GuideFull::Ref31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref31_IsNull) == 0x000349, "Member 'FRHAPI_GuideFull::Ref31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref32_Optional) == 0x000350, "Member 'FRHAPI_GuideFull::Ref32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref32_IsSet) == 0x000360, "Member 'FRHAPI_GuideFull::Ref32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Ref32_IsNull) == 0x000361, "Member 'FRHAPI_GuideFull::Ref32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, GuideId) == 0x000364, "Member 'FRHAPI_GuideFull::GuideId' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, OwnerEntityType) == 0x000374, "Member 'FRHAPI_GuideFull::OwnerEntityType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, OwnerEntityId) == 0x000378, "Member 'FRHAPI_GuideFull::OwnerEntityId' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Created) == 0x000388, "Member 'FRHAPI_GuideFull::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Modified) == 0x000390, "Member 'FRHAPI_GuideFull::Modified' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Favorites_Optional) == 0x000398, "Member 'FRHAPI_GuideFull::Favorites_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Favorites_IsSet) == 0x00039C, "Member 'FRHAPI_GuideFull::Favorites_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Upvotes_Optional) == 0x0003A0, "Member 'FRHAPI_GuideFull::Upvotes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Upvotes_IsSet) == 0x0003A4, "Member 'FRHAPI_GuideFull::Upvotes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Downvotes_Optional) == 0x0003A8, "Member 'FRHAPI_GuideFull::Downvotes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Downvotes_IsSet) == 0x0003AC, "Member 'FRHAPI_GuideFull::Downvotes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Etag) == 0x0003B0, "Member 'FRHAPI_GuideFull::Etag' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Content_Optional) == 0x0003C0, "Member 'FRHAPI_GuideFull::Content_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Content_IsSet) == 0x0003D0, "Member 'FRHAPI_GuideFull::Content_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Content_IsNull) == 0x0003D1, "Member 'FRHAPI_GuideFull::Content_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Sections_Optional) == 0x0003D8, "Member 'FRHAPI_GuideFull::Sections_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideFull, Sections_IsSet) == 0x0003E8, "Member 'FRHAPI_GuideFull::Sections_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_HzApiErrorModel
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_HzApiErrorModel final : public FRHAPI_Model
{
public:
	bool                                          AuthSuccess_Optional;                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AuthSuccess_IsSet;                                 // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_HzApiErrorModel) == 0x000008, "Wrong alignment on FRHAPI_HzApiErrorModel");
static_assert(sizeof(FRHAPI_HzApiErrorModel) == 0x000030, "Wrong size on FRHAPI_HzApiErrorModel");
static_assert(offsetof(FRHAPI_HzApiErrorModel, AuthSuccess_Optional) == 0x000008, "Member 'FRHAPI_HzApiErrorModel::AuthSuccess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_HzApiErrorModel, AuthSuccess_IsSet) == 0x000009, "Member 'FRHAPI_HzApiErrorModel::AuthSuccess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_HzApiErrorModel, ErrorCode) == 0x000010, "Member 'FRHAPI_HzApiErrorModel::ErrorCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_HzApiErrorModel, Desc) == 0x000020, "Member 'FRHAPI_HzApiErrorModel::Desc' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PublicKey
// 0x0040 (0x0048 - 0x0008)
struct FRHAPI_PublicKey final : public FRHAPI_Model
{
public:
	class FString                                 Kid;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Kty;                                               // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 N;                                                 // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 E;                                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PublicKey) == 0x000008, "Wrong alignment on FRHAPI_PublicKey");
static_assert(sizeof(FRHAPI_PublicKey) == 0x000048, "Wrong size on FRHAPI_PublicKey");
static_assert(offsetof(FRHAPI_PublicKey, Kid) == 0x000008, "Member 'FRHAPI_PublicKey::Kid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PublicKey, Kty) == 0x000018, "Member 'FRHAPI_PublicKey::Kty' has a wrong offset!");
static_assert(offsetof(FRHAPI_PublicKey, N) == 0x000028, "Member 'FRHAPI_PublicKey::N' has a wrong offset!");
static_assert(offsetof(FRHAPI_PublicKey, E) == 0x000038, "Member 'FRHAPI_PublicKey::E' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TeamUpdate
// 0x0060 (0x0068 - 0x0008)
struct FRHAPI_TeamUpdate final : public FRHAPI_Model
{
public:
	int32                                         MaxSize_Optional;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxSize_IsSet;                                     // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_TeamUpdate) == 0x000008, "Wrong alignment on FRHAPI_TeamUpdate");
static_assert(sizeof(FRHAPI_TeamUpdate) == 0x000068, "Wrong size on FRHAPI_TeamUpdate");
static_assert(offsetof(FRHAPI_TeamUpdate, MaxSize_Optional) == 0x000008, "Member 'FRHAPI_TeamUpdate::MaxSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TeamUpdate, MaxSize_IsSet) == 0x00000C, "Member 'FRHAPI_TeamUpdate::MaxSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TeamUpdate, CustomData_Optional) == 0x000010, "Member 'FRHAPI_TeamUpdate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TeamUpdate, CustomData_IsSet) == 0x000060, "Member 'FRHAPI_TeamUpdate::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ClientSettings
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_ClientSettings final : public FRHAPI_Model
{
public:
	ERHAPI_PlatformID                             PlatformId_Optional;                               // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Input                                  Input;                                             // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_DeviceType                             DeviceType_Optional;                               // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceType_IsSet;                                  // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ClientSettings) == 0x000008, "Wrong alignment on FRHAPI_ClientSettings");
static_assert(sizeof(FRHAPI_ClientSettings) == 0x000010, "Wrong size on FRHAPI_ClientSettings");
static_assert(offsetof(FRHAPI_ClientSettings, PlatformId_Optional) == 0x000008, "Member 'FRHAPI_ClientSettings::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, PlatformId_IsSet) == 0x000009, "Member 'FRHAPI_ClientSettings::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, Platform_Optional) == 0x00000A, "Member 'FRHAPI_ClientSettings::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, Platform_IsSet) == 0x00000B, "Member 'FRHAPI_ClientSettings::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, Input) == 0x00000C, "Member 'FRHAPI_ClientSettings::Input' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, DeviceType_Optional) == 0x00000D, "Member 'FRHAPI_ClientSettings::DeviceType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientSettings, DeviceType_IsSet) == 0x00000E, "Member 'FRHAPI_ClientSettings::DeviceType_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_JoinParams
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_JoinParams final : public FRHAPI_Model
{
public:
	class FString                                 PublicConnStr;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrivateConnStr;                                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_JoinParams) == 0x000008, "Wrong alignment on FRHAPI_JoinParams");
static_assert(sizeof(FRHAPI_JoinParams) == 0x000080, "Wrong size on FRHAPI_JoinParams");
static_assert(offsetof(FRHAPI_JoinParams, PublicConnStr) == 0x000008, "Member 'FRHAPI_JoinParams::PublicConnStr' has a wrong offset!");
static_assert(offsetof(FRHAPI_JoinParams, PrivateConnStr) == 0x000018, "Member 'FRHAPI_JoinParams::PrivateConnStr' has a wrong offset!");
static_assert(offsetof(FRHAPI_JoinParams, CustomData_Optional) == 0x000028, "Member 'FRHAPI_JoinParams::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_JoinParams, CustomData_IsSet) == 0x000078, "Member 'FRHAPI_JoinParams::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CrossplayPreferences
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_CrossplayPreferences final : public FRHAPI_Model
{
public:
	ERHAPI_CrossplayPlatform                      PermittedPlatform;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_CrossplayInput                         PermittedInput;                                    // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CrossplayPreferences) == 0x000008, "Wrong alignment on FRHAPI_CrossplayPreferences");
static_assert(sizeof(FRHAPI_CrossplayPreferences) == 0x000010, "Wrong size on FRHAPI_CrossplayPreferences");
static_assert(offsetof(FRHAPI_CrossplayPreferences, PermittedPlatform) == 0x000008, "Member 'FRHAPI_CrossplayPreferences::PermittedPlatform' has a wrong offset!");
static_assert(offsetof(FRHAPI_CrossplayPreferences, PermittedInput) == 0x000009, "Member 'FRHAPI_CrossplayPreferences::PermittedInput' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AdditionalJoinParams
// 0x0120 (0x0128 - 0x0008)
struct FRHAPI_AdditionalJoinParams final : public FRHAPI_Model
{
public:
	TMap<class FString, float>                    DoubleArgs_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DoubleArgs_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            StringArgs_Optional;                               // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          StringArgs_IsSet;                                  // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Tags_Optional;                                     // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Tags_IsSet;                                        // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            Extensions_Optional;                               // 0x00D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Extensions_IsSet;                                  // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_AdditionalJoinParams) == 0x000008, "Wrong alignment on FRHAPI_AdditionalJoinParams");
static_assert(sizeof(FRHAPI_AdditionalJoinParams) == 0x000128, "Wrong size on FRHAPI_AdditionalJoinParams");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, DoubleArgs_Optional) == 0x000008, "Member 'FRHAPI_AdditionalJoinParams::DoubleArgs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, DoubleArgs_IsSet) == 0x000058, "Member 'FRHAPI_AdditionalJoinParams::DoubleArgs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, StringArgs_Optional) == 0x000060, "Member 'FRHAPI_AdditionalJoinParams::StringArgs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, StringArgs_IsSet) == 0x0000B0, "Member 'FRHAPI_AdditionalJoinParams::StringArgs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, Tags_Optional) == 0x0000B8, "Member 'FRHAPI_AdditionalJoinParams::Tags_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, Tags_IsSet) == 0x0000C8, "Member 'FRHAPI_AdditionalJoinParams::Tags_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, Extensions_Optional) == 0x0000D0, "Member 'FRHAPI_AdditionalJoinParams::Extensions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdditionalJoinParams, Extensions_IsSet) == 0x000120, "Member 'FRHAPI_AdditionalJoinParams::Extensions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AuditEvent
// 0x0450 (0x0458 - 0x0008)
struct FRHAPI_AuditEvent final : public FRHAPI_Model
{
public:
	class FString                                 EventName;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason_Optional;                                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reason_IsSet;                                      // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionType_Optional;                              // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionType_IsSet;                                 // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_Optional;                                 // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_IsSet;                                    // 0x00C2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_TeamUpdate>              UpdatedTeams_Optional;                             // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UpdatedTeams_IsSet;                                // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InviteSource                           Source_Optional;                                   // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x00DA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x00DC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x00EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId_Optional;                                   // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x00F4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InvitedSessionId_Optional;                         // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvitedSessionId_IsSet;                            // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemovedSessionId_Optional;                         // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemovedSessionId_IsSet;                            // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_ClientSettings                  ClientSettings_Optional;                           // 0x0140(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ClientSettings_IsSet;                              // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CrossplayPreferences            CrossplayPreferences_Optional;                     // 0x0158(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayPreferences_IsSet;                        // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SessionPlayerStatus                    PlayerStatus_Optional;                             // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerStatus_IsSet;                                // 0x016A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x016B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x016C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformSessionId_Optional;                        // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformSessionId_IsSet;                           // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               HostType_Optional;                                 // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostType_IsSet;                                    // 0x019A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B[0x1];                                      // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x019C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x01AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceRequestTemplate_Optional;                  // 0x01B0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplate_IsSet;                     // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map_Optional;                                      // 0x01C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Map_IsSet;                                         // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Mode_Optional;                                     // 0x01E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mode_IsSet;                                        // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x01F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0208(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceJoinableStatus                 JoinStatus_Optional;                               // 0x0209(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinStatus_IsSet;                                  // 0x020A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B[0x5];                                      // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JoinParams                      JoinParams_Optional;                               // 0x0210(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          JoinParams_IsSet;                                  // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceHealthStatus                   InstanceHealth_Optional;                           // 0x0291(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceHealth_IsSet;                              // 0x0292(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293[0x5];                                      // 0x0293(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueId_Optional;                                  // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueueId_IsSet;                                     // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TicketId_Optional;                                 // 0x02B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketId_IsSet;                                    // 0x02C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_AdditionalJoinParams            AdditionalParams_Optional;                         // 0x02C8(0x0128)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AdditionalParams_IsSet;                            // 0x03F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MapPreferences_Optional;                           // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          MapPreferences_IsSet;                              // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueuedSessionId_Optional;                          // 0x0410(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueuedSessionId_IsSet;                             // 0x0420(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0428(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0438(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  RequestingUserUuid_Optional;                       // 0x043C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequestingUserUuid_IsSet;                          // 0x044C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EventDatetime;                                     // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_AuditEvent) == 0x000008, "Wrong alignment on FRHAPI_AuditEvent");
static_assert(sizeof(FRHAPI_AuditEvent) == 0x000458, "Wrong size on FRHAPI_AuditEvent");
static_assert(offsetof(FRHAPI_AuditEvent, EventName) == 0x000008, "Member 'FRHAPI_AuditEvent::EventName' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, SessionId) == 0x000018, "Member 'FRHAPI_AuditEvent::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Reason_Optional) == 0x000028, "Member 'FRHAPI_AuditEvent::Reason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Reason_IsSet) == 0x000038, "Member 'FRHAPI_AuditEvent::Reason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, CustomData_Optional) == 0x000040, "Member 'FRHAPI_AuditEvent::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_AuditEvent::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, SessionType_Optional) == 0x000098, "Member 'FRHAPI_AuditEvent::SessionType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, SessionType_IsSet) == 0x0000A8, "Member 'FRHAPI_AuditEvent::SessionType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RegionId_Optional) == 0x0000B0, "Member 'FRHAPI_AuditEvent::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RegionId_IsSet) == 0x0000C0, "Member 'FRHAPI_AuditEvent::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Joinable_Optional) == 0x0000C1, "Member 'FRHAPI_AuditEvent::Joinable_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Joinable_IsSet) == 0x0000C2, "Member 'FRHAPI_AuditEvent::Joinable_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, UpdatedTeams_Optional) == 0x0000C8, "Member 'FRHAPI_AuditEvent::UpdatedTeams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, UpdatedTeams_IsSet) == 0x0000D8, "Member 'FRHAPI_AuditEvent::UpdatedTeams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Source_Optional) == 0x0000D9, "Member 'FRHAPI_AuditEvent::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Source_IsSet) == 0x0000DA, "Member 'FRHAPI_AuditEvent::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlayerUuid_Optional) == 0x0000DC, "Member 'FRHAPI_AuditEvent::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlayerUuid_IsSet) == 0x0000EC, "Member 'FRHAPI_AuditEvent::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, TeamId_Optional) == 0x0000F0, "Member 'FRHAPI_AuditEvent::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, TeamId_IsSet) == 0x0000F4, "Member 'FRHAPI_AuditEvent::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InvitedSessionId_Optional) == 0x0000F8, "Member 'FRHAPI_AuditEvent::InvitedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InvitedSessionId_IsSet) == 0x000108, "Member 'FRHAPI_AuditEvent::InvitedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RemovedSessionId_Optional) == 0x000110, "Member 'FRHAPI_AuditEvent::RemovedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RemovedSessionId_IsSet) == 0x000120, "Member 'FRHAPI_AuditEvent::RemovedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Version_Optional) == 0x000128, "Member 'FRHAPI_AuditEvent::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Version_IsSet) == 0x000138, "Member 'FRHAPI_AuditEvent::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, ClientSettings_Optional) == 0x000140, "Member 'FRHAPI_AuditEvent::ClientSettings_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, ClientSettings_IsSet) == 0x000150, "Member 'FRHAPI_AuditEvent::ClientSettings_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, CrossplayPreferences_Optional) == 0x000158, "Member 'FRHAPI_AuditEvent::CrossplayPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, CrossplayPreferences_IsSet) == 0x000168, "Member 'FRHAPI_AuditEvent::CrossplayPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlayerStatus_Optional) == 0x000169, "Member 'FRHAPI_AuditEvent::PlayerStatus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlayerStatus_IsSet) == 0x00016A, "Member 'FRHAPI_AuditEvent::PlayerStatus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Platform_Optional) == 0x00016B, "Member 'FRHAPI_AuditEvent::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Platform_IsSet) == 0x00016C, "Member 'FRHAPI_AuditEvent::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlatformSessionId_Optional) == 0x000170, "Member 'FRHAPI_AuditEvent::PlatformSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, PlatformSessionId_IsSet) == 0x000180, "Member 'FRHAPI_AuditEvent::PlatformSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceId_Optional) == 0x000188, "Member 'FRHAPI_AuditEvent::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceId_IsSet) == 0x000198, "Member 'FRHAPI_AuditEvent::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, HostType_Optional) == 0x000199, "Member 'FRHAPI_AuditEvent::HostType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, HostType_IsSet) == 0x00019A, "Member 'FRHAPI_AuditEvent::HostType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, HostPlayerUuid_Optional) == 0x00019C, "Member 'FRHAPI_AuditEvent::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, HostPlayerUuid_IsSet) == 0x0001AC, "Member 'FRHAPI_AuditEvent::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceRequestTemplate_Optional) == 0x0001B0, "Member 'FRHAPI_AuditEvent::InstanceRequestTemplate_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceRequestTemplate_IsSet) == 0x0001C0, "Member 'FRHAPI_AuditEvent::InstanceRequestTemplate_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Map_Optional) == 0x0001C8, "Member 'FRHAPI_AuditEvent::Map_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Map_IsSet) == 0x0001D8, "Member 'FRHAPI_AuditEvent::Map_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Mode_Optional) == 0x0001E0, "Member 'FRHAPI_AuditEvent::Mode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, Mode_IsSet) == 0x0001F0, "Member 'FRHAPI_AuditEvent::Mode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, AllocationId_Optional) == 0x0001F8, "Member 'FRHAPI_AuditEvent::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, AllocationId_IsSet) == 0x000208, "Member 'FRHAPI_AuditEvent::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, JoinStatus_Optional) == 0x000209, "Member 'FRHAPI_AuditEvent::JoinStatus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, JoinStatus_IsSet) == 0x00020A, "Member 'FRHAPI_AuditEvent::JoinStatus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, JoinParams_Optional) == 0x000210, "Member 'FRHAPI_AuditEvent::JoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, JoinParams_IsSet) == 0x000290, "Member 'FRHAPI_AuditEvent::JoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceHealth_Optional) == 0x000291, "Member 'FRHAPI_AuditEvent::InstanceHealth_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, InstanceHealth_IsSet) == 0x000292, "Member 'FRHAPI_AuditEvent::InstanceHealth_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, QueueId_Optional) == 0x000298, "Member 'FRHAPI_AuditEvent::QueueId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, QueueId_IsSet) == 0x0002A8, "Member 'FRHAPI_AuditEvent::QueueId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, TicketId_Optional) == 0x0002B0, "Member 'FRHAPI_AuditEvent::TicketId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, TicketId_IsSet) == 0x0002C0, "Member 'FRHAPI_AuditEvent::TicketId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, AdditionalParams_Optional) == 0x0002C8, "Member 'FRHAPI_AuditEvent::AdditionalParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, AdditionalParams_IsSet) == 0x0003F0, "Member 'FRHAPI_AuditEvent::AdditionalParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, MapPreferences_Optional) == 0x0003F8, "Member 'FRHAPI_AuditEvent::MapPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, MapPreferences_IsSet) == 0x000408, "Member 'FRHAPI_AuditEvent::MapPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, QueuedSessionId_Optional) == 0x000410, "Member 'FRHAPI_AuditEvent::QueuedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, QueuedSessionId_IsSet) == 0x000420, "Member 'FRHAPI_AuditEvent::QueuedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, MatchId_Optional) == 0x000428, "Member 'FRHAPI_AuditEvent::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, MatchId_IsSet) == 0x000438, "Member 'FRHAPI_AuditEvent::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RequestingUserUuid_Optional) == 0x00043C, "Member 'FRHAPI_AuditEvent::RequestingUserUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, RequestingUserUuid_IsSet) == 0x00044C, "Member 'FRHAPI_AuditEvent::RequestingUserUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditEvent, EventDatetime) == 0x000450, "Member 'FRHAPI_AuditEvent::EventDatetime' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AuditResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_AuditResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_AuditEvent>              Events_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Events_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_AuditResponse) == 0x000008, "Wrong alignment on FRHAPI_AuditResponse");
static_assert(sizeof(FRHAPI_AuditResponse) == 0x000020, "Wrong size on FRHAPI_AuditResponse");
static_assert(offsetof(FRHAPI_AuditResponse, Events_Optional) == 0x000008, "Member 'FRHAPI_AuditResponse::Events_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AuditResponse, Events_IsSet) == 0x000018, "Member 'FRHAPI_AuditResponse::Events_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UpdateInventoryRequestById
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_UpdateInventoryRequestById final : public FRHAPI_Model
{
public:
	ERHAPI_InventoryBucket                        Bucket_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bucket_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count_Optional;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Count_IsSet;                                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InventoryId;                                       // 0x0084(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_UpdateInventoryRequestById) == 0x000008, "Wrong alignment on FRHAPI_UpdateInventoryRequestById");
static_assert(sizeof(FRHAPI_UpdateInventoryRequestById) == 0x000098, "Wrong size on FRHAPI_UpdateInventoryRequestById");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Bucket_Optional) == 0x000008, "Member 'FRHAPI_UpdateInventoryRequestById::Bucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Bucket_IsSet) == 0x000009, "Member 'FRHAPI_UpdateInventoryRequestById::Bucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Count_Optional) == 0x00000C, "Member 'FRHAPI_UpdateInventoryRequestById::Count_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Count_IsSet) == 0x000010, "Member 'FRHAPI_UpdateInventoryRequestById::Count_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Expires_Optional) == 0x000018, "Member 'FRHAPI_UpdateInventoryRequestById::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Expires_IsSet) == 0x000020, "Member 'FRHAPI_UpdateInventoryRequestById::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, Expires_IsNull) == 0x000021, "Member 'FRHAPI_UpdateInventoryRequestById::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, CustomData_Optional) == 0x000028, "Member 'FRHAPI_UpdateInventoryRequestById::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, CustomData_IsSet) == 0x000078, "Member 'FRHAPI_UpdateInventoryRequestById::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, CustomData_IsNull) == 0x000079, "Member 'FRHAPI_UpdateInventoryRequestById::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, ItemId_Optional) == 0x00007C, "Member 'FRHAPI_UpdateInventoryRequestById::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, ItemId_IsSet) == 0x000080, "Member 'FRHAPI_UpdateInventoryRequestById::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, ItemId_IsNull) == 0x000081, "Member 'FRHAPI_UpdateInventoryRequestById::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequestById, InventoryId) == 0x000084, "Member 'FRHAPI_UpdateInventoryRequestById::InventoryId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UpdateInventoryRequests
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_UpdateInventoryRequests final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_UpdateInventoryRequestById> Inventory;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_UpdateInventoryRequests) == 0x000008, "Wrong alignment on FRHAPI_UpdateInventoryRequests");
static_assert(sizeof(FRHAPI_UpdateInventoryRequests) == 0x000030, "Wrong size on FRHAPI_UpdateInventoryRequests");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, Source_Optional) == 0x000008, "Member 'FRHAPI_UpdateInventoryRequests::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, Source_IsSet) == 0x000009, "Member 'FRHAPI_UpdateInventoryRequests::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_UpdateInventoryRequests::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_UpdateInventoryRequests::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_UpdateInventoryRequests::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequests, Inventory) == 0x000020, "Member 'FRHAPI_UpdateInventoryRequests::Inventory' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LeaderboardConfig
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_LeaderboardConfig final : public FRHAPI_Model
{
public:
	class FString                                 LeaderboardId;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerListType                         PlayerList;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSize;                                           // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_LeaderboardSortOrder                   SortOrder;                                         // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_LeaderboardSource                      Source;                                            // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceId;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveRestricted_Optional;                         // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveRestricted_IsSet;                            // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredRecentLoginDays_Optional;                  // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredRecentLoginDays_IsSet;                     // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredRecentLoginDays_IsNull;                    // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdateFrequencySeconds;                            // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExposeStat_Optional;                               // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExposeStat_IsSet;                                  // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExposePlayers_Optional;                            // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExposePlayers_IsSet;                               // 0x004B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LeaderboardConfig) == 0x000008, "Wrong alignment on FRHAPI_LeaderboardConfig");
static_assert(sizeof(FRHAPI_LeaderboardConfig) == 0x000050, "Wrong size on FRHAPI_LeaderboardConfig");
static_assert(offsetof(FRHAPI_LeaderboardConfig, LeaderboardId) == 0x000008, "Member 'FRHAPI_LeaderboardConfig::LeaderboardId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, PlayerList) == 0x000018, "Member 'FRHAPI_LeaderboardConfig::PlayerList' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, MaxSize) == 0x00001C, "Member 'FRHAPI_LeaderboardConfig::MaxSize' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, SortOrder) == 0x000020, "Member 'FRHAPI_LeaderboardConfig::SortOrder' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, Source) == 0x000021, "Member 'FRHAPI_LeaderboardConfig::Source' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, SourceId) == 0x000028, "Member 'FRHAPI_LeaderboardConfig::SourceId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, RemoveRestricted_Optional) == 0x000038, "Member 'FRHAPI_LeaderboardConfig::RemoveRestricted_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, RemoveRestricted_IsSet) == 0x000039, "Member 'FRHAPI_LeaderboardConfig::RemoveRestricted_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, RequiredRecentLoginDays_Optional) == 0x00003C, "Member 'FRHAPI_LeaderboardConfig::RequiredRecentLoginDays_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, RequiredRecentLoginDays_IsSet) == 0x000040, "Member 'FRHAPI_LeaderboardConfig::RequiredRecentLoginDays_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, RequiredRecentLoginDays_IsNull) == 0x000041, "Member 'FRHAPI_LeaderboardConfig::RequiredRecentLoginDays_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, UpdateFrequencySeconds) == 0x000044, "Member 'FRHAPI_LeaderboardConfig::UpdateFrequencySeconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, ExposeStat_Optional) == 0x000048, "Member 'FRHAPI_LeaderboardConfig::ExposeStat_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, ExposeStat_IsSet) == 0x000049, "Member 'FRHAPI_LeaderboardConfig::ExposeStat_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, ExposePlayers_Optional) == 0x00004A, "Member 'FRHAPI_LeaderboardConfig::ExposePlayers_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardConfig, ExposePlayers_IsSet) == 0x00004B, "Member 'FRHAPI_LeaderboardConfig::ExposePlayers_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LeaderboardConfigList
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_LeaderboardConfigList final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_LeaderboardConfig>       LeaderboardConfigs;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_LeaderboardConfigList) == 0x000008, "Wrong alignment on FRHAPI_LeaderboardConfigList");
static_assert(sizeof(FRHAPI_LeaderboardConfigList) == 0x000018, "Wrong size on FRHAPI_LeaderboardConfigList");
static_assert(offsetof(FRHAPI_LeaderboardConfigList, LeaderboardConfigs) == 0x000008, "Member 'FRHAPI_LeaderboardConfigList::LeaderboardConfigs' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BrowserSessionInfo
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_BrowserSessionInfo final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceHealthStatus                   InstanceHealth_Optional;                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceHealth_IsSet;                              // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerCount_Optional;                              // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerCount_IsSet;                                 // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayerCount_Optional;                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxPlayerCount_IsSet;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BrowserSessionInfo) == 0x000008, "Wrong alignment on FRHAPI_BrowserSessionInfo");
static_assert(sizeof(FRHAPI_BrowserSessionInfo) == 0x000088, "Wrong size on FRHAPI_BrowserSessionInfo");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, SessionId) == 0x000008, "Member 'FRHAPI_BrowserSessionInfo::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, InstanceHealth_Optional) == 0x000018, "Member 'FRHAPI_BrowserSessionInfo::InstanceHealth_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, InstanceHealth_IsSet) == 0x000019, "Member 'FRHAPI_BrowserSessionInfo::InstanceHealth_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, PlayerCount_Optional) == 0x00001C, "Member 'FRHAPI_BrowserSessionInfo::PlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, PlayerCount_IsSet) == 0x000020, "Member 'FRHAPI_BrowserSessionInfo::PlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, MaxPlayerCount_Optional) == 0x000024, "Member 'FRHAPI_BrowserSessionInfo::MaxPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, MaxPlayerCount_IsSet) == 0x000028, "Member 'FRHAPI_BrowserSessionInfo::MaxPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, CustomData_Optional) == 0x000030, "Member 'FRHAPI_BrowserSessionInfo::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserSessionInfo, CustomData_IsSet) == 0x000080, "Member 'FRHAPI_BrowserSessionInfo::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerPresence
// 0x00C0 (0x00C8 - 0x0008)
struct FRHAPI_PlayerPresence final : public FRHAPI_Model
{
public:
	ERHAPI_OnlineStatus                           Status_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message_Optional;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Message_IsSet;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Platform;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId_Optional;                                 // 0x009C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsSet;                                    // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x00A4(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoNotDisturb_Optional;                             // 0x00B4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DoNotDisturb_IsSet;                                // 0x00B5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastSeen_Optional;                                 // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastSeen_IsSet;                                    // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerPresence) == 0x000008, "Wrong alignment on FRHAPI_PlayerPresence");
static_assert(sizeof(FRHAPI_PlayerPresence) == 0x0000C8, "Wrong size on FRHAPI_PlayerPresence");
static_assert(offsetof(FRHAPI_PlayerPresence, Status_Optional) == 0x000008, "Member 'FRHAPI_PlayerPresence::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, Status_IsSet) == 0x000009, "Member 'FRHAPI_PlayerPresence::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, Message_Optional) == 0x000010, "Member 'FRHAPI_PlayerPresence::Message_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, Message_IsSet) == 0x000020, "Member 'FRHAPI_PlayerPresence::Message_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, Platform) == 0x000028, "Member 'FRHAPI_PlayerPresence::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, DisplayName) == 0x000038, "Member 'FRHAPI_PlayerPresence::DisplayName' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, CustomData_Optional) == 0x000048, "Member 'FRHAPI_PlayerPresence::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, CustomData_IsSet) == 0x000098, "Member 'FRHAPI_PlayerPresence::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, PlayerId_Optional) == 0x00009C, "Member 'FRHAPI_PlayerPresence::PlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, PlayerId_IsSet) == 0x0000A0, "Member 'FRHAPI_PlayerPresence::PlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, PlayerUuid) == 0x0000A4, "Member 'FRHAPI_PlayerPresence::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, DoNotDisturb_Optional) == 0x0000B4, "Member 'FRHAPI_PlayerPresence::DoNotDisturb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, DoNotDisturb_IsSet) == 0x0000B5, "Member 'FRHAPI_PlayerPresence::DoNotDisturb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, LastSeen_Optional) == 0x0000B8, "Member 'FRHAPI_PlayerPresence::LastSeen_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPresence, LastSeen_IsSet) == 0x0000C0, "Member 'FRHAPI_PlayerPresence::LastSeen_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AcknowledgeBackfillRequest
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_AcknowledgeBackfillRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Extensions_Optional;                               // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Extensions_IsSet;                                  // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_TeamOverflowAction                     OverflowAction_Optional;                           // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverflowAction_IsSet;                              // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ERHAPI_BackfillStyle>                  Styles_Optional;                                   // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Styles_IsSet;                                      // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_AcknowledgeBackfillRequest) == 0x000008, "Wrong alignment on FRHAPI_AcknowledgeBackfillRequest");
static_assert(sizeof(FRHAPI_AcknowledgeBackfillRequest) == 0x000088, "Wrong size on FRHAPI_AcknowledgeBackfillRequest");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, InstanceId) == 0x000008, "Member 'FRHAPI_AcknowledgeBackfillRequest::InstanceId' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, Extensions_Optional) == 0x000018, "Member 'FRHAPI_AcknowledgeBackfillRequest::Extensions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, Extensions_IsSet) == 0x000068, "Member 'FRHAPI_AcknowledgeBackfillRequest::Extensions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, OverflowAction_Optional) == 0x000069, "Member 'FRHAPI_AcknowledgeBackfillRequest::OverflowAction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, OverflowAction_IsSet) == 0x00006A, "Member 'FRHAPI_AcknowledgeBackfillRequest::OverflowAction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, Styles_Optional) == 0x000070, "Member 'FRHAPI_AcknowledgeBackfillRequest::Styles_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillRequest, Styles_IsSet) == 0x000080, "Member 'FRHAPI_AcknowledgeBackfillRequest::Styles_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RestrictionCreate
// 0x0040 (0x0048 - 0x0008)
struct FRHAPI_RestrictionCreate final : public FRHAPI_Model
{
public:
	ERHAPI_RestrictionType                        Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RestrictionReasonCode                  Reason_Optional;                                   // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reason_IsSet;                                      // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expiration_Optional;                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expiration_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RestrictionIssuerType                  IssuerType;                                        // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Issuer;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReasonDetail_Optional;                             // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReasonDetail_IsSet;                                // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RestrictionCreate) == 0x000008, "Wrong alignment on FRHAPI_RestrictionCreate");
static_assert(sizeof(FRHAPI_RestrictionCreate) == 0x000048, "Wrong size on FRHAPI_RestrictionCreate");
static_assert(offsetof(FRHAPI_RestrictionCreate, Type) == 0x000008, "Member 'FRHAPI_RestrictionCreate::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, Reason_Optional) == 0x000009, "Member 'FRHAPI_RestrictionCreate::Reason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, Reason_IsSet) == 0x00000A, "Member 'FRHAPI_RestrictionCreate::Reason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, Expiration_Optional) == 0x000010, "Member 'FRHAPI_RestrictionCreate::Expiration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, Expiration_IsSet) == 0x000018, "Member 'FRHAPI_RestrictionCreate::Expiration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, IssuerType) == 0x000019, "Member 'FRHAPI_RestrictionCreate::IssuerType' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, Issuer) == 0x000020, "Member 'FRHAPI_RestrictionCreate::Issuer' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, ReasonDetail_Optional) == 0x000030, "Member 'FRHAPI_RestrictionCreate::ReasonDetail_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionCreate, ReasonDetail_IsSet) == 0x000040, "Member 'FRHAPI_RestrictionCreate::ReasonDetail_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LogoutRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_LogoutRequest final : public FRHAPI_Model
{
public:
	class FString                                 RefreshToken;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_LogoutRequest) == 0x000008, "Wrong alignment on FRHAPI_LogoutRequest");
static_assert(sizeof(FRHAPI_LogoutRequest) == 0x000018, "Wrong size on FRHAPI_LogoutRequest");
static_assert(offsetof(FRHAPI_LogoutRequest, RefreshToken) == 0x000008, "Member 'FRHAPI_LogoutRequest::RefreshToken' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LeaderboardMetaData
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_LeaderboardMetaData final : public FRHAPI_Model
{
public:
	int32                                         EntryCount;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastUpdatedDatetime;                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_LeaderboardMetaData) == 0x000008, "Wrong alignment on FRHAPI_LeaderboardMetaData");
static_assert(sizeof(FRHAPI_LeaderboardMetaData) == 0x000018, "Wrong size on FRHAPI_LeaderboardMetaData");
static_assert(offsetof(FRHAPI_LeaderboardMetaData, EntryCount) == 0x000008, "Member 'FRHAPI_LeaderboardMetaData::EntryCount' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardMetaData, LastUpdatedDatetime) == 0x000010, "Member 'FRHAPI_LeaderboardMetaData::LastUpdatedDatetime' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BackfillInfo
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_BackfillInfo final : public FRHAPI_Model
{
public:
	class FString                                 BackfillId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Extensions_Optional;                               // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Extensions_IsSet;                                  // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BackfillInfo) == 0x000008, "Wrong alignment on FRHAPI_BackfillInfo");
static_assert(sizeof(FRHAPI_BackfillInfo) == 0x000070, "Wrong size on FRHAPI_BackfillInfo");
static_assert(offsetof(FRHAPI_BackfillInfo, BackfillId) == 0x000008, "Member 'FRHAPI_BackfillInfo::BackfillId' has a wrong offset!");
static_assert(offsetof(FRHAPI_BackfillInfo, Extensions_Optional) == 0x000018, "Member 'FRHAPI_BackfillInfo::Extensions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BackfillInfo, Extensions_IsSet) == 0x000068, "Member 'FRHAPI_BackfillInfo::Extensions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LeaderboardEntry
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_LeaderboardEntry final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatValue_Optional;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StatValue_IsSet;                                   // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StatValue_IsNull;                                  // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         position;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LeaderboardEntry) == 0x000008, "Wrong alignment on FRHAPI_LeaderboardEntry");
static_assert(sizeof(FRHAPI_LeaderboardEntry) == 0x000028, "Wrong size on FRHAPI_LeaderboardEntry");
static_assert(offsetof(FRHAPI_LeaderboardEntry, PlayerUuid) == 0x000008, "Member 'FRHAPI_LeaderboardEntry::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardEntry, StatValue_Optional) == 0x000018, "Member 'FRHAPI_LeaderboardEntry::StatValue_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardEntry, StatValue_IsSet) == 0x00001C, "Member 'FRHAPI_LeaderboardEntry::StatValue_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardEntry, StatValue_IsNull) == 0x00001D, "Member 'FRHAPI_LeaderboardEntry::StatValue_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardEntry, position) == 0x000020, "Member 'FRHAPI_LeaderboardEntry::position' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LeaderboardPage
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_LeaderboardPage final : public FRHAPI_Model
{
public:
	class FString                                 LeaderboardId;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cursor;                                            // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_LeaderboardEntry>        Entries;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_LeaderboardPage) == 0x000008, "Wrong alignment on FRHAPI_LeaderboardPage");
static_assert(sizeof(FRHAPI_LeaderboardPage) == 0x000038, "Wrong size on FRHAPI_LeaderboardPage");
static_assert(offsetof(FRHAPI_LeaderboardPage, LeaderboardId) == 0x000008, "Member 'FRHAPI_LeaderboardPage::LeaderboardId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardPage, Cursor) == 0x000018, "Member 'FRHAPI_LeaderboardPage::Cursor' has a wrong offset!");
static_assert(offsetof(FRHAPI_LeaderboardPage, Entries) == 0x000028, "Member 'FRHAPI_LeaderboardPage::Entries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AdOpportunity
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_AdOpportunity final : public FRHAPI_Model
{
public:
	class FString                                 AdUrl;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seconds;                                           // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpportunityId;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_AdOpportunity) == 0x000008, "Wrong alignment on FRHAPI_AdOpportunity");
static_assert(sizeof(FRHAPI_AdOpportunity) == 0x000030, "Wrong size on FRHAPI_AdOpportunity");
static_assert(offsetof(FRHAPI_AdOpportunity, AdUrl) == 0x000008, "Member 'FRHAPI_AdOpportunity::AdUrl' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdOpportunity, Seconds) == 0x000018, "Member 'FRHAPI_AdOpportunity::Seconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_AdOpportunity, OpportunityId) == 0x000020, "Member 'FRHAPI_AdOpportunity::OpportunityId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueueConfig
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_QueueConfig final : public FRHAPI_Model
{
public:
	class FString                                 QueueId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RankingType;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSides;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayersPerSide;                                 // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPlayersPerSide;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxQueueGroupSize;                                 // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MatchMakingTemplateGroupId;                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_QueueConfig) == 0x000008, "Wrong alignment on FRHAPI_QueueConfig");
static_assert(sizeof(FRHAPI_QueueConfig) == 0x000040, "Wrong size on FRHAPI_QueueConfig");
static_assert(offsetof(FRHAPI_QueueConfig, QueueId) == 0x000008, "Member 'FRHAPI_QueueConfig::QueueId' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, Active) == 0x000018, "Member 'FRHAPI_QueueConfig::Active' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, RankingType) == 0x00001C, "Member 'FRHAPI_QueueConfig::RankingType' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, NumSides) == 0x000020, "Member 'FRHAPI_QueueConfig::NumSides' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, MaxPlayersPerSide) == 0x000024, "Member 'FRHAPI_QueueConfig::MaxPlayersPerSide' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, MinPlayersPerSide) == 0x000028, "Member 'FRHAPI_QueueConfig::MinPlayersPerSide' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, MaxQueueGroupSize) == 0x00002C, "Member 'FRHAPI_QueueConfig::MaxQueueGroupSize' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfig, MatchMakingTemplateGroupId) == 0x000030, "Member 'FRHAPI_QueueConfig::MatchMakingTemplateGroupId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Notification
// 0x00B0 (0x00B8 - 0x0008)
struct FRHAPI_Notification final : public FRHAPI_Model
{
public:
	class FString                                 Message;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RhUrl_Optional;                                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RhUrl_IsSet;                                       // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Etag_Optional;                                     // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Etag_IsSet;                                        // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NotificationId;                                    // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_Notification) == 0x000008, "Wrong alignment on FRHAPI_Notification");
static_assert(sizeof(FRHAPI_Notification) == 0x0000B8, "Wrong size on FRHAPI_Notification");
static_assert(offsetof(FRHAPI_Notification, Message) == 0x000008, "Member 'FRHAPI_Notification::Message' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, RhUrl_Optional) == 0x000018, "Member 'FRHAPI_Notification::RhUrl_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, RhUrl_IsSet) == 0x000028, "Member 'FRHAPI_Notification::RhUrl_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, CustomData_Optional) == 0x000030, "Member 'FRHAPI_Notification::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, CustomData_IsSet) == 0x000080, "Member 'FRHAPI_Notification::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, Etag_Optional) == 0x000088, "Member 'FRHAPI_Notification::Etag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, Etag_IsSet) == 0x000098, "Member 'FRHAPI_Notification::Etag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, NotificationId) == 0x0000A0, "Member 'FRHAPI_Notification::NotificationId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notification, Created) == 0x0000B0, "Member 'FRHAPI_Notification::Created' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PlayerResponse final : public FRHAPI_Model
{
public:
	int32                                         PlayerId;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerResponse");
static_assert(sizeof(FRHAPI_PlayerResponse) == 0x000020, "Wrong size on FRHAPI_PlayerResponse");
static_assert(offsetof(FRHAPI_PlayerResponse, PlayerId) == 0x000008, "Member 'FRHAPI_PlayerResponse::PlayerId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerResponse, PlayerUuid) == 0x00000C, "Member 'FRHAPI_PlayerResponse::PlayerUuid' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Restriction
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_Restriction final : public FRHAPI_Model
{
public:
	ERHAPI_RestrictionType                        Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RestrictionReasonCode                  Reason_Optional;                                   // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reason_IsSet;                                      // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expiration_Optional;                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expiration_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Restriction) == 0x000008, "Wrong alignment on FRHAPI_Restriction");
static_assert(sizeof(FRHAPI_Restriction) == 0x000020, "Wrong size on FRHAPI_Restriction");
static_assert(offsetof(FRHAPI_Restriction, Type) == 0x000008, "Member 'FRHAPI_Restriction::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_Restriction, Reason_Optional) == 0x000009, "Member 'FRHAPI_Restriction::Reason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Restriction, Reason_IsSet) == 0x00000A, "Member 'FRHAPI_Restriction::Reason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Restriction, Expiration_Optional) == 0x000010, "Member 'FRHAPI_Restriction::Expiration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Restriction, Expiration_IsSet) == 0x000018, "Member 'FRHAPI_Restriction::Expiration_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankResponseV2
// 0x0088 (0x0090 - 0x0008)
struct FRHAPI_PlayerRankResponseV2 final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_RankRankData                    Rank;                                              // 0x0018(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RankId;                                            // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankResponseV2) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankResponseV2");
static_assert(sizeof(FRHAPI_PlayerRankResponseV2) == 0x000090, "Wrong size on FRHAPI_PlayerRankResponseV2");
static_assert(offsetof(FRHAPI_PlayerRankResponseV2, PlayerUuid) == 0x000008, "Member 'FRHAPI_PlayerRankResponseV2::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankResponseV2, Rank) == 0x000018, "Member 'FRHAPI_PlayerRankResponseV2::Rank' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankResponseV2, RankId) == 0x000080, "Member 'FRHAPI_PlayerRankResponseV2::RankId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Region
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_Region final : public FRHAPI_Model
{
public:
	class FString                                 RegionId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomOnly;                                        // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description_Optional;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsSet;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Region) == 0x000008, "Wrong alignment on FRHAPI_Region");
static_assert(sizeof(FRHAPI_Region) == 0x000038, "Wrong size on FRHAPI_Region");
static_assert(offsetof(FRHAPI_Region, RegionId) == 0x000008, "Member 'FRHAPI_Region::RegionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Region, SortOrder) == 0x000018, "Member 'FRHAPI_Region::SortOrder' has a wrong offset!");
static_assert(offsetof(FRHAPI_Region, CustomOnly) == 0x00001C, "Member 'FRHAPI_Region::CustomOnly' has a wrong offset!");
static_assert(offsetof(FRHAPI_Region, Description_Optional) == 0x000020, "Member 'FRHAPI_Region::Description_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Region, Description_IsSet) == 0x000030, "Member 'FRHAPI_Region::Description_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RegionsResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_RegionsResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_Region>                  Regions;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cursor;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RegionsResponse) == 0x000008, "Wrong alignment on FRHAPI_RegionsResponse");
static_assert(sizeof(FRHAPI_RegionsResponse) == 0x000020, "Wrong size on FRHAPI_RegionsResponse");
static_assert(offsetof(FRHAPI_RegionsResponse, Regions) == 0x000008, "Member 'FRHAPI_RegionsResponse::Regions' has a wrong offset!");
static_assert(offsetof(FRHAPI_RegionsResponse, Cursor) == 0x000018, "Member 'FRHAPI_RegionsResponse::Cursor' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchAllocation
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_MatchAllocation final : public FRHAPI_Model
{
public:
	class FString                                 AllocationId;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchAllocation) == 0x000008, "Wrong alignment on FRHAPI_MatchAllocation");
static_assert(sizeof(FRHAPI_MatchAllocation) == 0x000018, "Wrong size on FRHAPI_MatchAllocation");
static_assert(offsetof(FRHAPI_MatchAllocation, AllocationId) == 0x000008, "Member 'FRHAPI_MatchAllocation::AllocationId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchPlayerResponse
// 0x0118 (0x0120 - 0x0008)
struct FRHAPI_MatchPlayerResponse final : public FRHAPI_Model
{
public:
	struct FDateTime                              LastModifiedTimestamp_Optional;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedTimestamp_IsSet;                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamId_Optional;                                   // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsNull;                                     // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartySessionId_Optional;                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsSet;                              // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsNull;                             // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Placement_Optional;                                // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsSet;                                   // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsNull;                                  // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              JoinedMatchTimestamp_Optional;                     // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsSet;                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsNull;                       // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LeftMatchTimestamp_Optional;                       // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsSet;                          // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsNull;                         // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartingRank_Optional;                             // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsSet;                                // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsNull;                               // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishingRank_Optional;                            // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsSet;                               // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsNull;                              // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0119(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchPlayerResponse) == 0x000008, "Wrong alignment on FRHAPI_MatchPlayerResponse");
static_assert(sizeof(FRHAPI_MatchPlayerResponse) == 0x000120, "Wrong size on FRHAPI_MatchPlayerResponse");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, LastModifiedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_MatchPlayerResponse::LastModifiedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, LastModifiedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_MatchPlayerResponse::LastModifiedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, CreatedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_MatchPlayerResponse::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, CreatedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_MatchPlayerResponse::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, PlayerUuid_Optional) == 0x000024, "Member 'FRHAPI_MatchPlayerResponse::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, PlayerUuid_IsSet) == 0x000034, "Member 'FRHAPI_MatchPlayerResponse::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, TeamId_Optional) == 0x000038, "Member 'FRHAPI_MatchPlayerResponse::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, TeamId_IsSet) == 0x000048, "Member 'FRHAPI_MatchPlayerResponse::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, TeamId_IsNull) == 0x000049, "Member 'FRHAPI_MatchPlayerResponse::TeamId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, PartySessionId_Optional) == 0x000050, "Member 'FRHAPI_MatchPlayerResponse::PartySessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, PartySessionId_IsSet) == 0x000060, "Member 'FRHAPI_MatchPlayerResponse::PartySessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, PartySessionId_IsNull) == 0x000061, "Member 'FRHAPI_MatchPlayerResponse::PartySessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, Placement_Optional) == 0x000064, "Member 'FRHAPI_MatchPlayerResponse::Placement_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, Placement_IsSet) == 0x000068, "Member 'FRHAPI_MatchPlayerResponse::Placement_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, Placement_IsNull) == 0x000069, "Member 'FRHAPI_MatchPlayerResponse::Placement_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, JoinedMatchTimestamp_Optional) == 0x000070, "Member 'FRHAPI_MatchPlayerResponse::JoinedMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, JoinedMatchTimestamp_IsSet) == 0x000078, "Member 'FRHAPI_MatchPlayerResponse::JoinedMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, JoinedMatchTimestamp_IsNull) == 0x000079, "Member 'FRHAPI_MatchPlayerResponse::JoinedMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, LeftMatchTimestamp_Optional) == 0x000080, "Member 'FRHAPI_MatchPlayerResponse::LeftMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, LeftMatchTimestamp_IsSet) == 0x000088, "Member 'FRHAPI_MatchPlayerResponse::LeftMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, LeftMatchTimestamp_IsNull) == 0x000089, "Member 'FRHAPI_MatchPlayerResponse::LeftMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, DurationSeconds_Optional) == 0x00008C, "Member 'FRHAPI_MatchPlayerResponse::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, DurationSeconds_IsSet) == 0x000090, "Member 'FRHAPI_MatchPlayerResponse::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, DurationSeconds_IsNull) == 0x000091, "Member 'FRHAPI_MatchPlayerResponse::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, StartingRank_Optional) == 0x000098, "Member 'FRHAPI_MatchPlayerResponse::StartingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, StartingRank_IsSet) == 0x0000A8, "Member 'FRHAPI_MatchPlayerResponse::StartingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, StartingRank_IsNull) == 0x0000A9, "Member 'FRHAPI_MatchPlayerResponse::StartingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, FinishingRank_Optional) == 0x0000B0, "Member 'FRHAPI_MatchPlayerResponse::FinishingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, FinishingRank_IsSet) == 0x0000C0, "Member 'FRHAPI_MatchPlayerResponse::FinishingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, FinishingRank_IsNull) == 0x0000C1, "Member 'FRHAPI_MatchPlayerResponse::FinishingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, CustomData_Optional) == 0x0000C8, "Member 'FRHAPI_MatchPlayerResponse::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, CustomData_IsSet) == 0x000118, "Member 'FRHAPI_MatchPlayerResponse::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerResponse, CustomData_IsNull) == 0x000119, "Member 'FRHAPI_MatchPlayerResponse::CustomData_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchSegmentWithPlayers
// 0x0158 (0x0160 - 0x0008)
struct FRHAPI_MatchSegmentWithPlayers final : public FRHAPI_Model
{
public:
	struct FDateTime                              LastModifiedTimestamp_Optional;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedTimestamp_IsSet;                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type_Optional;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x003B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0068(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchSegment;                                      // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchId_Optional;                                  // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchPlayerResponse>     Players_Optional;                                  // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchSegmentWithPlayers) == 0x000008, "Wrong alignment on FRHAPI_MatchSegmentWithPlayers");
static_assert(sizeof(FRHAPI_MatchSegmentWithPlayers) == 0x000160, "Wrong size on FRHAPI_MatchSegmentWithPlayers");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, LastModifiedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_MatchSegmentWithPlayers::LastModifiedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, LastModifiedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_MatchSegmentWithPlayers::LastModifiedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CreatedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_MatchSegmentWithPlayers::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CreatedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_MatchSegmentWithPlayers::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Type_Optional) == 0x000028, "Member 'FRHAPI_MatchSegmentWithPlayers::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Type_IsSet) == 0x000038, "Member 'FRHAPI_MatchSegmentWithPlayers::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Type_IsNull) == 0x000039, "Member 'FRHAPI_MatchSegmentWithPlayers::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, State_Optional) == 0x00003A, "Member 'FRHAPI_MatchSegmentWithPlayers::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, State_IsSet) == 0x00003B, "Member 'FRHAPI_MatchSegmentWithPlayers::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, State_IsNull) == 0x00003C, "Member 'FRHAPI_MatchSegmentWithPlayers::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, StartTimestamp_Optional) == 0x000040, "Member 'FRHAPI_MatchSegmentWithPlayers::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, StartTimestamp_IsSet) == 0x000048, "Member 'FRHAPI_MatchSegmentWithPlayers::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, StartTimestamp_IsNull) == 0x000049, "Member 'FRHAPI_MatchSegmentWithPlayers::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, EndTimestamp_Optional) == 0x000050, "Member 'FRHAPI_MatchSegmentWithPlayers::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, EndTimestamp_IsSet) == 0x000058, "Member 'FRHAPI_MatchSegmentWithPlayers::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, EndTimestamp_IsNull) == 0x000059, "Member 'FRHAPI_MatchSegmentWithPlayers::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, DurationSeconds_Optional) == 0x00005C, "Member 'FRHAPI_MatchSegmentWithPlayers::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, DurationSeconds_IsSet) == 0x000060, "Member 'FRHAPI_MatchSegmentWithPlayers::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, DurationSeconds_IsNull) == 0x000061, "Member 'FRHAPI_MatchSegmentWithPlayers::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CustomData_Optional) == 0x000068, "Member 'FRHAPI_MatchSegmentWithPlayers::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CustomData_IsSet) == 0x0000B8, "Member 'FRHAPI_MatchSegmentWithPlayers::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CustomData_IsNull) == 0x0000B9, "Member 'FRHAPI_MatchSegmentWithPlayers::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CorrelationId_Optional) == 0x0000C0, "Member 'FRHAPI_MatchSegmentWithPlayers::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CorrelationId_IsSet) == 0x0000D0, "Member 'FRHAPI_MatchSegmentWithPlayers::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, CorrelationId_IsNull) == 0x0000D1, "Member 'FRHAPI_MatchSegmentWithPlayers::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Sessions_Optional) == 0x0000D8, "Member 'FRHAPI_MatchSegmentWithPlayers::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Sessions_IsSet) == 0x0000E8, "Member 'FRHAPI_MatchSegmentWithPlayers::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Instances_Optional) == 0x0000F0, "Member 'FRHAPI_MatchSegmentWithPlayers::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Instances_IsSet) == 0x000100, "Member 'FRHAPI_MatchSegmentWithPlayers::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Allocations_Optional) == 0x000108, "Member 'FRHAPI_MatchSegmentWithPlayers::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Allocations_IsSet) == 0x000118, "Member 'FRHAPI_MatchSegmentWithPlayers::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, MatchSegment) == 0x000120, "Member 'FRHAPI_MatchSegmentWithPlayers::MatchSegment' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, MatchId_Optional) == 0x000130, "Member 'FRHAPI_MatchSegmentWithPlayers::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, MatchId_IsSet) == 0x000140, "Member 'FRHAPI_MatchSegmentWithPlayers::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Players_Optional) == 0x000148, "Member 'FRHAPI_MatchSegmentWithPlayers::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentWithPlayers, Players_IsSet) == 0x000158, "Member 'FRHAPI_MatchSegmentWithPlayers::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchWithPlayers
// 0x0160 (0x0168 - 0x0008)
struct FRHAPI_MatchWithPlayers final : public FRHAPI_Model
{
public:
	struct FDateTime                              LastModifiedTimestamp_Optional;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedTimestamp_IsSet;                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type_Optional;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x003B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0068(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSegmentWithPlayers> Segments_Optional;                                 // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Segments_IsSet;                                    // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchPlayerResponse>     Players_Optional;                                  // 0x0150(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchWithPlayers) == 0x000008, "Wrong alignment on FRHAPI_MatchWithPlayers");
static_assert(sizeof(FRHAPI_MatchWithPlayers) == 0x000168, "Wrong size on FRHAPI_MatchWithPlayers");
static_assert(offsetof(FRHAPI_MatchWithPlayers, LastModifiedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_MatchWithPlayers::LastModifiedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, LastModifiedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_MatchWithPlayers::LastModifiedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CreatedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_MatchWithPlayers::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CreatedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_MatchWithPlayers::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Type_Optional) == 0x000028, "Member 'FRHAPI_MatchWithPlayers::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Type_IsSet) == 0x000038, "Member 'FRHAPI_MatchWithPlayers::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Type_IsNull) == 0x000039, "Member 'FRHAPI_MatchWithPlayers::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, State_Optional) == 0x00003A, "Member 'FRHAPI_MatchWithPlayers::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, State_IsSet) == 0x00003B, "Member 'FRHAPI_MatchWithPlayers::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, State_IsNull) == 0x00003C, "Member 'FRHAPI_MatchWithPlayers::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, StartTimestamp_Optional) == 0x000040, "Member 'FRHAPI_MatchWithPlayers::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, StartTimestamp_IsSet) == 0x000048, "Member 'FRHAPI_MatchWithPlayers::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, StartTimestamp_IsNull) == 0x000049, "Member 'FRHAPI_MatchWithPlayers::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, EndTimestamp_Optional) == 0x000050, "Member 'FRHAPI_MatchWithPlayers::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, EndTimestamp_IsSet) == 0x000058, "Member 'FRHAPI_MatchWithPlayers::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, EndTimestamp_IsNull) == 0x000059, "Member 'FRHAPI_MatchWithPlayers::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, DurationSeconds_Optional) == 0x00005C, "Member 'FRHAPI_MatchWithPlayers::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, DurationSeconds_IsSet) == 0x000060, "Member 'FRHAPI_MatchWithPlayers::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, DurationSeconds_IsNull) == 0x000061, "Member 'FRHAPI_MatchWithPlayers::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CustomData_Optional) == 0x000068, "Member 'FRHAPI_MatchWithPlayers::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CustomData_IsSet) == 0x0000B8, "Member 'FRHAPI_MatchWithPlayers::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CustomData_IsNull) == 0x0000B9, "Member 'FRHAPI_MatchWithPlayers::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CorrelationId_Optional) == 0x0000C0, "Member 'FRHAPI_MatchWithPlayers::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CorrelationId_IsSet) == 0x0000D0, "Member 'FRHAPI_MatchWithPlayers::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, CorrelationId_IsNull) == 0x0000D1, "Member 'FRHAPI_MatchWithPlayers::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Sessions_Optional) == 0x0000D8, "Member 'FRHAPI_MatchWithPlayers::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Sessions_IsSet) == 0x0000E8, "Member 'FRHAPI_MatchWithPlayers::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Instances_Optional) == 0x0000F0, "Member 'FRHAPI_MatchWithPlayers::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Instances_IsSet) == 0x000100, "Member 'FRHAPI_MatchWithPlayers::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Allocations_Optional) == 0x000108, "Member 'FRHAPI_MatchWithPlayers::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Allocations_IsSet) == 0x000118, "Member 'FRHAPI_MatchWithPlayers::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, MatchId_Optional) == 0x000120, "Member 'FRHAPI_MatchWithPlayers::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, MatchId_IsSet) == 0x000130, "Member 'FRHAPI_MatchWithPlayers::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Segments_Optional) == 0x000138, "Member 'FRHAPI_MatchWithPlayers::Segments_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Segments_IsSet) == 0x000148, "Member 'FRHAPI_MatchWithPlayers::Segments_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Players_Optional) == 0x000150, "Member 'FRHAPI_MatchWithPlayers::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchWithPlayers, Players_IsSet) == 0x000160, "Member 'FRHAPI_MatchWithPlayers::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AdOpportunities
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_AdOpportunities final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_AdOpportunity>           Opportunities;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_AdOpportunities) == 0x000008, "Wrong alignment on FRHAPI_AdOpportunities");
static_assert(sizeof(FRHAPI_AdOpportunities) == 0x000018, "Wrong size on FRHAPI_AdOpportunities");
static_assert(offsetof(FRHAPI_AdOpportunities, Opportunities) == 0x000008, "Member 'FRHAPI_AdOpportunities::Opportunities' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformUserOperationRequest
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_PlatformUserOperationRequest final : public FRHAPI_Model
{
public:
	ERHAPI_Platform                               Platform_Optional;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformUserOperationRequest) == 0x000008, "Wrong alignment on FRHAPI_PlatformUserOperationRequest");
static_assert(sizeof(FRHAPI_PlatformUserOperationRequest) == 0x000028, "Wrong size on FRHAPI_PlatformUserOperationRequest");
static_assert(offsetof(FRHAPI_PlatformUserOperationRequest, Platform_Optional) == 0x000008, "Member 'FRHAPI_PlatformUserOperationRequest::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserOperationRequest, Platform_IsSet) == 0x000009, "Member 'FRHAPI_PlatformUserOperationRequest::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserOperationRequest, PlatformUserId_Optional) == 0x000010, "Member 'FRHAPI_PlatformUserOperationRequest::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserOperationRequest, PlatformUserId_IsSet) == 0x000020, "Member 'FRHAPI_PlatformUserOperationRequest::PlatformUserId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchValuesOnly
// 0x0130 (0x0138 - 0x0008)
struct FRHAPI_MatchValuesOnly final : public FRHAPI_Model
{
public:
	struct FDateTime                              LastModifiedTimestamp_Optional;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedTimestamp_IsSet;                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Type_Optional;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x003B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0068(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0120(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchValuesOnly) == 0x000008, "Wrong alignment on FRHAPI_MatchValuesOnly");
static_assert(sizeof(FRHAPI_MatchValuesOnly) == 0x000138, "Wrong size on FRHAPI_MatchValuesOnly");
static_assert(offsetof(FRHAPI_MatchValuesOnly, LastModifiedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_MatchValuesOnly::LastModifiedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, LastModifiedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_MatchValuesOnly::LastModifiedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CreatedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_MatchValuesOnly::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CreatedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_MatchValuesOnly::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Type_Optional) == 0x000028, "Member 'FRHAPI_MatchValuesOnly::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Type_IsSet) == 0x000038, "Member 'FRHAPI_MatchValuesOnly::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Type_IsNull) == 0x000039, "Member 'FRHAPI_MatchValuesOnly::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, State_Optional) == 0x00003A, "Member 'FRHAPI_MatchValuesOnly::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, State_IsSet) == 0x00003B, "Member 'FRHAPI_MatchValuesOnly::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, State_IsNull) == 0x00003C, "Member 'FRHAPI_MatchValuesOnly::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, StartTimestamp_Optional) == 0x000040, "Member 'FRHAPI_MatchValuesOnly::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, StartTimestamp_IsSet) == 0x000048, "Member 'FRHAPI_MatchValuesOnly::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, StartTimestamp_IsNull) == 0x000049, "Member 'FRHAPI_MatchValuesOnly::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, EndTimestamp_Optional) == 0x000050, "Member 'FRHAPI_MatchValuesOnly::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, EndTimestamp_IsSet) == 0x000058, "Member 'FRHAPI_MatchValuesOnly::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, EndTimestamp_IsNull) == 0x000059, "Member 'FRHAPI_MatchValuesOnly::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, DurationSeconds_Optional) == 0x00005C, "Member 'FRHAPI_MatchValuesOnly::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, DurationSeconds_IsSet) == 0x000060, "Member 'FRHAPI_MatchValuesOnly::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, DurationSeconds_IsNull) == 0x000061, "Member 'FRHAPI_MatchValuesOnly::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CustomData_Optional) == 0x000068, "Member 'FRHAPI_MatchValuesOnly::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CustomData_IsSet) == 0x0000B8, "Member 'FRHAPI_MatchValuesOnly::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CustomData_IsNull) == 0x0000B9, "Member 'FRHAPI_MatchValuesOnly::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CorrelationId_Optional) == 0x0000C0, "Member 'FRHAPI_MatchValuesOnly::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CorrelationId_IsSet) == 0x0000D0, "Member 'FRHAPI_MatchValuesOnly::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, CorrelationId_IsNull) == 0x0000D1, "Member 'FRHAPI_MatchValuesOnly::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Sessions_Optional) == 0x0000D8, "Member 'FRHAPI_MatchValuesOnly::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Sessions_IsSet) == 0x0000E8, "Member 'FRHAPI_MatchValuesOnly::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Instances_Optional) == 0x0000F0, "Member 'FRHAPI_MatchValuesOnly::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Instances_IsSet) == 0x000100, "Member 'FRHAPI_MatchValuesOnly::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Allocations_Optional) == 0x000108, "Member 'FRHAPI_MatchValuesOnly::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, Allocations_IsSet) == 0x000118, "Member 'FRHAPI_MatchValuesOnly::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, MatchId_Optional) == 0x000120, "Member 'FRHAPI_MatchValuesOnly::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchValuesOnly, MatchId_IsSet) == 0x000130, "Member 'FRHAPI_MatchValuesOnly::MatchId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchPlayerWithMatch
// 0x0250 (0x0258 - 0x0008)
struct FRHAPI_MatchPlayerWithMatch final : public FRHAPI_Model
{
public:
	struct FDateTime                              LastModifiedTimestamp_Optional;                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedTimestamp_IsSet;                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamId_Optional;                                   // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsNull;                                     // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartySessionId_Optional;                           // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsSet;                              // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsNull;                             // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Placement_Optional;                                // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsSet;                                   // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsNull;                                  // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              JoinedMatchTimestamp_Optional;                     // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsSet;                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsNull;                       // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LeftMatchTimestamp_Optional;                       // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsSet;                          // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsNull;                         // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartingRank_Optional;                             // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsSet;                                // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsNull;                               // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishingRank_Optional;                            // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsSet;                               // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsNull;                              // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0119(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchValuesOnly                 Match;                                             // 0x0120(0x0138)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchPlayerWithMatch) == 0x000008, "Wrong alignment on FRHAPI_MatchPlayerWithMatch");
static_assert(sizeof(FRHAPI_MatchPlayerWithMatch) == 0x000258, "Wrong size on FRHAPI_MatchPlayerWithMatch");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, LastModifiedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_MatchPlayerWithMatch::LastModifiedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, LastModifiedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_MatchPlayerWithMatch::LastModifiedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, CreatedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_MatchPlayerWithMatch::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, CreatedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_MatchPlayerWithMatch::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, PlayerUuid_Optional) == 0x000024, "Member 'FRHAPI_MatchPlayerWithMatch::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, PlayerUuid_IsSet) == 0x000034, "Member 'FRHAPI_MatchPlayerWithMatch::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, TeamId_Optional) == 0x000038, "Member 'FRHAPI_MatchPlayerWithMatch::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, TeamId_IsSet) == 0x000048, "Member 'FRHAPI_MatchPlayerWithMatch::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, TeamId_IsNull) == 0x000049, "Member 'FRHAPI_MatchPlayerWithMatch::TeamId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, PartySessionId_Optional) == 0x000050, "Member 'FRHAPI_MatchPlayerWithMatch::PartySessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, PartySessionId_IsSet) == 0x000060, "Member 'FRHAPI_MatchPlayerWithMatch::PartySessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, PartySessionId_IsNull) == 0x000061, "Member 'FRHAPI_MatchPlayerWithMatch::PartySessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, Placement_Optional) == 0x000064, "Member 'FRHAPI_MatchPlayerWithMatch::Placement_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, Placement_IsSet) == 0x000068, "Member 'FRHAPI_MatchPlayerWithMatch::Placement_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, Placement_IsNull) == 0x000069, "Member 'FRHAPI_MatchPlayerWithMatch::Placement_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, JoinedMatchTimestamp_Optional) == 0x000070, "Member 'FRHAPI_MatchPlayerWithMatch::JoinedMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, JoinedMatchTimestamp_IsSet) == 0x000078, "Member 'FRHAPI_MatchPlayerWithMatch::JoinedMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, JoinedMatchTimestamp_IsNull) == 0x000079, "Member 'FRHAPI_MatchPlayerWithMatch::JoinedMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, LeftMatchTimestamp_Optional) == 0x000080, "Member 'FRHAPI_MatchPlayerWithMatch::LeftMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, LeftMatchTimestamp_IsSet) == 0x000088, "Member 'FRHAPI_MatchPlayerWithMatch::LeftMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, LeftMatchTimestamp_IsNull) == 0x000089, "Member 'FRHAPI_MatchPlayerWithMatch::LeftMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, DurationSeconds_Optional) == 0x00008C, "Member 'FRHAPI_MatchPlayerWithMatch::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, DurationSeconds_IsSet) == 0x000090, "Member 'FRHAPI_MatchPlayerWithMatch::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, DurationSeconds_IsNull) == 0x000091, "Member 'FRHAPI_MatchPlayerWithMatch::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, StartingRank_Optional) == 0x000098, "Member 'FRHAPI_MatchPlayerWithMatch::StartingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, StartingRank_IsSet) == 0x0000A8, "Member 'FRHAPI_MatchPlayerWithMatch::StartingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, StartingRank_IsNull) == 0x0000A9, "Member 'FRHAPI_MatchPlayerWithMatch::StartingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, FinishingRank_Optional) == 0x0000B0, "Member 'FRHAPI_MatchPlayerWithMatch::FinishingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, FinishingRank_IsSet) == 0x0000C0, "Member 'FRHAPI_MatchPlayerWithMatch::FinishingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, FinishingRank_IsNull) == 0x0000C1, "Member 'FRHAPI_MatchPlayerWithMatch::FinishingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, CustomData_Optional) == 0x0000C8, "Member 'FRHAPI_MatchPlayerWithMatch::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, CustomData_IsSet) == 0x000118, "Member 'FRHAPI_MatchPlayerWithMatch::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, CustomData_IsNull) == 0x000119, "Member 'FRHAPI_MatchPlayerWithMatch::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerWithMatch, Match) == 0x000120, "Member 'FRHAPI_MatchPlayerWithMatch::Match' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BackfillSettingsResponse
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_BackfillSettingsResponse final : public FRHAPI_Model
{
public:
	float                                         Timeout;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BackfillSettingsResponse) == 0x000008, "Wrong alignment on FRHAPI_BackfillSettingsResponse");
static_assert(sizeof(FRHAPI_BackfillSettingsResponse) == 0x000010, "Wrong size on FRHAPI_BackfillSettingsResponse");
static_assert(offsetof(FRHAPI_BackfillSettingsResponse, Timeout) == 0x000008, "Member 'FRHAPI_BackfillSettingsResponse::Timeout' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Notifications
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_Notifications final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_Notification>            Notifications_Optional;                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Notifications_IsSet;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_Notifications) == 0x000008, "Wrong alignment on FRHAPI_Notifications");
static_assert(sizeof(FRHAPI_Notifications) == 0x000030, "Wrong size on FRHAPI_Notifications");
static_assert(offsetof(FRHAPI_Notifications, Notifications_Optional) == 0x000008, "Member 'FRHAPI_Notifications::Notifications_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notifications, Notifications_IsSet) == 0x000018, "Member 'FRHAPI_Notifications::Notifications_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notifications, Cursor) == 0x000020, "Member 'FRHAPI_Notifications::Cursor' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PurgeResponse
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_PurgeResponse final : public FRHAPI_Model
{
public:
	struct FGuid                                  PersonId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              PurgeOn;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedOn;                                         // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModifiedOn;                                    // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PurgeResponse) == 0x000008, "Wrong alignment on FRHAPI_PurgeResponse");
static_assert(sizeof(FRHAPI_PurgeResponse) == 0x000040, "Wrong size on FRHAPI_PurgeResponse");
static_assert(offsetof(FRHAPI_PurgeResponse, PersonId) == 0x000008, "Member 'FRHAPI_PurgeResponse::PersonId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurgeResponse, PurgeOn) == 0x000018, "Member 'FRHAPI_PurgeResponse::PurgeOn' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurgeResponse, CreatedOn) == 0x000020, "Member 'FRHAPI_PurgeResponse::CreatedOn' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurgeResponse, LastModifiedOn) == 0x000028, "Member 'FRHAPI_PurgeResponse::LastModifiedOn' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurgeResponse, Status) == 0x000030, "Member 'FRHAPI_PurgeResponse::Status' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PurchasePriceCurrency
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_PurchasePriceCurrency final : public FRHAPI_Model
{
public:
	int32                                         PriceItemId;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PurchasePriceCurrency) == 0x000008, "Wrong alignment on FRHAPI_PurchasePriceCurrency");
static_assert(sizeof(FRHAPI_PurchasePriceCurrency) == 0x000010, "Wrong size on FRHAPI_PurchasePriceCurrency");
static_assert(offsetof(FRHAPI_PurchasePriceCurrency, PriceItemId) == 0x000008, "Member 'FRHAPI_PurchasePriceCurrency::PriceItemId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePriceCurrency, Price) == 0x00000C, "Member 'FRHAPI_PurchasePriceCurrency::Price' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PurchasePrice
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PurchasePrice final : public FRHAPI_Model
{
public:
	int32                                         PriceItemId_Optional;                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemId_IsSet;                                 // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemId_IsNull;                                // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Price_Optional;                                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Price_IsSet;                                       // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Price_IsNull;                                      // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PriceCouponItemId_Optional;                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceCouponItemId_IsSet;                           // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceCouponItemId_IsNull;                          // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PurchasePriceCurrency>   Currencies_Optional;                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Currencies_IsSet;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Currencies_IsNull;                                 // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PurchasePrice) == 0x000008, "Wrong alignment on FRHAPI_PurchasePrice");
static_assert(sizeof(FRHAPI_PurchasePrice) == 0x000038, "Wrong size on FRHAPI_PurchasePrice");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceItemId_Optional) == 0x000008, "Member 'FRHAPI_PurchasePrice::PriceItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceItemId_IsSet) == 0x00000C, "Member 'FRHAPI_PurchasePrice::PriceItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceItemId_IsNull) == 0x00000D, "Member 'FRHAPI_PurchasePrice::PriceItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Price_Optional) == 0x000010, "Member 'FRHAPI_PurchasePrice::Price_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Price_IsSet) == 0x000014, "Member 'FRHAPI_PurchasePrice::Price_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Price_IsNull) == 0x000015, "Member 'FRHAPI_PurchasePrice::Price_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceCouponItemId_Optional) == 0x000018, "Member 'FRHAPI_PurchasePrice::PriceCouponItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceCouponItemId_IsSet) == 0x00001C, "Member 'FRHAPI_PurchasePrice::PriceCouponItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, PriceCouponItemId_IsNull) == 0x00001D, "Member 'FRHAPI_PurchasePrice::PriceCouponItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Currencies_Optional) == 0x000020, "Member 'FRHAPI_PurchasePrice::Currencies_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Currencies_IsSet) == 0x000030, "Member 'FRHAPI_PurchasePrice::Currencies_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurchasePrice, Currencies_IsNull) == 0x000031, "Member 'FRHAPI_PurchasePrice::Currencies_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderEntryCreateOutput
// 0x0180 (0x0188 - 0x0008)
struct FRHAPI_PlayerOrderEntryCreateOutput final : public FRHAPI_Model
{
public:
	ERHAPI_PlayerOrderEntryType                   Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId_Optional;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsNull;                                     // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorVersion_Optional;                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsSet;                               // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsNull;                              // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VendorEtag_Optional;                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsSet;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsNull;                                 // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DynamicBundleLootIds_Optional;                     // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsSet;                        // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsNull;                       // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PurchasePrice                   PurchasePrice_Optional;                            // 0x0050(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsSet;                               // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsNull;                              // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalTranId_Optional;                           // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsSet;                              // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsNull;                             // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalItemSku_Optional;                          // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsSet;                             // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsNull;                            // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        UseInventoryBucket_Optional;                       // 0x00BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsSet;                          // 0x00BB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsNull;                         // 0x00BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerPortalEventId_Optional;                      // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsSet;                         // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsNull;                        // 0x00C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InventoryId_Optional;                              // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsSet;                                 // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsNull;                                // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyInventoryId_Optional;                        // 0x00DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsSet;                           // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsNull;                          // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x00E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_XpQuantityTransform                    XpQuantityTransformType_Optional;                  // 0x00FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpQuantityTransformType_IsSet;                     // 0x00FB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardQuantityMaximum_Optional;                      // 0x00FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsSet;                         // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsNull;                        // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryOperation                     InventoryOperation_Optional;                       // 0x0102(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryOperation_IsSet;                          // 0x0103(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventorySelector                      InventorySelectorType_Optional;                    // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventorySelectorType_IsSet;                       // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityMultInventoryItemId_Optional;              // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsSet;                 // 0x010C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsNull;                // 0x010D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeFrameId_Optional;                              // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsSet;                                 // 0x0114(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsNull;                                // 0x0115(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0118(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntryId_Optional;                                  // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntryId_IsSet;                                     // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntryId_IsNull;                                    // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerOrderEntryCreateOutput) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderEntryCreateOutput");
static_assert(sizeof(FRHAPI_PlayerOrderEntryCreateOutput) == 0x000188, "Wrong size on FRHAPI_PlayerOrderEntryCreateOutput");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, Type) == 0x000008, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LootId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LootId_IsSet) == 0x000010, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LootId_IsNull) == 0x000011, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, Quantity) == 0x000014, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::Quantity' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorVersion_Optional) == 0x000018, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorVersion_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorVersion_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorVersion_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorVersion_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorVersion_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorEtag_Optional) == 0x000020, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorEtag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorEtag_IsSet) == 0x000030, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorEtag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, VendorEtag_IsNull) == 0x000031, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::VendorEtag_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, DynamicBundleLootIds_Optional) == 0x000038, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::DynamicBundleLootIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, DynamicBundleLootIds_IsSet) == 0x000048, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::DynamicBundleLootIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, DynamicBundleLootIds_IsNull) == 0x000049, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::DynamicBundleLootIds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PurchasePrice_Optional) == 0x000050, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PurchasePrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PurchasePrice_IsSet) == 0x000088, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PurchasePrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PurchasePrice_IsNull) == 0x000089, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PurchasePrice_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalTranId_Optional) == 0x000090, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalTranId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalTranId_IsSet) == 0x0000A0, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalTranId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalTranId_IsNull) == 0x0000A1, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalTranId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalItemSku_Optional) == 0x0000A8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalItemSku_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalItemSku_IsSet) == 0x0000B8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalItemSku_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ExternalItemSku_IsNull) == 0x0000B9, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ExternalItemSku_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, UseInventoryBucket_Optional) == 0x0000BA, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::UseInventoryBucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, UseInventoryBucket_IsSet) == 0x0000BB, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::UseInventoryBucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, UseInventoryBucket_IsNull) == 0x0000BC, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::UseInventoryBucket_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PlayerPortalEventId_Optional) == 0x0000C0, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PlayerPortalEventId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PlayerPortalEventId_IsSet) == 0x0000C4, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PlayerPortalEventId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, PlayerPortalEventId_IsNull) == 0x0000C5, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::PlayerPortalEventId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventoryId_Optional) == 0x0000C8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventoryId_IsSet) == 0x0000D8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventoryId_IsNull) == 0x0000D9, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LegacyInventoryId_Optional) == 0x0000DC, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LegacyInventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LegacyInventoryId_IsSet) == 0x0000E0, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LegacyInventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, LegacyInventoryId_IsNull) == 0x0000E1, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::LegacyInventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ItemId_Optional) == 0x0000E4, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ItemId_IsSet) == 0x0000E8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, ItemId_IsNull) == 0x0000E9, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, Expires_Optional) == 0x0000F0, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, Expires_IsSet) == 0x0000F8, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, Expires_IsNull) == 0x0000F9, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, XpQuantityTransformType_Optional) == 0x0000FA, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::XpQuantityTransformType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, XpQuantityTransformType_IsSet) == 0x0000FB, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::XpQuantityTransformType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, HardQuantityMaximum_Optional) == 0x0000FC, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::HardQuantityMaximum_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, HardQuantityMaximum_IsSet) == 0x000100, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::HardQuantityMaximum_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, HardQuantityMaximum_IsNull) == 0x000101, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::HardQuantityMaximum_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventoryOperation_Optional) == 0x000102, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventoryOperation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventoryOperation_IsSet) == 0x000103, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventoryOperation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventorySelectorType_Optional) == 0x000104, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventorySelectorType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, InventorySelectorType_IsSet) == 0x000105, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::InventorySelectorType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, QuantityMultInventoryItemId_Optional) == 0x000108, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::QuantityMultInventoryItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, QuantityMultInventoryItemId_IsSet) == 0x00010C, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::QuantityMultInventoryItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, QuantityMultInventoryItemId_IsNull) == 0x00010D, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::QuantityMultInventoryItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, TimeFrameId_Optional) == 0x000110, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::TimeFrameId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, TimeFrameId_IsSet) == 0x000114, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::TimeFrameId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, TimeFrameId_IsNull) == 0x000115, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::TimeFrameId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, CustomData_Optional) == 0x000118, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, CustomData_IsSet) == 0x000168, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, CustomData_IsNull) == 0x000169, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, EntryId_Optional) == 0x000170, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::EntryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, EntryId_IsSet) == 0x000180, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::EntryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateOutput, EntryId_IsNull) == 0x000181, "Member 'FRHAPI_PlayerOrderEntryCreateOutput::EntryId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderCreateOutput
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_PlayerOrderCreateOutput final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_Optional;                            // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_IsSet;                               // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsNull;                                    // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlayerOrderEntryCreateOutput> Entries;                                      // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerOrderCreateOutput) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderCreateOutput");
static_assert(sizeof(FRHAPI_PlayerOrderCreateOutput) == 0x000098, "Wrong size on FRHAPI_PlayerOrderCreateOutput");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, Source_Optional) == 0x000008, "Member 'FRHAPI_PlayerOrderCreateOutput::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, Source_IsSet) == 0x000009, "Member 'FRHAPI_PlayerOrderCreateOutput::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderCreateOutput::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderCreateOutput::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderCreateOutput::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalId_Optional) == 0x00001E, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalId_IsSet) == 0x00001F, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalId_IsNull) == 0x000020, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalUserId_Optional) == 0x000028, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalUserId_IsSet) == 0x000038, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, PortalUserId_IsNull) == 0x000039, "Member 'FRHAPI_PlayerOrderCreateOutput::PortalUserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, InstanceId_Optional) == 0x000040, "Member 'FRHAPI_PlayerOrderCreateOutput::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, InstanceId_IsSet) == 0x000050, "Member 'FRHAPI_PlayerOrderCreateOutput::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, InstanceId_IsNull) == 0x000051, "Member 'FRHAPI_PlayerOrderCreateOutput::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, MatchId_Optional) == 0x000058, "Member 'FRHAPI_PlayerOrderCreateOutput::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, MatchId_IsSet) == 0x000068, "Member 'FRHAPI_PlayerOrderCreateOutput::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, MatchId_IsNull) == 0x000069, "Member 'FRHAPI_PlayerOrderCreateOutput::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, IsTransaction_Optional) == 0x00006A, "Member 'FRHAPI_PlayerOrderCreateOutput::IsTransaction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, IsTransaction_IsSet) == 0x00006B, "Member 'FRHAPI_PlayerOrderCreateOutput::IsTransaction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, OrderId_Optional) == 0x000070, "Member 'FRHAPI_PlayerOrderCreateOutput::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, OrderId_IsSet) == 0x000080, "Member 'FRHAPI_PlayerOrderCreateOutput::OrderId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, OrderId_IsNull) == 0x000081, "Member 'FRHAPI_PlayerOrderCreateOutput::OrderId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateOutput, Entries) == 0x000088, "Member 'FRHAPI_PlayerOrderCreateOutput::Entries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryRecord
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_InventoryRecord final : public FRHAPI_Model
{
public:
	struct FGuid                                  InventoryId;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryType                          Type;                                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyInventoryId_Optional;                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsSet;                           // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsNull;                          // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        Bucket_Optional;                                   // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bucket_IsSet;                                      // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Acquired;                                          // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expires_Optional;                                  // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryRecord) == 0x000008, "Wrong alignment on FRHAPI_InventoryRecord");
static_assert(sizeof(FRHAPI_InventoryRecord) == 0x000098, "Wrong size on FRHAPI_InventoryRecord");
static_assert(offsetof(FRHAPI_InventoryRecord, InventoryId) == 0x000008, "Member 'FRHAPI_InventoryRecord::InventoryId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Type) == 0x000018, "Member 'FRHAPI_InventoryRecord::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, LegacyInventoryId_Optional) == 0x00001C, "Member 'FRHAPI_InventoryRecord::LegacyInventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, LegacyInventoryId_IsSet) == 0x000020, "Member 'FRHAPI_InventoryRecord::LegacyInventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, LegacyInventoryId_IsNull) == 0x000021, "Member 'FRHAPI_InventoryRecord::LegacyInventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Bucket_Optional) == 0x000022, "Member 'FRHAPI_InventoryRecord::Bucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Bucket_IsSet) == 0x000023, "Member 'FRHAPI_InventoryRecord::Bucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Count) == 0x000024, "Member 'FRHAPI_InventoryRecord::Count' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Acquired) == 0x000028, "Member 'FRHAPI_InventoryRecord::Acquired' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Expires_Optional) == 0x000030, "Member 'FRHAPI_InventoryRecord::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Expires_IsSet) == 0x000038, "Member 'FRHAPI_InventoryRecord::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, Expires_IsNull) == 0x000039, "Member 'FRHAPI_InventoryRecord::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, CustomData_Optional) == 0x000040, "Member 'FRHAPI_InventoryRecord::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_InventoryRecord::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryRecord, CustomData_IsNull) == 0x000091, "Member 'FRHAPI_InventoryRecord::CustomData_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerInventoryChange
// 0x0150 (0x0158 - 0x0008)
struct FRHAPI_PlayerInventoryChange final : public FRHAPI_Model
{
public:
	int32                                         BeforeItemId_Optional;                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeforeItemId_IsSet;                                // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BeforeItemId_IsNull;                               // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AfterItemId_Optional;                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AfterItemId_IsSet;                                 // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AfterItemId_IsNull;                                // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InventoryRecord                 Before_Optional;                                   // 0x0018(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Before_IsSet;                                      // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Before_IsNull;                                     // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InventoryRecord                 After_Optional;                                    // 0x00B8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          After_IsSet;                                       // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          After_IsNull;                                      // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerInventoryChange) == 0x000008, "Wrong alignment on FRHAPI_PlayerInventoryChange");
static_assert(sizeof(FRHAPI_PlayerInventoryChange) == 0x000158, "Wrong size on FRHAPI_PlayerInventoryChange");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, BeforeItemId_Optional) == 0x000008, "Member 'FRHAPI_PlayerInventoryChange::BeforeItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, BeforeItemId_IsSet) == 0x00000C, "Member 'FRHAPI_PlayerInventoryChange::BeforeItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, BeforeItemId_IsNull) == 0x00000D, "Member 'FRHAPI_PlayerInventoryChange::BeforeItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, AfterItemId_Optional) == 0x000010, "Member 'FRHAPI_PlayerInventoryChange::AfterItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, AfterItemId_IsSet) == 0x000014, "Member 'FRHAPI_PlayerInventoryChange::AfterItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, AfterItemId_IsNull) == 0x000015, "Member 'FRHAPI_PlayerInventoryChange::AfterItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, Before_Optional) == 0x000018, "Member 'FRHAPI_PlayerInventoryChange::Before_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, Before_IsSet) == 0x0000B0, "Member 'FRHAPI_PlayerInventoryChange::Before_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, Before_IsNull) == 0x0000B1, "Member 'FRHAPI_PlayerInventoryChange::Before_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, After_Optional) == 0x0000B8, "Member 'FRHAPI_PlayerInventoryChange::After_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, After_IsSet) == 0x000150, "Member 'FRHAPI_PlayerInventoryChange::After_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInventoryChange, After_IsNull) == 0x000151, "Member 'FRHAPI_PlayerInventoryChange::After_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderDetail
// 0x0210 (0x0218 - 0x0008)
struct FRHAPI_PlayerOrderDetail final : public FRHAPI_Model
{
public:
	ERHAPI_PlayerOrderDetailType                  Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId_Optional;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsNull;                                     // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PlayerInventoryChange           InvChange_Optional;                                // 0x0018(0x0158)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InvChange_IsSet;                                   // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvChange_IsNull;                                  // 0x0171(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PlayerOrderCreateOutput         Order_Optional;                                    // 0x0178(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Order_IsSet;                                       // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Order_IsNull;                                      // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerOrderDetail) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderDetail");
static_assert(sizeof(FRHAPI_PlayerOrderDetail) == 0x000218, "Wrong size on FRHAPI_PlayerOrderDetail");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, Type) == 0x000008, "Member 'FRHAPI_PlayerOrderDetail::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, LootId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderDetail::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, LootId_IsSet) == 0x000010, "Member 'FRHAPI_PlayerOrderDetail::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, LootId_IsNull) == 0x000011, "Member 'FRHAPI_PlayerOrderDetail::LootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, InvChange_Optional) == 0x000018, "Member 'FRHAPI_PlayerOrderDetail::InvChange_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, InvChange_IsSet) == 0x000170, "Member 'FRHAPI_PlayerOrderDetail::InvChange_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, InvChange_IsNull) == 0x000171, "Member 'FRHAPI_PlayerOrderDetail::InvChange_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, Order_Optional) == 0x000178, "Member 'FRHAPI_PlayerOrderDetail::Order_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, Order_IsSet) == 0x000210, "Member 'FRHAPI_PlayerOrderDetail::Order_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderDetail, Order_IsNull) == 0x000211, "Member 'FRHAPI_PlayerOrderDetail::Order_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderEntry
// 0x0198 (0x01A0 - 0x0008)
struct FRHAPI_PlayerOrderEntry final : public FRHAPI_Model
{
public:
	ERHAPI_PlayerOrderEntryType                   Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId_Optional;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsNull;                                     // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorVersion_Optional;                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsSet;                               // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsNull;                              // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VendorEtag_Optional;                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsSet;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsNull;                                 // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DynamicBundleLootIds_Optional;                     // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsSet;                        // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsNull;                       // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PurchasePrice                   PurchasePrice_Optional;                            // 0x0050(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsSet;                               // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsNull;                              // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalTranId_Optional;                           // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsSet;                              // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsNull;                             // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalItemSku_Optional;                          // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsSet;                             // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsNull;                            // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        UseInventoryBucket_Optional;                       // 0x00BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsSet;                          // 0x00BB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsNull;                         // 0x00BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerPortalEventId_Optional;                      // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsSet;                         // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsNull;                        // 0x00C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InventoryId_Optional;                              // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsSet;                                 // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsNull;                                // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyInventoryId_Optional;                        // 0x00DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsSet;                           // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsNull;                          // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x00E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_XpQuantityTransform                    XpQuantityTransformType_Optional;                  // 0x00FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpQuantityTransformType_IsSet;                     // 0x00FB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardQuantityMaximum_Optional;                      // 0x00FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsSet;                         // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsNull;                        // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryOperation                     InventoryOperation_Optional;                       // 0x0102(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryOperation_IsSet;                          // 0x0103(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventorySelector                      InventorySelectorType_Optional;                    // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventorySelectorType_IsSet;                       // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityMultInventoryItemId_Optional;              // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsSet;                 // 0x010C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsNull;                // 0x010D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeFrameId_Optional;                              // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsSet;                                 // 0x0114(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsNull;                                // 0x0115(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0118(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntryId;                                           // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerOrderEntryResult                 Result_Optional;                                   // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result_IsSet;                                      // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlayerOrderDetail>       Details_Optional;                                  // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Details_IsSet;                                     // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerOrderEntry) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderEntry");
static_assert(sizeof(FRHAPI_PlayerOrderEntry) == 0x0001A0, "Wrong size on FRHAPI_PlayerOrderEntry");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Type) == 0x000008, "Member 'FRHAPI_PlayerOrderEntry::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LootId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderEntry::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LootId_IsSet) == 0x000010, "Member 'FRHAPI_PlayerOrderEntry::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LootId_IsNull) == 0x000011, "Member 'FRHAPI_PlayerOrderEntry::LootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Quantity) == 0x000014, "Member 'FRHAPI_PlayerOrderEntry::Quantity' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorVersion_Optional) == 0x000018, "Member 'FRHAPI_PlayerOrderEntry::VendorVersion_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorVersion_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderEntry::VendorVersion_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorVersion_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderEntry::VendorVersion_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorEtag_Optional) == 0x000020, "Member 'FRHAPI_PlayerOrderEntry::VendorEtag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorEtag_IsSet) == 0x000030, "Member 'FRHAPI_PlayerOrderEntry::VendorEtag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, VendorEtag_IsNull) == 0x000031, "Member 'FRHAPI_PlayerOrderEntry::VendorEtag_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, DynamicBundleLootIds_Optional) == 0x000038, "Member 'FRHAPI_PlayerOrderEntry::DynamicBundleLootIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, DynamicBundleLootIds_IsSet) == 0x000048, "Member 'FRHAPI_PlayerOrderEntry::DynamicBundleLootIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, DynamicBundleLootIds_IsNull) == 0x000049, "Member 'FRHAPI_PlayerOrderEntry::DynamicBundleLootIds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PurchasePrice_Optional) == 0x000050, "Member 'FRHAPI_PlayerOrderEntry::PurchasePrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PurchasePrice_IsSet) == 0x000088, "Member 'FRHAPI_PlayerOrderEntry::PurchasePrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PurchasePrice_IsNull) == 0x000089, "Member 'FRHAPI_PlayerOrderEntry::PurchasePrice_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalTranId_Optional) == 0x000090, "Member 'FRHAPI_PlayerOrderEntry::ExternalTranId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalTranId_IsSet) == 0x0000A0, "Member 'FRHAPI_PlayerOrderEntry::ExternalTranId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalTranId_IsNull) == 0x0000A1, "Member 'FRHAPI_PlayerOrderEntry::ExternalTranId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalItemSku_Optional) == 0x0000A8, "Member 'FRHAPI_PlayerOrderEntry::ExternalItemSku_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalItemSku_IsSet) == 0x0000B8, "Member 'FRHAPI_PlayerOrderEntry::ExternalItemSku_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ExternalItemSku_IsNull) == 0x0000B9, "Member 'FRHAPI_PlayerOrderEntry::ExternalItemSku_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, UseInventoryBucket_Optional) == 0x0000BA, "Member 'FRHAPI_PlayerOrderEntry::UseInventoryBucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, UseInventoryBucket_IsSet) == 0x0000BB, "Member 'FRHAPI_PlayerOrderEntry::UseInventoryBucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, UseInventoryBucket_IsNull) == 0x0000BC, "Member 'FRHAPI_PlayerOrderEntry::UseInventoryBucket_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PlayerPortalEventId_Optional) == 0x0000C0, "Member 'FRHAPI_PlayerOrderEntry::PlayerPortalEventId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PlayerPortalEventId_IsSet) == 0x0000C4, "Member 'FRHAPI_PlayerOrderEntry::PlayerPortalEventId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, PlayerPortalEventId_IsNull) == 0x0000C5, "Member 'FRHAPI_PlayerOrderEntry::PlayerPortalEventId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventoryId_Optional) == 0x0000C8, "Member 'FRHAPI_PlayerOrderEntry::InventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventoryId_IsSet) == 0x0000D8, "Member 'FRHAPI_PlayerOrderEntry::InventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventoryId_IsNull) == 0x0000D9, "Member 'FRHAPI_PlayerOrderEntry::InventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LegacyInventoryId_Optional) == 0x0000DC, "Member 'FRHAPI_PlayerOrderEntry::LegacyInventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LegacyInventoryId_IsSet) == 0x0000E0, "Member 'FRHAPI_PlayerOrderEntry::LegacyInventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, LegacyInventoryId_IsNull) == 0x0000E1, "Member 'FRHAPI_PlayerOrderEntry::LegacyInventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ItemId_Optional) == 0x0000E4, "Member 'FRHAPI_PlayerOrderEntry::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ItemId_IsSet) == 0x0000E8, "Member 'FRHAPI_PlayerOrderEntry::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, ItemId_IsNull) == 0x0000E9, "Member 'FRHAPI_PlayerOrderEntry::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Expires_Optional) == 0x0000F0, "Member 'FRHAPI_PlayerOrderEntry::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Expires_IsSet) == 0x0000F8, "Member 'FRHAPI_PlayerOrderEntry::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Expires_IsNull) == 0x0000F9, "Member 'FRHAPI_PlayerOrderEntry::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, XpQuantityTransformType_Optional) == 0x0000FA, "Member 'FRHAPI_PlayerOrderEntry::XpQuantityTransformType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, XpQuantityTransformType_IsSet) == 0x0000FB, "Member 'FRHAPI_PlayerOrderEntry::XpQuantityTransformType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, HardQuantityMaximum_Optional) == 0x0000FC, "Member 'FRHAPI_PlayerOrderEntry::HardQuantityMaximum_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, HardQuantityMaximum_IsSet) == 0x000100, "Member 'FRHAPI_PlayerOrderEntry::HardQuantityMaximum_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, HardQuantityMaximum_IsNull) == 0x000101, "Member 'FRHAPI_PlayerOrderEntry::HardQuantityMaximum_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventoryOperation_Optional) == 0x000102, "Member 'FRHAPI_PlayerOrderEntry::InventoryOperation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventoryOperation_IsSet) == 0x000103, "Member 'FRHAPI_PlayerOrderEntry::InventoryOperation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventorySelectorType_Optional) == 0x000104, "Member 'FRHAPI_PlayerOrderEntry::InventorySelectorType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, InventorySelectorType_IsSet) == 0x000105, "Member 'FRHAPI_PlayerOrderEntry::InventorySelectorType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, QuantityMultInventoryItemId_Optional) == 0x000108, "Member 'FRHAPI_PlayerOrderEntry::QuantityMultInventoryItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, QuantityMultInventoryItemId_IsSet) == 0x00010C, "Member 'FRHAPI_PlayerOrderEntry::QuantityMultInventoryItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, QuantityMultInventoryItemId_IsNull) == 0x00010D, "Member 'FRHAPI_PlayerOrderEntry::QuantityMultInventoryItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, TimeFrameId_Optional) == 0x000110, "Member 'FRHAPI_PlayerOrderEntry::TimeFrameId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, TimeFrameId_IsSet) == 0x000114, "Member 'FRHAPI_PlayerOrderEntry::TimeFrameId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, TimeFrameId_IsNull) == 0x000115, "Member 'FRHAPI_PlayerOrderEntry::TimeFrameId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, CustomData_Optional) == 0x000118, "Member 'FRHAPI_PlayerOrderEntry::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, CustomData_IsSet) == 0x000168, "Member 'FRHAPI_PlayerOrderEntry::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, CustomData_IsNull) == 0x000169, "Member 'FRHAPI_PlayerOrderEntry::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, EntryId) == 0x000170, "Member 'FRHAPI_PlayerOrderEntry::EntryId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Result_Optional) == 0x000180, "Member 'FRHAPI_PlayerOrderEntry::Result_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Result_IsSet) == 0x000181, "Member 'FRHAPI_PlayerOrderEntry::Result_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Details_Optional) == 0x000188, "Member 'FRHAPI_PlayerOrderEntry::Details_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntry, Details_IsSet) == 0x000198, "Member 'FRHAPI_PlayerOrderEntry::Details_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrder
// 0x00A0 (0x00A8 - 0x0008)
struct FRHAPI_PlayerOrder final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_Optional;                            // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_IsSet;                               // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTime;                                       // 0x0090(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_PlayerOrderEntry>        Entries;                                           // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerOrder) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrder");
static_assert(sizeof(FRHAPI_PlayerOrder) == 0x0000A8, "Wrong size on FRHAPI_PlayerOrder");
static_assert(offsetof(FRHAPI_PlayerOrder, Source_Optional) == 0x000008, "Member 'FRHAPI_PlayerOrder::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, Source_IsSet) == 0x000009, "Member 'FRHAPI_PlayerOrder::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrder::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrder::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrder::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalId_Optional) == 0x00001E, "Member 'FRHAPI_PlayerOrder::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalId_IsSet) == 0x00001F, "Member 'FRHAPI_PlayerOrder::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalId_IsNull) == 0x000020, "Member 'FRHAPI_PlayerOrder::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalUserId_Optional) == 0x000028, "Member 'FRHAPI_PlayerOrder::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalUserId_IsSet) == 0x000038, "Member 'FRHAPI_PlayerOrder::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PortalUserId_IsNull) == 0x000039, "Member 'FRHAPI_PlayerOrder::PortalUserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, InstanceId_Optional) == 0x000040, "Member 'FRHAPI_PlayerOrder::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, InstanceId_IsSet) == 0x000050, "Member 'FRHAPI_PlayerOrder::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, InstanceId_IsNull) == 0x000051, "Member 'FRHAPI_PlayerOrder::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, MatchId_Optional) == 0x000058, "Member 'FRHAPI_PlayerOrder::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, MatchId_IsSet) == 0x000068, "Member 'FRHAPI_PlayerOrder::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, MatchId_IsNull) == 0x000069, "Member 'FRHAPI_PlayerOrder::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, IsTransaction_Optional) == 0x00006A, "Member 'FRHAPI_PlayerOrder::IsTransaction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, IsTransaction_IsSet) == 0x00006B, "Member 'FRHAPI_PlayerOrder::IsTransaction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, OrderId) == 0x000070, "Member 'FRHAPI_PlayerOrder::OrderId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, PlayerUuid) == 0x000080, "Member 'FRHAPI_PlayerOrder::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, CreatedTime) == 0x000090, "Member 'FRHAPI_PlayerOrder::CreatedTime' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrder, Entries) == 0x000098, "Member 'FRHAPI_PlayerOrder::Entries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionJoinResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_SessionJoinResponse final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_SessionJoinResponse) == 0x000008, "Wrong alignment on FRHAPI_SessionJoinResponse");
static_assert(sizeof(FRHAPI_SessionJoinResponse) == 0x000018, "Wrong size on FRHAPI_SessionJoinResponse");
static_assert(offsetof(FRHAPI_SessionJoinResponse, SessionId) == 0x000008, "Member 'FRHAPI_SessionJoinResponse::SessionId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerDeserterStatus
// 0x00A8 (0x00B0 - 0x0008)
struct FRHAPI_PlayerDeserterStatus final : public FRHAPI_Model
{
public:
	class FString                                 DeserterId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterStatus;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DeserterExpiration_Optional;                       // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterExpiration_IsSet;                          // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DeserterReset_Optional;                            // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterReset_IsSet;                               // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeserterCount_Optional;                            // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterCount_IsSet;                               // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastUpdated_Optional;                              // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastUpdated_IsSet;                                 // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0058(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerDeserterStatus) == 0x000008, "Wrong alignment on FRHAPI_PlayerDeserterStatus");
static_assert(sizeof(FRHAPI_PlayerDeserterStatus) == 0x0000B0, "Wrong size on FRHAPI_PlayerDeserterStatus");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterId) == 0x000008, "Member 'FRHAPI_PlayerDeserterStatus::DeserterId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterStatus) == 0x000018, "Member 'FRHAPI_PlayerDeserterStatus::DeserterStatus' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterExpiration_Optional) == 0x000020, "Member 'FRHAPI_PlayerDeserterStatus::DeserterExpiration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterExpiration_IsSet) == 0x000028, "Member 'FRHAPI_PlayerDeserterStatus::DeserterExpiration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterReset_Optional) == 0x000030, "Member 'FRHAPI_PlayerDeserterStatus::DeserterReset_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterReset_IsSet) == 0x000038, "Member 'FRHAPI_PlayerDeserterStatus::DeserterReset_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterCount_Optional) == 0x00003C, "Member 'FRHAPI_PlayerDeserterStatus::DeserterCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, DeserterCount_IsSet) == 0x000040, "Member 'FRHAPI_PlayerDeserterStatus::DeserterCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, LastUpdated_Optional) == 0x000048, "Member 'FRHAPI_PlayerDeserterStatus::LastUpdated_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, LastUpdated_IsSet) == 0x000050, "Member 'FRHAPI_PlayerDeserterStatus::LastUpdated_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, CustomData_Optional) == 0x000058, "Member 'FRHAPI_PlayerDeserterStatus::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerDeserterStatus, CustomData_IsSet) == 0x0000A8, "Member 'FRHAPI_PlayerDeserterStatus::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AllPlayerDeserterStatuses
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_AllPlayerDeserterStatuses final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerDeserterStatus>    DeserterStatuses;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_AllPlayerDeserterStatuses) == 0x000008, "Wrong alignment on FRHAPI_AllPlayerDeserterStatuses");
static_assert(sizeof(FRHAPI_AllPlayerDeserterStatuses) == 0x000018, "Wrong size on FRHAPI_AllPlayerDeserterStatuses");
static_assert(offsetof(FRHAPI_AllPlayerDeserterStatuses, DeserterStatuses) == 0x000008, "Member 'FRHAPI_AllPlayerDeserterStatuses::DeserterStatuses' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerIdWrapper
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_PlayerIdWrapper final : public FRHAPI_Model
{
public:
	int32                                         PlayerId;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerIdWrapper) == 0x000008, "Wrong alignment on FRHAPI_PlayerIdWrapper");
static_assert(sizeof(FRHAPI_PlayerIdWrapper) == 0x000010, "Wrong size on FRHAPI_PlayerIdWrapper");
static_assert(offsetof(FRHAPI_PlayerIdWrapper, PlayerId) == 0x000008, "Member 'FRHAPI_PlayerIdWrapper::PlayerId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionPlayer
// 0x0160 (0x0168 - 0x0008)
struct FRHAPI_SessionPlayer final : public FRHAPI_Model
{
public:
	int32                                         PlayerId_Optional;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsSet;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SessionPlayerStatus                    Status;                                            // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InvitingPlayerUuid_Optional;                       // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvitingPlayerUuid_IsSet;                          // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SourceSessionId_Optional;                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourceSessionId_IsSet;                             // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_ClientSettings                  ClientSettings_Optional;                           // 0x00C0(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ClientSettings_IsSet;                              // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CrossplayPreferences            CrossplayPreferences_Optional;                     // 0x00D8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayPreferences_IsSet;                        // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Invited_Optional;                                  // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Invited_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Joined_Optional;                                   // 0x0100(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joined_IsSet;                                      // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ERHAPI_IntraSessionPermissions>          SessionPermissions_Optional;                       // 0x0110(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          SessionPermissions_IsSet;                          // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionPlayer) == 0x000008, "Wrong alignment on FRHAPI_SessionPlayer");
static_assert(sizeof(FRHAPI_SessionPlayer) == 0x000168, "Wrong size on FRHAPI_SessionPlayer");
static_assert(offsetof(FRHAPI_SessionPlayer, PlayerId_Optional) == 0x000008, "Member 'FRHAPI_SessionPlayer::PlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, PlayerId_IsSet) == 0x00000C, "Member 'FRHAPI_SessionPlayer::PlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, PlayerUuid) == 0x000010, "Member 'FRHAPI_SessionPlayer::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Status) == 0x000020, "Member 'FRHAPI_SessionPlayer::Status' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, InvitingPlayerUuid_Optional) == 0x000024, "Member 'FRHAPI_SessionPlayer::InvitingPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, InvitingPlayerUuid_IsSet) == 0x000034, "Member 'FRHAPI_SessionPlayer::InvitingPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, SourceSessionId_Optional) == 0x000038, "Member 'FRHAPI_SessionPlayer::SourceSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, SourceSessionId_IsSet) == 0x000048, "Member 'FRHAPI_SessionPlayer::SourceSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, CustomData_Optional) == 0x000050, "Member 'FRHAPI_SessionPlayer::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, CustomData_IsSet) == 0x0000A0, "Member 'FRHAPI_SessionPlayer::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Version_Optional) == 0x0000A8, "Member 'FRHAPI_SessionPlayer::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Version_IsSet) == 0x0000B8, "Member 'FRHAPI_SessionPlayer::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, ClientSettings_Optional) == 0x0000C0, "Member 'FRHAPI_SessionPlayer::ClientSettings_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, ClientSettings_IsSet) == 0x0000D0, "Member 'FRHAPI_SessionPlayer::ClientSettings_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, CrossplayPreferences_Optional) == 0x0000D8, "Member 'FRHAPI_SessionPlayer::CrossplayPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, CrossplayPreferences_IsSet) == 0x0000E8, "Member 'FRHAPI_SessionPlayer::CrossplayPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Invited_Optional) == 0x0000F0, "Member 'FRHAPI_SessionPlayer::Invited_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Invited_IsSet) == 0x0000F8, "Member 'FRHAPI_SessionPlayer::Invited_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Joined_Optional) == 0x000100, "Member 'FRHAPI_SessionPlayer::Joined_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, Joined_IsSet) == 0x000108, "Member 'FRHAPI_SessionPlayer::Joined_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, SessionPermissions_Optional) == 0x000110, "Member 'FRHAPI_SessionPlayer::SessionPermissions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayer, SessionPermissions_IsSet) == 0x000160, "Member 'FRHAPI_SessionPlayer::SessionPermissions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AcknowledgeBackfillResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_AcknowledgeBackfillResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionPlayer>           BackfilledPlayers_Optional;                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          BackfilledPlayers_IsSet;                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_AcknowledgeBackfillResponse) == 0x000008, "Wrong alignment on FRHAPI_AcknowledgeBackfillResponse");
static_assert(sizeof(FRHAPI_AcknowledgeBackfillResponse) == 0x000020, "Wrong size on FRHAPI_AcknowledgeBackfillResponse");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillResponse, BackfilledPlayers_Optional) == 0x000008, "Member 'FRHAPI_AcknowledgeBackfillResponse::BackfilledPlayers_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_AcknowledgeBackfillResponse, BackfilledPlayers_IsSet) == 0x000018, "Member 'FRHAPI_AcknowledgeBackfillResponse::BackfilledPlayers_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformSessionPlayer
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_PlatformSessionPlayer final : public FRHAPI_Model
{
public:
	int32                                         PlayerId_Optional;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsSet;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Leader_Optional;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Leader_IsSet;                                      // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformSessionPlayer) == 0x000008, "Wrong alignment on FRHAPI_PlatformSessionPlayer");
static_assert(sizeof(FRHAPI_PlatformSessionPlayer) == 0x000028, "Wrong size on FRHAPI_PlatformSessionPlayer");
static_assert(offsetof(FRHAPI_PlatformSessionPlayer, PlayerId_Optional) == 0x000008, "Member 'FRHAPI_PlatformSessionPlayer::PlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionPlayer, PlayerId_IsSet) == 0x00000C, "Member 'FRHAPI_PlatformSessionPlayer::PlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionPlayer, PlayerUuid) == 0x000010, "Member 'FRHAPI_PlatformSessionPlayer::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionPlayer, Leader_Optional) == 0x000020, "Member 'FRHAPI_PlatformSessionPlayer::Leader_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionPlayer, Leader_IsSet) == 0x000021, "Member 'FRHAPI_PlatformSessionPlayer::Leader_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexClientRequest
// 0x05A8 (0x05B0 - 0x0008)
struct FRHAPI_PexClientRequest final : public FRHAPI_Model
{
public:
	struct FRHAPI_PexStat                         FrameTime_Optional;                                // 0x0008(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsSet;                                   // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsNull;                                  // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DeltaTime_Optional;                                // 0x0038(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsSet;                                   // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsNull;                                  // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TickCount_Optional;                                // 0x0068(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsSet;                                   // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsNull;                                  // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DelayedTickCount_Optional;                         // 0x0098(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsSet;                            // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsNull;                           // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryWs_Optional;                                 // 0x00C8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsSet;                                    // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsNull;                                   // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryVb_Optional;                                 // 0x00F8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsSet;                                    // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsNull;                                   // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         CpuProcess_Optional;                               // 0x0128(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsSet;                                  // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsNull;                                 // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         Ping_Optional;                                     // 0x0158(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ping_IsSet;                                        // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ping_IsNull;                                       // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPackets_Optional;                                // 0x0188(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsSet;                                   // 0x01B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsNull;                                  // 0x01B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPackets_Optional;                               // 0x01B8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsSet;                                  // 0x01E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsNull;                                 // 0x01E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPackets_Optional;                             // 0x01E8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsSet;                                // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsNull;                               // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLoss_Optional;                             // 0x0218(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsSet;                                // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsNull;                               // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLoss_Optional;                            // 0x0248(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsSet;                               // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsNull;                              // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLoss_Optional;                          // 0x0278(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsSet;                             // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsNull;                            // 0x02A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLossPct_Optional;                          // 0x02A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsSet;                             // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsNull;                            // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLossPct_Optional;                         // 0x02D8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsSet;                            // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsNull;                           // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLossPct_Optional;                       // 0x0308(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsSet;                          // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsNull;                         // 0x0331(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalDisconnects_Optional;                         // 0x0338(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsSet;                            // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsNull;                           // 0x0349(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        MatchDuration_Optional;                            // 0x0350(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsSet;                               // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsNull;                              // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         GameThreadTime_Optional;                           // 0x0368(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          GameThreadTime_IsSet;                              // 0x0390(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameThreadTime_IsNull;                             // 0x0391(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         RenderThreadTime_Optional;                         // 0x0398(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RenderThreadTime_IsSet;                            // 0x03C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderThreadTime_IsNull;                           // 0x03C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         GpuTime_Optional;                                  // 0x03C8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          GpuTime_IsSet;                                     // 0x03F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GpuTime_IsNull;                                    // 0x03F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F2[0x6];                                      // 0x03F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId_Optional;                                 // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0418(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0419(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x0420(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x0430(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x0431(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x6];                                      // 0x0432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x0438(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0449(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44A[0x6];                                      // 0x044A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x0450(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x0460(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x0461(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x0468(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x0479(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x0480(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x0490(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x0491(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x6];                                      // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x0498(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x04A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x04A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AA[0x6];                                      // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x04B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x04C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x04C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x04C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x04D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x04D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4DA[0x2];                                      // 0x04DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x04DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x04E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x04E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0x2];                                      // 0x04E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x04E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x04E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x04EC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x04FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x04FD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FE[0x2];                                      // 0x04FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  OwningPlayerUuid_Optional;                         // 0x0500(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x0510(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x0511(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_512[0x6];                                      // 0x0512(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0518(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0528(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x0529(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52A[0x6];                                      // 0x052A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceInfo_Optional;                               // 0x0530(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsSet;                                  // 0x0540(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsNull;                                 // 0x0541(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x0542(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0543(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x0544(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0548(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0598(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0599(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59A[0x2];                                      // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x059C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexClientRequest) == 0x000008, "Wrong alignment on FRHAPI_PexClientRequest");
static_assert(sizeof(FRHAPI_PexClientRequest) == 0x0005B0, "Wrong size on FRHAPI_PexClientRequest");
static_assert(offsetof(FRHAPI_PexClientRequest, FrameTime_Optional) == 0x000008, "Member 'FRHAPI_PexClientRequest::FrameTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, FrameTime_IsSet) == 0x000030, "Member 'FRHAPI_PexClientRequest::FrameTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, FrameTime_IsNull) == 0x000031, "Member 'FRHAPI_PexClientRequest::FrameTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeltaTime_Optional) == 0x000038, "Member 'FRHAPI_PexClientRequest::DeltaTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeltaTime_IsSet) == 0x000060, "Member 'FRHAPI_PexClientRequest::DeltaTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeltaTime_IsNull) == 0x000061, "Member 'FRHAPI_PexClientRequest::DeltaTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TickCount_Optional) == 0x000068, "Member 'FRHAPI_PexClientRequest::TickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TickCount_IsSet) == 0x000090, "Member 'FRHAPI_PexClientRequest::TickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TickCount_IsNull) == 0x000091, "Member 'FRHAPI_PexClientRequest::TickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DelayedTickCount_Optional) == 0x000098, "Member 'FRHAPI_PexClientRequest::DelayedTickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DelayedTickCount_IsSet) == 0x0000C0, "Member 'FRHAPI_PexClientRequest::DelayedTickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DelayedTickCount_IsNull) == 0x0000C1, "Member 'FRHAPI_PexClientRequest::DelayedTickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryWs_Optional) == 0x0000C8, "Member 'FRHAPI_PexClientRequest::MemoryWs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryWs_IsSet) == 0x0000F0, "Member 'FRHAPI_PexClientRequest::MemoryWs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryWs_IsNull) == 0x0000F1, "Member 'FRHAPI_PexClientRequest::MemoryWs_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryVb_Optional) == 0x0000F8, "Member 'FRHAPI_PexClientRequest::MemoryVb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryVb_IsSet) == 0x000120, "Member 'FRHAPI_PexClientRequest::MemoryVb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MemoryVb_IsNull) == 0x000121, "Member 'FRHAPI_PexClientRequest::MemoryVb_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CpuProcess_Optional) == 0x000128, "Member 'FRHAPI_PexClientRequest::CpuProcess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CpuProcess_IsSet) == 0x000150, "Member 'FRHAPI_PexClientRequest::CpuProcess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CpuProcess_IsNull) == 0x000151, "Member 'FRHAPI_PexClientRequest::CpuProcess_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Ping_Optional) == 0x000158, "Member 'FRHAPI_PexClientRequest::Ping_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Ping_IsSet) == 0x000180, "Member 'FRHAPI_PexClientRequest::Ping_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Ping_IsNull) == 0x000181, "Member 'FRHAPI_PexClientRequest::Ping_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPackets_Optional) == 0x000188, "Member 'FRHAPI_PexClientRequest::InPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPackets_IsSet) == 0x0001B0, "Member 'FRHAPI_PexClientRequest::InPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPackets_IsNull) == 0x0001B1, "Member 'FRHAPI_PexClientRequest::InPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPackets_Optional) == 0x0001B8, "Member 'FRHAPI_PexClientRequest::OutPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPackets_IsSet) == 0x0001E0, "Member 'FRHAPI_PexClientRequest::OutPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPackets_IsNull) == 0x0001E1, "Member 'FRHAPI_PexClientRequest::OutPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPackets_Optional) == 0x0001E8, "Member 'FRHAPI_PexClientRequest::TotalPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPackets_IsSet) == 0x000210, "Member 'FRHAPI_PexClientRequest::TotalPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPackets_IsNull) == 0x000211, "Member 'FRHAPI_PexClientRequest::TotalPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLoss_Optional) == 0x000218, "Member 'FRHAPI_PexClientRequest::InPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLoss_IsSet) == 0x000240, "Member 'FRHAPI_PexClientRequest::InPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLoss_IsNull) == 0x000241, "Member 'FRHAPI_PexClientRequest::InPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLoss_Optional) == 0x000248, "Member 'FRHAPI_PexClientRequest::OutPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLoss_IsSet) == 0x000270, "Member 'FRHAPI_PexClientRequest::OutPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLoss_IsNull) == 0x000271, "Member 'FRHAPI_PexClientRequest::OutPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLoss_Optional) == 0x000278, "Member 'FRHAPI_PexClientRequest::TotalPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLoss_IsSet) == 0x0002A0, "Member 'FRHAPI_PexClientRequest::TotalPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLoss_IsNull) == 0x0002A1, "Member 'FRHAPI_PexClientRequest::TotalPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLossPct_Optional) == 0x0002A8, "Member 'FRHAPI_PexClientRequest::InPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLossPct_IsSet) == 0x0002D0, "Member 'FRHAPI_PexClientRequest::InPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, InPacketLossPct_IsNull) == 0x0002D1, "Member 'FRHAPI_PexClientRequest::InPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLossPct_Optional) == 0x0002D8, "Member 'FRHAPI_PexClientRequest::OutPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLossPct_IsSet) == 0x000300, "Member 'FRHAPI_PexClientRequest::OutPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OutPacketLossPct_IsNull) == 0x000301, "Member 'FRHAPI_PexClientRequest::OutPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLossPct_Optional) == 0x000308, "Member 'FRHAPI_PexClientRequest::TotalPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLossPct_IsSet) == 0x000330, "Member 'FRHAPI_PexClientRequest::TotalPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalPacketLossPct_IsNull) == 0x000331, "Member 'FRHAPI_PexClientRequest::TotalPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalDisconnects_Optional) == 0x000338, "Member 'FRHAPI_PexClientRequest::TotalDisconnects_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalDisconnects_IsSet) == 0x000348, "Member 'FRHAPI_PexClientRequest::TotalDisconnects_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, TotalDisconnects_IsNull) == 0x000349, "Member 'FRHAPI_PexClientRequest::TotalDisconnects_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchDuration_Optional) == 0x000350, "Member 'FRHAPI_PexClientRequest::MatchDuration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchDuration_IsSet) == 0x000360, "Member 'FRHAPI_PexClientRequest::MatchDuration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchDuration_IsNull) == 0x000361, "Member 'FRHAPI_PexClientRequest::MatchDuration_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameThreadTime_Optional) == 0x000368, "Member 'FRHAPI_PexClientRequest::GameThreadTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameThreadTime_IsSet) == 0x000390, "Member 'FRHAPI_PexClientRequest::GameThreadTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameThreadTime_IsNull) == 0x000391, "Member 'FRHAPI_PexClientRequest::GameThreadTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RenderThreadTime_Optional) == 0x000398, "Member 'FRHAPI_PexClientRequest::RenderThreadTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RenderThreadTime_IsSet) == 0x0003C0, "Member 'FRHAPI_PexClientRequest::RenderThreadTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RenderThreadTime_IsNull) == 0x0003C1, "Member 'FRHAPI_PexClientRequest::RenderThreadTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GpuTime_Optional) == 0x0003C8, "Member 'FRHAPI_PexClientRequest::GpuTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GpuTime_IsSet) == 0x0003F0, "Member 'FRHAPI_PexClientRequest::GpuTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GpuTime_IsNull) == 0x0003F1, "Member 'FRHAPI_PexClientRequest::GpuTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchID) == 0x0003F8, "Member 'FRHAPI_PexClientRequest::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RegionId_Optional) == 0x000408, "Member 'FRHAPI_PexClientRequest::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RegionId_IsSet) == 0x000418, "Member 'FRHAPI_PexClientRequest::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, RegionId_IsNull) == 0x000419, "Member 'FRHAPI_PexClientRequest::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ServerId_Optional) == 0x000420, "Member 'FRHAPI_PexClientRequest::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ServerId_IsSet) == 0x000430, "Member 'FRHAPI_PexClientRequest::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ServerId_IsNull) == 0x000431, "Member 'FRHAPI_PexClientRequest::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AllocationId_Optional) == 0x000438, "Member 'FRHAPI_PexClientRequest::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AllocationId_IsSet) == 0x000448, "Member 'FRHAPI_PexClientRequest::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AllocationId_IsNull) == 0x000449, "Member 'FRHAPI_PexClientRequest::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterProvider_Optional) == 0x000450, "Member 'FRHAPI_PexClientRequest::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterProvider_IsSet) == 0x000460, "Member 'FRHAPI_PexClientRequest::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterProvider_IsNull) == 0x000461, "Member 'FRHAPI_PexClientRequest::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterLocation_Optional) == 0x000468, "Member 'FRHAPI_PexClientRequest::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterLocation_IsSet) == 0x000478, "Member 'FRHAPI_PexClientRequest::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DatacenterLocation_IsNull) == 0x000479, "Member 'FRHAPI_PexClientRequest::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AddressIp_Optional) == 0x000480, "Member 'FRHAPI_PexClientRequest::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AddressIp_IsSet) == 0x000490, "Member 'FRHAPI_PexClientRequest::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, AddressIp_IsNull) == 0x000491, "Member 'FRHAPI_PexClientRequest::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MapName_Optional) == 0x000498, "Member 'FRHAPI_PexClientRequest::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MapName_IsSet) == 0x0004A8, "Member 'FRHAPI_PexClientRequest::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MapName_IsNull) == 0x0004A9, "Member 'FRHAPI_PexClientRequest::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameMode_Optional) == 0x0004B0, "Member 'FRHAPI_PexClientRequest::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameMode_IsSet) == 0x0004C0, "Member 'FRHAPI_PexClientRequest::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, GameMode_IsNull) == 0x0004C1, "Member 'FRHAPI_PexClientRequest::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchmakingProfileId_Optional) == 0x0004C8, "Member 'FRHAPI_PexClientRequest::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchmakingProfileId_IsSet) == 0x0004D8, "Member 'FRHAPI_PexClientRequest::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, MatchmakingProfileId_IsNull) == 0x0004D9, "Member 'FRHAPI_PexClientRequest::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedTeamSize_Optional) == 0x0004DC, "Member 'FRHAPI_PexClientRequest::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedTeamSize_IsSet) == 0x0004E0, "Member 'FRHAPI_PexClientRequest::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedTeamSize_IsNull) == 0x0004E1, "Member 'FRHAPI_PexClientRequest::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedPlayerCount_Optional) == 0x0004E4, "Member 'FRHAPI_PexClientRequest::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedPlayerCount_IsSet) == 0x0004E8, "Member 'FRHAPI_PexClientRequest::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, ExpectedPlayerCount_IsNull) == 0x0004E9, "Member 'FRHAPI_PexClientRequest::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, HostPlayerUuid_Optional) == 0x0004EC, "Member 'FRHAPI_PexClientRequest::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, HostPlayerUuid_IsSet) == 0x0004FC, "Member 'FRHAPI_PexClientRequest::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, HostPlayerUuid_IsNull) == 0x0004FD, "Member 'FRHAPI_PexClientRequest::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OwningPlayerUuid_Optional) == 0x000500, "Member 'FRHAPI_PexClientRequest::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OwningPlayerUuid_IsSet) == 0x000510, "Member 'FRHAPI_PexClientRequest::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, OwningPlayerUuid_IsNull) == 0x000511, "Member 'FRHAPI_PexClientRequest::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Version_Optional) == 0x000518, "Member 'FRHAPI_PexClientRequest::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Version_IsSet) == 0x000528, "Member 'FRHAPI_PexClientRequest::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, Version_IsNull) == 0x000529, "Member 'FRHAPI_PexClientRequest::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeviceInfo_Optional) == 0x000530, "Member 'FRHAPI_PexClientRequest::DeviceInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeviceInfo_IsSet) == 0x000540, "Member 'FRHAPI_PexClientRequest::DeviceInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, DeviceInfo_IsNull) == 0x000541, "Member 'FRHAPI_PexClientRequest::DeviceInfo_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, PlatformId_Optional) == 0x000542, "Member 'FRHAPI_PexClientRequest::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, PlatformId_IsSet) == 0x000543, "Member 'FRHAPI_PexClientRequest::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, PlatformId_IsNull) == 0x000544, "Member 'FRHAPI_PexClientRequest::PlatformId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CustomData_Optional) == 0x000548, "Member 'FRHAPI_PexClientRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CustomData_IsSet) == 0x000598, "Member 'FRHAPI_PexClientRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, CustomData_IsNull) == 0x000599, "Member 'FRHAPI_PexClientRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientRequest, PlayerUuid) == 0x00059C, "Member 'FRHAPI_PexClientRequest::PlayerUuid' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Platforms
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_Platforms final : public FRHAPI_Model
{
public:
	TArray<class FString>                         Platforms;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_Platforms) == 0x000008, "Wrong alignment on FRHAPI_Platforms");
static_assert(sizeof(FRHAPI_Platforms) == 0x000018, "Wrong size on FRHAPI_Platforms");
static_assert(offsetof(FRHAPI_Platforms, Platforms) == 0x000008, "Member 'FRHAPI_Platforms::Platforms' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReport
// 0x0138 (0x0140 - 0x0008)
struct FRHAPI_PlayerReport final : public FRHAPI_Model
{
public:
	class FString                                 ReportId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SourcePlayerUuid_Optional;                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsSet;                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsNull;                           // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SourcePlayerId_Optional;                           // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerId_IsSet;                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerId_IsNull;                             // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  TargetPlayerUuid;                                  // 0x0034(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayerUuid_IsNull;                           // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetPlayerId_Optional;                           // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayerId_IsSet;                              // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TargetPlayerId_IsNull;                             // 0x004D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ReportReason                           Reason;                                            // 0x004E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description_Optional;                              // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsSet;                                 // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsNull;                                // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId_Optional;                                // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchSegment_Optional;                             // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchSegment_IsSet;                                // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchSegment_IsNull;                               // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created_Optional;                                  // 0x0120(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Created_IsSet;                                     // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Created_IsNull;                                    // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Modified_Optional;                                 // 0x0130(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Modified_IsSet;                                    // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Modified_IsNull;                                   // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerReport) == 0x000008, "Wrong alignment on FRHAPI_PlayerReport");
static_assert(sizeof(FRHAPI_PlayerReport) == 0x000140, "Wrong size on FRHAPI_PlayerReport");
static_assert(offsetof(FRHAPI_PlayerReport, ReportId) == 0x000008, "Member 'FRHAPI_PlayerReport::ReportId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerUuid_Optional) == 0x000018, "Member 'FRHAPI_PlayerReport::SourcePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerUuid_IsSet) == 0x000028, "Member 'FRHAPI_PlayerReport::SourcePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerUuid_IsNull) == 0x000029, "Member 'FRHAPI_PlayerReport::SourcePlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerId_Optional) == 0x00002C, "Member 'FRHAPI_PlayerReport::SourcePlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerId_IsSet) == 0x000030, "Member 'FRHAPI_PlayerReport::SourcePlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SourcePlayerId_IsNull) == 0x000031, "Member 'FRHAPI_PlayerReport::SourcePlayerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, TargetPlayerUuid) == 0x000034, "Member 'FRHAPI_PlayerReport::TargetPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, TargetPlayerUuid_IsNull) == 0x000044, "Member 'FRHAPI_PlayerReport::TargetPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, TargetPlayerId_Optional) == 0x000048, "Member 'FRHAPI_PlayerReport::TargetPlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, TargetPlayerId_IsSet) == 0x00004C, "Member 'FRHAPI_PlayerReport::TargetPlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, TargetPlayerId_IsNull) == 0x00004D, "Member 'FRHAPI_PlayerReport::TargetPlayerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Reason) == 0x00004E, "Member 'FRHAPI_PlayerReport::Reason' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Description_Optional) == 0x000050, "Member 'FRHAPI_PlayerReport::Description_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Description_IsSet) == 0x000060, "Member 'FRHAPI_PlayerReport::Description_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Description_IsNull) == 0x000061, "Member 'FRHAPI_PlayerReport::Description_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SessionId_Optional) == 0x000068, "Member 'FRHAPI_PlayerReport::SessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SessionId_IsSet) == 0x000078, "Member 'FRHAPI_PlayerReport::SessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, SessionId_IsNull) == 0x000079, "Member 'FRHAPI_PlayerReport::SessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, InstanceId_Optional) == 0x000080, "Member 'FRHAPI_PlayerReport::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, InstanceId_IsSet) == 0x000090, "Member 'FRHAPI_PlayerReport::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, InstanceId_IsNull) == 0x000091, "Member 'FRHAPI_PlayerReport::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchId_Optional) == 0x000098, "Member 'FRHAPI_PlayerReport::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchId_IsSet) == 0x0000A8, "Member 'FRHAPI_PlayerReport::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchId_IsNull) == 0x0000A9, "Member 'FRHAPI_PlayerReport::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchSegment_Optional) == 0x0000B0, "Member 'FRHAPI_PlayerReport::MatchSegment_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchSegment_IsSet) == 0x0000C0, "Member 'FRHAPI_PlayerReport::MatchSegment_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, MatchSegment_IsNull) == 0x0000C1, "Member 'FRHAPI_PlayerReport::MatchSegment_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, CustomData_Optional) == 0x0000C8, "Member 'FRHAPI_PlayerReport::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, CustomData_IsSet) == 0x000118, "Member 'FRHAPI_PlayerReport::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Created_Optional) == 0x000120, "Member 'FRHAPI_PlayerReport::Created_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Created_IsSet) == 0x000128, "Member 'FRHAPI_PlayerReport::Created_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Created_IsNull) == 0x000129, "Member 'FRHAPI_PlayerReport::Created_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Modified_Optional) == 0x000130, "Member 'FRHAPI_PlayerReport::Modified_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Modified_IsSet) == 0x000138, "Member 'FRHAPI_PlayerReport::Modified_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReport, Modified_IsNull) == 0x000139, "Member 'FRHAPI_PlayerReport::Modified_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CacheInfo
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_CacheInfo final : public FRHAPI_Model
{
public:
	class FString                                 Etag;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_CacheInfo) == 0x000008, "Wrong alignment on FRHAPI_CacheInfo");
static_assert(sizeof(FRHAPI_CacheInfo) == 0x000018, "Wrong size on FRHAPI_CacheInfo");
static_assert(offsetof(FRHAPI_CacheInfo, Etag) == 0x000008, "Member 'FRHAPI_CacheInfo::Etag' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TimeFrame
// 0x0060 (0x0068 - 0x0008)
struct FRHAPI_TimeFrame final : public FRHAPI_Model
{
public:
	class FString                                 Name_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsNull;                                       // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active_Optional;                                   // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active_IsSet;                                      // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Episode_Optional;                                  // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Episode_IsSet;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EpisodeType_Optional;                              // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EpisodeType_IsSet;                                 // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HourInterval_Optional;                             // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HourInterval_IsSet;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Start;                                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              End;                                               // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0048(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_TimeFrame) == 0x000008, "Wrong alignment on FRHAPI_TimeFrame");
static_assert(sizeof(FRHAPI_TimeFrame) == 0x000068, "Wrong size on FRHAPI_TimeFrame");
static_assert(offsetof(FRHAPI_TimeFrame, Name_Optional) == 0x000008, "Member 'FRHAPI_TimeFrame::Name_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Name_IsSet) == 0x000018, "Member 'FRHAPI_TimeFrame::Name_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Name_IsNull) == 0x000019, "Member 'FRHAPI_TimeFrame::Name_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Active_Optional) == 0x00001A, "Member 'FRHAPI_TimeFrame::Active_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Active_IsSet) == 0x00001B, "Member 'FRHAPI_TimeFrame::Active_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Episode_Optional) == 0x00001C, "Member 'FRHAPI_TimeFrame::Episode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Episode_IsSet) == 0x000020, "Member 'FRHAPI_TimeFrame::Episode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, EpisodeType_Optional) == 0x000024, "Member 'FRHAPI_TimeFrame::EpisodeType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, EpisodeType_IsSet) == 0x000028, "Member 'FRHAPI_TimeFrame::EpisodeType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, HourInterval_Optional) == 0x00002C, "Member 'FRHAPI_TimeFrame::HourInterval_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, HourInterval_IsSet) == 0x000030, "Member 'FRHAPI_TimeFrame::HourInterval_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, Start) == 0x000038, "Member 'FRHAPI_TimeFrame::Start' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, End) == 0x000040, "Member 'FRHAPI_TimeFrame::End' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, CacheInfo_Optional) == 0x000048, "Member 'FRHAPI_TimeFrame::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, CacheInfo_IsSet) == 0x000060, "Member 'FRHAPI_TimeFrame::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrame, CacheInfo_IsNull) == 0x000061, "Member 'FRHAPI_TimeFrame::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TimeFrames
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_TimeFrames final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_TimeFrame>  TimeFrames_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TimeFrames_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_TimeFrames) == 0x000008, "Wrong alignment on FRHAPI_TimeFrames");
static_assert(sizeof(FRHAPI_TimeFrames) == 0x000080, "Wrong size on FRHAPI_TimeFrames");
static_assert(offsetof(FRHAPI_TimeFrames, TimeFrames_Optional) == 0x000008, "Member 'FRHAPI_TimeFrames::TimeFrames_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrames, TimeFrames_IsSet) == 0x000058, "Member 'FRHAPI_TimeFrames::TimeFrames_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrames, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_TimeFrames::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrames, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_TimeFrames::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TimeFrames, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_TimeFrames::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EntityGuideEngagement
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_EntityGuideEngagement final : public FRHAPI_Model
{
public:
	struct FGuid                                  GuideId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating_Optional;                                   // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rating_IsSet;                                      // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              FavoritedAt_Optional;                              // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FavoritedAt_IsSet;                                 // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FavoritedAt_IsNull;                                // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_EntityGuideEngagement) == 0x000008, "Wrong alignment on FRHAPI_EntityGuideEngagement");
static_assert(sizeof(FRHAPI_EntityGuideEngagement) == 0x000030, "Wrong size on FRHAPI_EntityGuideEngagement");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, GuideId) == 0x000008, "Member 'FRHAPI_EntityGuideEngagement::GuideId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, Rating_Optional) == 0x000018, "Member 'FRHAPI_EntityGuideEngagement::Rating_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, Rating_IsSet) == 0x00001C, "Member 'FRHAPI_EntityGuideEngagement::Rating_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, FavoritedAt_Optional) == 0x000020, "Member 'FRHAPI_EntityGuideEngagement::FavoritedAt_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, FavoritedAt_IsSet) == 0x000028, "Member 'FRHAPI_EntityGuideEngagement::FavoritedAt_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntityGuideEngagement, FavoritedAt_IsNull) == 0x000029, "Member 'FRHAPI_EntityGuideEngagement::FavoritedAt_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ManyEntityGuideEngagement
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_ManyEntityGuideEngagement final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_EntityGuideEngagement>   Results_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Results_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ManyEntityGuideEngagement) == 0x000008, "Wrong alignment on FRHAPI_ManyEntityGuideEngagement");
static_assert(sizeof(FRHAPI_ManyEntityGuideEngagement) == 0x000020, "Wrong size on FRHAPI_ManyEntityGuideEngagement");
static_assert(offsetof(FRHAPI_ManyEntityGuideEngagement, Results_Optional) == 0x000008, "Member 'FRHAPI_ManyEntityGuideEngagement::Results_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ManyEntityGuideEngagement, Results_IsSet) == 0x000018, "Member 'FRHAPI_ManyEntityGuideEngagement::Results_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BackfillTeam
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_BackfillTeam final : public FRHAPI_Model
{
public:
	int32                                         PlayersRequired;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_BackfillTeam) == 0x000008, "Wrong alignment on FRHAPI_BackfillTeam");
static_assert(sizeof(FRHAPI_BackfillTeam) == 0x000010, "Wrong size on FRHAPI_BackfillTeam");
static_assert(offsetof(FRHAPI_BackfillTeam, PlayersRequired) == 0x000008, "Member 'FRHAPI_BackfillTeam::PlayersRequired' has a wrong offset!");
static_assert(offsetof(FRHAPI_BackfillTeam, TeamId) == 0x00000C, "Member 'FRHAPI_BackfillTeam::TeamId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BaseBackfillRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_BaseBackfillRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_BaseBackfillRequest) == 0x000008, "Wrong alignment on FRHAPI_BaseBackfillRequest");
static_assert(sizeof(FRHAPI_BaseBackfillRequest) == 0x000018, "Wrong size on FRHAPI_BaseBackfillRequest");
static_assert(offsetof(FRHAPI_BaseBackfillRequest, InstanceId) == 0x000008, "Member 'FRHAPI_BaseBackfillRequest::InstanceId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PageMeta
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PageMeta final : public FRHAPI_Model
{
public:
	int32                                         Page;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PageMeta) == 0x000008, "Wrong alignment on FRHAPI_PageMeta");
static_assert(sizeof(FRHAPI_PageMeta) == 0x000018, "Wrong size on FRHAPI_PageMeta");
static_assert(offsetof(FRHAPI_PageMeta, Page) == 0x000008, "Member 'FRHAPI_PageMeta::Page' has a wrong offset!");
static_assert(offsetof(FRHAPI_PageMeta, Limit) == 0x00000C, "Member 'FRHAPI_PageMeta::Limit' has a wrong offset!");
static_assert(offsetof(FRHAPI_PageMeta, Total) == 0x000010, "Member 'FRHAPI_PageMeta::Total' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BlockedList
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_BlockedList final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_BlockedPlayer>           Blocked;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRHAPI_PageMeta                        Page;                                              // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_BlockedList) == 0x000008, "Wrong alignment on FRHAPI_BlockedList");
static_assert(sizeof(FRHAPI_BlockedList) == 0x000040, "Wrong size on FRHAPI_BlockedList");
static_assert(offsetof(FRHAPI_BlockedList, PlayerUuid) == 0x000008, "Member 'FRHAPI_BlockedList::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_BlockedList, Blocked) == 0x000018, "Member 'FRHAPI_BlockedList::Blocked' has a wrong offset!");
static_assert(offsetof(FRHAPI_BlockedList, Page) == 0x000028, "Member 'FRHAPI_BlockedList::Page' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BodyBeginNewSession
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_BodyBeginNewSession final : public FRHAPI_Model
{
public:
	class FString                                 CountryCode;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceId_Optional;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceId_IsSet;                                    // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BodyBeginNewSession) == 0x000008, "Wrong alignment on FRHAPI_BodyBeginNewSession");
static_assert(sizeof(FRHAPI_BodyBeginNewSession) == 0x000030, "Wrong size on FRHAPI_BodyBeginNewSession");
static_assert(offsetof(FRHAPI_BodyBeginNewSession, CountryCode) == 0x000008, "Member 'FRHAPI_BodyBeginNewSession::CountryCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyBeginNewSession, DeviceId_Optional) == 0x000018, "Member 'FRHAPI_BodyBeginNewSession::DeviceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyBeginNewSession, DeviceId_IsSet) == 0x000028, "Member 'FRHAPI_BodyBeginNewSession::DeviceId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BodyFindOpportunities
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_BodyFindOpportunities final : public FRHAPI_Model
{
public:
	int32                                         ScreenPixelWidth_Optional;                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScreenPixelWidth_IsSet;                            // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenPixelHeight_Optional;                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScreenPixelHeight_IsSet;                           // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CountryCode;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageCode;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceId_Optional;                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceId_IsSet;                                    // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BodyFindOpportunities) == 0x000008, "Wrong alignment on FRHAPI_BodyFindOpportunities");
static_assert(sizeof(FRHAPI_BodyFindOpportunities) == 0x000050, "Wrong size on FRHAPI_BodyFindOpportunities");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, ScreenPixelWidth_Optional) == 0x000008, "Member 'FRHAPI_BodyFindOpportunities::ScreenPixelWidth_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, ScreenPixelWidth_IsSet) == 0x00000C, "Member 'FRHAPI_BodyFindOpportunities::ScreenPixelWidth_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, ScreenPixelHeight_Optional) == 0x000010, "Member 'FRHAPI_BodyFindOpportunities::ScreenPixelHeight_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, ScreenPixelHeight_IsSet) == 0x000014, "Member 'FRHAPI_BodyFindOpportunities::ScreenPixelHeight_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, CountryCode) == 0x000018, "Member 'FRHAPI_BodyFindOpportunities::CountryCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, LanguageCode) == 0x000028, "Member 'FRHAPI_BodyFindOpportunities::LanguageCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, DeviceId_Optional) == 0x000038, "Member 'FRHAPI_BodyFindOpportunities::DeviceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyFindOpportunities, DeviceId_IsSet) == 0x000048, "Member 'FRHAPI_BodyFindOpportunities::DeviceId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BodyUpdateOpportunityById
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_BodyUpdateOpportunityById final : public FRHAPI_Model
{
public:
	ERHAPI_OpportunityState                       State;                                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_OpportunityAbortReason                 AbortReason_Optional;                              // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbortReason_IsSet;                                 // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbortSeconds_Optional;                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbortSeconds_IsSet;                                // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BodyUpdateOpportunityById) == 0x000008, "Wrong alignment on FRHAPI_BodyUpdateOpportunityById");
static_assert(sizeof(FRHAPI_BodyUpdateOpportunityById) == 0x000018, "Wrong size on FRHAPI_BodyUpdateOpportunityById");
static_assert(offsetof(FRHAPI_BodyUpdateOpportunityById, State) == 0x000008, "Member 'FRHAPI_BodyUpdateOpportunityById::State' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyUpdateOpportunityById, AbortReason_Optional) == 0x000009, "Member 'FRHAPI_BodyUpdateOpportunityById::AbortReason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyUpdateOpportunityById, AbortReason_IsSet) == 0x00000A, "Member 'FRHAPI_BodyUpdateOpportunityById::AbortReason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyUpdateOpportunityById, AbortSeconds_Optional) == 0x00000C, "Member 'FRHAPI_BodyUpdateOpportunityById::AbortSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BodyUpdateOpportunityById, AbortSeconds_IsSet) == 0x000010, "Member 'FRHAPI_BodyUpdateOpportunityById::AbortSeconds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BrowserInfo
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_BrowserInfo final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_BrowserInfo) == 0x000008, "Wrong alignment on FRHAPI_BrowserInfo");
static_assert(sizeof(FRHAPI_BrowserInfo) == 0x000070, "Wrong size on FRHAPI_BrowserInfo");
static_assert(offsetof(FRHAPI_BrowserInfo, CustomData_Optional) == 0x000008, "Member 'FRHAPI_BrowserInfo::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserInfo, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_BrowserInfo::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserInfo, CreatedTimestamp_Optional) == 0x000060, "Member 'FRHAPI_BrowserInfo::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserInfo, CreatedTimestamp_IsSet) == 0x000068, "Member 'FRHAPI_BrowserInfo::CreatedTimestamp_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_BrowserResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_BrowserResponse final : public FRHAPI_Model
{
public:
	int32                                         Cursor;                                            // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_BrowserSessionInfo>      BrowserSessions;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_BrowserResponse) == 0x000008, "Wrong alignment on FRHAPI_BrowserResponse");
static_assert(sizeof(FRHAPI_BrowserResponse) == 0x000020, "Wrong size on FRHAPI_BrowserResponse");
static_assert(offsetof(FRHAPI_BrowserResponse, Cursor) == 0x000008, "Member 'FRHAPI_BrowserResponse::Cursor' has a wrong offset!");
static_assert(offsetof(FRHAPI_BrowserResponse, BrowserSessions) == 0x000010, "Member 'FRHAPI_BrowserResponse::BrowserSessions' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CalculateRankConfig
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_CalculateRankConfig final : public FRHAPI_Model
{
public:
	float                                         MaxMu;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMu;                                             // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSigma;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Beta_Optional;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beta_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMu;                                         // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSigma;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawProbability_Optional;                          // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawProbability_IsSet;                             // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Tau_Optional;                                      // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tau_IsSet;                                         // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CalculateRankConfig) == 0x000008, "Wrong alignment on FRHAPI_CalculateRankConfig");
static_assert(sizeof(FRHAPI_CalculateRankConfig) == 0x000038, "Wrong size on FRHAPI_CalculateRankConfig");
static_assert(offsetof(FRHAPI_CalculateRankConfig, MaxMu) == 0x000008, "Member 'FRHAPI_CalculateRankConfig::MaxMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, MinMu) == 0x00000C, "Member 'FRHAPI_CalculateRankConfig::MinMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, MinSigma) == 0x000010, "Member 'FRHAPI_CalculateRankConfig::MinSigma' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, Beta_Optional) == 0x000014, "Member 'FRHAPI_CalculateRankConfig::Beta_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, Beta_IsSet) == 0x000018, "Member 'FRHAPI_CalculateRankConfig::Beta_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, DefaultMu) == 0x00001C, "Member 'FRHAPI_CalculateRankConfig::DefaultMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, DefaultSigma) == 0x000020, "Member 'FRHAPI_CalculateRankConfig::DefaultSigma' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, DrawProbability_Optional) == 0x000024, "Member 'FRHAPI_CalculateRankConfig::DrawProbability_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, DrawProbability_IsSet) == 0x000028, "Member 'FRHAPI_CalculateRankConfig::DrawProbability_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, Tau_Optional) == 0x00002C, "Member 'FRHAPI_CalculateRankConfig::Tau_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankConfig, Tau_IsSet) == 0x000030, "Member 'FRHAPI_CalculateRankConfig::Tau_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CalculateRankRequest
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_CalculateRankRequest final : public FRHAPI_Model
{
public:
	int32                                         MatchLengthSeconds;                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_RankedTeam>              Teams;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRHAPI_CalculateRankConfig             RankConfig;                                        // 0x0020(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_CalculateRankRequest) == 0x000008, "Wrong alignment on FRHAPI_CalculateRankRequest");
static_assert(sizeof(FRHAPI_CalculateRankRequest) == 0x000058, "Wrong size on FRHAPI_CalculateRankRequest");
static_assert(offsetof(FRHAPI_CalculateRankRequest, MatchLengthSeconds) == 0x000008, "Member 'FRHAPI_CalculateRankRequest::MatchLengthSeconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankRequest, Teams) == 0x000010, "Member 'FRHAPI_CalculateRankRequest::Teams' has a wrong offset!");
static_assert(offsetof(FRHAPI_CalculateRankRequest, RankConfig) == 0x000020, "Member 'FRHAPI_CalculateRankRequest::RankConfig' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRank
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_PlayerRank final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_RankRankData                    Rank;                                              // 0x0018(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRank) == 0x000008, "Wrong alignment on FRHAPI_PlayerRank");
static_assert(sizeof(FRHAPI_PlayerRank) == 0x000080, "Wrong size on FRHAPI_PlayerRank");
static_assert(offsetof(FRHAPI_PlayerRank, PlayerUuid) == 0x000008, "Member 'FRHAPI_PlayerRank::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRank, Rank) == 0x000018, "Member 'FRHAPI_PlayerRank::Rank' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CalculateRankResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_CalculateRankResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerRank>              UpdatedPlayers;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_CalculateRankResponse) == 0x000008, "Wrong alignment on FRHAPI_CalculateRankResponse");
static_assert(sizeof(FRHAPI_CalculateRankResponse) == 0x000018, "Wrong size on FRHAPI_CalculateRankResponse");
static_assert(offsetof(FRHAPI_CalculateRankResponse, UpdatedPlayers) == 0x000008, "Member 'FRHAPI_CalculateRankResponse::UpdatedPlayers' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_XpTable
// 0x00E0 (0x00E8 - 0x0008)
struct FRHAPI_XpTable final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  XpUuid_Optional;                                   // 0x005C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpUuid_IsSet;                                      // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpUuid_IsNull;                                     // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    XpEntries_Optional;                                // 0x0070(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          XpEntries_IsSet;                                   // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00C8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_XpTable) == 0x000008, "Wrong alignment on FRHAPI_XpTable");
static_assert(sizeof(FRHAPI_XpTable) == 0x0000E8, "Wrong size on FRHAPI_XpTable");
static_assert(offsetof(FRHAPI_XpTable, CustomData_Optional) == 0x000008, "Member 'FRHAPI_XpTable::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_XpTable::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, XpUuid_Optional) == 0x00005C, "Member 'FRHAPI_XpTable::XpUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, XpUuid_IsSet) == 0x00006C, "Member 'FRHAPI_XpTable::XpUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, XpUuid_IsNull) == 0x00006D, "Member 'FRHAPI_XpTable::XpUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, XpEntries_Optional) == 0x000070, "Member 'FRHAPI_XpTable::XpEntries_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, XpEntries_IsSet) == 0x0000C0, "Member 'FRHAPI_XpTable::XpEntries_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, CacheInfo_Optional) == 0x0000C8, "Member 'FRHAPI_XpTable::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, CacheInfo_IsSet) == 0x0000E0, "Member 'FRHAPI_XpTable::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTable, CacheInfo_IsNull) == 0x0000E1, "Member 'FRHAPI_XpTable::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_XpTables
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_XpTables final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_XpTable>    XpTables_Optional;                                 // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          XpTables_IsSet;                                    // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_XpTables) == 0x000008, "Wrong alignment on FRHAPI_XpTables");
static_assert(sizeof(FRHAPI_XpTables) == 0x000080, "Wrong size on FRHAPI_XpTables");
static_assert(offsetof(FRHAPI_XpTables, XpTables_Optional) == 0x000008, "Member 'FRHAPI_XpTables::XpTables_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTables, XpTables_IsSet) == 0x000058, "Member 'FRHAPI_XpTables::XpTables_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTables, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_XpTables::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTables, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_XpTables::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_XpTables, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_XpTables::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PortalUseRuleset
// 0x00D0 (0x00D8 - 0x0008)
struct FRHAPI_PortalUseRuleset final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x57];                                      // 0x0059(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Rules_IsSet;                                       // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00B8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PortalUseRuleset) == 0x000008, "Wrong alignment on FRHAPI_PortalUseRuleset");
static_assert(sizeof(FRHAPI_PortalUseRuleset) == 0x0000D8, "Wrong size on FRHAPI_PortalUseRuleset");
static_assert(offsetof(FRHAPI_PortalUseRuleset, CustomData_Optional) == 0x000008, "Member 'FRHAPI_PortalUseRuleset::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRuleset, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_PortalUseRuleset::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRuleset, Rules_IsSet) == 0x0000B0, "Member 'FRHAPI_PortalUseRuleset::Rules_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRuleset, CacheInfo_Optional) == 0x0000B8, "Member 'FRHAPI_PortalUseRuleset::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRuleset, CacheInfo_IsSet) == 0x0000D0, "Member 'FRHAPI_PortalUseRuleset::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRuleset, CacheInfo_IsNull) == 0x0000D1, "Member 'FRHAPI_PortalUseRuleset::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PortalUseRulesets
// 0x00D0 (0x00D8 - 0x0008)
struct FRHAPI_PortalUseRulesets final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_PortalUseRuleset> RuleSets_Optional;                           // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RuleSets_IsSet;                                    // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00B8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PortalUseRulesets) == 0x000008, "Wrong alignment on FRHAPI_PortalUseRulesets");
static_assert(sizeof(FRHAPI_PortalUseRulesets) == 0x0000D8, "Wrong size on FRHAPI_PortalUseRulesets");
static_assert(offsetof(FRHAPI_PortalUseRulesets, CustomData_Optional) == 0x000008, "Member 'FRHAPI_PortalUseRulesets::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_PortalUseRulesets::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, RuleSets_Optional) == 0x000060, "Member 'FRHAPI_PortalUseRulesets::RuleSets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, RuleSets_IsSet) == 0x0000B0, "Member 'FRHAPI_PortalUseRulesets::RuleSets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, CacheInfo_Optional) == 0x0000B8, "Member 'FRHAPI_PortalUseRulesets::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, CacheInfo_IsSet) == 0x0000D0, "Member 'FRHAPI_PortalUseRulesets::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUseRulesets, CacheInfo_IsNull) == 0x0000D1, "Member 'FRHAPI_PortalUseRulesets::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PriceBreakPointCurrency
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_PriceBreakPointCurrency final : public FRHAPI_Model
{
public:
	struct FGuid                                  PriceItemUuid;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceItemId;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinReducedPrice_Optional;                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinReducedPrice_IsSet;                             // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinReducedPrice_IsNull;                            // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PriceBreakPointCurrency) == 0x000008, "Wrong alignment on FRHAPI_PriceBreakPointCurrency");
static_assert(sizeof(FRHAPI_PriceBreakPointCurrency) == 0x000028, "Wrong size on FRHAPI_PriceBreakPointCurrency");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, PriceItemUuid) == 0x000008, "Member 'FRHAPI_PriceBreakPointCurrency::PriceItemUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, PriceItemId) == 0x000018, "Member 'FRHAPI_PriceBreakPointCurrency::PriceItemId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, Price) == 0x00001C, "Member 'FRHAPI_PriceBreakPointCurrency::Price' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, MinReducedPrice_Optional) == 0x000020, "Member 'FRHAPI_PriceBreakPointCurrency::MinReducedPrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, MinReducedPrice_IsSet) == 0x000024, "Member 'FRHAPI_PriceBreakPointCurrency::MinReducedPrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakPointCurrency, MinReducedPrice_IsNull) == 0x000025, "Member 'FRHAPI_PriceBreakPointCurrency::MinReducedPrice_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PriceBreakpoint
// 0x0040 (0x0048 - 0x0008)
struct FRHAPI_PriceBreakpoint final : public FRHAPI_Model
{
public:
	struct FGuid                                  PriceItemUuid_Optional;                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemUuid_IsSet;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemUuid_IsNull;                              // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PriceItemId_Optional;                              // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemId_IsSet;                                 // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceItemId_IsNull;                                // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price_Optional;                                    // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Price_IsSet;                                       // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Price_IsNull;                                      // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PriceBreakPointCurrency> Currencies_Optional;                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Currencies_IsSet;                                  // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Currencies_IsNull;                                 // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PriceBreakpoint) == 0x000008, "Wrong alignment on FRHAPI_PriceBreakpoint");
static_assert(sizeof(FRHAPI_PriceBreakpoint) == 0x000048, "Wrong size on FRHAPI_PriceBreakpoint");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemUuid_Optional) == 0x000008, "Member 'FRHAPI_PriceBreakpoint::PriceItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemUuid_IsSet) == 0x000018, "Member 'FRHAPI_PriceBreakpoint::PriceItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemUuid_IsNull) == 0x000019, "Member 'FRHAPI_PriceBreakpoint::PriceItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemId_Optional) == 0x00001C, "Member 'FRHAPI_PriceBreakpoint::PriceItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemId_IsSet) == 0x000020, "Member 'FRHAPI_PriceBreakpoint::PriceItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, PriceItemId_IsNull) == 0x000021, "Member 'FRHAPI_PriceBreakpoint::PriceItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Quantity) == 0x000024, "Member 'FRHAPI_PriceBreakpoint::Quantity' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Price_Optional) == 0x000028, "Member 'FRHAPI_PriceBreakpoint::Price_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Price_IsSet) == 0x00002C, "Member 'FRHAPI_PriceBreakpoint::Price_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Price_IsNull) == 0x00002D, "Member 'FRHAPI_PriceBreakpoint::Price_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Currencies_Optional) == 0x000030, "Member 'FRHAPI_PriceBreakpoint::Currencies_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Currencies_IsSet) == 0x000040, "Member 'FRHAPI_PriceBreakpoint::Currencies_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PriceBreakpoint, Currencies_IsNull) == 0x000041, "Member 'FRHAPI_PriceBreakpoint::Currencies_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PricePoint
// 0x00C0 (0x00C8 - 0x0008)
struct FRHAPI_PricePoint final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_Optional;                                     // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsSet;                                        // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsNull;                                       // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrictFlag_Optional;                               // 0x0072(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrictFlag_IsSet;                                  // 0x0073(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapFlag_Optional;                                  // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapFlag_IsSet;                                     // 0x0075(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PriceBreakpoint>         CurrentBreakpoints_Optional;                       // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CurrentBreakpoints_IsSet;                          // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PriceBreakpoint>         PreSaleBreakpoints_Optional;                       // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PreSaleBreakpoints_IsSet;                          // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00A8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PricePoint) == 0x000008, "Wrong alignment on FRHAPI_PricePoint");
static_assert(sizeof(FRHAPI_PricePoint) == 0x0000C8, "Wrong size on FRHAPI_PricePoint");
static_assert(offsetof(FRHAPI_PricePoint, CustomData_Optional) == 0x000008, "Member 'FRHAPI_PricePoint::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_PricePoint::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, Name_Optional) == 0x000060, "Member 'FRHAPI_PricePoint::Name_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, Name_IsSet) == 0x000070, "Member 'FRHAPI_PricePoint::Name_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, Name_IsNull) == 0x000071, "Member 'FRHAPI_PricePoint::Name_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, StrictFlag_Optional) == 0x000072, "Member 'FRHAPI_PricePoint::StrictFlag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, StrictFlag_IsSet) == 0x000073, "Member 'FRHAPI_PricePoint::StrictFlag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CapFlag_Optional) == 0x000074, "Member 'FRHAPI_PricePoint::CapFlag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CapFlag_IsSet) == 0x000075, "Member 'FRHAPI_PricePoint::CapFlag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CurrentBreakpoints_Optional) == 0x000078, "Member 'FRHAPI_PricePoint::CurrentBreakpoints_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CurrentBreakpoints_IsSet) == 0x000088, "Member 'FRHAPI_PricePoint::CurrentBreakpoints_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, PreSaleBreakpoints_Optional) == 0x000090, "Member 'FRHAPI_PricePoint::PreSaleBreakpoints_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, PreSaleBreakpoints_IsSet) == 0x0000A0, "Member 'FRHAPI_PricePoint::PreSaleBreakpoints_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CacheInfo_Optional) == 0x0000A8, "Member 'FRHAPI_PricePoint::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CacheInfo_IsSet) == 0x0000C0, "Member 'FRHAPI_PricePoint::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoint, CacheInfo_IsNull) == 0x0000C1, "Member 'FRHAPI_PricePoint::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PricePoints
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_PricePoints final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_PricePoint> PricePoints_Optional;                              // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PricePoints_IsSet;                                 // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PricePoints) == 0x000008, "Wrong alignment on FRHAPI_PricePoints");
static_assert(sizeof(FRHAPI_PricePoints) == 0x000080, "Wrong size on FRHAPI_PricePoints");
static_assert(offsetof(FRHAPI_PricePoints, PricePoints_Optional) == 0x000008, "Member 'FRHAPI_PricePoints::PricePoints_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoints, PricePoints_IsSet) == 0x000058, "Member 'FRHAPI_PricePoints::PricePoints_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoints, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_PricePoints::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoints, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_PricePoints::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PricePoints, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_PricePoints::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryBucketUseRuleSet
// 0x00D0 (0x00D8 - 0x0008)
struct FRHAPI_InventoryBucketUseRuleSet final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x57];                                      // 0x0059(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Rules_IsSet;                                       // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00B8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryBucketUseRuleSet) == 0x000008, "Wrong alignment on FRHAPI_InventoryBucketUseRuleSet");
static_assert(sizeof(FRHAPI_InventoryBucketUseRuleSet) == 0x0000D8, "Wrong size on FRHAPI_InventoryBucketUseRuleSet");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, CustomData_Optional) == 0x000008, "Member 'FRHAPI_InventoryBucketUseRuleSet::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_InventoryBucketUseRuleSet::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, Rules_IsSet) == 0x0000B0, "Member 'FRHAPI_InventoryBucketUseRuleSet::Rules_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, CacheInfo_Optional) == 0x0000B8, "Member 'FRHAPI_InventoryBucketUseRuleSet::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, CacheInfo_IsSet) == 0x0000D0, "Member 'FRHAPI_InventoryBucketUseRuleSet::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSet, CacheInfo_IsNull) == 0x0000D1, "Member 'FRHAPI_InventoryBucketUseRuleSet::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryBucketUseRuleSets
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_InventoryBucketUseRuleSets final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_InventoryBucketUseRuleSet> RuleSets_Optional;                  // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RuleSets_IsSet;                                    // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryBucketUseRuleSets) == 0x000008, "Wrong alignment on FRHAPI_InventoryBucketUseRuleSets");
static_assert(sizeof(FRHAPI_InventoryBucketUseRuleSets) == 0x000080, "Wrong size on FRHAPI_InventoryBucketUseRuleSets");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSets, RuleSets_Optional) == 0x000008, "Member 'FRHAPI_InventoryBucketUseRuleSets::RuleSets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSets, RuleSets_IsSet) == 0x000058, "Member 'FRHAPI_InventoryBucketUseRuleSets::RuleSets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSets, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_InventoryBucketUseRuleSets::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSets, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_InventoryBucketUseRuleSets::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryBucketUseRuleSets, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_InventoryBucketUseRuleSets::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Item
// 0x0178 (0x0180 - 0x0008)
struct FRHAPI_Item final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ItemUuid_Optional;                                 // 0x005C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemUuid_IsSet;                                    // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemUuid_IsNull;                                   // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ItemType                               Type_Optional;                                     // 0x006E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x006F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegacyType_Optional;                               // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyType_IsSet;                                  // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacySubtype_Optional;                            // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacySubtype_IsSet;                               // 0x007C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RefItemId_Optional;                                // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefItemId_IsSet;                                   // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AvailabilityFlags_Optional;                        // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AvailabilityFlags_IsSet;                           // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  EntitledLootUuid_Optional;                         // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntitledLootUuid_IsSet;                            // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntitledLootUuid_IsNull;                           // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EntitledLootId_Optional;                           // 0x00A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntitledLootId_IsSet;                              // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LevelXpTableUuid_Optional;                         // 0x00AC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelXpTableUuid_IsSet;                            // 0x00BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelXpTableUuid_IsNull;                           // 0x00BD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelXpTableId_Optional;                           // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelXpTableId_IsSet;                              // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LevelVendorUuid_Optional;                          // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelVendorUuid_IsSet;                             // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelVendorUuid_IsNull;                            // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelVendorId_Optional;                            // 0x00DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LevelVendorId_IsSet;                               // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  CouponDiscountCurrencyItemUuid_Optional;           // 0x00E4(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountCurrencyItemUuid_IsSet;              // 0x00F4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountCurrencyItemUuid_IsNull;             // 0x00F5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CouponDiscountCurrencyItemId_Optional;             // 0x00F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountCurrencyItemId_IsSet;                // 0x00FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CouponDiscountPercentage_Optional;                 // 0x0100(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountPercentage_IsSet;                    // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponConsumeOnUse_Optional;                       // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CouponConsumeOnUse_IsSet;                          // 0x0106(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemPortalUseRulesetId_Optional;                   // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemPortalUseRulesetId_IsSet;                      // 0x010C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InventoryBucketUseRuleSetId_Optional;              // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryBucketUseRuleSetId_IsSet;                 // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryBucketUseRuleSetId_IsNull;                // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalOwnershipMax_Optional;                        // 0x0124(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalOwnershipMax_IsSet;                           // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CouponDiscountLoot_Optional;                       // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountLoot_IsSet;                          // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          CouponDiscountLootUuid_Optional;                   // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          CouponDiscountLootUuid_IsSet;                      // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0160(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0178(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0179(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Item) == 0x000008, "Wrong alignment on FRHAPI_Item");
static_assert(sizeof(FRHAPI_Item) == 0x000180, "Wrong size on FRHAPI_Item");
static_assert(offsetof(FRHAPI_Item, CustomData_Optional) == 0x000008, "Member 'FRHAPI_Item::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_Item::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, ItemUuid_Optional) == 0x00005C, "Member 'FRHAPI_Item::ItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, ItemUuid_IsSet) == 0x00006C, "Member 'FRHAPI_Item::ItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, ItemUuid_IsNull) == 0x00006D, "Member 'FRHAPI_Item::ItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, Type_Optional) == 0x00006E, "Member 'FRHAPI_Item::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, Type_IsSet) == 0x00006F, "Member 'FRHAPI_Item::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LegacyType_Optional) == 0x000070, "Member 'FRHAPI_Item::LegacyType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LegacyType_IsSet) == 0x000074, "Member 'FRHAPI_Item::LegacyType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LegacySubtype_Optional) == 0x000078, "Member 'FRHAPI_Item::LegacySubtype_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LegacySubtype_IsSet) == 0x00007C, "Member 'FRHAPI_Item::LegacySubtype_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, RefItemId_Optional) == 0x000080, "Member 'FRHAPI_Item::RefItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, RefItemId_IsSet) == 0x000084, "Member 'FRHAPI_Item::RefItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, AvailabilityFlags_Optional) == 0x000088, "Member 'FRHAPI_Item::AvailabilityFlags_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, AvailabilityFlags_IsSet) == 0x00008C, "Member 'FRHAPI_Item::AvailabilityFlags_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, EntitledLootUuid_Optional) == 0x000090, "Member 'FRHAPI_Item::EntitledLootUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, EntitledLootUuid_IsSet) == 0x0000A0, "Member 'FRHAPI_Item::EntitledLootUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, EntitledLootUuid_IsNull) == 0x0000A1, "Member 'FRHAPI_Item::EntitledLootUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, EntitledLootId_Optional) == 0x0000A4, "Member 'FRHAPI_Item::EntitledLootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, EntitledLootId_IsSet) == 0x0000A8, "Member 'FRHAPI_Item::EntitledLootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelXpTableUuid_Optional) == 0x0000AC, "Member 'FRHAPI_Item::LevelXpTableUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelXpTableUuid_IsSet) == 0x0000BC, "Member 'FRHAPI_Item::LevelXpTableUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelXpTableUuid_IsNull) == 0x0000BD, "Member 'FRHAPI_Item::LevelXpTableUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelXpTableId_Optional) == 0x0000C0, "Member 'FRHAPI_Item::LevelXpTableId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelXpTableId_IsSet) == 0x0000C4, "Member 'FRHAPI_Item::LevelXpTableId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelVendorUuid_Optional) == 0x0000C8, "Member 'FRHAPI_Item::LevelVendorUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelVendorUuid_IsSet) == 0x0000D8, "Member 'FRHAPI_Item::LevelVendorUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelVendorUuid_IsNull) == 0x0000D9, "Member 'FRHAPI_Item::LevelVendorUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelVendorId_Optional) == 0x0000DC, "Member 'FRHAPI_Item::LevelVendorId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, LevelVendorId_IsSet) == 0x0000E0, "Member 'FRHAPI_Item::LevelVendorId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountCurrencyItemUuid_Optional) == 0x0000E4, "Member 'FRHAPI_Item::CouponDiscountCurrencyItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountCurrencyItemUuid_IsSet) == 0x0000F4, "Member 'FRHAPI_Item::CouponDiscountCurrencyItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountCurrencyItemUuid_IsNull) == 0x0000F5, "Member 'FRHAPI_Item::CouponDiscountCurrencyItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountCurrencyItemId_Optional) == 0x0000F8, "Member 'FRHAPI_Item::CouponDiscountCurrencyItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountCurrencyItemId_IsSet) == 0x0000FC, "Member 'FRHAPI_Item::CouponDiscountCurrencyItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountPercentage_Optional) == 0x000100, "Member 'FRHAPI_Item::CouponDiscountPercentage_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountPercentage_IsSet) == 0x000104, "Member 'FRHAPI_Item::CouponDiscountPercentage_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponConsumeOnUse_Optional) == 0x000105, "Member 'FRHAPI_Item::CouponConsumeOnUse_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponConsumeOnUse_IsSet) == 0x000106, "Member 'FRHAPI_Item::CouponConsumeOnUse_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, ItemPortalUseRulesetId_Optional) == 0x000108, "Member 'FRHAPI_Item::ItemPortalUseRulesetId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, ItemPortalUseRulesetId_IsSet) == 0x00010C, "Member 'FRHAPI_Item::ItemPortalUseRulesetId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, InventoryBucketUseRuleSetId_Optional) == 0x000110, "Member 'FRHAPI_Item::InventoryBucketUseRuleSetId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, InventoryBucketUseRuleSetId_IsSet) == 0x000120, "Member 'FRHAPI_Item::InventoryBucketUseRuleSetId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, InventoryBucketUseRuleSetId_IsNull) == 0x000121, "Member 'FRHAPI_Item::InventoryBucketUseRuleSetId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, TotalOwnershipMax_Optional) == 0x000124, "Member 'FRHAPI_Item::TotalOwnershipMax_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, TotalOwnershipMax_IsSet) == 0x000128, "Member 'FRHAPI_Item::TotalOwnershipMax_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountLoot_Optional) == 0x000130, "Member 'FRHAPI_Item::CouponDiscountLoot_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountLoot_IsSet) == 0x000140, "Member 'FRHAPI_Item::CouponDiscountLoot_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountLootUuid_Optional) == 0x000148, "Member 'FRHAPI_Item::CouponDiscountLootUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CouponDiscountLootUuid_IsSet) == 0x000158, "Member 'FRHAPI_Item::CouponDiscountLootUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CacheInfo_Optional) == 0x000160, "Member 'FRHAPI_Item::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CacheInfo_IsSet) == 0x000178, "Member 'FRHAPI_Item::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Item, CacheInfo_IsNull) == 0x000179, "Member 'FRHAPI_Item::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LootPriceCurrency
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_LootPriceCurrency final : public FRHAPI_Model
{
public:
	struct FGuid                                  PriceItemId;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceLegacyItemId_Optional;                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceLegacyItemId_IsSet;                           // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PriceLegacyItemId_IsNull;                          // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPrice;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OriginalPrice_Optional;                            // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OriginalPrice_IsSet;                               // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OriginalPrice_IsNull;                              // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinReducedPrice_Optional;                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinReducedPrice_IsSet;                             // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinReducedPrice_IsNull;                            // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LootPriceCurrency) == 0x000008, "Wrong alignment on FRHAPI_LootPriceCurrency");
static_assert(sizeof(FRHAPI_LootPriceCurrency) == 0x000038, "Wrong size on FRHAPI_LootPriceCurrency");
static_assert(offsetof(FRHAPI_LootPriceCurrency, PriceItemId) == 0x000008, "Member 'FRHAPI_LootPriceCurrency::PriceItemId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, PriceLegacyItemId_Optional) == 0x000018, "Member 'FRHAPI_LootPriceCurrency::PriceLegacyItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, PriceLegacyItemId_IsSet) == 0x00001C, "Member 'FRHAPI_LootPriceCurrency::PriceLegacyItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, PriceLegacyItemId_IsNull) == 0x00001D, "Member 'FRHAPI_LootPriceCurrency::PriceLegacyItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, CurrentPrice) == 0x000020, "Member 'FRHAPI_LootPriceCurrency::CurrentPrice' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, OriginalPrice_Optional) == 0x000024, "Member 'FRHAPI_LootPriceCurrency::OriginalPrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, OriginalPrice_IsSet) == 0x000028, "Member 'FRHAPI_LootPriceCurrency::OriginalPrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, OriginalPrice_IsNull) == 0x000029, "Member 'FRHAPI_LootPriceCurrency::OriginalPrice_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, MinReducedPrice_Optional) == 0x00002C, "Member 'FRHAPI_LootPriceCurrency::MinReducedPrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, MinReducedPrice_IsSet) == 0x000030, "Member 'FRHAPI_LootPriceCurrency::MinReducedPrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrency, MinReducedPrice_IsNull) == 0x000031, "Member 'FRHAPI_LootPriceCurrency::MinReducedPrice_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LootPriceCurrencies
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_LootPriceCurrencies final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_LootPriceCurrency>       Currencies_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Currencies_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LootPriceCurrencies) == 0x000008, "Wrong alignment on FRHAPI_LootPriceCurrencies");
static_assert(sizeof(FRHAPI_LootPriceCurrencies) == 0x000020, "Wrong size on FRHAPI_LootPriceCurrencies");
static_assert(offsetof(FRHAPI_LootPriceCurrencies, Currencies_Optional) == 0x000008, "Member 'FRHAPI_LootPriceCurrencies::Currencies_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceCurrencies, Currencies_IsSet) == 0x000018, "Member 'FRHAPI_LootPriceCurrencies::Currencies_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LootPriceBreakpoint
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_LootPriceBreakpoint final : public FRHAPI_Model
{
public:
	int32                                         Quantity_Optional;                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Quantity_IsSet;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_LootPriceCurrencies>     Prices_Optional;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Prices_IsSet;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LootPriceBreakpoint) == 0x000008, "Wrong alignment on FRHAPI_LootPriceBreakpoint");
static_assert(sizeof(FRHAPI_LootPriceBreakpoint) == 0x000028, "Wrong size on FRHAPI_LootPriceBreakpoint");
static_assert(offsetof(FRHAPI_LootPriceBreakpoint, Quantity_Optional) == 0x000008, "Member 'FRHAPI_LootPriceBreakpoint::Quantity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceBreakpoint, Quantity_IsSet) == 0x00000C, "Member 'FRHAPI_LootPriceBreakpoint::Quantity_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceBreakpoint, Prices_Optional) == 0x000010, "Member 'FRHAPI_LootPriceBreakpoint::Prices_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPriceBreakpoint, Prices_IsSet) == 0x000020, "Member 'FRHAPI_LootPriceBreakpoint::Prices_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LootPrice
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_LootPrice final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_LootPriceBreakpoint>     Breakpoints_Optional;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Breakpoints_IsSet;                                 // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrictFlag_Optional;                               // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrictFlag_IsSet;                                  // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapFlag_Optional;                                  // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CapFlag_IsSet;                                     // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LootPrice) == 0x000008, "Wrong alignment on FRHAPI_LootPrice");
static_assert(sizeof(FRHAPI_LootPrice) == 0x000020, "Wrong size on FRHAPI_LootPrice");
static_assert(offsetof(FRHAPI_LootPrice, Breakpoints_Optional) == 0x000008, "Member 'FRHAPI_LootPrice::Breakpoints_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPrice, Breakpoints_IsSet) == 0x000018, "Member 'FRHAPI_LootPrice::Breakpoints_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPrice, StrictFlag_Optional) == 0x000019, "Member 'FRHAPI_LootPrice::StrictFlag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPrice, StrictFlag_IsSet) == 0x00001A, "Member 'FRHAPI_LootPrice::StrictFlag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPrice, CapFlag_Optional) == 0x00001B, "Member 'FRHAPI_LootPrice::CapFlag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootPrice, CapFlag_IsSet) == 0x00001C, "Member 'FRHAPI_LootPrice::CapFlag_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Loot
// 0x0350 (0x0358 - 0x0008)
struct FRHAPI_Loot final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  LootUuid_Optional;                                 // 0x005C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootUuid_IsSet;                                    // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootUuid_IsNull;                                   // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId;                                            // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorId;                                          // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  VendorUuid_Optional;                               // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorUuid_IsSet;                                  // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorUuid_IsNull;                                 // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ItemUuid_Optional;                                 // 0x0094(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemUuid_IsSet;                                    // 0x00A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemUuid_IsNull;                                   // 0x00A5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_Item                            Item_Optional;                                     // 0x00A8(0x0180)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Item_IsSet;                                        // 0x0228(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Item_IsNull;                                       // 0x0229(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x2];                                      // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubVendorId_Optional;                              // 0x022C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubVendorId_IsSet;                                 // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubVendorId_IsNull;                                // 0x0231(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232[0x2];                                      // 0x0232(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SubVendorUuid_Optional;                            // 0x0234(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubVendorUuid_IsSet;                               // 0x0244(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubVendorUuid_IsNull;                              // 0x0245(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity_Optional;                                 // 0x0248(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Quantity_IsSet;                                    // 0x024C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventorySelector                      InventorySelectorType_Optional;                    // 0x024D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventorySelectorType_IsSet;                       // 0x024E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryOperation                     InventoryOperation_Optional;                       // 0x024F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryOperation_IsSet;                          // 0x0250(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active_Optional;                                   // 0x0251(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active_IsSet;                                      // 0x0252(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_253[0x1];                                      // 0x0253(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortOrder_Optional;                                // 0x0254(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortOrder_IsSet;                                   // 0x0258(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_259[0x3];                                      // 0x0259(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DropWeight_Optional;                               // 0x025C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DropWeight_IsSet;                                  // 0x0260(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FillInNewOrder_Optional;                           // 0x0261(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FillInNewOrder_IsSet;                              // 0x0262(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartialBundles_Optional;                      // 0x0263(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowPartialBundles_IsSet;                         // 0x0264(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredItemId_Optional;                           // 0x0268(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredItemId_IsSet;                              // 0x026C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredItemId_IsNull;                             // 0x026D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26E[0x2];                                      // 0x026E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  RequiredItemUuid_Optional;                         // 0x0270(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredItemUuid_IsSet;                            // 0x0280(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredItemUuid_IsNull;                           // 0x0281(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x2];                                      // 0x0282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequiredItemCount_Optional;                        // 0x0284(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiredItemCount_IsSet;                           // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackLimit_Optional;                               // 0x028C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StackLimit_IsSet;                                  // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UiHint_Optional;                                   // 0x0294(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UiHint_IsSet;                                      // 0x0298(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EffectiveFrom_Optional;                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectiveFrom_IsSet;                               // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EffectiveFrom_IsNull;                              // 0x02A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_QuantityType                           QuantityType_Optional;                             // 0x02AA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityType_IsSet;                                // 0x02AB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityMultInventoryItemId_Optional;              // 0x02AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsSet;                 // 0x02B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsNull;                // 0x02B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  QuantityMultInventoryItemUuid_Optional;            // 0x02B4(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemUuid_IsSet;               // 0x02C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemUuid_IsNull;              // 0x02C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClaimableByClient_Optional;                      // 0x02C6(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClaimableByClient_IsSet;                         // 0x02C7(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeFrameId_Optional;                              // 0x02C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsSet;                                 // 0x02CC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsNull;                                // 0x02CD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        UseInventoryBucket_Optional;                       // 0x02CE(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsSet;                          // 0x02CF(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsNull;                         // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_XpQuantityTransform                    XpQuantityTransformType_Optional;                  // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpQuantityTransformType_IsSet;                     // 0x02D2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D3[0x5];                                      // 0x02D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentPricePointGuid_Optional;                    // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPricePointGuid_IsSet;                       // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentPricePointGuid_IsNull;                      // 0x02E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreSalePricePointGuid_Optional;                    // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreSalePricePointGuid_IsSet;                       // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreSalePricePointGuid_IsNull;                      // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0308(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0320(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0321(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x2];                                      // 0x0322(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HardQuantityMaximum_Optional;                      // 0x0324(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsSet;                         // 0x0328(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_LootPrice                       Price_Optional;                                    // 0x0330(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Price_IsSet;                                       // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Price_IsNull;                                      // 0x0351(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Loot) == 0x000008, "Wrong alignment on FRHAPI_Loot");
static_assert(sizeof(FRHAPI_Loot) == 0x000358, "Wrong size on FRHAPI_Loot");
static_assert(offsetof(FRHAPI_Loot, CustomData_Optional) == 0x000008, "Member 'FRHAPI_Loot::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_Loot::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, LootUuid_Optional) == 0x00005C, "Member 'FRHAPI_Loot::LootUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, LootUuid_IsSet) == 0x00006C, "Member 'FRHAPI_Loot::LootUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, LootUuid_IsNull) == 0x00006D, "Member 'FRHAPI_Loot::LootUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, LootId) == 0x000070, "Member 'FRHAPI_Loot::LootId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, VendorId) == 0x000074, "Member 'FRHAPI_Loot::VendorId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, VendorUuid_Optional) == 0x000078, "Member 'FRHAPI_Loot::VendorUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, VendorUuid_IsSet) == 0x000088, "Member 'FRHAPI_Loot::VendorUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, VendorUuid_IsNull) == 0x000089, "Member 'FRHAPI_Loot::VendorUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemId_Optional) == 0x00008C, "Member 'FRHAPI_Loot::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemId_IsSet) == 0x000090, "Member 'FRHAPI_Loot::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemId_IsNull) == 0x000091, "Member 'FRHAPI_Loot::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemUuid_Optional) == 0x000094, "Member 'FRHAPI_Loot::ItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemUuid_IsSet) == 0x0000A4, "Member 'FRHAPI_Loot::ItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, ItemUuid_IsNull) == 0x0000A5, "Member 'FRHAPI_Loot::ItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Item_Optional) == 0x0000A8, "Member 'FRHAPI_Loot::Item_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Item_IsSet) == 0x000228, "Member 'FRHAPI_Loot::Item_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Item_IsNull) == 0x000229, "Member 'FRHAPI_Loot::Item_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorId_Optional) == 0x00022C, "Member 'FRHAPI_Loot::SubVendorId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorId_IsSet) == 0x000230, "Member 'FRHAPI_Loot::SubVendorId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorId_IsNull) == 0x000231, "Member 'FRHAPI_Loot::SubVendorId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorUuid_Optional) == 0x000234, "Member 'FRHAPI_Loot::SubVendorUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorUuid_IsSet) == 0x000244, "Member 'FRHAPI_Loot::SubVendorUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SubVendorUuid_IsNull) == 0x000245, "Member 'FRHAPI_Loot::SubVendorUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Quantity_Optional) == 0x000248, "Member 'FRHAPI_Loot::Quantity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Quantity_IsSet) == 0x00024C, "Member 'FRHAPI_Loot::Quantity_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, InventorySelectorType_Optional) == 0x00024D, "Member 'FRHAPI_Loot::InventorySelectorType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, InventorySelectorType_IsSet) == 0x00024E, "Member 'FRHAPI_Loot::InventorySelectorType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, InventoryOperation_Optional) == 0x00024F, "Member 'FRHAPI_Loot::InventoryOperation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, InventoryOperation_IsSet) == 0x000250, "Member 'FRHAPI_Loot::InventoryOperation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Active_Optional) == 0x000251, "Member 'FRHAPI_Loot::Active_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Active_IsSet) == 0x000252, "Member 'FRHAPI_Loot::Active_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SortOrder_Optional) == 0x000254, "Member 'FRHAPI_Loot::SortOrder_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, SortOrder_IsSet) == 0x000258, "Member 'FRHAPI_Loot::SortOrder_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, DropWeight_Optional) == 0x00025C, "Member 'FRHAPI_Loot::DropWeight_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, DropWeight_IsSet) == 0x000260, "Member 'FRHAPI_Loot::DropWeight_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, FillInNewOrder_Optional) == 0x000261, "Member 'FRHAPI_Loot::FillInNewOrder_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, FillInNewOrder_IsSet) == 0x000262, "Member 'FRHAPI_Loot::FillInNewOrder_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, AllowPartialBundles_Optional) == 0x000263, "Member 'FRHAPI_Loot::AllowPartialBundles_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, AllowPartialBundles_IsSet) == 0x000264, "Member 'FRHAPI_Loot::AllowPartialBundles_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemId_Optional) == 0x000268, "Member 'FRHAPI_Loot::RequiredItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemId_IsSet) == 0x00026C, "Member 'FRHAPI_Loot::RequiredItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemId_IsNull) == 0x00026D, "Member 'FRHAPI_Loot::RequiredItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemUuid_Optional) == 0x000270, "Member 'FRHAPI_Loot::RequiredItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemUuid_IsSet) == 0x000280, "Member 'FRHAPI_Loot::RequiredItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemUuid_IsNull) == 0x000281, "Member 'FRHAPI_Loot::RequiredItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemCount_Optional) == 0x000284, "Member 'FRHAPI_Loot::RequiredItemCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, RequiredItemCount_IsSet) == 0x000288, "Member 'FRHAPI_Loot::RequiredItemCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, StackLimit_Optional) == 0x00028C, "Member 'FRHAPI_Loot::StackLimit_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, StackLimit_IsSet) == 0x000290, "Member 'FRHAPI_Loot::StackLimit_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, UiHint_Optional) == 0x000294, "Member 'FRHAPI_Loot::UiHint_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, UiHint_IsSet) == 0x000298, "Member 'FRHAPI_Loot::UiHint_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, EffectiveFrom_Optional) == 0x0002A0, "Member 'FRHAPI_Loot::EffectiveFrom_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, EffectiveFrom_IsSet) == 0x0002A8, "Member 'FRHAPI_Loot::EffectiveFrom_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, EffectiveFrom_IsNull) == 0x0002A9, "Member 'FRHAPI_Loot::EffectiveFrom_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityType_Optional) == 0x0002AA, "Member 'FRHAPI_Loot::QuantityType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityType_IsSet) == 0x0002AB, "Member 'FRHAPI_Loot::QuantityType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemId_Optional) == 0x0002AC, "Member 'FRHAPI_Loot::QuantityMultInventoryItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemId_IsSet) == 0x0002B0, "Member 'FRHAPI_Loot::QuantityMultInventoryItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemId_IsNull) == 0x0002B1, "Member 'FRHAPI_Loot::QuantityMultInventoryItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemUuid_Optional) == 0x0002B4, "Member 'FRHAPI_Loot::QuantityMultInventoryItemUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemUuid_IsSet) == 0x0002C4, "Member 'FRHAPI_Loot::QuantityMultInventoryItemUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, QuantityMultInventoryItemUuid_IsNull) == 0x0002C5, "Member 'FRHAPI_Loot::QuantityMultInventoryItemUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, IsClaimableByClient_Optional) == 0x0002C6, "Member 'FRHAPI_Loot::IsClaimableByClient_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, IsClaimableByClient_IsSet) == 0x0002C7, "Member 'FRHAPI_Loot::IsClaimableByClient_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, TimeFrameId_Optional) == 0x0002C8, "Member 'FRHAPI_Loot::TimeFrameId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, TimeFrameId_IsSet) == 0x0002CC, "Member 'FRHAPI_Loot::TimeFrameId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, TimeFrameId_IsNull) == 0x0002CD, "Member 'FRHAPI_Loot::TimeFrameId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, UseInventoryBucket_Optional) == 0x0002CE, "Member 'FRHAPI_Loot::UseInventoryBucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, UseInventoryBucket_IsSet) == 0x0002CF, "Member 'FRHAPI_Loot::UseInventoryBucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, UseInventoryBucket_IsNull) == 0x0002D0, "Member 'FRHAPI_Loot::UseInventoryBucket_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, XpQuantityTransformType_Optional) == 0x0002D1, "Member 'FRHAPI_Loot::XpQuantityTransformType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, XpQuantityTransformType_IsSet) == 0x0002D2, "Member 'FRHAPI_Loot::XpQuantityTransformType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CurrentPricePointGuid_Optional) == 0x0002D8, "Member 'FRHAPI_Loot::CurrentPricePointGuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CurrentPricePointGuid_IsSet) == 0x0002E8, "Member 'FRHAPI_Loot::CurrentPricePointGuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CurrentPricePointGuid_IsNull) == 0x0002E9, "Member 'FRHAPI_Loot::CurrentPricePointGuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, PreSalePricePointGuid_Optional) == 0x0002F0, "Member 'FRHAPI_Loot::PreSalePricePointGuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, PreSalePricePointGuid_IsSet) == 0x000300, "Member 'FRHAPI_Loot::PreSalePricePointGuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, PreSalePricePointGuid_IsNull) == 0x000301, "Member 'FRHAPI_Loot::PreSalePricePointGuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CacheInfo_Optional) == 0x000308, "Member 'FRHAPI_Loot::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CacheInfo_IsSet) == 0x000320, "Member 'FRHAPI_Loot::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, CacheInfo_IsNull) == 0x000321, "Member 'FRHAPI_Loot::CacheInfo_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, HardQuantityMaximum_Optional) == 0x000324, "Member 'FRHAPI_Loot::HardQuantityMaximum_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, HardQuantityMaximum_IsSet) == 0x000328, "Member 'FRHAPI_Loot::HardQuantityMaximum_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Price_Optional) == 0x000330, "Member 'FRHAPI_Loot::Price_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Price_IsSet) == 0x000350, "Member 'FRHAPI_Loot::Price_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loot, Price_IsNull) == 0x000351, "Member 'FRHAPI_Loot::Price_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Loots
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_Loots final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_Loot>       Loot_Optional;                                     // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Loot_IsSet;                                        // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Loots) == 0x000008, "Wrong alignment on FRHAPI_Loots");
static_assert(sizeof(FRHAPI_Loots) == 0x000080, "Wrong size on FRHAPI_Loots");
static_assert(offsetof(FRHAPI_Loots, Loot_Optional) == 0x000008, "Member 'FRHAPI_Loots::Loot_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loots, Loot_IsSet) == 0x000058, "Member 'FRHAPI_Loots::Loot_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loots, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_Loots::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loots, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_Loots::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Loots, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_Loots::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Vendor
// 0x00F0 (0x00F8 - 0x0008)
struct FRHAPI_Vendor final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  VendorUuid_Optional;                               // 0x005C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorUuid_IsSet;                                  // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorUuid_IsNull;                                 // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_VendorType                             Type_Optional;                                     // 0x006E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x006F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegacyType_Optional;                               // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyType_IsSet;                                  // 0x0074(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyConfigVersion_Optional;                      // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyConfigVersion_IsSet;                         // 0x007C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_Loot>       Loot_Optional;                                     // 0x0080(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Loot_IsSet;                                        // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00D8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Vendor) == 0x000008, "Wrong alignment on FRHAPI_Vendor");
static_assert(sizeof(FRHAPI_Vendor) == 0x0000F8, "Wrong size on FRHAPI_Vendor");
static_assert(offsetof(FRHAPI_Vendor, CustomData_Optional) == 0x000008, "Member 'FRHAPI_Vendor::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_Vendor::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, VendorUuid_Optional) == 0x00005C, "Member 'FRHAPI_Vendor::VendorUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, VendorUuid_IsSet) == 0x00006C, "Member 'FRHAPI_Vendor::VendorUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, VendorUuid_IsNull) == 0x00006D, "Member 'FRHAPI_Vendor::VendorUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, Type_Optional) == 0x00006E, "Member 'FRHAPI_Vendor::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, Type_IsSet) == 0x00006F, "Member 'FRHAPI_Vendor::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, LegacyType_Optional) == 0x000070, "Member 'FRHAPI_Vendor::LegacyType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, LegacyType_IsSet) == 0x000074, "Member 'FRHAPI_Vendor::LegacyType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, LegacyConfigVersion_Optional) == 0x000078, "Member 'FRHAPI_Vendor::LegacyConfigVersion_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, LegacyConfigVersion_IsSet) == 0x00007C, "Member 'FRHAPI_Vendor::LegacyConfigVersion_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, Loot_Optional) == 0x000080, "Member 'FRHAPI_Vendor::Loot_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, Loot_IsSet) == 0x0000D0, "Member 'FRHAPI_Vendor::Loot_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, CacheInfo_Optional) == 0x0000D8, "Member 'FRHAPI_Vendor::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, CacheInfo_IsSet) == 0x0000F0, "Member 'FRHAPI_Vendor::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendor, CacheInfo_IsNull) == 0x0000F1, "Member 'FRHAPI_Vendor::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Vendors
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_Vendors final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_Vendor>     Vendors_Optional;                                  // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Vendors_IsSet;                                     // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Vendors) == 0x000008, "Wrong alignment on FRHAPI_Vendors");
static_assert(sizeof(FRHAPI_Vendors) == 0x000080, "Wrong size on FRHAPI_Vendors");
static_assert(offsetof(FRHAPI_Vendors, Vendors_Optional) == 0x000008, "Member 'FRHAPI_Vendors::Vendors_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendors, Vendors_IsSet) == 0x000058, "Member 'FRHAPI_Vendors::Vendors_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendors, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_Vendors::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendors, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_Vendors::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Vendors, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_Vendors::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Items
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_Items final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_Item>       Items_Optional;                                    // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Items_IsSet;                                       // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Items) == 0x000008, "Wrong alignment on FRHAPI_Items");
static_assert(sizeof(FRHAPI_Items) == 0x000080, "Wrong size on FRHAPI_Items");
static_assert(offsetof(FRHAPI_Items, Items_Optional) == 0x000008, "Member 'FRHAPI_Items::Items_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Items, Items_IsSet) == 0x000058, "Member 'FRHAPI_Items::Items_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Items, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_Items::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Items, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_Items::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Items, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_Items::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ExternalKeyEntitlement
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_ExternalKeyEntitlement final : public FRHAPI_Model
{
public:
	struct FGuid                                  ExternalKeyCampaignId;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ExternalKeyEntitlement) == 0x000008, "Wrong alignment on FRHAPI_ExternalKeyEntitlement");
static_assert(sizeof(FRHAPI_ExternalKeyEntitlement) == 0x000020, "Wrong size on FRHAPI_ExternalKeyEntitlement");
static_assert(offsetof(FRHAPI_ExternalKeyEntitlement, ExternalKeyCampaignId) == 0x000008, "Member 'FRHAPI_ExternalKeyEntitlement::ExternalKeyCampaignId' has a wrong offset!");
static_assert(offsetof(FRHAPI_ExternalKeyEntitlement, Quantity) == 0x000018, "Member 'FRHAPI_ExternalKeyEntitlement::Quantity' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LootEntitlement
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_LootEntitlement final : public FRHAPI_Model
{
public:
	ERHAPI_EntitlementType                        Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId;                                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RefundLootId_Optional;                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefundLootId_IsSet;                                // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefundLootId_IsNull;                               // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChargebackLootId_Optional;                         // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargebackLootId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargebackLootId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChargebackReversalLootId_Optional;                 // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargebackReversalLootId_IsSet;                    // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargebackReversalLootId_IsNull;                   // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LootEntitlement) == 0x000008, "Wrong alignment on FRHAPI_LootEntitlement");
static_assert(sizeof(FRHAPI_LootEntitlement) == 0x000028, "Wrong size on FRHAPI_LootEntitlement");
static_assert(offsetof(FRHAPI_LootEntitlement, Type) == 0x000008, "Member 'FRHAPI_LootEntitlement::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, LootId) == 0x00000C, "Member 'FRHAPI_LootEntitlement::LootId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, RefundLootId_Optional) == 0x000010, "Member 'FRHAPI_LootEntitlement::RefundLootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, RefundLootId_IsSet) == 0x000014, "Member 'FRHAPI_LootEntitlement::RefundLootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, RefundLootId_IsNull) == 0x000015, "Member 'FRHAPI_LootEntitlement::RefundLootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackLootId_Optional) == 0x000018, "Member 'FRHAPI_LootEntitlement::ChargebackLootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackLootId_IsSet) == 0x00001C, "Member 'FRHAPI_LootEntitlement::ChargebackLootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackLootId_IsNull) == 0x00001D, "Member 'FRHAPI_LootEntitlement::ChargebackLootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackReversalLootId_Optional) == 0x000020, "Member 'FRHAPI_LootEntitlement::ChargebackReversalLootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackReversalLootId_IsSet) == 0x000024, "Member 'FRHAPI_LootEntitlement::ChargebackReversalLootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LootEntitlement, ChargebackReversalLootId_IsNull) == 0x000025, "Member 'FRHAPI_LootEntitlement::ChargebackReversalLootId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformSKU
// 0x00E0 (0x00E8 - 0x0008)
struct FRHAPI_PlatformSKU final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      Platform;                                          // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_LootEntitlement                 LootEntitlement_Optional;                          // 0x0070(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          LootEntitlement_IsSet;                             // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootEntitlement_IsNull;                            // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_ExternalKeyEntitlement          ExternalKeyEntitlement_Optional;                   // 0x00A0(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyEntitlement_IsSet;                      // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyEntitlement_IsNull;                     // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x00C8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformSKU) == 0x000008, "Wrong alignment on FRHAPI_PlatformSKU");
static_assert(sizeof(FRHAPI_PlatformSKU) == 0x0000E8, "Wrong size on FRHAPI_PlatformSKU");
static_assert(offsetof(FRHAPI_PlatformSKU, CustomData_Optional) == 0x000008, "Member 'FRHAPI_PlatformSKU::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_PlatformSKU::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, Platform) == 0x000059, "Member 'FRHAPI_PlatformSKU::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, Sku) == 0x000060, "Member 'FRHAPI_PlatformSKU::Sku' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, LootEntitlement_Optional) == 0x000070, "Member 'FRHAPI_PlatformSKU::LootEntitlement_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, LootEntitlement_IsSet) == 0x000098, "Member 'FRHAPI_PlatformSKU::LootEntitlement_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, LootEntitlement_IsNull) == 0x000099, "Member 'FRHAPI_PlatformSKU::LootEntitlement_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, ExternalKeyEntitlement_Optional) == 0x0000A0, "Member 'FRHAPI_PlatformSKU::ExternalKeyEntitlement_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, ExternalKeyEntitlement_IsSet) == 0x0000C0, "Member 'FRHAPI_PlatformSKU::ExternalKeyEntitlement_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, ExternalKeyEntitlement_IsNull) == 0x0000C1, "Member 'FRHAPI_PlatformSKU::ExternalKeyEntitlement_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, CacheInfo_Optional) == 0x0000C8, "Member 'FRHAPI_PlatformSKU::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, CacheInfo_IsSet) == 0x0000E0, "Member 'FRHAPI_PlatformSKU::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKU, CacheInfo_IsNull) == 0x0000E1, "Member 'FRHAPI_PlatformSKU::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformSKUs
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_PlatformSKUs final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlatformSKU>             Skus_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Skus_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0020(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformSKUs) == 0x000008, "Wrong alignment on FRHAPI_PlatformSKUs");
static_assert(sizeof(FRHAPI_PlatformSKUs) == 0x000040, "Wrong size on FRHAPI_PlatformSKUs");
static_assert(offsetof(FRHAPI_PlatformSKUs, Skus_Optional) == 0x000008, "Member 'FRHAPI_PlatformSKUs::Skus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKUs, Skus_IsSet) == 0x000018, "Member 'FRHAPI_PlatformSKUs::Skus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKUs, CacheInfo_Optional) == 0x000020, "Member 'FRHAPI_PlatformSKUs::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKUs, CacheInfo_IsSet) == 0x000038, "Member 'FRHAPI_PlatformSKUs::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSKUs, CacheInfo_IsNull) == 0x000039, "Member 'FRHAPI_PlatformSKUs::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Catalog
// 0x0500 (0x0508 - 0x0008)
struct FRHAPI_Catalog final : public FRHAPI_Model
{
public:
	struct FRHAPI_XpTables                        XpTables_Optional;                                 // 0x0008(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          XpTables_IsSet;                                    // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpTables_IsNull;                                   // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PortalUseRulesets               PortalUseRulesets_Optional;                        // 0x0090(0x00D8)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PortalUseRulesets_IsSet;                           // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUseRulesets_IsNull;                          // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InventoryBucketUseRuleSets      InventoryBucketUseRuleSets_Optional;               // 0x0170(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InventoryBucketUseRuleSets_IsSet;                  // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryBucketUseRuleSets_IsNull;                 // 0x01F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_Vendors                         Vendors_Optional;                                  // 0x01F8(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Vendors_IsSet;                                     // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Vendors_IsNull;                                    // 0x0279(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A[0x6];                                      // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_Loots                           Loot_Optional;                                     // 0x0280(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Loot_IsSet;                                        // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loot_IsNull;                                       // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_Items                           Items_Optional;                                    // 0x0308(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Items_IsSet;                                       // 0x0388(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Items_IsNull;                                      // 0x0389(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38A[0x6];                                      // 0x038A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PricePoints                     PricePoints_Optional;                              // 0x0390(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PricePoints_IsSet;                                 // 0x0410(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PricePoints_IsNull;                                // 0x0411(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_412[0x6];                                      // 0x0412(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_TimeFrames                      TimeFrames_Optional;                               // 0x0418(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TimeFrames_IsSet;                                  // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrames_IsNull;                                 // 0x0499(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PlatformSKUs                    Skus_Optional;                                     // 0x04A0(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Skus_IsSet;                                        // 0x04E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Skus_IsNull;                                       // 0x04E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0x6];                                      // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x04E8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0500(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0501(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_502[0x6];                                      // 0x0502(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Catalog) == 0x000008, "Wrong alignment on FRHAPI_Catalog");
static_assert(sizeof(FRHAPI_Catalog) == 0x000508, "Wrong size on FRHAPI_Catalog");
static_assert(offsetof(FRHAPI_Catalog, XpTables_Optional) == 0x000008, "Member 'FRHAPI_Catalog::XpTables_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, XpTables_IsSet) == 0x000088, "Member 'FRHAPI_Catalog::XpTables_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, XpTables_IsNull) == 0x000089, "Member 'FRHAPI_Catalog::XpTables_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PortalUseRulesets_Optional) == 0x000090, "Member 'FRHAPI_Catalog::PortalUseRulesets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PortalUseRulesets_IsSet) == 0x000168, "Member 'FRHAPI_Catalog::PortalUseRulesets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PortalUseRulesets_IsNull) == 0x000169, "Member 'FRHAPI_Catalog::PortalUseRulesets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, InventoryBucketUseRuleSets_Optional) == 0x000170, "Member 'FRHAPI_Catalog::InventoryBucketUseRuleSets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, InventoryBucketUseRuleSets_IsSet) == 0x0001F0, "Member 'FRHAPI_Catalog::InventoryBucketUseRuleSets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, InventoryBucketUseRuleSets_IsNull) == 0x0001F1, "Member 'FRHAPI_Catalog::InventoryBucketUseRuleSets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Vendors_Optional) == 0x0001F8, "Member 'FRHAPI_Catalog::Vendors_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Vendors_IsSet) == 0x000278, "Member 'FRHAPI_Catalog::Vendors_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Vendors_IsNull) == 0x000279, "Member 'FRHAPI_Catalog::Vendors_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Loot_Optional) == 0x000280, "Member 'FRHAPI_Catalog::Loot_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Loot_IsSet) == 0x000300, "Member 'FRHAPI_Catalog::Loot_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Loot_IsNull) == 0x000301, "Member 'FRHAPI_Catalog::Loot_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Items_Optional) == 0x000308, "Member 'FRHAPI_Catalog::Items_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Items_IsSet) == 0x000388, "Member 'FRHAPI_Catalog::Items_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Items_IsNull) == 0x000389, "Member 'FRHAPI_Catalog::Items_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PricePoints_Optional) == 0x000390, "Member 'FRHAPI_Catalog::PricePoints_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PricePoints_IsSet) == 0x000410, "Member 'FRHAPI_Catalog::PricePoints_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, PricePoints_IsNull) == 0x000411, "Member 'FRHAPI_Catalog::PricePoints_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, TimeFrames_Optional) == 0x000418, "Member 'FRHAPI_Catalog::TimeFrames_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, TimeFrames_IsSet) == 0x000498, "Member 'FRHAPI_Catalog::TimeFrames_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, TimeFrames_IsNull) == 0x000499, "Member 'FRHAPI_Catalog::TimeFrames_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Skus_Optional) == 0x0004A0, "Member 'FRHAPI_Catalog::Skus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Skus_IsSet) == 0x0004E0, "Member 'FRHAPI_Catalog::Skus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, Skus_IsNull) == 0x0004E1, "Member 'FRHAPI_Catalog::Skus_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, CacheInfo_Optional) == 0x0004E8, "Member 'FRHAPI_Catalog::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, CacheInfo_IsSet) == 0x000500, "Member 'FRHAPI_Catalog::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Catalog, CacheInfo_IsNull) == 0x000501, "Member 'FRHAPI_Catalog::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ClaimKeyRequest
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_ClaimKeyRequest final : public FRHAPI_Model
{
public:
	class FString                                 ExternalKeyType_Optional;                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyType_IsSet;                             // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ClaimKeyRequest) == 0x000008, "Wrong alignment on FRHAPI_ClaimKeyRequest");
static_assert(sizeof(FRHAPI_ClaimKeyRequest) == 0x000020, "Wrong size on FRHAPI_ClaimKeyRequest");
static_assert(offsetof(FRHAPI_ClaimKeyRequest, ExternalKeyType_Optional) == 0x000008, "Member 'FRHAPI_ClaimKeyRequest::ExternalKeyType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClaimKeyRequest, ExternalKeyType_IsSet) == 0x000018, "Member 'FRHAPI_ClaimKeyRequest::ExternalKeyType_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ClientVisibleSettings
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_ClientVisibleSettings final : public FRHAPI_Model
{
public:
	int32                                         SelfPingIntervalSeconds_Optional;                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelfPingIntervalSeconds_IsSet;                     // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSeenAgeConsideredOfflineSeconds_Optional;      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastSeenAgeConsideredOfflineSeconds_IsSet;         // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ClientVisibleSettings) == 0x000008, "Wrong alignment on FRHAPI_ClientVisibleSettings");
static_assert(sizeof(FRHAPI_ClientVisibleSettings) == 0x000018, "Wrong size on FRHAPI_ClientVisibleSettings");
static_assert(offsetof(FRHAPI_ClientVisibleSettings, SelfPingIntervalSeconds_Optional) == 0x000008, "Member 'FRHAPI_ClientVisibleSettings::SelfPingIntervalSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientVisibleSettings, SelfPingIntervalSeconds_IsSet) == 0x00000C, "Member 'FRHAPI_ClientVisibleSettings::SelfPingIntervalSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientVisibleSettings, LastSeenAgeConsideredOfflineSeconds_Optional) == 0x000010, "Member 'FRHAPI_ClientVisibleSettings::LastSeenAgeConsideredOfflineSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ClientVisibleSettings, LastSeenAgeConsideredOfflineSeconds_IsSet) == 0x000014, "Member 'FRHAPI_ClientVisibleSettings::LastSeenAgeConsideredOfflineSeconds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ConnectionInfo
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_ConnectionInfo final : public FRHAPI_Model
{
public:
	class FString                                 Ip;                                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_ConnectionInfo) == 0x000008, "Wrong alignment on FRHAPI_ConnectionInfo");
static_assert(sizeof(FRHAPI_ConnectionInfo) == 0x000018, "Wrong size on FRHAPI_ConnectionInfo");
static_assert(offsetof(FRHAPI_ConnectionInfo, Ip) == 0x000008, "Member 'FRHAPI_ConnectionInfo::Ip' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreateAuditRequest
// 0x0450 (0x0458 - 0x0008)
struct FRHAPI_CreateAuditRequest final : public FRHAPI_Model
{
public:
	class FString                                 EventName;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason_Optional;                                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reason_IsSet;                                      // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionType_Optional;                              // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionType_IsSet;                                 // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_Optional;                                 // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_IsSet;                                    // 0x00C2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_TeamUpdate>              UpdatedTeams_Optional;                             // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UpdatedTeams_IsSet;                                // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InviteSource                           Source_Optional;                                   // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x00DA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB[0x1];                                       // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x00DC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x00EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId_Optional;                                   // 0x00F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x00F4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InvitedSessionId_Optional;                         // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvitedSessionId_IsSet;                            // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemovedSessionId_Optional;                         // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemovedSessionId_IsSet;                            // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_ClientSettings                  ClientSettings_Optional;                           // 0x0140(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ClientSettings_IsSet;                              // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CrossplayPreferences            CrossplayPreferences_Optional;                     // 0x0158(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayPreferences_IsSet;                        // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SessionPlayerStatus                    PlayerStatus_Optional;                             // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerStatus_IsSet;                                // 0x016A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x016B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x016C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformSessionId_Optional;                        // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformSessionId_IsSet;                           // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               HostType_Optional;                                 // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostType_IsSet;                                    // 0x019A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19B[0x1];                                      // 0x019B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x019C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x01AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD[0x3];                                      // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceRequestTemplate_Optional;                  // 0x01B0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplate_IsSet;                     // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Map_Optional;                                      // 0x01C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Map_IsSet;                                         // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Mode_Optional;                                     // 0x01E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mode_IsSet;                                        // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x01F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0208(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceJoinableStatus                 JoinStatus_Optional;                               // 0x0209(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinStatus_IsSet;                                  // 0x020A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B[0x5];                                      // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JoinParams                      JoinParams_Optional;                               // 0x0210(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          JoinParams_IsSet;                                  // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceHealthStatus                   InstanceHealth_Optional;                           // 0x0291(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceHealth_IsSet;                              // 0x0292(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_293[0x5];                                      // 0x0293(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueId_Optional;                                  // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueueId_IsSet;                                     // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TicketId_Optional;                                 // 0x02B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketId_IsSet;                                    // 0x02C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_AdditionalJoinParams            AdditionalParams_Optional;                         // 0x02C8(0x0128)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AdditionalParams_IsSet;                            // 0x03F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MapPreferences_Optional;                           // 0x03F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          MapPreferences_IsSet;                              // 0x0408(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueuedSessionId_Optional;                          // 0x0410(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueuedSessionId_IsSet;                             // 0x0420(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0428(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0438(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          Players_Optional;                                  // 0x0440(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0450(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CreateAuditRequest) == 0x000008, "Wrong alignment on FRHAPI_CreateAuditRequest");
static_assert(sizeof(FRHAPI_CreateAuditRequest) == 0x000458, "Wrong size on FRHAPI_CreateAuditRequest");
static_assert(offsetof(FRHAPI_CreateAuditRequest, EventName) == 0x000008, "Member 'FRHAPI_CreateAuditRequest::EventName' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, SessionId) == 0x000018, "Member 'FRHAPI_CreateAuditRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Reason_Optional) == 0x000028, "Member 'FRHAPI_CreateAuditRequest::Reason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Reason_IsSet) == 0x000038, "Member 'FRHAPI_CreateAuditRequest::Reason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, CustomData_Optional) == 0x000040, "Member 'FRHAPI_CreateAuditRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_CreateAuditRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, SessionType_Optional) == 0x000098, "Member 'FRHAPI_CreateAuditRequest::SessionType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, SessionType_IsSet) == 0x0000A8, "Member 'FRHAPI_CreateAuditRequest::SessionType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, RegionId_Optional) == 0x0000B0, "Member 'FRHAPI_CreateAuditRequest::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, RegionId_IsSet) == 0x0000C0, "Member 'FRHAPI_CreateAuditRequest::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Joinable_Optional) == 0x0000C1, "Member 'FRHAPI_CreateAuditRequest::Joinable_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Joinable_IsSet) == 0x0000C2, "Member 'FRHAPI_CreateAuditRequest::Joinable_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, UpdatedTeams_Optional) == 0x0000C8, "Member 'FRHAPI_CreateAuditRequest::UpdatedTeams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, UpdatedTeams_IsSet) == 0x0000D8, "Member 'FRHAPI_CreateAuditRequest::UpdatedTeams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Source_Optional) == 0x0000D9, "Member 'FRHAPI_CreateAuditRequest::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Source_IsSet) == 0x0000DA, "Member 'FRHAPI_CreateAuditRequest::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlayerUuid_Optional) == 0x0000DC, "Member 'FRHAPI_CreateAuditRequest::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlayerUuid_IsSet) == 0x0000EC, "Member 'FRHAPI_CreateAuditRequest::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, TeamId_Optional) == 0x0000F0, "Member 'FRHAPI_CreateAuditRequest::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, TeamId_IsSet) == 0x0000F4, "Member 'FRHAPI_CreateAuditRequest::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InvitedSessionId_Optional) == 0x0000F8, "Member 'FRHAPI_CreateAuditRequest::InvitedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InvitedSessionId_IsSet) == 0x000108, "Member 'FRHAPI_CreateAuditRequest::InvitedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, RemovedSessionId_Optional) == 0x000110, "Member 'FRHAPI_CreateAuditRequest::RemovedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, RemovedSessionId_IsSet) == 0x000120, "Member 'FRHAPI_CreateAuditRequest::RemovedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Version_Optional) == 0x000128, "Member 'FRHAPI_CreateAuditRequest::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Version_IsSet) == 0x000138, "Member 'FRHAPI_CreateAuditRequest::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, ClientSettings_Optional) == 0x000140, "Member 'FRHAPI_CreateAuditRequest::ClientSettings_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, ClientSettings_IsSet) == 0x000150, "Member 'FRHAPI_CreateAuditRequest::ClientSettings_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, CrossplayPreferences_Optional) == 0x000158, "Member 'FRHAPI_CreateAuditRequest::CrossplayPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, CrossplayPreferences_IsSet) == 0x000168, "Member 'FRHAPI_CreateAuditRequest::CrossplayPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlayerStatus_Optional) == 0x000169, "Member 'FRHAPI_CreateAuditRequest::PlayerStatus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlayerStatus_IsSet) == 0x00016A, "Member 'FRHAPI_CreateAuditRequest::PlayerStatus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Platform_Optional) == 0x00016B, "Member 'FRHAPI_CreateAuditRequest::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Platform_IsSet) == 0x00016C, "Member 'FRHAPI_CreateAuditRequest::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlatformSessionId_Optional) == 0x000170, "Member 'FRHAPI_CreateAuditRequest::PlatformSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, PlatformSessionId_IsSet) == 0x000180, "Member 'FRHAPI_CreateAuditRequest::PlatformSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceId_Optional) == 0x000188, "Member 'FRHAPI_CreateAuditRequest::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceId_IsSet) == 0x000198, "Member 'FRHAPI_CreateAuditRequest::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, HostType_Optional) == 0x000199, "Member 'FRHAPI_CreateAuditRequest::HostType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, HostType_IsSet) == 0x00019A, "Member 'FRHAPI_CreateAuditRequest::HostType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, HostPlayerUuid_Optional) == 0x00019C, "Member 'FRHAPI_CreateAuditRequest::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, HostPlayerUuid_IsSet) == 0x0001AC, "Member 'FRHAPI_CreateAuditRequest::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceRequestTemplate_Optional) == 0x0001B0, "Member 'FRHAPI_CreateAuditRequest::InstanceRequestTemplate_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceRequestTemplate_IsSet) == 0x0001C0, "Member 'FRHAPI_CreateAuditRequest::InstanceRequestTemplate_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Map_Optional) == 0x0001C8, "Member 'FRHAPI_CreateAuditRequest::Map_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Map_IsSet) == 0x0001D8, "Member 'FRHAPI_CreateAuditRequest::Map_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Mode_Optional) == 0x0001E0, "Member 'FRHAPI_CreateAuditRequest::Mode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Mode_IsSet) == 0x0001F0, "Member 'FRHAPI_CreateAuditRequest::Mode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, AllocationId_Optional) == 0x0001F8, "Member 'FRHAPI_CreateAuditRequest::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, AllocationId_IsSet) == 0x000208, "Member 'FRHAPI_CreateAuditRequest::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, JoinStatus_Optional) == 0x000209, "Member 'FRHAPI_CreateAuditRequest::JoinStatus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, JoinStatus_IsSet) == 0x00020A, "Member 'FRHAPI_CreateAuditRequest::JoinStatus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, JoinParams_Optional) == 0x000210, "Member 'FRHAPI_CreateAuditRequest::JoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, JoinParams_IsSet) == 0x000290, "Member 'FRHAPI_CreateAuditRequest::JoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceHealth_Optional) == 0x000291, "Member 'FRHAPI_CreateAuditRequest::InstanceHealth_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, InstanceHealth_IsSet) == 0x000292, "Member 'FRHAPI_CreateAuditRequest::InstanceHealth_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, QueueId_Optional) == 0x000298, "Member 'FRHAPI_CreateAuditRequest::QueueId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, QueueId_IsSet) == 0x0002A8, "Member 'FRHAPI_CreateAuditRequest::QueueId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, TicketId_Optional) == 0x0002B0, "Member 'FRHAPI_CreateAuditRequest::TicketId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, TicketId_IsSet) == 0x0002C0, "Member 'FRHAPI_CreateAuditRequest::TicketId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, AdditionalParams_Optional) == 0x0002C8, "Member 'FRHAPI_CreateAuditRequest::AdditionalParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, AdditionalParams_IsSet) == 0x0003F0, "Member 'FRHAPI_CreateAuditRequest::AdditionalParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, MapPreferences_Optional) == 0x0003F8, "Member 'FRHAPI_CreateAuditRequest::MapPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, MapPreferences_IsSet) == 0x000408, "Member 'FRHAPI_CreateAuditRequest::MapPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, QueuedSessionId_Optional) == 0x000410, "Member 'FRHAPI_CreateAuditRequest::QueuedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, QueuedSessionId_IsSet) == 0x000420, "Member 'FRHAPI_CreateAuditRequest::QueuedSessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, MatchId_Optional) == 0x000428, "Member 'FRHAPI_CreateAuditRequest::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, MatchId_IsSet) == 0x000438, "Member 'FRHAPI_CreateAuditRequest::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Players_Optional) == 0x000440, "Member 'FRHAPI_CreateAuditRequest::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateAuditRequest, Players_IsSet) == 0x000450, "Member 'FRHAPI_CreateAuditRequest::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreateInventoryRequest
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_CreateInventoryRequest final : public FRHAPI_Model
{
public:
	ERHAPI_InventoryBucket                        Bucket_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bucket_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count_Optional;                                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Count_IsSet;                                       // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_CreateInventoryType                    Type_Optional;                                     // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CreateInventoryRequest) == 0x000008, "Wrong alignment on FRHAPI_CreateInventoryRequest");
static_assert(sizeof(FRHAPI_CreateInventoryRequest) == 0x000088, "Wrong size on FRHAPI_CreateInventoryRequest");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Bucket_Optional) == 0x000008, "Member 'FRHAPI_CreateInventoryRequest::Bucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Bucket_IsSet) == 0x000009, "Member 'FRHAPI_CreateInventoryRequest::Bucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Count_Optional) == 0x00000C, "Member 'FRHAPI_CreateInventoryRequest::Count_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Count_IsSet) == 0x000010, "Member 'FRHAPI_CreateInventoryRequest::Count_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Expires_Optional) == 0x000018, "Member 'FRHAPI_CreateInventoryRequest::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Expires_IsSet) == 0x000020, "Member 'FRHAPI_CreateInventoryRequest::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Expires_IsNull) == 0x000021, "Member 'FRHAPI_CreateInventoryRequest::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, CustomData_Optional) == 0x000028, "Member 'FRHAPI_CreateInventoryRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, CustomData_IsSet) == 0x000078, "Member 'FRHAPI_CreateInventoryRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, CustomData_IsNull) == 0x000079, "Member 'FRHAPI_CreateInventoryRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, ItemId) == 0x00007C, "Member 'FRHAPI_CreateInventoryRequest::ItemId' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Type_Optional) == 0x000080, "Member 'FRHAPI_CreateInventoryRequest::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequest, Type_IsSet) == 0x000081, "Member 'FRHAPI_CreateInventoryRequest::Type_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreateInventoryRequests
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_CreateInventoryRequests final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_CreateInventoryRequest>  Inventory;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_CreateInventoryRequests) == 0x000008, "Wrong alignment on FRHAPI_CreateInventoryRequests");
static_assert(sizeof(FRHAPI_CreateInventoryRequests) == 0x000030, "Wrong size on FRHAPI_CreateInventoryRequests");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, Source_Optional) == 0x000008, "Member 'FRHAPI_CreateInventoryRequests::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, Source_IsSet) == 0x000009, "Member 'FRHAPI_CreateInventoryRequests::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_CreateInventoryRequests::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_CreateInventoryRequests::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_CreateInventoryRequests::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateInventoryRequests, Inventory) == 0x000020, "Member 'FRHAPI_CreateInventoryRequests::Inventory' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SelfSessionPlayerUpdateRequest
// 0x00B8 (0x00C0 - 0x0008)
struct FRHAPI_SelfSessionPlayerUpdateRequest final : public FRHAPI_Model
{
public:
	ERHAPI_SessionPlayerStatus                    Status_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientVersion;                                     // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_ClientSettings                  ClientSettings;                                    // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CrossplayPreferences            CrossplayPreferences_Optional;                     // 0x0038(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayPreferences_IsSet;                        // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password_Optional;                                 // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Password_IsSet;                                    // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SelfSessionPlayerUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_SelfSessionPlayerUpdateRequest");
static_assert(sizeof(FRHAPI_SelfSessionPlayerUpdateRequest) == 0x0000C0, "Wrong size on FRHAPI_SelfSessionPlayerUpdateRequest");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, Status_Optional) == 0x000008, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, Status_IsSet) == 0x000009, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, ClientVersion) == 0x000010, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::ClientVersion' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, ClientSettings) == 0x000020, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::ClientSettings' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, TeamId) == 0x000030, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::TeamId' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, CrossplayPreferences_Optional) == 0x000038, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::CrossplayPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, CrossplayPreferences_IsSet) == 0x000048, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::CrossplayPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, CustomData_Optional) == 0x000050, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, CustomData_IsSet) == 0x0000A0, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, Password_Optional) == 0x0000A8, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::Password_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SelfSessionPlayerUpdateRequest, Password_IsSet) == 0x0000B8, "Member 'FRHAPI_SelfSessionPlayerUpdateRequest::Password_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreateOrJoinRequest
// 0x0140 (0x0148 - 0x0008)
struct FRHAPI_CreateOrJoinRequest final : public FRHAPI_Model
{
public:
	class FString                                 ClientVersion;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_ClientSettings                  ClientSettings;                                    // 0x0018(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRHAPI_CrossplayPreferences            CrossplayPreferences_Optional;                     // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CrossplayPreferences_IsSet;                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionType;                                       // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password_Optional;                                 // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Password_IsSet;                                    // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_SelfSessionPlayerUpdateRequest  Player_Optional;                                   // 0x0080(0x00C0)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Player_IsSet;                                      // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CreateOrJoinRequest) == 0x000008, "Wrong alignment on FRHAPI_CreateOrJoinRequest");
static_assert(sizeof(FRHAPI_CreateOrJoinRequest) == 0x000148, "Wrong size on FRHAPI_CreateOrJoinRequest");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, ClientVersion) == 0x000008, "Member 'FRHAPI_CreateOrJoinRequest::ClientVersion' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, ClientSettings) == 0x000018, "Member 'FRHAPI_CreateOrJoinRequest::ClientSettings' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, CrossplayPreferences_Optional) == 0x000028, "Member 'FRHAPI_CreateOrJoinRequest::CrossplayPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, CrossplayPreferences_IsSet) == 0x000038, "Member 'FRHAPI_CreateOrJoinRequest::CrossplayPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, SessionType) == 0x000040, "Member 'FRHAPI_CreateOrJoinRequest::SessionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, Password_Optional) == 0x000050, "Member 'FRHAPI_CreateOrJoinRequest::Password_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, Password_IsSet) == 0x000060, "Member 'FRHAPI_CreateOrJoinRequest::Password_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, RegionId_Optional) == 0x000068, "Member 'FRHAPI_CreateOrJoinRequest::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, RegionId_IsSet) == 0x000078, "Member 'FRHAPI_CreateOrJoinRequest::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, Player_Optional) == 0x000080, "Member 'FRHAPI_CreateOrJoinRequest::Player_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateOrJoinRequest, Player_IsSet) == 0x000140, "Member 'FRHAPI_CreateOrJoinRequest::Player_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreatePlatformUserRequest
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_CreatePlatformUserRequest final : public FRHAPI_Model
{
public:
	ERHAPI_Platform                               Platform;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName_Optional;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayName_IsSet;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CreatePlatformUserRequest) == 0x000008, "Wrong alignment on FRHAPI_CreatePlatformUserRequest");
static_assert(sizeof(FRHAPI_CreatePlatformUserRequest) == 0x000038, "Wrong size on FRHAPI_CreatePlatformUserRequest");
static_assert(offsetof(FRHAPI_CreatePlatformUserRequest, Platform) == 0x000008, "Member 'FRHAPI_CreatePlatformUserRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreatePlatformUserRequest, PlatformUserId) == 0x000010, "Member 'FRHAPI_CreatePlatformUserRequest::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreatePlatformUserRequest, DisplayName_Optional) == 0x000020, "Member 'FRHAPI_CreatePlatformUserRequest::DisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreatePlatformUserRequest, DisplayName_IsSet) == 0x000030, "Member 'FRHAPI_CreatePlatformUserRequest::DisplayName_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_CreateSupportLogRequest
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_CreateSupportLogRequest final : public FRHAPI_Model
{
public:
	struct FGuid                                  PersonId_Optional;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x001C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventDescription;                                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SupportUsername_Optional;                          // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportUsername_IsSet;                             // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ip_Optional;                                       // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ip_IsSet;                                          // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_CreateSupportLogRequest) == 0x000008, "Wrong alignment on FRHAPI_CreateSupportLogRequest");
static_assert(sizeof(FRHAPI_CreateSupportLogRequest) == 0x000098, "Wrong size on FRHAPI_CreateSupportLogRequest");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PersonId_Optional) == 0x000008, "Member 'FRHAPI_CreateSupportLogRequest::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PersonId_IsSet) == 0x000018, "Member 'FRHAPI_CreateSupportLogRequest::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PlayerUuid_Optional) == 0x00001C, "Member 'FRHAPI_CreateSupportLogRequest::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PlayerUuid_IsSet) == 0x00002C, "Member 'FRHAPI_CreateSupportLogRequest::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, Platform_Optional) == 0x00002D, "Member 'FRHAPI_CreateSupportLogRequest::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, Platform_IsSet) == 0x00002E, "Member 'FRHAPI_CreateSupportLogRequest::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PlatformUserId_Optional) == 0x000030, "Member 'FRHAPI_CreateSupportLogRequest::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, PlatformUserId_IsSet) == 0x000040, "Member 'FRHAPI_CreateSupportLogRequest::PlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, EventName) == 0x000048, "Member 'FRHAPI_CreateSupportLogRequest::EventName' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, EventDescription) == 0x000058, "Member 'FRHAPI_CreateSupportLogRequest::EventDescription' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, SupportUsername_Optional) == 0x000068, "Member 'FRHAPI_CreateSupportLogRequest::SupportUsername_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, SupportUsername_IsSet) == 0x000078, "Member 'FRHAPI_CreateSupportLogRequest::SupportUsername_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, Ip_Optional) == 0x000080, "Member 'FRHAPI_CreateSupportLogRequest::Ip_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_CreateSupportLogRequest, Ip_IsSet) == 0x000090, "Member 'FRHAPI_CreateSupportLogRequest::Ip_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_DeserterConfig
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_DeserterConfig final : public FRHAPI_Model
{
public:
	struct FGuid                                  DeserterId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastClearedTimestamp_Optional;                     // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastClearedTimestamp_IsSet;                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_DeserterConfig) == 0x000008, "Wrong alignment on FRHAPI_DeserterConfig");
static_assert(sizeof(FRHAPI_DeserterConfig) == 0x000028, "Wrong size on FRHAPI_DeserterConfig");
static_assert(offsetof(FRHAPI_DeserterConfig, DeserterId) == 0x000008, "Member 'FRHAPI_DeserterConfig::DeserterId' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterConfig, LastClearedTimestamp_Optional) == 0x000018, "Member 'FRHAPI_DeserterConfig::LastClearedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterConfig, LastClearedTimestamp_IsSet) == 0x000020, "Member 'FRHAPI_DeserterConfig::LastClearedTimestamp_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_DeserterConfigResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_DeserterConfigResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_DeserterConfig>          DeserterConfigs;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_DeserterConfigResponse) == 0x000008, "Wrong alignment on FRHAPI_DeserterConfigResponse");
static_assert(sizeof(FRHAPI_DeserterConfigResponse) == 0x000018, "Wrong size on FRHAPI_DeserterConfigResponse");
static_assert(offsetof(FRHAPI_DeserterConfigResponse, DeserterConfigs) == 0x000008, "Member 'FRHAPI_DeserterConfigResponse::DeserterConfigs' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_DeserterUpdateRequest
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_DeserterUpdateRequest final : public FRHAPI_Model
{
public:
	struct FDateTime                              DeserterExpiration;                                // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DeserterReset_Optional;                            // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterReset_IsSet;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeserterCount;                                     // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_DeserterUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_DeserterUpdateRequest");
static_assert(sizeof(FRHAPI_DeserterUpdateRequest) == 0x000078, "Wrong size on FRHAPI_DeserterUpdateRequest");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, DeserterExpiration) == 0x000008, "Member 'FRHAPI_DeserterUpdateRequest::DeserterExpiration' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, DeserterReset_Optional) == 0x000010, "Member 'FRHAPI_DeserterUpdateRequest::DeserterReset_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, DeserterReset_IsSet) == 0x000018, "Member 'FRHAPI_DeserterUpdateRequest::DeserterReset_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, DeserterCount) == 0x00001C, "Member 'FRHAPI_DeserterUpdateRequest::DeserterCount' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, CustomData_Optional) == 0x000020, "Member 'FRHAPI_DeserterUpdateRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_DeserterUpdateRequest, CustomData_IsSet) == 0x000070, "Member 'FRHAPI_DeserterUpdateRequest::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EntitlementEvent
// 0x0110 (0x0118 - 0x0008)
struct FRHAPI_EntitlementEvent final : public FRHAPI_Model
{
public:
	class FString                                 EventId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementActionType                  ActionType;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementType                        EntitlementType_Optional;                          // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntitlementType_IsSet;                             // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntitlementType_IsNull;                            // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementEventStatus                 Status;                                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsNull;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId_Optional;                                 // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsSet;                                    // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsNull;                                   // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      Platform;                                          // 0x003A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformTransactionId_Optional;                    // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformTransactionId_IsSet;                       // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformTransactionId_IsNull;                      // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_JsonValue>  PlatformData_Optional;                             // 0x0080(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PlatformData_IsSet;                                // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformData_IsNull;                               // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x00D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsNull;                                    // 0x00E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId_Optional;                                   // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsNull;                                     // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  KeyClaimUuid_Optional;                             // 0x00F4(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyClaimUuid_IsSet;                                // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyClaimUuid_IsNull;                               // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModified;                                      // 0x0110(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_EntitlementEvent) == 0x000008, "Wrong alignment on FRHAPI_EntitlementEvent");
static_assert(sizeof(FRHAPI_EntitlementEvent) == 0x000118, "Wrong size on FRHAPI_EntitlementEvent");
static_assert(offsetof(FRHAPI_EntitlementEvent, EventId) == 0x000008, "Member 'FRHAPI_EntitlementEvent::EventId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, ActionType) == 0x000018, "Member 'FRHAPI_EntitlementEvent::ActionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, EntitlementType_Optional) == 0x000019, "Member 'FRHAPI_EntitlementEvent::EntitlementType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, EntitlementType_IsSet) == 0x00001A, "Member 'FRHAPI_EntitlementEvent::EntitlementType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, EntitlementType_IsNull) == 0x00001B, "Member 'FRHAPI_EntitlementEvent::EntitlementType_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, Status) == 0x00001C, "Member 'FRHAPI_EntitlementEvent::Status' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlayerUuid) == 0x000020, "Member 'FRHAPI_EntitlementEvent::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlayerUuid_IsNull) == 0x000030, "Member 'FRHAPI_EntitlementEvent::PlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlayerId_Optional) == 0x000034, "Member 'FRHAPI_EntitlementEvent::PlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlayerId_IsSet) == 0x000038, "Member 'FRHAPI_EntitlementEvent::PlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlayerId_IsNull) == 0x000039, "Member 'FRHAPI_EntitlementEvent::PlayerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, Platform) == 0x00003A, "Member 'FRHAPI_EntitlementEvent::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformUserId) == 0x000040, "Member 'FRHAPI_EntitlementEvent::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, Sku) == 0x000050, "Member 'FRHAPI_EntitlementEvent::Sku' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, Quantity) == 0x000060, "Member 'FRHAPI_EntitlementEvent::Quantity' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformTransactionId_Optional) == 0x000068, "Member 'FRHAPI_EntitlementEvent::PlatformTransactionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformTransactionId_IsSet) == 0x000078, "Member 'FRHAPI_EntitlementEvent::PlatformTransactionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformTransactionId_IsNull) == 0x000079, "Member 'FRHAPI_EntitlementEvent::PlatformTransactionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformData_Optional) == 0x000080, "Member 'FRHAPI_EntitlementEvent::PlatformData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformData_IsSet) == 0x0000D0, "Member 'FRHAPI_EntitlementEvent::PlatformData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, PlatformData_IsNull) == 0x0000D1, "Member 'FRHAPI_EntitlementEvent::PlatformData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, OrderId_Optional) == 0x0000D8, "Member 'FRHAPI_EntitlementEvent::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, OrderId_IsSet) == 0x0000E8, "Member 'FRHAPI_EntitlementEvent::OrderId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, OrderId_IsNull) == 0x0000E9, "Member 'FRHAPI_EntitlementEvent::OrderId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, LootId_Optional) == 0x0000EC, "Member 'FRHAPI_EntitlementEvent::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, LootId_IsSet) == 0x0000F0, "Member 'FRHAPI_EntitlementEvent::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, LootId_IsNull) == 0x0000F1, "Member 'FRHAPI_EntitlementEvent::LootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, KeyClaimUuid_Optional) == 0x0000F4, "Member 'FRHAPI_EntitlementEvent::KeyClaimUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, KeyClaimUuid_IsSet) == 0x000104, "Member 'FRHAPI_EntitlementEvent::KeyClaimUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, KeyClaimUuid_IsNull) == 0x000105, "Member 'FRHAPI_EntitlementEvent::KeyClaimUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, Created) == 0x000108, "Member 'FRHAPI_EntitlementEvent::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEvent, LastModified) == 0x000110, "Member 'FRHAPI_EntitlementEvent::LastModified' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EntitlementEventList
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_EntitlementEventList final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_EntitlementEvent>        Events;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Cursor_Optional;                                   // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_EntitlementEventList) == 0x000008, "Wrong alignment on FRHAPI_EntitlementEventList");
static_assert(sizeof(FRHAPI_EntitlementEventList) == 0x000030, "Wrong size on FRHAPI_EntitlementEventList");
static_assert(offsetof(FRHAPI_EntitlementEventList, Events) == 0x000008, "Member 'FRHAPI_EntitlementEventList::Events' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventList, Cursor_Optional) == 0x000018, "Member 'FRHAPI_EntitlementEventList::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventList, Cursor_IsSet) == 0x000028, "Member 'FRHAPI_EntitlementEventList::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventList, Cursor_IsNull) == 0x000029, "Member 'FRHAPI_EntitlementEventList::Cursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EntitlementEventRequest
// 0x00A8 (0x00B0 - 0x0008)
struct FRHAPI_EntitlementEventRequest final : public FRHAPI_Model
{
public:
	ERHAPI_EntitlementActionType                  ActionType;                                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementEventStatus                 Status_Optional;                                   // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsNull;                                     // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid_Optional;                               // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsNull;                                 // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      Platform;                                          // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sku;                                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity_Optional;                                 // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Quantity_IsSet;                                    // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformTransactionId;                             // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FRHAPI_JsonValue>  PlatformData_Optional;                             // 0x0058(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PlatformData_IsSet;                                // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformData_IsNull;                               // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_EntitlementEventRequest) == 0x000008, "Wrong alignment on FRHAPI_EntitlementEventRequest");
static_assert(sizeof(FRHAPI_EntitlementEventRequest) == 0x0000B0, "Wrong size on FRHAPI_EntitlementEventRequest");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, ActionType) == 0x000008, "Member 'FRHAPI_EntitlementEventRequest::ActionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Status_Optional) == 0x000009, "Member 'FRHAPI_EntitlementEventRequest::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Status_IsSet) == 0x00000A, "Member 'FRHAPI_EntitlementEventRequest::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Status_IsNull) == 0x00000B, "Member 'FRHAPI_EntitlementEventRequest::Status_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlayerUuid_Optional) == 0x00000C, "Member 'FRHAPI_EntitlementEventRequest::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlayerUuid_IsSet) == 0x00001C, "Member 'FRHAPI_EntitlementEventRequest::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlayerUuid_IsNull) == 0x00001D, "Member 'FRHAPI_EntitlementEventRequest::PlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Platform) == 0x00001E, "Member 'FRHAPI_EntitlementEventRequest::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlatformUserId) == 0x000020, "Member 'FRHAPI_EntitlementEventRequest::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Sku) == 0x000030, "Member 'FRHAPI_EntitlementEventRequest::Sku' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Quantity_Optional) == 0x000040, "Member 'FRHAPI_EntitlementEventRequest::Quantity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, Quantity_IsSet) == 0x000044, "Member 'FRHAPI_EntitlementEventRequest::Quantity_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlatformTransactionId) == 0x000048, "Member 'FRHAPI_EntitlementEventRequest::PlatformTransactionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlatformData_Optional) == 0x000058, "Member 'FRHAPI_EntitlementEventRequest::PlatformData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlatformData_IsSet) == 0x0000A8, "Member 'FRHAPI_EntitlementEventRequest::PlatformData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_EntitlementEventRequest, PlatformData_IsNull) == 0x0000A9, "Member 'FRHAPI_EntitlementEventRequest::PlatformData_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EnvironmentConfig
// 0x0040 (0x0048 - 0x0008)
struct FRHAPI_EnvironmentConfig final : public FRHAPI_Model
{
public:
	struct FGuid                                  OrgId;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ProductId;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  EnvironmentId;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  SandboxId;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_EnvironmentConfig) == 0x000008, "Wrong alignment on FRHAPI_EnvironmentConfig");
static_assert(sizeof(FRHAPI_EnvironmentConfig) == 0x000048, "Wrong size on FRHAPI_EnvironmentConfig");
static_assert(offsetof(FRHAPI_EnvironmentConfig, OrgId) == 0x000008, "Member 'FRHAPI_EnvironmentConfig::OrgId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EnvironmentConfig, ProductId) == 0x000018, "Member 'FRHAPI_EnvironmentConfig::ProductId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EnvironmentConfig, EnvironmentId) == 0x000028, "Member 'FRHAPI_EnvironmentConfig::EnvironmentId' has a wrong offset!");
static_assert(offsetof(FRHAPI_EnvironmentConfig, SandboxId) == 0x000038, "Member 'FRHAPI_EnvironmentConfig::SandboxId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_JsonObject
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRHAPI_JsonObject final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_JsonObject) == 0x000008, "Wrong alignment on FRHAPI_JsonObject");
static_assert(sizeof(FRHAPI_JsonObject) == 0x000010, "Wrong size on FRHAPI_JsonObject");

// ScriptStruct RallyHereAPI.RHAPI_RallyHereEvent
// 0x00F0 (0x00F8 - 0x0008)
struct FRHAPI_RallyHereEvent final : public FRHAPI_Model
{
public:
	struct FGuid                                  EventUuid;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EventTimestamp;                                    // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_JsonObject                      EventParams;                                       // 0x0030(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId_Optional;                                   // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserId_IsSet;                                      // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserId_IsNull;                                     // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId_Optional;                                // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsSet;                                   // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsNull;                                  // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientIp_Optional;                                 // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientIp_IsSet;                                    // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientIp_IsNull;                                   // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RallyHereEvent) == 0x000008, "Wrong alignment on FRHAPI_RallyHereEvent");
static_assert(sizeof(FRHAPI_RallyHereEvent) == 0x0000F8, "Wrong size on FRHAPI_RallyHereEvent");
static_assert(offsetof(FRHAPI_RallyHereEvent, EventUuid) == 0x000008, "Member 'FRHAPI_RallyHereEvent::EventUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, EventName) == 0x000018, "Member 'FRHAPI_RallyHereEvent::EventName' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, EventTimestamp) == 0x000028, "Member 'FRHAPI_RallyHereEvent::EventTimestamp' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, EventParams) == 0x000030, "Member 'FRHAPI_RallyHereEvent::EventParams' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, CustomData_Optional) == 0x000040, "Member 'FRHAPI_RallyHereEvent::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_RallyHereEvent::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, UserId_Optional) == 0x000098, "Member 'FRHAPI_RallyHereEvent::UserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, UserId_IsSet) == 0x0000A8, "Member 'FRHAPI_RallyHereEvent::UserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, UserId_IsNull) == 0x0000A9, "Member 'FRHAPI_RallyHereEvent::UserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, SessionId_Optional) == 0x0000B0, "Member 'FRHAPI_RallyHereEvent::SessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, SessionId_IsSet) == 0x0000C0, "Member 'FRHAPI_RallyHereEvent::SessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, SessionId_IsNull) == 0x0000C1, "Member 'FRHAPI_RallyHereEvent::SessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, CorrelationId_Optional) == 0x0000C8, "Member 'FRHAPI_RallyHereEvent::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, CorrelationId_IsSet) == 0x0000D8, "Member 'FRHAPI_RallyHereEvent::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, CorrelationId_IsNull) == 0x0000D9, "Member 'FRHAPI_RallyHereEvent::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, ClientIp_Optional) == 0x0000E0, "Member 'FRHAPI_RallyHereEvent::ClientIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, ClientIp_IsSet) == 0x0000F0, "Member 'FRHAPI_RallyHereEvent::ClientIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RallyHereEvent, ClientIp_IsNull) == 0x0000F1, "Member 'FRHAPI_RallyHereEvent::ClientIp_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EventList
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_EventList final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_RallyHereEvent>          EventList;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_EventList) == 0x000008, "Wrong alignment on FRHAPI_EventList");
static_assert(sizeof(FRHAPI_EventList) == 0x000018, "Wrong size on FRHAPI_EventList");
static_assert(offsetof(FRHAPI_EventList, EventList) == 0x000008, "Member 'FRHAPI_EventList::EventList' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_EventParamsSchemaResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_EventParamsSchemaResponse final : public FRHAPI_Model
{
public:
	struct FRHAPI_JsonObject                      EventParamSchemas;                                 // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_EventParamsSchemaResponse) == 0x000008, "Wrong alignment on FRHAPI_EventParamsSchemaResponse");
static_assert(sizeof(FRHAPI_EventParamsSchemaResponse) == 0x000018, "Wrong size on FRHAPI_EventParamsSchemaResponse");
static_assert(offsetof(FRHAPI_EventParamsSchemaResponse, EventParamSchemas) == 0x000008, "Member 'FRHAPI_EventParamsSchemaResponse::EventParamSchemas' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FavoriteGuideRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_FavoriteGuideRequest final : public FRHAPI_Model
{
public:
	struct FGuid                                  GuideId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_FavoriteGuideRequest) == 0x000008, "Wrong alignment on FRHAPI_FavoriteGuideRequest");
static_assert(sizeof(FRHAPI_FavoriteGuideRequest) == 0x000018, "Wrong size on FRHAPI_FavoriteGuideRequest");
static_assert(offsetof(FRHAPI_FavoriteGuideRequest, GuideId) == 0x000008, "Member 'FRHAPI_FavoriteGuideRequest::GuideId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FavoriteGuideResponse
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_FavoriteGuideResponse final : public FRHAPI_Model
{
public:
	struct FGuid                                  GuideId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FavoritedAt_Optional;                              // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FavoritedAt_IsSet;                                 // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FavoritedAt_IsNull;                                // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_FavoriteGuideResponse) == 0x000008, "Wrong alignment on FRHAPI_FavoriteGuideResponse");
static_assert(sizeof(FRHAPI_FavoriteGuideResponse) == 0x000028, "Wrong size on FRHAPI_FavoriteGuideResponse");
static_assert(offsetof(FRHAPI_FavoriteGuideResponse, GuideId) == 0x000008, "Member 'FRHAPI_FavoriteGuideResponse::GuideId' has a wrong offset!");
static_assert(offsetof(FRHAPI_FavoriteGuideResponse, FavoritedAt_Optional) == 0x000018, "Member 'FRHAPI_FavoriteGuideResponse::FavoritedAt_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_FavoriteGuideResponse, FavoritedAt_IsSet) == 0x000020, "Member 'FRHAPI_FavoriteGuideResponse::FavoritedAt_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_FavoriteGuideResponse, FavoritedAt_IsNull) == 0x000021, "Member 'FRHAPI_FavoriteGuideResponse::FavoritedAt_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FileResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_FileResponse final : public FRHAPI_Model
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentType;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedTimestamp;                                  // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_FileResponse) == 0x000008, "Wrong alignment on FRHAPI_FileResponse");
static_assert(sizeof(FRHAPI_FileResponse) == 0x000038, "Wrong size on FRHAPI_FileResponse");
static_assert(offsetof(FRHAPI_FileResponse, Name) == 0x000008, "Member 'FRHAPI_FileResponse::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_FileResponse, Size) == 0x000018, "Member 'FRHAPI_FileResponse::Size' has a wrong offset!");
static_assert(offsetof(FRHAPI_FileResponse, ContentType) == 0x000020, "Member 'FRHAPI_FileResponse::ContentType' has a wrong offset!");
static_assert(offsetof(FRHAPI_FileResponse, CreatedTimestamp) == 0x000030, "Member 'FRHAPI_FileResponse::CreatedTimestamp' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FileListResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_FileListResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_FileResponse>            Files;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_FileListResponse) == 0x000008, "Wrong alignment on FRHAPI_FileListResponse");
static_assert(sizeof(FRHAPI_FileListResponse) == 0x000018, "Wrong size on FRHAPI_FileListResponse");
static_assert(offsetof(FRHAPI_FileListResponse, Files) == 0x000008, "Member 'FRHAPI_FileListResponse::Files' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FriendRelationship
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_FriendRelationship final : public FRHAPI_Model
{
public:
	struct FGuid                                  FriendsPlayerUuid;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_FriendshipStatus                       Status;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Notes_Optional;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Notes_IsSet;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastModifiedOn;                                    // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_FriendRelationship) == 0x000008, "Wrong alignment on FRHAPI_FriendRelationship");
static_assert(sizeof(FRHAPI_FriendRelationship) == 0x000040, "Wrong size on FRHAPI_FriendRelationship");
static_assert(offsetof(FRHAPI_FriendRelationship, FriendsPlayerUuid) == 0x000008, "Member 'FRHAPI_FriendRelationship::FriendsPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendRelationship, Status) == 0x000018, "Member 'FRHAPI_FriendRelationship::Status' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendRelationship, Notes_Optional) == 0x000020, "Member 'FRHAPI_FriendRelationship::Notes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendRelationship, Notes_IsSet) == 0x000030, "Member 'FRHAPI_FriendRelationship::Notes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendRelationship, LastModifiedOn) == 0x000038, "Member 'FRHAPI_FriendRelationship::LastModifiedOn' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Friends
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_Friends final : public FRHAPI_Model
{
public:
	TArray<struct FGuid>                          Friends;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_Friends) == 0x000008, "Wrong alignment on FRHAPI_Friends");
static_assert(sizeof(FRHAPI_Friends) == 0x000018, "Wrong size on FRHAPI_Friends");
static_assert(offsetof(FRHAPI_Friends, Friends) == 0x000008, "Member 'FRHAPI_Friends::Friends' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_FriendsList
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_FriendsList final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_FriendRelationship>      Friends;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRHAPI_PageMeta                        Page;                                              // 0x0028(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_FriendsList) == 0x000008, "Wrong alignment on FRHAPI_FriendsList");
static_assert(sizeof(FRHAPI_FriendsList) == 0x000040, "Wrong size on FRHAPI_FriendsList");
static_assert(offsetof(FRHAPI_FriendsList, PlayerUuid) == 0x000008, "Member 'FRHAPI_FriendsList::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendsList, Friends) == 0x000018, "Member 'FRHAPI_FriendsList::Friends' has a wrong offset!");
static_assert(offsetof(FRHAPI_FriendsList, Page) == 0x000028, "Member 'FRHAPI_FriendsList::Page' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideSectionCreate
// 0x0350 (0x0358 - 0x0008)
struct FRHAPI_GuideSectionCreate final : public FRHAPI_Model
{
public:
	class FString                                 SectionType;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortDesc_Optional;                                // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsSet;                                   // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsNull;                                  // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content_Optional;                                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsSet;                                     // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsNull;                                    // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref1_Optional;                                     // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsSet;                                        // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsNull;                                       // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref2_Optional;                                     // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsSet;                                        // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsNull;                                       // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref3_Optional;                                     // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsSet;                                        // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsNull;                                       // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref4_Optional;                                     // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsSet;                                        // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsNull;                                       // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref5_Optional;                                     // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsSet;                                        // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsNull;                                       // 0x00C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref6_Optional;                                     // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsSet;                                        // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsNull;                                       // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref7_Optional;                                     // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsSet;                                        // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsNull;                                       // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref8_Optional;                                     // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsSet;                                        // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsNull;                                       // 0x0111(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref9_Optional;                                     // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsSet;                                        // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsNull;                                       // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref10_Optional;                                    // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsSet;                                       // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsNull;                                      // 0x0141(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref11_Optional;                                    // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsSet;                                       // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsNull;                                      // 0x0159(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref12_Optional;                                    // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsSet;                                       // 0x0170(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsNull;                                      // 0x0171(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_172[0x6];                                      // 0x0172(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref13_Optional;                                    // 0x0178(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsSet;                                       // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsNull;                                      // 0x0189(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref14_Optional;                                    // 0x0190(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsSet;                                       // 0x01A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsNull;                                      // 0x01A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref15_Optional;                                    // 0x01A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsSet;                                       // 0x01B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsNull;                                      // 0x01B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref16_Optional;                                    // 0x01C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsSet;                                       // 0x01D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsNull;                                      // 0x01D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref17_Optional;                                    // 0x01D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsSet;                                       // 0x01E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsNull;                                      // 0x01E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref18_Optional;                                    // 0x01F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsSet;                                       // 0x0200(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsNull;                                      // 0x0201(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref19_Optional;                                    // 0x0208(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsSet;                                       // 0x0218(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsNull;                                      // 0x0219(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref20_Optional;                                    // 0x0220(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsSet;                                       // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsNull;                                      // 0x0231(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232[0x6];                                      // 0x0232(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref21_Optional;                                    // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsSet;                                       // 0x0248(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsNull;                                      // 0x0249(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref22_Optional;                                    // 0x0250(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsSet;                                       // 0x0260(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsNull;                                      // 0x0261(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref23_Optional;                                    // 0x0268(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsSet;                                       // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsNull;                                      // 0x0279(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27A[0x6];                                      // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref24_Optional;                                    // 0x0280(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsSet;                                       // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsNull;                                      // 0x0291(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref25_Optional;                                    // 0x0298(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsSet;                                       // 0x02A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsNull;                                      // 0x02A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref26_Optional;                                    // 0x02B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsSet;                                       // 0x02C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsNull;                                      // 0x02C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref27_Optional;                                    // 0x02C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsSet;                                       // 0x02D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsNull;                                      // 0x02D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref28_Optional;                                    // 0x02E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsSet;                                       // 0x02F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsNull;                                      // 0x02F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref29_Optional;                                    // 0x02F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsSet;                                       // 0x0308(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsNull;                                      // 0x0309(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref30_Optional;                                    // 0x0310(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsSet;                                       // 0x0320(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsNull;                                      // 0x0321(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref31_Optional;                                    // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsSet;                                       // 0x0338(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsNull;                                      // 0x0339(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref32_Optional;                                    // 0x0340(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsSet;                                       // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsNull;                                      // 0x0351(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_GuideSectionCreate) == 0x000008, "Wrong alignment on FRHAPI_GuideSectionCreate");
static_assert(sizeof(FRHAPI_GuideSectionCreate) == 0x000358, "Wrong size on FRHAPI_GuideSectionCreate");
static_assert(offsetof(FRHAPI_GuideSectionCreate, SectionType) == 0x000008, "Member 'FRHAPI_GuideSectionCreate::SectionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Name) == 0x000018, "Member 'FRHAPI_GuideSectionCreate::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, ShortDesc_Optional) == 0x000028, "Member 'FRHAPI_GuideSectionCreate::ShortDesc_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, ShortDesc_IsSet) == 0x000038, "Member 'FRHAPI_GuideSectionCreate::ShortDesc_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, ShortDesc_IsNull) == 0x000039, "Member 'FRHAPI_GuideSectionCreate::ShortDesc_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Content_Optional) == 0x000040, "Member 'FRHAPI_GuideSectionCreate::Content_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Content_IsSet) == 0x000050, "Member 'FRHAPI_GuideSectionCreate::Content_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Content_IsNull) == 0x000051, "Member 'FRHAPI_GuideSectionCreate::Content_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref1_Optional) == 0x000058, "Member 'FRHAPI_GuideSectionCreate::Ref1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref1_IsSet) == 0x000068, "Member 'FRHAPI_GuideSectionCreate::Ref1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref1_IsNull) == 0x000069, "Member 'FRHAPI_GuideSectionCreate::Ref1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref2_Optional) == 0x000070, "Member 'FRHAPI_GuideSectionCreate::Ref2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref2_IsSet) == 0x000080, "Member 'FRHAPI_GuideSectionCreate::Ref2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref2_IsNull) == 0x000081, "Member 'FRHAPI_GuideSectionCreate::Ref2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref3_Optional) == 0x000088, "Member 'FRHAPI_GuideSectionCreate::Ref3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref3_IsSet) == 0x000098, "Member 'FRHAPI_GuideSectionCreate::Ref3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref3_IsNull) == 0x000099, "Member 'FRHAPI_GuideSectionCreate::Ref3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref4_Optional) == 0x0000A0, "Member 'FRHAPI_GuideSectionCreate::Ref4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref4_IsSet) == 0x0000B0, "Member 'FRHAPI_GuideSectionCreate::Ref4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref4_IsNull) == 0x0000B1, "Member 'FRHAPI_GuideSectionCreate::Ref4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref5_Optional) == 0x0000B8, "Member 'FRHAPI_GuideSectionCreate::Ref5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref5_IsSet) == 0x0000C8, "Member 'FRHAPI_GuideSectionCreate::Ref5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref5_IsNull) == 0x0000C9, "Member 'FRHAPI_GuideSectionCreate::Ref5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref6_Optional) == 0x0000D0, "Member 'FRHAPI_GuideSectionCreate::Ref6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref6_IsSet) == 0x0000E0, "Member 'FRHAPI_GuideSectionCreate::Ref6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref6_IsNull) == 0x0000E1, "Member 'FRHAPI_GuideSectionCreate::Ref6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref7_Optional) == 0x0000E8, "Member 'FRHAPI_GuideSectionCreate::Ref7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref7_IsSet) == 0x0000F8, "Member 'FRHAPI_GuideSectionCreate::Ref7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref7_IsNull) == 0x0000F9, "Member 'FRHAPI_GuideSectionCreate::Ref7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref8_Optional) == 0x000100, "Member 'FRHAPI_GuideSectionCreate::Ref8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref8_IsSet) == 0x000110, "Member 'FRHAPI_GuideSectionCreate::Ref8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref8_IsNull) == 0x000111, "Member 'FRHAPI_GuideSectionCreate::Ref8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref9_Optional) == 0x000118, "Member 'FRHAPI_GuideSectionCreate::Ref9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref9_IsSet) == 0x000128, "Member 'FRHAPI_GuideSectionCreate::Ref9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref9_IsNull) == 0x000129, "Member 'FRHAPI_GuideSectionCreate::Ref9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref10_Optional) == 0x000130, "Member 'FRHAPI_GuideSectionCreate::Ref10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref10_IsSet) == 0x000140, "Member 'FRHAPI_GuideSectionCreate::Ref10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref10_IsNull) == 0x000141, "Member 'FRHAPI_GuideSectionCreate::Ref10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref11_Optional) == 0x000148, "Member 'FRHAPI_GuideSectionCreate::Ref11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref11_IsSet) == 0x000158, "Member 'FRHAPI_GuideSectionCreate::Ref11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref11_IsNull) == 0x000159, "Member 'FRHAPI_GuideSectionCreate::Ref11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref12_Optional) == 0x000160, "Member 'FRHAPI_GuideSectionCreate::Ref12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref12_IsSet) == 0x000170, "Member 'FRHAPI_GuideSectionCreate::Ref12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref12_IsNull) == 0x000171, "Member 'FRHAPI_GuideSectionCreate::Ref12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref13_Optional) == 0x000178, "Member 'FRHAPI_GuideSectionCreate::Ref13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref13_IsSet) == 0x000188, "Member 'FRHAPI_GuideSectionCreate::Ref13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref13_IsNull) == 0x000189, "Member 'FRHAPI_GuideSectionCreate::Ref13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref14_Optional) == 0x000190, "Member 'FRHAPI_GuideSectionCreate::Ref14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref14_IsSet) == 0x0001A0, "Member 'FRHAPI_GuideSectionCreate::Ref14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref14_IsNull) == 0x0001A1, "Member 'FRHAPI_GuideSectionCreate::Ref14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref15_Optional) == 0x0001A8, "Member 'FRHAPI_GuideSectionCreate::Ref15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref15_IsSet) == 0x0001B8, "Member 'FRHAPI_GuideSectionCreate::Ref15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref15_IsNull) == 0x0001B9, "Member 'FRHAPI_GuideSectionCreate::Ref15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref16_Optional) == 0x0001C0, "Member 'FRHAPI_GuideSectionCreate::Ref16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref16_IsSet) == 0x0001D0, "Member 'FRHAPI_GuideSectionCreate::Ref16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref16_IsNull) == 0x0001D1, "Member 'FRHAPI_GuideSectionCreate::Ref16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref17_Optional) == 0x0001D8, "Member 'FRHAPI_GuideSectionCreate::Ref17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref17_IsSet) == 0x0001E8, "Member 'FRHAPI_GuideSectionCreate::Ref17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref17_IsNull) == 0x0001E9, "Member 'FRHAPI_GuideSectionCreate::Ref17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref18_Optional) == 0x0001F0, "Member 'FRHAPI_GuideSectionCreate::Ref18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref18_IsSet) == 0x000200, "Member 'FRHAPI_GuideSectionCreate::Ref18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref18_IsNull) == 0x000201, "Member 'FRHAPI_GuideSectionCreate::Ref18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref19_Optional) == 0x000208, "Member 'FRHAPI_GuideSectionCreate::Ref19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref19_IsSet) == 0x000218, "Member 'FRHAPI_GuideSectionCreate::Ref19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref19_IsNull) == 0x000219, "Member 'FRHAPI_GuideSectionCreate::Ref19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref20_Optional) == 0x000220, "Member 'FRHAPI_GuideSectionCreate::Ref20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref20_IsSet) == 0x000230, "Member 'FRHAPI_GuideSectionCreate::Ref20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref20_IsNull) == 0x000231, "Member 'FRHAPI_GuideSectionCreate::Ref20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref21_Optional) == 0x000238, "Member 'FRHAPI_GuideSectionCreate::Ref21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref21_IsSet) == 0x000248, "Member 'FRHAPI_GuideSectionCreate::Ref21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref21_IsNull) == 0x000249, "Member 'FRHAPI_GuideSectionCreate::Ref21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref22_Optional) == 0x000250, "Member 'FRHAPI_GuideSectionCreate::Ref22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref22_IsSet) == 0x000260, "Member 'FRHAPI_GuideSectionCreate::Ref22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref22_IsNull) == 0x000261, "Member 'FRHAPI_GuideSectionCreate::Ref22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref23_Optional) == 0x000268, "Member 'FRHAPI_GuideSectionCreate::Ref23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref23_IsSet) == 0x000278, "Member 'FRHAPI_GuideSectionCreate::Ref23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref23_IsNull) == 0x000279, "Member 'FRHAPI_GuideSectionCreate::Ref23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref24_Optional) == 0x000280, "Member 'FRHAPI_GuideSectionCreate::Ref24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref24_IsSet) == 0x000290, "Member 'FRHAPI_GuideSectionCreate::Ref24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref24_IsNull) == 0x000291, "Member 'FRHAPI_GuideSectionCreate::Ref24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref25_Optional) == 0x000298, "Member 'FRHAPI_GuideSectionCreate::Ref25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref25_IsSet) == 0x0002A8, "Member 'FRHAPI_GuideSectionCreate::Ref25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref25_IsNull) == 0x0002A9, "Member 'FRHAPI_GuideSectionCreate::Ref25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref26_Optional) == 0x0002B0, "Member 'FRHAPI_GuideSectionCreate::Ref26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref26_IsSet) == 0x0002C0, "Member 'FRHAPI_GuideSectionCreate::Ref26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref26_IsNull) == 0x0002C1, "Member 'FRHAPI_GuideSectionCreate::Ref26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref27_Optional) == 0x0002C8, "Member 'FRHAPI_GuideSectionCreate::Ref27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref27_IsSet) == 0x0002D8, "Member 'FRHAPI_GuideSectionCreate::Ref27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref27_IsNull) == 0x0002D9, "Member 'FRHAPI_GuideSectionCreate::Ref27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref28_Optional) == 0x0002E0, "Member 'FRHAPI_GuideSectionCreate::Ref28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref28_IsSet) == 0x0002F0, "Member 'FRHAPI_GuideSectionCreate::Ref28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref28_IsNull) == 0x0002F1, "Member 'FRHAPI_GuideSectionCreate::Ref28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref29_Optional) == 0x0002F8, "Member 'FRHAPI_GuideSectionCreate::Ref29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref29_IsSet) == 0x000308, "Member 'FRHAPI_GuideSectionCreate::Ref29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref29_IsNull) == 0x000309, "Member 'FRHAPI_GuideSectionCreate::Ref29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref30_Optional) == 0x000310, "Member 'FRHAPI_GuideSectionCreate::Ref30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref30_IsSet) == 0x000320, "Member 'FRHAPI_GuideSectionCreate::Ref30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref30_IsNull) == 0x000321, "Member 'FRHAPI_GuideSectionCreate::Ref30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref31_Optional) == 0x000328, "Member 'FRHAPI_GuideSectionCreate::Ref31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref31_IsSet) == 0x000338, "Member 'FRHAPI_GuideSectionCreate::Ref31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref31_IsNull) == 0x000339, "Member 'FRHAPI_GuideSectionCreate::Ref31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref32_Optional) == 0x000340, "Member 'FRHAPI_GuideSectionCreate::Ref32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref32_IsSet) == 0x000350, "Member 'FRHAPI_GuideSectionCreate::Ref32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSectionCreate, Ref32_IsNull) == 0x000351, "Member 'FRHAPI_GuideSectionCreate::Ref32_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideCreateRequest
// 0x03A8 (0x03B0 - 0x0008)
struct FRHAPI_GuideCreateRequest final : public FRHAPI_Model
{
public:
	class FString                                 GuideType;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortDesc_Optional;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsSet;                                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsNull;                                  // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PromotionPriority_Optional;                        // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PromotionPriority_IsSet;                           // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref1_Optional;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsSet;                                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsNull;                                       // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref2_Optional;                                     // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsSet;                                        // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsNull;                                       // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref3_Optional;                                     // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsSet;                                        // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsNull;                                       // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref4_Optional;                                     // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsSet;                                        // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsNull;                                       // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref5_Optional;                                     // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsSet;                                        // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsNull;                                       // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref6_Optional;                                     // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsSet;                                        // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsNull;                                       // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref7_Optional;                                     // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsSet;                                        // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsNull;                                       // 0x0109(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref8_Optional;                                     // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsSet;                                        // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsNull;                                       // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref9_Optional;                                     // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsSet;                                        // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsNull;                                       // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref10_Optional;                                    // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsSet;                                       // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsNull;                                      // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref11_Optional;                                    // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsSet;                                       // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsNull;                                      // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref12_Optional;                                    // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsSet;                                       // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsNull;                                      // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref13_Optional;                                    // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsSet;                                       // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsNull;                                      // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref14_Optional;                                    // 0x01A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsSet;                                       // 0x01B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsNull;                                      // 0x01B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref15_Optional;                                    // 0x01B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsSet;                                       // 0x01C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsNull;                                      // 0x01C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref16_Optional;                                    // 0x01D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsSet;                                       // 0x01E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsNull;                                      // 0x01E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref17_Optional;                                    // 0x01E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsSet;                                       // 0x01F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsNull;                                      // 0x01F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref18_Optional;                                    // 0x0200(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsSet;                                       // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsNull;                                      // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref19_Optional;                                    // 0x0218(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsSet;                                       // 0x0228(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsNull;                                      // 0x0229(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref20_Optional;                                    // 0x0230(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsSet;                                       // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsNull;                                      // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref21_Optional;                                    // 0x0248(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsSet;                                       // 0x0258(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsNull;                                      // 0x0259(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref22_Optional;                                    // 0x0260(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsSet;                                       // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsNull;                                      // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref23_Optional;                                    // 0x0278(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsSet;                                       // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsNull;                                      // 0x0289(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref24_Optional;                                    // 0x0290(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsSet;                                       // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsNull;                                      // 0x02A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref25_Optional;                                    // 0x02A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsSet;                                       // 0x02B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsNull;                                      // 0x02B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref26_Optional;                                    // 0x02C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsSet;                                       // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsNull;                                      // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref27_Optional;                                    // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsSet;                                       // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsNull;                                      // 0x02E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref28_Optional;                                    // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsSet;                                       // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsNull;                                      // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref29_Optional;                                    // 0x0308(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsSet;                                       // 0x0318(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsNull;                                      // 0x0319(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref30_Optional;                                    // 0x0320(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsSet;                                       // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsNull;                                      // 0x0331(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref31_Optional;                                    // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsSet;                                       // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsNull;                                      // 0x0349(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref32_Optional;                                    // 0x0350(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsSet;                                       // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsNull;                                      // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_GuideEntityType                        OwnerEntityType_Optional;                          // 0x0362(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnerEntityType_IsSet;                             // 0x0363(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnerEntityType_IsNull;                            // 0x0364(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwnerEntityId_Optional;                            // 0x0368(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnerEntityId_IsSet;                               // 0x0378(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnerEntityId_IsNull;                              // 0x0379(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Content_Optional;                                  // 0x0380(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsSet;                                     // 0x0390(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Content_IsNull;                                    // 0x0391(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_GuideSectionCreate>      Sections_Optional;                                 // 0x0398(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sections_IsSet;                                    // 0x03A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_GuideCreateRequest) == 0x000008, "Wrong alignment on FRHAPI_GuideCreateRequest");
static_assert(sizeof(FRHAPI_GuideCreateRequest) == 0x0003B0, "Wrong size on FRHAPI_GuideCreateRequest");
static_assert(offsetof(FRHAPI_GuideCreateRequest, GuideType) == 0x000008, "Member 'FRHAPI_GuideCreateRequest::GuideType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Language) == 0x000018, "Member 'FRHAPI_GuideCreateRequest::Language' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, GameVersion) == 0x000028, "Member 'FRHAPI_GuideCreateRequest::GameVersion' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Name) == 0x000038, "Member 'FRHAPI_GuideCreateRequest::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, ShortDesc_Optional) == 0x000048, "Member 'FRHAPI_GuideCreateRequest::ShortDesc_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, ShortDesc_IsSet) == 0x000058, "Member 'FRHAPI_GuideCreateRequest::ShortDesc_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, ShortDesc_IsNull) == 0x000059, "Member 'FRHAPI_GuideCreateRequest::ShortDesc_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, PromotionPriority_Optional) == 0x00005C, "Member 'FRHAPI_GuideCreateRequest::PromotionPriority_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, PromotionPriority_IsSet) == 0x000060, "Member 'FRHAPI_GuideCreateRequest::PromotionPriority_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref1_Optional) == 0x000068, "Member 'FRHAPI_GuideCreateRequest::Ref1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref1_IsSet) == 0x000078, "Member 'FRHAPI_GuideCreateRequest::Ref1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref1_IsNull) == 0x000079, "Member 'FRHAPI_GuideCreateRequest::Ref1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref2_Optional) == 0x000080, "Member 'FRHAPI_GuideCreateRequest::Ref2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref2_IsSet) == 0x000090, "Member 'FRHAPI_GuideCreateRequest::Ref2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref2_IsNull) == 0x000091, "Member 'FRHAPI_GuideCreateRequest::Ref2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref3_Optional) == 0x000098, "Member 'FRHAPI_GuideCreateRequest::Ref3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref3_IsSet) == 0x0000A8, "Member 'FRHAPI_GuideCreateRequest::Ref3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref3_IsNull) == 0x0000A9, "Member 'FRHAPI_GuideCreateRequest::Ref3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref4_Optional) == 0x0000B0, "Member 'FRHAPI_GuideCreateRequest::Ref4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref4_IsSet) == 0x0000C0, "Member 'FRHAPI_GuideCreateRequest::Ref4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref4_IsNull) == 0x0000C1, "Member 'FRHAPI_GuideCreateRequest::Ref4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref5_Optional) == 0x0000C8, "Member 'FRHAPI_GuideCreateRequest::Ref5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref5_IsSet) == 0x0000D8, "Member 'FRHAPI_GuideCreateRequest::Ref5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref5_IsNull) == 0x0000D9, "Member 'FRHAPI_GuideCreateRequest::Ref5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref6_Optional) == 0x0000E0, "Member 'FRHAPI_GuideCreateRequest::Ref6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref6_IsSet) == 0x0000F0, "Member 'FRHAPI_GuideCreateRequest::Ref6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref6_IsNull) == 0x0000F1, "Member 'FRHAPI_GuideCreateRequest::Ref6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref7_Optional) == 0x0000F8, "Member 'FRHAPI_GuideCreateRequest::Ref7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref7_IsSet) == 0x000108, "Member 'FRHAPI_GuideCreateRequest::Ref7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref7_IsNull) == 0x000109, "Member 'FRHAPI_GuideCreateRequest::Ref7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref8_Optional) == 0x000110, "Member 'FRHAPI_GuideCreateRequest::Ref8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref8_IsSet) == 0x000120, "Member 'FRHAPI_GuideCreateRequest::Ref8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref8_IsNull) == 0x000121, "Member 'FRHAPI_GuideCreateRequest::Ref8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref9_Optional) == 0x000128, "Member 'FRHAPI_GuideCreateRequest::Ref9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref9_IsSet) == 0x000138, "Member 'FRHAPI_GuideCreateRequest::Ref9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref9_IsNull) == 0x000139, "Member 'FRHAPI_GuideCreateRequest::Ref9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref10_Optional) == 0x000140, "Member 'FRHAPI_GuideCreateRequest::Ref10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref10_IsSet) == 0x000150, "Member 'FRHAPI_GuideCreateRequest::Ref10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref10_IsNull) == 0x000151, "Member 'FRHAPI_GuideCreateRequest::Ref10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref11_Optional) == 0x000158, "Member 'FRHAPI_GuideCreateRequest::Ref11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref11_IsSet) == 0x000168, "Member 'FRHAPI_GuideCreateRequest::Ref11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref11_IsNull) == 0x000169, "Member 'FRHAPI_GuideCreateRequest::Ref11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref12_Optional) == 0x000170, "Member 'FRHAPI_GuideCreateRequest::Ref12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref12_IsSet) == 0x000180, "Member 'FRHAPI_GuideCreateRequest::Ref12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref12_IsNull) == 0x000181, "Member 'FRHAPI_GuideCreateRequest::Ref12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref13_Optional) == 0x000188, "Member 'FRHAPI_GuideCreateRequest::Ref13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref13_IsSet) == 0x000198, "Member 'FRHAPI_GuideCreateRequest::Ref13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref13_IsNull) == 0x000199, "Member 'FRHAPI_GuideCreateRequest::Ref13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref14_Optional) == 0x0001A0, "Member 'FRHAPI_GuideCreateRequest::Ref14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref14_IsSet) == 0x0001B0, "Member 'FRHAPI_GuideCreateRequest::Ref14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref14_IsNull) == 0x0001B1, "Member 'FRHAPI_GuideCreateRequest::Ref14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref15_Optional) == 0x0001B8, "Member 'FRHAPI_GuideCreateRequest::Ref15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref15_IsSet) == 0x0001C8, "Member 'FRHAPI_GuideCreateRequest::Ref15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref15_IsNull) == 0x0001C9, "Member 'FRHAPI_GuideCreateRequest::Ref15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref16_Optional) == 0x0001D0, "Member 'FRHAPI_GuideCreateRequest::Ref16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref16_IsSet) == 0x0001E0, "Member 'FRHAPI_GuideCreateRequest::Ref16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref16_IsNull) == 0x0001E1, "Member 'FRHAPI_GuideCreateRequest::Ref16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref17_Optional) == 0x0001E8, "Member 'FRHAPI_GuideCreateRequest::Ref17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref17_IsSet) == 0x0001F8, "Member 'FRHAPI_GuideCreateRequest::Ref17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref17_IsNull) == 0x0001F9, "Member 'FRHAPI_GuideCreateRequest::Ref17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref18_Optional) == 0x000200, "Member 'FRHAPI_GuideCreateRequest::Ref18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref18_IsSet) == 0x000210, "Member 'FRHAPI_GuideCreateRequest::Ref18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref18_IsNull) == 0x000211, "Member 'FRHAPI_GuideCreateRequest::Ref18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref19_Optional) == 0x000218, "Member 'FRHAPI_GuideCreateRequest::Ref19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref19_IsSet) == 0x000228, "Member 'FRHAPI_GuideCreateRequest::Ref19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref19_IsNull) == 0x000229, "Member 'FRHAPI_GuideCreateRequest::Ref19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref20_Optional) == 0x000230, "Member 'FRHAPI_GuideCreateRequest::Ref20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref20_IsSet) == 0x000240, "Member 'FRHAPI_GuideCreateRequest::Ref20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref20_IsNull) == 0x000241, "Member 'FRHAPI_GuideCreateRequest::Ref20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref21_Optional) == 0x000248, "Member 'FRHAPI_GuideCreateRequest::Ref21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref21_IsSet) == 0x000258, "Member 'FRHAPI_GuideCreateRequest::Ref21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref21_IsNull) == 0x000259, "Member 'FRHAPI_GuideCreateRequest::Ref21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref22_Optional) == 0x000260, "Member 'FRHAPI_GuideCreateRequest::Ref22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref22_IsSet) == 0x000270, "Member 'FRHAPI_GuideCreateRequest::Ref22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref22_IsNull) == 0x000271, "Member 'FRHAPI_GuideCreateRequest::Ref22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref23_Optional) == 0x000278, "Member 'FRHAPI_GuideCreateRequest::Ref23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref23_IsSet) == 0x000288, "Member 'FRHAPI_GuideCreateRequest::Ref23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref23_IsNull) == 0x000289, "Member 'FRHAPI_GuideCreateRequest::Ref23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref24_Optional) == 0x000290, "Member 'FRHAPI_GuideCreateRequest::Ref24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref24_IsSet) == 0x0002A0, "Member 'FRHAPI_GuideCreateRequest::Ref24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref24_IsNull) == 0x0002A1, "Member 'FRHAPI_GuideCreateRequest::Ref24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref25_Optional) == 0x0002A8, "Member 'FRHAPI_GuideCreateRequest::Ref25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref25_IsSet) == 0x0002B8, "Member 'FRHAPI_GuideCreateRequest::Ref25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref25_IsNull) == 0x0002B9, "Member 'FRHAPI_GuideCreateRequest::Ref25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref26_Optional) == 0x0002C0, "Member 'FRHAPI_GuideCreateRequest::Ref26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref26_IsSet) == 0x0002D0, "Member 'FRHAPI_GuideCreateRequest::Ref26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref26_IsNull) == 0x0002D1, "Member 'FRHAPI_GuideCreateRequest::Ref26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref27_Optional) == 0x0002D8, "Member 'FRHAPI_GuideCreateRequest::Ref27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref27_IsSet) == 0x0002E8, "Member 'FRHAPI_GuideCreateRequest::Ref27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref27_IsNull) == 0x0002E9, "Member 'FRHAPI_GuideCreateRequest::Ref27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref28_Optional) == 0x0002F0, "Member 'FRHAPI_GuideCreateRequest::Ref28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref28_IsSet) == 0x000300, "Member 'FRHAPI_GuideCreateRequest::Ref28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref28_IsNull) == 0x000301, "Member 'FRHAPI_GuideCreateRequest::Ref28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref29_Optional) == 0x000308, "Member 'FRHAPI_GuideCreateRequest::Ref29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref29_IsSet) == 0x000318, "Member 'FRHAPI_GuideCreateRequest::Ref29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref29_IsNull) == 0x000319, "Member 'FRHAPI_GuideCreateRequest::Ref29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref30_Optional) == 0x000320, "Member 'FRHAPI_GuideCreateRequest::Ref30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref30_IsSet) == 0x000330, "Member 'FRHAPI_GuideCreateRequest::Ref30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref30_IsNull) == 0x000331, "Member 'FRHAPI_GuideCreateRequest::Ref30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref31_Optional) == 0x000338, "Member 'FRHAPI_GuideCreateRequest::Ref31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref31_IsSet) == 0x000348, "Member 'FRHAPI_GuideCreateRequest::Ref31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref31_IsNull) == 0x000349, "Member 'FRHAPI_GuideCreateRequest::Ref31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref32_Optional) == 0x000350, "Member 'FRHAPI_GuideCreateRequest::Ref32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref32_IsSet) == 0x000360, "Member 'FRHAPI_GuideCreateRequest::Ref32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Ref32_IsNull) == 0x000361, "Member 'FRHAPI_GuideCreateRequest::Ref32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityType_Optional) == 0x000362, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityType_IsSet) == 0x000363, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityType_IsNull) == 0x000364, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityType_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityId_Optional) == 0x000368, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityId_IsSet) == 0x000378, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, OwnerEntityId_IsNull) == 0x000379, "Member 'FRHAPI_GuideCreateRequest::OwnerEntityId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Content_Optional) == 0x000380, "Member 'FRHAPI_GuideCreateRequest::Content_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Content_IsSet) == 0x000390, "Member 'FRHAPI_GuideCreateRequest::Content_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Content_IsNull) == 0x000391, "Member 'FRHAPI_GuideCreateRequest::Content_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Sections_Optional) == 0x000398, "Member 'FRHAPI_GuideCreateRequest::Sections_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideCreateRequest, Sections_IsSet) == 0x0003A8, "Member 'FRHAPI_GuideCreateRequest::Sections_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideRating
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_GuideRating final : public FRHAPI_Model
{
public:
	struct FGuid                                  GuideId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rating;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_GuideRating) == 0x000008, "Wrong alignment on FRHAPI_GuideRating");
static_assert(sizeof(FRHAPI_GuideRating) == 0x000020, "Wrong size on FRHAPI_GuideRating");
static_assert(offsetof(FRHAPI_GuideRating, GuideId) == 0x000008, "Member 'FRHAPI_GuideRating::GuideId' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideRating, Rating) == 0x000018, "Member 'FRHAPI_GuideRating::Rating' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_GuideSearchResult
// 0x03B8 (0x03C0 - 0x0008)
struct FRHAPI_GuideSearchResult final : public FRHAPI_Model
{
public:
	class FString                                 GuideType;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShortDesc_Optional;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsSet;                                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShortDesc_IsNull;                                  // 0x0059(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PromotionPriority_Optional;                        // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PromotionPriority_IsSet;                           // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref1_Optional;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsSet;                                        // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref1_IsNull;                                       // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref2_Optional;                                     // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsSet;                                        // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref2_IsNull;                                       // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref3_Optional;                                     // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsSet;                                        // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref3_IsNull;                                       // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref4_Optional;                                     // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsSet;                                        // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref4_IsNull;                                       // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref5_Optional;                                     // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsSet;                                        // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref5_IsNull;                                       // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref6_Optional;                                     // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsSet;                                        // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref6_IsNull;                                       // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref7_Optional;                                     // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsSet;                                        // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref7_IsNull;                                       // 0x0109(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref8_Optional;                                     // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsSet;                                        // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref8_IsNull;                                       // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref9_Optional;                                     // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsSet;                                        // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref9_IsNull;                                       // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref10_Optional;                                    // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsSet;                                       // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref10_IsNull;                                      // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref11_Optional;                                    // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsSet;                                       // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref11_IsNull;                                      // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref12_Optional;                                    // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsSet;                                       // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref12_IsNull;                                      // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref13_Optional;                                    // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsSet;                                       // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref13_IsNull;                                      // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref14_Optional;                                    // 0x01A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsSet;                                       // 0x01B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref14_IsNull;                                      // 0x01B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref15_Optional;                                    // 0x01B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsSet;                                       // 0x01C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref15_IsNull;                                      // 0x01C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA[0x6];                                      // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref16_Optional;                                    // 0x01D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsSet;                                       // 0x01E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref16_IsNull;                                      // 0x01E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref17_Optional;                                    // 0x01E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsSet;                                       // 0x01F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref17_IsNull;                                      // 0x01F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref18_Optional;                                    // 0x0200(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsSet;                                       // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref18_IsNull;                                      // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref19_Optional;                                    // 0x0218(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsSet;                                       // 0x0228(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref19_IsNull;                                      // 0x0229(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref20_Optional;                                    // 0x0230(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsSet;                                       // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref20_IsNull;                                      // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref21_Optional;                                    // 0x0248(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsSet;                                       // 0x0258(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref21_IsNull;                                      // 0x0259(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref22_Optional;                                    // 0x0260(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsSet;                                       // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref22_IsNull;                                      // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref23_Optional;                                    // 0x0278(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsSet;                                       // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref23_IsNull;                                      // 0x0289(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref24_Optional;                                    // 0x0290(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsSet;                                       // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref24_IsNull;                                      // 0x02A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref25_Optional;                                    // 0x02A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsSet;                                       // 0x02B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref25_IsNull;                                      // 0x02B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref26_Optional;                                    // 0x02C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsSet;                                       // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref26_IsNull;                                      // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref27_Optional;                                    // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsSet;                                       // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref27_IsNull;                                      // 0x02E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref28_Optional;                                    // 0x02F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsSet;                                       // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref28_IsNull;                                      // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref29_Optional;                                    // 0x0308(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsSet;                                       // 0x0318(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref29_IsNull;                                      // 0x0319(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref30_Optional;                                    // 0x0320(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsSet;                                       // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref30_IsNull;                                      // 0x0331(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref31_Optional;                                    // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsSet;                                       // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref31_IsNull;                                      // 0x0349(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ref32_Optional;                                    // 0x0350(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsSet;                                       // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ref32_IsNull;                                      // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  GuideId;                                           // 0x0364(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_GuideEntityType                        OwnerEntityType;                                   // 0x0374(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwnerEntityId;                                     // 0x0378(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Modified;                                          // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Favorites_Optional;                                // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Favorites_IsSet;                                   // 0x039C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Upvotes_Optional;                                  // 0x03A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Upvotes_IsSet;                                     // 0x03A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Downvotes_Optional;                                // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Downvotes_IsSet;                                   // 0x03AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Etag;                                              // 0x03B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_GuideSearchResult) == 0x000008, "Wrong alignment on FRHAPI_GuideSearchResult");
static_assert(sizeof(FRHAPI_GuideSearchResult) == 0x0003C0, "Wrong size on FRHAPI_GuideSearchResult");
static_assert(offsetof(FRHAPI_GuideSearchResult, GuideType) == 0x000008, "Member 'FRHAPI_GuideSearchResult::GuideType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Language) == 0x000018, "Member 'FRHAPI_GuideSearchResult::Language' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, GameVersion) == 0x000028, "Member 'FRHAPI_GuideSearchResult::GameVersion' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Name) == 0x000038, "Member 'FRHAPI_GuideSearchResult::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, ShortDesc_Optional) == 0x000048, "Member 'FRHAPI_GuideSearchResult::ShortDesc_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, ShortDesc_IsSet) == 0x000058, "Member 'FRHAPI_GuideSearchResult::ShortDesc_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, ShortDesc_IsNull) == 0x000059, "Member 'FRHAPI_GuideSearchResult::ShortDesc_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, PromotionPriority_Optional) == 0x00005C, "Member 'FRHAPI_GuideSearchResult::PromotionPriority_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, PromotionPriority_IsSet) == 0x000060, "Member 'FRHAPI_GuideSearchResult::PromotionPriority_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref1_Optional) == 0x000068, "Member 'FRHAPI_GuideSearchResult::Ref1_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref1_IsSet) == 0x000078, "Member 'FRHAPI_GuideSearchResult::Ref1_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref1_IsNull) == 0x000079, "Member 'FRHAPI_GuideSearchResult::Ref1_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref2_Optional) == 0x000080, "Member 'FRHAPI_GuideSearchResult::Ref2_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref2_IsSet) == 0x000090, "Member 'FRHAPI_GuideSearchResult::Ref2_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref2_IsNull) == 0x000091, "Member 'FRHAPI_GuideSearchResult::Ref2_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref3_Optional) == 0x000098, "Member 'FRHAPI_GuideSearchResult::Ref3_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref3_IsSet) == 0x0000A8, "Member 'FRHAPI_GuideSearchResult::Ref3_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref3_IsNull) == 0x0000A9, "Member 'FRHAPI_GuideSearchResult::Ref3_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref4_Optional) == 0x0000B0, "Member 'FRHAPI_GuideSearchResult::Ref4_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref4_IsSet) == 0x0000C0, "Member 'FRHAPI_GuideSearchResult::Ref4_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref4_IsNull) == 0x0000C1, "Member 'FRHAPI_GuideSearchResult::Ref4_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref5_Optional) == 0x0000C8, "Member 'FRHAPI_GuideSearchResult::Ref5_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref5_IsSet) == 0x0000D8, "Member 'FRHAPI_GuideSearchResult::Ref5_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref5_IsNull) == 0x0000D9, "Member 'FRHAPI_GuideSearchResult::Ref5_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref6_Optional) == 0x0000E0, "Member 'FRHAPI_GuideSearchResult::Ref6_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref6_IsSet) == 0x0000F0, "Member 'FRHAPI_GuideSearchResult::Ref6_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref6_IsNull) == 0x0000F1, "Member 'FRHAPI_GuideSearchResult::Ref6_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref7_Optional) == 0x0000F8, "Member 'FRHAPI_GuideSearchResult::Ref7_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref7_IsSet) == 0x000108, "Member 'FRHAPI_GuideSearchResult::Ref7_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref7_IsNull) == 0x000109, "Member 'FRHAPI_GuideSearchResult::Ref7_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref8_Optional) == 0x000110, "Member 'FRHAPI_GuideSearchResult::Ref8_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref8_IsSet) == 0x000120, "Member 'FRHAPI_GuideSearchResult::Ref8_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref8_IsNull) == 0x000121, "Member 'FRHAPI_GuideSearchResult::Ref8_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref9_Optional) == 0x000128, "Member 'FRHAPI_GuideSearchResult::Ref9_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref9_IsSet) == 0x000138, "Member 'FRHAPI_GuideSearchResult::Ref9_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref9_IsNull) == 0x000139, "Member 'FRHAPI_GuideSearchResult::Ref9_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref10_Optional) == 0x000140, "Member 'FRHAPI_GuideSearchResult::Ref10_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref10_IsSet) == 0x000150, "Member 'FRHAPI_GuideSearchResult::Ref10_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref10_IsNull) == 0x000151, "Member 'FRHAPI_GuideSearchResult::Ref10_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref11_Optional) == 0x000158, "Member 'FRHAPI_GuideSearchResult::Ref11_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref11_IsSet) == 0x000168, "Member 'FRHAPI_GuideSearchResult::Ref11_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref11_IsNull) == 0x000169, "Member 'FRHAPI_GuideSearchResult::Ref11_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref12_Optional) == 0x000170, "Member 'FRHAPI_GuideSearchResult::Ref12_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref12_IsSet) == 0x000180, "Member 'FRHAPI_GuideSearchResult::Ref12_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref12_IsNull) == 0x000181, "Member 'FRHAPI_GuideSearchResult::Ref12_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref13_Optional) == 0x000188, "Member 'FRHAPI_GuideSearchResult::Ref13_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref13_IsSet) == 0x000198, "Member 'FRHAPI_GuideSearchResult::Ref13_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref13_IsNull) == 0x000199, "Member 'FRHAPI_GuideSearchResult::Ref13_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref14_Optional) == 0x0001A0, "Member 'FRHAPI_GuideSearchResult::Ref14_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref14_IsSet) == 0x0001B0, "Member 'FRHAPI_GuideSearchResult::Ref14_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref14_IsNull) == 0x0001B1, "Member 'FRHAPI_GuideSearchResult::Ref14_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref15_Optional) == 0x0001B8, "Member 'FRHAPI_GuideSearchResult::Ref15_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref15_IsSet) == 0x0001C8, "Member 'FRHAPI_GuideSearchResult::Ref15_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref15_IsNull) == 0x0001C9, "Member 'FRHAPI_GuideSearchResult::Ref15_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref16_Optional) == 0x0001D0, "Member 'FRHAPI_GuideSearchResult::Ref16_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref16_IsSet) == 0x0001E0, "Member 'FRHAPI_GuideSearchResult::Ref16_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref16_IsNull) == 0x0001E1, "Member 'FRHAPI_GuideSearchResult::Ref16_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref17_Optional) == 0x0001E8, "Member 'FRHAPI_GuideSearchResult::Ref17_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref17_IsSet) == 0x0001F8, "Member 'FRHAPI_GuideSearchResult::Ref17_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref17_IsNull) == 0x0001F9, "Member 'FRHAPI_GuideSearchResult::Ref17_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref18_Optional) == 0x000200, "Member 'FRHAPI_GuideSearchResult::Ref18_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref18_IsSet) == 0x000210, "Member 'FRHAPI_GuideSearchResult::Ref18_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref18_IsNull) == 0x000211, "Member 'FRHAPI_GuideSearchResult::Ref18_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref19_Optional) == 0x000218, "Member 'FRHAPI_GuideSearchResult::Ref19_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref19_IsSet) == 0x000228, "Member 'FRHAPI_GuideSearchResult::Ref19_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref19_IsNull) == 0x000229, "Member 'FRHAPI_GuideSearchResult::Ref19_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref20_Optional) == 0x000230, "Member 'FRHAPI_GuideSearchResult::Ref20_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref20_IsSet) == 0x000240, "Member 'FRHAPI_GuideSearchResult::Ref20_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref20_IsNull) == 0x000241, "Member 'FRHAPI_GuideSearchResult::Ref20_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref21_Optional) == 0x000248, "Member 'FRHAPI_GuideSearchResult::Ref21_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref21_IsSet) == 0x000258, "Member 'FRHAPI_GuideSearchResult::Ref21_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref21_IsNull) == 0x000259, "Member 'FRHAPI_GuideSearchResult::Ref21_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref22_Optional) == 0x000260, "Member 'FRHAPI_GuideSearchResult::Ref22_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref22_IsSet) == 0x000270, "Member 'FRHAPI_GuideSearchResult::Ref22_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref22_IsNull) == 0x000271, "Member 'FRHAPI_GuideSearchResult::Ref22_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref23_Optional) == 0x000278, "Member 'FRHAPI_GuideSearchResult::Ref23_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref23_IsSet) == 0x000288, "Member 'FRHAPI_GuideSearchResult::Ref23_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref23_IsNull) == 0x000289, "Member 'FRHAPI_GuideSearchResult::Ref23_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref24_Optional) == 0x000290, "Member 'FRHAPI_GuideSearchResult::Ref24_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref24_IsSet) == 0x0002A0, "Member 'FRHAPI_GuideSearchResult::Ref24_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref24_IsNull) == 0x0002A1, "Member 'FRHAPI_GuideSearchResult::Ref24_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref25_Optional) == 0x0002A8, "Member 'FRHAPI_GuideSearchResult::Ref25_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref25_IsSet) == 0x0002B8, "Member 'FRHAPI_GuideSearchResult::Ref25_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref25_IsNull) == 0x0002B9, "Member 'FRHAPI_GuideSearchResult::Ref25_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref26_Optional) == 0x0002C0, "Member 'FRHAPI_GuideSearchResult::Ref26_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref26_IsSet) == 0x0002D0, "Member 'FRHAPI_GuideSearchResult::Ref26_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref26_IsNull) == 0x0002D1, "Member 'FRHAPI_GuideSearchResult::Ref26_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref27_Optional) == 0x0002D8, "Member 'FRHAPI_GuideSearchResult::Ref27_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref27_IsSet) == 0x0002E8, "Member 'FRHAPI_GuideSearchResult::Ref27_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref27_IsNull) == 0x0002E9, "Member 'FRHAPI_GuideSearchResult::Ref27_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref28_Optional) == 0x0002F0, "Member 'FRHAPI_GuideSearchResult::Ref28_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref28_IsSet) == 0x000300, "Member 'FRHAPI_GuideSearchResult::Ref28_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref28_IsNull) == 0x000301, "Member 'FRHAPI_GuideSearchResult::Ref28_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref29_Optional) == 0x000308, "Member 'FRHAPI_GuideSearchResult::Ref29_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref29_IsSet) == 0x000318, "Member 'FRHAPI_GuideSearchResult::Ref29_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref29_IsNull) == 0x000319, "Member 'FRHAPI_GuideSearchResult::Ref29_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref30_Optional) == 0x000320, "Member 'FRHAPI_GuideSearchResult::Ref30_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref30_IsSet) == 0x000330, "Member 'FRHAPI_GuideSearchResult::Ref30_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref30_IsNull) == 0x000331, "Member 'FRHAPI_GuideSearchResult::Ref30_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref31_Optional) == 0x000338, "Member 'FRHAPI_GuideSearchResult::Ref31_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref31_IsSet) == 0x000348, "Member 'FRHAPI_GuideSearchResult::Ref31_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref31_IsNull) == 0x000349, "Member 'FRHAPI_GuideSearchResult::Ref31_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref32_Optional) == 0x000350, "Member 'FRHAPI_GuideSearchResult::Ref32_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref32_IsSet) == 0x000360, "Member 'FRHAPI_GuideSearchResult::Ref32_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Ref32_IsNull) == 0x000361, "Member 'FRHAPI_GuideSearchResult::Ref32_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, GuideId) == 0x000364, "Member 'FRHAPI_GuideSearchResult::GuideId' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, OwnerEntityType) == 0x000374, "Member 'FRHAPI_GuideSearchResult::OwnerEntityType' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, OwnerEntityId) == 0x000378, "Member 'FRHAPI_GuideSearchResult::OwnerEntityId' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Created) == 0x000388, "Member 'FRHAPI_GuideSearchResult::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Modified) == 0x000390, "Member 'FRHAPI_GuideSearchResult::Modified' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Favorites_Optional) == 0x000398, "Member 'FRHAPI_GuideSearchResult::Favorites_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Favorites_IsSet) == 0x00039C, "Member 'FRHAPI_GuideSearchResult::Favorites_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Upvotes_Optional) == 0x0003A0, "Member 'FRHAPI_GuideSearchResult::Upvotes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Upvotes_IsSet) == 0x0003A4, "Member 'FRHAPI_GuideSearchResult::Upvotes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Downvotes_Optional) == 0x0003A8, "Member 'FRHAPI_GuideSearchResult::Downvotes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Downvotes_IsSet) == 0x0003AC, "Member 'FRHAPI_GuideSearchResult::Downvotes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_GuideSearchResult, Etag) == 0x0003B0, "Member 'FRHAPI_GuideSearchResult::Etag' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_HTTPValidationError
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_HTTPValidationError final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_ValidationError>         Detail_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Detail_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_HTTPValidationError) == 0x000008, "Wrong alignment on FRHAPI_HTTPValidationError");
static_assert(sizeof(FRHAPI_HTTPValidationError) == 0x000020, "Wrong size on FRHAPI_HTTPValidationError");
static_assert(offsetof(FRHAPI_HTTPValidationError, Detail_Optional) == 0x000008, "Member 'FRHAPI_HTTPValidationError::Detail_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_HTTPValidationError, Detail_IsSet) == 0x000018, "Member 'FRHAPI_HTTPValidationError::Detail_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_IndividualCCUs
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_IndividualCCUs final : public FRHAPI_Model
{
public:
	TMap<class FString, int32>                    Ccus;                                              // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_IndividualCCUs) == 0x000008, "Wrong alignment on FRHAPI_IndividualCCUs");
static_assert(sizeof(FRHAPI_IndividualCCUs) == 0x000058, "Wrong size on FRHAPI_IndividualCCUs");
static_assert(offsetof(FRHAPI_IndividualCCUs, Ccus) == 0x000008, "Member 'FRHAPI_IndividualCCUs::Ccus' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceHealthSettingsResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_InstanceHealthSettingsResponse final : public FRHAPI_Model
{
public:
	int32                                         CadenceSeconds;                                    // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnhealthyHealthCheckPercentage;                    // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissedChecksBeforeUnknown;                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceHealthSettingsResponse) == 0x000008, "Wrong alignment on FRHAPI_InstanceHealthSettingsResponse");
static_assert(sizeof(FRHAPI_InstanceHealthSettingsResponse) == 0x000018, "Wrong size on FRHAPI_InstanceHealthSettingsResponse");
static_assert(offsetof(FRHAPI_InstanceHealthSettingsResponse, CadenceSeconds) == 0x000008, "Member 'FRHAPI_InstanceHealthSettingsResponse::CadenceSeconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceHealthSettingsResponse, UnhealthyHealthCheckPercentage) == 0x00000C, "Member 'FRHAPI_InstanceHealthSettingsResponse::UnhealthyHealthCheckPercentage' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceHealthSettingsResponse, MissedChecksBeforeUnknown) == 0x000010, "Member 'FRHAPI_InstanceHealthSettingsResponse::MissedChecksBeforeUnknown' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceHealthStatusResponse
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_InstanceHealthStatusResponse final : public FRHAPI_Model
{
public:
	ERHAPI_InstanceHealthStatus                   UpdatedInstanceHealth;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceHealthStatusResponse) == 0x000008, "Wrong alignment on FRHAPI_InstanceHealthStatusResponse");
static_assert(sizeof(FRHAPI_InstanceHealthStatusResponse) == 0x000010, "Wrong size on FRHAPI_InstanceHealthStatusResponse");
static_assert(offsetof(FRHAPI_InstanceHealthStatusResponse, UpdatedInstanceHealth) == 0x000008, "Member 'FRHAPI_InstanceHealthStatusResponse::UpdatedInstanceHealth' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceHealthStatusUpdate
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_InstanceHealthStatusUpdate final : public FRHAPI_Model
{
public:
	ERHAPI_InstanceHealthStatus                   InstanceHealth;                                    // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_InstanceHealthStatusUpdate) == 0x000008, "Wrong alignment on FRHAPI_InstanceHealthStatusUpdate");
static_assert(sizeof(FRHAPI_InstanceHealthStatusUpdate) == 0x000020, "Wrong size on FRHAPI_InstanceHealthStatusUpdate");
static_assert(offsetof(FRHAPI_InstanceHealthStatusUpdate, InstanceHealth) == 0x000008, "Member 'FRHAPI_InstanceHealthStatusUpdate::InstanceHealth' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceHealthStatusUpdate, InstanceId) == 0x000010, "Member 'FRHAPI_InstanceHealthStatusUpdate::InstanceId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceStartupParams
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_InstanceStartupParams final : public FRHAPI_Model
{
public:
	class FString                                 Map;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode_Optional;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mode_IsSet;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MiscParams;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceStartupParams) == 0x000008, "Wrong alignment on FRHAPI_InstanceStartupParams");
static_assert(sizeof(FRHAPI_InstanceStartupParams) == 0x000098, "Wrong size on FRHAPI_InstanceStartupParams");
static_assert(offsetof(FRHAPI_InstanceStartupParams, Map) == 0x000008, "Member 'FRHAPI_InstanceStartupParams::Map' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceStartupParams, Mode_Optional) == 0x000018, "Member 'FRHAPI_InstanceStartupParams::Mode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceStartupParams, Mode_IsSet) == 0x000028, "Member 'FRHAPI_InstanceStartupParams::Mode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceStartupParams, MiscParams) == 0x000030, "Member 'FRHAPI_InstanceStartupParams::MiscParams' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceStartupParams, CustomData_Optional) == 0x000040, "Member 'FRHAPI_InstanceStartupParams::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceStartupParams, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_InstanceStartupParams::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceInfo
// 0x0248 (0x0250 - 0x0008)
struct FRHAPI_InstanceInfo final : public FRHAPI_Model
{
public:
	class FString                                 AllocationId_Optional;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               HostType;                                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HostPlayerId_Optional;                             // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerId_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x003C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x004C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostDedicatedProcessId_Optional;                   // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostDedicatedProcessId_IsSet;                      // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostDedicatedServerId_Optional;                    // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostDedicatedServerId_IsSet;                       // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceJoinableStatus                 JoinStatus;                                        // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JoinParams                      JoinParams_Optional;                               // 0x0080(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          JoinParams_IsSet;                                  // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InstanceStartupParams           InstanceStartupParams_Optional;                    // 0x0108(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InstanceStartupParams_IsSet;                       // 0x01A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x01A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x01B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x01C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x01C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0218(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceHealthStatus                   InstanceHealth_Optional;                           // 0x0219(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceHealth_IsSet;                              // 0x021A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B[0x5];                                      // 0x021B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0220(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0248(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceInfo) == 0x000008, "Wrong alignment on FRHAPI_InstanceInfo");
static_assert(sizeof(FRHAPI_InstanceInfo) == 0x000250, "Wrong size on FRHAPI_InstanceInfo");
static_assert(offsetof(FRHAPI_InstanceInfo, AllocationId_Optional) == 0x000008, "Member 'FRHAPI_InstanceInfo::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, AllocationId_IsSet) == 0x000018, "Member 'FRHAPI_InstanceInfo::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, InstanceId) == 0x000020, "Member 'FRHAPI_InstanceInfo::InstanceId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostType) == 0x000030, "Member 'FRHAPI_InstanceInfo::HostType' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostPlayerId_Optional) == 0x000034, "Member 'FRHAPI_InstanceInfo::HostPlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostPlayerId_IsSet) == 0x000038, "Member 'FRHAPI_InstanceInfo::HostPlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostPlayerUuid_Optional) == 0x00003C, "Member 'FRHAPI_InstanceInfo::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostPlayerUuid_IsSet) == 0x00004C, "Member 'FRHAPI_InstanceInfo::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostDedicatedProcessId_Optional) == 0x000050, "Member 'FRHAPI_InstanceInfo::HostDedicatedProcessId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostDedicatedProcessId_IsSet) == 0x000060, "Member 'FRHAPI_InstanceInfo::HostDedicatedProcessId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostDedicatedServerId_Optional) == 0x000068, "Member 'FRHAPI_InstanceInfo::HostDedicatedServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, HostDedicatedServerId_IsSet) == 0x000078, "Member 'FRHAPI_InstanceInfo::HostDedicatedServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, JoinStatus) == 0x000079, "Member 'FRHAPI_InstanceInfo::JoinStatus' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, JoinParams_Optional) == 0x000080, "Member 'FRHAPI_InstanceInfo::JoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, JoinParams_IsSet) == 0x000100, "Member 'FRHAPI_InstanceInfo::JoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, InstanceStartupParams_Optional) == 0x000108, "Member 'FRHAPI_InstanceInfo::InstanceStartupParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, InstanceStartupParams_IsSet) == 0x0001A0, "Member 'FRHAPI_InstanceInfo::InstanceStartupParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, Version_Optional) == 0x0001A8, "Member 'FRHAPI_InstanceInfo::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, Version_IsSet) == 0x0001B8, "Member 'FRHAPI_InstanceInfo::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, Created) == 0x0001C0, "Member 'FRHAPI_InstanceInfo::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, CustomData_Optional) == 0x0001C8, "Member 'FRHAPI_InstanceInfo::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, CustomData_IsSet) == 0x000218, "Member 'FRHAPI_InstanceInfo::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, InstanceHealth_Optional) == 0x000219, "Member 'FRHAPI_InstanceInfo::InstanceHealth_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, InstanceHealth_IsSet) == 0x00021A, "Member 'FRHAPI_InstanceInfo::InstanceHealth_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, MatchmakingProfileId_Optional) == 0x000220, "Member 'FRHAPI_InstanceInfo::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, MatchmakingProfileId_IsSet) == 0x000230, "Member 'FRHAPI_InstanceInfo::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, MatchId_Optional) == 0x000238, "Member 'FRHAPI_InstanceInfo::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfo, MatchId_IsSet) == 0x000248, "Member 'FRHAPI_InstanceInfo::MatchId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceInfoUpdate
// 0x0128 (0x0130 - 0x0008)
struct FRHAPI_InstanceInfoUpdate final : public FRHAPI_Model
{
public:
	class FString                                 AllocationId_Optional;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InstanceJoinableStatus                 JoinStatus_Optional;                               // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinStatus_IsSet;                                  // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JoinParams                      JoinParams_Optional;                               // 0x0020(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          JoinParams_IsSet;                                  // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00C0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceInfoUpdate) == 0x000008, "Wrong alignment on FRHAPI_InstanceInfoUpdate");
static_assert(sizeof(FRHAPI_InstanceInfoUpdate) == 0x000130, "Wrong size on FRHAPI_InstanceInfoUpdate");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, AllocationId_Optional) == 0x000008, "Member 'FRHAPI_InstanceInfoUpdate::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, AllocationId_IsSet) == 0x000018, "Member 'FRHAPI_InstanceInfoUpdate::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, JoinStatus_Optional) == 0x000019, "Member 'FRHAPI_InstanceInfoUpdate::JoinStatus_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, JoinStatus_IsSet) == 0x00001A, "Member 'FRHAPI_InstanceInfoUpdate::JoinStatus_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, JoinParams_Optional) == 0x000020, "Member 'FRHAPI_InstanceInfoUpdate::JoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, JoinParams_IsSet) == 0x0000A0, "Member 'FRHAPI_InstanceInfoUpdate::JoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, Version_Optional) == 0x0000A8, "Member 'FRHAPI_InstanceInfoUpdate::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, Version_IsSet) == 0x0000B8, "Member 'FRHAPI_InstanceInfoUpdate::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, CustomData_Optional) == 0x0000C0, "Member 'FRHAPI_InstanceInfoUpdate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, CustomData_IsSet) == 0x000110, "Member 'FRHAPI_InstanceInfoUpdate::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, MatchId_Optional) == 0x000118, "Member 'FRHAPI_InstanceInfoUpdate::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceInfoUpdate, MatchId_IsSet) == 0x000128, "Member 'FRHAPI_InstanceInfoUpdate::MatchId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MapConfig
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_MapConfig final : public FRHAPI_Model
{
public:
	int32                                         MapGameId_Optional;                                // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapGameId_IsSet;                                   // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode_Optional;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mode_IsSet;                                        // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelectionChance_Optional;                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SelectionChance_IsSet;                             // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MapConfig) == 0x000008, "Wrong alignment on FRHAPI_MapConfig");
static_assert(sizeof(FRHAPI_MapConfig) == 0x000098, "Wrong size on FRHAPI_MapConfig");
static_assert(offsetof(FRHAPI_MapConfig, MapGameId_Optional) == 0x000008, "Member 'FRHAPI_MapConfig::MapGameId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, MapGameId_IsSet) == 0x00000C, "Member 'FRHAPI_MapConfig::MapGameId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, MapName) == 0x000010, "Member 'FRHAPI_MapConfig::MapName' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, Mode_Optional) == 0x000020, "Member 'FRHAPI_MapConfig::Mode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, Mode_IsSet) == 0x000030, "Member 'FRHAPI_MapConfig::Mode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, SelectionChance_Optional) == 0x000034, "Member 'FRHAPI_MapConfig::SelectionChance_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, SelectionChance_IsSet) == 0x000038, "Member 'FRHAPI_MapConfig::SelectionChance_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, CustomData_Optional) == 0x000040, "Member 'FRHAPI_MapConfig::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfig, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_MapConfig::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MapSelectionList
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_MapSelectionList final : public FRHAPI_Model
{
public:
	class FString                                 MapSelectionListId;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MapConfig>               Maps;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MapSelectionList) == 0x000008, "Wrong alignment on FRHAPI_MapSelectionList");
static_assert(sizeof(FRHAPI_MapSelectionList) == 0x000028, "Wrong size on FRHAPI_MapSelectionList");
static_assert(offsetof(FRHAPI_MapSelectionList, MapSelectionListId) == 0x000008, "Member 'FRHAPI_MapSelectionList::MapSelectionListId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapSelectionList, Maps) == 0x000018, "Member 'FRHAPI_MapSelectionList::Maps' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceLaunchTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FRHAPI_InstanceLaunchTemplate final : public FRHAPI_Model
{
public:
	struct FGuid                                  InstanceLaunchTemplateId;                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_MapSelectionList                MapSelectionList;                                  // 0x0018(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               DefaultHostType;                                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceLaunchTemplate) == 0x000008, "Wrong alignment on FRHAPI_InstanceLaunchTemplate");
static_assert(sizeof(FRHAPI_InstanceLaunchTemplate) == 0x0000A0, "Wrong size on FRHAPI_InstanceLaunchTemplate");
static_assert(offsetof(FRHAPI_InstanceLaunchTemplate, InstanceLaunchTemplateId) == 0x000008, "Member 'FRHAPI_InstanceLaunchTemplate::InstanceLaunchTemplateId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceLaunchTemplate, MapSelectionList) == 0x000018, "Member 'FRHAPI_InstanceLaunchTemplate::MapSelectionList' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceLaunchTemplate, DefaultHostType) == 0x000040, "Member 'FRHAPI_InstanceLaunchTemplate::DefaultHostType' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceLaunchTemplate, CustomData_Optional) == 0x000048, "Member 'FRHAPI_InstanceLaunchTemplate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceLaunchTemplate, CustomData_IsSet) == 0x000098, "Member 'FRHAPI_InstanceLaunchTemplate::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceRequest
// 0x0138 (0x0140 - 0x0008)
struct FRHAPI_InstanceRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InstanceStartupParams           InstanceStartupParams_Optional;                    // 0x0020(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InstanceStartupParams_IsSet;                       // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               HostType_Optional;                                 // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostType_IsSet;                                    // 0x00BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceRequestTemplateId_Optional;                // 0x00BC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplateId_IsSet;                   // 0x00CC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00E8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceRequest) == 0x000008, "Wrong alignment on FRHAPI_InstanceRequest");
static_assert(sizeof(FRHAPI_InstanceRequest) == 0x000140, "Wrong size on FRHAPI_InstanceRequest");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceId_Optional) == 0x000008, "Member 'FRHAPI_InstanceRequest::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceId_IsSet) == 0x000018, "Member 'FRHAPI_InstanceRequest::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceStartupParams_Optional) == 0x000020, "Member 'FRHAPI_InstanceRequest::InstanceStartupParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceStartupParams_IsSet) == 0x0000B8, "Member 'FRHAPI_InstanceRequest::InstanceStartupParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, HostType_Optional) == 0x0000B9, "Member 'FRHAPI_InstanceRequest::HostType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, HostType_IsSet) == 0x0000BA, "Member 'FRHAPI_InstanceRequest::HostType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceRequestTemplateId_Optional) == 0x0000BC, "Member 'FRHAPI_InstanceRequest::InstanceRequestTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, InstanceRequestTemplateId_IsSet) == 0x0000CC, "Member 'FRHAPI_InstanceRequest::InstanceRequestTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, HostPlayerUuid_Optional) == 0x0000D0, "Member 'FRHAPI_InstanceRequest::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, HostPlayerUuid_IsSet) == 0x0000E0, "Member 'FRHAPI_InstanceRequest::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, CustomData_Optional) == 0x0000E8, "Member 'FRHAPI_InstanceRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequest, CustomData_IsSet) == 0x000138, "Member 'FRHAPI_InstanceRequest::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MapConfigV2
// 0x00D8 (0x00E0 - 0x0008)
struct FRHAPI_MapConfigV2 final : public FRHAPI_Model
{
public:
	class FString                                 MapId;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode_Optional;                                     // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mode_IsSet;                                        // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MapWeight;                                         // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_Optional;                                     // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsSet;                                        // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description_Optional;                              // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsSet;                                 // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MiscParams_Optional;                               // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MiscParams_IsSet;                                  // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MapConfigV2) == 0x000008, "Wrong alignment on FRHAPI_MapConfigV2");
static_assert(sizeof(FRHAPI_MapConfigV2) == 0x0000E0, "Wrong size on FRHAPI_MapConfigV2");
static_assert(offsetof(FRHAPI_MapConfigV2, MapId) == 0x000008, "Member 'FRHAPI_MapConfigV2::MapId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, MapName) == 0x000018, "Member 'FRHAPI_MapConfigV2::MapName' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Mode_Optional) == 0x000028, "Member 'FRHAPI_MapConfigV2::Mode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Mode_IsSet) == 0x000038, "Member 'FRHAPI_MapConfigV2::Mode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, MapWeight) == 0x00003C, "Member 'FRHAPI_MapConfigV2::MapWeight' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, CustomData_Optional) == 0x000040, "Member 'FRHAPI_MapConfigV2::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_MapConfigV2::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Name_Optional) == 0x000098, "Member 'FRHAPI_MapConfigV2::Name_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Name_IsSet) == 0x0000A8, "Member 'FRHAPI_MapConfigV2::Name_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Description_Optional) == 0x0000B0, "Member 'FRHAPI_MapConfigV2::Description_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, Description_IsSet) == 0x0000C0, "Member 'FRHAPI_MapConfigV2::Description_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, MiscParams_Optional) == 0x0000C8, "Member 'FRHAPI_MapConfigV2::MiscParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapConfigV2, MiscParams_IsSet) == 0x0000D8, "Member 'FRHAPI_MapConfigV2::MiscParams_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MapSelectionListV2
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_MapSelectionListV2 final : public FRHAPI_Model
{
public:
	class FString                                 MapSelectionListId;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MapConfigV2>             Maps;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MapSelectionListV2) == 0x000008, "Wrong alignment on FRHAPI_MapSelectionListV2");
static_assert(sizeof(FRHAPI_MapSelectionListV2) == 0x000028, "Wrong size on FRHAPI_MapSelectionListV2");
static_assert(offsetof(FRHAPI_MapSelectionListV2, MapSelectionListId) == 0x000008, "Member 'FRHAPI_MapSelectionListV2::MapSelectionListId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MapSelectionListV2, Maps) == 0x000018, "Member 'FRHAPI_MapSelectionListV2::Maps' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InstanceRequestTemplate
// 0x0098 (0x00A0 - 0x0008)
struct FRHAPI_InstanceRequestTemplate final : public FRHAPI_Model
{
public:
	struct FGuid                                  InstanceRequestTemplateId;                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_MapSelectionListV2              MapSelectionList;                                  // 0x0018(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	ERHAPI_HostType                               DefaultHostType;                                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InstanceRequestTemplate) == 0x000008, "Wrong alignment on FRHAPI_InstanceRequestTemplate");
static_assert(sizeof(FRHAPI_InstanceRequestTemplate) == 0x0000A0, "Wrong size on FRHAPI_InstanceRequestTemplate");
static_assert(offsetof(FRHAPI_InstanceRequestTemplate, InstanceRequestTemplateId) == 0x000008, "Member 'FRHAPI_InstanceRequestTemplate::InstanceRequestTemplateId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequestTemplate, MapSelectionList) == 0x000018, "Member 'FRHAPI_InstanceRequestTemplate::MapSelectionList' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequestTemplate, DefaultHostType) == 0x000040, "Member 'FRHAPI_InstanceRequestTemplate::DefaultHostType' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequestTemplate, CustomData_Optional) == 0x000048, "Member 'FRHAPI_InstanceRequestTemplate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InstanceRequestTemplate, CustomData_IsSet) == 0x000098, "Member 'FRHAPI_InstanceRequestTemplate::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ItemInventory
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_ItemInventory final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_InventoryRecord> Records_Optional;                             // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Records_IsSet;                                     // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ItemInventory) == 0x000008, "Wrong alignment on FRHAPI_ItemInventory");
static_assert(sizeof(FRHAPI_ItemInventory) == 0x000080, "Wrong size on FRHAPI_ItemInventory");
static_assert(offsetof(FRHAPI_ItemInventory, Records_Optional) == 0x000008, "Member 'FRHAPI_ItemInventory::Records_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ItemInventory, Records_IsSet) == 0x000058, "Member 'FRHAPI_ItemInventory::Records_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ItemInventory, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_ItemInventory::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ItemInventory, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_ItemInventory::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ItemInventory, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_ItemInventory::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Inventory
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_Inventory final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_ItemInventory> Items_Optional;                                 // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Items_IsSet;                                       // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_CacheInfo                       CacheInfo_Optional;                                // 0x0060(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CacheInfo_IsNull;                                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Inventory) == 0x000008, "Wrong alignment on FRHAPI_Inventory");
static_assert(sizeof(FRHAPI_Inventory) == 0x000080, "Wrong size on FRHAPI_Inventory");
static_assert(offsetof(FRHAPI_Inventory, Items_Optional) == 0x000008, "Member 'FRHAPI_Inventory::Items_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Inventory, Items_IsSet) == 0x000058, "Member 'FRHAPI_Inventory::Items_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Inventory, CacheInfo_Optional) == 0x000060, "Member 'FRHAPI_Inventory::CacheInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Inventory, CacheInfo_IsSet) == 0x000078, "Member 'FRHAPI_Inventory::CacheInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Inventory, CacheInfo_IsNull) == 0x000079, "Member 'FRHAPI_Inventory::CacheInfo_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryContextResponse
// 0x0088 (0x0090 - 0x0008)
struct FRHAPI_InventoryContextResponse final : public FRHAPI_Model
{
public:
	struct FRHAPI_Inventory                       Inventory_Optional;                                // 0x0008(0x0080)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Inventory_IsSet;                                   // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryContextResponse) == 0x000008, "Wrong alignment on FRHAPI_InventoryContextResponse");
static_assert(sizeof(FRHAPI_InventoryContextResponse) == 0x000090, "Wrong size on FRHAPI_InventoryContextResponse");
static_assert(offsetof(FRHAPI_InventoryContextResponse, Inventory_Optional) == 0x000008, "Member 'FRHAPI_InventoryContextResponse::Inventory_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryContextResponse, Inventory_IsSet) == 0x000088, "Member 'FRHAPI_InventoryContextResponse::Inventory_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryLevel
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_InventoryLevel final : public FRHAPI_Model
{
public:
	struct FGuid                                  ItemUuid;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId_Optional;                                   // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountForNextLevel;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryLevel) == 0x000008, "Wrong alignment on FRHAPI_InventoryLevel");
static_assert(sizeof(FRHAPI_InventoryLevel) == 0x000030, "Wrong size on FRHAPI_InventoryLevel");
static_assert(offsetof(FRHAPI_InventoryLevel, ItemUuid) == 0x000008, "Member 'FRHAPI_InventoryLevel::ItemUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, ItemId_Optional) == 0x000018, "Member 'FRHAPI_InventoryLevel::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, ItemId_IsSet) == 0x00001C, "Member 'FRHAPI_InventoryLevel::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, ItemId_IsNull) == 0x00001D, "Member 'FRHAPI_InventoryLevel::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, Level) == 0x000020, "Member 'FRHAPI_InventoryLevel::Level' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, Count) == 0x000024, "Member 'FRHAPI_InventoryLevel::Count' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevel, CountForNextLevel) == 0x000028, "Member 'FRHAPI_InventoryLevel::CountForNextLevel' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryLevels
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_InventoryLevels final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_InventoryLevel>          Levels_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Levels_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryLevels) == 0x000008, "Wrong alignment on FRHAPI_InventoryLevels");
static_assert(sizeof(FRHAPI_InventoryLevels) == 0x000020, "Wrong size on FRHAPI_InventoryLevels");
static_assert(offsetof(FRHAPI_InventoryLevels, Levels_Optional) == 0x000008, "Member 'FRHAPI_InventoryLevels::Levels_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryLevels, Levels_IsSet) == 0x000018, "Member 'FRHAPI_InventoryLevels::Levels_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventoryPageMeta
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_InventoryPageMeta final : public FRHAPI_Model
{
public:
	struct FDateTime                              StartingPosition_Optional;                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingPosition_IsSet;                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingPosition_IsNull;                           // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SortOrder                              Sort_Optional;                                     // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sort_IsSet;                                        // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sort_IsNull;                                       // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Limit_Optional;                                    // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Limit_IsSet;                                       // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventoryPageMeta) == 0x000008, "Wrong alignment on FRHAPI_InventoryPageMeta");
static_assert(sizeof(FRHAPI_InventoryPageMeta) == 0x000038, "Wrong size on FRHAPI_InventoryPageMeta");
static_assert(offsetof(FRHAPI_InventoryPageMeta, StartingPosition_Optional) == 0x000008, "Member 'FRHAPI_InventoryPageMeta::StartingPosition_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, StartingPosition_IsSet) == 0x000010, "Member 'FRHAPI_InventoryPageMeta::StartingPosition_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, StartingPosition_IsNull) == 0x000011, "Member 'FRHAPI_InventoryPageMeta::StartingPosition_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Cursor_Optional) == 0x000018, "Member 'FRHAPI_InventoryPageMeta::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Cursor_IsSet) == 0x000028, "Member 'FRHAPI_InventoryPageMeta::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Cursor_IsNull) == 0x000029, "Member 'FRHAPI_InventoryPageMeta::Cursor_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Sort_Optional) == 0x00002A, "Member 'FRHAPI_InventoryPageMeta::Sort_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Sort_IsSet) == 0x00002B, "Member 'FRHAPI_InventoryPageMeta::Sort_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Sort_IsNull) == 0x00002C, "Member 'FRHAPI_InventoryPageMeta::Sort_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Limit_Optional) == 0x000030, "Member 'FRHAPI_InventoryPageMeta::Limit_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventoryPageMeta, Limit_IsSet) == 0x000034, "Member 'FRHAPI_InventoryPageMeta::Limit_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventorySession
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_InventorySession final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      SessionPlatform_Optional;                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsSet;                             // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsNull;                            // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AppliedDurableLoot_Optional;                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          AppliedDurableLoot_IsSet;                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventorySession) == 0x000008, "Wrong alignment on FRHAPI_InventorySession");
static_assert(sizeof(FRHAPI_InventorySession) == 0x000038, "Wrong size on FRHAPI_InventorySession");
static_assert(offsetof(FRHAPI_InventorySession, SessionId) == 0x000008, "Member 'FRHAPI_InventorySession::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySession, SessionPlatform_Optional) == 0x000018, "Member 'FRHAPI_InventorySession::SessionPlatform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySession, SessionPlatform_IsSet) == 0x000019, "Member 'FRHAPI_InventorySession::SessionPlatform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySession, SessionPlatform_IsNull) == 0x00001A, "Member 'FRHAPI_InventorySession::SessionPlatform_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySession, AppliedDurableLoot_Optional) == 0x000020, "Member 'FRHAPI_InventorySession::AppliedDurableLoot_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySession, AppliedDurableLoot_IsSet) == 0x000030, "Member 'FRHAPI_InventorySession::AppliedDurableLoot_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventorySessionCreateRequest
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_InventorySessionCreateRequest final : public FRHAPI_Model
{
public:
	ERHAPI_InventoryPlatform                      SessionPlatform_Optional;                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsSet;                             // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsNull;                            // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventorySessionCreateRequest) == 0x000008, "Wrong alignment on FRHAPI_InventorySessionCreateRequest");
static_assert(sizeof(FRHAPI_InventorySessionCreateRequest) == 0x000010, "Wrong size on FRHAPI_InventorySessionCreateRequest");
static_assert(offsetof(FRHAPI_InventorySessionCreateRequest, SessionPlatform_Optional) == 0x000008, "Member 'FRHAPI_InventorySessionCreateRequest::SessionPlatform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateRequest, SessionPlatform_IsSet) == 0x000009, "Member 'FRHAPI_InventorySessionCreateRequest::SessionPlatform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateRequest, SessionPlatform_IsNull) == 0x00000A, "Member 'FRHAPI_InventorySessionCreateRequest::SessionPlatform_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankConfigV3
// 0x00C0 (0x00C8 - 0x0008)
struct FRHAPI_RankConfigV3 final : public FRHAPI_Model
{
public:
	class FString                                 Name_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Name_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description_Optional;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsSet;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMu;                                             // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMu;                                             // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSigma;                                          // 0x0094(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Beta_Optional;                                     // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Beta_IsSet;                                        // 0x009C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMu;                                         // 0x00A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSigma;                                      // 0x00A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawProbability_Optional;                          // 0x00A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawProbability_IsSet;                             // 0x00AC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Tau_Optional;                                      // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tau_IsSet;                                         // 0x00B4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankId;                                            // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RankConfigV3) == 0x000008, "Wrong alignment on FRHAPI_RankConfigV3");
static_assert(sizeof(FRHAPI_RankConfigV3) == 0x0000C8, "Wrong size on FRHAPI_RankConfigV3");
static_assert(offsetof(FRHAPI_RankConfigV3, Name_Optional) == 0x000008, "Member 'FRHAPI_RankConfigV3::Name_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Name_IsSet) == 0x000018, "Member 'FRHAPI_RankConfigV3::Name_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Description_Optional) == 0x000020, "Member 'FRHAPI_RankConfigV3::Description_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Description_IsSet) == 0x000030, "Member 'FRHAPI_RankConfigV3::Description_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, CustomData_Optional) == 0x000038, "Member 'FRHAPI_RankConfigV3::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, CustomData_IsSet) == 0x000088, "Member 'FRHAPI_RankConfigV3::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, MaxMu) == 0x00008C, "Member 'FRHAPI_RankConfigV3::MaxMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, MinMu) == 0x000090, "Member 'FRHAPI_RankConfigV3::MinMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, MinSigma) == 0x000094, "Member 'FRHAPI_RankConfigV3::MinSigma' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Beta_Optional) == 0x000098, "Member 'FRHAPI_RankConfigV3::Beta_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Beta_IsSet) == 0x00009C, "Member 'FRHAPI_RankConfigV3::Beta_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, DefaultMu) == 0x0000A0, "Member 'FRHAPI_RankConfigV3::DefaultMu' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, DefaultSigma) == 0x0000A4, "Member 'FRHAPI_RankConfigV3::DefaultSigma' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, DrawProbability_Optional) == 0x0000A8, "Member 'FRHAPI_RankConfigV3::DrawProbability_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, DrawProbability_IsSet) == 0x0000AC, "Member 'FRHAPI_RankConfigV3::DrawProbability_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Tau_Optional) == 0x0000B0, "Member 'FRHAPI_RankConfigV3::Tau_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, Tau_IsSet) == 0x0000B4, "Member 'FRHAPI_RankConfigV3::Tau_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankConfigV3, RankId) == 0x0000B8, "Member 'FRHAPI_RankConfigV3::RankId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_InventorySessionCreateResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_InventorySessionCreateResponse final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      SessionPlatform_Optional;                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsSet;                             // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionPlatform_IsNull;                            // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsNull;                                    // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_InventorySessionCreateResponse) == 0x000008, "Wrong alignment on FRHAPI_InventorySessionCreateResponse");
static_assert(sizeof(FRHAPI_InventorySessionCreateResponse) == 0x000038, "Wrong size on FRHAPI_InventorySessionCreateResponse");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, SessionId) == 0x000008, "Member 'FRHAPI_InventorySessionCreateResponse::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, SessionPlatform_Optional) == 0x000018, "Member 'FRHAPI_InventorySessionCreateResponse::SessionPlatform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, SessionPlatform_IsSet) == 0x000019, "Member 'FRHAPI_InventorySessionCreateResponse::SessionPlatform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, SessionPlatform_IsNull) == 0x00001A, "Member 'FRHAPI_InventorySessionCreateResponse::SessionPlatform_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, OrderId_Optional) == 0x000020, "Member 'FRHAPI_InventorySessionCreateResponse::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, OrderId_IsSet) == 0x000030, "Member 'FRHAPI_InventorySessionCreateResponse::OrderId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_InventorySessionCreateResponse, OrderId_IsNull) == 0x000031, "Member 'FRHAPI_InventorySessionCreateResponse::OrderId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KeyClaim
// 0x00A0 (0x00A8 - 0x0008)
struct FRHAPI_KeyClaim final : public FRHAPI_Model
{
public:
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsNull;                               // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  KeyClaimUuid;                                      // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Claimed_Optional;                                  // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Claimed_IsSet;                                     // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Claimed_IsNull;                                    // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalKey_Optional;                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKey_IsSet;                                 // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKey_IsNull;                                // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ExternalKeyCampaignUuid_Optional;                  // 0x004C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyCampaignUuid_IsSet;                     // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyCampaignUuid_IsNull;                    // 0x005D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalKeyType_Optional;                          // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyType_IsSet;                             // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalKeyType_IsNull;                            // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CreatedOn_Optional;                                // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedOn_IsSet;                                   // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedOn_IsNull;                                  // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastModifiedOn_Optional;                           // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedOn_IsSet;                              // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedOn_IsNull;                             // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_KeyClaim) == 0x000008, "Wrong alignment on FRHAPI_KeyClaim");
static_assert(sizeof(FRHAPI_KeyClaim) == 0x0000A8, "Wrong size on FRHAPI_KeyClaim");
static_assert(offsetof(FRHAPI_KeyClaim, PortalId_Optional) == 0x000008, "Member 'FRHAPI_KeyClaim::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, PortalId_IsSet) == 0x000009, "Member 'FRHAPI_KeyClaim::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, PortalId_IsNull) == 0x00000A, "Member 'FRHAPI_KeyClaim::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, PortalUserId_Optional) == 0x000010, "Member 'FRHAPI_KeyClaim::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, PortalUserId_IsSet) == 0x000020, "Member 'FRHAPI_KeyClaim::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, PortalUserId_IsNull) == 0x000021, "Member 'FRHAPI_KeyClaim::PortalUserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, KeyClaimUuid) == 0x000024, "Member 'FRHAPI_KeyClaim::KeyClaimUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, Claimed_Optional) == 0x000034, "Member 'FRHAPI_KeyClaim::Claimed_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, Claimed_IsSet) == 0x000035, "Member 'FRHAPI_KeyClaim::Claimed_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, Claimed_IsNull) == 0x000036, "Member 'FRHAPI_KeyClaim::Claimed_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKey_Optional) == 0x000038, "Member 'FRHAPI_KeyClaim::ExternalKey_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKey_IsSet) == 0x000048, "Member 'FRHAPI_KeyClaim::ExternalKey_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKey_IsNull) == 0x000049, "Member 'FRHAPI_KeyClaim::ExternalKey_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyCampaignUuid_Optional) == 0x00004C, "Member 'FRHAPI_KeyClaim::ExternalKeyCampaignUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyCampaignUuid_IsSet) == 0x00005C, "Member 'FRHAPI_KeyClaim::ExternalKeyCampaignUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyCampaignUuid_IsNull) == 0x00005D, "Member 'FRHAPI_KeyClaim::ExternalKeyCampaignUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyType_Optional) == 0x000060, "Member 'FRHAPI_KeyClaim::ExternalKeyType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyType_IsSet) == 0x000070, "Member 'FRHAPI_KeyClaim::ExternalKeyType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, ExternalKeyType_IsNull) == 0x000071, "Member 'FRHAPI_KeyClaim::ExternalKeyType_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, CreatedOn_Optional) == 0x000078, "Member 'FRHAPI_KeyClaim::CreatedOn_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, CreatedOn_IsSet) == 0x000088, "Member 'FRHAPI_KeyClaim::CreatedOn_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, CreatedOn_IsNull) == 0x000089, "Member 'FRHAPI_KeyClaim::CreatedOn_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, LastModifiedOn_Optional) == 0x000090, "Member 'FRHAPI_KeyClaim::LastModifiedOn_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, LastModifiedOn_IsSet) == 0x0000A0, "Member 'FRHAPI_KeyClaim::LastModifiedOn_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KeyClaim, LastModifiedOn_IsNull) == 0x0000A1, "Member 'FRHAPI_KeyClaim::LastModifiedOn_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KeyClaims
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_KeyClaims final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_KeyClaim>                Claims;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_KeyClaims) == 0x000008, "Wrong alignment on FRHAPI_KeyClaims");
static_assert(sizeof(FRHAPI_KeyClaims) == 0x000018, "Wrong size on FRHAPI_KeyClaims");
static_assert(offsetof(FRHAPI_KeyClaims, Claims) == 0x000008, "Member 'FRHAPI_KeyClaims::Claims' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KeyType
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_KeyType final : public FRHAPI_Model
{
public:
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_KeyType) == 0x000008, "Wrong alignment on FRHAPI_KeyType");
static_assert(sizeof(FRHAPI_KeyType) == 0x000018, "Wrong size on FRHAPI_KeyType");
static_assert(offsetof(FRHAPI_KeyType, Type) == 0x000008, "Member 'FRHAPI_KeyType::Type' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KVV1
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_KVV1 final : public FRHAPI_Model
{
public:
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Notes_Optional;                                    // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Notes_IsSet;                                       // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Notes_IsNull;                                      // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_KVV1) == 0x000008, "Wrong alignment on FRHAPI_KVV1");
static_assert(sizeof(FRHAPI_KVV1) == 0x000040, "Wrong size on FRHAPI_KVV1");
static_assert(offsetof(FRHAPI_KVV1, Key) == 0x000008, "Member 'FRHAPI_KVV1::Key' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVV1, Value) == 0x000018, "Member 'FRHAPI_KVV1::Value' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVV1, Notes_Optional) == 0x000028, "Member 'FRHAPI_KVV1::Notes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVV1, Notes_IsSet) == 0x000038, "Member 'FRHAPI_KVV1::Notes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVV1, Notes_IsNull) == 0x000039, "Member 'FRHAPI_KVV1::Notes_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KVsResponseV1
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_KVsResponseV1 final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_KVV1>                    Kvs_Optional;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Kvs_IsSet;                                         // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_KVV1>                    SecretKvs_Optional;                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          SecretKvs_IsSet;                                   // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_KVsResponseV1) == 0x000008, "Wrong alignment on FRHAPI_KVsResponseV1");
static_assert(sizeof(FRHAPI_KVsResponseV1) == 0x000038, "Wrong size on FRHAPI_KVsResponseV1");
static_assert(offsetof(FRHAPI_KVsResponseV1, Kvs_Optional) == 0x000008, "Member 'FRHAPI_KVsResponseV1::Kvs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV1, Kvs_IsSet) == 0x000018, "Member 'FRHAPI_KVsResponseV1::Kvs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV1, SecretKvs_Optional) == 0x000020, "Member 'FRHAPI_KVsResponseV1::SecretKvs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV1, SecretKvs_IsSet) == 0x000030, "Member 'FRHAPI_KVsResponseV1::SecretKvs_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_AuthContext
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FRHAPI_AuthContext final
{
public:
	int32                                         Dummy;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x14];                                       // 0x0004(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_AuthContext) == 0x000008, "Wrong alignment on FRHAPI_AuthContext");
static_assert(sizeof(FRHAPI_AuthContext) == 0x000018, "Wrong size on FRHAPI_AuthContext");
static_assert(offsetof(FRHAPI_AuthContext, Dummy) == 0x000000, "Member 'FRHAPI_AuthContext::Dummy' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_KVsResponseV2
// 0x00C0 (0x00C8 - 0x0008)
struct FRHAPI_KVsResponseV2 final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            Kvs_Optional;                                      // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Kvs_IsSet;                                         // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            SecretKvs_Optional;                                // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          SecretKvs_IsSet;                                   // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              KickBeforeHint_Optional;                           // 0x00B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KickBeforeHint_IsSet;                              // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KickBeforeHint_IsNull;                             // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_KVsResponseV2) == 0x000008, "Wrong alignment on FRHAPI_KVsResponseV2");
static_assert(sizeof(FRHAPI_KVsResponseV2) == 0x0000C8, "Wrong size on FRHAPI_KVsResponseV2");
static_assert(offsetof(FRHAPI_KVsResponseV2, Kvs_Optional) == 0x000008, "Member 'FRHAPI_KVsResponseV2::Kvs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, Kvs_IsSet) == 0x000058, "Member 'FRHAPI_KVsResponseV2::Kvs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, SecretKvs_Optional) == 0x000060, "Member 'FRHAPI_KVsResponseV2::SecretKvs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, SecretKvs_IsSet) == 0x0000B0, "Member 'FRHAPI_KVsResponseV2::SecretKvs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, KickBeforeHint_Optional) == 0x0000B8, "Member 'FRHAPI_KVsResponseV2::KickBeforeHint_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, KickBeforeHint_IsSet) == 0x0000C0, "Member 'FRHAPI_KVsResponseV2::KickBeforeHint_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_KVsResponseV2, KickBeforeHint_IsNull) == 0x0000C1, "Member 'FRHAPI_KVsResponseV2::KickBeforeHint_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginCompleteMessage
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_LoginCompleteMessage final : public FRHAPI_Model
{
public:
	bool                                          AuthSuccess_Optional;                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AuthSuccess_IsSet;                                 // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Desc;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsEula_Optional;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsEula_IsSet;                                   // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsTos_Optional;                                 // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsTos_IsSet;                                    // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsPrivacyPolicy_Optional;                       // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsPrivacyPolicy_IsSet;                          // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_Restriction>             Restrictions_Optional;                             // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Restrictions_IsSet;                                // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LoginCompleteMessage) == 0x000008, "Wrong alignment on FRHAPI_LoginCompleteMessage");
static_assert(sizeof(FRHAPI_LoginCompleteMessage) == 0x000050, "Wrong size on FRHAPI_LoginCompleteMessage");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, AuthSuccess_Optional) == 0x000008, "Member 'FRHAPI_LoginCompleteMessage::AuthSuccess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, AuthSuccess_IsSet) == 0x000009, "Member 'FRHAPI_LoginCompleteMessage::AuthSuccess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, ErrorCode) == 0x000010, "Member 'FRHAPI_LoginCompleteMessage::ErrorCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, Desc) == 0x000020, "Member 'FRHAPI_LoginCompleteMessage::Desc' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsEula_Optional) == 0x000030, "Member 'FRHAPI_LoginCompleteMessage::NeedsEula_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsEula_IsSet) == 0x000031, "Member 'FRHAPI_LoginCompleteMessage::NeedsEula_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsTos_Optional) == 0x000032, "Member 'FRHAPI_LoginCompleteMessage::NeedsTos_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsTos_IsSet) == 0x000033, "Member 'FRHAPI_LoginCompleteMessage::NeedsTos_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsPrivacyPolicy_Optional) == 0x000034, "Member 'FRHAPI_LoginCompleteMessage::NeedsPrivacyPolicy_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, NeedsPrivacyPolicy_IsSet) == 0x000035, "Member 'FRHAPI_LoginCompleteMessage::NeedsPrivacyPolicy_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, Restrictions_Optional) == 0x000038, "Member 'FRHAPI_LoginCompleteMessage::Restrictions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginCompleteMessage, Restrictions_IsSet) == 0x000048, "Member 'FRHAPI_LoginCompleteMessage::Restrictions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RestrictionEvent
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_RestrictionEvent final : public FRHAPI_Model
{
public:
	ERHAPI_RestrictionType                        Type_Optional;                                     // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RestrictionReasonCode                  Reason_Optional;                                   // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reason_IsSet;                                      // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expiration_Optional;                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expiration_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RestrictionIssuerType                  IssuerType;                                        // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Issuer;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReasonDetail_Optional;                             // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReasonDetail_IsSet;                                // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RestrictionEventId;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PersonId;                                          // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RestrictionEvent) == 0x000008, "Wrong alignment on FRHAPI_RestrictionEvent");
static_assert(sizeof(FRHAPI_RestrictionEvent) == 0x000070, "Wrong size on FRHAPI_RestrictionEvent");
static_assert(offsetof(FRHAPI_RestrictionEvent, Type_Optional) == 0x000008, "Member 'FRHAPI_RestrictionEvent::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Type_IsSet) == 0x000009, "Member 'FRHAPI_RestrictionEvent::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Reason_Optional) == 0x00000A, "Member 'FRHAPI_RestrictionEvent::Reason_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Reason_IsSet) == 0x00000B, "Member 'FRHAPI_RestrictionEvent::Reason_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Expiration_Optional) == 0x000010, "Member 'FRHAPI_RestrictionEvent::Expiration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Expiration_IsSet) == 0x000018, "Member 'FRHAPI_RestrictionEvent::Expiration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, IssuerType) == 0x000019, "Member 'FRHAPI_RestrictionEvent::IssuerType' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Issuer) == 0x000020, "Member 'FRHAPI_RestrictionEvent::Issuer' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, ReasonDetail_Optional) == 0x000030, "Member 'FRHAPI_RestrictionEvent::ReasonDetail_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, ReasonDetail_IsSet) == 0x000040, "Member 'FRHAPI_RestrictionEvent::ReasonDetail_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, RestrictionEventId) == 0x000048, "Member 'FRHAPI_RestrictionEvent::RestrictionEventId' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, PersonId) == 0x000058, "Member 'FRHAPI_RestrictionEvent::PersonId' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionEvent, Created) == 0x000068, "Member 'FRHAPI_RestrictionEvent::Created' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RestrictionHistory
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_RestrictionHistory final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_RestrictionEvent>        Entries;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken_Optional;                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinuationToken_IsSet;                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RestrictionHistory) == 0x000008, "Wrong alignment on FRHAPI_RestrictionHistory");
static_assert(sizeof(FRHAPI_RestrictionHistory) == 0x000030, "Wrong size on FRHAPI_RestrictionHistory");
static_assert(offsetof(FRHAPI_RestrictionHistory, Entries) == 0x000008, "Member 'FRHAPI_RestrictionHistory::Entries' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionHistory, ContinuationToken_Optional) == 0x000018, "Member 'FRHAPI_RestrictionHistory::ContinuationToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RestrictionHistory, ContinuationToken_IsSet) == 0x000028, "Member 'FRHAPI_RestrictionHistory::ContinuationToken_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginHistoryEntry
// 0x0098 (0x00A0 - 0x0008)
struct FRHAPI_LoginHistoryEntry final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PersonId_Optional;                                 // 0x0034(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0044(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserAgent_Optional;                                // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UserAgent_IsSet;                                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Ip_Optional;                                       // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ip_IsSet;                                          // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientId_Optional;                                 // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientId_IsSet;                                    // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp_Optional;                                // 0x0090(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Timestamp_IsSet;                                   // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LoginHistoryEntry) == 0x000008, "Wrong alignment on FRHAPI_LoginHistoryEntry");
static_assert(sizeof(FRHAPI_LoginHistoryEntry) == 0x0000A0, "Wrong size on FRHAPI_LoginHistoryEntry");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PlayerUuid_Optional) == 0x000008, "Member 'FRHAPI_LoginHistoryEntry::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PlayerUuid_IsSet) == 0x000018, "Member 'FRHAPI_LoginHistoryEntry::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Platform_Optional) == 0x000019, "Member 'FRHAPI_LoginHistoryEntry::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Platform_IsSet) == 0x00001A, "Member 'FRHAPI_LoginHistoryEntry::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PlatformUserId_Optional) == 0x000020, "Member 'FRHAPI_LoginHistoryEntry::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PlatformUserId_IsSet) == 0x000030, "Member 'FRHAPI_LoginHistoryEntry::PlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PersonId_Optional) == 0x000034, "Member 'FRHAPI_LoginHistoryEntry::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, PersonId_IsSet) == 0x000044, "Member 'FRHAPI_LoginHistoryEntry::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, UserAgent_Optional) == 0x000048, "Member 'FRHAPI_LoginHistoryEntry::UserAgent_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, UserAgent_IsSet) == 0x000058, "Member 'FRHAPI_LoginHistoryEntry::UserAgent_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Ip_Optional) == 0x000060, "Member 'FRHAPI_LoginHistoryEntry::Ip_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Ip_IsSet) == 0x000070, "Member 'FRHAPI_LoginHistoryEntry::Ip_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, ClientId_Optional) == 0x000078, "Member 'FRHAPI_LoginHistoryEntry::ClientId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, ClientId_IsSet) == 0x000088, "Member 'FRHAPI_LoginHistoryEntry::ClientId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Timestamp_Optional) == 0x000090, "Member 'FRHAPI_LoginHistoryEntry::Timestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryEntry, Timestamp_IsSet) == 0x000098, "Member 'FRHAPI_LoginHistoryEntry::Timestamp_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginHistoryPage
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_LoginHistoryPage final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_LoginHistoryEntry>       Entries;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken_Optional;                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinuationToken_IsSet;                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LoginHistoryPage) == 0x000008, "Wrong alignment on FRHAPI_LoginHistoryPage");
static_assert(sizeof(FRHAPI_LoginHistoryPage) == 0x000030, "Wrong size on FRHAPI_LoginHistoryPage");
static_assert(offsetof(FRHAPI_LoginHistoryPage, Entries) == 0x000008, "Member 'FRHAPI_LoginHistoryPage::Entries' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryPage, ContinuationToken_Optional) == 0x000018, "Member 'FRHAPI_LoginHistoryPage::ContinuationToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginHistoryPage, ContinuationToken_IsSet) == 0x000028, "Member 'FRHAPI_LoginHistoryPage::ContinuationToken_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankUpdateRequestV2
// 0x0040 (0x0048 - 0x0008)
struct FRHAPI_RankUpdateRequestV2 final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankId;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchLengthSeconds;                                // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_RankedTeam>              Teams;                                             // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RankUpdateRequestV2) == 0x000008, "Wrong alignment on FRHAPI_RankUpdateRequestV2");
static_assert(sizeof(FRHAPI_RankUpdateRequestV2) == 0x000048, "Wrong size on FRHAPI_RankUpdateRequestV2");
static_assert(offsetof(FRHAPI_RankUpdateRequestV2, InstanceId_Optional) == 0x000008, "Member 'FRHAPI_RankUpdateRequestV2::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequestV2, InstanceId_IsSet) == 0x000018, "Member 'FRHAPI_RankUpdateRequestV2::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequestV2, RankId) == 0x000020, "Member 'FRHAPI_RankUpdateRequestV2::RankId' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequestV2, MatchLengthSeconds) == 0x000030, "Member 'FRHAPI_RankUpdateRequestV2::MatchLengthSeconds' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankUpdateRequestV2, Teams) == 0x000038, "Member 'FRHAPI_RankUpdateRequestV2::Teams' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginLootReward
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_LoginLootReward final : public FRHAPI_Model
{
public:
	class FString                                 LootId_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyLootId;                                      // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_LoginLootReward) == 0x000008, "Wrong alignment on FRHAPI_LoginLootReward");
static_assert(sizeof(FRHAPI_LoginLootReward) == 0x000020, "Wrong size on FRHAPI_LoginLootReward");
static_assert(offsetof(FRHAPI_LoginLootReward, LootId_Optional) == 0x000008, "Member 'FRHAPI_LoginLootReward::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginLootReward, LootId_IsSet) == 0x000018, "Member 'FRHAPI_LoginLootReward::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginLootReward, LegacyLootId) == 0x00001C, "Member 'FRHAPI_LoginLootReward::LegacyLootId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginRequestV1
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_LoginRequestV1 final : public FRHAPI_Model
{
public:
	ERHAPI_GrantType                              GrantType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalAccessToken_Optional;                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalAccessToken_IsSet;                           // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalDisplayName_Optional;                        // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalDisplayName_IsSet;                           // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalParentAccessToken_Optional;                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalParentAccessToken_IsSet;                     // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalParentDisplayName_Optional;                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalParentDisplayName_IsSet;                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeRefresh_Optional;                           // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeRefresh_IsSet;                              // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptEula_Optional;                               // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptEula_IsSet;                                  // 0x006C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptTos_Optional;                                // 0x006D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptTos_IsSet;                                   // 0x006E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptPrivacyPolicy_Optional;                      // 0x006F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptPrivacyPolicy_IsSet;                         // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LoginRequestV1) == 0x000008, "Wrong alignment on FRHAPI_LoginRequestV1");
static_assert(sizeof(FRHAPI_LoginRequestV1) == 0x000078, "Wrong size on FRHAPI_LoginRequestV1");
static_assert(offsetof(FRHAPI_LoginRequestV1, GrantType) == 0x000008, "Member 'FRHAPI_LoginRequestV1::GrantType' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalAccessToken_Optional) == 0x000010, "Member 'FRHAPI_LoginRequestV1::PortalAccessToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalAccessToken_IsSet) == 0x000020, "Member 'FRHAPI_LoginRequestV1::PortalAccessToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalDisplayName_Optional) == 0x000028, "Member 'FRHAPI_LoginRequestV1::PortalDisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalDisplayName_IsSet) == 0x000038, "Member 'FRHAPI_LoginRequestV1::PortalDisplayName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalParentAccessToken_Optional) == 0x000040, "Member 'FRHAPI_LoginRequestV1::PortalParentAccessToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalParentAccessToken_IsSet) == 0x000050, "Member 'FRHAPI_LoginRequestV1::PortalParentAccessToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalParentDisplayName_Optional) == 0x000058, "Member 'FRHAPI_LoginRequestV1::PortalParentDisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, PortalParentDisplayName_IsSet) == 0x000068, "Member 'FRHAPI_LoginRequestV1::PortalParentDisplayName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, IncludeRefresh_Optional) == 0x000069, "Member 'FRHAPI_LoginRequestV1::IncludeRefresh_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, IncludeRefresh_IsSet) == 0x00006A, "Member 'FRHAPI_LoginRequestV1::IncludeRefresh_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptEula_Optional) == 0x00006B, "Member 'FRHAPI_LoginRequestV1::AcceptEula_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptEula_IsSet) == 0x00006C, "Member 'FRHAPI_LoginRequestV1::AcceptEula_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptTos_Optional) == 0x00006D, "Member 'FRHAPI_LoginRequestV1::AcceptTos_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptTos_IsSet) == 0x00006E, "Member 'FRHAPI_LoginRequestV1::AcceptTos_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptPrivacyPolicy_Optional) == 0x00006F, "Member 'FRHAPI_LoginRequestV1::AcceptPrivacyPolicy_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginRequestV1, AcceptPrivacyPolicy_IsSet) == 0x000070, "Member 'FRHAPI_LoginRequestV1::AcceptPrivacyPolicy_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueuesResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_QueuesResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_QueueConfig>             Queues;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_QueuesResponse) == 0x000008, "Wrong alignment on FRHAPI_QueuesResponse");
static_assert(sizeof(FRHAPI_QueuesResponse) == 0x000018, "Wrong size on FRHAPI_QueuesResponse");
static_assert(offsetof(FRHAPI_QueuesResponse, Queues) == 0x000008, "Member 'FRHAPI_QueuesResponse::Queues' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PortalUserInfo
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PortalUserInfo final : public FRHAPI_Model
{
public:
	ERHAPI_Platform                               Platform;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_DependenciesSchemasPortal              PortalId;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_DeviceType                             DeviceType_Optional;                               // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceType_IsSet;                                  // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PortalUserInfo) == 0x000008, "Wrong alignment on FRHAPI_PortalUserInfo");
static_assert(sizeof(FRHAPI_PortalUserInfo) == 0x000038, "Wrong size on FRHAPI_PortalUserInfo");
static_assert(offsetof(FRHAPI_PortalUserInfo, Platform) == 0x000008, "Member 'FRHAPI_PortalUserInfo::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserInfo, PortalId) == 0x000009, "Member 'FRHAPI_PortalUserInfo::PortalId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserInfo, PortalUserId) == 0x000010, "Member 'FRHAPI_PortalUserInfo::PortalUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserInfo, DisplayName) == 0x000020, "Member 'FRHAPI_PortalUserInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserInfo, DeviceType_Optional) == 0x000030, "Member 'FRHAPI_PortalUserInfo::DeviceType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserInfo, DeviceType_IsSet) == 0x000031, "Member 'FRHAPI_PortalUserInfo::DeviceType_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LoginResult
// 0x0170 (0x0178 - 0x0008)
struct FRHAPI_LoginResult final : public FRHAPI_Model
{
public:
	struct FRHAPI_PortalUserInfo                  PortalParentAuthResult_Optional;                   // 0x0008(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PortalParentAuthResult_IsSet;                      // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Permissions_Optional;                              // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Permissions_IsSet;                                 // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_Restriction>             Restrictions_Optional;                             // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Restrictions_IsSet;                                // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivePlayerId_Optional;                           // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerId_IsSet;                              // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivePlayerUuid_Optional;                         // 0x007C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerUuid_IsSet;                            // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x008E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PortalId_Optional;                                 // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x0094(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName_Optional;                              // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayName_IsSet;                                 // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoleId_Optional;                                   // 0x00C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoleId_IsSet;                                      // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PersonId_Optional;                                 // 0x00CC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x00DC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AccessToken_Optional;                              // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AccessToken_IsSet;                                 // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken_Optional;                             // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshToken_IsSet;                                // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PublisherUuid;                                     // 0x010C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  TenantUuid;                                        // 0x011C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ConfigElectorUuid;                                 // 0x012C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ClientUuid;                                        // 0x013C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ClientId;                                          // 0x0150(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenType;                                         // 0x0160(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpiresIn_Optional;                                // 0x0170(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpiresIn_IsSet;                                   // 0x0174(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LoginResult) == 0x000008, "Wrong alignment on FRHAPI_LoginResult");
static_assert(sizeof(FRHAPI_LoginResult) == 0x000178, "Wrong size on FRHAPI_LoginResult");
static_assert(offsetof(FRHAPI_LoginResult, PortalParentAuthResult_Optional) == 0x000008, "Member 'FRHAPI_LoginResult::PortalParentAuthResult_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PortalParentAuthResult_IsSet) == 0x000040, "Member 'FRHAPI_LoginResult::PortalParentAuthResult_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Permissions_Optional) == 0x000048, "Member 'FRHAPI_LoginResult::Permissions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Permissions_IsSet) == 0x000058, "Member 'FRHAPI_LoginResult::Permissions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Restrictions_Optional) == 0x000060, "Member 'FRHAPI_LoginResult::Restrictions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Restrictions_IsSet) == 0x000070, "Member 'FRHAPI_LoginResult::Restrictions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ActivePlayerId_Optional) == 0x000074, "Member 'FRHAPI_LoginResult::ActivePlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ActivePlayerId_IsSet) == 0x000078, "Member 'FRHAPI_LoginResult::ActivePlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ActivePlayerUuid_Optional) == 0x00007C, "Member 'FRHAPI_LoginResult::ActivePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ActivePlayerUuid_IsSet) == 0x00008C, "Member 'FRHAPI_LoginResult::ActivePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Platform_Optional) == 0x00008D, "Member 'FRHAPI_LoginResult::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, Platform_IsSet) == 0x00008E, "Member 'FRHAPI_LoginResult::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PortalId_Optional) == 0x000090, "Member 'FRHAPI_LoginResult::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PortalId_IsSet) == 0x000094, "Member 'FRHAPI_LoginResult::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PortalUserId_Optional) == 0x000098, "Member 'FRHAPI_LoginResult::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PortalUserId_IsSet) == 0x0000A8, "Member 'FRHAPI_LoginResult::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, DisplayName_Optional) == 0x0000B0, "Member 'FRHAPI_LoginResult::DisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, DisplayName_IsSet) == 0x0000C0, "Member 'FRHAPI_LoginResult::DisplayName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, RoleId_Optional) == 0x0000C4, "Member 'FRHAPI_LoginResult::RoleId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, RoleId_IsSet) == 0x0000C8, "Member 'FRHAPI_LoginResult::RoleId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PersonId_Optional) == 0x0000CC, "Member 'FRHAPI_LoginResult::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PersonId_IsSet) == 0x0000DC, "Member 'FRHAPI_LoginResult::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, AccessToken_Optional) == 0x0000E0, "Member 'FRHAPI_LoginResult::AccessToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, AccessToken_IsSet) == 0x0000F0, "Member 'FRHAPI_LoginResult::AccessToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, RefreshToken_Optional) == 0x0000F8, "Member 'FRHAPI_LoginResult::RefreshToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, RefreshToken_IsSet) == 0x000108, "Member 'FRHAPI_LoginResult::RefreshToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, PublisherUuid) == 0x00010C, "Member 'FRHAPI_LoginResult::PublisherUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, TenantUuid) == 0x00011C, "Member 'FRHAPI_LoginResult::TenantUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ConfigElectorUuid) == 0x00012C, "Member 'FRHAPI_LoginResult::ConfigElectorUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ClientUuid) == 0x00013C, "Member 'FRHAPI_LoginResult::ClientUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ClientId) == 0x000150, "Member 'FRHAPI_LoginResult::ClientId' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, TokenType) == 0x000160, "Member 'FRHAPI_LoginResult::TokenType' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ExpiresIn_Optional) == 0x000170, "Member 'FRHAPI_LoginResult::ExpiresIn_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_LoginResult, ExpiresIn_IsSet) == 0x000174, "Member 'FRHAPI_LoginResult::ExpiresIn_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_LookupResults
// 0x00C8 (0x00D0 - 0x0008)
struct FRHAPI_LookupResults final : public FRHAPI_Model
{
public:
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DisplayNames_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x57];                                      // 0x0019(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IdentityPlatforms_IsSet;                           // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x57];                                      // 0x0071(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IdentityPlatformsByPlatform_IsSet;                 // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_LookupResults) == 0x000008, "Wrong alignment on FRHAPI_LookupResults");
static_assert(sizeof(FRHAPI_LookupResults) == 0x0000D0, "Wrong size on FRHAPI_LookupResults");
static_assert(offsetof(FRHAPI_LookupResults, DisplayNames_IsSet) == 0x000018, "Member 'FRHAPI_LookupResults::DisplayNames_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LookupResults, IdentityPlatforms_IsSet) == 0x000070, "Member 'FRHAPI_LookupResults::IdentityPlatforms_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_LookupResults, IdentityPlatformsByPlatform_IsSet) == 0x0000C8, "Member 'FRHAPI_LookupResults::IdentityPlatformsByPlatform_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionPermissions
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_SessionPermissions final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ERHAPI_IntraSessionPermissions>          Permissions_Optional;                              // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Permissions_IsSet;                                 // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionPermissions) == 0x000008, "Wrong alignment on FRHAPI_SessionPermissions");
static_assert(sizeof(FRHAPI_SessionPermissions) == 0x000070, "Wrong size on FRHAPI_SessionPermissions");
static_assert(offsetof(FRHAPI_SessionPermissions, PlayerUuid) == 0x000008, "Member 'FRHAPI_SessionPermissions::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPermissions, Permissions_Optional) == 0x000018, "Member 'FRHAPI_SessionPermissions::Permissions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPermissions, Permissions_IsSet) == 0x000068, "Member 'FRHAPI_SessionPermissions::Permissions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ManyEntityGuideEngagementRequest
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_ManyEntityGuideEngagementRequest final : public FRHAPI_Model
{
public:
	TArray<struct FGuid>                          Guides_Optional;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Guides_IsSet;                                      // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ManyEntityGuideEngagementRequest) == 0x000008, "Wrong alignment on FRHAPI_ManyEntityGuideEngagementRequest");
static_assert(sizeof(FRHAPI_ManyEntityGuideEngagementRequest) == 0x000020, "Wrong size on FRHAPI_ManyEntityGuideEngagementRequest");
static_assert(offsetof(FRHAPI_ManyEntityGuideEngagementRequest, Guides_Optional) == 0x000008, "Member 'FRHAPI_ManyEntityGuideEngagementRequest::Guides_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ManyEntityGuideEngagementRequest, Guides_IsSet) == 0x000018, "Member 'FRHAPI_ManyEntityGuideEngagementRequest::Guides_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderEntryCreateInput
// 0x0180 (0x0188 - 0x0008)
struct FRHAPI_PlayerOrderEntryCreateInput final : public FRHAPI_Model
{
public:
	ERHAPI_PlayerOrderEntryType                   Type;                                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LootId_Optional;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsSet;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LootId_IsNull;                                     // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VendorVersion_Optional;                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsSet;                               // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorVersion_IsNull;                              // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VendorEtag_Optional;                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsSet;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VendorEtag_IsNull;                                 // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DynamicBundleLootIds_Optional;                     // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsSet;                        // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DynamicBundleLootIds_IsNull;                       // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PurchasePrice                   PurchasePrice_Optional;                            // 0x0050(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsSet;                               // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PurchasePrice_IsNull;                              // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalTranId_Optional;                           // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsSet;                              // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalTranId_IsNull;                             // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExternalItemSku_Optional;                          // 0x00A8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsSet;                             // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExternalItemSku_IsNull;                            // 0x00B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        UseInventoryBucket_Optional;                       // 0x00BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsSet;                          // 0x00BB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseInventoryBucket_IsNull;                         // 0x00BC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerPortalEventId_Optional;                      // 0x00C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsSet;                         // 0x00C4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerPortalEventId_IsNull;                        // 0x00C5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InventoryId_Optional;                              // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsSet;                                 // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryId_IsNull;                                // 0x00D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegacyInventoryId_Optional;                        // 0x00DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsSet;                           // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyInventoryId_IsNull;                          // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x2];                                       // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x00E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x00E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x00F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_XpQuantityTransform                    XpQuantityTransformType_Optional;                  // 0x00FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XpQuantityTransformType_IsSet;                     // 0x00FB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HardQuantityMaximum_Optional;                      // 0x00FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsSet;                         // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HardQuantityMaximum_IsNull;                        // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryOperation                     InventoryOperation_Optional;                       // 0x0102(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventoryOperation_IsSet;                          // 0x0103(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventorySelector                      InventorySelectorType_Optional;                    // 0x0104(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InventorySelectorType_IsSet;                       // 0x0105(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QuantityMultInventoryItemId_Optional;              // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsSet;                 // 0x010C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QuantityMultInventoryItemId_IsNull;                // 0x010D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeFrameId_Optional;                              // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsSet;                                 // 0x0114(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TimeFrameId_IsNull;                                // 0x0115(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0118(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntryId_Optional;                                  // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntryId_IsSet;                                     // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntryId_IsNull;                                    // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerOrderEntryCreateInput) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderEntryCreateInput");
static_assert(sizeof(FRHAPI_PlayerOrderEntryCreateInput) == 0x000188, "Wrong size on FRHAPI_PlayerOrderEntryCreateInput");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, Type) == 0x000008, "Member 'FRHAPI_PlayerOrderEntryCreateInput::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LootId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LootId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LootId_IsSet) == 0x000010, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LootId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LootId_IsNull) == 0x000011, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LootId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, Quantity) == 0x000014, "Member 'FRHAPI_PlayerOrderEntryCreateInput::Quantity' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorVersion_Optional) == 0x000018, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorVersion_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorVersion_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorVersion_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorVersion_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorVersion_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorEtag_Optional) == 0x000020, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorEtag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorEtag_IsSet) == 0x000030, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorEtag_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, VendorEtag_IsNull) == 0x000031, "Member 'FRHAPI_PlayerOrderEntryCreateInput::VendorEtag_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, DynamicBundleLootIds_Optional) == 0x000038, "Member 'FRHAPI_PlayerOrderEntryCreateInput::DynamicBundleLootIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, DynamicBundleLootIds_IsSet) == 0x000048, "Member 'FRHAPI_PlayerOrderEntryCreateInput::DynamicBundleLootIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, DynamicBundleLootIds_IsNull) == 0x000049, "Member 'FRHAPI_PlayerOrderEntryCreateInput::DynamicBundleLootIds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PurchasePrice_Optional) == 0x000050, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PurchasePrice_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PurchasePrice_IsSet) == 0x000088, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PurchasePrice_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PurchasePrice_IsNull) == 0x000089, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PurchasePrice_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalTranId_Optional) == 0x000090, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalTranId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalTranId_IsSet) == 0x0000A0, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalTranId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalTranId_IsNull) == 0x0000A1, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalTranId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalItemSku_Optional) == 0x0000A8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalItemSku_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalItemSku_IsSet) == 0x0000B8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalItemSku_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ExternalItemSku_IsNull) == 0x0000B9, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ExternalItemSku_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, UseInventoryBucket_Optional) == 0x0000BA, "Member 'FRHAPI_PlayerOrderEntryCreateInput::UseInventoryBucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, UseInventoryBucket_IsSet) == 0x0000BB, "Member 'FRHAPI_PlayerOrderEntryCreateInput::UseInventoryBucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, UseInventoryBucket_IsNull) == 0x0000BC, "Member 'FRHAPI_PlayerOrderEntryCreateInput::UseInventoryBucket_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PlayerPortalEventId_Optional) == 0x0000C0, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PlayerPortalEventId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PlayerPortalEventId_IsSet) == 0x0000C4, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PlayerPortalEventId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, PlayerPortalEventId_IsNull) == 0x0000C5, "Member 'FRHAPI_PlayerOrderEntryCreateInput::PlayerPortalEventId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventoryId_Optional) == 0x0000C8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventoryId_IsSet) == 0x0000D8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventoryId_IsNull) == 0x0000D9, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LegacyInventoryId_Optional) == 0x0000DC, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LegacyInventoryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LegacyInventoryId_IsSet) == 0x0000E0, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LegacyInventoryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, LegacyInventoryId_IsNull) == 0x0000E1, "Member 'FRHAPI_PlayerOrderEntryCreateInput::LegacyInventoryId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ItemId_Optional) == 0x0000E4, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ItemId_IsSet) == 0x0000E8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, ItemId_IsNull) == 0x0000E9, "Member 'FRHAPI_PlayerOrderEntryCreateInput::ItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, Expires_Optional) == 0x0000F0, "Member 'FRHAPI_PlayerOrderEntryCreateInput::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, Expires_IsSet) == 0x0000F8, "Member 'FRHAPI_PlayerOrderEntryCreateInput::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, Expires_IsNull) == 0x0000F9, "Member 'FRHAPI_PlayerOrderEntryCreateInput::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, XpQuantityTransformType_Optional) == 0x0000FA, "Member 'FRHAPI_PlayerOrderEntryCreateInput::XpQuantityTransformType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, XpQuantityTransformType_IsSet) == 0x0000FB, "Member 'FRHAPI_PlayerOrderEntryCreateInput::XpQuantityTransformType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, HardQuantityMaximum_Optional) == 0x0000FC, "Member 'FRHAPI_PlayerOrderEntryCreateInput::HardQuantityMaximum_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, HardQuantityMaximum_IsSet) == 0x000100, "Member 'FRHAPI_PlayerOrderEntryCreateInput::HardQuantityMaximum_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, HardQuantityMaximum_IsNull) == 0x000101, "Member 'FRHAPI_PlayerOrderEntryCreateInput::HardQuantityMaximum_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventoryOperation_Optional) == 0x000102, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventoryOperation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventoryOperation_IsSet) == 0x000103, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventoryOperation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventorySelectorType_Optional) == 0x000104, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventorySelectorType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, InventorySelectorType_IsSet) == 0x000105, "Member 'FRHAPI_PlayerOrderEntryCreateInput::InventorySelectorType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, QuantityMultInventoryItemId_Optional) == 0x000108, "Member 'FRHAPI_PlayerOrderEntryCreateInput::QuantityMultInventoryItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, QuantityMultInventoryItemId_IsSet) == 0x00010C, "Member 'FRHAPI_PlayerOrderEntryCreateInput::QuantityMultInventoryItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, QuantityMultInventoryItemId_IsNull) == 0x00010D, "Member 'FRHAPI_PlayerOrderEntryCreateInput::QuantityMultInventoryItemId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, TimeFrameId_Optional) == 0x000110, "Member 'FRHAPI_PlayerOrderEntryCreateInput::TimeFrameId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, TimeFrameId_IsSet) == 0x000114, "Member 'FRHAPI_PlayerOrderEntryCreateInput::TimeFrameId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, TimeFrameId_IsNull) == 0x000115, "Member 'FRHAPI_PlayerOrderEntryCreateInput::TimeFrameId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, CustomData_Optional) == 0x000118, "Member 'FRHAPI_PlayerOrderEntryCreateInput::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, CustomData_IsSet) == 0x000168, "Member 'FRHAPI_PlayerOrderEntryCreateInput::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, CustomData_IsNull) == 0x000169, "Member 'FRHAPI_PlayerOrderEntryCreateInput::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, EntryId_Optional) == 0x000170, "Member 'FRHAPI_PlayerOrderEntryCreateInput::EntryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, EntryId_IsSet) == 0x000180, "Member 'FRHAPI_PlayerOrderEntryCreateInput::EntryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderEntryCreateInput, EntryId_IsNull) == 0x000181, "Member 'FRHAPI_PlayerOrderEntryCreateInput::EntryId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderCreateSingle
// 0x00A8 (0x00B0 - 0x0008)
struct FRHAPI_PlayerOrderCreateSingle final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_Optional;                            // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_IsSet;                               // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId_Optional;                                 // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsSet;                                    // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerId_IsNull;                                   // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0074(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0084(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsNull;                                 // 0x0085(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsNull;                                    // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlayerOrderEntryCreateInput> Entries;                                       // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerOrderCreateSingle) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderCreateSingle");
static_assert(sizeof(FRHAPI_PlayerOrderCreateSingle) == 0x0000B0, "Wrong size on FRHAPI_PlayerOrderCreateSingle");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, Source_Optional) == 0x000008, "Member 'FRHAPI_PlayerOrderCreateSingle::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, Source_IsSet) == 0x000009, "Member 'FRHAPI_PlayerOrderCreateSingle::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderCreateSingle::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderCreateSingle::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderCreateSingle::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalId_Optional) == 0x00001E, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalId_IsSet) == 0x00001F, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalId_IsNull) == 0x000020, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalUserId_Optional) == 0x000028, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalUserId_IsSet) == 0x000038, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PortalUserId_IsNull) == 0x000039, "Member 'FRHAPI_PlayerOrderCreateSingle::PortalUserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, InstanceId_Optional) == 0x000040, "Member 'FRHAPI_PlayerOrderCreateSingle::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, InstanceId_IsSet) == 0x000050, "Member 'FRHAPI_PlayerOrderCreateSingle::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, InstanceId_IsNull) == 0x000051, "Member 'FRHAPI_PlayerOrderCreateSingle::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, MatchId_Optional) == 0x000058, "Member 'FRHAPI_PlayerOrderCreateSingle::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, MatchId_IsSet) == 0x000068, "Member 'FRHAPI_PlayerOrderCreateSingle::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, MatchId_IsNull) == 0x000069, "Member 'FRHAPI_PlayerOrderCreateSingle::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, IsTransaction_Optional) == 0x00006A, "Member 'FRHAPI_PlayerOrderCreateSingle::IsTransaction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, IsTransaction_IsSet) == 0x00006B, "Member 'FRHAPI_PlayerOrderCreateSingle::IsTransaction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerId_Optional) == 0x00006C, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerId_IsSet) == 0x000070, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerId_IsNull) == 0x000071, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerUuid_Optional) == 0x000074, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerUuid_IsSet) == 0x000084, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, PlayerUuid_IsNull) == 0x000085, "Member 'FRHAPI_PlayerOrderCreateSingle::PlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, OrderId_Optional) == 0x000088, "Member 'FRHAPI_PlayerOrderCreateSingle::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, OrderId_IsSet) == 0x000098, "Member 'FRHAPI_PlayerOrderCreateSingle::OrderId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, OrderId_IsNull) == 0x000099, "Member 'FRHAPI_PlayerOrderCreateSingle::OrderId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateSingle, Entries) == 0x0000A0, "Member 'FRHAPI_PlayerOrderCreateSingle::Entries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ManyPlayerOrderCreate
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_ManyPlayerOrderCreate final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerOrderCreateSingle> Orders;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_ManyPlayerOrderCreate) == 0x000008, "Wrong alignment on FRHAPI_ManyPlayerOrderCreate");
static_assert(sizeof(FRHAPI_ManyPlayerOrderCreate) == 0x000018, "Wrong size on FRHAPI_ManyPlayerOrderCreate");
static_assert(offsetof(FRHAPI_ManyPlayerOrderCreate, Orders) == 0x000008, "Member 'FRHAPI_ManyPlayerOrderCreate::Orders' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Role
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_Role final : public FRHAPI_Model
{
public:
	class FString                                 RoleId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegacyRoleId_Optional;                             // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyRoleId_IsSet;                                // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonObject                      CustomData_Optional;                               // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_RoleAuthBypass                         AuthBypass_Optional;                               // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AuthBypass_IsSet;                                  // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_LoginLootReward>         LoginLootRewards_Optional;                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          LoginLootRewards_IsSet;                            // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Role) == 0x000008, "Wrong alignment on FRHAPI_Role");
static_assert(sizeof(FRHAPI_Role) == 0x000050, "Wrong size on FRHAPI_Role");
static_assert(offsetof(FRHAPI_Role, RoleId) == 0x000008, "Member 'FRHAPI_Role::RoleId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, LegacyRoleId_Optional) == 0x000018, "Member 'FRHAPI_Role::LegacyRoleId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, LegacyRoleId_IsSet) == 0x00001C, "Member 'FRHAPI_Role::LegacyRoleId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, CustomData_Optional) == 0x000020, "Member 'FRHAPI_Role::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, CustomData_IsSet) == 0x000030, "Member 'FRHAPI_Role::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, AuthBypass_Optional) == 0x000031, "Member 'FRHAPI_Role::AuthBypass_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, AuthBypass_IsSet) == 0x000032, "Member 'FRHAPI_Role::AuthBypass_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, LoginLootRewards_Optional) == 0x000038, "Member 'FRHAPI_Role::LoginLootRewards_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Role, LoginLootRewards_IsSet) == 0x000048, "Member 'FRHAPI_Role::LoginLootRewards_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RecentlyPlayedPlayer
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_RecentlyPlayedPlayer final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RecentlyPlayedPlayer) == 0x000008, "Wrong alignment on FRHAPI_RecentlyPlayedPlayer");
static_assert(sizeof(FRHAPI_RecentlyPlayedPlayer) == 0x000018, "Wrong size on FRHAPI_RecentlyPlayedPlayer");
static_assert(offsetof(FRHAPI_RecentlyPlayedPlayer, PlayerUuid) == 0x000008, "Member 'FRHAPI_RecentlyPlayedPlayer::PlayerUuid' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RecentlyPlayedWithResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_RecentlyPlayedWithResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_RecentlyPlayedPlayer>    Players_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RecentlyPlayedWithResponse) == 0x000008, "Wrong alignment on FRHAPI_RecentlyPlayedWithResponse");
static_assert(sizeof(FRHAPI_RecentlyPlayedWithResponse) == 0x000020, "Wrong size on FRHAPI_RecentlyPlayedWithResponse");
static_assert(offsetof(FRHAPI_RecentlyPlayedWithResponse, Players_Optional) == 0x000008, "Member 'FRHAPI_RecentlyPlayedWithResponse::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RecentlyPlayedWithResponse, Players_IsSet) == 0x000018, "Member 'FRHAPI_RecentlyPlayedWithResponse::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MarketingCampaign
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_MarketingCampaign final : public FRHAPI_Model
{
public:
	struct FGuid                                  UUID;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_KeyType>                 KeyTypes;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CreatedOn_Optional;                                // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedOn_IsSet;                                   // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedOn_IsNull;                                  // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LastModifiedOn_Optional;                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedOn_IsSet;                              // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastModifiedOn_IsNull;                             // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MarketingCampaign) == 0x000008, "Wrong alignment on FRHAPI_MarketingCampaign");
static_assert(sizeof(FRHAPI_MarketingCampaign) == 0x000070, "Wrong size on FRHAPI_MarketingCampaign");
static_assert(offsetof(FRHAPI_MarketingCampaign, UUID) == 0x000008, "Member 'FRHAPI_MarketingCampaign::UUID' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, Name) == 0x000018, "Member 'FRHAPI_MarketingCampaign::Name' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, PortalId_Optional) == 0x000028, "Member 'FRHAPI_MarketingCampaign::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, PortalId_IsSet) == 0x000029, "Member 'FRHAPI_MarketingCampaign::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, PortalId_IsNull) == 0x00002A, "Member 'FRHAPI_MarketingCampaign::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, KeyTypes) == 0x000030, "Member 'FRHAPI_MarketingCampaign::KeyTypes' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, CreatedOn_Optional) == 0x000040, "Member 'FRHAPI_MarketingCampaign::CreatedOn_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, CreatedOn_IsSet) == 0x000050, "Member 'FRHAPI_MarketingCampaign::CreatedOn_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, CreatedOn_IsNull) == 0x000051, "Member 'FRHAPI_MarketingCampaign::CreatedOn_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, LastModifiedOn_Optional) == 0x000058, "Member 'FRHAPI_MarketingCampaign::LastModifiedOn_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, LastModifiedOn_IsSet) == 0x000068, "Member 'FRHAPI_MarketingCampaign::LastModifiedOn_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MarketingCampaign, LastModifiedOn_IsNull) == 0x000069, "Member 'FRHAPI_MarketingCampaign::LastModifiedOn_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MarketingCampaigns
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_MarketingCampaigns final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_MarketingCampaign>       Campaigns;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MarketingCampaigns) == 0x000008, "Wrong alignment on FRHAPI_MarketingCampaigns");
static_assert(sizeof(FRHAPI_MarketingCampaigns) == 0x000018, "Wrong size on FRHAPI_MarketingCampaigns");
static_assert(offsetof(FRHAPI_MarketingCampaigns, Campaigns) == 0x000008, "Member 'FRHAPI_MarketingCampaigns::Campaigns' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionPlayerUpdateResponse
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_SessionPlayerUpdateResponse final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SessionPlayerStatus                    Status;                                            // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId;                                            // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionPlayerUpdateResponse) == 0x000008, "Wrong alignment on FRHAPI_SessionPlayerUpdateResponse");
static_assert(sizeof(FRHAPI_SessionPlayerUpdateResponse) == 0x000078, "Wrong size on FRHAPI_SessionPlayerUpdateResponse");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, PlayerUuid_Optional) == 0x000008, "Member 'FRHAPI_SessionPlayerUpdateResponse::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, PlayerUuid_IsSet) == 0x000018, "Member 'FRHAPI_SessionPlayerUpdateResponse::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, Status) == 0x000019, "Member 'FRHAPI_SessionPlayerUpdateResponse::Status' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, TeamId) == 0x00001C, "Member 'FRHAPI_SessionPlayerUpdateResponse::TeamId' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, CustomData_Optional) == 0x000020, "Member 'FRHAPI_SessionPlayerUpdateResponse::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateResponse, CustomData_IsSet) == 0x000070, "Member 'FRHAPI_SessionPlayerUpdateResponse::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchInfo
// 0x0088 (0x0090 - 0x0008)
struct FRHAPI_MatchInfo final : public FRHAPI_Model
{
public:
	class FString                                 MatchID;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TicketIds_Optional;                                // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TicketIds_IsSet;                                   // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchInfo) == 0x000008, "Wrong alignment on FRHAPI_MatchInfo");
static_assert(sizeof(FRHAPI_MatchInfo) == 0x000090, "Wrong size on FRHAPI_MatchInfo");
static_assert(offsetof(FRHAPI_MatchInfo, MatchID) == 0x000008, "Member 'FRHAPI_MatchInfo::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInfo, Created) == 0x000018, "Member 'FRHAPI_MatchInfo::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInfo, CustomData_Optional) == 0x000020, "Member 'FRHAPI_MatchInfo::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInfo, CustomData_IsSet) == 0x000070, "Member 'FRHAPI_MatchInfo::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInfo, TicketIds_Optional) == 0x000078, "Member 'FRHAPI_MatchInfo::TicketIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchInfo, TicketIds_IsSet) == 0x000088, "Member 'FRHAPI_MatchInfo::TicketIds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchmakingInfo
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_MatchmakingInfo final : public FRHAPI_Model
{
public:
	class FString                                 TicketId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueueId_Optional;                                  // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueueId_IsSet;                                     // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchmakingInfo) == 0x000008, "Wrong alignment on FRHAPI_MatchmakingInfo");
static_assert(sizeof(FRHAPI_MatchmakingInfo) == 0x000088, "Wrong size on FRHAPI_MatchmakingInfo");
static_assert(offsetof(FRHAPI_MatchmakingInfo, TicketId) == 0x000008, "Member 'FRHAPI_MatchmakingInfo::TicketId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingInfo, CustomData_Optional) == 0x000018, "Member 'FRHAPI_MatchmakingInfo::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingInfo, CustomData_IsSet) == 0x000068, "Member 'FRHAPI_MatchmakingInfo::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingInfo, QueueId_Optional) == 0x000070, "Member 'FRHAPI_MatchmakingInfo::QueueId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingInfo, QueueId_IsSet) == 0x000080, "Member 'FRHAPI_MatchmakingInfo::QueueId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SettingTypeVersion
// 0x00C8 (0x00D0 - 0x0008)
struct FRHAPI_SettingTypeVersion final : public FRHAPI_Model
{
public:
	bool                                          AllowUpdate_Optional;                              // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowUpdate_IsSet;                                 // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyRegex_Optional;                                 // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyRegex_IsSet;                                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_JsonValue>  ValueJsonschema;                                   // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0078(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SettingTypeVersion) == 0x000008, "Wrong alignment on FRHAPI_SettingTypeVersion");
static_assert(sizeof(FRHAPI_SettingTypeVersion) == 0x0000D0, "Wrong size on FRHAPI_SettingTypeVersion");
static_assert(offsetof(FRHAPI_SettingTypeVersion, AllowUpdate_Optional) == 0x000008, "Member 'FRHAPI_SettingTypeVersion::AllowUpdate_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, AllowUpdate_IsSet) == 0x000009, "Member 'FRHAPI_SettingTypeVersion::AllowUpdate_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, KeyRegex_Optional) == 0x000010, "Member 'FRHAPI_SettingTypeVersion::KeyRegex_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, KeyRegex_IsSet) == 0x000020, "Member 'FRHAPI_SettingTypeVersion::KeyRegex_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, ValueJsonschema) == 0x000028, "Member 'FRHAPI_SettingTypeVersion::ValueJsonschema' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, CustomData_Optional) == 0x000078, "Member 'FRHAPI_SettingTypeVersion::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SettingTypeVersion, CustomData_IsSet) == 0x0000C8, "Member 'FRHAPI_SettingTypeVersion::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingProfile
// 0x00C8 (0x00D0 - 0x0008)
struct FRHAPI_MatchMakingProfile final : public FRHAPI_Model
{
public:
	class FString                                 ProfileId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ProfileJoinMode                        JoinMode_Optional;                                 // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinMode_IsSet;                                    // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceLaunchTemplateId;                          // 0x001C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankId_Optional;                                   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RankId_IsSet;                                      // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSides_Optional;                                 // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NumSides_IsSet;                                    // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayersPerSide_Optional;                        // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxPlayersPerSide_IsSet;                           // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinPlayersPerSide_Optional;                        // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinPlayersPerSide_IsSet;                           // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeserterId_Optional;                               // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterId_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            LegacyConfig_Optional;                             // 0x0078(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          LegacyConfig_IsSet;                                // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchMakingProfile) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingProfile");
static_assert(sizeof(FRHAPI_MatchMakingProfile) == 0x0000D0, "Wrong size on FRHAPI_MatchMakingProfile");
static_assert(offsetof(FRHAPI_MatchMakingProfile, ProfileId) == 0x000008, "Member 'FRHAPI_MatchMakingProfile::ProfileId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, JoinMode_Optional) == 0x000018, "Member 'FRHAPI_MatchMakingProfile::JoinMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, JoinMode_IsSet) == 0x000019, "Member 'FRHAPI_MatchMakingProfile::JoinMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, InstanceLaunchTemplateId) == 0x00001C, "Member 'FRHAPI_MatchMakingProfile::InstanceLaunchTemplateId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, RankId_Optional) == 0x000030, "Member 'FRHAPI_MatchMakingProfile::RankId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, RankId_IsSet) == 0x000040, "Member 'FRHAPI_MatchMakingProfile::RankId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, NumSides_Optional) == 0x000044, "Member 'FRHAPI_MatchMakingProfile::NumSides_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, NumSides_IsSet) == 0x000048, "Member 'FRHAPI_MatchMakingProfile::NumSides_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, MaxPlayersPerSide_Optional) == 0x00004C, "Member 'FRHAPI_MatchMakingProfile::MaxPlayersPerSide_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, MaxPlayersPerSide_IsSet) == 0x000050, "Member 'FRHAPI_MatchMakingProfile::MaxPlayersPerSide_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, MinPlayersPerSide_Optional) == 0x000054, "Member 'FRHAPI_MatchMakingProfile::MinPlayersPerSide_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, MinPlayersPerSide_IsSet) == 0x000058, "Member 'FRHAPI_MatchMakingProfile::MinPlayersPerSide_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, DeserterId_Optional) == 0x000060, "Member 'FRHAPI_MatchMakingProfile::DeserterId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, DeserterId_IsSet) == 0x000070, "Member 'FRHAPI_MatchMakingProfile::DeserterId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, LegacyConfig_Optional) == 0x000078, "Member 'FRHAPI_MatchMakingProfile::LegacyConfig_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfile, LegacyConfig_IsSet) == 0x0000C8, "Member 'FRHAPI_MatchMakingProfile::LegacyConfig_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingProfileV2
// 0x00F0 (0x00F8 - 0x0008)
struct FRHAPI_MatchMakingProfileV2 final : public FRHAPI_Model
{
public:
	class FString                                 MatchMakingProfileId;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ProfileJoinMode                        JoinMode_Optional;                                 // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinMode_IsSet;                                    // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceRequestTemplateId_Optional;                // 0x001C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplateId_IsSet;                   // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankId_Optional;                                   // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RankId_IsSet;                                      // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSides_Optional;                                 // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NumSides_IsSet;                                    // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayersPerSide_Optional;                        // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxPlayersPerSide_IsSet;                           // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinPlayersPerSide_Optional;                        // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinPlayersPerSide_IsSet;                           // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonObject                      LegacyConfig_Optional;                             // 0x0060(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          LegacyConfig_IsSet;                                // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeserterId_Optional;                               // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeserterId_IsSet;                                  // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  SessionTemplateId_Optional;                        // 0x008C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionTemplateId_IsSet;                           // 0x009C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchMakingProfileV2) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingProfileV2");
static_assert(sizeof(FRHAPI_MatchMakingProfileV2) == 0x0000F8, "Wrong size on FRHAPI_MatchMakingProfileV2");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, MatchMakingProfileId) == 0x000008, "Member 'FRHAPI_MatchMakingProfileV2::MatchMakingProfileId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, JoinMode_Optional) == 0x000018, "Member 'FRHAPI_MatchMakingProfileV2::JoinMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, JoinMode_IsSet) == 0x000019, "Member 'FRHAPI_MatchMakingProfileV2::JoinMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, InstanceRequestTemplateId_Optional) == 0x00001C, "Member 'FRHAPI_MatchMakingProfileV2::InstanceRequestTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, InstanceRequestTemplateId_IsSet) == 0x00002C, "Member 'FRHAPI_MatchMakingProfileV2::InstanceRequestTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, RankId_Optional) == 0x000030, "Member 'FRHAPI_MatchMakingProfileV2::RankId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, RankId_IsSet) == 0x000040, "Member 'FRHAPI_MatchMakingProfileV2::RankId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, NumSides_Optional) == 0x000044, "Member 'FRHAPI_MatchMakingProfileV2::NumSides_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, NumSides_IsSet) == 0x000048, "Member 'FRHAPI_MatchMakingProfileV2::NumSides_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, MaxPlayersPerSide_Optional) == 0x00004C, "Member 'FRHAPI_MatchMakingProfileV2::MaxPlayersPerSide_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, MaxPlayersPerSide_IsSet) == 0x000050, "Member 'FRHAPI_MatchMakingProfileV2::MaxPlayersPerSide_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, MinPlayersPerSide_Optional) == 0x000054, "Member 'FRHAPI_MatchMakingProfileV2::MinPlayersPerSide_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, MinPlayersPerSide_IsSet) == 0x000058, "Member 'FRHAPI_MatchMakingProfileV2::MinPlayersPerSide_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, LegacyConfig_Optional) == 0x000060, "Member 'FRHAPI_MatchMakingProfileV2::LegacyConfig_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, LegacyConfig_IsSet) == 0x000070, "Member 'FRHAPI_MatchMakingProfileV2::LegacyConfig_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, DeserterId_Optional) == 0x000078, "Member 'FRHAPI_MatchMakingProfileV2::DeserterId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, DeserterId_IsSet) == 0x000088, "Member 'FRHAPI_MatchMakingProfileV2::DeserterId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, SessionTemplateId_Optional) == 0x00008C, "Member 'FRHAPI_MatchMakingProfileV2::SessionTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, SessionTemplateId_IsSet) == 0x00009C, "Member 'FRHAPI_MatchMakingProfileV2::SessionTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, CustomData_Optional) == 0x0000A0, "Member 'FRHAPI_MatchMakingProfileV2::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingProfileV2, CustomData_IsSet) == 0x0000F0, "Member 'FRHAPI_MatchMakingProfileV2::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionPlayerUpdateRequest
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_SessionPlayerUpdateRequest final : public FRHAPI_Model
{
public:
	ERHAPI_SessionPlayerStatus                    Status_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId_Optional;                                   // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_TeamOverflowAction                     OverflowAction_Optional;                           // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverflowAction_IsSet;                              // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B[0x5];                                       // 0x006B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionPlayerUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_SessionPlayerUpdateRequest");
static_assert(sizeof(FRHAPI_SessionPlayerUpdateRequest) == 0x000070, "Wrong size on FRHAPI_SessionPlayerUpdateRequest");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, Status_Optional) == 0x000008, "Member 'FRHAPI_SessionPlayerUpdateRequest::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, Status_IsSet) == 0x000009, "Member 'FRHAPI_SessionPlayerUpdateRequest::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, TeamId_Optional) == 0x00000C, "Member 'FRHAPI_SessionPlayerUpdateRequest::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, TeamId_IsSet) == 0x000010, "Member 'FRHAPI_SessionPlayerUpdateRequest::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, CustomData_Optional) == 0x000018, "Member 'FRHAPI_SessionPlayerUpdateRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, CustomData_IsSet) == 0x000068, "Member 'FRHAPI_SessionPlayerUpdateRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, OverflowAction_Optional) == 0x000069, "Member 'FRHAPI_SessionPlayerUpdateRequest::OverflowAction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionPlayerUpdateRequest, OverflowAction_IsSet) == 0x00006A, "Member 'FRHAPI_SessionPlayerUpdateRequest::OverflowAction_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankData
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_RankData final : public FRHAPI_Model
{
public:
	class FString                                 RankUuid;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mu_Optional;                                       // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mu_IsSet;                                          // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_RankData) == 0x000008, "Wrong alignment on FRHAPI_RankData");
static_assert(sizeof(FRHAPI_RankData) == 0x000020, "Wrong size on FRHAPI_RankData");
static_assert(offsetof(FRHAPI_RankData, RankUuid) == 0x000008, "Member 'FRHAPI_RankData::RankUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankData, Mu_Optional) == 0x000018, "Member 'FRHAPI_RankData::Mu_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_RankData, Mu_IsSet) == 0x00001C, "Member 'FRHAPI_RankData::Mu_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TicketData
// 0x01C0 (0x01C8 - 0x0008)
struct FRHAPI_TicketData final : public FRHAPI_Model
{
public:
	class FString                                 TicketId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                          PlayerUuids_Optional;                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PlayerUuids_IsSet;                                 // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              QueueJoinDatetime;                                 // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueId;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ProfileIds;                                        // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRHAPI_AdditionalJoinParams            AdditionalJoinParams_Optional;                     // 0x0068(0x0128)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AdditionalJoinParams_IsSet;                        // 0x0190(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_RankData>                RankData_Optional;                                 // 0x0198(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RankData_IsSet;                                    // 0x01A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QueuedSessionId_Optional;                          // 0x01B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          QueuedSessionId_IsSet;                             // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_TicketData) == 0x000008, "Wrong alignment on FRHAPI_TicketData");
static_assert(sizeof(FRHAPI_TicketData) == 0x0001C8, "Wrong size on FRHAPI_TicketData");
static_assert(offsetof(FRHAPI_TicketData, TicketId) == 0x000008, "Member 'FRHAPI_TicketData::TicketId' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, PlayerUuids_Optional) == 0x000018, "Member 'FRHAPI_TicketData::PlayerUuids_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, PlayerUuids_IsSet) == 0x000028, "Member 'FRHAPI_TicketData::PlayerUuids_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, QueueJoinDatetime) == 0x000030, "Member 'FRHAPI_TicketData::QueueJoinDatetime' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, RegionId) == 0x000038, "Member 'FRHAPI_TicketData::RegionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, QueueId) == 0x000048, "Member 'FRHAPI_TicketData::QueueId' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, ProfileIds) == 0x000058, "Member 'FRHAPI_TicketData::ProfileIds' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, AdditionalJoinParams_Optional) == 0x000068, "Member 'FRHAPI_TicketData::AdditionalJoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, AdditionalJoinParams_IsSet) == 0x000190, "Member 'FRHAPI_TicketData::AdditionalJoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, RankData_Optional) == 0x000198, "Member 'FRHAPI_TicketData::RankData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, RankData_IsSet) == 0x0001A8, "Member 'FRHAPI_TicketData::RankData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, QueuedSessionId_Optional) == 0x0001B0, "Member 'FRHAPI_TicketData::QueuedSessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TicketData, QueuedSessionId_IsSet) == 0x0001C0, "Member 'FRHAPI_TicketData::QueuedSessionId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchmakingResults
// 0x01A0 (0x01A8 - 0x0008)
struct FRHAPI_MatchmakingResults final : public FRHAPI_Model
{
public:
	class FString                                 MatchMakingId;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TicketIds_Optional;                                // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TicketIds_IsSet;                                   // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_TicketData>              TicketData_Optional;                               // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TicketData_IsSet;                                  // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketsAssigned_Optional;                          // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TicketsAssigned_IsSet;                             // 0x00A2(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchMakingProfileV2            Profile_Optional;                                  // 0x00A8(0x00F8)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Profile_IsSet;                                     // 0x01A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchmakingResults) == 0x000008, "Wrong alignment on FRHAPI_MatchmakingResults");
static_assert(sizeof(FRHAPI_MatchmakingResults) == 0x0001A8, "Wrong size on FRHAPI_MatchmakingResults");
static_assert(offsetof(FRHAPI_MatchmakingResults, MatchMakingId) == 0x000008, "Member 'FRHAPI_MatchmakingResults::MatchMakingId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, Created) == 0x000018, "Member 'FRHAPI_MatchmakingResults::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, CustomData_Optional) == 0x000020, "Member 'FRHAPI_MatchmakingResults::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, CustomData_IsSet) == 0x000070, "Member 'FRHAPI_MatchmakingResults::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketIds_Optional) == 0x000078, "Member 'FRHAPI_MatchmakingResults::TicketIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketIds_IsSet) == 0x000088, "Member 'FRHAPI_MatchmakingResults::TicketIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketData_Optional) == 0x000090, "Member 'FRHAPI_MatchmakingResults::TicketData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketData_IsSet) == 0x0000A0, "Member 'FRHAPI_MatchmakingResults::TicketData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketsAssigned_Optional) == 0x0000A1, "Member 'FRHAPI_MatchmakingResults::TicketsAssigned_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, TicketsAssigned_IsSet) == 0x0000A2, "Member 'FRHAPI_MatchmakingResults::TicketsAssigned_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, Profile_Optional) == 0x0000A8, "Member 'FRHAPI_MatchmakingResults::Profile_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchmakingResults, Profile_IsSet) == 0x0001A0, "Member 'FRHAPI_MatchmakingResults::Profile_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformSession
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_PlatformSession final : public FRHAPI_Model
{
public:
	ERHAPI_Platform                               Platform;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformSessionType;                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformSessionIdBase64;                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_PlatformSessionPlayer>   Players;                                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformSession) == 0x000008, "Wrong alignment on FRHAPI_PlatformSession");
static_assert(sizeof(FRHAPI_PlatformSession) == 0x000098, "Wrong size on FRHAPI_PlatformSession");
static_assert(offsetof(FRHAPI_PlatformSession, Platform) == 0x000008, "Member 'FRHAPI_PlatformSession::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSession, PlatformSessionType) == 0x000010, "Member 'FRHAPI_PlatformSession::PlatformSessionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSession, PlatformSessionIdBase64) == 0x000020, "Member 'FRHAPI_PlatformSession::PlatformSessionIdBase64' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSession, Players) == 0x000030, "Member 'FRHAPI_PlatformSession::Players' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSession, CustomData_Optional) == 0x000040, "Member 'FRHAPI_PlatformSession::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSession, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_PlatformSession::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionTeam
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_SessionTeam final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionPlayer>           Players;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MaxSize;                                           // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId_Optional;                                   // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TicketIds_Optional;                                // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TicketIds_IsSet;                                   // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionTeam) == 0x000008, "Wrong alignment on FRHAPI_SessionTeam");
static_assert(sizeof(FRHAPI_SessionTeam) == 0x000098, "Wrong size on FRHAPI_SessionTeam");
static_assert(offsetof(FRHAPI_SessionTeam, Players) == 0x000008, "Member 'FRHAPI_SessionTeam::Players' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, MaxSize) == 0x000018, "Member 'FRHAPI_SessionTeam::MaxSize' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, TeamId_Optional) == 0x00001C, "Member 'FRHAPI_SessionTeam::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, TeamId_IsSet) == 0x000020, "Member 'FRHAPI_SessionTeam::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, TicketIds_Optional) == 0x000028, "Member 'FRHAPI_SessionTeam::TicketIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, TicketIds_IsSet) == 0x000038, "Member 'FRHAPI_SessionTeam::TicketIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, CustomData_Optional) == 0x000040, "Member 'FRHAPI_SessionTeam::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTeam, CustomData_IsSet) == 0x000090, "Member 'FRHAPI_SessionTeam::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformScout
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PlatformScout final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform;                                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformScout) == 0x000008, "Wrong alignment on FRHAPI_PlatformScout");
static_assert(sizeof(FRHAPI_PlatformScout) == 0x000020, "Wrong size on FRHAPI_PlatformScout");
static_assert(offsetof(FRHAPI_PlatformScout, PlayerUuid) == 0x000008, "Member 'FRHAPI_PlatformScout::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformScout, Platform) == 0x000018, "Member 'FRHAPI_PlatformScout::Platform' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Session
// 0x0740 (0x0748 - 0x0008)
struct FRHAPI_Session final : public FRHAPI_Model
{
public:
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_InstanceInfo                    Instance_Optional;                                 // 0x0028(0x0250)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Instance_IsSet;                                    // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchInfo                       Match_Optional;                                    // 0x0280(0x0090)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Match_IsSet;                                       // 0x0310(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchmakingResults              MatchmakingResults_Optional;                       // 0x0318(0x01A8)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MatchmakingResults_IsSet;                          // 0x04C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchmakingInfo                 Matchmaking_Optional;                              // 0x04C8(0x0088)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Matchmaking_IsSet;                                 // 0x0550(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_BackfillInfo                    Backfill_Optional;                                 // 0x0558(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Backfill_IsSet;                                    // 0x05C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_BrowserInfo                     Browser_Optional;                                  // 0x05D0(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Browser_IsSet;                                     // 0x0640(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable;                                          // 0x0641(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_642[0x6];                                      // 0x0642(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_SessionTeam>             Teams;                                             // 0x0648(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          TeamsSuppressed_Optional;                          // 0x0658(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamsSuppressed_IsSet;                             // 0x0659(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65A[0x6];                                      // 0x065A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlatformSession>         PlatformSession_Optional;                          // 0x0660(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PlatformSession_IsSet;                             // 0x0670(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_PlatformScout> PlatformScouts_Optional;                        // 0x0678(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PlatformScouts_IsSet;                              // 0x06C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x06D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0720(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId_Optional;                                 // 0x0730(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0740(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedByMatchmaking_Optional;                     // 0x0741(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedByMatchmaking_IsSet;                        // 0x0742(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_743[0x5];                                      // 0x0743(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Session) == 0x000008, "Wrong alignment on FRHAPI_Session");
static_assert(sizeof(FRHAPI_Session) == 0x000748, "Wrong size on FRHAPI_Session");
static_assert(offsetof(FRHAPI_Session, Type) == 0x000008, "Member 'FRHAPI_Session::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, SessionId) == 0x000018, "Member 'FRHAPI_Session::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Instance_Optional) == 0x000028, "Member 'FRHAPI_Session::Instance_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Instance_IsSet) == 0x000278, "Member 'FRHAPI_Session::Instance_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Match_Optional) == 0x000280, "Member 'FRHAPI_Session::Match_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Match_IsSet) == 0x000310, "Member 'FRHAPI_Session::Match_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, MatchmakingResults_Optional) == 0x000318, "Member 'FRHAPI_Session::MatchmakingResults_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, MatchmakingResults_IsSet) == 0x0004C0, "Member 'FRHAPI_Session::MatchmakingResults_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Matchmaking_Optional) == 0x0004C8, "Member 'FRHAPI_Session::Matchmaking_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Matchmaking_IsSet) == 0x000550, "Member 'FRHAPI_Session::Matchmaking_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Backfill_Optional) == 0x000558, "Member 'FRHAPI_Session::Backfill_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Backfill_IsSet) == 0x0005C8, "Member 'FRHAPI_Session::Backfill_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Browser_Optional) == 0x0005D0, "Member 'FRHAPI_Session::Browser_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Browser_IsSet) == 0x000640, "Member 'FRHAPI_Session::Browser_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Joinable) == 0x000641, "Member 'FRHAPI_Session::Joinable' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Teams) == 0x000648, "Member 'FRHAPI_Session::Teams' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, TeamsSuppressed_Optional) == 0x000658, "Member 'FRHAPI_Session::TeamsSuppressed_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, TeamsSuppressed_IsSet) == 0x000659, "Member 'FRHAPI_Session::TeamsSuppressed_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, PlatformSession_Optional) == 0x000660, "Member 'FRHAPI_Session::PlatformSession_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, PlatformSession_IsSet) == 0x000670, "Member 'FRHAPI_Session::PlatformSession_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, PlatformScouts_Optional) == 0x000678, "Member 'FRHAPI_Session::PlatformScouts_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, PlatformScouts_IsSet) == 0x0006C8, "Member 'FRHAPI_Session::PlatformScouts_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, CustomData_Optional) == 0x0006D0, "Member 'FRHAPI_Session::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, CustomData_IsSet) == 0x000720, "Member 'FRHAPI_Session::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, Created) == 0x000728, "Member 'FRHAPI_Session::Created' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, RegionId_Optional) == 0x000730, "Member 'FRHAPI_Session::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, RegionId_IsSet) == 0x000740, "Member 'FRHAPI_Session::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, CreatedByMatchmaking_Optional) == 0x000741, "Member 'FRHAPI_Session::CreatedByMatchmaking_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Session, CreatedByMatchmaking_IsSet) == 0x000742, "Member 'FRHAPI_Session::CreatedByMatchmaking_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Rule
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_Rule final : public FRHAPI_Model
{
public:
	ERHAPI_RuleType                               RuleType;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Operation                              ComparisonOperation;                               // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ComparisonValue_Optional;                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ComparisonValue_IsSet;                             // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           ComparisonValueSet_Optional;                       // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ComparisonValueSet_IsSet;                          // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Rule) == 0x000008, "Wrong alignment on FRHAPI_Rule");
static_assert(sizeof(FRHAPI_Rule) == 0x000078, "Wrong size on FRHAPI_Rule");
static_assert(offsetof(FRHAPI_Rule, RuleType) == 0x000008, "Member 'FRHAPI_Rule::RuleType' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ComparisonOperation) == 0x000009, "Member 'FRHAPI_Rule::ComparisonOperation' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ComparisonValue_Optional) == 0x00000C, "Member 'FRHAPI_Rule::ComparisonValue_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ComparisonValue_IsSet) == 0x000010, "Member 'FRHAPI_Rule::ComparisonValue_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ComparisonValueSet_Optional) == 0x000018, "Member 'FRHAPI_Rule::ComparisonValueSet_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ComparisonValueSet_IsSet) == 0x000068, "Member 'FRHAPI_Rule::ComparisonValueSet_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ItemId_Optional) == 0x00006C, "Member 'FRHAPI_Rule::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Rule, ItemId_IsSet) == 0x000070, "Member 'FRHAPI_Rule::ItemId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingRuleset
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_MatchMakingRuleset final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_Rule>                    Rules_Optional;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Rules_IsSet;                                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Determiner                             Determiner_Optional;                               // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Determiner_IsSet;                                  // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayersToValidate                      PlayersToValidate_Optional;                        // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayersToValidate_IsSet;                           // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchMakingRuleset) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingRuleset");
static_assert(sizeof(FRHAPI_MatchMakingRuleset) == 0x000020, "Wrong size on FRHAPI_MatchMakingRuleset");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, Rules_Optional) == 0x000008, "Member 'FRHAPI_MatchMakingRuleset::Rules_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, Rules_IsSet) == 0x000018, "Member 'FRHAPI_MatchMakingRuleset::Rules_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, Determiner_Optional) == 0x000019, "Member 'FRHAPI_MatchMakingRuleset::Determiner_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, Determiner_IsSet) == 0x00001A, "Member 'FRHAPI_MatchMakingRuleset::Determiner_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, PlayersToValidate_Optional) == 0x00001B, "Member 'FRHAPI_MatchMakingRuleset::PlayersToValidate_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingRuleset, PlayersToValidate_IsSet) == 0x00001C, "Member 'FRHAPI_MatchMakingRuleset::PlayersToValidate_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingSessionRequest
// 0x0170 (0x0178 - 0x0008)
struct FRHAPI_MatchMakingSessionRequest final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionTeam>             Teams;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            SessionTickets_Optional;                           // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          SessionTickets_IsSet;                              // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Sessions_Optional;                                 // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceLaunchTemplateId_Optional;                 // 0x0084(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceLaunchTemplateId_IsSet;                    // 0x0094(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  InstanceRequestTemplateId_Optional;                // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceRequestTemplateId_IsSet;                   // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId;                                          // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x0124(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x0134(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackfillId_Optional;                               // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BackfillId_IsSet;                                  // 0x0148(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              MatchCreateRequestTime;                            // 0x0150(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvaluationScore_Optional;                          // 0x0158(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EvaluationScore_IsSet;                             // 0x015C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RankQuality_Optional;                              // 0x0160(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RankQuality_IsSet;                                 // 0x0164(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchMakingProfileId;                              // 0x0168(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchMakingSessionRequest) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingSessionRequest");
static_assert(sizeof(FRHAPI_MatchMakingSessionRequest) == 0x000178, "Wrong size on FRHAPI_MatchMakingSessionRequest");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, Teams) == 0x000008, "Member 'FRHAPI_MatchMakingSessionRequest::Teams' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, SessionTickets_Optional) == 0x000018, "Member 'FRHAPI_MatchMakingSessionRequest::SessionTickets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, SessionTickets_IsSet) == 0x000068, "Member 'FRHAPI_MatchMakingSessionRequest::SessionTickets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, Sessions_Optional) == 0x000070, "Member 'FRHAPI_MatchMakingSessionRequest::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, Sessions_IsSet) == 0x000080, "Member 'FRHAPI_MatchMakingSessionRequest::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, InstanceLaunchTemplateId_Optional) == 0x000084, "Member 'FRHAPI_MatchMakingSessionRequest::InstanceLaunchTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, InstanceLaunchTemplateId_IsSet) == 0x000094, "Member 'FRHAPI_MatchMakingSessionRequest::InstanceLaunchTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, InstanceRequestTemplateId_Optional) == 0x000098, "Member 'FRHAPI_MatchMakingSessionRequest::InstanceRequestTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, InstanceRequestTemplateId_IsSet) == 0x0000A8, "Member 'FRHAPI_MatchMakingSessionRequest::InstanceRequestTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, RegionId) == 0x0000B0, "Member 'FRHAPI_MatchMakingSessionRequest::RegionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, MatchID) == 0x0000C0, "Member 'FRHAPI_MatchMakingSessionRequest::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, CustomData_Optional) == 0x0000D0, "Member 'FRHAPI_MatchMakingSessionRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, CustomData_IsSet) == 0x000120, "Member 'FRHAPI_MatchMakingSessionRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, HostPlayerUuid_Optional) == 0x000124, "Member 'FRHAPI_MatchMakingSessionRequest::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, HostPlayerUuid_IsSet) == 0x000134, "Member 'FRHAPI_MatchMakingSessionRequest::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, BackfillId_Optional) == 0x000138, "Member 'FRHAPI_MatchMakingSessionRequest::BackfillId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, BackfillId_IsSet) == 0x000148, "Member 'FRHAPI_MatchMakingSessionRequest::BackfillId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, MatchCreateRequestTime) == 0x000150, "Member 'FRHAPI_MatchMakingSessionRequest::MatchCreateRequestTime' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, EvaluationScore_Optional) == 0x000158, "Member 'FRHAPI_MatchMakingSessionRequest::EvaluationScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, EvaluationScore_IsSet) == 0x00015C, "Member 'FRHAPI_MatchMakingSessionRequest::EvaluationScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, RankQuality_Optional) == 0x000160, "Member 'FRHAPI_MatchMakingSessionRequest::RankQuality_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, RankQuality_IsSet) == 0x000164, "Member 'FRHAPI_MatchMakingSessionRequest::RankQuality_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingSessionRequest, MatchMakingProfileId) == 0x000168, "Member 'FRHAPI_MatchMakingSessionRequest::MatchMakingProfileId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingTemplate
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_MatchMakingTemplate final : public FRHAPI_Model
{
public:
	struct FGuid                                  MatchMakingTemplateId_Optional;                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchMakingTemplateId_IsSet;                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MMRGroupingMethod                      MmrGroupingMethod;                                 // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchMakingRuleset              Ruleset_Optional;                                  // 0x0020(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ruleset_IsSet;                                     // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchMakingProfile>      Profiles;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchMakingTemplate) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingTemplate");
static_assert(sizeof(FRHAPI_MatchMakingTemplate) == 0x000058, "Wrong size on FRHAPI_MatchMakingTemplate");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, MatchMakingTemplateId_Optional) == 0x000008, "Member 'FRHAPI_MatchMakingTemplate::MatchMakingTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, MatchMakingTemplateId_IsSet) == 0x000018, "Member 'FRHAPI_MatchMakingTemplate::MatchMakingTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, MmrGroupingMethod) == 0x000019, "Member 'FRHAPI_MatchMakingTemplate::MmrGroupingMethod' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, Ruleset_Optional) == 0x000020, "Member 'FRHAPI_MatchMakingTemplate::Ruleset_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, Ruleset_IsSet) == 0x000040, "Member 'FRHAPI_MatchMakingTemplate::Ruleset_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplate, Profiles) == 0x000048, "Member 'FRHAPI_MatchMakingTemplate::Profiles' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingTemplateGroup
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_MatchMakingTemplateGroup final : public FRHAPI_Model
{
public:
	struct FGuid                                  TemplateGroupId;                                   // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MatchMakingTemplate>     TemplateOptions;                                   // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   RequiredItemIds_Optional;                          // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RequiredItemIds_IsSet;                             // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchMakingTemplateGroup) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingTemplateGroup");
static_assert(sizeof(FRHAPI_MatchMakingTemplateGroup) == 0x000080, "Wrong size on FRHAPI_MatchMakingTemplateGroup");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroup, TemplateGroupId) == 0x000008, "Member 'FRHAPI_MatchMakingTemplateGroup::TemplateGroupId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroup, TemplateOptions) == 0x000018, "Member 'FRHAPI_MatchMakingTemplateGroup::TemplateOptions' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroup, RequiredItemIds_Optional) == 0x000028, "Member 'FRHAPI_MatchMakingTemplateGroup::RequiredItemIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroup, RequiredItemIds_IsSet) == 0x000078, "Member 'FRHAPI_MatchMakingTemplateGroup::RequiredItemIds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingTemplateV2
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_MatchMakingTemplateV2 final : public FRHAPI_Model
{
public:
	struct FGuid                                  MatchMakingTemplateId_Optional;                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchMakingTemplateId_IsSet;                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MMRGroupingMethod                      MmrGroupingMethod;                                 // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_MatchMakingRuleset              Ruleset_Optional;                                  // 0x0020(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ruleset_IsSet;                                     // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchMakingProfileV2>    Profiles;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchMakingTemplateV2) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingTemplateV2");
static_assert(sizeof(FRHAPI_MatchMakingTemplateV2) == 0x000058, "Wrong size on FRHAPI_MatchMakingTemplateV2");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, MatchMakingTemplateId_Optional) == 0x000008, "Member 'FRHAPI_MatchMakingTemplateV2::MatchMakingTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, MatchMakingTemplateId_IsSet) == 0x000018, "Member 'FRHAPI_MatchMakingTemplateV2::MatchMakingTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, MmrGroupingMethod) == 0x000019, "Member 'FRHAPI_MatchMakingTemplateV2::MmrGroupingMethod' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, Ruleset_Optional) == 0x000020, "Member 'FRHAPI_MatchMakingTemplateV2::Ruleset_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, Ruleset_IsSet) == 0x000040, "Member 'FRHAPI_MatchMakingTemplateV2::Ruleset_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateV2, Profiles) == 0x000048, "Member 'FRHAPI_MatchMakingTemplateV2::Profiles' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchMakingTemplateGroupV2
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_MatchMakingTemplateGroupV2 final : public FRHAPI_Model
{
public:
	struct FGuid                                  MatchMakingTemplateGroupId;                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MatchMakingTemplateV2>   TemplateOptions;                                   // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<int32>                                   RequiredItemIds_Optional;                          // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RequiredItemIds_IsSet;                             // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiresAllPlayersItems_Optional;                  // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiresAllPlayersItems_IsSet;                     // 0x007A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludesSessionRule_Optional;                      // 0x007B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludesSessionRule_IsSet;                         // 0x007C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchMakingTemplateGroupV2) == 0x000008, "Wrong alignment on FRHAPI_MatchMakingTemplateGroupV2");
static_assert(sizeof(FRHAPI_MatchMakingTemplateGroupV2) == 0x000080, "Wrong size on FRHAPI_MatchMakingTemplateGroupV2");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, MatchMakingTemplateGroupId) == 0x000008, "Member 'FRHAPI_MatchMakingTemplateGroupV2::MatchMakingTemplateGroupId' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, TemplateOptions) == 0x000018, "Member 'FRHAPI_MatchMakingTemplateGroupV2::TemplateOptions' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, RequiredItemIds_Optional) == 0x000028, "Member 'FRHAPI_MatchMakingTemplateGroupV2::RequiredItemIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, RequiredItemIds_IsSet) == 0x000078, "Member 'FRHAPI_MatchMakingTemplateGroupV2::RequiredItemIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, RequiresAllPlayersItems_Optional) == 0x000079, "Member 'FRHAPI_MatchMakingTemplateGroupV2::RequiresAllPlayersItems_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, RequiresAllPlayersItems_IsSet) == 0x00007A, "Member 'FRHAPI_MatchMakingTemplateGroupV2::RequiresAllPlayersItems_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, IncludesSessionRule_Optional) == 0x00007B, "Member 'FRHAPI_MatchMakingTemplateGroupV2::IncludesSessionRule_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchMakingTemplateGroupV2, IncludesSessionRule_IsSet) == 0x00007C, "Member 'FRHAPI_MatchMakingTemplateGroupV2::IncludesSessionRule_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchPlayerRequest
// 0x0100 (0x0108 - 0x0008)
struct FRHAPI_MatchPlayerRequest final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TeamId_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartySessionId_Optional;                           // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsSet;                              // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PartySessionId_IsNull;                             // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Placement_Optional;                                // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsSet;                                   // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Placement_IsNull;                                  // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              JoinedMatchTimestamp_Optional;                     // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsSet;                        // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          JoinedMatchTimestamp_IsNull;                       // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LeftMatchTimestamp_Optional;                       // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsSet;                          // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftMatchTimestamp_IsNull;                         // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartingRank_Optional;                             // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsSet;                                // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartingRank_IsNull;                               // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FinishingRank_Optional;                            // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsSet;                               // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FinishingRank_IsNull;                              // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x00B0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchPlayerRequest) == 0x000008, "Wrong alignment on FRHAPI_MatchPlayerRequest");
static_assert(sizeof(FRHAPI_MatchPlayerRequest) == 0x000108, "Wrong size on FRHAPI_MatchPlayerRequest");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, PlayerUuid_Optional) == 0x000008, "Member 'FRHAPI_MatchPlayerRequest::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, PlayerUuid_IsSet) == 0x000018, "Member 'FRHAPI_MatchPlayerRequest::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, TeamId_Optional) == 0x000020, "Member 'FRHAPI_MatchPlayerRequest::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, TeamId_IsSet) == 0x000030, "Member 'FRHAPI_MatchPlayerRequest::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, TeamId_IsNull) == 0x000031, "Member 'FRHAPI_MatchPlayerRequest::TeamId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, PartySessionId_Optional) == 0x000038, "Member 'FRHAPI_MatchPlayerRequest::PartySessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, PartySessionId_IsSet) == 0x000048, "Member 'FRHAPI_MatchPlayerRequest::PartySessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, PartySessionId_IsNull) == 0x000049, "Member 'FRHAPI_MatchPlayerRequest::PartySessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, Placement_Optional) == 0x00004C, "Member 'FRHAPI_MatchPlayerRequest::Placement_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, Placement_IsSet) == 0x000050, "Member 'FRHAPI_MatchPlayerRequest::Placement_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, Placement_IsNull) == 0x000051, "Member 'FRHAPI_MatchPlayerRequest::Placement_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, JoinedMatchTimestamp_Optional) == 0x000058, "Member 'FRHAPI_MatchPlayerRequest::JoinedMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, JoinedMatchTimestamp_IsSet) == 0x000060, "Member 'FRHAPI_MatchPlayerRequest::JoinedMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, JoinedMatchTimestamp_IsNull) == 0x000061, "Member 'FRHAPI_MatchPlayerRequest::JoinedMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, LeftMatchTimestamp_Optional) == 0x000068, "Member 'FRHAPI_MatchPlayerRequest::LeftMatchTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, LeftMatchTimestamp_IsSet) == 0x000070, "Member 'FRHAPI_MatchPlayerRequest::LeftMatchTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, LeftMatchTimestamp_IsNull) == 0x000071, "Member 'FRHAPI_MatchPlayerRequest::LeftMatchTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, DurationSeconds_Optional) == 0x000074, "Member 'FRHAPI_MatchPlayerRequest::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, DurationSeconds_IsSet) == 0x000078, "Member 'FRHAPI_MatchPlayerRequest::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, DurationSeconds_IsNull) == 0x000079, "Member 'FRHAPI_MatchPlayerRequest::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, StartingRank_Optional) == 0x000080, "Member 'FRHAPI_MatchPlayerRequest::StartingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, StartingRank_IsSet) == 0x000090, "Member 'FRHAPI_MatchPlayerRequest::StartingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, StartingRank_IsNull) == 0x000091, "Member 'FRHAPI_MatchPlayerRequest::StartingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, FinishingRank_Optional) == 0x000098, "Member 'FRHAPI_MatchPlayerRequest::FinishingRank_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, FinishingRank_IsSet) == 0x0000A8, "Member 'FRHAPI_MatchPlayerRequest::FinishingRank_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, FinishingRank_IsNull) == 0x0000A9, "Member 'FRHAPI_MatchPlayerRequest::FinishingRank_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, CustomData_Optional) == 0x0000B0, "Member 'FRHAPI_MatchPlayerRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, CustomData_IsSet) == 0x000100, "Member 'FRHAPI_MatchPlayerRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchPlayerRequest, CustomData_IsNull) == 0x000101, "Member 'FRHAPI_MatchPlayerRequest::CustomData_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UpdateBackfillRequest
// 0x0158 (0x0160 - 0x0008)
struct FRHAPI_UpdateBackfillRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_AdditionalJoinParams            AdditionalJoinParams_Optional;                     // 0x0018(0x0128)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AdditionalJoinParams_IsSet;                        // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_BackfillTeam>            Teams_Optional;                                    // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Teams_IsSet;                                       // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_UpdateBackfillRequest) == 0x000008, "Wrong alignment on FRHAPI_UpdateBackfillRequest");
static_assert(sizeof(FRHAPI_UpdateBackfillRequest) == 0x000160, "Wrong size on FRHAPI_UpdateBackfillRequest");
static_assert(offsetof(FRHAPI_UpdateBackfillRequest, InstanceId) == 0x000008, "Member 'FRHAPI_UpdateBackfillRequest::InstanceId' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateBackfillRequest, AdditionalJoinParams_Optional) == 0x000018, "Member 'FRHAPI_UpdateBackfillRequest::AdditionalJoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateBackfillRequest, AdditionalJoinParams_IsSet) == 0x000140, "Member 'FRHAPI_UpdateBackfillRequest::AdditionalJoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateBackfillRequest, Teams_Optional) == 0x000148, "Member 'FRHAPI_UpdateBackfillRequest::Teams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateBackfillRequest, Teams_IsSet) == 0x000158, "Member 'FRHAPI_UpdateBackfillRequest::Teams_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchSegmentRequest
// 0x0120 (0x0128 - 0x0008)
struct FRHAPI_MatchSegmentRequest final : public FRHAPI_Model
{
public:
	class FString                                 MatchSegment;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type_Optional;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0058(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x00F8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchPlayerRequest>      Players_Optional;                                  // 0x0110(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchSegmentRequest) == 0x000008, "Wrong alignment on FRHAPI_MatchSegmentRequest");
static_assert(sizeof(FRHAPI_MatchSegmentRequest) == 0x000128, "Wrong size on FRHAPI_MatchSegmentRequest");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, MatchSegment) == 0x000008, "Member 'FRHAPI_MatchSegmentRequest::MatchSegment' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Type_Optional) == 0x000018, "Member 'FRHAPI_MatchSegmentRequest::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Type_IsSet) == 0x000028, "Member 'FRHAPI_MatchSegmentRequest::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Type_IsNull) == 0x000029, "Member 'FRHAPI_MatchSegmentRequest::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, State_Optional) == 0x00002A, "Member 'FRHAPI_MatchSegmentRequest::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, State_IsSet) == 0x00002B, "Member 'FRHAPI_MatchSegmentRequest::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, State_IsNull) == 0x00002C, "Member 'FRHAPI_MatchSegmentRequest::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, StartTimestamp_Optional) == 0x000030, "Member 'FRHAPI_MatchSegmentRequest::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, StartTimestamp_IsSet) == 0x000038, "Member 'FRHAPI_MatchSegmentRequest::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, StartTimestamp_IsNull) == 0x000039, "Member 'FRHAPI_MatchSegmentRequest::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, EndTimestamp_Optional) == 0x000040, "Member 'FRHAPI_MatchSegmentRequest::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, EndTimestamp_IsSet) == 0x000048, "Member 'FRHAPI_MatchSegmentRequest::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, EndTimestamp_IsNull) == 0x000049, "Member 'FRHAPI_MatchSegmentRequest::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, DurationSeconds_Optional) == 0x00004C, "Member 'FRHAPI_MatchSegmentRequest::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, DurationSeconds_IsSet) == 0x000050, "Member 'FRHAPI_MatchSegmentRequest::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, DurationSeconds_IsNull) == 0x000051, "Member 'FRHAPI_MatchSegmentRequest::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CustomData_Optional) == 0x000058, "Member 'FRHAPI_MatchSegmentRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CustomData_IsSet) == 0x0000A8, "Member 'FRHAPI_MatchSegmentRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CustomData_IsNull) == 0x0000A9, "Member 'FRHAPI_MatchSegmentRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CorrelationId_Optional) == 0x0000B0, "Member 'FRHAPI_MatchSegmentRequest::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CorrelationId_IsSet) == 0x0000C0, "Member 'FRHAPI_MatchSegmentRequest::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, CorrelationId_IsNull) == 0x0000C1, "Member 'FRHAPI_MatchSegmentRequest::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Sessions_Optional) == 0x0000C8, "Member 'FRHAPI_MatchSegmentRequest::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Sessions_IsSet) == 0x0000D8, "Member 'FRHAPI_MatchSegmentRequest::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Instances_Optional) == 0x0000E0, "Member 'FRHAPI_MatchSegmentRequest::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Instances_IsSet) == 0x0000F0, "Member 'FRHAPI_MatchSegmentRequest::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Allocations_Optional) == 0x0000F8, "Member 'FRHAPI_MatchSegmentRequest::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Allocations_IsSet) == 0x000108, "Member 'FRHAPI_MatchSegmentRequest::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Players_Optional) == 0x000110, "Member 'FRHAPI_MatchSegmentRequest::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentRequest, Players_IsSet) == 0x000120, "Member 'FRHAPI_MatchSegmentRequest::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchRequest
// 0x0128 (0x0130 - 0x0008)
struct FRHAPI_MatchRequest final : public FRHAPI_Model
{
public:
	class FString                                 Type_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchPlayerRequest>      Players_Optional;                                  // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSegmentRequest>     Segments_Optional;                                 // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Segments_IsSet;                                    // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchRequest) == 0x000008, "Wrong alignment on FRHAPI_MatchRequest");
static_assert(sizeof(FRHAPI_MatchRequest) == 0x000130, "Wrong size on FRHAPI_MatchRequest");
static_assert(offsetof(FRHAPI_MatchRequest, Type_Optional) == 0x000008, "Member 'FRHAPI_MatchRequest::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Type_IsSet) == 0x000018, "Member 'FRHAPI_MatchRequest::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Type_IsNull) == 0x000019, "Member 'FRHAPI_MatchRequest::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, State_Optional) == 0x00001A, "Member 'FRHAPI_MatchRequest::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, State_IsSet) == 0x00001B, "Member 'FRHAPI_MatchRequest::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, State_IsNull) == 0x00001C, "Member 'FRHAPI_MatchRequest::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, StartTimestamp_Optional) == 0x000020, "Member 'FRHAPI_MatchRequest::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, StartTimestamp_IsSet) == 0x000028, "Member 'FRHAPI_MatchRequest::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, StartTimestamp_IsNull) == 0x000029, "Member 'FRHAPI_MatchRequest::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, EndTimestamp_Optional) == 0x000030, "Member 'FRHAPI_MatchRequest::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, EndTimestamp_IsSet) == 0x000038, "Member 'FRHAPI_MatchRequest::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, EndTimestamp_IsNull) == 0x000039, "Member 'FRHAPI_MatchRequest::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, DurationSeconds_Optional) == 0x00003C, "Member 'FRHAPI_MatchRequest::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, DurationSeconds_IsSet) == 0x000040, "Member 'FRHAPI_MatchRequest::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, DurationSeconds_IsNull) == 0x000041, "Member 'FRHAPI_MatchRequest::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CustomData_Optional) == 0x000048, "Member 'FRHAPI_MatchRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CustomData_IsSet) == 0x000098, "Member 'FRHAPI_MatchRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CustomData_IsNull) == 0x000099, "Member 'FRHAPI_MatchRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CorrelationId_Optional) == 0x0000A0, "Member 'FRHAPI_MatchRequest::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CorrelationId_IsSet) == 0x0000B0, "Member 'FRHAPI_MatchRequest::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, CorrelationId_IsNull) == 0x0000B1, "Member 'FRHAPI_MatchRequest::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Sessions_Optional) == 0x0000B8, "Member 'FRHAPI_MatchRequest::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Sessions_IsSet) == 0x0000C8, "Member 'FRHAPI_MatchRequest::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Instances_Optional) == 0x0000D0, "Member 'FRHAPI_MatchRequest::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Instances_IsSet) == 0x0000E0, "Member 'FRHAPI_MatchRequest::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Allocations_Optional) == 0x0000E8, "Member 'FRHAPI_MatchRequest::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Allocations_IsSet) == 0x0000F8, "Member 'FRHAPI_MatchRequest::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Players_Optional) == 0x000100, "Member 'FRHAPI_MatchRequest::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Players_IsSet) == 0x000110, "Member 'FRHAPI_MatchRequest::Players_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Segments_Optional) == 0x000118, "Member 'FRHAPI_MatchRequest::Segments_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchRequest, Segments_IsSet) == 0x000128, "Member 'FRHAPI_MatchRequest::Segments_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchSegmentPatchRequest
// 0x0110 (0x0118 - 0x0008)
struct FRHAPI_MatchSegmentPatchRequest final : public FRHAPI_Model
{
public:
	class FString                                 Type_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Type_IsNull;                                       // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchState                             State_Optional;                                    // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsSet;                                       // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          State_IsNull;                                      // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartTimestamp_Optional;                           // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsSet;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartTimestamp_IsNull;                             // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndTimestamp_Optional;                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndTimestamp_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DurationSeconds_Optional;                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsSet;                             // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DurationSeconds_IsNull;                            // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CorrelationId_Optional;                            // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsSet;                               // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CorrelationId_IsNull;                              // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchSession>            Sessions_Optional;                                 // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchInstance>           Instances_Optional;                                // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Instances_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchAllocation>         Allocations_Optional;                              // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Allocations_IsSet;                                 // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_MatchPlayerRequest>      Players_Optional;                                  // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_MatchSegmentPatchRequest) == 0x000008, "Wrong alignment on FRHAPI_MatchSegmentPatchRequest");
static_assert(sizeof(FRHAPI_MatchSegmentPatchRequest) == 0x000118, "Wrong size on FRHAPI_MatchSegmentPatchRequest");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Type_Optional) == 0x000008, "Member 'FRHAPI_MatchSegmentPatchRequest::Type_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Type_IsSet) == 0x000018, "Member 'FRHAPI_MatchSegmentPatchRequest::Type_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Type_IsNull) == 0x000019, "Member 'FRHAPI_MatchSegmentPatchRequest::Type_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, State_Optional) == 0x00001A, "Member 'FRHAPI_MatchSegmentPatchRequest::State_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, State_IsSet) == 0x00001B, "Member 'FRHAPI_MatchSegmentPatchRequest::State_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, State_IsNull) == 0x00001C, "Member 'FRHAPI_MatchSegmentPatchRequest::State_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, StartTimestamp_Optional) == 0x000020, "Member 'FRHAPI_MatchSegmentPatchRequest::StartTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, StartTimestamp_IsSet) == 0x000028, "Member 'FRHAPI_MatchSegmentPatchRequest::StartTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, StartTimestamp_IsNull) == 0x000029, "Member 'FRHAPI_MatchSegmentPatchRequest::StartTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, EndTimestamp_Optional) == 0x000030, "Member 'FRHAPI_MatchSegmentPatchRequest::EndTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, EndTimestamp_IsSet) == 0x000038, "Member 'FRHAPI_MatchSegmentPatchRequest::EndTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, EndTimestamp_IsNull) == 0x000039, "Member 'FRHAPI_MatchSegmentPatchRequest::EndTimestamp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, DurationSeconds_Optional) == 0x00003C, "Member 'FRHAPI_MatchSegmentPatchRequest::DurationSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, DurationSeconds_IsSet) == 0x000040, "Member 'FRHAPI_MatchSegmentPatchRequest::DurationSeconds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, DurationSeconds_IsNull) == 0x000041, "Member 'FRHAPI_MatchSegmentPatchRequest::DurationSeconds_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CustomData_Optional) == 0x000048, "Member 'FRHAPI_MatchSegmentPatchRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CustomData_IsSet) == 0x000098, "Member 'FRHAPI_MatchSegmentPatchRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CustomData_IsNull) == 0x000099, "Member 'FRHAPI_MatchSegmentPatchRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CorrelationId_Optional) == 0x0000A0, "Member 'FRHAPI_MatchSegmentPatchRequest::CorrelationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CorrelationId_IsSet) == 0x0000B0, "Member 'FRHAPI_MatchSegmentPatchRequest::CorrelationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, CorrelationId_IsNull) == 0x0000B1, "Member 'FRHAPI_MatchSegmentPatchRequest::CorrelationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Sessions_Optional) == 0x0000B8, "Member 'FRHAPI_MatchSegmentPatchRequest::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Sessions_IsSet) == 0x0000C8, "Member 'FRHAPI_MatchSegmentPatchRequest::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Instances_Optional) == 0x0000D0, "Member 'FRHAPI_MatchSegmentPatchRequest::Instances_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Instances_IsSet) == 0x0000E0, "Member 'FRHAPI_MatchSegmentPatchRequest::Instances_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Allocations_Optional) == 0x0000E8, "Member 'FRHAPI_MatchSegmentPatchRequest::Allocations_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Allocations_IsSet) == 0x0000F8, "Member 'FRHAPI_MatchSegmentPatchRequest::Allocations_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Players_Optional) == 0x000100, "Member 'FRHAPI_MatchSegmentPatchRequest::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_MatchSegmentPatchRequest, Players_IsSet) == 0x000110, "Member 'FRHAPI_MatchSegmentPatchRequest::Players_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_MatchTimeline
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_MatchTimeline final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_MatchTimelineEvent>      Events;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_MatchTimeline) == 0x000008, "Wrong alignment on FRHAPI_MatchTimeline");
static_assert(sizeof(FRHAPI_MatchTimeline) == 0x000018, "Wrong size on FRHAPI_MatchTimeline");
static_assert(offsetof(FRHAPI_MatchTimeline, Events) == 0x000008, "Member 'FRHAPI_MatchTimeline::Events' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UpdatePersonInfoRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_UpdatePersonInfoRequest final : public FRHAPI_Model
{
public:
	class FString                                 Email;                                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_UpdatePersonInfoRequest) == 0x000008, "Wrong alignment on FRHAPI_UpdatePersonInfoRequest");
static_assert(sizeof(FRHAPI_UpdatePersonInfoRequest) == 0x000018, "Wrong size on FRHAPI_UpdatePersonInfoRequest");
static_assert(offsetof(FRHAPI_UpdatePersonInfoRequest, Email) == 0x000008, "Member 'FRHAPI_UpdatePersonInfoRequest::Email' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Notes
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_Notes final : public FRHAPI_Model
{
public:
	class FString                                 Notes_Optional;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Notes_IsSet;                                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Notes) == 0x000008, "Wrong alignment on FRHAPI_Notes");
static_assert(sizeof(FRHAPI_Notes) == 0x000020, "Wrong size on FRHAPI_Notes");
static_assert(offsetof(FRHAPI_Notes, Notes_Optional) == 0x000008, "Member 'FRHAPI_Notes::Notes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Notes, Notes_IsSet) == 0x000018, "Member 'FRHAPI_Notes::Notes_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_NotificationCreate
// 0x0098 (0x00A0 - 0x0008)
struct FRHAPI_NotificationCreate final : public FRHAPI_Model
{
public:
	class FString                                 Message;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RhUrl_Optional;                                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RhUrl_IsSet;                                       // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Etag_Optional;                                     // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Etag_IsSet;                                        // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_NotificationCreate) == 0x000008, "Wrong alignment on FRHAPI_NotificationCreate");
static_assert(sizeof(FRHAPI_NotificationCreate) == 0x0000A0, "Wrong size on FRHAPI_NotificationCreate");
static_assert(offsetof(FRHAPI_NotificationCreate, Message) == 0x000008, "Member 'FRHAPI_NotificationCreate::Message' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, RhUrl_Optional) == 0x000018, "Member 'FRHAPI_NotificationCreate::RhUrl_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, RhUrl_IsSet) == 0x000028, "Member 'FRHAPI_NotificationCreate::RhUrl_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, CustomData_Optional) == 0x000030, "Member 'FRHAPI_NotificationCreate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, CustomData_IsSet) == 0x000080, "Member 'FRHAPI_NotificationCreate::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, Etag_Optional) == 0x000088, "Member 'FRHAPI_NotificationCreate::Etag_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_NotificationCreate, Etag_IsSet) == 0x000098, "Member 'FRHAPI_NotificationCreate::Etag_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TokenRequest
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_TokenRequest final : public FRHAPI_Model
{
public:
	ERHAPI_OAuthGrantType                         GrantType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_TokenRequest) == 0x000008, "Wrong alignment on FRHAPI_TokenRequest");
static_assert(sizeof(FRHAPI_TokenRequest) == 0x000010, "Wrong size on FRHAPI_TokenRequest");
static_assert(offsetof(FRHAPI_TokenRequest, GrantType) == 0x000008, "Member 'FRHAPI_TokenRequest::GrantType' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_NotificationCreateResult
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_NotificationCreateResult final : public FRHAPI_Model
{
public:
	class FString                                 NotificationId;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_NotificationCreateResult) == 0x000008, "Wrong alignment on FRHAPI_NotificationCreateResult");
static_assert(sizeof(FRHAPI_NotificationCreateResult) == 0x000018, "Wrong size on FRHAPI_NotificationCreateResult");
static_assert(offsetof(FRHAPI_NotificationCreateResult, NotificationId) == 0x000008, "Member 'FRHAPI_NotificationCreateResult::NotificationId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_NotificationCreates
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_NotificationCreates final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_NotificationCreate>      Notifications;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_NotificationCreates) == 0x000008, "Wrong alignment on FRHAPI_NotificationCreates");
static_assert(sizeof(FRHAPI_NotificationCreates) == 0x000018, "Wrong size on FRHAPI_NotificationCreates");
static_assert(offsetof(FRHAPI_NotificationCreates, Notifications) == 0x000008, "Member 'FRHAPI_NotificationCreates::Notifications' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_OAuthTokenExchange
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_OAuthTokenExchange final : public FRHAPI_Model
{
public:
	ERHAPI_OAuthTokenEchangeGrantType             GrantType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Code;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedEula_Optional;                             // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedEula_IsSet;                                // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedTos_Optional;                              // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedTos_IsSet;                                 // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedPrivacyPolicy_Optional;                    // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcceptedPrivacyPolicy_IsSet;                       // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_OAuthTokenExchange) == 0x000008, "Wrong alignment on FRHAPI_OAuthTokenExchange");
static_assert(sizeof(FRHAPI_OAuthTokenExchange) == 0x000028, "Wrong size on FRHAPI_OAuthTokenExchange");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, GrantType) == 0x000008, "Member 'FRHAPI_OAuthTokenExchange::GrantType' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, Code) == 0x000010, "Member 'FRHAPI_OAuthTokenExchange::Code' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedEula_Optional) == 0x000020, "Member 'FRHAPI_OAuthTokenExchange::AcceptedEula_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedEula_IsSet) == 0x000021, "Member 'FRHAPI_OAuthTokenExchange::AcceptedEula_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedTos_Optional) == 0x000022, "Member 'FRHAPI_OAuthTokenExchange::AcceptedTos_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedTos_IsSet) == 0x000023, "Member 'FRHAPI_OAuthTokenExchange::AcceptedTos_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedPrivacyPolicy_Optional) == 0x000024, "Member 'FRHAPI_OAuthTokenExchange::AcceptedPrivacyPolicy_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenExchange, AcceptedPrivacyPolicy_IsSet) == 0x000025, "Member 'FRHAPI_OAuthTokenExchange::AcceptedPrivacyPolicy_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_OAuthTokenResponse
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_OAuthTokenResponse final : public FRHAPI_Model
{
public:
	class FString                                 AccessToken_Optional;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AccessToken_IsSet;                                 // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RefreshToken_Optional;                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshToken_IsSet;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsEula_Optional;                                // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsEula_IsSet;                                   // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsTos_Optional;                                 // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsTos_IsSet;                                    // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsPrivacyPolicy_Optional;                       // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsPrivacyPolicy_IsSet;                          // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegeneratedCode_Optional;                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegeneratedCode_IsSet;                             // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage_Optional;                             // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorMessage_IsSet;                                // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_Restriction>             Restrictions_Optional;                             // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Restrictions_IsSet;                                // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_OAuthTokenResponse) == 0x000008, "Wrong alignment on FRHAPI_OAuthTokenResponse");
static_assert(sizeof(FRHAPI_OAuthTokenResponse) == 0x000080, "Wrong size on FRHAPI_OAuthTokenResponse");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, AccessToken_Optional) == 0x000008, "Member 'FRHAPI_OAuthTokenResponse::AccessToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, AccessToken_IsSet) == 0x000018, "Member 'FRHAPI_OAuthTokenResponse::AccessToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, RefreshToken_Optional) == 0x000020, "Member 'FRHAPI_OAuthTokenResponse::RefreshToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, RefreshToken_IsSet) == 0x000030, "Member 'FRHAPI_OAuthTokenResponse::RefreshToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsEula_Optional) == 0x000031, "Member 'FRHAPI_OAuthTokenResponse::NeedsEula_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsEula_IsSet) == 0x000032, "Member 'FRHAPI_OAuthTokenResponse::NeedsEula_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsTos_Optional) == 0x000033, "Member 'FRHAPI_OAuthTokenResponse::NeedsTos_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsTos_IsSet) == 0x000034, "Member 'FRHAPI_OAuthTokenResponse::NeedsTos_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsPrivacyPolicy_Optional) == 0x000035, "Member 'FRHAPI_OAuthTokenResponse::NeedsPrivacyPolicy_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, NeedsPrivacyPolicy_IsSet) == 0x000036, "Member 'FRHAPI_OAuthTokenResponse::NeedsPrivacyPolicy_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, RegeneratedCode_Optional) == 0x000038, "Member 'FRHAPI_OAuthTokenResponse::RegeneratedCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, RegeneratedCode_IsSet) == 0x000048, "Member 'FRHAPI_OAuthTokenResponse::RegeneratedCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, ErrorMessage_Optional) == 0x000050, "Member 'FRHAPI_OAuthTokenResponse::ErrorMessage_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, ErrorMessage_IsSet) == 0x000060, "Member 'FRHAPI_OAuthTokenResponse::ErrorMessage_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, Restrictions_Optional) == 0x000068, "Member 'FRHAPI_OAuthTokenResponse::Restrictions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_OAuthTokenResponse, Restrictions_IsSet) == 0x000078, "Member 'FRHAPI_OAuthTokenResponse::Restrictions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PagedMatchResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PagedMatchResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_MatchWithPlayers>        Matches_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Matches_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PagedMatchResponse) == 0x000008, "Wrong alignment on FRHAPI_PagedMatchResponse");
static_assert(sizeof(FRHAPI_PagedMatchResponse) == 0x000038, "Wrong size on FRHAPI_PagedMatchResponse");
static_assert(offsetof(FRHAPI_PagedMatchResponse, Matches_Optional) == 0x000008, "Member 'FRHAPI_PagedMatchResponse::Matches_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedMatchResponse, Matches_IsSet) == 0x000018, "Member 'FRHAPI_PagedMatchResponse::Matches_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedMatchResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_PagedMatchResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedMatchResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_PagedMatchResponse::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedMatchResponse, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_PagedMatchResponse::Cursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PagedPlayerMatchResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PagedPlayerMatchResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_MatchPlayerWithMatch>    PlayerMatches_Optional;                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          PlayerMatches_IsSet;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PagedPlayerMatchResponse) == 0x000008, "Wrong alignment on FRHAPI_PagedPlayerMatchResponse");
static_assert(sizeof(FRHAPI_PagedPlayerMatchResponse) == 0x000038, "Wrong size on FRHAPI_PagedPlayerMatchResponse");
static_assert(offsetof(FRHAPI_PagedPlayerMatchResponse, PlayerMatches_Optional) == 0x000008, "Member 'FRHAPI_PagedPlayerMatchResponse::PlayerMatches_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayerMatchResponse, PlayerMatches_IsSet) == 0x000018, "Member 'FRHAPI_PagedPlayerMatchResponse::PlayerMatches_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayerMatchResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_PagedPlayerMatchResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayerMatchResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_PagedPlayerMatchResponse::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayerMatchResponse, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_PagedPlayerMatchResponse::Cursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PagedPlayersResponse
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PagedPlayersResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionTeam>             Teams_Optional;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Teams_IsSet;                                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cursor;                                            // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PagedPlayersResponse) == 0x000008, "Wrong alignment on FRHAPI_PagedPlayersResponse");
static_assert(sizeof(FRHAPI_PagedPlayersResponse) == 0x000020, "Wrong size on FRHAPI_PagedPlayersResponse");
static_assert(offsetof(FRHAPI_PagedPlayersResponse, Teams_Optional) == 0x000008, "Member 'FRHAPI_PagedPlayersResponse::Teams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayersResponse, Teams_IsSet) == 0x000018, "Member 'FRHAPI_PagedPlayersResponse::Teams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PagedPlayersResponse, Cursor) == 0x00001C, "Member 'FRHAPI_PagedPlayersResponse::Cursor' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PersonEmailListRequest
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PersonEmailListRequest final : public FRHAPI_Model
{
public:
	TArray<int32>                                 EmailListIds_Optional;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          EmailListIds_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PersonEmailListRequest) == 0x000008, "Wrong alignment on FRHAPI_PersonEmailListRequest");
static_assert(sizeof(FRHAPI_PersonEmailListRequest) == 0x000020, "Wrong size on FRHAPI_PersonEmailListRequest");
static_assert(offsetof(FRHAPI_PersonEmailListRequest, EmailListIds_Optional) == 0x000008, "Member 'FRHAPI_PersonEmailListRequest::EmailListIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonEmailListRequest, EmailListIds_IsSet) == 0x000018, "Member 'FRHAPI_PersonEmailListRequest::EmailListIds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UserLinkHistoryEntry
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_UserLinkHistoryEntry final : public FRHAPI_Model
{
public:
	class FString                                 EntryId_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntryId_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x001C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PersonId_Optional;                                 // 0x0044(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0054(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivePlayerUuid_Optional;                         // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerUuid_IsSet;                            // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_LinkAction                             Action;                                            // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Timestamp_Optional;                                // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Timestamp_IsSet;                                   // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_UserLinkHistoryEntry) == 0x000008, "Wrong alignment on FRHAPI_UserLinkHistoryEntry");
static_assert(sizeof(FRHAPI_UserLinkHistoryEntry) == 0x000080, "Wrong size on FRHAPI_UserLinkHistoryEntry");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, EntryId_Optional) == 0x000008, "Member 'FRHAPI_UserLinkHistoryEntry::EntryId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, EntryId_IsSet) == 0x000018, "Member 'FRHAPI_UserLinkHistoryEntry::EntryId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PlayerUuid_Optional) == 0x00001C, "Member 'FRHAPI_UserLinkHistoryEntry::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PlayerUuid_IsSet) == 0x00002C, "Member 'FRHAPI_UserLinkHistoryEntry::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, Platform_Optional) == 0x00002D, "Member 'FRHAPI_UserLinkHistoryEntry::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, Platform_IsSet) == 0x00002E, "Member 'FRHAPI_UserLinkHistoryEntry::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PlatformUserId_Optional) == 0x000030, "Member 'FRHAPI_UserLinkHistoryEntry::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PlatformUserId_IsSet) == 0x000040, "Member 'FRHAPI_UserLinkHistoryEntry::PlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PersonId_Optional) == 0x000044, "Member 'FRHAPI_UserLinkHistoryEntry::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, PersonId_IsSet) == 0x000054, "Member 'FRHAPI_UserLinkHistoryEntry::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, ActivePlayerUuid_Optional) == 0x000058, "Member 'FRHAPI_UserLinkHistoryEntry::ActivePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, ActivePlayerUuid_IsSet) == 0x000068, "Member 'FRHAPI_UserLinkHistoryEntry::ActivePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, Action) == 0x000069, "Member 'FRHAPI_UserLinkHistoryEntry::Action' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, Timestamp_Optional) == 0x000070, "Member 'FRHAPI_UserLinkHistoryEntry::Timestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistoryEntry, Timestamp_IsSet) == 0x000078, "Member 'FRHAPI_UserLinkHistoryEntry::Timestamp_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PersonEmailListResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PersonEmailListResponse final : public FRHAPI_Model
{
public:
	TArray<int32>                                 EmailListIds;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PersonEmailListResponse) == 0x000008, "Wrong alignment on FRHAPI_PersonEmailListResponse");
static_assert(sizeof(FRHAPI_PersonEmailListResponse) == 0x000018, "Wrong size on FRHAPI_PersonEmailListResponse");
static_assert(offsetof(FRHAPI_PersonEmailListResponse, EmailListIds) == 0x000008, "Member 'FRHAPI_PersonEmailListResponse::EmailListIds' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PersonInfoResponse
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_PersonInfoResponse final : public FRHAPI_Model
{
public:
	struct FGuid                                  PersonId_Optional;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActivePlayerId_Optional;                           // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerId_IsSet;                              // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Email_Optional;                                    // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Email_IsSet;                                       // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PersonInfoResponse) == 0x000008, "Wrong alignment on FRHAPI_PersonInfoResponse");
static_assert(sizeof(FRHAPI_PersonInfoResponse) == 0x000040, "Wrong size on FRHAPI_PersonInfoResponse");
static_assert(offsetof(FRHAPI_PersonInfoResponse, PersonId_Optional) == 0x000008, "Member 'FRHAPI_PersonInfoResponse::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonInfoResponse, PersonId_IsSet) == 0x000018, "Member 'FRHAPI_PersonInfoResponse::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonInfoResponse, ActivePlayerId_Optional) == 0x00001C, "Member 'FRHAPI_PersonInfoResponse::ActivePlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonInfoResponse, ActivePlayerId_IsSet) == 0x000020, "Member 'FRHAPI_PersonInfoResponse::ActivePlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonInfoResponse, Email_Optional) == 0x000028, "Member 'FRHAPI_PersonInfoResponse::Email_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonInfoResponse, Email_IsSet) == 0x000038, "Member 'FRHAPI_PersonInfoResponse::Email_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PersonOperationRequest
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PersonOperationRequest final : public FRHAPI_Model
{
public:
	struct FGuid                                  PersonId_Optional;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PersonOperationRequest) == 0x000008, "Wrong alignment on FRHAPI_PersonOperationRequest");
static_assert(sizeof(FRHAPI_PersonOperationRequest) == 0x000038, "Wrong size on FRHAPI_PersonOperationRequest");
static_assert(offsetof(FRHAPI_PersonOperationRequest, PersonId_Optional) == 0x000008, "Member 'FRHAPI_PersonOperationRequest::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonOperationRequest, PersonId_IsSet) == 0x000018, "Member 'FRHAPI_PersonOperationRequest::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonOperationRequest, Platform_Optional) == 0x000019, "Member 'FRHAPI_PersonOperationRequest::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonOperationRequest, Platform_IsSet) == 0x00001A, "Member 'FRHAPI_PersonOperationRequest::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonOperationRequest, PlatformUserId_Optional) == 0x000020, "Member 'FRHAPI_PersonOperationRequest::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PersonOperationRequest, PlatformUserId_IsSet) == 0x000030, "Member 'FRHAPI_PersonOperationRequest::PlatformUserId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexClientScores
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PexClientScores final : public FRHAPI_Model
{
public:
	bool                                          OverallMatchScore_Optional;                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverallMatchScore_IsSet;                           // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverallMatchScore_IsNull;                          // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_Optional;                                 // 0x000B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_IsSet;                                    // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AppScore_IsNull;                                   // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_Optional;                            // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_IsSet;                               // 0x000F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameplayScore_IsNull;                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_Optional;                             // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_IsSet;                                // 0x0012(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkScore_IsNull;                               // 0x0013(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_Optional;                     // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_IsSet;                        // 0x0015(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCountScore_IsNull;                       // 0x0016(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_Optional;                           // 0x0017(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_IsSet;                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTimeScore_IsNull;                             // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_Optional;                           // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_IsSet;                              // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTimeScore_IsNull;                             // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_Optional;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_IsSet;                              // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCountScore_IsNull;                             // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_Optional;                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_IsSet;                       // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCountScore_IsNull;                      // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_Optional;                            // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_IsSet;                               // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWsScore_IsNull;                              // 0x0025(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_Optional;                            // 0x0026(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_IsSet;                               // 0x0027(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVbScore_IsNull;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_Optional;                          // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_IsSet;                             // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcessScore_IsNull;                            // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_Optional;                                // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_IsSet;                                   // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PingScore_IsNull;                                  // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_Optional;                        // 0x002F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_IsSet;                           // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossScore_IsNull;                          // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_Optional;                       // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_IsSet;                          // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossScore_IsNull;                         // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_Optional;                    // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_IsSet;                       // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnectsScore_IsNull;                      // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PexClientScores) == 0x000008, "Wrong alignment on FRHAPI_PexClientScores");
static_assert(sizeof(FRHAPI_PexClientScores) == 0x000038, "Wrong size on FRHAPI_PexClientScores");
static_assert(offsetof(FRHAPI_PexClientScores, OverallMatchScore_Optional) == 0x000008, "Member 'FRHAPI_PexClientScores::OverallMatchScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, OverallMatchScore_IsSet) == 0x000009, "Member 'FRHAPI_PexClientScores::OverallMatchScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, OverallMatchScore_IsNull) == 0x00000A, "Member 'FRHAPI_PexClientScores::OverallMatchScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, AppScore_Optional) == 0x00000B, "Member 'FRHAPI_PexClientScores::AppScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, AppScore_IsSet) == 0x00000C, "Member 'FRHAPI_PexClientScores::AppScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, AppScore_IsNull) == 0x00000D, "Member 'FRHAPI_PexClientScores::AppScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, GameplayScore_Optional) == 0x00000E, "Member 'FRHAPI_PexClientScores::GameplayScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, GameplayScore_IsSet) == 0x00000F, "Member 'FRHAPI_PexClientScores::GameplayScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, GameplayScore_IsNull) == 0x000010, "Member 'FRHAPI_PexClientScores::GameplayScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, NetworkScore_Optional) == 0x000011, "Member 'FRHAPI_PexClientScores::NetworkScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, NetworkScore_IsSet) == 0x000012, "Member 'FRHAPI_PexClientScores::NetworkScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, NetworkScore_IsNull) == 0x000013, "Member 'FRHAPI_PexClientScores::NetworkScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, ConnectionCountScore_Optional) == 0x000014, "Member 'FRHAPI_PexClientScores::ConnectionCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, ConnectionCountScore_IsSet) == 0x000015, "Member 'FRHAPI_PexClientScores::ConnectionCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, ConnectionCountScore_IsNull) == 0x000016, "Member 'FRHAPI_PexClientScores::ConnectionCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, FrameTimeScore_Optional) == 0x000017, "Member 'FRHAPI_PexClientScores::FrameTimeScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, FrameTimeScore_IsSet) == 0x000018, "Member 'FRHAPI_PexClientScores::FrameTimeScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, FrameTimeScore_IsNull) == 0x000019, "Member 'FRHAPI_PexClientScores::FrameTimeScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DeltaTimeScore_Optional) == 0x00001A, "Member 'FRHAPI_PexClientScores::DeltaTimeScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DeltaTimeScore_IsSet) == 0x00001B, "Member 'FRHAPI_PexClientScores::DeltaTimeScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DeltaTimeScore_IsNull) == 0x00001C, "Member 'FRHAPI_PexClientScores::DeltaTimeScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TickCountScore_Optional) == 0x00001D, "Member 'FRHAPI_PexClientScores::TickCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TickCountScore_IsSet) == 0x00001E, "Member 'FRHAPI_PexClientScores::TickCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TickCountScore_IsNull) == 0x00001F, "Member 'FRHAPI_PexClientScores::TickCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DelayedTickCountScore_Optional) == 0x000020, "Member 'FRHAPI_PexClientScores::DelayedTickCountScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DelayedTickCountScore_IsSet) == 0x000021, "Member 'FRHAPI_PexClientScores::DelayedTickCountScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, DelayedTickCountScore_IsNull) == 0x000022, "Member 'FRHAPI_PexClientScores::DelayedTickCountScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryWsScore_Optional) == 0x000023, "Member 'FRHAPI_PexClientScores::MemoryWsScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryWsScore_IsSet) == 0x000024, "Member 'FRHAPI_PexClientScores::MemoryWsScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryWsScore_IsNull) == 0x000025, "Member 'FRHAPI_PexClientScores::MemoryWsScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryVbScore_Optional) == 0x000026, "Member 'FRHAPI_PexClientScores::MemoryVbScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryVbScore_IsSet) == 0x000027, "Member 'FRHAPI_PexClientScores::MemoryVbScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, MemoryVbScore_IsNull) == 0x000028, "Member 'FRHAPI_PexClientScores::MemoryVbScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, CpuProcessScore_Optional) == 0x000029, "Member 'FRHAPI_PexClientScores::CpuProcessScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, CpuProcessScore_IsSet) == 0x00002A, "Member 'FRHAPI_PexClientScores::CpuProcessScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, CpuProcessScore_IsNull) == 0x00002B, "Member 'FRHAPI_PexClientScores::CpuProcessScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, PingScore_Optional) == 0x00002C, "Member 'FRHAPI_PexClientScores::PingScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, PingScore_IsSet) == 0x00002D, "Member 'FRHAPI_PexClientScores::PingScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, PingScore_IsNull) == 0x00002E, "Member 'FRHAPI_PexClientScores::PingScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, InPacketLossScore_Optional) == 0x00002F, "Member 'FRHAPI_PexClientScores::InPacketLossScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, InPacketLossScore_IsSet) == 0x000030, "Member 'FRHAPI_PexClientScores::InPacketLossScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, InPacketLossScore_IsNull) == 0x000031, "Member 'FRHAPI_PexClientScores::InPacketLossScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, OutPacketLossScore_Optional) == 0x000032, "Member 'FRHAPI_PexClientScores::OutPacketLossScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, OutPacketLossScore_IsSet) == 0x000033, "Member 'FRHAPI_PexClientScores::OutPacketLossScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, OutPacketLossScore_IsNull) == 0x000034, "Member 'FRHAPI_PexClientScores::OutPacketLossScore_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TotalDisconnectsScore_Optional) == 0x000035, "Member 'FRHAPI_PexClientScores::TotalDisconnectsScore_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TotalDisconnectsScore_IsSet) == 0x000036, "Member 'FRHAPI_PexClientScores::TotalDisconnectsScore_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientScores, TotalDisconnectsScore_IsNull) == 0x000037, "Member 'FRHAPI_PexClientScores::TotalDisconnectsScore_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexClientResponse
// 0x05F8 (0x0600 - 0x0008)
struct FRHAPI_PexClientResponse final : public FRHAPI_Model
{
public:
	struct FDateTime                              CreatedTimestamp_Optional;                         // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreatedTimestamp_IsSet;                            // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         FrameTime_Optional;                                // 0x0018(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsSet;                                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsNull;                                  // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DeltaTime_Optional;                                // 0x0048(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsSet;                                   // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsNull;                                  // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TickCount_Optional;                                // 0x0078(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsSet;                                   // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsNull;                                  // 0x00A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DelayedTickCount_Optional;                         // 0x00A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsSet;                            // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsNull;                           // 0x00D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryWs_Optional;                                 // 0x00D8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsSet;                                    // 0x0100(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsNull;                                   // 0x0101(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryVb_Optional;                                 // 0x0108(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsSet;                                    // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsNull;                                   // 0x0131(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         CpuProcess_Optional;                               // 0x0138(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsSet;                                  // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsNull;                                 // 0x0161(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_162[0x6];                                      // 0x0162(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         Ping_Optional;                                     // 0x0168(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ping_IsSet;                                        // 0x0190(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ping_IsNull;                                       // 0x0191(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPackets_Optional;                                // 0x0198(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsSet;                                   // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsNull;                                  // 0x01C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPackets_Optional;                               // 0x01C8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsSet;                                  // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsNull;                                 // 0x01F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2[0x6];                                      // 0x01F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPackets_Optional;                             // 0x01F8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsSet;                                // 0x0220(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsNull;                               // 0x0221(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLoss_Optional;                             // 0x0228(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsSet;                                // 0x0250(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsNull;                               // 0x0251(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLoss_Optional;                            // 0x0258(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsSet;                               // 0x0280(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsNull;                              // 0x0281(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLoss_Optional;                          // 0x0288(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsSet;                             // 0x02B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsNull;                            // 0x02B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x6];                                      // 0x02B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLossPct_Optional;                          // 0x02B8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsSet;                             // 0x02E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsNull;                            // 0x02E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLossPct_Optional;                         // 0x02E8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsSet;                            // 0x0310(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsNull;                           // 0x0311(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_312[0x6];                                      // 0x0312(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLossPct_Optional;                       // 0x0318(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsSet;                          // 0x0340(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsNull;                         // 0x0341(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalDisconnects_Optional;                         // 0x0348(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsSet;                            // 0x0358(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsNull;                           // 0x0359(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        MatchDuration_Optional;                            // 0x0360(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsSet;                               // 0x0370(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsNull;                              // 0x0371(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         GameThreadTime_Optional;                           // 0x0378(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          GameThreadTime_IsSet;                              // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameThreadTime_IsNull;                             // 0x03A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         RenderThreadTime_Optional;                         // 0x03A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          RenderThreadTime_IsSet;                            // 0x03D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RenderThreadTime_IsNull;                           // 0x03D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         GpuTime_Optional;                                  // 0x03D8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          GpuTime_IsSet;                                     // 0x0400(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GpuTime_IsNull;                                    // 0x0401(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexClientScores                 Scores_Optional;                                   // 0x0408(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Scores_IsSet;                                      // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Scores_IsNull;                                     // 0x0441(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0448(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId_Optional;                                 // 0x0458(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0468(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0469(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x0470(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x0480(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x0481(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x0488(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0499(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x04A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x04B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x04B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B2[0x6];                                      // 0x04B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x04B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x04C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x04C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CA[0x6];                                      // 0x04CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x04D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x04E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x04E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0x6];                                      // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x04E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x04F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x04F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FA[0x6];                                      // 0x04FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x0500(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x0510(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x0511(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_512[0x6];                                      // 0x0512(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0518(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0528(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x0529(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52A[0x2];                                      // 0x052A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x052C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x0530(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x0531(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_532[0x2];                                      // 0x0532(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x0534(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x0538(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x0539(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53A[0x2];                                      // 0x053A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x053C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x054C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x054D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54E[0x2];                                      // 0x054E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  OwningPlayerUuid_Optional;                         // 0x0550(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x0560(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x0561(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_562[0x6];                                      // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0568(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0578(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x0579(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57A[0x6];                                      // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceInfo_Optional;                               // 0x0580(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsSet;                                  // 0x0590(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsNull;                                 // 0x0591(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x0592(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0593(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x0594(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_595[0x3];                                      // 0x0595(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0598(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x05E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x05E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5EA[0x2];                                      // 0x05EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid;                                        // 0x05EC(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexClientResponse) == 0x000008, "Wrong alignment on FRHAPI_PexClientResponse");
static_assert(sizeof(FRHAPI_PexClientResponse) == 0x000600, "Wrong size on FRHAPI_PexClientResponse");
static_assert(offsetof(FRHAPI_PexClientResponse, CreatedTimestamp_Optional) == 0x000008, "Member 'FRHAPI_PexClientResponse::CreatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CreatedTimestamp_IsSet) == 0x000010, "Member 'FRHAPI_PexClientResponse::CreatedTimestamp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, FrameTime_Optional) == 0x000018, "Member 'FRHAPI_PexClientResponse::FrameTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, FrameTime_IsSet) == 0x000040, "Member 'FRHAPI_PexClientResponse::FrameTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, FrameTime_IsNull) == 0x000041, "Member 'FRHAPI_PexClientResponse::FrameTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeltaTime_Optional) == 0x000048, "Member 'FRHAPI_PexClientResponse::DeltaTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeltaTime_IsSet) == 0x000070, "Member 'FRHAPI_PexClientResponse::DeltaTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeltaTime_IsNull) == 0x000071, "Member 'FRHAPI_PexClientResponse::DeltaTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TickCount_Optional) == 0x000078, "Member 'FRHAPI_PexClientResponse::TickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TickCount_IsSet) == 0x0000A0, "Member 'FRHAPI_PexClientResponse::TickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TickCount_IsNull) == 0x0000A1, "Member 'FRHAPI_PexClientResponse::TickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DelayedTickCount_Optional) == 0x0000A8, "Member 'FRHAPI_PexClientResponse::DelayedTickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DelayedTickCount_IsSet) == 0x0000D0, "Member 'FRHAPI_PexClientResponse::DelayedTickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DelayedTickCount_IsNull) == 0x0000D1, "Member 'FRHAPI_PexClientResponse::DelayedTickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryWs_Optional) == 0x0000D8, "Member 'FRHAPI_PexClientResponse::MemoryWs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryWs_IsSet) == 0x000100, "Member 'FRHAPI_PexClientResponse::MemoryWs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryWs_IsNull) == 0x000101, "Member 'FRHAPI_PexClientResponse::MemoryWs_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryVb_Optional) == 0x000108, "Member 'FRHAPI_PexClientResponse::MemoryVb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryVb_IsSet) == 0x000130, "Member 'FRHAPI_PexClientResponse::MemoryVb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MemoryVb_IsNull) == 0x000131, "Member 'FRHAPI_PexClientResponse::MemoryVb_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CpuProcess_Optional) == 0x000138, "Member 'FRHAPI_PexClientResponse::CpuProcess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CpuProcess_IsSet) == 0x000160, "Member 'FRHAPI_PexClientResponse::CpuProcess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CpuProcess_IsNull) == 0x000161, "Member 'FRHAPI_PexClientResponse::CpuProcess_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Ping_Optional) == 0x000168, "Member 'FRHAPI_PexClientResponse::Ping_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Ping_IsSet) == 0x000190, "Member 'FRHAPI_PexClientResponse::Ping_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Ping_IsNull) == 0x000191, "Member 'FRHAPI_PexClientResponse::Ping_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPackets_Optional) == 0x000198, "Member 'FRHAPI_PexClientResponse::InPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPackets_IsSet) == 0x0001C0, "Member 'FRHAPI_PexClientResponse::InPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPackets_IsNull) == 0x0001C1, "Member 'FRHAPI_PexClientResponse::InPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPackets_Optional) == 0x0001C8, "Member 'FRHAPI_PexClientResponse::OutPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPackets_IsSet) == 0x0001F0, "Member 'FRHAPI_PexClientResponse::OutPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPackets_IsNull) == 0x0001F1, "Member 'FRHAPI_PexClientResponse::OutPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPackets_Optional) == 0x0001F8, "Member 'FRHAPI_PexClientResponse::TotalPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPackets_IsSet) == 0x000220, "Member 'FRHAPI_PexClientResponse::TotalPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPackets_IsNull) == 0x000221, "Member 'FRHAPI_PexClientResponse::TotalPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLoss_Optional) == 0x000228, "Member 'FRHAPI_PexClientResponse::InPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLoss_IsSet) == 0x000250, "Member 'FRHAPI_PexClientResponse::InPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLoss_IsNull) == 0x000251, "Member 'FRHAPI_PexClientResponse::InPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLoss_Optional) == 0x000258, "Member 'FRHAPI_PexClientResponse::OutPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLoss_IsSet) == 0x000280, "Member 'FRHAPI_PexClientResponse::OutPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLoss_IsNull) == 0x000281, "Member 'FRHAPI_PexClientResponse::OutPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLoss_Optional) == 0x000288, "Member 'FRHAPI_PexClientResponse::TotalPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLoss_IsSet) == 0x0002B0, "Member 'FRHAPI_PexClientResponse::TotalPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLoss_IsNull) == 0x0002B1, "Member 'FRHAPI_PexClientResponse::TotalPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLossPct_Optional) == 0x0002B8, "Member 'FRHAPI_PexClientResponse::InPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLossPct_IsSet) == 0x0002E0, "Member 'FRHAPI_PexClientResponse::InPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, InPacketLossPct_IsNull) == 0x0002E1, "Member 'FRHAPI_PexClientResponse::InPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLossPct_Optional) == 0x0002E8, "Member 'FRHAPI_PexClientResponse::OutPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLossPct_IsSet) == 0x000310, "Member 'FRHAPI_PexClientResponse::OutPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OutPacketLossPct_IsNull) == 0x000311, "Member 'FRHAPI_PexClientResponse::OutPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLossPct_Optional) == 0x000318, "Member 'FRHAPI_PexClientResponse::TotalPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLossPct_IsSet) == 0x000340, "Member 'FRHAPI_PexClientResponse::TotalPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalPacketLossPct_IsNull) == 0x000341, "Member 'FRHAPI_PexClientResponse::TotalPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalDisconnects_Optional) == 0x000348, "Member 'FRHAPI_PexClientResponse::TotalDisconnects_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalDisconnects_IsSet) == 0x000358, "Member 'FRHAPI_PexClientResponse::TotalDisconnects_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, TotalDisconnects_IsNull) == 0x000359, "Member 'FRHAPI_PexClientResponse::TotalDisconnects_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchDuration_Optional) == 0x000360, "Member 'FRHAPI_PexClientResponse::MatchDuration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchDuration_IsSet) == 0x000370, "Member 'FRHAPI_PexClientResponse::MatchDuration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchDuration_IsNull) == 0x000371, "Member 'FRHAPI_PexClientResponse::MatchDuration_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameThreadTime_Optional) == 0x000378, "Member 'FRHAPI_PexClientResponse::GameThreadTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameThreadTime_IsSet) == 0x0003A0, "Member 'FRHAPI_PexClientResponse::GameThreadTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameThreadTime_IsNull) == 0x0003A1, "Member 'FRHAPI_PexClientResponse::GameThreadTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RenderThreadTime_Optional) == 0x0003A8, "Member 'FRHAPI_PexClientResponse::RenderThreadTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RenderThreadTime_IsSet) == 0x0003D0, "Member 'FRHAPI_PexClientResponse::RenderThreadTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RenderThreadTime_IsNull) == 0x0003D1, "Member 'FRHAPI_PexClientResponse::RenderThreadTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GpuTime_Optional) == 0x0003D8, "Member 'FRHAPI_PexClientResponse::GpuTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GpuTime_IsSet) == 0x000400, "Member 'FRHAPI_PexClientResponse::GpuTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GpuTime_IsNull) == 0x000401, "Member 'FRHAPI_PexClientResponse::GpuTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Scores_Optional) == 0x000408, "Member 'FRHAPI_PexClientResponse::Scores_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Scores_IsSet) == 0x000440, "Member 'FRHAPI_PexClientResponse::Scores_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Scores_IsNull) == 0x000441, "Member 'FRHAPI_PexClientResponse::Scores_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchID) == 0x000448, "Member 'FRHAPI_PexClientResponse::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RegionId_Optional) == 0x000458, "Member 'FRHAPI_PexClientResponse::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RegionId_IsSet) == 0x000468, "Member 'FRHAPI_PexClientResponse::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, RegionId_IsNull) == 0x000469, "Member 'FRHAPI_PexClientResponse::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ServerId_Optional) == 0x000470, "Member 'FRHAPI_PexClientResponse::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ServerId_IsSet) == 0x000480, "Member 'FRHAPI_PexClientResponse::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ServerId_IsNull) == 0x000481, "Member 'FRHAPI_PexClientResponse::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AllocationId_Optional) == 0x000488, "Member 'FRHAPI_PexClientResponse::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AllocationId_IsSet) == 0x000498, "Member 'FRHAPI_PexClientResponse::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AllocationId_IsNull) == 0x000499, "Member 'FRHAPI_PexClientResponse::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterProvider_Optional) == 0x0004A0, "Member 'FRHAPI_PexClientResponse::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterProvider_IsSet) == 0x0004B0, "Member 'FRHAPI_PexClientResponse::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterProvider_IsNull) == 0x0004B1, "Member 'FRHAPI_PexClientResponse::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterLocation_Optional) == 0x0004B8, "Member 'FRHAPI_PexClientResponse::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterLocation_IsSet) == 0x0004C8, "Member 'FRHAPI_PexClientResponse::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DatacenterLocation_IsNull) == 0x0004C9, "Member 'FRHAPI_PexClientResponse::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AddressIp_Optional) == 0x0004D0, "Member 'FRHAPI_PexClientResponse::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AddressIp_IsSet) == 0x0004E0, "Member 'FRHAPI_PexClientResponse::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, AddressIp_IsNull) == 0x0004E1, "Member 'FRHAPI_PexClientResponse::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MapName_Optional) == 0x0004E8, "Member 'FRHAPI_PexClientResponse::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MapName_IsSet) == 0x0004F8, "Member 'FRHAPI_PexClientResponse::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MapName_IsNull) == 0x0004F9, "Member 'FRHAPI_PexClientResponse::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameMode_Optional) == 0x000500, "Member 'FRHAPI_PexClientResponse::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameMode_IsSet) == 0x000510, "Member 'FRHAPI_PexClientResponse::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, GameMode_IsNull) == 0x000511, "Member 'FRHAPI_PexClientResponse::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchmakingProfileId_Optional) == 0x000518, "Member 'FRHAPI_PexClientResponse::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchmakingProfileId_IsSet) == 0x000528, "Member 'FRHAPI_PexClientResponse::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, MatchmakingProfileId_IsNull) == 0x000529, "Member 'FRHAPI_PexClientResponse::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedTeamSize_Optional) == 0x00052C, "Member 'FRHAPI_PexClientResponse::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedTeamSize_IsSet) == 0x000530, "Member 'FRHAPI_PexClientResponse::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedTeamSize_IsNull) == 0x000531, "Member 'FRHAPI_PexClientResponse::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedPlayerCount_Optional) == 0x000534, "Member 'FRHAPI_PexClientResponse::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedPlayerCount_IsSet) == 0x000538, "Member 'FRHAPI_PexClientResponse::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, ExpectedPlayerCount_IsNull) == 0x000539, "Member 'FRHAPI_PexClientResponse::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, HostPlayerUuid_Optional) == 0x00053C, "Member 'FRHAPI_PexClientResponse::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, HostPlayerUuid_IsSet) == 0x00054C, "Member 'FRHAPI_PexClientResponse::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, HostPlayerUuid_IsNull) == 0x00054D, "Member 'FRHAPI_PexClientResponse::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OwningPlayerUuid_Optional) == 0x000550, "Member 'FRHAPI_PexClientResponse::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OwningPlayerUuid_IsSet) == 0x000560, "Member 'FRHAPI_PexClientResponse::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, OwningPlayerUuid_IsNull) == 0x000561, "Member 'FRHAPI_PexClientResponse::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Version_Optional) == 0x000568, "Member 'FRHAPI_PexClientResponse::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Version_IsSet) == 0x000578, "Member 'FRHAPI_PexClientResponse::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, Version_IsNull) == 0x000579, "Member 'FRHAPI_PexClientResponse::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeviceInfo_Optional) == 0x000580, "Member 'FRHAPI_PexClientResponse::DeviceInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeviceInfo_IsSet) == 0x000590, "Member 'FRHAPI_PexClientResponse::DeviceInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, DeviceInfo_IsNull) == 0x000591, "Member 'FRHAPI_PexClientResponse::DeviceInfo_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, PlatformId_Optional) == 0x000592, "Member 'FRHAPI_PexClientResponse::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, PlatformId_IsSet) == 0x000593, "Member 'FRHAPI_PexClientResponse::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, PlatformId_IsNull) == 0x000594, "Member 'FRHAPI_PexClientResponse::PlatformId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CustomData_Optional) == 0x000598, "Member 'FRHAPI_PexClientResponse::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CustomData_IsSet) == 0x0005E8, "Member 'FRHAPI_PexClientResponse::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, CustomData_IsNull) == 0x0005E9, "Member 'FRHAPI_PexClientResponse::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientResponse, PlayerUuid) == 0x0005EC, "Member 'FRHAPI_PexClientResponse::PlayerUuid' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexClientQueryParams
// 0x0198 (0x01A0 - 0x0008)
struct FRHAPI_PexClientQueryParams final : public FRHAPI_Model
{
public:
	struct FDateTime                              ToDatetime_Optional;                               // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToDatetime_IsSet;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToDatetime_IsNull;                                 // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              FromDatetime_Optional;                             // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromDatetime_IsSet;                                // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromDatetime_IsNull;                               // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MachineClass_Optional;                             // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsSet;                                // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsNull;                               // 0x00C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x0111(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x012C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x0131(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x0134(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostPlayerUuid_Optional;                           // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwningPlayerUuid_Optional;                         // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x0182(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0183(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x0184(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerUuid_Optional;                               // 0x0188(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x0198(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsNull;                                 // 0x0199(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexClientQueryParams) == 0x000008, "Wrong alignment on FRHAPI_PexClientQueryParams");
static_assert(sizeof(FRHAPI_PexClientQueryParams) == 0x0001A0, "Wrong size on FRHAPI_PexClientQueryParams");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ToDatetime_Optional) == 0x000008, "Member 'FRHAPI_PexClientQueryParams::ToDatetime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ToDatetime_IsSet) == 0x000010, "Member 'FRHAPI_PexClientQueryParams::ToDatetime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ToDatetime_IsNull) == 0x000011, "Member 'FRHAPI_PexClientQueryParams::ToDatetime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, FromDatetime_Optional) == 0x000018, "Member 'FRHAPI_PexClientQueryParams::FromDatetime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, FromDatetime_IsSet) == 0x000020, "Member 'FRHAPI_PexClientQueryParams::FromDatetime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, FromDatetime_IsNull) == 0x000021, "Member 'FRHAPI_PexClientQueryParams::FromDatetime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchId_Optional) == 0x000028, "Member 'FRHAPI_PexClientQueryParams::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchId_IsSet) == 0x000038, "Member 'FRHAPI_PexClientQueryParams::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchId_IsNull) == 0x000039, "Member 'FRHAPI_PexClientQueryParams::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, RegionId_Optional) == 0x000040, "Member 'FRHAPI_PexClientQueryParams::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, RegionId_IsSet) == 0x000050, "Member 'FRHAPI_PexClientQueryParams::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, RegionId_IsNull) == 0x000051, "Member 'FRHAPI_PexClientQueryParams::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ServerId_Optional) == 0x000058, "Member 'FRHAPI_PexClientQueryParams::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ServerId_IsSet) == 0x000068, "Member 'FRHAPI_PexClientQueryParams::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ServerId_IsNull) == 0x000069, "Member 'FRHAPI_PexClientQueryParams::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AllocationId_Optional) == 0x000070, "Member 'FRHAPI_PexClientQueryParams::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AllocationId_IsSet) == 0x000080, "Member 'FRHAPI_PexClientQueryParams::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AllocationId_IsNull) == 0x000081, "Member 'FRHAPI_PexClientQueryParams::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterProvider_Optional) == 0x000088, "Member 'FRHAPI_PexClientQueryParams::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterProvider_IsSet) == 0x000098, "Member 'FRHAPI_PexClientQueryParams::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterProvider_IsNull) == 0x000099, "Member 'FRHAPI_PexClientQueryParams::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterLocation_Optional) == 0x0000A0, "Member 'FRHAPI_PexClientQueryParams::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterLocation_IsSet) == 0x0000B0, "Member 'FRHAPI_PexClientQueryParams::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, DatacenterLocation_IsNull) == 0x0000B1, "Member 'FRHAPI_PexClientQueryParams::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MachineClass_Optional) == 0x0000B8, "Member 'FRHAPI_PexClientQueryParams::MachineClass_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MachineClass_IsSet) == 0x0000C8, "Member 'FRHAPI_PexClientQueryParams::MachineClass_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MachineClass_IsNull) == 0x0000C9, "Member 'FRHAPI_PexClientQueryParams::MachineClass_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AddressIp_Optional) == 0x0000D0, "Member 'FRHAPI_PexClientQueryParams::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AddressIp_IsSet) == 0x0000E0, "Member 'FRHAPI_PexClientQueryParams::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, AddressIp_IsNull) == 0x0000E1, "Member 'FRHAPI_PexClientQueryParams::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MapName_Optional) == 0x0000E8, "Member 'FRHAPI_PexClientQueryParams::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MapName_IsSet) == 0x0000F8, "Member 'FRHAPI_PexClientQueryParams::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MapName_IsNull) == 0x0000F9, "Member 'FRHAPI_PexClientQueryParams::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, GameMode_Optional) == 0x000100, "Member 'FRHAPI_PexClientQueryParams::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, GameMode_IsSet) == 0x000110, "Member 'FRHAPI_PexClientQueryParams::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, GameMode_IsNull) == 0x000111, "Member 'FRHAPI_PexClientQueryParams::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchmakingProfileId_Optional) == 0x000118, "Member 'FRHAPI_PexClientQueryParams::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchmakingProfileId_IsSet) == 0x000128, "Member 'FRHAPI_PexClientQueryParams::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, MatchmakingProfileId_IsNull) == 0x000129, "Member 'FRHAPI_PexClientQueryParams::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedTeamSize_Optional) == 0x00012C, "Member 'FRHAPI_PexClientQueryParams::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedTeamSize_IsSet) == 0x000130, "Member 'FRHAPI_PexClientQueryParams::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedTeamSize_IsNull) == 0x000131, "Member 'FRHAPI_PexClientQueryParams::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedPlayerCount_Optional) == 0x000134, "Member 'FRHAPI_PexClientQueryParams::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedPlayerCount_IsSet) == 0x000138, "Member 'FRHAPI_PexClientQueryParams::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, ExpectedPlayerCount_IsNull) == 0x000139, "Member 'FRHAPI_PexClientQueryParams::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, HostPlayerUuid_Optional) == 0x000140, "Member 'FRHAPI_PexClientQueryParams::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, HostPlayerUuid_IsSet) == 0x000150, "Member 'FRHAPI_PexClientQueryParams::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, HostPlayerUuid_IsNull) == 0x000151, "Member 'FRHAPI_PexClientQueryParams::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, OwningPlayerUuid_Optional) == 0x000158, "Member 'FRHAPI_PexClientQueryParams::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, OwningPlayerUuid_IsSet) == 0x000168, "Member 'FRHAPI_PexClientQueryParams::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, OwningPlayerUuid_IsNull) == 0x000169, "Member 'FRHAPI_PexClientQueryParams::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, Version_Optional) == 0x000170, "Member 'FRHAPI_PexClientQueryParams::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, Version_IsSet) == 0x000180, "Member 'FRHAPI_PexClientQueryParams::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, Version_IsNull) == 0x000181, "Member 'FRHAPI_PexClientQueryParams::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlatformId_Optional) == 0x000182, "Member 'FRHAPI_PexClientQueryParams::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlatformId_IsSet) == 0x000183, "Member 'FRHAPI_PexClientQueryParams::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlatformId_IsNull) == 0x000184, "Member 'FRHAPI_PexClientQueryParams::PlatformId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlayerUuid_Optional) == 0x000188, "Member 'FRHAPI_PexClientQueryParams::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlayerUuid_IsSet) == 0x000198, "Member 'FRHAPI_PexClientQueryParams::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientQueryParams, PlayerUuid_IsNull) == 0x000199, "Member 'FRHAPI_PexClientQueryParams::PlayerUuid_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexClientPagedResponse
// 0x01D8 (0x01E0 - 0x0008)
struct FRHAPI_PexClientPagedResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PexClientResponse>       Results_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Results_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexClientQueryParams            Filters_Optional;                                  // 0x0038(0x01A0)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Filters_IsSet;                                     // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexClientPagedResponse) == 0x000008, "Wrong alignment on FRHAPI_PexClientPagedResponse");
static_assert(sizeof(FRHAPI_PexClientPagedResponse) == 0x0001E0, "Wrong size on FRHAPI_PexClientPagedResponse");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Results_Optional) == 0x000008, "Member 'FRHAPI_PexClientPagedResponse::Results_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Results_IsSet) == 0x000018, "Member 'FRHAPI_PexClientPagedResponse::Results_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_PexClientPagedResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_PexClientPagedResponse::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_PexClientPagedResponse::Cursor_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Filters_Optional) == 0x000038, "Member 'FRHAPI_PexClientPagedResponse::Filters_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexClientPagedResponse, Filters_IsSet) == 0x0001D8, "Member 'FRHAPI_PexClientPagedResponse::Filters_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexHostQueryParams
// 0x0180 (0x0188 - 0x0008)
struct FRHAPI_PexHostQueryParams final : public FRHAPI_Model
{
public:
	struct FDateTime                              ToDatetime_Optional;                               // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToDatetime_IsSet;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToDatetime_IsNull;                                 // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              FromDatetime_Optional;                             // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromDatetime_IsSet;                                // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromDatetime_IsNull;                               // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RegionId_Optional;                                 // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x0099(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x00B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x00B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MachineClass_Optional;                             // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsSet;                                // 0x00C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsNull;                               // 0x00C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x00E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x00F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x00F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x0100(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x0111(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0118(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0128(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x0129(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x012C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x0130(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x0131(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x0134(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x0138(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x0139(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HostPlayerUuid_Optional;                           // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwningPlayerUuid_Optional;                         // 0x0158(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x0169(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x0170(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x0182(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x0183(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x0184(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexHostQueryParams) == 0x000008, "Wrong alignment on FRHAPI_PexHostQueryParams");
static_assert(sizeof(FRHAPI_PexHostQueryParams) == 0x000188, "Wrong size on FRHAPI_PexHostQueryParams");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ToDatetime_Optional) == 0x000008, "Member 'FRHAPI_PexHostQueryParams::ToDatetime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ToDatetime_IsSet) == 0x000010, "Member 'FRHAPI_PexHostQueryParams::ToDatetime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ToDatetime_IsNull) == 0x000011, "Member 'FRHAPI_PexHostQueryParams::ToDatetime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, FromDatetime_Optional) == 0x000018, "Member 'FRHAPI_PexHostQueryParams::FromDatetime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, FromDatetime_IsSet) == 0x000020, "Member 'FRHAPI_PexHostQueryParams::FromDatetime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, FromDatetime_IsNull) == 0x000021, "Member 'FRHAPI_PexHostQueryParams::FromDatetime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchId_Optional) == 0x000028, "Member 'FRHAPI_PexHostQueryParams::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchId_IsSet) == 0x000038, "Member 'FRHAPI_PexHostQueryParams::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchId_IsNull) == 0x000039, "Member 'FRHAPI_PexHostQueryParams::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, RegionId_Optional) == 0x000040, "Member 'FRHAPI_PexHostQueryParams::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, RegionId_IsSet) == 0x000050, "Member 'FRHAPI_PexHostQueryParams::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, RegionId_IsNull) == 0x000051, "Member 'FRHAPI_PexHostQueryParams::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ServerId_Optional) == 0x000058, "Member 'FRHAPI_PexHostQueryParams::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ServerId_IsSet) == 0x000068, "Member 'FRHAPI_PexHostQueryParams::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ServerId_IsNull) == 0x000069, "Member 'FRHAPI_PexHostQueryParams::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AllocationId_Optional) == 0x000070, "Member 'FRHAPI_PexHostQueryParams::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AllocationId_IsSet) == 0x000080, "Member 'FRHAPI_PexHostQueryParams::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AllocationId_IsNull) == 0x000081, "Member 'FRHAPI_PexHostQueryParams::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterProvider_Optional) == 0x000088, "Member 'FRHAPI_PexHostQueryParams::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterProvider_IsSet) == 0x000098, "Member 'FRHAPI_PexHostQueryParams::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterProvider_IsNull) == 0x000099, "Member 'FRHAPI_PexHostQueryParams::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterLocation_Optional) == 0x0000A0, "Member 'FRHAPI_PexHostQueryParams::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterLocation_IsSet) == 0x0000B0, "Member 'FRHAPI_PexHostQueryParams::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, DatacenterLocation_IsNull) == 0x0000B1, "Member 'FRHAPI_PexHostQueryParams::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MachineClass_Optional) == 0x0000B8, "Member 'FRHAPI_PexHostQueryParams::MachineClass_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MachineClass_IsSet) == 0x0000C8, "Member 'FRHAPI_PexHostQueryParams::MachineClass_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MachineClass_IsNull) == 0x0000C9, "Member 'FRHAPI_PexHostQueryParams::MachineClass_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AddressIp_Optional) == 0x0000D0, "Member 'FRHAPI_PexHostQueryParams::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AddressIp_IsSet) == 0x0000E0, "Member 'FRHAPI_PexHostQueryParams::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, AddressIp_IsNull) == 0x0000E1, "Member 'FRHAPI_PexHostQueryParams::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MapName_Optional) == 0x0000E8, "Member 'FRHAPI_PexHostQueryParams::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MapName_IsSet) == 0x0000F8, "Member 'FRHAPI_PexHostQueryParams::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MapName_IsNull) == 0x0000F9, "Member 'FRHAPI_PexHostQueryParams::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, GameMode_Optional) == 0x000100, "Member 'FRHAPI_PexHostQueryParams::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, GameMode_IsSet) == 0x000110, "Member 'FRHAPI_PexHostQueryParams::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, GameMode_IsNull) == 0x000111, "Member 'FRHAPI_PexHostQueryParams::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchmakingProfileId_Optional) == 0x000118, "Member 'FRHAPI_PexHostQueryParams::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchmakingProfileId_IsSet) == 0x000128, "Member 'FRHAPI_PexHostQueryParams::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, MatchmakingProfileId_IsNull) == 0x000129, "Member 'FRHAPI_PexHostQueryParams::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedTeamSize_Optional) == 0x00012C, "Member 'FRHAPI_PexHostQueryParams::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedTeamSize_IsSet) == 0x000130, "Member 'FRHAPI_PexHostQueryParams::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedTeamSize_IsNull) == 0x000131, "Member 'FRHAPI_PexHostQueryParams::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedPlayerCount_Optional) == 0x000134, "Member 'FRHAPI_PexHostQueryParams::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedPlayerCount_IsSet) == 0x000138, "Member 'FRHAPI_PexHostQueryParams::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, ExpectedPlayerCount_IsNull) == 0x000139, "Member 'FRHAPI_PexHostQueryParams::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, HostPlayerUuid_Optional) == 0x000140, "Member 'FRHAPI_PexHostQueryParams::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, HostPlayerUuid_IsSet) == 0x000150, "Member 'FRHAPI_PexHostQueryParams::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, HostPlayerUuid_IsNull) == 0x000151, "Member 'FRHAPI_PexHostQueryParams::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, OwningPlayerUuid_Optional) == 0x000158, "Member 'FRHAPI_PexHostQueryParams::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, OwningPlayerUuid_IsSet) == 0x000168, "Member 'FRHAPI_PexHostQueryParams::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, OwningPlayerUuid_IsNull) == 0x000169, "Member 'FRHAPI_PexHostQueryParams::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, Version_Optional) == 0x000170, "Member 'FRHAPI_PexHostQueryParams::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, Version_IsSet) == 0x000180, "Member 'FRHAPI_PexHostQueryParams::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, Version_IsNull) == 0x000181, "Member 'FRHAPI_PexHostQueryParams::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, PlatformId_Optional) == 0x000182, "Member 'FRHAPI_PexHostQueryParams::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, PlatformId_IsSet) == 0x000183, "Member 'FRHAPI_PexHostQueryParams::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostQueryParams, PlatformId_IsNull) == 0x000184, "Member 'FRHAPI_PexHostQueryParams::PlatformId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexHostPagedResponse
// 0x01C0 (0x01C8 - 0x0008)
struct FRHAPI_PexHostPagedResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PexHostResponse>         Results_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Results_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexHostQueryParams              Filters_Optional;                                  // 0x0038(0x0188)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Filters_IsSet;                                     // 0x01C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexHostPagedResponse) == 0x000008, "Wrong alignment on FRHAPI_PexHostPagedResponse");
static_assert(sizeof(FRHAPI_PexHostPagedResponse) == 0x0001C8, "Wrong size on FRHAPI_PexHostPagedResponse");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Results_Optional) == 0x000008, "Member 'FRHAPI_PexHostPagedResponse::Results_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Results_IsSet) == 0x000018, "Member 'FRHAPI_PexHostPagedResponse::Results_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_PexHostPagedResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_PexHostPagedResponse::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_PexHostPagedResponse::Cursor_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Filters_Optional) == 0x000038, "Member 'FRHAPI_PexHostPagedResponse::Filters_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostPagedResponse, Filters_IsSet) == 0x0001C0, "Member 'FRHAPI_PexHostPagedResponse::Filters_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PexHostRequest
// 0x0568 (0x0570 - 0x0008)
struct FRHAPI_PexHostRequest final : public FRHAPI_Model
{
public:
	struct FRHAPI_PexStat                         FrameTime_Optional;                                // 0x0008(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsSet;                                   // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FrameTime_IsNull;                                  // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DeltaTime_Optional;                                // 0x0038(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsSet;                                   // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaTime_IsNull;                                  // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TickCount_Optional;                                // 0x0068(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsSet;                                   // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TickCount_IsNull;                                  // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         DelayedTickCount_Optional;                         // 0x0098(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsSet;                            // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayedTickCount_IsNull;                           // 0x00C1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryWs_Optional;                                 // 0x00C8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsSet;                                    // 0x00F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryWs_IsNull;                                   // 0x00F1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         MemoryVb_Optional;                                 // 0x00F8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsSet;                                    // 0x0120(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MemoryVb_IsNull;                                   // 0x0121(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x6];                                      // 0x0122(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         CpuProcess_Optional;                               // 0x0128(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsSet;                                  // 0x0150(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CpuProcess_IsNull;                                 // 0x0151(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         Ping_Optional;                                     // 0x0158(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Ping_IsSet;                                        // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ping_IsNull;                                       // 0x0181(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPackets_Optional;                                // 0x0188(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsSet;                                   // 0x01B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPackets_IsNull;                                  // 0x01B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x6];                                      // 0x01B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPackets_Optional;                               // 0x01B8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsSet;                                  // 0x01E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPackets_IsNull;                                 // 0x01E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPackets_Optional;                             // 0x01E8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsSet;                                // 0x0210(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPackets_IsNull;                               // 0x0211(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_212[0x6];                                      // 0x0212(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLoss_Optional;                             // 0x0218(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsSet;                                // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLoss_IsNull;                               // 0x0241(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLoss_Optional;                            // 0x0248(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsSet;                               // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLoss_IsNull;                              // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLoss_Optional;                          // 0x0278(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsSet;                             // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLoss_IsNull;                            // 0x02A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A2[0x6];                                      // 0x02A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         InPacketLossPct_Optional;                          // 0x02A8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsSet;                             // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InPacketLossPct_IsNull;                            // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         OutPacketLossPct_Optional;                         // 0x02D8(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsSet;                            // 0x0300(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutPacketLossPct_IsNull;                           // 0x0301(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         TotalPacketLossPct_Optional;                       // 0x0308(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsSet;                          // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalPacketLossPct_IsNull;                         // 0x0331(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalDisconnects_Optional;                         // 0x0338(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsSet;                            // 0x0348(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalDisconnects_IsNull;                           // 0x0349(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        MatchDuration_Optional;                            // 0x0350(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsSet;                               // 0x0360(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchDuration_IsNull;                              // 0x0361(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexStat                         ConnectionCount_Optional;                          // 0x0368(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ConnectionCount_IsSet;                             // 0x0390(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectionCount_IsNull;                            // 0x0391(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_392[0x6];                                      // 0x0392(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_PexCount                        TotalUniquePlayers_Optional;                       // 0x0398(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayers_IsSet;                          // 0x03A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalUniquePlayers_IsNull;                         // 0x03A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AA[0x6];                                      // 0x03AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x03B0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId_Optional;                                 // 0x03C0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x03D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsNull;                                   // 0x03D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerId_Optional;                                 // 0x03D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsSet;                                    // 0x03E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ServerId_IsNull;                                   // 0x03E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EA[0x6];                                      // 0x03EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AllocationId_Optional;                             // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsSet;                                // 0x0400(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllocationId_IsNull;                               // 0x0401(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterProvider_Optional;                       // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsSet;                          // 0x0418(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterProvider_IsNull;                         // 0x0419(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DatacenterLocation_Optional;                       // 0x0420(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsSet;                          // 0x0430(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DatacenterLocation_IsNull;                         // 0x0431(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x6];                                      // 0x0432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AddressIp_Optional;                                // 0x0438(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsSet;                                   // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddressIp_IsNull;                                  // 0x0449(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44A[0x6];                                      // 0x044A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName_Optional;                                  // 0x0450(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsSet;                                     // 0x0460(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MapName_IsNull;                                    // 0x0461(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameMode_Optional;                                 // 0x0468(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsSet;                                    // 0x0478(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameMode_IsNull;                                   // 0x0479(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchmakingProfileId_Optional;                     // 0x0480(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsSet;                        // 0x0490(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchmakingProfileId_IsNull;                       // 0x0491(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedTeamSize_Optional;                         // 0x0494(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsSet;                            // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedTeamSize_IsNull;                           // 0x0499(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedPlayerCount_Optional;                      // 0x049C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsSet;                         // 0x04A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExpectedPlayerCount_IsNull;                        // 0x04A1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A2[0x2];                                      // 0x04A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  HostPlayerUuid_Optional;                           // 0x04A4(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsSet;                              // 0x04B4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HostPlayerUuid_IsNull;                             // 0x04B5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  OwningPlayerUuid_Optional;                         // 0x04B8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsSet;                            // 0x04C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwningPlayerUuid_IsNull;                           // 0x04C9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CA[0x6];                                      // 0x04CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Version_Optional;                                  // 0x04D0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsSet;                                     // 0x04E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Version_IsNull;                                    // 0x04E1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E2[0x6];                                      // 0x04E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceInfo_Optional;                               // 0x04E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsSet;                                  // 0x04F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeviceInfo_IsNull;                                 // 0x04F9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_MatchPlatform                          PlatformId_Optional;                               // 0x04FA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsSet;                                  // 0x04FB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformId_IsNull;                                 // 0x04FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0500(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0550(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0551(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_552[0x6];                                      // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MachineClass_Optional;                             // 0x0558(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsSet;                                // 0x0568(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MachineClass_IsNull;                               // 0x0569(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PexHostRequest) == 0x000008, "Wrong alignment on FRHAPI_PexHostRequest");
static_assert(sizeof(FRHAPI_PexHostRequest) == 0x000570, "Wrong size on FRHAPI_PexHostRequest");
static_assert(offsetof(FRHAPI_PexHostRequest, FrameTime_Optional) == 0x000008, "Member 'FRHAPI_PexHostRequest::FrameTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, FrameTime_IsSet) == 0x000030, "Member 'FRHAPI_PexHostRequest::FrameTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, FrameTime_IsNull) == 0x000031, "Member 'FRHAPI_PexHostRequest::FrameTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeltaTime_Optional) == 0x000038, "Member 'FRHAPI_PexHostRequest::DeltaTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeltaTime_IsSet) == 0x000060, "Member 'FRHAPI_PexHostRequest::DeltaTime_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeltaTime_IsNull) == 0x000061, "Member 'FRHAPI_PexHostRequest::DeltaTime_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TickCount_Optional) == 0x000068, "Member 'FRHAPI_PexHostRequest::TickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TickCount_IsSet) == 0x000090, "Member 'FRHAPI_PexHostRequest::TickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TickCount_IsNull) == 0x000091, "Member 'FRHAPI_PexHostRequest::TickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DelayedTickCount_Optional) == 0x000098, "Member 'FRHAPI_PexHostRequest::DelayedTickCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DelayedTickCount_IsSet) == 0x0000C0, "Member 'FRHAPI_PexHostRequest::DelayedTickCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DelayedTickCount_IsNull) == 0x0000C1, "Member 'FRHAPI_PexHostRequest::DelayedTickCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryWs_Optional) == 0x0000C8, "Member 'FRHAPI_PexHostRequest::MemoryWs_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryWs_IsSet) == 0x0000F0, "Member 'FRHAPI_PexHostRequest::MemoryWs_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryWs_IsNull) == 0x0000F1, "Member 'FRHAPI_PexHostRequest::MemoryWs_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryVb_Optional) == 0x0000F8, "Member 'FRHAPI_PexHostRequest::MemoryVb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryVb_IsSet) == 0x000120, "Member 'FRHAPI_PexHostRequest::MemoryVb_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MemoryVb_IsNull) == 0x000121, "Member 'FRHAPI_PexHostRequest::MemoryVb_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CpuProcess_Optional) == 0x000128, "Member 'FRHAPI_PexHostRequest::CpuProcess_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CpuProcess_IsSet) == 0x000150, "Member 'FRHAPI_PexHostRequest::CpuProcess_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CpuProcess_IsNull) == 0x000151, "Member 'FRHAPI_PexHostRequest::CpuProcess_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Ping_Optional) == 0x000158, "Member 'FRHAPI_PexHostRequest::Ping_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Ping_IsSet) == 0x000180, "Member 'FRHAPI_PexHostRequest::Ping_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Ping_IsNull) == 0x000181, "Member 'FRHAPI_PexHostRequest::Ping_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPackets_Optional) == 0x000188, "Member 'FRHAPI_PexHostRequest::InPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPackets_IsSet) == 0x0001B0, "Member 'FRHAPI_PexHostRequest::InPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPackets_IsNull) == 0x0001B1, "Member 'FRHAPI_PexHostRequest::InPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPackets_Optional) == 0x0001B8, "Member 'FRHAPI_PexHostRequest::OutPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPackets_IsSet) == 0x0001E0, "Member 'FRHAPI_PexHostRequest::OutPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPackets_IsNull) == 0x0001E1, "Member 'FRHAPI_PexHostRequest::OutPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPackets_Optional) == 0x0001E8, "Member 'FRHAPI_PexHostRequest::TotalPackets_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPackets_IsSet) == 0x000210, "Member 'FRHAPI_PexHostRequest::TotalPackets_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPackets_IsNull) == 0x000211, "Member 'FRHAPI_PexHostRequest::TotalPackets_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLoss_Optional) == 0x000218, "Member 'FRHAPI_PexHostRequest::InPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLoss_IsSet) == 0x000240, "Member 'FRHAPI_PexHostRequest::InPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLoss_IsNull) == 0x000241, "Member 'FRHAPI_PexHostRequest::InPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLoss_Optional) == 0x000248, "Member 'FRHAPI_PexHostRequest::OutPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLoss_IsSet) == 0x000270, "Member 'FRHAPI_PexHostRequest::OutPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLoss_IsNull) == 0x000271, "Member 'FRHAPI_PexHostRequest::OutPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLoss_Optional) == 0x000278, "Member 'FRHAPI_PexHostRequest::TotalPacketLoss_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLoss_IsSet) == 0x0002A0, "Member 'FRHAPI_PexHostRequest::TotalPacketLoss_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLoss_IsNull) == 0x0002A1, "Member 'FRHAPI_PexHostRequest::TotalPacketLoss_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLossPct_Optional) == 0x0002A8, "Member 'FRHAPI_PexHostRequest::InPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLossPct_IsSet) == 0x0002D0, "Member 'FRHAPI_PexHostRequest::InPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, InPacketLossPct_IsNull) == 0x0002D1, "Member 'FRHAPI_PexHostRequest::InPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLossPct_Optional) == 0x0002D8, "Member 'FRHAPI_PexHostRequest::OutPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLossPct_IsSet) == 0x000300, "Member 'FRHAPI_PexHostRequest::OutPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OutPacketLossPct_IsNull) == 0x000301, "Member 'FRHAPI_PexHostRequest::OutPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLossPct_Optional) == 0x000308, "Member 'FRHAPI_PexHostRequest::TotalPacketLossPct_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLossPct_IsSet) == 0x000330, "Member 'FRHAPI_PexHostRequest::TotalPacketLossPct_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalPacketLossPct_IsNull) == 0x000331, "Member 'FRHAPI_PexHostRequest::TotalPacketLossPct_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalDisconnects_Optional) == 0x000338, "Member 'FRHAPI_PexHostRequest::TotalDisconnects_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalDisconnects_IsSet) == 0x000348, "Member 'FRHAPI_PexHostRequest::TotalDisconnects_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalDisconnects_IsNull) == 0x000349, "Member 'FRHAPI_PexHostRequest::TotalDisconnects_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchDuration_Optional) == 0x000350, "Member 'FRHAPI_PexHostRequest::MatchDuration_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchDuration_IsSet) == 0x000360, "Member 'FRHAPI_PexHostRequest::MatchDuration_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchDuration_IsNull) == 0x000361, "Member 'FRHAPI_PexHostRequest::MatchDuration_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ConnectionCount_Optional) == 0x000368, "Member 'FRHAPI_PexHostRequest::ConnectionCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ConnectionCount_IsSet) == 0x000390, "Member 'FRHAPI_PexHostRequest::ConnectionCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ConnectionCount_IsNull) == 0x000391, "Member 'FRHAPI_PexHostRequest::ConnectionCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalUniquePlayers_Optional) == 0x000398, "Member 'FRHAPI_PexHostRequest::TotalUniquePlayers_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalUniquePlayers_IsSet) == 0x0003A8, "Member 'FRHAPI_PexHostRequest::TotalUniquePlayers_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, TotalUniquePlayers_IsNull) == 0x0003A9, "Member 'FRHAPI_PexHostRequest::TotalUniquePlayers_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchID) == 0x0003B0, "Member 'FRHAPI_PexHostRequest::MatchID' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, RegionId_Optional) == 0x0003C0, "Member 'FRHAPI_PexHostRequest::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, RegionId_IsSet) == 0x0003D0, "Member 'FRHAPI_PexHostRequest::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, RegionId_IsNull) == 0x0003D1, "Member 'FRHAPI_PexHostRequest::RegionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ServerId_Optional) == 0x0003D8, "Member 'FRHAPI_PexHostRequest::ServerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ServerId_IsSet) == 0x0003E8, "Member 'FRHAPI_PexHostRequest::ServerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ServerId_IsNull) == 0x0003E9, "Member 'FRHAPI_PexHostRequest::ServerId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AllocationId_Optional) == 0x0003F0, "Member 'FRHAPI_PexHostRequest::AllocationId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AllocationId_IsSet) == 0x000400, "Member 'FRHAPI_PexHostRequest::AllocationId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AllocationId_IsNull) == 0x000401, "Member 'FRHAPI_PexHostRequest::AllocationId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterProvider_Optional) == 0x000408, "Member 'FRHAPI_PexHostRequest::DatacenterProvider_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterProvider_IsSet) == 0x000418, "Member 'FRHAPI_PexHostRequest::DatacenterProvider_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterProvider_IsNull) == 0x000419, "Member 'FRHAPI_PexHostRequest::DatacenterProvider_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterLocation_Optional) == 0x000420, "Member 'FRHAPI_PexHostRequest::DatacenterLocation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterLocation_IsSet) == 0x000430, "Member 'FRHAPI_PexHostRequest::DatacenterLocation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DatacenterLocation_IsNull) == 0x000431, "Member 'FRHAPI_PexHostRequest::DatacenterLocation_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AddressIp_Optional) == 0x000438, "Member 'FRHAPI_PexHostRequest::AddressIp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AddressIp_IsSet) == 0x000448, "Member 'FRHAPI_PexHostRequest::AddressIp_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, AddressIp_IsNull) == 0x000449, "Member 'FRHAPI_PexHostRequest::AddressIp_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MapName_Optional) == 0x000450, "Member 'FRHAPI_PexHostRequest::MapName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MapName_IsSet) == 0x000460, "Member 'FRHAPI_PexHostRequest::MapName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MapName_IsNull) == 0x000461, "Member 'FRHAPI_PexHostRequest::MapName_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, GameMode_Optional) == 0x000468, "Member 'FRHAPI_PexHostRequest::GameMode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, GameMode_IsSet) == 0x000478, "Member 'FRHAPI_PexHostRequest::GameMode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, GameMode_IsNull) == 0x000479, "Member 'FRHAPI_PexHostRequest::GameMode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchmakingProfileId_Optional) == 0x000480, "Member 'FRHAPI_PexHostRequest::MatchmakingProfileId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchmakingProfileId_IsSet) == 0x000490, "Member 'FRHAPI_PexHostRequest::MatchmakingProfileId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MatchmakingProfileId_IsNull) == 0x000491, "Member 'FRHAPI_PexHostRequest::MatchmakingProfileId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedTeamSize_Optional) == 0x000494, "Member 'FRHAPI_PexHostRequest::ExpectedTeamSize_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedTeamSize_IsSet) == 0x000498, "Member 'FRHAPI_PexHostRequest::ExpectedTeamSize_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedTeamSize_IsNull) == 0x000499, "Member 'FRHAPI_PexHostRequest::ExpectedTeamSize_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedPlayerCount_Optional) == 0x00049C, "Member 'FRHAPI_PexHostRequest::ExpectedPlayerCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedPlayerCount_IsSet) == 0x0004A0, "Member 'FRHAPI_PexHostRequest::ExpectedPlayerCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, ExpectedPlayerCount_IsNull) == 0x0004A1, "Member 'FRHAPI_PexHostRequest::ExpectedPlayerCount_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, HostPlayerUuid_Optional) == 0x0004A4, "Member 'FRHAPI_PexHostRequest::HostPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, HostPlayerUuid_IsSet) == 0x0004B4, "Member 'FRHAPI_PexHostRequest::HostPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, HostPlayerUuid_IsNull) == 0x0004B5, "Member 'FRHAPI_PexHostRequest::HostPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OwningPlayerUuid_Optional) == 0x0004B8, "Member 'FRHAPI_PexHostRequest::OwningPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OwningPlayerUuid_IsSet) == 0x0004C8, "Member 'FRHAPI_PexHostRequest::OwningPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, OwningPlayerUuid_IsNull) == 0x0004C9, "Member 'FRHAPI_PexHostRequest::OwningPlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Version_Optional) == 0x0004D0, "Member 'FRHAPI_PexHostRequest::Version_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Version_IsSet) == 0x0004E0, "Member 'FRHAPI_PexHostRequest::Version_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, Version_IsNull) == 0x0004E1, "Member 'FRHAPI_PexHostRequest::Version_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeviceInfo_Optional) == 0x0004E8, "Member 'FRHAPI_PexHostRequest::DeviceInfo_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeviceInfo_IsSet) == 0x0004F8, "Member 'FRHAPI_PexHostRequest::DeviceInfo_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, DeviceInfo_IsNull) == 0x0004F9, "Member 'FRHAPI_PexHostRequest::DeviceInfo_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, PlatformId_Optional) == 0x0004FA, "Member 'FRHAPI_PexHostRequest::PlatformId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, PlatformId_IsSet) == 0x0004FB, "Member 'FRHAPI_PexHostRequest::PlatformId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, PlatformId_IsNull) == 0x0004FC, "Member 'FRHAPI_PexHostRequest::PlatformId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CustomData_Optional) == 0x000500, "Member 'FRHAPI_PexHostRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CustomData_IsSet) == 0x000550, "Member 'FRHAPI_PexHostRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, CustomData_IsNull) == 0x000551, "Member 'FRHAPI_PexHostRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MachineClass_Optional) == 0x000558, "Member 'FRHAPI_PexHostRequest::MachineClass_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MachineClass_IsSet) == 0x000568, "Member 'FRHAPI_PexHostRequest::MachineClass_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PexHostRequest, MachineClass_IsNull) == 0x000569, "Member 'FRHAPI_PexHostRequest::MachineClass_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlement
// 0x0058 (0x0060 - 0x0008)
struct FRHAPI_PlatformEntitlement final : public FRHAPI_Model
{
public:
	class FString                                 PlatformSku;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformEntitlementId;                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity_Optional;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Quantity_IsSet;                                    // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementStatus                      Status_Optional;                                   // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode_Optional;                                // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsSet;                                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlement) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlement");
static_assert(sizeof(FRHAPI_PlatformEntitlement) == 0x000060, "Wrong size on FRHAPI_PlatformEntitlement");
static_assert(offsetof(FRHAPI_PlatformEntitlement, PlatformSku) == 0x000008, "Member 'FRHAPI_PlatformEntitlement::PlatformSku' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, PlatformEntitlementId) == 0x000018, "Member 'FRHAPI_PlatformEntitlement::PlatformEntitlementId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, Quantity_Optional) == 0x000028, "Member 'FRHAPI_PlatformEntitlement::Quantity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, Quantity_IsSet) == 0x00002C, "Member 'FRHAPI_PlatformEntitlement::Quantity_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, Status_Optional) == 0x00002D, "Member 'FRHAPI_PlatformEntitlement::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, Status_IsSet) == 0x00002E, "Member 'FRHAPI_PlatformEntitlement::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, ErrorCode_Optional) == 0x000030, "Member 'FRHAPI_PlatformEntitlement::ErrorCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, ErrorCode_IsSet) == 0x000040, "Member 'FRHAPI_PlatformEntitlement::ErrorCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, OrderId_Optional) == 0x000048, "Member 'FRHAPI_PlatformEntitlement::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlement, OrderId_IsSet) == 0x000058, "Member 'FRHAPI_PlatformEntitlement::OrderId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlementConnectionStatus
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PlatformEntitlementConnectionStatus final : public FRHAPI_Model
{
public:
	class FString                                 ErrorCode_Optional;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsSet;                                   // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsNull;                                  // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlementConnectionStatus) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlementConnectionStatus");
static_assert(sizeof(FRHAPI_PlatformEntitlementConnectionStatus) == 0x000020, "Wrong size on FRHAPI_PlatformEntitlementConnectionStatus");
static_assert(offsetof(FRHAPI_PlatformEntitlementConnectionStatus, ErrorCode_Optional) == 0x000008, "Member 'FRHAPI_PlatformEntitlementConnectionStatus::ErrorCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementConnectionStatus, ErrorCode_IsSet) == 0x000018, "Member 'FRHAPI_PlatformEntitlementConnectionStatus::ErrorCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementConnectionStatus, ErrorCode_IsNull) == 0x000019, "Member 'FRHAPI_PlatformEntitlementConnectionStatus::ErrorCode_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlementPrepared
// 0x00A0 (0x00A8 - 0x0008)
struct FRHAPI_PlatformEntitlementPrepared final : public FRHAPI_Model
{
public:
	class FString                                 PlatformEntitlementId_Optional;                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformEntitlementId_IsSet;                       // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformEntitlementId_IsNull;                      // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Sku;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity_Optional;                                 // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Quantity_IsSet;                                    // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntitlementType                        ReceivedType_Optional;                             // 0x0035(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReceivedType_IsSet;                                // 0x0036(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReceivedType_IsNull;                               // 0x0037(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformLabel_Optional;                            // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformLabel_IsSet;                               // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformLabel_IsNull;                              // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_JsonValue>  PlatformMetadata_Optional;                         // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PlatformMetadata_IsSet;                            // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlementPrepared) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlementPrepared");
static_assert(sizeof(FRHAPI_PlatformEntitlementPrepared) == 0x0000A8, "Wrong size on FRHAPI_PlatformEntitlementPrepared");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformEntitlementId_Optional) == 0x000008, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformEntitlementId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformEntitlementId_IsSet) == 0x000018, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformEntitlementId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformEntitlementId_IsNull) == 0x000019, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformEntitlementId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, Sku) == 0x000020, "Member 'FRHAPI_PlatformEntitlementPrepared::Sku' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, Quantity_Optional) == 0x000030, "Member 'FRHAPI_PlatformEntitlementPrepared::Quantity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, Quantity_IsSet) == 0x000034, "Member 'FRHAPI_PlatformEntitlementPrepared::Quantity_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, ReceivedType_Optional) == 0x000035, "Member 'FRHAPI_PlatformEntitlementPrepared::ReceivedType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, ReceivedType_IsSet) == 0x000036, "Member 'FRHAPI_PlatformEntitlementPrepared::ReceivedType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, ReceivedType_IsNull) == 0x000037, "Member 'FRHAPI_PlatformEntitlementPrepared::ReceivedType_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformLabel_Optional) == 0x000038, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformLabel_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformLabel_IsSet) == 0x000048, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformLabel_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformLabel_IsNull) == 0x000049, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformLabel_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformMetadata_Optional) == 0x000050, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformMetadata_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementPrepared, PlatformMetadata_IsSet) == 0x0000A0, "Member 'FRHAPI_PlatformEntitlementPrepared::PlatformMetadata_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlementProcessRequest
// 0x0060 (0x0068 - 0x0008)
struct FRHAPI_PlatformEntitlementProcessRequest final : public FRHAPI_Model
{
public:
	class FString                                 TransactionId;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformToken;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformId;                                        // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformEnvironment_Optional;                      // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformEnvironment_IsSet;                         // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformEnvironment_IsNull;                        // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlatformRegion                         PlatformRegion;                                    // 0x004A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ClientType                             ClientType;                                        // 0x004B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlatformEntitlement>     Entitlements_Optional;                             // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Entitlements_IsSet;                                // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckDurables_Optional;                            // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckDurables_IsSet;                               // 0x0062(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckConsumables_Optional;                         // 0x0063(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckConsumables_IsSet;                            // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlementProcessRequest) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlementProcessRequest");
static_assert(sizeof(FRHAPI_PlatformEntitlementProcessRequest) == 0x000068, "Wrong size on FRHAPI_PlatformEntitlementProcessRequest");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, TransactionId) == 0x000008, "Member 'FRHAPI_PlatformEntitlementProcessRequest::TransactionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformToken) == 0x000018, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformToken' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformId) == 0x000028, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformEnvironment_Optional) == 0x000038, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformEnvironment_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformEnvironment_IsSet) == 0x000048, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformEnvironment_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformEnvironment_IsNull) == 0x000049, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformEnvironment_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, PlatformRegion) == 0x00004A, "Member 'FRHAPI_PlatformEntitlementProcessRequest::PlatformRegion' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, ClientType) == 0x00004B, "Member 'FRHAPI_PlatformEntitlementProcessRequest::ClientType' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, Entitlements_Optional) == 0x000050, "Member 'FRHAPI_PlatformEntitlementProcessRequest::Entitlements_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, Entitlements_IsSet) == 0x000060, "Member 'FRHAPI_PlatformEntitlementProcessRequest::Entitlements_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, CheckDurables_Optional) == 0x000061, "Member 'FRHAPI_PlatformEntitlementProcessRequest::CheckDurables_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, CheckDurables_IsSet) == 0x000062, "Member 'FRHAPI_PlatformEntitlementProcessRequest::CheckDurables_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, CheckConsumables_Optional) == 0x000063, "Member 'FRHAPI_PlatformEntitlementProcessRequest::CheckConsumables_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessRequest, CheckConsumables_IsSet) == 0x000064, "Member 'FRHAPI_PlatformEntitlementProcessRequest::CheckConsumables_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlementProcessResult
// 0x00A8 (0x00B0 - 0x0008)
struct FRHAPI_PlatformEntitlementProcessResult final : public FRHAPI_Model
{
public:
	class FString                                 RequestID;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ClientType                             ClientType;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TransactionId;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlatformRegion                         PlatformRegion;                                    // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status_Optional;                                   // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Status_IsSet;                                      // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode_Optional;                                // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsSet;                                   // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsNull;                                  // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlatformEntitlement>     ClientEntitlements_Optional;                       // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ClientEntitlements_IsSet;                          // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlatformEntitlement>     ServerEntitlements_Optional;                       // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ServerEntitlements_IsSet;                          // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      PlatformId;                                        // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0098(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkippedServerEntitlements_Optional;                // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkippedServerEntitlements_IsSet;                   // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlementProcessResult) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlementProcessResult");
static_assert(sizeof(FRHAPI_PlatformEntitlementProcessResult) == 0x0000B0, "Wrong size on FRHAPI_PlatformEntitlementProcessResult");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, RequestID) == 0x000008, "Member 'FRHAPI_PlatformEntitlementProcessResult::RequestID' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ClientType) == 0x000018, "Member 'FRHAPI_PlatformEntitlementProcessResult::ClientType' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, TransactionId) == 0x000020, "Member 'FRHAPI_PlatformEntitlementProcessResult::TransactionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, PlatformRegion) == 0x000030, "Member 'FRHAPI_PlatformEntitlementProcessResult::PlatformRegion' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, Status_Optional) == 0x000038, "Member 'FRHAPI_PlatformEntitlementProcessResult::Status_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, Status_IsSet) == 0x000048, "Member 'FRHAPI_PlatformEntitlementProcessResult::Status_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ErrorCode_Optional) == 0x000050, "Member 'FRHAPI_PlatformEntitlementProcessResult::ErrorCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ErrorCode_IsSet) == 0x000060, "Member 'FRHAPI_PlatformEntitlementProcessResult::ErrorCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ErrorCode_IsNull) == 0x000061, "Member 'FRHAPI_PlatformEntitlementProcessResult::ErrorCode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ClientEntitlements_Optional) == 0x000068, "Member 'FRHAPI_PlatformEntitlementProcessResult::ClientEntitlements_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ClientEntitlements_IsSet) == 0x000078, "Member 'FRHAPI_PlatformEntitlementProcessResult::ClientEntitlements_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ServerEntitlements_Optional) == 0x000080, "Member 'FRHAPI_PlatformEntitlementProcessResult::ServerEntitlements_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, ServerEntitlements_IsSet) == 0x000090, "Member 'FRHAPI_PlatformEntitlementProcessResult::ServerEntitlements_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, PlatformId) == 0x000091, "Member 'FRHAPI_PlatformEntitlementProcessResult::PlatformId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, PlatformUserId) == 0x000098, "Member 'FRHAPI_PlatformEntitlementProcessResult::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, SkippedServerEntitlements_Optional) == 0x0000A8, "Member 'FRHAPI_PlatformEntitlementProcessResult::SkippedServerEntitlements_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementProcessResult, SkippedServerEntitlements_IsSet) == 0x0000A9, "Member 'FRHAPI_PlatformEntitlementProcessResult::SkippedServerEntitlements_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformEntitlementsPrepared
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PlatformEntitlementsPrepared final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlatformEntitlementPrepared> Entitlements_Optional;                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Entitlements_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode_Optional;                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsSet;                                   // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsNull;                                  // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformEntitlementsPrepared) == 0x000008, "Wrong alignment on FRHAPI_PlatformEntitlementsPrepared");
static_assert(sizeof(FRHAPI_PlatformEntitlementsPrepared) == 0x000038, "Wrong size on FRHAPI_PlatformEntitlementsPrepared");
static_assert(offsetof(FRHAPI_PlatformEntitlementsPrepared, Entitlements_Optional) == 0x000008, "Member 'FRHAPI_PlatformEntitlementsPrepared::Entitlements_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementsPrepared, Entitlements_IsSet) == 0x000018, "Member 'FRHAPI_PlatformEntitlementsPrepared::Entitlements_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementsPrepared, ErrorCode_Optional) == 0x000020, "Member 'FRHAPI_PlatformEntitlementsPrepared::ErrorCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementsPrepared, ErrorCode_IsSet) == 0x000030, "Member 'FRHAPI_PlatformEntitlementsPrepared::ErrorCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformEntitlementsPrepared, ErrorCode_IsNull) == 0x000031, "Member 'FRHAPI_PlatformEntitlementsPrepared::ErrorCode_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformIdentityLookupResults
// 0x0058 (0x0060 - 0x0008)
struct FRHAPI_PlatformIdentityLookupResults final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_PlayerResponse> Identity_Optional;                             // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Identity_IsSet;                                    // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformIdentityLookupResults) == 0x000008, "Wrong alignment on FRHAPI_PlatformIdentityLookupResults");
static_assert(sizeof(FRHAPI_PlatformIdentityLookupResults) == 0x000060, "Wrong size on FRHAPI_PlatformIdentityLookupResults");
static_assert(offsetof(FRHAPI_PlatformIdentityLookupResults, Identity_Optional) == 0x000008, "Member 'FRHAPI_PlatformIdentityLookupResults::Identity_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformIdentityLookupResults, Identity_IsSet) == 0x000058, "Member 'FRHAPI_PlatformIdentityLookupResults::Identity_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformIndividualCCUs
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_PlatformIndividualCCUs final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_IndividualCCUs> PlatformCcus;                                  // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlatformIndividualCCUs) == 0x000008, "Wrong alignment on FRHAPI_PlatformIndividualCCUs");
static_assert(sizeof(FRHAPI_PlatformIndividualCCUs) == 0x000058, "Wrong size on FRHAPI_PlatformIndividualCCUs");
static_assert(offsetof(FRHAPI_PlatformIndividualCCUs, PlatformCcus) == 0x000008, "Member 'FRHAPI_PlatformIndividualCCUs::PlatformCcus' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformSessionTemplate
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_PlatformSessionTemplate final : public FRHAPI_Model
{
public:
	ERHAPI_PlatformID                             PlatformId;                                        // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform;                                          // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformSessionType;                               // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers_Optional;                               // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MaxPlayers_IsSet;                                  // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0028(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformSessionTemplate) == 0x000008, "Wrong alignment on FRHAPI_PlatformSessionTemplate");
static_assert(sizeof(FRHAPI_PlatformSessionTemplate) == 0x000080, "Wrong size on FRHAPI_PlatformSessionTemplate");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, PlatformId) == 0x000008, "Member 'FRHAPI_PlatformSessionTemplate::PlatformId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, Platform) == 0x000009, "Member 'FRHAPI_PlatformSessionTemplate::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, PlatformSessionType) == 0x000010, "Member 'FRHAPI_PlatformSessionTemplate::PlatformSessionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, MaxPlayers_Optional) == 0x000020, "Member 'FRHAPI_PlatformSessionTemplate::MaxPlayers_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, MaxPlayers_IsSet) == 0x000024, "Member 'FRHAPI_PlatformSessionTemplate::MaxPlayers_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, CustomData_Optional) == 0x000028, "Member 'FRHAPI_PlatformSessionTemplate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformSessionTemplate, CustomData_IsSet) == 0x000078, "Member 'FRHAPI_PlatformSessionTemplate::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UnionCCU
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_UnionCCU final : public FRHAPI_Model
{
public:
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDateTime>                      Timestamps;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_UnionCCU) == 0x000008, "Wrong alignment on FRHAPI_UnionCCU");
static_assert(sizeof(FRHAPI_UnionCCU) == 0x000020, "Wrong size on FRHAPI_UnionCCU");
static_assert(offsetof(FRHAPI_UnionCCU, Count) == 0x000008, "Member 'FRHAPI_UnionCCU::Count' has a wrong offset!");
static_assert(offsetof(FRHAPI_UnionCCU, Timestamps) == 0x000010, "Member 'FRHAPI_UnionCCU::Timestamps' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformUnionCCUs
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_PlatformUnionCCUs final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_UnionCCU>   PlatformCounts;                                    // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlatformUnionCCUs) == 0x000008, "Wrong alignment on FRHAPI_PlatformUnionCCUs");
static_assert(sizeof(FRHAPI_PlatformUnionCCUs) == 0x000058, "Wrong size on FRHAPI_PlatformUnionCCUs");
static_assert(offsetof(FRHAPI_PlatformUnionCCUs, PlatformCounts) == 0x000008, "Member 'FRHAPI_PlatformUnionCCUs::PlatformCounts' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformUserLinkRequest
// 0x0078 (0x0080 - 0x0008)
struct FRHAPI_PlatformUserLinkRequest final : public FRHAPI_Model
{
public:
	struct FGuid                                  LeaderPersonId_Optional;                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaderPersonId_IsSet;                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               LeaderPlatform_Optional;                           // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaderPlatform_IsSet;                              // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LeaderPlatformUserId_Optional;                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeaderPlatformUserId_IsSet;                        // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               FollowerPlatform_Optional;                         // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FollowerPlatform_IsSet;                            // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FollowerPlatformUserId_Optional;                   // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FollowerPlatformUserId_IsSet;                      // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Scheme_Optional;                                   // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Scheme_IsSet;                                      // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Credentials_Optional;                              // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Credentials_IsSet;                                 // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformUserLinkRequest) == 0x000008, "Wrong alignment on FRHAPI_PlatformUserLinkRequest");
static_assert(sizeof(FRHAPI_PlatformUserLinkRequest) == 0x000080, "Wrong size on FRHAPI_PlatformUserLinkRequest");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPersonId_Optional) == 0x000008, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPersonId_IsSet) == 0x000018, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPlatform_Optional) == 0x000019, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPlatform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPlatform_IsSet) == 0x00001A, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPlatform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPlatformUserId_Optional) == 0x000020, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, LeaderPlatformUserId_IsSet) == 0x000030, "Member 'FRHAPI_PlatformUserLinkRequest::LeaderPlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, FollowerPlatform_Optional) == 0x000031, "Member 'FRHAPI_PlatformUserLinkRequest::FollowerPlatform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, FollowerPlatform_IsSet) == 0x000032, "Member 'FRHAPI_PlatformUserLinkRequest::FollowerPlatform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, FollowerPlatformUserId_Optional) == 0x000038, "Member 'FRHAPI_PlatformUserLinkRequest::FollowerPlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, FollowerPlatformUserId_IsSet) == 0x000048, "Member 'FRHAPI_PlatformUserLinkRequest::FollowerPlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, Scheme_Optional) == 0x000050, "Member 'FRHAPI_PlatformUserLinkRequest::Scheme_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, Scheme_IsSet) == 0x000060, "Member 'FRHAPI_PlatformUserLinkRequest::Scheme_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, Credentials_Optional) == 0x000068, "Member 'FRHAPI_PlatformUserLinkRequest::Credentials_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserLinkRequest, Credentials_IsSet) == 0x000078, "Member 'FRHAPI_PlatformUserLinkRequest::Credentials_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlatformUserResponse
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_PlatformUserResponse final : public FRHAPI_Model
{
public:
	ERHAPI_Platform                               Platform;                                          // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName_Optional;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayName_IsSet;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PersonId;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivePlayerId_Optional;                           // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerId_IsSet;                              // 0x005C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivePlayerUuid_Optional;                         // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerUuid_IsSet;                            // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlatformUserResponse) == 0x000008, "Wrong alignment on FRHAPI_PlatformUserResponse");
static_assert(sizeof(FRHAPI_PlatformUserResponse) == 0x000078, "Wrong size on FRHAPI_PlatformUserResponse");
static_assert(offsetof(FRHAPI_PlatformUserResponse, Platform) == 0x000008, "Member 'FRHAPI_PlatformUserResponse::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, PlatformUserId) == 0x000010, "Member 'FRHAPI_PlatformUserResponse::PlatformUserId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, DisplayName_Optional) == 0x000020, "Member 'FRHAPI_PlatformUserResponse::DisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, DisplayName_IsSet) == 0x000030, "Member 'FRHAPI_PlatformUserResponse::DisplayName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, PlayerId) == 0x000034, "Member 'FRHAPI_PlatformUserResponse::PlayerId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, PlayerUuid) == 0x000038, "Member 'FRHAPI_PlatformUserResponse::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, PersonId) == 0x000048, "Member 'FRHAPI_PlatformUserResponse::PersonId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, ActivePlayerId_Optional) == 0x000058, "Member 'FRHAPI_PlatformUserResponse::ActivePlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, ActivePlayerId_IsSet) == 0x00005C, "Member 'FRHAPI_PlatformUserResponse::ActivePlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, ActivePlayerUuid_Optional) == 0x000060, "Member 'FRHAPI_PlatformUserResponse::ActivePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlatformUserResponse, ActivePlayerUuid_IsSet) == 0x000070, "Member 'FRHAPI_PlatformUserResponse::ActivePlayerUuid_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerInviteRequest
// 0x0060 (0x0068 - 0x0008)
struct FRHAPI_PlayerInviteRequest final : public FRHAPI_Model
{
public:
	int32                                         TeamId_Optional;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_TeamOverflowAction                     OverflowAction_Optional;                           // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverflowAction_IsSet;                              // 0x000E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0010(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerInviteRequest) == 0x000008, "Wrong alignment on FRHAPI_PlayerInviteRequest");
static_assert(sizeof(FRHAPI_PlayerInviteRequest) == 0x000068, "Wrong size on FRHAPI_PlayerInviteRequest");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, TeamId_Optional) == 0x000008, "Member 'FRHAPI_PlayerInviteRequest::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, TeamId_IsSet) == 0x00000C, "Member 'FRHAPI_PlayerInviteRequest::TeamId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, OverflowAction_Optional) == 0x00000D, "Member 'FRHAPI_PlayerInviteRequest::OverflowAction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, OverflowAction_IsSet) == 0x00000E, "Member 'FRHAPI_PlayerInviteRequest::OverflowAction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, CustomData_Optional) == 0x000010, "Member 'FRHAPI_PlayerInviteRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerInviteRequest, CustomData_IsSet) == 0x000060, "Member 'FRHAPI_PlayerInviteRequest::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerIterateResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PlayerIterateResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerResponse>          Players_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Players_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerIterateResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerIterateResponse");
static_assert(sizeof(FRHAPI_PlayerIterateResponse) == 0x000038, "Wrong size on FRHAPI_PlayerIterateResponse");
static_assert(offsetof(FRHAPI_PlayerIterateResponse, Players_Optional) == 0x000008, "Member 'FRHAPI_PlayerIterateResponse::Players_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerIterateResponse, Players_IsSet) == 0x000018, "Member 'FRHAPI_PlayerIterateResponse::Players_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerIterateResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_PlayerIterateResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerIterateResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_PlayerIterateResponse::Cursor_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerLastSeenUpdate
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_PlayerLastSeenUpdate final : public FRHAPI_Model
{
public:
	struct FDateTime                              Time;                                              // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform_Optional;                                 // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName_Optional;                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayName_IsSet;                                 // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerLastSeenUpdate) == 0x000008, "Wrong alignment on FRHAPI_PlayerLastSeenUpdate");
static_assert(sizeof(FRHAPI_PlayerLastSeenUpdate) == 0x000040, "Wrong size on FRHAPI_PlayerLastSeenUpdate");
static_assert(offsetof(FRHAPI_PlayerLastSeenUpdate, Time) == 0x000008, "Member 'FRHAPI_PlayerLastSeenUpdate::Time' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerLastSeenUpdate, Platform_Optional) == 0x000010, "Member 'FRHAPI_PlayerLastSeenUpdate::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerLastSeenUpdate, Platform_IsSet) == 0x000020, "Member 'FRHAPI_PlayerLastSeenUpdate::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerLastSeenUpdate, DisplayName_Optional) == 0x000028, "Member 'FRHAPI_PlayerLastSeenUpdate::DisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerLastSeenUpdate, DisplayName_IsSet) == 0x000038, "Member 'FRHAPI_PlayerLastSeenUpdate::DisplayName_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerPersonResponse
// 0x0058 (0x0060 - 0x0008)
struct FRHAPI_PlayerPersonResponse final : public FRHAPI_Model
{
public:
	int32                                         PlayerId;                                          // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivePlayerId_Optional;                           // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerId_IsSet;                              // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ActivePlayerUuid_Optional;                         // 0x0024(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActivePlayerUuid_IsSet;                            // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PersonId;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RoleId_Optional;                                   // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoleId_IsSet;                                      // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerPersonResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerPersonResponse");
static_assert(sizeof(FRHAPI_PlayerPersonResponse) == 0x000060, "Wrong size on FRHAPI_PlayerPersonResponse");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, PlayerId) == 0x000008, "Member 'FRHAPI_PlayerPersonResponse::PlayerId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, PlayerUuid) == 0x00000C, "Member 'FRHAPI_PlayerPersonResponse::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, ActivePlayerId_Optional) == 0x00001C, "Member 'FRHAPI_PlayerPersonResponse::ActivePlayerId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, ActivePlayerId_IsSet) == 0x000020, "Member 'FRHAPI_PlayerPersonResponse::ActivePlayerId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, ActivePlayerUuid_Optional) == 0x000024, "Member 'FRHAPI_PlayerPersonResponse::ActivePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, ActivePlayerUuid_IsSet) == 0x000034, "Member 'FRHAPI_PlayerPersonResponse::ActivePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, PersonId) == 0x000038, "Member 'FRHAPI_PlayerPersonResponse::PersonId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, RoleId_Optional) == 0x000048, "Member 'FRHAPI_PlayerPersonResponse::RoleId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerPersonResponse, RoleId_IsSet) == 0x000058, "Member 'FRHAPI_PlayerPersonResponse::RoleId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PortalUserResponse
// 0x0048 (0x0050 - 0x0008)
struct FRHAPI_PortalUserResponse final : public FRHAPI_Model
{
public:
	class FString                                 PortalUserId_Optional;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PortalId;                                          // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform;                                          // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayName_Optional;                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisplayName_IsSet;                                 // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PortalUserResponse) == 0x000008, "Wrong alignment on FRHAPI_PortalUserResponse");
static_assert(sizeof(FRHAPI_PortalUserResponse) == 0x000050, "Wrong size on FRHAPI_PortalUserResponse");
static_assert(offsetof(FRHAPI_PortalUserResponse, PortalUserId_Optional) == 0x000008, "Member 'FRHAPI_PortalUserResponse::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, PortalUserId_IsSet) == 0x000018, "Member 'FRHAPI_PortalUserResponse::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, PortalId) == 0x00001C, "Member 'FRHAPI_PortalUserResponse::PortalId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, Platform) == 0x000020, "Member 'FRHAPI_PortalUserResponse::Platform' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, DisplayName_Optional) == 0x000028, "Member 'FRHAPI_PortalUserResponse::DisplayName_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, DisplayName_IsSet) == 0x000038, "Member 'FRHAPI_PortalUserResponse::DisplayName_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, PlayerId) == 0x00003C, "Member 'FRHAPI_PortalUserResponse::PlayerId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalUserResponse, PlayerUuid) == 0x000040, "Member 'FRHAPI_PortalUserResponse::PlayerUuid' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerLinkedPortalsResponse
// 0x0070 (0x0078 - 0x0008)
struct FRHAPI_PlayerLinkedPortalsResponse final : public FRHAPI_Model
{
public:
	struct FRHAPI_PlayerPersonResponse            Player;                                            // 0x0008(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_PortalUserResponse>      LinkedPortals;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerLinkedPortalsResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerLinkedPortalsResponse");
static_assert(sizeof(FRHAPI_PlayerLinkedPortalsResponse) == 0x000078, "Wrong size on FRHAPI_PlayerLinkedPortalsResponse");
static_assert(offsetof(FRHAPI_PlayerLinkedPortalsResponse, Player) == 0x000008, "Member 'FRHAPI_PlayerLinkedPortalsResponse::Player' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerLinkedPortalsResponse, LinkedPortals) == 0x000068, "Member 'FRHAPI_PlayerLinkedPortalsResponse::LinkedPortals' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerMoveRequest
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_PlayerMoveRequest final : public FRHAPI_Model
{
public:
	int32                                         TeamId_Optional;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeamId_IsSet;                                      // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerMoveRequest) == 0x000008, "Wrong alignment on FRHAPI_PlayerMoveRequest");
static_assert(sizeof(FRHAPI_PlayerMoveRequest) == 0x000010, "Wrong size on FRHAPI_PlayerMoveRequest");
static_assert(offsetof(FRHAPI_PlayerMoveRequest, TeamId_Optional) == 0x000008, "Member 'FRHAPI_PlayerMoveRequest::TeamId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerMoveRequest, TeamId_IsSet) == 0x00000C, "Member 'FRHAPI_PlayerMoveRequest::TeamId_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SetSinglePlayerSettingRequest
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_SetSinglePlayerSettingRequest final : public FRHAPI_Model
{
public:
	int32                                         V;                                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonValue                       Value;                                             // 0x0010(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Value_IsNull;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SetSinglePlayerSettingRequest) == 0x000008, "Wrong alignment on FRHAPI_SetSinglePlayerSettingRequest");
static_assert(sizeof(FRHAPI_SetSinglePlayerSettingRequest) == 0x000028, "Wrong size on FRHAPI_SetSinglePlayerSettingRequest");
static_assert(offsetof(FRHAPI_SetSinglePlayerSettingRequest, V) == 0x000008, "Member 'FRHAPI_SetSinglePlayerSettingRequest::V' has a wrong offset!");
static_assert(offsetof(FRHAPI_SetSinglePlayerSettingRequest, Value) == 0x000010, "Member 'FRHAPI_SetSinglePlayerSettingRequest::Value' has a wrong offset!");
static_assert(offsetof(FRHAPI_SetSinglePlayerSettingRequest, Value_IsNull) == 0x000020, "Member 'FRHAPI_SetSinglePlayerSettingRequest::Value_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrderCreateInput
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_PlayerOrderCreateInput final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Portal                                 PortalId_Optional;                                 // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsSet;                                    // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalId_IsNull;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalUserId_Optional;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PortalUserId_IsNull;                               // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_Optional;                            // 0x006A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTransaction_IsSet;                               // 0x006B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId_Optional;                                  // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsSet;                                     // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OrderId_IsNull;                                    // 0x0081(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_PlayerOrderEntryCreateInput> Entries;                                       // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerOrderCreateInput) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrderCreateInput");
static_assert(sizeof(FRHAPI_PlayerOrderCreateInput) == 0x000098, "Wrong size on FRHAPI_PlayerOrderCreateInput");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, Source_Optional) == 0x000008, "Member 'FRHAPI_PlayerOrderCreateInput::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, Source_IsSet) == 0x000009, "Member 'FRHAPI_PlayerOrderCreateInput::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_PlayerOrderCreateInput::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_PlayerOrderCreateInput::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_PlayerOrderCreateInput::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalId_Optional) == 0x00001E, "Member 'FRHAPI_PlayerOrderCreateInput::PortalId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalId_IsSet) == 0x00001F, "Member 'FRHAPI_PlayerOrderCreateInput::PortalId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalId_IsNull) == 0x000020, "Member 'FRHAPI_PlayerOrderCreateInput::PortalId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalUserId_Optional) == 0x000028, "Member 'FRHAPI_PlayerOrderCreateInput::PortalUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalUserId_IsSet) == 0x000038, "Member 'FRHAPI_PlayerOrderCreateInput::PortalUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, PortalUserId_IsNull) == 0x000039, "Member 'FRHAPI_PlayerOrderCreateInput::PortalUserId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, InstanceId_Optional) == 0x000040, "Member 'FRHAPI_PlayerOrderCreateInput::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, InstanceId_IsSet) == 0x000050, "Member 'FRHAPI_PlayerOrderCreateInput::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, InstanceId_IsNull) == 0x000051, "Member 'FRHAPI_PlayerOrderCreateInput::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, MatchId_Optional) == 0x000058, "Member 'FRHAPI_PlayerOrderCreateInput::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, MatchId_IsSet) == 0x000068, "Member 'FRHAPI_PlayerOrderCreateInput::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, MatchId_IsNull) == 0x000069, "Member 'FRHAPI_PlayerOrderCreateInput::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, IsTransaction_Optional) == 0x00006A, "Member 'FRHAPI_PlayerOrderCreateInput::IsTransaction_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, IsTransaction_IsSet) == 0x00006B, "Member 'FRHAPI_PlayerOrderCreateInput::IsTransaction_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, OrderId_Optional) == 0x000070, "Member 'FRHAPI_PlayerOrderCreateInput::OrderId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, OrderId_IsSet) == 0x000080, "Member 'FRHAPI_PlayerOrderCreateInput::OrderId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, OrderId_IsNull) == 0x000081, "Member 'FRHAPI_PlayerOrderCreateInput::OrderId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrderCreateInput, Entries) == 0x000088, "Member 'FRHAPI_PlayerOrderCreateInput::Entries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerOrdersResponse
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_PlayerOrdersResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerOrder>             Data_Optional;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Data_IsSet;                                        // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InventoryPageMeta               Page;                                              // 0x0020(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerOrdersResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerOrdersResponse");
static_assert(sizeof(FRHAPI_PlayerOrdersResponse) == 0x000058, "Wrong size on FRHAPI_PlayerOrdersResponse");
static_assert(offsetof(FRHAPI_PlayerOrdersResponse, Data_Optional) == 0x000008, "Member 'FRHAPI_PlayerOrdersResponse::Data_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrdersResponse, Data_IsSet) == 0x000018, "Member 'FRHAPI_PlayerOrdersResponse::Data_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerOrdersResponse, Page) == 0x000020, "Member 'FRHAPI_PlayerOrdersResponse::Page' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SupportLogEntry
// 0x00A8 (0x00B0 - 0x0008)
struct FRHAPI_SupportLogEntry final : public FRHAPI_Model
{
public:
	class FString                                 SupportActionLogId;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PersonId_Optional;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PersonId_IsSet;                                    // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlayerUuid_Optional;                               // 0x002C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerUuid_IsSet;                                  // 0x003C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               Platform_Optional;                                 // 0x003D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Platform_IsSet;                                    // 0x003E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformUserId_Optional;                           // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlatformUserId_IsSet;                              // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventName;                                         // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventDescription;                                  // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ip_Optional;                                       // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ip_IsSet;                                          // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SupportUsername_Optional;                          // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SupportUsername_IsSet;                             // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Created;                                           // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_SupportLogEntry) == 0x000008, "Wrong alignment on FRHAPI_SupportLogEntry");
static_assert(sizeof(FRHAPI_SupportLogEntry) == 0x0000B0, "Wrong size on FRHAPI_SupportLogEntry");
static_assert(offsetof(FRHAPI_SupportLogEntry, SupportActionLogId) == 0x000008, "Member 'FRHAPI_SupportLogEntry::SupportActionLogId' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PersonId_Optional) == 0x000018, "Member 'FRHAPI_SupportLogEntry::PersonId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PersonId_IsSet) == 0x000028, "Member 'FRHAPI_SupportLogEntry::PersonId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PlayerUuid_Optional) == 0x00002C, "Member 'FRHAPI_SupportLogEntry::PlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PlayerUuid_IsSet) == 0x00003C, "Member 'FRHAPI_SupportLogEntry::PlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, Platform_Optional) == 0x00003D, "Member 'FRHAPI_SupportLogEntry::Platform_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, Platform_IsSet) == 0x00003E, "Member 'FRHAPI_SupportLogEntry::Platform_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PlatformUserId_Optional) == 0x000040, "Member 'FRHAPI_SupportLogEntry::PlatformUserId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, PlatformUserId_IsSet) == 0x000050, "Member 'FRHAPI_SupportLogEntry::PlatformUserId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, EventName) == 0x000058, "Member 'FRHAPI_SupportLogEntry::EventName' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, EventDescription) == 0x000068, "Member 'FRHAPI_SupportLogEntry::EventDescription' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, Ip_Optional) == 0x000078, "Member 'FRHAPI_SupportLogEntry::Ip_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, Ip_IsSet) == 0x000088, "Member 'FRHAPI_SupportLogEntry::Ip_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, SupportUsername_Optional) == 0x000090, "Member 'FRHAPI_SupportLogEntry::SupportUsername_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, SupportUsername_IsSet) == 0x0000A0, "Member 'FRHAPI_SupportLogEntry::SupportUsername_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogEntry, Created) == 0x0000A8, "Member 'FRHAPI_SupportLogEntry::Created' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankResponse
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_PlayerRankResponse final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_RankRankData                    Rank;                                              // 0x0018(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RankId;                                            // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerRankResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankResponse");
static_assert(sizeof(FRHAPI_PlayerRankResponse) == 0x000088, "Wrong size on FRHAPI_PlayerRankResponse");
static_assert(offsetof(FRHAPI_PlayerRankResponse, PlayerUuid) == 0x000008, "Member 'FRHAPI_PlayerRankResponse::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankResponse, Rank) == 0x000018, "Member 'FRHAPI_PlayerRankResponse::Rank' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankResponse, RankId) == 0x000080, "Member 'FRHAPI_PlayerRankResponse::RankId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankRequestResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerRankRequestResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerRankResponse>      PlayerRanks;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankRequestResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankRequestResponse");
static_assert(sizeof(FRHAPI_PlayerRankRequestResponse) == 0x000018, "Wrong size on FRHAPI_PlayerRankRequestResponse");
static_assert(offsetof(FRHAPI_PlayerRankRequestResponse, PlayerRanks) == 0x000008, "Member 'FRHAPI_PlayerRankRequestResponse::PlayerRanks' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionTemplate
// 0x0210 (0x0218 - 0x0008)
struct FRHAPI_SessionTemplate final : public FRHAPI_Model
{
public:
	class FString                                 SessionType;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EngineSessionType_Optional;                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EngineSessionType_IsSet;                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanJoinMatchmaking_Optional;                       // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanJoinMatchmaking_IsSet;                          // 0x002A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeCreatedByPlayersDirectly_Optional;            // 0x002B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeCreatedByPlayersDirectly_IsSet;               // 0x002C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_Optional;                                 // 0x002D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_IsSet;                                    // 0x002E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttemptAutoJoin_Optional;                          // 0x002F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttemptAutoJoin_IsSet;                             // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultPublic_Optional;                            // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultPublic_IsSet;                               // 0x0032(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAddToBrowser_Optional;                         // 0x0033(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoAddToBrowser_IsSet;                            // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            AutoBrowserParams_Optional;                        // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AutoBrowserParams_IsSet;                           // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeAddedToServerBrowser_Optional;                // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeAddedToServerBrowser_IsSet;                   // 0x008A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepAliveOnEmpty_Optional;                         // 0x008B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepAliveOnEmpty_IsSet;                            // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_PlatformSessionTemplate> PlatformTemplates_Optional;           // 0x0090(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PlatformTemplates_IsSet;                           // 0x00E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_InstanceStartupParams           AutoStartupParams_Optional;                        // 0x00E8(0x0098)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AutoStartupParams_IsSet;                           // 0x0180(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  AutoStartupInstanceTemplateId_Optional;            // 0x0184(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoStartupInstanceTemplateId_IsSet;               // 0x0194(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinSessionCount_Optional;                          // 0x0198(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MinSessionCount_IsSet;                             // 0x019C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x01A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x01F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x3];                                      // 0x01F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTeams_Optional;                                 // 0x01F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NumTeams_IsSet;                                    // 0x01F8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayersPerTeam_Optional;                           // 0x01FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayersPerTeam_IsSet;                              // 0x0200(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanChangeOwnTeam_Optional;                         // 0x0201(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanChangeOwnTeam_IsSet;                            // 0x0202(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotifyOnReservation_Optional;                      // 0x0203(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotifyOnReservation_IsSet;                         // 0x0204(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerVisibility                       PlayerVisibility_Optional;                         // 0x0205(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerVisibility_IsSet;                            // 0x0206(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerVisibility                       AdminPlayerVisibility_Optional;                    // 0x0207(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdminPlayerVisibility_IsSet;                       // 0x0208(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerVisibility                       PlayerNotificationFrequency_Optional;              // 0x0209(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerNotificationFrequency_IsSet;                 // 0x020A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_PlayerVisibility                       AdminPlayerNotificationFrequency_Optional;         // 0x020B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdminPlayerNotificationFrequency_IsSet;            // 0x020C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerCullingTimeout_Optional;                     // 0x0210(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerCullingTimeout_IsSet;                        // 0x0214(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionTemplate) == 0x000008, "Wrong alignment on FRHAPI_SessionTemplate");
static_assert(sizeof(FRHAPI_SessionTemplate) == 0x000218, "Wrong size on FRHAPI_SessionTemplate");
static_assert(offsetof(FRHAPI_SessionTemplate, SessionType) == 0x000008, "Member 'FRHAPI_SessionTemplate::SessionType' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, EngineSessionType_Optional) == 0x000018, "Member 'FRHAPI_SessionTemplate::EngineSessionType_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, EngineSessionType_IsSet) == 0x000028, "Member 'FRHAPI_SessionTemplate::EngineSessionType_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanJoinMatchmaking_Optional) == 0x000029, "Member 'FRHAPI_SessionTemplate::CanJoinMatchmaking_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanJoinMatchmaking_IsSet) == 0x00002A, "Member 'FRHAPI_SessionTemplate::CanJoinMatchmaking_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanBeCreatedByPlayersDirectly_Optional) == 0x00002B, "Member 'FRHAPI_SessionTemplate::CanBeCreatedByPlayersDirectly_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanBeCreatedByPlayersDirectly_IsSet) == 0x00002C, "Member 'FRHAPI_SessionTemplate::CanBeCreatedByPlayersDirectly_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, Joinable_Optional) == 0x00002D, "Member 'FRHAPI_SessionTemplate::Joinable_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, Joinable_IsSet) == 0x00002E, "Member 'FRHAPI_SessionTemplate::Joinable_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AttemptAutoJoin_Optional) == 0x00002F, "Member 'FRHAPI_SessionTemplate::AttemptAutoJoin_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AttemptAutoJoin_IsSet) == 0x000030, "Member 'FRHAPI_SessionTemplate::AttemptAutoJoin_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, DefaultPublic_Optional) == 0x000031, "Member 'FRHAPI_SessionTemplate::DefaultPublic_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, DefaultPublic_IsSet) == 0x000032, "Member 'FRHAPI_SessionTemplate::DefaultPublic_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoAddToBrowser_Optional) == 0x000033, "Member 'FRHAPI_SessionTemplate::AutoAddToBrowser_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoAddToBrowser_IsSet) == 0x000034, "Member 'FRHAPI_SessionTemplate::AutoAddToBrowser_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoBrowserParams_Optional) == 0x000038, "Member 'FRHAPI_SessionTemplate::AutoBrowserParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoBrowserParams_IsSet) == 0x000088, "Member 'FRHAPI_SessionTemplate::AutoBrowserParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanBeAddedToServerBrowser_Optional) == 0x000089, "Member 'FRHAPI_SessionTemplate::CanBeAddedToServerBrowser_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanBeAddedToServerBrowser_IsSet) == 0x00008A, "Member 'FRHAPI_SessionTemplate::CanBeAddedToServerBrowser_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, KeepAliveOnEmpty_Optional) == 0x00008B, "Member 'FRHAPI_SessionTemplate::KeepAliveOnEmpty_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, KeepAliveOnEmpty_IsSet) == 0x00008C, "Member 'FRHAPI_SessionTemplate::KeepAliveOnEmpty_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlatformTemplates_Optional) == 0x000090, "Member 'FRHAPI_SessionTemplate::PlatformTemplates_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlatformTemplates_IsSet) == 0x0000E0, "Member 'FRHAPI_SessionTemplate::PlatformTemplates_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoStartupParams_Optional) == 0x0000E8, "Member 'FRHAPI_SessionTemplate::AutoStartupParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoStartupParams_IsSet) == 0x000180, "Member 'FRHAPI_SessionTemplate::AutoStartupParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoStartupInstanceTemplateId_Optional) == 0x000184, "Member 'FRHAPI_SessionTemplate::AutoStartupInstanceTemplateId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AutoStartupInstanceTemplateId_IsSet) == 0x000194, "Member 'FRHAPI_SessionTemplate::AutoStartupInstanceTemplateId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, MinSessionCount_Optional) == 0x000198, "Member 'FRHAPI_SessionTemplate::MinSessionCount_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, MinSessionCount_IsSet) == 0x00019C, "Member 'FRHAPI_SessionTemplate::MinSessionCount_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CustomData_Optional) == 0x0001A0, "Member 'FRHAPI_SessionTemplate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CustomData_IsSet) == 0x0001F0, "Member 'FRHAPI_SessionTemplate::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, NumTeams_Optional) == 0x0001F4, "Member 'FRHAPI_SessionTemplate::NumTeams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, NumTeams_IsSet) == 0x0001F8, "Member 'FRHAPI_SessionTemplate::NumTeams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayersPerTeam_Optional) == 0x0001FC, "Member 'FRHAPI_SessionTemplate::PlayersPerTeam_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayersPerTeam_IsSet) == 0x000200, "Member 'FRHAPI_SessionTemplate::PlayersPerTeam_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanChangeOwnTeam_Optional) == 0x000201, "Member 'FRHAPI_SessionTemplate::CanChangeOwnTeam_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, CanChangeOwnTeam_IsSet) == 0x000202, "Member 'FRHAPI_SessionTemplate::CanChangeOwnTeam_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, NotifyOnReservation_Optional) == 0x000203, "Member 'FRHAPI_SessionTemplate::NotifyOnReservation_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, NotifyOnReservation_IsSet) == 0x000204, "Member 'FRHAPI_SessionTemplate::NotifyOnReservation_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerVisibility_Optional) == 0x000205, "Member 'FRHAPI_SessionTemplate::PlayerVisibility_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerVisibility_IsSet) == 0x000206, "Member 'FRHAPI_SessionTemplate::PlayerVisibility_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AdminPlayerVisibility_Optional) == 0x000207, "Member 'FRHAPI_SessionTemplate::AdminPlayerVisibility_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AdminPlayerVisibility_IsSet) == 0x000208, "Member 'FRHAPI_SessionTemplate::AdminPlayerVisibility_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerNotificationFrequency_Optional) == 0x000209, "Member 'FRHAPI_SessionTemplate::PlayerNotificationFrequency_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerNotificationFrequency_IsSet) == 0x00020A, "Member 'FRHAPI_SessionTemplate::PlayerNotificationFrequency_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AdminPlayerNotificationFrequency_Optional) == 0x00020B, "Member 'FRHAPI_SessionTemplate::AdminPlayerNotificationFrequency_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, AdminPlayerNotificationFrequency_IsSet) == 0x00020C, "Member 'FRHAPI_SessionTemplate::AdminPlayerNotificationFrequency_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerCullingTimeout_Optional) == 0x000210, "Member 'FRHAPI_SessionTemplate::PlayerCullingTimeout_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplate, PlayerCullingTimeout_IsSet) == 0x000214, "Member 'FRHAPI_SessionTemplate::PlayerCullingTimeout_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionTemplates
// 0x0058 (0x0060 - 0x0008)
struct FRHAPI_SessionTemplates final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_SessionTemplate> Templates_Optional;                           // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Templates_IsSet;                                   // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionTemplates) == 0x000008, "Wrong alignment on FRHAPI_SessionTemplates");
static_assert(sizeof(FRHAPI_SessionTemplates) == 0x000060, "Wrong size on FRHAPI_SessionTemplates");
static_assert(offsetof(FRHAPI_SessionTemplates, Templates_Optional) == 0x000008, "Member 'FRHAPI_SessionTemplates::Templates_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionTemplates, Templates_IsSet) == 0x000058, "Member 'FRHAPI_SessionTemplates::Templates_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankRequestResponseV2
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerRankRequestResponseV2 final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerRankResponseV2>    PlayerRanks;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankRequestResponseV2) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankRequestResponseV2");
static_assert(sizeof(FRHAPI_PlayerRankRequestResponseV2) == 0x000018, "Wrong size on FRHAPI_PlayerRankRequestResponseV2");
static_assert(offsetof(FRHAPI_PlayerRankRequestResponseV2, PlayerRanks) == 0x000008, "Member 'FRHAPI_PlayerRankRequestResponseV2::PlayerRanks' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankUpdateRequest
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_PlayerRankUpdateRequest final : public FRHAPI_Model
{
public:
	class FString                                 InstanceId_Optional;                               // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_RankRankData                    Rank;                                              // 0x0020(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankUpdateRequest");
static_assert(sizeof(FRHAPI_PlayerRankUpdateRequest) == 0x000088, "Wrong size on FRHAPI_PlayerRankUpdateRequest");
static_assert(offsetof(FRHAPI_PlayerRankUpdateRequest, InstanceId_Optional) == 0x000008, "Member 'FRHAPI_PlayerRankUpdateRequest::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankUpdateRequest, InstanceId_IsSet) == 0x000018, "Member 'FRHAPI_PlayerRankUpdateRequest::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerRankUpdateRequest, Rank) == 0x000020, "Member 'FRHAPI_PlayerRankUpdateRequest::Rank' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankUpdateResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerRankUpdateResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerRankResponse>      UpdatedPlayers;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankUpdateResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankUpdateResponse");
static_assert(sizeof(FRHAPI_PlayerRankUpdateResponse) == 0x000018, "Wrong size on FRHAPI_PlayerRankUpdateResponse");
static_assert(offsetof(FRHAPI_PlayerRankUpdateResponse, UpdatedPlayers) == 0x000008, "Member 'FRHAPI_PlayerRankUpdateResponse::UpdatedPlayers' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerRankUpdateResponseV2
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerRankUpdateResponseV2 final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerRankResponseV2>    UpdatedPlayers;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerRankUpdateResponseV2) == 0x000008, "Wrong alignment on FRHAPI_PlayerRankUpdateResponseV2");
static_assert(sizeof(FRHAPI_PlayerRankUpdateResponseV2) == 0x000018, "Wrong size on FRHAPI_PlayerRankUpdateResponseV2");
static_assert(offsetof(FRHAPI_PlayerRankUpdateResponseV2, UpdatedPlayers) == 0x000008, "Member 'FRHAPI_PlayerRankUpdateResponseV2::UpdatedPlayers' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReferral
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PlayerReferral final : public FRHAPI_Model
{
public:
	struct FGuid                                  ReferreePlayerUuid;                                // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReferrerPlayerUuid;                                // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedDatetime;                                   // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModifiedTimestamp;                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerReferral) == 0x000008, "Wrong alignment on FRHAPI_PlayerReferral");
static_assert(sizeof(FRHAPI_PlayerReferral) == 0x000038, "Wrong size on FRHAPI_PlayerReferral");
static_assert(offsetof(FRHAPI_PlayerReferral, ReferreePlayerUuid) == 0x000008, "Member 'FRHAPI_PlayerReferral::ReferreePlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferral, ReferrerPlayerUuid) == 0x000018, "Member 'FRHAPI_PlayerReferral::ReferrerPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferral, CreatedDatetime) == 0x000028, "Member 'FRHAPI_PlayerReferral::CreatedDatetime' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferral, LastModifiedTimestamp) == 0x000030, "Member 'FRHAPI_PlayerReferral::LastModifiedTimestamp' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReferralCode
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PlayerReferralCode final : public FRHAPI_Model
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReferralCode;                                      // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedDatetime;                                   // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastModifiedTimestamp;                             // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerReferralCode) == 0x000008, "Wrong alignment on FRHAPI_PlayerReferralCode");
static_assert(sizeof(FRHAPI_PlayerReferralCode) == 0x000038, "Wrong size on FRHAPI_PlayerReferralCode");
static_assert(offsetof(FRHAPI_PlayerReferralCode, PlayerUuid) == 0x000008, "Member 'FRHAPI_PlayerReferralCode::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralCode, ReferralCode) == 0x000018, "Member 'FRHAPI_PlayerReferralCode::ReferralCode' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralCode, CreatedDatetime) == 0x000028, "Member 'FRHAPI_PlayerReferralCode::CreatedDatetime' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralCode, LastModifiedTimestamp) == 0x000030, "Member 'FRHAPI_PlayerReferralCode::LastModifiedTimestamp' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReferralSetPayload
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_PlayerReferralSetPayload final : public FRHAPI_Model
{
public:
	struct FGuid                                  ReferrerPlayerUuid_Optional;                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReferrerPlayerUuid_IsSet;                          // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReferralCode_Optional;                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReferralCode_IsSet;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerReferralSetPayload) == 0x000008, "Wrong alignment on FRHAPI_PlayerReferralSetPayload");
static_assert(sizeof(FRHAPI_PlayerReferralSetPayload) == 0x000038, "Wrong size on FRHAPI_PlayerReferralSetPayload");
static_assert(offsetof(FRHAPI_PlayerReferralSetPayload, ReferrerPlayerUuid_Optional) == 0x000008, "Member 'FRHAPI_PlayerReferralSetPayload::ReferrerPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralSetPayload, ReferrerPlayerUuid_IsSet) == 0x000018, "Member 'FRHAPI_PlayerReferralSetPayload::ReferrerPlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralSetPayload, ReferralCode_Optional) == 0x000020, "Member 'FRHAPI_PlayerReferralSetPayload::ReferralCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReferralSetPayload, ReferralCode_IsSet) == 0x000030, "Member 'FRHAPI_PlayerReferralSetPayload::ReferralCode_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReportCreate
// 0x00E8 (0x00F0 - 0x0008)
struct FRHAPI_PlayerReportCreate final : public FRHAPI_Model
{
public:
	struct FGuid                                  SourcePlayerUuid_Optional;                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsSet;                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SourcePlayerUuid_IsNull;                           // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_ReportReason                           Reason;                                            // 0x001A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description_Optional;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsSet;                                 // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Description_IsNull;                                // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionId_Optional;                                // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsSet;                                   // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SessionId_IsNull;                                  // 0x0049(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId_Optional;                               // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsSet;                                  // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InstanceId_IsNull;                                 // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchId_Optional;                                  // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsSet;                                     // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchId_IsNull;                                    // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchSegment_Optional;                             // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchSegment_IsSet;                                // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MatchSegment_IsNull;                               // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerReportCreate) == 0x000008, "Wrong alignment on FRHAPI_PlayerReportCreate");
static_assert(sizeof(FRHAPI_PlayerReportCreate) == 0x0000F0, "Wrong size on FRHAPI_PlayerReportCreate");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SourcePlayerUuid_Optional) == 0x000008, "Member 'FRHAPI_PlayerReportCreate::SourcePlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SourcePlayerUuid_IsSet) == 0x000018, "Member 'FRHAPI_PlayerReportCreate::SourcePlayerUuid_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SourcePlayerUuid_IsNull) == 0x000019, "Member 'FRHAPI_PlayerReportCreate::SourcePlayerUuid_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, Reason) == 0x00001A, "Member 'FRHAPI_PlayerReportCreate::Reason' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, Description_Optional) == 0x000020, "Member 'FRHAPI_PlayerReportCreate::Description_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, Description_IsSet) == 0x000030, "Member 'FRHAPI_PlayerReportCreate::Description_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, Description_IsNull) == 0x000031, "Member 'FRHAPI_PlayerReportCreate::Description_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SessionId_Optional) == 0x000038, "Member 'FRHAPI_PlayerReportCreate::SessionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SessionId_IsSet) == 0x000048, "Member 'FRHAPI_PlayerReportCreate::SessionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, SessionId_IsNull) == 0x000049, "Member 'FRHAPI_PlayerReportCreate::SessionId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, InstanceId_Optional) == 0x000050, "Member 'FRHAPI_PlayerReportCreate::InstanceId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, InstanceId_IsSet) == 0x000060, "Member 'FRHAPI_PlayerReportCreate::InstanceId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, InstanceId_IsNull) == 0x000061, "Member 'FRHAPI_PlayerReportCreate::InstanceId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchId_Optional) == 0x000068, "Member 'FRHAPI_PlayerReportCreate::MatchId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchId_IsSet) == 0x000078, "Member 'FRHAPI_PlayerReportCreate::MatchId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchId_IsNull) == 0x000079, "Member 'FRHAPI_PlayerReportCreate::MatchId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchSegment_Optional) == 0x000080, "Member 'FRHAPI_PlayerReportCreate::MatchSegment_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchSegment_IsSet) == 0x000090, "Member 'FRHAPI_PlayerReportCreate::MatchSegment_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, MatchSegment_IsNull) == 0x000091, "Member 'FRHAPI_PlayerReportCreate::MatchSegment_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, CustomData_Optional) == 0x000098, "Member 'FRHAPI_PlayerReportCreate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportCreate, CustomData_IsSet) == 0x0000E8, "Member 'FRHAPI_PlayerReportCreate::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerReportList
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_PlayerReportList final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PlayerReport>            Reports;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextCursor_Optional;                               // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextCursor_IsSet;                                  // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextCursor_IsNull;                                 // 0x0029(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerReportList) == 0x000008, "Wrong alignment on FRHAPI_PlayerReportList");
static_assert(sizeof(FRHAPI_PlayerReportList) == 0x000030, "Wrong size on FRHAPI_PlayerReportList");
static_assert(offsetof(FRHAPI_PlayerReportList, Reports) == 0x000008, "Member 'FRHAPI_PlayerReportList::Reports' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportList, NextCursor_Optional) == 0x000018, "Member 'FRHAPI_PlayerReportList::NextCursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportList, NextCursor_IsSet) == 0x000028, "Member 'FRHAPI_PlayerReportList::NextCursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerReportList, NextCursor_IsNull) == 0x000029, "Member 'FRHAPI_PlayerReportList::NextCursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerSessionInvite
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_PlayerSessionInvite final : public FRHAPI_Model
{
public:
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  InvitingPlayerUuid_Optional;                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvitingPlayerUuid_IsSet;                          // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerSessionInvite) == 0x000008, "Wrong alignment on FRHAPI_PlayerSessionInvite");
static_assert(sizeof(FRHAPI_PlayerSessionInvite) == 0x000030, "Wrong size on FRHAPI_PlayerSessionInvite");
static_assert(offsetof(FRHAPI_PlayerSessionInvite, SessionId) == 0x000008, "Member 'FRHAPI_PlayerSessionInvite::SessionId' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSessionInvite, InvitingPlayerUuid_Optional) == 0x000018, "Member 'FRHAPI_PlayerSessionInvite::InvitingPlayerUuid_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSessionInvite, InvitingPlayerUuid_IsSet) == 0x000028, "Member 'FRHAPI_PlayerSessionInvite::InvitingPlayerUuid_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerSession
// 0x0118 (0x0120 - 0x0008)
struct FRHAPI_PlayerSession final : public FRHAPI_Model
{
public:
	class FString                                 Type;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           SessionIds_Optional;                               // 0x0018(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          SessionIds_IsSet;                                  // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FRHAPI_PlayerSessionInvite> PendingInvites_Optional;                  // 0x0070(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          PendingInvites_IsSet;                              // 0x00C0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           ReservedSessions_Optional;                         // 0x00C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ReservedSessions_IsSet;                            // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerSession) == 0x000008, "Wrong alignment on FRHAPI_PlayerSession");
static_assert(sizeof(FRHAPI_PlayerSession) == 0x000120, "Wrong size on FRHAPI_PlayerSession");
static_assert(offsetof(FRHAPI_PlayerSession, Type) == 0x000008, "Member 'FRHAPI_PlayerSession::Type' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, SessionIds_Optional) == 0x000018, "Member 'FRHAPI_PlayerSession::SessionIds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, SessionIds_IsSet) == 0x000068, "Member 'FRHAPI_PlayerSession::SessionIds_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, PendingInvites_Optional) == 0x000070, "Member 'FRHAPI_PlayerSession::PendingInvites_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, PendingInvites_IsSet) == 0x0000C0, "Member 'FRHAPI_PlayerSession::PendingInvites_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, ReservedSessions_Optional) == 0x0000C8, "Member 'FRHAPI_PlayerSession::ReservedSessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSession, ReservedSessions_IsSet) == 0x000118, "Member 'FRHAPI_PlayerSession::ReservedSessions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerSessions
// 0x0068 (0x0070 - 0x0008)
struct FRHAPI_PlayerSessions final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_PlayerSession> Sessions_Optional;                              // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Sessions_IsSet;                                    // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LastUpdatedTimestamp_Optional;                     // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastUpdatedTimestamp_IsSet;                        // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerSessions) == 0x000008, "Wrong alignment on FRHAPI_PlayerSessions");
static_assert(sizeof(FRHAPI_PlayerSessions) == 0x000070, "Wrong size on FRHAPI_PlayerSessions");
static_assert(offsetof(FRHAPI_PlayerSessions, Sessions_Optional) == 0x000008, "Member 'FRHAPI_PlayerSessions::Sessions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSessions, Sessions_IsSet) == 0x000058, "Member 'FRHAPI_PlayerSessions::Sessions_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSessions, LastUpdatedTimestamp_Optional) == 0x000060, "Member 'FRHAPI_PlayerSessions::LastUpdatedTimestamp_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerSessions, LastUpdatedTimestamp_IsSet) == 0x000068, "Member 'FRHAPI_PlayerSessions::LastUpdatedTimestamp_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerStatsResponse
// 0x0008 (0x0010 - 0x0008)
struct FRHAPI_PlayerStatsResponse final : public FRHAPI_Model
{
public:
	int32                                         TotalMatchesPlayed_Optional;                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalMatchesPlayed_IsSet;                          // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerStatsResponse) == 0x000008, "Wrong alignment on FRHAPI_PlayerStatsResponse");
static_assert(sizeof(FRHAPI_PlayerStatsResponse) == 0x000010, "Wrong size on FRHAPI_PlayerStatsResponse");
static_assert(offsetof(FRHAPI_PlayerStatsResponse, TotalMatchesPlayed_Optional) == 0x000008, "Member 'FRHAPI_PlayerStatsResponse::TotalMatchesPlayed_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerStatsResponse, TotalMatchesPlayed_IsSet) == 0x00000C, "Member 'FRHAPI_PlayerStatsResponse::TotalMatchesPlayed_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerSwapRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerSwapRequest final : public FRHAPI_Model
{
public:
	TArray<struct FGuid>                          Players;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerSwapRequest) == 0x000008, "Wrong alignment on FRHAPI_PlayerSwapRequest");
static_assert(sizeof(FRHAPI_PlayerSwapRequest) == 0x000018, "Wrong size on FRHAPI_PlayerSwapRequest");
static_assert(offsetof(FRHAPI_PlayerSwapRequest, Players) == 0x000008, "Member 'FRHAPI_PlayerSwapRequest::Players' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerUpdateRequest
// 0x0058 (0x0060 - 0x0008)
struct FRHAPI_PlayerUpdateRequest final : public FRHAPI_Model
{
public:
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PlayerUpdateRequest) == 0x000008, "Wrong alignment on FRHAPI_PlayerUpdateRequest");
static_assert(sizeof(FRHAPI_PlayerUpdateRequest) == 0x000060, "Wrong size on FRHAPI_PlayerUpdateRequest");
static_assert(offsetof(FRHAPI_PlayerUpdateRequest, CustomData_Optional) == 0x000008, "Member 'FRHAPI_PlayerUpdateRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PlayerUpdateRequest, CustomData_IsSet) == 0x000058, "Member 'FRHAPI_PlayerUpdateRequest::CustomData_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PlayerUuidFromId
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PlayerUuidFromId final : public FRHAPI_Model
{
public:
	struct FGuid                                  UUID;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PlayerUuidFromId) == 0x000008, "Wrong alignment on FRHAPI_PlayerUuidFromId");
static_assert(sizeof(FRHAPI_PlayerUuidFromId) == 0x000018, "Wrong size on FRHAPI_PlayerUuidFromId");
static_assert(offsetof(FRHAPI_PlayerUuidFromId, UUID) == 0x000008, "Member 'FRHAPI_PlayerUuidFromId::UUID' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PortalTokenDetailsRequest
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_PortalTokenDetailsRequest final : public FRHAPI_Model
{
public:
	ERHAPI_PortalTokenDetailsGrantType            GrantType;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PortalAccessToken;                                 // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PortalTokenDetailsRequest) == 0x000008, "Wrong alignment on FRHAPI_PortalTokenDetailsRequest");
static_assert(sizeof(FRHAPI_PortalTokenDetailsRequest) == 0x000020, "Wrong size on FRHAPI_PortalTokenDetailsRequest");
static_assert(offsetof(FRHAPI_PortalTokenDetailsRequest, GrantType) == 0x000008, "Member 'FRHAPI_PortalTokenDetailsRequest::GrantType' has a wrong offset!");
static_assert(offsetof(FRHAPI_PortalTokenDetailsRequest, PortalAccessToken) == 0x000010, "Member 'FRHAPI_PortalTokenDetailsRequest::PortalAccessToken' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PostGameEventsResponse
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_PostGameEventsResponse final : public FRHAPI_Model
{
public:
	int32                                         PostedEvents;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_JsonValue>               Errors_Optional;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Errors_IsSet;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PostGameEventsResponse) == 0x000008, "Wrong alignment on FRHAPI_PostGameEventsResponse");
static_assert(sizeof(FRHAPI_PostGameEventsResponse) == 0x000028, "Wrong size on FRHAPI_PostGameEventsResponse");
static_assert(offsetof(FRHAPI_PostGameEventsResponse, PostedEvents) == 0x000008, "Member 'FRHAPI_PostGameEventsResponse::PostedEvents' has a wrong offset!");
static_assert(offsetof(FRHAPI_PostGameEventsResponse, Errors_Optional) == 0x000010, "Member 'FRHAPI_PostGameEventsResponse::Errors_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PostGameEventsResponse, Errors_IsSet) == 0x000020, "Member 'FRHAPI_PostGameEventsResponse::Errors_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PublicKeyList
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PublicKeyList final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_PublicKey>               Keys;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_PublicKeyList) == 0x000008, "Wrong alignment on FRHAPI_PublicKeyList");
static_assert(sizeof(FRHAPI_PublicKeyList) == 0x000018, "Wrong size on FRHAPI_PublicKeyList");
static_assert(offsetof(FRHAPI_PublicKeyList, Keys) == 0x000008, "Member 'FRHAPI_PublicKeyList::Keys' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_PurgeRequest
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_PurgeRequest final : public FRHAPI_Model
{
public:
	struct FDateTime                              SuggestedPurgeTime_Optional;                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuggestedPurgeTime_IsSet;                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_PurgeRequest) == 0x000008, "Wrong alignment on FRHAPI_PurgeRequest");
static_assert(sizeof(FRHAPI_PurgeRequest) == 0x000018, "Wrong size on FRHAPI_PurgeRequest");
static_assert(offsetof(FRHAPI_PurgeRequest, SuggestedPurgeTime_Optional) == 0x000008, "Member 'FRHAPI_PurgeRequest::SuggestedPurgeTime_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_PurgeRequest, SuggestedPurgeTime_IsSet) == 0x000010, "Member 'FRHAPI_PurgeRequest::SuggestedPurgeTime_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueueConfigV2
// 0x0080 (0x0088 - 0x0008)
struct FRHAPI_QueueConfigV2 final : public FRHAPI_Model
{
public:
	class FString                                 QueueId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxQueueGroupSize;                                 // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  MatchMakingTemplateGroupId;                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LegacyConfig_Optional;                             // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          LegacyConfig_IsSet;                                // 0x0080(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_QueueConfigV2) == 0x000008, "Wrong alignment on FRHAPI_QueueConfigV2");
static_assert(sizeof(FRHAPI_QueueConfigV2) == 0x000088, "Wrong size on FRHAPI_QueueConfigV2");
static_assert(offsetof(FRHAPI_QueueConfigV2, QueueId) == 0x000008, "Member 'FRHAPI_QueueConfigV2::QueueId' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfigV2, Active) == 0x000018, "Member 'FRHAPI_QueueConfigV2::Active' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfigV2, MaxQueueGroupSize) == 0x00001C, "Member 'FRHAPI_QueueConfigV2::MaxQueueGroupSize' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfigV2, MatchMakingTemplateGroupId) == 0x000020, "Member 'FRHAPI_QueueConfigV2::MatchMakingTemplateGroupId' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfigV2, LegacyConfig_Optional) == 0x000030, "Member 'FRHAPI_QueueConfigV2::LegacyConfig_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueConfigV2, LegacyConfig_IsSet) == 0x000080, "Member 'FRHAPI_QueueConfigV2::LegacyConfig_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueueJoinRequest
// 0x0160 (0x0168 - 0x0008)
struct FRHAPI_QueueJoinRequest final : public FRHAPI_Model
{
public:
	class FString                                 QueueId;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHAPI_AdditionalJoinParams            AdditionalJoinParams_Optional;                     // 0x0018(0x0128)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          AdditionalJoinParams_IsSet;                        // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         MapPreferences_Optional;                           // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          MapPreferences_IsSet;                              // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PassedQueueTimeSeconds_Optional;                   // 0x015C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassedQueueTimeSeconds_IsSet;                      // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_QueueJoinRequest) == 0x000008, "Wrong alignment on FRHAPI_QueueJoinRequest");
static_assert(sizeof(FRHAPI_QueueJoinRequest) == 0x000168, "Wrong size on FRHAPI_QueueJoinRequest");
static_assert(offsetof(FRHAPI_QueueJoinRequest, QueueId) == 0x000008, "Member 'FRHAPI_QueueJoinRequest::QueueId' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, AdditionalJoinParams_Optional) == 0x000018, "Member 'FRHAPI_QueueJoinRequest::AdditionalJoinParams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, AdditionalJoinParams_IsSet) == 0x000140, "Member 'FRHAPI_QueueJoinRequest::AdditionalJoinParams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, MapPreferences_Optional) == 0x000148, "Member 'FRHAPI_QueueJoinRequest::MapPreferences_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, MapPreferences_IsSet) == 0x000158, "Member 'FRHAPI_QueueJoinRequest::MapPreferences_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, PassedQueueTimeSeconds_Optional) == 0x00015C, "Member 'FRHAPI_QueueJoinRequest::PassedQueueTimeSeconds_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_QueueJoinRequest, PassedQueueTimeSeconds_IsSet) == 0x000160, "Member 'FRHAPI_QueueJoinRequest::PassedQueueTimeSeconds_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueueJoinResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_QueueJoinResponse final : public FRHAPI_Model
{
public:
	class FString                                 TicketId;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_QueueJoinResponse) == 0x000008, "Wrong alignment on FRHAPI_QueueJoinResponse");
static_assert(sizeof(FRHAPI_QueueJoinResponse) == 0x000018, "Wrong size on FRHAPI_QueueJoinResponse");
static_assert(offsetof(FRHAPI_QueueJoinResponse, TicketId) == 0x000008, "Member 'FRHAPI_QueueJoinResponse::TicketId' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_QueuesResponseV2
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_QueuesResponseV2 final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_QueueConfigV2>           Queues;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_QueuesResponseV2) == 0x000008, "Wrong alignment on FRHAPI_QueuesResponseV2");
static_assert(sizeof(FRHAPI_QueuesResponseV2) == 0x000018, "Wrong size on FRHAPI_QueuesResponseV2");
static_assert(offsetof(FRHAPI_QueuesResponseV2, Queues) == 0x000008, "Member 'FRHAPI_QueuesResponseV2::Queues' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_RankConfigRequestResponseV3
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_RankConfigRequestResponseV3 final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_RankConfigV3>            RankConfigs;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_RankConfigRequestResponseV3) == 0x000008, "Wrong alignment on FRHAPI_RankConfigRequestResponseV3");
static_assert(sizeof(FRHAPI_RankConfigRequestResponseV3) == 0x000018, "Wrong size on FRHAPI_RankConfigRequestResponseV3");
static_assert(offsetof(FRHAPI_RankConfigRequestResponseV3, RankConfigs) == 0x000008, "Member 'FRHAPI_RankConfigRequestResponseV3::RankConfigs' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_Restrictions
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_Restrictions final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_Restriction>             Restrictions_Optional;                             // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Restrictions_IsSet;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_Restrictions) == 0x000008, "Wrong alignment on FRHAPI_Restrictions");
static_assert(sizeof(FRHAPI_Restrictions) == 0x000020, "Wrong size on FRHAPI_Restrictions");
static_assert(offsetof(FRHAPI_Restrictions, Restrictions_Optional) == 0x000008, "Member 'FRHAPI_Restrictions::Restrictions_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_Restrictions, Restrictions_IsSet) == 0x000018, "Member 'FRHAPI_Restrictions::Restrictions_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SearchGuideResponse
// 0x0030 (0x0038 - 0x0008)
struct FRHAPI_SearchGuideResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_GuideSearchResult>       Results_Optional;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Results_IsSet;                                     // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor_Optional;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsSet;                                      // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Cursor_IsNull;                                     // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SearchGuideResponse) == 0x000008, "Wrong alignment on FRHAPI_SearchGuideResponse");
static_assert(sizeof(FRHAPI_SearchGuideResponse) == 0x000038, "Wrong size on FRHAPI_SearchGuideResponse");
static_assert(offsetof(FRHAPI_SearchGuideResponse, Results_Optional) == 0x000008, "Member 'FRHAPI_SearchGuideResponse::Results_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SearchGuideResponse, Results_IsSet) == 0x000018, "Member 'FRHAPI_SearchGuideResponse::Results_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SearchGuideResponse, Cursor_Optional) == 0x000020, "Member 'FRHAPI_SearchGuideResponse::Cursor_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SearchGuideResponse, Cursor_IsSet) == 0x000030, "Member 'FRHAPI_SearchGuideResponse::Cursor_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SearchGuideResponse, Cursor_IsNull) == 0x000031, "Member 'FRHAPI_SearchGuideResponse::Cursor_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionInviteResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_SessionInviteResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionPlayerUpdateResponse> Players;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_SessionInviteResponse) == 0x000008, "Wrong alignment on FRHAPI_SessionInviteResponse");
static_assert(sizeof(FRHAPI_SessionInviteResponse) == 0x000018, "Wrong size on FRHAPI_SessionInviteResponse");
static_assert(offsetof(FRHAPI_SessionInviteResponse, Players) == 0x000008, "Member 'FRHAPI_SessionInviteResponse::Players' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionPlayersUpdateResponse
// 0x0010 (0x0018 - 0x0008)
struct FRHAPI_SessionPlayersUpdateResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SessionPlayerUpdateResponse> Players;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_SessionPlayersUpdateResponse) == 0x000008, "Wrong alignment on FRHAPI_SessionPlayersUpdateResponse");
static_assert(sizeof(FRHAPI_SessionPlayersUpdateResponse) == 0x000018, "Wrong size on FRHAPI_SessionPlayersUpdateResponse");
static_assert(offsetof(FRHAPI_SessionPlayersUpdateResponse, Players) == 0x000008, "Member 'FRHAPI_SessionPlayersUpdateResponse::Players' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SessionUpdate
// 0x00A0 (0x00A8 - 0x0008)
struct FRHAPI_SessionUpdate final : public FRHAPI_Model
{
public:
	class FString                                 RegionId_Optional;                                 // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegionId_IsSet;                                    // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0020(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_Optional;                                 // 0x0071(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Joinable_IsSet;                                    // 0x0072(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_TeamUpdate>              Teams_Optional;                                    // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Teams_IsSet;                                       // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password_Optional;                                 // 0x0090(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Password_IsSet;                                    // 0x00A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SessionUpdate) == 0x000008, "Wrong alignment on FRHAPI_SessionUpdate");
static_assert(sizeof(FRHAPI_SessionUpdate) == 0x0000A8, "Wrong size on FRHAPI_SessionUpdate");
static_assert(offsetof(FRHAPI_SessionUpdate, RegionId_Optional) == 0x000008, "Member 'FRHAPI_SessionUpdate::RegionId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, RegionId_IsSet) == 0x000018, "Member 'FRHAPI_SessionUpdate::RegionId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, CustomData_Optional) == 0x000020, "Member 'FRHAPI_SessionUpdate::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, CustomData_IsSet) == 0x000070, "Member 'FRHAPI_SessionUpdate::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Joinable_Optional) == 0x000071, "Member 'FRHAPI_SessionUpdate::Joinable_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Joinable_IsSet) == 0x000072, "Member 'FRHAPI_SessionUpdate::Joinable_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Teams_Optional) == 0x000078, "Member 'FRHAPI_SessionUpdate::Teams_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Teams_IsSet) == 0x000088, "Member 'FRHAPI_SessionUpdate::Teams_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Password_Optional) == 0x000090, "Member 'FRHAPI_SessionUpdate::Password_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_SessionUpdate, Password_IsSet) == 0x0000A0, "Member 'FRHAPI_SessionUpdate::Password_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SettingType
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_SettingType final : public FRHAPI_Model
{
public:
	TMap<class FString, struct FRHAPI_SettingTypeVersion> Versions;                                  // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_SettingType) == 0x000008, "Wrong alignment on FRHAPI_SettingType");
static_assert(sizeof(FRHAPI_SettingType) == 0x000058, "Wrong size on FRHAPI_SettingType");
static_assert(offsetof(FRHAPI_SettingType, Versions) == 0x000008, "Member 'FRHAPI_SettingType::Versions' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_StorageInformation
// 0x0018 (0x0020 - 0x0008)
struct FRHAPI_StorageInformation final : public FRHAPI_Model
{
public:
	int32                                         TotalFiles_Optional;                               // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalFiles_IsSet;                                  // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalSizeBytes_Optional;                           // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalSizeBytes_IsSet;                              // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalSizeMb_Optional;                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TotalSizeMb_IsSet;                                 // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_StorageInformation) == 0x000008, "Wrong alignment on FRHAPI_StorageInformation");
static_assert(sizeof(FRHAPI_StorageInformation) == 0x000020, "Wrong size on FRHAPI_StorageInformation");
static_assert(offsetof(FRHAPI_StorageInformation, TotalFiles_Optional) == 0x000008, "Member 'FRHAPI_StorageInformation::TotalFiles_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_StorageInformation, TotalFiles_IsSet) == 0x00000C, "Member 'FRHAPI_StorageInformation::TotalFiles_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_StorageInformation, TotalSizeBytes_Optional) == 0x000010, "Member 'FRHAPI_StorageInformation::TotalSizeBytes_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_StorageInformation, TotalSizeBytes_IsSet) == 0x000014, "Member 'FRHAPI_StorageInformation::TotalSizeBytes_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_StorageInformation, TotalSizeMb_Optional) == 0x000018, "Member 'FRHAPI_StorageInformation::TotalSizeMb_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_StorageInformation, TotalSizeMb_IsSet) == 0x00001C, "Member 'FRHAPI_StorageInformation::TotalSizeMb_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_SupportLogPageResponse
// 0x0020 (0x0028 - 0x0008)
struct FRHAPI_SupportLogPageResponse final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_SupportLogEntry>         Logs;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Page;                                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPages;                                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalEntries;                                      // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_SupportLogPageResponse) == 0x000008, "Wrong alignment on FRHAPI_SupportLogPageResponse");
static_assert(sizeof(FRHAPI_SupportLogPageResponse) == 0x000028, "Wrong size on FRHAPI_SupportLogPageResponse");
static_assert(offsetof(FRHAPI_SupportLogPageResponse, Logs) == 0x000008, "Member 'FRHAPI_SupportLogPageResponse::Logs' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogPageResponse, Page) == 0x000018, "Member 'FRHAPI_SupportLogPageResponse::Page' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogPageResponse, TotalPages) == 0x00001C, "Member 'FRHAPI_SupportLogPageResponse::TotalPages' has a wrong offset!");
static_assert(offsetof(FRHAPI_SupportLogPageResponse, TotalEntries) == 0x000020, "Member 'FRHAPI_SupportLogPageResponse::TotalEntries' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_TokenResponse
// 0x0038 (0x0040 - 0x0008)
struct FRHAPI_TokenResponse final : public FRHAPI_Model
{
public:
	class FString                                 AccessToken;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TokenType;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RefreshToken_Optional;                             // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefreshToken_IsSet;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpiresIn;                                         // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAPI_TokenResponse) == 0x000008, "Wrong alignment on FRHAPI_TokenResponse");
static_assert(sizeof(FRHAPI_TokenResponse) == 0x000040, "Wrong size on FRHAPI_TokenResponse");
static_assert(offsetof(FRHAPI_TokenResponse, AccessToken) == 0x000008, "Member 'FRHAPI_TokenResponse::AccessToken' has a wrong offset!");
static_assert(offsetof(FRHAPI_TokenResponse, TokenType) == 0x000018, "Member 'FRHAPI_TokenResponse::TokenType' has a wrong offset!");
static_assert(offsetof(FRHAPI_TokenResponse, RefreshToken_Optional) == 0x000028, "Member 'FRHAPI_TokenResponse::RefreshToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_TokenResponse, RefreshToken_IsSet) == 0x000038, "Member 'FRHAPI_TokenResponse::RefreshToken_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_TokenResponse, ExpiresIn) == 0x00003C, "Member 'FRHAPI_TokenResponse::ExpiresIn' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UpdateInventoryRequest
// 0x0090 (0x0098 - 0x0008)
struct FRHAPI_UpdateInventoryRequest final : public FRHAPI_Model
{
public:
	ERHAPI_Source                                 Source_Optional;                                   // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Source_IsSet;                                      // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ClientOrderRefId_Optional;                         // 0x000C(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsSet;                            // 0x001C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientOrderRefId_IsNull;                           // 0x001D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        Bucket_Optional;                                   // 0x001E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bucket_IsSet;                                      // 0x001F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count_Optional;                                    // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Count_IsSet;                                       // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Expires_Optional;                                  // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsSet;                                     // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Expires_IsNull;                                    // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            CustomData_Optional;                               // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsSet;                                  // 0x0088(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomData_IsNull;                                 // 0x0089(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId_Optional;                                   // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsSet;                                      // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ItemId_IsNull;                                     // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_UpdateInventoryRequest) == 0x000008, "Wrong alignment on FRHAPI_UpdateInventoryRequest");
static_assert(sizeof(FRHAPI_UpdateInventoryRequest) == 0x000098, "Wrong size on FRHAPI_UpdateInventoryRequest");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Source_Optional) == 0x000008, "Member 'FRHAPI_UpdateInventoryRequest::Source_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Source_IsSet) == 0x000009, "Member 'FRHAPI_UpdateInventoryRequest::Source_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ClientOrderRefId_Optional) == 0x00000C, "Member 'FRHAPI_UpdateInventoryRequest::ClientOrderRefId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ClientOrderRefId_IsSet) == 0x00001C, "Member 'FRHAPI_UpdateInventoryRequest::ClientOrderRefId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ClientOrderRefId_IsNull) == 0x00001D, "Member 'FRHAPI_UpdateInventoryRequest::ClientOrderRefId_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Bucket_Optional) == 0x00001E, "Member 'FRHAPI_UpdateInventoryRequest::Bucket_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Bucket_IsSet) == 0x00001F, "Member 'FRHAPI_UpdateInventoryRequest::Bucket_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Count_Optional) == 0x000020, "Member 'FRHAPI_UpdateInventoryRequest::Count_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Count_IsSet) == 0x000024, "Member 'FRHAPI_UpdateInventoryRequest::Count_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Expires_Optional) == 0x000028, "Member 'FRHAPI_UpdateInventoryRequest::Expires_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Expires_IsSet) == 0x000030, "Member 'FRHAPI_UpdateInventoryRequest::Expires_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, Expires_IsNull) == 0x000031, "Member 'FRHAPI_UpdateInventoryRequest::Expires_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, CustomData_Optional) == 0x000038, "Member 'FRHAPI_UpdateInventoryRequest::CustomData_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, CustomData_IsSet) == 0x000088, "Member 'FRHAPI_UpdateInventoryRequest::CustomData_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, CustomData_IsNull) == 0x000089, "Member 'FRHAPI_UpdateInventoryRequest::CustomData_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ItemId_Optional) == 0x00008C, "Member 'FRHAPI_UpdateInventoryRequest::ItemId_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ItemId_IsSet) == 0x000090, "Member 'FRHAPI_UpdateInventoryRequest::ItemId_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_UpdateInventoryRequest, ItemId_IsNull) == 0x000091, "Member 'FRHAPI_UpdateInventoryRequest::ItemId_IsNull' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_UserLinkHistory
// 0x0028 (0x0030 - 0x0008)
struct FRHAPI_UserLinkHistory final : public FRHAPI_Model
{
public:
	TArray<struct FRHAPI_UserLinkHistoryEntry>    Entries;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ContinuationToken_Optional;                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinuationToken_IsSet;                           // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_UserLinkHistory) == 0x000008, "Wrong alignment on FRHAPI_UserLinkHistory");
static_assert(sizeof(FRHAPI_UserLinkHistory) == 0x000030, "Wrong size on FRHAPI_UserLinkHistory");
static_assert(offsetof(FRHAPI_UserLinkHistory, Entries) == 0x000008, "Member 'FRHAPI_UserLinkHistory::Entries' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistory, ContinuationToken_Optional) == 0x000018, "Member 'FRHAPI_UserLinkHistory::ContinuationToken_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_UserLinkHistory, ContinuationToken_IsSet) == 0x000028, "Member 'FRHAPI_UserLinkHistory::ContinuationToken_IsSet' has a wrong offset!");

// ScriptStruct RallyHereAPI.RHAPI_ValidateEventResponse
// 0x0050 (0x0058 - 0x0008)
struct FRHAPI_ValidateEventResponse final : public FRHAPI_Model
{
public:
	bool                                          Success;                                           // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorCode_Optional;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsSet;                                   // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ErrorCode_IsNull;                                  // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Context_Optional;                                  // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Context_IsSet;                                     // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Context_IsNull;                                    // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutputEvent_Optional;                              // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutputEvent_IsSet;                                 // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutputEvent_IsNull;                                // 0x0051(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHAPI_ValidateEventResponse) == 0x000008, "Wrong alignment on FRHAPI_ValidateEventResponse");
static_assert(sizeof(FRHAPI_ValidateEventResponse) == 0x000058, "Wrong size on FRHAPI_ValidateEventResponse");
static_assert(offsetof(FRHAPI_ValidateEventResponse, Success) == 0x000008, "Member 'FRHAPI_ValidateEventResponse::Success' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, ErrorCode_Optional) == 0x000010, "Member 'FRHAPI_ValidateEventResponse::ErrorCode_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, ErrorCode_IsSet) == 0x000020, "Member 'FRHAPI_ValidateEventResponse::ErrorCode_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, ErrorCode_IsNull) == 0x000021, "Member 'FRHAPI_ValidateEventResponse::ErrorCode_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, Context_Optional) == 0x000028, "Member 'FRHAPI_ValidateEventResponse::Context_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, Context_IsSet) == 0x000038, "Member 'FRHAPI_ValidateEventResponse::Context_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, Context_IsNull) == 0x000039, "Member 'FRHAPI_ValidateEventResponse::Context_IsNull' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, OutputEvent_Optional) == 0x000040, "Member 'FRHAPI_ValidateEventResponse::OutputEvent_Optional' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, OutputEvent_IsSet) == 0x000050, "Member 'FRHAPI_ValidateEventResponse::OutputEvent_IsSet' has a wrong offset!");
static_assert(offsetof(FRHAPI_ValidateEventResponse, OutputEvent_IsNull) == 0x000051, "Member 'FRHAPI_ValidateEventResponse::OutputEvent_IsNull' has a wrong offset!");

}

