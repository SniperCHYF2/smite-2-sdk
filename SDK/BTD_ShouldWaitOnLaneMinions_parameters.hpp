#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTD_ShouldWaitOnLaneMinions

#include "Basic.hpp"

#include "Hemingway_structs.hpp"


namespace SDK::Params
{

// Function BTD_ShouldWaitOnLaneMinions.BTD_ShouldWaitOnLaneMinions_C.IsAheadOfMinionWave
// 0x00A0 (0x00A0 - 0x0000)
struct BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave final
{
public:
	class AAIController*                          Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAhead;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWAIController*                        HWController;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWWaypoint*                            Waypoint;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      Bot;                                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWAIController*                        K2Node_DynamicCast_AsHWAIController;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWaypointPathDirectionType                    CallFunc_GetLaneDirection_ReturnValue;             // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetLaneID_ReturnValue;                    // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetLaneID_ReturnValue_1;                  // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCharacterWithinLaningArea_ReturnValue;  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HaveMinionsSpawnedForLane_ReturnValue;    // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetLaneID_ReturnValue_2;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWWaypoint*                            CallFunc_FindLaneWaypoint_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGodBotInhandRange_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGodBotAheadOfWave_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsCharacterWithinLaningArea_MaxDistanceFromLane_ImplicitCast; // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_IsGodBotAheadOfWave_AheadByAmount_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave) == 0x000008, "Wrong alignment on BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave");
static_assert(sizeof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave) == 0x0000A0, "Wrong size on BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, Controller) == 0x000000, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::Controller' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, IsAhead) == 0x000008, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::IsAhead' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, HWController) == 0x000010, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::HWController' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, Waypoint) == 0x000018, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::Waypoint' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, Bot) == 0x000020, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::Bot' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, K2Node_DynamicCast_AsHWAIController) == 0x000028, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::K2Node_DynamicCast_AsHWAIController' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_GetLaneDirection_ReturnValue) == 0x000031, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_GetLaneDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_GetLaneID_ReturnValue) == 0x000034, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_GetLaneID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_GetLaneID_ReturnValue_1) == 0x00003C, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_GetLaneID_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_IsCharacterWithinLaningArea_ReturnValue) == 0x000044, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_IsCharacterWithinLaningArea_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_HaveMinionsSpawnedForLane_ReturnValue) == 0x000045, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_HaveMinionsSpawnedForLane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_GetLaneID_ReturnValue_2) == 0x000048, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_GetLaneID_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_FindLaneWaypoint_ReturnValue) == 0x000050, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_FindLaneWaypoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_GetGodBotInhandRange_ReturnValue) == 0x000058, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_GetGodBotInhandRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_K2_GetPawn_ReturnValue) == 0x000060, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000068, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000070, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, K2Node_DynamicCast_bSuccess_1) == 0x000078, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_SelectFloat_ReturnValue) == 0x000080, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_IsGodBotAheadOfWave_ReturnValue) == 0x000088, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_IsGodBotAheadOfWave_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_IsCharacterWithinLaningArea_MaxDistanceFromLane_ImplicitCast) == 0x00008C, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_IsCharacterWithinLaningArea_MaxDistanceFromLane_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave, CallFunc_IsGodBotAheadOfWave_AheadByAmount_ImplicitCast) == 0x000098, "Member 'BTD_ShouldWaitOnLaneMinions_C_IsAheadOfMinionWave::CallFunc_IsGodBotAheadOfWave_AheadByAmount_ImplicitCast' has a wrong offset!");

// Function BTD_ShouldWaitOnLaneMinions.BTD_ShouldWaitOnLaneMinions_C.PerformConditionCheckAI
// 0x0040 (0x0040 - 0x0000)
struct BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GodDistance;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          factory;                                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWTeamState*                           TeamState;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWWaypoint*                            Waypoint;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AHWAIController*                        AIController;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAheadOfMinionWave_IsAhead;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI) == 0x000008, "Wrong alignment on BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI");
static_assert(sizeof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI) == 0x000040, "Wrong size on BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, OwnerController) == 0x000000, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, ControlledPawn) == 0x000008, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, ReturnValue) == 0x000010, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::ReturnValue' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, GodDistance) == 0x000014, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::GodDistance' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, factory) == 0x000018, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::factory' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, TeamState) == 0x000020, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::TeamState' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, Waypoint) == 0x000028, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::Waypoint' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, AIController) == 0x000030, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::AIController' has a wrong offset!");
static_assert(offsetof(BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI, CallFunc_IsAheadOfMinionWave_IsAhead) == 0x000038, "Member 'BTD_ShouldWaitOnLaneMinions_C_PerformConditionCheckAI::CallFunc_IsAheadOfMinionWave_IsAhead' has a wrong offset!");

}

