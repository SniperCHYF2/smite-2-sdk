#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GS_V1_GAProgressBarListener

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HemingwayUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_GS_V1_GAProgressBarListener.WBP_GS_V1_GAProgressBarListener_C
// 0x0070 (0x0758 - 0x06E8)
class UWBP_GS_V1_GAProgressBarListener_C : public UHWGameplayAttributeProgressBar
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x06E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHWProgressBar*                         ValueProgressBar;                                  // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHWTextBlock*                           ValuePerTimeText;                                  // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UHWTextBlock*                           ValueText;                                         // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   ValueTextFormat;                                   // 0x0708(0x0018)(Edit, BlueprintVisible)
	int32                                         ValueMinimumFractionalDigits;                      // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ValueMaximumFractionalDigits;                      // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValueUseGrouping;                                 // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ValuePerTimeTextFormat;                            // 0x0730(0x0018)(Edit, BlueprintVisible)
	int32                                         ValuePerTimeMinimumFractionalDigits;               // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ValuePerTimeMaximumFractionalDigits;               // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bValuePerTimeUseGrouping;                          // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_GS_V1_GAProgressBarListener(int32 EntryPoint);
	void Update_Value_Text_and_Bar(double Percent, double Value, double MaxValue);
	void UpdateProgressBar(float Percentage, float Value, float MaxValue);
	void UpdateValuePerTime(float ValuePerTime);
	void UpdateValuePerTimeText(double ValuePerTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_GS_V1_GAProgressBarListener_C">();
	}
	static class UWBP_GS_V1_GAProgressBarListener_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_GS_V1_GAProgressBarListener_C>();
	}
};
static_assert(alignof(UWBP_GS_V1_GAProgressBarListener_C) == 0x000008, "Wrong alignment on UWBP_GS_V1_GAProgressBarListener_C");
static_assert(sizeof(UWBP_GS_V1_GAProgressBarListener_C) == 0x000758, "Wrong size on UWBP_GS_V1_GAProgressBarListener_C");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, UberGraphFrame) == 0x0006E8, "Member 'UWBP_GS_V1_GAProgressBarListener_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValueProgressBar) == 0x0006F0, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValueProgressBar' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValuePerTimeText) == 0x0006F8, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValuePerTimeText' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValueText) == 0x000700, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValueText' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValueTextFormat) == 0x000708, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValueTextFormat' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValueMinimumFractionalDigits) == 0x000720, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValueMinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValueMaximumFractionalDigits) == 0x000724, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValueMaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, bValueUseGrouping) == 0x000728, "Member 'UWBP_GS_V1_GAProgressBarListener_C::bValueUseGrouping' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValuePerTimeTextFormat) == 0x000730, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValuePerTimeTextFormat' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValuePerTimeMinimumFractionalDigits) == 0x000748, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValuePerTimeMinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, ValuePerTimeMaximumFractionalDigits) == 0x00074C, "Member 'UWBP_GS_V1_GAProgressBarListener_C::ValuePerTimeMaximumFractionalDigits' has a wrong offset!");
static_assert(offsetof(UWBP_GS_V1_GAProgressBarListener_C, bValuePerTimeUseGrouping) == 0x000750, "Member 'UWBP_GS_V1_GAProgressBarListener_C::bValuePerTimeUseGrouping' has a wrong offset!");

}

