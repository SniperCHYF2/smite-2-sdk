#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_QuickPlay_QueueButton

#include "Basic.hpp"

#include "RallyHereStart_structs.hpp"
#include "RallyHereStart_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_QuickPlay_QueueButton.WBP_QuickPlay_QueueButton_C
// 0x0080 (0x0638 - 0x05B8)
class UWBP_QuickPlay_QueueButton_C final : public URHWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HoverAnim;                                         // 0x05C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHWTextBlock*                           ButtonText;                                        // 0x05C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWImage*                               QueueIcon;                                         // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWTextBlock*                           Subtitle;                                          // 0x05D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHWHorizontalBox*                       TagWrapper;                                        // 0x05E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               WarningGroup;                                      // 0x05E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Graphic_Button_C*                  WBP_Graphic_Button;                                // 0x05F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(const class FString& QueueId)> OnQueueBtnClicked;                  // 0x05F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UWidget* HoveredWidget)> OnQueueBtnHovered;                  // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UWidget* UnhoverWidget)> OnQueueBtnUnhovered;                // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class URH_MatchmakingQueueInfo*               QueueDetails;                                      // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bDisabled;                                         // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_0_OnGraphicBtnClicked__DelegateSignature();
	void BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_1_OnGraphicBtnHovered__DelegateSignature(bool IsGamepad);
	void BndEvt__WBP_Graphic_Button_K2Node_ComponentBoundEvent_2_OnGraphicBtnUnhovered__DelegateSignature();
	void CheckItemOwnershipRequirement();
	void Construct();
	void ExecuteUbergraph_WBP_QuickPlay_QueueButton(int32 EntryPoint);
	void GamepadConfirm();
	void GamepadHover();
	void GamepadUnhover();
	void GetQueueDataFactory(class UHWQueueDataFactory** QueueDataFactory);
	void InitializeWidget();
	void IsDisabled(bool* bDisabled_0);
	void ItemOwnershipCheckCompleted(const class FString& QueueId, const bool bItemOwned);
	bool NavigateConfirm();
	void OnButtonHovered();
	void OnButtonUnhovered();
	void PreConstruct(bool IsDesignTime);
	void SetButtonActive(bool bIsActive_0);
	void SetDisabled(bool bDisabled_0);
	void SetQueueInfo();
	void SetUpTagWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_QuickPlay_QueueButton_C">();
	}
	static class UWBP_QuickPlay_QueueButton_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_QuickPlay_QueueButton_C>();
	}
};
static_assert(alignof(UWBP_QuickPlay_QueueButton_C) == 0x000008, "Wrong alignment on UWBP_QuickPlay_QueueButton_C");
static_assert(sizeof(UWBP_QuickPlay_QueueButton_C) == 0x000638, "Wrong size on UWBP_QuickPlay_QueueButton_C");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, UberGraphFrame) == 0x0005B8, "Member 'UWBP_QuickPlay_QueueButton_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, HoverAnim) == 0x0005C0, "Member 'UWBP_QuickPlay_QueueButton_C::HoverAnim' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, ButtonText) == 0x0005C8, "Member 'UWBP_QuickPlay_QueueButton_C::ButtonText' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, QueueIcon) == 0x0005D0, "Member 'UWBP_QuickPlay_QueueButton_C::QueueIcon' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, Subtitle) == 0x0005D8, "Member 'UWBP_QuickPlay_QueueButton_C::Subtitle' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, TagWrapper) == 0x0005E0, "Member 'UWBP_QuickPlay_QueueButton_C::TagWrapper' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, WarningGroup) == 0x0005E8, "Member 'UWBP_QuickPlay_QueueButton_C::WarningGroup' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, WBP_Graphic_Button) == 0x0005F0, "Member 'UWBP_QuickPlay_QueueButton_C::WBP_Graphic_Button' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, OnQueueBtnClicked) == 0x0005F8, "Member 'UWBP_QuickPlay_QueueButton_C::OnQueueBtnClicked' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, OnQueueBtnHovered) == 0x000608, "Member 'UWBP_QuickPlay_QueueButton_C::OnQueueBtnHovered' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, OnQueueBtnUnhovered) == 0x000618, "Member 'UWBP_QuickPlay_QueueButton_C::OnQueueBtnUnhovered' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, QueueDetails) == 0x000628, "Member 'UWBP_QuickPlay_QueueButton_C::QueueDetails' has a wrong offset!");
static_assert(offsetof(UWBP_QuickPlay_QueueButton_C, bDisabled) == 0x000630, "Member 'UWBP_QuickPlay_QueueButton_C::bDisabled' has a wrong offset!");

}

