#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_ListenForNearbyFriendly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTS_ListenForNearbyFriendly.BTS_ListenForNearbyFriendly_C
// 0x0068 (0x0100 - 0x0098)
class UBTS_ListenForNearbyFriendly_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APawn*                                  ControlledPawn;                                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Half_Height;                                       // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 NearbyFriendlyKey;                                 // 0x00B0(0x0028)(Edit, BlueprintVisible)
	bool                                          MustHaveHighestHealth;                             // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FriendlyCharacterTags;                             // 0x00E0(0x0020)(Edit, BlueprintVisible)

public:
	void CheckForTargets(TArray<struct FHitResult>* OutHits, bool* TargetsFound);
	void CheckTargetAliveState(bool* Return);
	void CheckTargetDistance();
	void CheckTargetTeam(bool* Return);
	void ExecuteUbergraph_BTS_ListenForNearbyFriendly(int32 EntryPoint);
	void FilterTargets(TArray<struct FHitResult>& InHits, TArray<struct FHitResult>* OutHits, bool* ArrayValid);
	void ReceiveActivationAI(class AAIController* OwnerController, class APawn* ControlledPawn_0);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn_0, float DeltaSeconds);
	void SelectTarget(TArray<struct FHitResult>& InHits, class AActor** OutActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTS_ListenForNearbyFriendly_C">();
	}
	static class UBTS_ListenForNearbyFriendly_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTS_ListenForNearbyFriendly_C>();
	}
};
static_assert(alignof(UBTS_ListenForNearbyFriendly_C) == 0x000008, "Wrong alignment on UBTS_ListenForNearbyFriendly_C");
static_assert(sizeof(UBTS_ListenForNearbyFriendly_C) == 0x000100, "Wrong size on UBTS_ListenForNearbyFriendly_C");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, UberGraphFrame) == 0x000098, "Member 'UBTS_ListenForNearbyFriendly_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, ControlledPawn) == 0x0000A0, "Member 'UBTS_ListenForNearbyFriendly_C::ControlledPawn' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, Radius) == 0x0000A8, "Member 'UBTS_ListenForNearbyFriendly_C::Radius' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, Half_Height) == 0x0000AC, "Member 'UBTS_ListenForNearbyFriendly_C::Half_Height' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, NearbyFriendlyKey) == 0x0000B0, "Member 'UBTS_ListenForNearbyFriendly_C::NearbyFriendlyKey' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, MustHaveHighestHealth) == 0x0000D8, "Member 'UBTS_ListenForNearbyFriendly_C::MustHaveHighestHealth' has a wrong offset!");
static_assert(offsetof(UBTS_ListenForNearbyFriendly_C, FriendlyCharacterTags) == 0x0000E0, "Member 'UBTS_ListenForNearbyFriendly_C::FriendlyCharacterTags' has a wrong offset!");

}

