#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Anim

#include "Basic.hpp"

#include "BPI_Anim_classes.hpp"
#include "BPI_Anim_parameters.hpp"


namespace SDK
{

// Function BPI_Anim.BPI_Anim_C.BPI_AN_CanTransition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanTransition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_CanTransition(bool CanTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_CanTransition");

	Params::BPI_Anim_C_BPI_AN_CanTransition Parms{};

	Parms.CanTransition = CanTransition;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_AN_GenericStance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharGenericStance                      Stance_State                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_GenericStance(ECharGenericStance Stance_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_GenericStance");

	Params::BPI_Anim_C_BPI_AN_GenericStance Parms{};

	Parms.Stance_State = Stance_State;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_AN_JumpEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    JumpEnd                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_JumpEnd(bool JumpEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_JumpEnd");

	Params::BPI_Anim_C_BPI_AN_JumpEnd Parms{};

	Parms.JumpEnd = JumpEnd;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_AN_PassiveState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECharPassiveState                       PassiveState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PassiveValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_PassiveState(ECharPassiveState PassiveState, double PassiveValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_PassiveState");

	Params::BPI_Anim_C_BPI_AN_PassiveState Parms{};

	Parms.PassiveState = PassiveState;
	Parms.PassiveValue = PassiveValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_AN_PlayRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_PlayRate(double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_PlayRate");

	Params::BPI_Anim_C_BPI_AN_PlayRate Parms{};

	Parms.PlayRate = PlayRate;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_AN_RunVariant
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Variant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_AN_RunVariant(bool Variant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_AN_RunVariant");

	Params::BPI_Anim_C_BPI_AN_RunVariant Parms{};

	Parms.Variant = Variant;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_DisablePhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Bone_Name                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Turn_Off                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_DisablePhysics(class FName Bone_Name, bool Turn_Off)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_DisablePhysics");

	Params::BPI_Anim_C_BPI_ANS_DisablePhysics Parms{};

	Parms.Bone_Name = Bone_Name;
	Parms.Turn_Off = Turn_Off;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_DisableTurnInPlace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisableTurnInPlace                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_DisableTurnInPlace(bool DisableTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_DisableTurnInPlace");

	Params::BPI_Anim_C_BPI_ANS_DisableTurnInPlace Parms{};

	Parms.DisableTurnInPlace = DisableTurnInPlace;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_EmoteQuery
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EmoteQuery                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_EmoteQuery(bool EmoteQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_EmoteQuery");

	Params::BPI_Anim_C_BPI_ANS_EmoteQuery Parms{};

	Parms.EmoteQuery = EmoteQuery;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ForceFullBody
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Fullbody                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BlendOutTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ForceFullBody(bool Fullbody, double BlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ForceFullBody");

	Params::BPI_Anim_C_BPI_ANS_ForceFullBody Parms{};

	Parms.Fullbody = Fullbody;
	Parms.BlendOutTime = BlendOutTime;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_HideBlueprintVFX
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_HideBlueprintVFX(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_HideBlueprintVFX");

	Params::BPI_Anim_C_BPI_ANS_HideBlueprintVFX Parms{};

	Parms.Hide = Hide;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_PlayRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_PlayRate(double PlayRate, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_PlayRate");

	Params::BPI_Anim_C_BPI_ANS_PlayRate Parms{};

	Parms.PlayRate = PlayRate;
	Parms.Duration = Duration;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_Prop01Lock
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_Prop01Lock(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_Prop01Lock");

	Params::BPI_Anim_C_BPI_ANS_Prop01Lock Parms{};

	Parms.Lock = Lock;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_Prop02Lock
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_Prop02Lock(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_Prop02Lock");

	Params::BPI_Anim_C_BPI_ANS_Prop02Lock Parms{};

	Parms.Lock = Lock;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ScaleCharacter(double ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ScaleCharacter");

	Params::BPI_Anim_C_BPI_ANS_ScaleCharacter Parms{};

	Parms.ScaleValue = ScaleValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleFromCurve
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRigVMFunction_AnimRichCurve&BoneScaleCurve                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class FName                             Bone_Name                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ScaleFromCurve(const struct FRigVMFunction_AnimRichCurve& BoneScaleCurve, class FName Bone_Name, double Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ScaleFromCurve");

	Params::BPI_Anim_C_BPI_ANS_ScaleFromCurve Parms{};

	Parms.BoneScaleCurve = std::move(BoneScaleCurve);
	Parms.Bone_Name = Bone_Name;
	Parms.Scale = Scale;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ScaleWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ScaleValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Override                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ScaleWeapon(double ScaleValue, int32 Weapon, bool Override)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ScaleWeapon");

	Params::BPI_Anim_C_BPI_ANS_ScaleWeapon Parms{};

	Parms.ScaleValue = ScaleValue;
	Parms.Weapon = Weapon;
	Parms.Override = Override;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ShowMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ShowMesh(bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ShowMesh");

	Params::BPI_Anim_C_BPI_ANS_ShowMesh Parms{};

	Parms.Visibility = Visibility;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_StopMotionWarping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AlphaValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_StopMotionWarping(double AlphaValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_StopMotionWarping");

	Params::BPI_Anim_C_BPI_ANS_StopMotionWarping Parms{};

	Parms.AlphaValue = AlphaValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ANS_ToggleBoulder
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ANS_ToggleBoulder(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ANS_ToggleBoulder");

	Params::BPI_Anim_C_BPI_ANS_ToggleBoulder Parms{};

	Parms.Visible = Visible;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_BellonaWeaponOverride
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Override                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECharGenericStance                      OverrideStance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_BellonaWeaponOverride(bool Override, ECharGenericStance OverrideStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_BellonaWeaponOverride");

	Params::BPI_Anim_C_BPI_BellonaWeaponOverride Parms{};

	Parms.Override = Override;
	Parms.OverrideStance = OverrideStance;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_ChildMesh_Outro
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayOutro                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_ChildMesh_Outro(bool PlayOutro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_ChildMesh_Outro");

	Params::BPI_Anim_C_BPI_ChildMesh_Outro Parms{};

	Parms.PlayOutro = PlayOutro;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_CombatStance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CombatState                           CombatState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_CombatStance(E_CombatState CombatState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_CombatStance");

	Params::BPI_Anim_C_BPI_CombatStance Parms{};

	Parms.CombatState = CombatState;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_Fire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayFire                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_Morrigan_Fire(bool PlayFire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_Morrigan_Fire");

	Params::BPI_Anim_C_BPI_Morrigan_Fire Parms{};

	Parms.PlayFire = PlayFire;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_PlayIntroA
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayIntro                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_Morrigan_PlayIntroA(bool PlayIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_Morrigan_PlayIntroA");

	Params::BPI_Anim_C_BPI_Morrigan_PlayIntroA Parms{};

	Parms.PlayIntro = PlayIntro;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_Morrigan_PlayIntroB
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlayIntro                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_Morrigan_PlayIntroB(bool PlayIntro)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_Morrigan_PlayIntroB");

	Params::BPI_Anim_C_BPI_Morrigan_PlayIntroB Parms{};

	Parms.PlayIntro = PlayIntro;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_PelvisDirectionFromVelocity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UsePelvisDirection                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ALPHA                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_PelvisDirectionFromVelocity(bool UsePelvisDirection, double ALPHA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_PelvisDirectionFromVelocity");

	Params::BPI_Anim_C_BPI_PelvisDirectionFromVelocity Parms{};

	Parms.UsePelvisDirection = UsePelvisDirection;
	Parms.ALPHA = ALPHA;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Anim.BPI_Anim_C.BPI_TailAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AlphaValue                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Anim_C::BPI_TailAlpha(double AlphaValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Anim_C", "BPI_TailAlpha");

	Params::BPI_Anim_C_BPI_TailAlpha Parms{};

	Parms.AlphaValue = AlphaValue;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

