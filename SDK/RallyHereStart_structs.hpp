#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RallyHereStart

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "RallyHereIntegration_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// Enum RallyHereStart.RH_INPUT_STATE
// NumValues: 0x0005
enum class ERH_INPUT_STATE : uint8
{
	PIS_KEYMOUSE                             = 0,
	PIS_GAMEPAD                              = 1,
	PIS_TOUCH                                = 2,
	PIS_UNKNOWN                              = 3,
	PIS_MAX                                  = 4,
};

// Enum RallyHereStart.EContextActionHoldReleaseState
// NumValues: 0x0004
enum class EContextActionHoldReleaseState : uint8
{
	HoldReleaseState_Started                 = 0,
	HoldReleaseState_Canceled                = 1,
	HoldReleaseState_Completed               = 2,
	HoldReleaseState_MAX                     = 3,
};

// Enum RallyHereStart.ERHPlatformDisplayType
// NumValues: 0x000D
enum class ERHPlatformDisplayType : uint8
{
	PC                                       = 0,
	Xbox                                     = 1,
	Playstation                              = 2,
	Switch                                   = 3,
	ConsoleGeneric                           = 4,
	Epic                                     = 5,
	Steam                                    = 6,
	IOS                                      = 7,
	Android                                  = 8,
	MobileGeneric                            = 9,
	LegacyName                               = 10,
	Unknown                                  = 11,
	ERHPlatformDisplayType_MAX               = 12,
};

// Enum RallyHereStart.EHWCustomMatchPrivacy
// NumValues: 0x0003
enum class EHWCustomMatchPrivacy : uint8
{
	Public                                   = 0,
	Private                                  = 1,
	EHWCustomMatchPrivacy_MAX                = 2,
};

// Enum RallyHereStart.ERHLoginState
// NumValues: 0x000A
enum class ERHLoginState : uint8
{
	ELS_LoggedOut                            = 0,
	ELS_Eula                                 = 1,
	ELS_CreateName                           = 2,
	ELS_EAC                                  = 3,
	ELS_LoggingIn                            = 4,
	ELS_LoggedIn                             = 5,
	ELS_TwoFactor                            = 6,
	ELS_LinkOffer                            = 7,
	ELS_Unknown                              = 8,
	ELS_MAX                                  = 9,
};

// Enum RallyHereStart.ERH_MatchStatus
// NumValues: 0x000B
enum class ERH_MatchStatus : uint8
{
	NotQueued                                = 0,
	Declined                                 = 1,
	Queued                                   = 2,
	Invited                                  = 3,
	Accepted                                 = 4,
	Matching                                 = 5,
	Waiting                                  = 6,
	InGame                                   = 7,
	SpectatorLobby                           = 8,
	SpectatorGame                            = 9,
	ERH_MAX                                  = 10,
};

// Enum RallyHereStart.ERHSocialOverlaySection
// NumValues: 0x000D
enum class ERHSocialOverlaySection : uint8
{
	Invalid                                  = 0,
	SessionMembers                           = 1,
	SessionInvitations                       = 2,
	FriendInvites                            = 3,
	OnlineRHFriends                          = 4,
	OnlinePlatformFriends                    = 5,
	OfflineRHFriends                         = 6,
	Blocked                                  = 7,
	SearchResults                            = 8,
	Pending                                  = 9,
	RecentlyPlayed                           = 10,
	SuggestedFriends                         = 11,
	MAX                                      = 12,
};

// Enum RallyHereStart.EViewManagerLayer
// NumValues: 0x0003
enum class EViewManagerLayer : uint8
{
	Base                                     = 0,
	Modal                                    = 1,
	EViewManagerLayer_MAX                    = 2,
};

// Enum RallyHereStart.ERHInviteSelectResult
// NumValues: 0x0004
enum class ERHInviteSelectResult : uint8
{
	NoChange                                 = 0,
	Selected                                 = 1,
	Deselected                               = 2,
	ERHInviteSelectResult_MAX                = 3,
};

// Enum RallyHereStart.ERHWidgetInputMode
// NumValues: 0x0005
enum class ERHWidgetInputMode : uint8
{
	Default                                  = 0,
	GameAndMenu                              = 1,
	Game                                     = 2,
	Menu                                     = 3,
	ERHWidgetInputMode_MAX                   = 4,
};

// Enum RallyHereStart.ERHInviteCloseAction
// NumValues: 0x0003
enum class ERHInviteCloseAction : uint8
{
	None                                     = 0,
	Submit                                   = 1,
	ERHInviteCloseAction_MAX                 = 2,
};

// Enum RallyHereStart.EExternalSkuSource
// NumValues: 0x000B
enum class EExternalSkuSource : uint8
{
	ESS_No_Souce                             = 0,
	ESS_Sony                                 = 1,
	ESS_Nintendo                             = 2,
	ESS_Microsoft_Xbox                       = 3,
	ESS_Microsoft_Xbox_GDK                   = 4,
	ESS_Epic                                 = 5,
	ESS_Valve                                = 6,
	ESS_AppleRetailSandbox                   = 7,
	ESS_AppleDevSandbox                      = 8,
	ESS_ApplePlatDevSandbox                  = 9,
	ESS_MAX                                  = 10,
};

// Enum RallyHereStart.EAnalogStickType
// NumValues: 0x0004
enum class EAnalogStickType : uint8
{
	Unknown                                  = 0,
	Left                                     = 1,
	Right                                    = 2,
	EAnalogStickType_MAX                     = 3,
};

// Enum RallyHereStart.EBattlepassTrackType
// NumValues: 0x0004
enum class EBattlepassTrackType : uint8
{
	EFreeTrack                               = 0,
	EPremiumTrack                            = 1,
	EInstantUnlock                           = 2,
	EBattlepassTrackType_MAX                 = 3,
};

// Enum RallyHereStart.EPlayerContextMenuContext
// NumValues: 0x0006
enum class EPlayerContextMenuContext : uint8
{
	Friends                                  = 0,
	Party                                    = 1,
	CustomLobby                              = 2,
	InGame                                   = 3,
	Default                                  = 4,
	EPlayerContextMenuContext_MAX            = 5,
};

// Enum RallyHereStart.EPlayerContextOptions
// NumValues: 0x001B
enum class EPlayerContextOptions : uint8
{
	AddFriend                                = 0,
	AddRHFriend                              = 1,
	PartyInvite                              = 2,
	LobbySwapTeam                            = 3,
	LobbyKickPlayer                          = 4,
	LobbyPromotePlayer                       = 5,
	PartyKick                                = 6,
	JoinGame                                 = 7,
	ViewProfile                              = 8,
	ViewPlatformProfile                      = 9,
	RemoveFriend                             = 10,
	CancelRequest                            = 11,
	AcceptFriendRequest                      = 12,
	RejectFriendRequest                      = 13,
	PromotePartyLeader                       = 14,
	GiveInvitePermission                     = 15,
	RevokeInvitePermission                   = 16,
	AcceptPartyInvite                        = 17,
	DeclinePartyInvite                       = 18,
	LeaveParty                               = 19,
	Mute                                     = 20,
	Unmute                                   = 21,
	ReportPlayer                             = 22,
	IgnorePlayer                             = 23,
	UnignorePlayer                           = 24,
	None                                     = 25,
	EPlayerContextOptions_MAX                = 26,
};

// Enum RallyHereStart.EFriendAction
// NumValues: 0x0006
enum class EFriendAction : uint8
{
	AddFriend                                = 0,
	RemoveFriend                             = 1,
	CancelFriendRequest                      = 2,
	AcceptFriendRequest                      = 3,
	RejectFriendRequest                      = 4,
	EFriendAction_MAX                        = 5,
};

// Enum RallyHereStart.EPartyManagerAction
// NumValues: 0x0008
enum class EPartyManagerAction : uint8
{
	KickMember                               = 0,
	PromoteToLeader                          = 1,
	GiveInvitePermission                     = 2,
	RevokeInvitePermission                   = 3,
	AcceptInvite                             = 4,
	DenyInvite                               = 5,
	LeaveParty                               = 6,
	EPartyManagerAction_MAX                  = 7,
};

// Enum RallyHereStart.EQueueDataFactoryAction
// NumValues: 0x0004
enum class EQueueDataFactoryAction : uint8
{
	SwapPlayerCustomMatch                    = 0,
	KickFromCustomMatch                      = 1,
	SwitchHostCustomMatch                    = 2,
	EQueueDataFactoryAction_MAX              = 3,
};

// Enum RallyHereStart.EViewSide
// NumValues: 0x0004
enum class EViewSide : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	None                                     = 2,
	EViewSide_MAX                            = 3,
};

// Enum RallyHereStart.ERHCategoryOpenMode
// NumValues: 0x0003
enum class ERHCategoryOpenMode : uint8
{
	ClosedByDefault                          = 0,
	OpenByDefault                            = 1,
	ERHCategoryOpenMode_MAX                  = 2,
};

// Enum RallyHereStart.EGamepadIcons
// NumValues: 0x0004
enum class EGamepadIcons : uint8
{
	XboxOne                                  = 0,
	PlayStation4                             = 1,
	NintendoSwitch                           = 2,
	EGamepadIcons_MAX                        = 3,
};

// Enum RallyHereStart.EGlobalQualitySetting
// NumValues: 0x0006
enum class EGlobalQualitySetting : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Maximum                                  = 3,
	Auto                                     = 4,
	EGlobalQualitySetting_MAX                = 5,
};

// Enum RallyHereStart.ERHLastInputType
// NumValues: 0x0005
enum class ERHLastInputType : uint8
{
	ERHLastInputType_Up                      = 0,
	ERHLastInputType_Down                    = 1,
	ERHLastInputType_Left                    = 2,
	ERHLastInputType_Right                   = 3,
	ERHLastInputType_MAX                     = 4,
};

// Enum RallyHereStart.EContextActionType
// NumValues: 0x0004
enum class EContextActionType : uint8
{
	ContextActionTypeStandard                = 0,
	ContextActionTypeCycle                   = 1,
	ContextActionTypeHoldRelease             = 2,
	EContextActionType_MAX                   = 3,
};

// Enum RallyHereStart.EContextPromptAnchoring
// NumValues: 0x0004
enum class EContextPromptAnchoring : uint8
{
	AnchorLeft                               = 0,
	AnchorRight                              = 1,
	AnchorCenter                             = 2,
	EContextPromptAnchoring_MAX              = 3,
};

// Enum RallyHereStart.ERHLoadoutTypes
// NumValues: 0x0003
enum class ERHLoadoutTypes : uint8
{
	INVALID_LOADOUT                          = 0,
	PLAYER_ACCOUNT                           = 1,
	ERHLoadoutTypes_MAX                      = 2,
};

// Enum RallyHereStart.ERHLoadoutSlotTypes
// NumValues: 0x0005
enum class ERHLoadoutSlotTypes : uint8
{
	AVATAR_SLOT                              = 0,
	BANNER_SLOT                              = 1,
	BORDER_SLOT                              = 2,
	TITLE_SLOT                               = 3,
	ERHLoadoutSlotTypes_MAX                  = 4,
};

// Enum RallyHereStart.ESocialMessageType
// NumValues: 0x0006
enum class ESocialMessageType : uint8
{
	EInvite                                  = 0,
	EInviteResponse                          = 1,
	EInviteExpired                           = 2,
	EInviteError                             = 3,
	EGenericMsg                              = 4,
	ESocialMessageType_MAX                   = 5,
};

// Enum RallyHereStart.ERHCannotLoginNowReason
// NumValues: 0x0003
enum class ERHCannotLoginNowReason : uint8
{
	None                                     = 0,
	PartialInstall                           = 1,
	ERHCannotLoginNowReason_MAX              = 2,
};

// Enum RallyHereStart.ELootBoxContentsCategories
// NumValues: 0x0007
enum class ELootBoxContentsCategories : uint8
{
	LootBoxContents_All                      = 0,
	LootBoxContents_Avatars                  = 1,
	LootBoxContents_Banners                  = 2,
	LootBoxContents_Titles                   = 3,
	LootBoxContents_Borders                  = 4,
	LootBoxContents_Other                    = 5,
	LootBoxContents_MAX                      = 6,
};

// Enum RallyHereStart.ENewsActions
// NumValues: 0x0007
enum class ENewsActions : uint8
{
	ENewsActions_Unknown                     = 0,
	ENewsActions_ExternalURL                 = 1,
	ENewsActions_NavToRoute                  = 2,
	ENewsActions_NavToStoreItem              = 3,
	ENewsActions_NavToRogueDetails           = 4,
	ENewsActions_NavToCustomization          = 5,
	ENewsActions_MAX                         = 6,
};

// Enum RallyHereStart.ERHOrderType
// NumValues: 0x0008
enum class ERHOrderType : uint8
{
	Generic                                  = 0,
	Voucher                                  = 1,
	BattlePass                               = 2,
	ActiveBoost                              = 3,
	EventGrandPrize                          = 4,
	LootBox                                  = 5,
	Notification                             = 6,
	MAX                                      = 7,
};

// Enum RallyHereStart.ERHOverlayTabState
// NumValues: 0x0005
enum class ERHOverlayTabState : uint8
{
	Idle                                     = 0,
	Hovered                                  = 1,
	Selected                                 = 2,
	SelectedDefocused                        = 3,
	ERHOverlayTabState_MAX                   = 4,
};

// Enum RallyHereStart.ERH_PartyInviteRightsMode
// NumValues: 0x0004
enum class ERH_PartyInviteRightsMode : uint8
{
	ERH_PIRM_OnlyLeader                      = 0,
	ERH_PIRM_LeaderStartingCanGrant          = 1,
	ERH_PIRM_AllMembers                      = 2,
	ERH_PIRM_MAX                             = 3,
};

// Enum RallyHereStart.ERH_QueueDeclineReason
// NumValues: 0x0007
enum class ERH_QueueDeclineReason : uint8
{
	ERH_QDR_None                             = 0,
	ERH_QDR_InvalidParty                     = 1,
	ERH_QDR_NoResponse                       = 2,
	ERH_QDR_NotReady                         = 3,
	ERH_QDR_EOM                              = 4,
	ERH_QDR_InMatch                          = 5,
	ERH_QDR_MAX                              = 6,
};

// Enum RallyHereStart.ESonyMatchState
// NumValues: 0x0007
enum class ESonyMatchState : uint8
{
	NotStarted                               = 0,
	MatchIdRequested                         = 1,
	Playing                                  = 2,
	SendPauseOrCancelMatch                   = 3,
	SendCompleteMatch                        = 4,
	Complete                                 = 5,
	ESonyMatchState_MAX                      = 6,
};

// Enum RallyHereStart.EKeyBindType
// NumValues: 0x0003
enum class EKeyBindType : uint8
{
	ActionMapping                            = 0,
	AxisMapping                              = 1,
	EKeyBindType_MAX                         = 2,
};

// Enum RallyHereStart.EInputType
// NumValues: 0x0004
enum class EInputType : uint8
{
	KBM                                      = 0,
	GP                                       = 1,
	Touch                                    = 2,
	EInputType_MAX                           = 3,
};

// Enum RallyHereStart.EInputActionType
// NumValues: 0x0004
enum class EInputActionType : uint8
{
	Press                                    = 0,
	Hold                                     = 1,
	Repeat                                   = 2,
	EInputActionType_MAX                     = 3,
};

// Enum RallyHereStart.ERHPopupFormat
// NumValues: 0x0005
enum class ERHPopupFormat : uint8
{
	Standard                                 = 0,
	HumanBackfillReward                      = 1,
	ReportPlayerFeedback                     = 2,
	GamepadPrompt                            = 3,
	ERHPopupFormat_MAX                       = 4,
};

// Enum RallyHereStart.ERHPopupButtonType
// NumValues: 0x0004
enum class ERHPopupButtonType : uint8
{
	Confirm                                  = 0,
	Cancel                                   = 1,
	Default                                  = 2,
	ERHPopupButtonType_MAX                   = 3,
};

// Enum RallyHereStart.ERHPushNotificationState
// NumValues: 0x0006
enum class ERHPushNotificationState : uint8
{
	WaitForNotificationData                  = 0,
	StartRequestPermissions                  = 1,
	RequestedPermissions                     = 2,
	ScheduleNotifications                    = 3,
	Complete                                 = 4,
	ERHPushNotificationState_MAX             = 5,
};

// Enum RallyHereStart.ERHQueueDisplayState
// NumValues: 0x0004
enum class ERHQueueDisplayState : uint8
{
	Shown                                    = 0,
	Hidden                                   = 1,
	Disabled                                 = 2,
	ERHQueueDisplayState_MAX                 = 3,
};

// Enum RallyHereStart.ERHQueueType
// NumValues: 0x0006
enum class ERHQueueType : uint8
{
	Normal                                   = 0,
	VsAI                                     = 1,
	Ranked                                   = 2,
	Tutorial                                 = 3,
	Practice                                 = 4,
	ERHQueueType_MAX                         = 5,
};

// Enum RallyHereStart.ERHCustomMatchStatus
// NumValues: 0x0004
enum class ERHCustomMatchStatus : uint8
{
	ReadyToLaunch                            = 0,
	NotEnoughPlayers                         = 1,
	TooManyPlayers                           = 2,
	ERHCustomMatchStatus_MAX                 = 3,
};

// Enum RallyHereStart.EQueueTimerState
// NumValues: 0x0006
enum class EQueueTimerState : uint8
{
	Unknown                                  = 0,
	WaitingForLeader                         = 1,
	Queued                                   = 2,
	EnteringMatch                            = 3,
	WaitingForPlayers                        = 4,
	EQueueTimerState_MAX                     = 5,
};

// Enum RallyHereStart.EQuickPlayQueueState
// NumValues: 0x001A
enum class EQuickPlayQueueState : uint8
{
	Unknown                                  = 0,
	NoQueuesAvailable                        = 1,
	NoSelectedQueue                          = 2,
	SelectedQueueUnavailable                 = 3,
	SelectedQueuePartyMinLimit               = 4,
	SelectedQueuePartyMaxLimit               = 5,
	PartyNotReady                            = 6,
	RankedPartySizeUnallowed                 = 7,
	RankedPartySRDifferenceRequirement       = 8,
	RankedPartyMaxSRRequirement              = 9,
	ReadyToJoin                              = 10,
	WaitingForLeader                         = 11,
	JoiningQueue                             = 12,
	Queued                                   = 13,
	EnteringMatch                            = 14,
	ReadyToRejoin                            = 15,
	PlayerLevelRequirement                   = 16,
	PartyLevelRequirement                    = 17,
	PartyRankRequirement                     = 18,
	PartyPlatformRequirement                 = 19,
	PlayerOwnedJobRequirement                = 20,
	PartyOwnedJobRequirement                 = 21,
	VersionMismatch                          = 22,
	DeserterPenalty                          = 23,
	WaitingForPlayers                        = 24,
	EQuickPlayQueueState_MAX                 = 25,
};

// Enum RallyHereStart.ERHSettingUIType
// NumValues: 0x0008
enum class ERHSettingUIType : uint8
{
	Header                                   = 0,
	Slider                                   = 1,
	OptionStepper                            = 2,
	Checkbox                                 = 3,
	Button                                   = 4,
	Dropdown                                 = 5,
	KeyBinding                               = 6,
	ERHSettingUIType_MAX                     = 7,
};

// Enum RallyHereStart.ERHSettingSaveType
// NumValues: 0x0004
enum class ERHSettingSaveType : uint8
{
	System                                   = 0,
	Player                                   = 1,
	GodLoadout                               = 2,
	ERHSettingSaveType_MAX                   = 3,
};

// Enum RallyHereStart.ERHSettingType
// NumValues: 0x0006
enum class ERHSettingType : uint8
{
	Bool                                     = 0,
	Int                                      = 1,
	Float                                    = 2,
	Key                                      = 3,
	Invalid                                  = 4,
	ERHSettingType_MAX                       = 5,
};

// Enum RallyHereStart.ERHSocialFriendSection
// NumValues: 0x000A
enum class ERHSocialFriendSection : uint8
{
	Invalid                                  = 0,
	PartyMembers                             = 1,
	MatchTeamMembers                         = 2,
	PartyInvitations                         = 3,
	OnlineRHFriends                          = 4,
	OnlinePlatformFriends                    = 5,
	OfflineMctsFriends                       = 6,
	Blocked                                  = 7,
	Pending                                  = 8,
	MAX                                      = 9,
};

// Enum RallyHereStart.ERHSocialPanelDisplayOption
// NumValues: 0x0003
enum class ERHSocialPanelDisplayOption : uint8
{
	HideIfEmpty                              = 0,
	ShowIfEmpty                              = 1,
	ERHSocialPanelDisplayOption_MAX          = 2,
};

// Enum RallyHereStart.EStoreSectionTypes
// NumValues: 0x0004
enum class EStoreSectionTypes : uint8
{
	AccountCosmetics                         = 0,
	Bundles                                  = 1,
	PortalOffers                             = 2,
	EStoreSectionTypes_MAX                   = 3,
};

// Enum RallyHereStart.EStoreItemCollectionMode
// NumValues: 0x0004
enum class EStoreItemCollectionMode : uint8
{
	StoreItems                               = 0,
	BlockedItems                             = 1,
	RefundedItems                            = 2,
	EStoreItemCollectionMode_MAX             = 3,
};

// Enum RallyHereStart.EStoreItemWidgetType
// NumValues: 0x0006
enum class EStoreItemWidgetType : uint8
{
	ELargePanel                              = 0,
	ETallPanel                               = 1,
	ESmallPanel                              = 2,
	EWidePanel                               = 3,
	STORE_WIDGET_TYPE_MAX                    = 4,
	EStoreItemWidgetType_MAX                 = 5,
};

// Enum RallyHereStart.EToastCategory
// NumValues: 0x000E
enum class EToastCategory : uint8
{
	ETOAST_INFO                              = 0,
	ETOAST_ERROR                             = 1,
	ETOAST_FRIEND                            = 2,
	ETOAST_PARTY                             = 3,
	ETOAST_CHALLENGE                         = 4,
	ETOAST_MERC_MASTERY                      = 5,
	ETOAST_ITEM_UNLOCK                       = 6,
	ETOAST_AWARD                             = 7,
	ETOAST_BATTLEPASS_TIER                   = 8,
	ETOAST_BOOST_ACTIVATION                  = 9,
	ETOAST_PLAYER_LEVEL                      = 10,
	ETOAST_EVENT_CHALLENGE                   = 11,
	ETOAST_WEAPON_MASTERY                    = 12,
	ETOAST_MAX                               = 13,
};

// Enum RallyHereStart.EReportPlayerReason
// NumValues: 0x000A
enum class EReportPlayerReason : uint8
{
	Unknown_None                             = 0,
	Harassment                               = 1,
	Cheating                                 = 2,
	Teaming                                  = 3,
	IntentionalFeeding                       = 4,
	StreamSniping                            = 5,
	LeavingTheGame_AFK                       = 6,
	OtherReason                              = 7,
	AFK                                      = 8,
	EReportPlayerReason_MAX                  = 9,
};

// Enum RallyHereStart.ERHPlayerOnlineStatus
// NumValues: 0x000D
enum class ERHPlayerOnlineStatus : uint8
{
	FGS_InParty                              = 0,
	FGS_InPartyLeader                        = 1,
	FGS_PendingParty                         = 2,
	FGS_InGame                               = 3,
	FGS_InMatch                              = 4,
	FGS_InQueue                              = 5,
	FGS_Online                               = 6,
	FGS_DND                                  = 7,
	FGS_Away                                 = 8,
	FGS_Offline                              = 9,
	FGS_FriendRequest                        = 10,
	FGS_PendingInvite                        = 11,
	FGS_MAX                                  = 12,
};

// Enum RallyHereStart.EViewManagerTransitionState
// NumValues: 0x0006
enum class EViewManagerTransitionState : uint8
{
	Idle                                     = 0,
	Loading                                  = 1,
	AnimatingHide                            = 2,
	AnimatingShow                            = 3,
	Locked                                   = 4,
	EViewManagerTransitionState_MAX          = 5,
};

// Enum RallyHereStart.EViewRouteRedirectionPhase
// NumValues: 0x0005
enum class EViewRouteRedirectionPhase : uint8
{
	VIEW_ROUTE_REDIRECT_None                 = 0,
	VIEW_ROUTE_REDIRECT_ApplicationLaunch    = 1,
	VIEW_ROUTE_REDIRECT_AccountLogin         = 2,
	VIEW_ROUTE_REDIRECT_AlwaysCheck          = 3,
	VIEW_ROUTE_REDIRECT_MAX                  = 4,
};

// Enum RallyHereStart.EViewRouteNavigationType
// NumValues: 0x0003
enum class EViewRouteNavigationType : uint8
{
	CommonUI                                 = 0,
	RallyHere                                = 1,
	EViewRouteNavigationType_MAX             = 2,
};

// Enum RallyHereStart.ESubPanelAlignment
// NumValues: 0x0004
enum class ESubPanelAlignment : uint8
{
	ESubPanelAlignment_Horizontal            = 0,
	ESubPanelAlignment_VerticalLeft          = 1,
	ESubPanelAlignment_VerticalRight         = 2,
	ESubPanelAlignment_MAX                   = 3,
};

// Enum RallyHereStart.ENewsHeaderAlignment
// NumValues: 0x0003
enum class ENewsHeaderAlignment : uint8
{
	ENewsHeaderAlignment_Center              = 0,
	ENewsHeaderAlignment_Left                = 1,
	ENewsHeaderAlignment_MAX                 = 2,
};

// ScriptStruct RallyHereStart.RH_CustomMatchMember
// 0x0020 (0x0020 - 0x0000)
struct FRH_CustomMatchMember final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PlayerUuid;                                        // 0x000C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPendingInvite;                                  // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_CustomMatchMember) == 0x000008, "Wrong alignment on FRH_CustomMatchMember");
static_assert(sizeof(FRH_CustomMatchMember) == 0x000020, "Wrong size on FRH_CustomMatchMember");
static_assert(offsetof(FRH_CustomMatchMember, Friend) == 0x000000, "Member 'FRH_CustomMatchMember::Friend' has a wrong offset!");
static_assert(offsetof(FRH_CustomMatchMember, TeamId) == 0x000008, "Member 'FRH_CustomMatchMember::TeamId' has a wrong offset!");
static_assert(offsetof(FRH_CustomMatchMember, PlayerUuid) == 0x00000C, "Member 'FRH_CustomMatchMember::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRH_CustomMatchMember, bIsPendingInvite) == 0x00001C, "Member 'FRH_CustomMatchMember::bIsPendingInvite' has a wrong offset!");

// ScriptStruct RallyHereStart.CustomLobbyTeam
// 0x0010 (0x0010 - 0x0000)
struct FCustomLobbyTeam final
{
public:
	TArray<struct FRH_CustomMatchMember>          TeamMembers;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomLobbyTeam) == 0x000008, "Wrong alignment on FCustomLobbyTeam");
static_assert(sizeof(FCustomLobbyTeam) == 0x000010, "Wrong size on FCustomLobbyTeam");
static_assert(offsetof(FCustomLobbyTeam, TeamMembers) == 0x000000, "Member 'FCustomLobbyTeam::TeamMembers' has a wrong offset!");

// ScriptStruct RallyHereStart.RH_PartyMemberData
// 0x0030 (0x0030 - 0x0000)
struct FRH_PartyMemberData final
{
public:
	class URH_PlayerInfo*                         PlayerData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFriend;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   StatusMessage;                                     // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          Online;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPending;                                         // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanInvite;                                         // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLeader;                                          // 0x002B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReady;                                           // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_PartyMemberData) == 0x000008, "Wrong alignment on FRH_PartyMemberData");
static_assert(sizeof(FRH_PartyMemberData) == 0x000030, "Wrong size on FRH_PartyMemberData");
static_assert(offsetof(FRH_PartyMemberData, PlayerData) == 0x000000, "Member 'FRH_PartyMemberData::PlayerData' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, IsFriend) == 0x000008, "Member 'FRH_PartyMemberData::IsFriend' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, StatusMessage) == 0x000010, "Member 'FRH_PartyMemberData::StatusMessage' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, Online) == 0x000028, "Member 'FRH_PartyMemberData::Online' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, IsPending) == 0x000029, "Member 'FRH_PartyMemberData::IsPending' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, CanInvite) == 0x00002A, "Member 'FRH_PartyMemberData::CanInvite' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, IsLeader) == 0x00002B, "Member 'FRH_PartyMemberData::IsLeader' has a wrong offset!");
static_assert(offsetof(FRH_PartyMemberData, IsReady) == 0x00002C, "Member 'FRH_PartyMemberData::IsReady' has a wrong offset!");

// ScriptStruct RallyHereStart.OverlayTabViewRow
// 0x0028 (0x0030 - 0x0008)
struct FOverlayTabViewRow final : public FTableRowBase
{
public:
	class FText                                   TabName;                                           // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSubclassOf<class URHWidget>                  ViewWidget;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URHTabValidator>            TabValidator;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOverlayTabViewRow) == 0x000008, "Wrong alignment on FOverlayTabViewRow");
static_assert(sizeof(FOverlayTabViewRow) == 0x000030, "Wrong size on FOverlayTabViewRow");
static_assert(offsetof(FOverlayTabViewRow, TabName) == 0x000008, "Member 'FOverlayTabViewRow::TabName' has a wrong offset!");
static_assert(offsetof(FOverlayTabViewRow, ViewWidget) == 0x000020, "Member 'FOverlayTabViewRow::ViewWidget' has a wrong offset!");
static_assert(offsetof(FOverlayTabViewRow, TabValidator) == 0x000028, "Member 'FOverlayTabViewRow::TabValidator' has a wrong offset!");

// ScriptStruct RallyHereStart.RHProfileItemsWrapper
// 0x0010 (0x0010 - 0x0000)
struct FRHProfileItemsWrapper final
{
public:
	TArray<class UPlatformInventoryItem*>         Items;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHProfileItemsWrapper) == 0x000008, "Wrong alignment on FRHProfileItemsWrapper");
static_assert(sizeof(FRHProfileItemsWrapper) == 0x000010, "Wrong size on FRHProfileItemsWrapper");
static_assert(offsetof(FRHProfileItemsWrapper, Items) == 0x000000, "Member 'FRHProfileItemsWrapper::Items' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInactivePlayerStateEntry
// 0x0018 (0x0018 - 0x0000)
struct FRHInactivePlayerStateEntry final
{
public:
	struct FGuid                                  RHPlayerUuid;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           PlayerState;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHInactivePlayerStateEntry) == 0x000008, "Wrong alignment on FRHInactivePlayerStateEntry");
static_assert(sizeof(FRHInactivePlayerStateEntry) == 0x000018, "Wrong size on FRHInactivePlayerStateEntry");
static_assert(offsetof(FRHInactivePlayerStateEntry, RHPlayerUuid) == 0x000000, "Member 'FRHInactivePlayerStateEntry::RHPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHInactivePlayerStateEntry, PlayerState) == 0x000010, "Member 'FRHInactivePlayerStateEntry::PlayerState' has a wrong offset!");

// ScriptStruct RallyHereStart.LoginQueueInfo
// 0x0028 (0x0028 - 0x0000)
struct FLoginQueueInfo final
{
public:
	class FText                                   QueueMessage;                                      // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         QueuePosition;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueueSize;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EstimatedWaitTime;                                 // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoginQueueInfo) == 0x000008, "Wrong alignment on FLoginQueueInfo");
static_assert(sizeof(FLoginQueueInfo) == 0x000028, "Wrong size on FLoginQueueInfo");
static_assert(offsetof(FLoginQueueInfo, QueueMessage) == 0x000000, "Member 'FLoginQueueInfo::QueueMessage' has a wrong offset!");
static_assert(offsetof(FLoginQueueInfo, QueuePosition) == 0x000018, "Member 'FLoginQueueInfo::QueuePosition' has a wrong offset!");
static_assert(offsetof(FLoginQueueInfo, QueueSize) == 0x00001C, "Member 'FLoginQueueInfo::QueueSize' has a wrong offset!");
static_assert(offsetof(FLoginQueueInfo, EstimatedWaitTime) == 0x000020, "Member 'FLoginQueueInfo::EstimatedWaitTime' has a wrong offset!");

// ScriptStruct RallyHereStart.RHPopupButtonConfig
// 0x0038 (0x0038 - 0x0000)
struct FRHPopupButtonConfig final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              Action;                                            // 0x0018(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ERHPopupButtonType                            Type;                                              // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayToActivate;                                   // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDelayTimerAt;                                 // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHPopupButtonConfig) == 0x000008, "Wrong alignment on FRHPopupButtonConfig");
static_assert(sizeof(FRHPopupButtonConfig) == 0x000038, "Wrong size on FRHPopupButtonConfig");
static_assert(offsetof(FRHPopupButtonConfig, Label) == 0x000000, "Member 'FRHPopupButtonConfig::Label' has a wrong offset!");
static_assert(offsetof(FRHPopupButtonConfig, Action) == 0x000018, "Member 'FRHPopupButtonConfig::Action' has a wrong offset!");
static_assert(offsetof(FRHPopupButtonConfig, Type) == 0x000028, "Member 'FRHPopupButtonConfig::Type' has a wrong offset!");
static_assert(offsetof(FRHPopupButtonConfig, DelayToActivate) == 0x00002C, "Member 'FRHPopupButtonConfig::DelayToActivate' has a wrong offset!");
static_assert(offsetof(FRHPopupButtonConfig, StartDelayTimerAt) == 0x000030, "Member 'FRHPopupButtonConfig::StartDelayTimerAt' has a wrong offset!");

// ScriptStruct RallyHereStart.RHEquippedLoadoutItemWrapper
// 0x0008 (0x0008 - 0x0000)
struct FRHEquippedLoadoutItemWrapper final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHEquippedLoadoutItemWrapper) == 0x000008, "Wrong alignment on FRHEquippedLoadoutItemWrapper");
static_assert(sizeof(FRHEquippedLoadoutItemWrapper) == 0x000008, "Wrong size on FRHEquippedLoadoutItemWrapper");
static_assert(offsetof(FRHEquippedLoadoutItemWrapper, Item) == 0x000000, "Member 'FRHEquippedLoadoutItemWrapper::Item' has a wrong offset!");

// ScriptStruct RallyHereStart.FontPaletteInfo
// 0x0058 (0x0060 - 0x0008)
struct FFontPaletteInfo final : public FTableRowBase
{
public:
	struct FSlateFontInfo                         FontInfo;                                          // 0x0008(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFontPaletteInfo) == 0x000008, "Wrong alignment on FFontPaletteInfo");
static_assert(sizeof(FFontPaletteInfo) == 0x000060, "Wrong size on FFontPaletteInfo");
static_assert(offsetof(FFontPaletteInfo, FontInfo) == 0x000008, "Member 'FFontPaletteInfo::FontInfo' has a wrong offset!");

// ScriptStruct RallyHereStart.TickAnimationParams
// 0x002C (0x002C - 0x0000)
struct FTickAnimationParams final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float ElapsedTime, float ElapsedAlpha)> UpdateEvent;                              // 0x0004(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FinishedEvent;                                     // 0x0014(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlaying;                                         // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTickAnimationParams) == 0x000004, "Wrong alignment on FTickAnimationParams");
static_assert(sizeof(FTickAnimationParams) == 0x00002C, "Wrong size on FTickAnimationParams");
static_assert(offsetof(FTickAnimationParams, Duration) == 0x000000, "Member 'FTickAnimationParams::Duration' has a wrong offset!");
static_assert(offsetof(FTickAnimationParams, UpdateEvent) == 0x000004, "Member 'FTickAnimationParams::UpdateEvent' has a wrong offset!");
static_assert(offsetof(FTickAnimationParams, FinishedEvent) == 0x000014, "Member 'FTickAnimationParams::FinishedEvent' has a wrong offset!");
static_assert(offsetof(FTickAnimationParams, IsPlaying) == 0x000024, "Member 'FTickAnimationParams::IsPlaying' has a wrong offset!");
static_assert(offsetof(FTickAnimationParams, ElapsedTime) == 0x000028, "Member 'FTickAnimationParams::ElapsedTime' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputActionNameTypePair
// 0x000C (0x000C - 0x0000)
struct FRHInputActionNameTypePair final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionType                              Type;                                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHInputActionNameTypePair) == 0x000004, "Wrong alignment on FRHInputActionNameTypePair");
static_assert(sizeof(FRHInputActionNameTypePair) == 0x00000C, "Wrong size on FRHInputActionNameTypePair");
static_assert(offsetof(FRHInputActionNameTypePair, Name) == 0x000000, "Member 'FRHInputActionNameTypePair::Name' has a wrong offset!");
static_assert(offsetof(FRHInputActionNameTypePair, Type) == 0x000008, "Member 'FRHInputActionNameTypePair::Type' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSocialOverlaySectionInfo
// 0x0018 (0x0018 - 0x0000)
struct FRHSocialOverlaySectionInfo final
{
public:
	ERHSocialOverlaySection                       Section;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SubSection;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSocialOverlaySectionInfo) == 0x000008, "Wrong alignment on FRHSocialOverlaySectionInfo");
static_assert(sizeof(FRHSocialOverlaySectionInfo) == 0x000018, "Wrong size on FRHSocialOverlaySectionInfo");
static_assert(offsetof(FRHSocialOverlaySectionInfo, Section) == 0x000000, "Member 'FRHSocialOverlaySectionInfo::Section' has a wrong offset!");
static_assert(offsetof(FRHSocialOverlaySectionInfo, SubSection) == 0x000008, "Member 'FRHSocialOverlaySectionInfo::SubSection' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSettingPropertyValue
// 0x0020 (0x0020 - 0x0000)
struct FRHSettingPropertyValue final
{
public:
	int32                                         IntVal;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringVal;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatVal;                                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSet;                                            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHSettingPropertyValue) == 0x000008, "Wrong alignment on FRHSettingPropertyValue");
static_assert(sizeof(FRHSettingPropertyValue) == 0x000020, "Wrong size on FRHSettingPropertyValue");
static_assert(offsetof(FRHSettingPropertyValue, IntVal) == 0x000000, "Member 'FRHSettingPropertyValue::IntVal' has a wrong offset!");
static_assert(offsetof(FRHSettingPropertyValue, StringVal) == 0x000008, "Member 'FRHSettingPropertyValue::StringVal' has a wrong offset!");
static_assert(offsetof(FRHSettingPropertyValue, FloatVal) == 0x000018, "Member 'FRHSettingPropertyValue::FloatVal' has a wrong offset!");
static_assert(offsetof(FRHSettingPropertyValue, bIsSet) == 0x00001C, "Member 'FRHSettingPropertyValue::bIsSet' has a wrong offset!");

// ScriptStruct RallyHereStart.RHQueueDetails
// 0x0190 (0x0198 - 0x0008)
struct FRHQueueDetails final : public FTableRowBase
{
public:
	int32                                         SortOrder;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustom;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelLock;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHQueueType                                  QueueType;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoleQueue;                                      // 0x0071(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, ERHQueueDisplayState>             PartySizeToDisplayStateMap;                        // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KVHighestAllowedSR;                                // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KVMaxSRDifference;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresItemOwnership;                            // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_ItemId                             RequiredItemId;                                    // 0x00DC(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CorrespondingGameModeInfoTag;                      // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              GameModeIcon;                                      // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              MinimapTexture;                                    // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           BulletedInfoTexts;                                 // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FText>                           QueueTags;                                         // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 PvEAlternateQueue;                                 // 0x0168(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotProficiencyTrackingItemId;                      // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PvEAlternateTiers;                                 // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bHideFromUI;                                       // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHQueueDetails) == 0x000008, "Wrong alignment on FRHQueueDetails");
static_assert(sizeof(FRHQueueDetails) == 0x000198, "Wrong size on FRHQueueDetails");
static_assert(offsetof(FRHQueueDetails, SortOrder) == 0x000008, "Member 'FRHQueueDetails::SortOrder' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, Name) == 0x000010, "Member 'FRHQueueDetails::Name' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, Description) == 0x000028, "Member 'FRHQueueDetails::Description' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, Image) == 0x000040, "Member 'FRHQueueDetails::Image' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, IsCustom) == 0x000068, "Member 'FRHQueueDetails::IsCustom' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, LevelLock) == 0x00006C, "Member 'FRHQueueDetails::LevelLock' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, QueueType) == 0x000070, "Member 'FRHQueueDetails::QueueType' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, bIsRoleQueue) == 0x000071, "Member 'FRHQueueDetails::bIsRoleQueue' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, PartySizeToDisplayStateMap) == 0x000078, "Member 'FRHQueueDetails::PartySizeToDisplayStateMap' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, KVHighestAllowedSR) == 0x0000C8, "Member 'FRHQueueDetails::KVHighestAllowedSR' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, KVMaxSRDifference) == 0x0000D0, "Member 'FRHQueueDetails::KVMaxSRDifference' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, bRequiresItemOwnership) == 0x0000D8, "Member 'FRHQueueDetails::bRequiresItemOwnership' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, RequiredItemId) == 0x0000DC, "Member 'FRHQueueDetails::RequiredItemId' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, CorrespondingGameModeInfoTag) == 0x0000F0, "Member 'FRHQueueDetails::CorrespondingGameModeInfoTag' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, GameModeIcon) == 0x0000F8, "Member 'FRHQueueDetails::GameModeIcon' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, MinimapTexture) == 0x000120, "Member 'FRHQueueDetails::MinimapTexture' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, BulletedInfoTexts) == 0x000148, "Member 'FRHQueueDetails::BulletedInfoTexts' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, QueueTags) == 0x000158, "Member 'FRHQueueDetails::QueueTags' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, PvEAlternateQueue) == 0x000168, "Member 'FRHQueueDetails::PvEAlternateQueue' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, BotProficiencyTrackingItemId) == 0x000178, "Member 'FRHQueueDetails::BotProficiencyTrackingItemId' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, PvEAlternateTiers) == 0x000180, "Member 'FRHQueueDetails::PvEAlternateTiers' has a wrong offset!");
static_assert(offsetof(FRHQueueDetails, bHideFromUI) == 0x000190, "Member 'FRHQueueDetails::bHideFromUI' has a wrong offset!");

// ScriptStruct RallyHereStart.RH_PartyDeserters
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FRH_PartyDeserters final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_PartyDeserters) == 0x000008, "Wrong alignment on FRH_PartyDeserters");
static_assert(sizeof(FRH_PartyDeserters) == 0x000050, "Wrong size on FRH_PartyDeserters");

// ScriptStruct RallyHereStart.IconReference
// 0x0010 (0x0010 - 0x0000)
struct FIconReference final
{
public:
	struct FGameplayTag                           IconTag;                                           // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIconInfo*                              IconInfo;                                          // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIconReference) == 0x000008, "Wrong alignment on FIconReference");
static_assert(sizeof(FIconReference) == 0x000010, "Wrong size on FIconReference");
static_assert(offsetof(FIconReference, IconTag) == 0x000000, "Member 'FIconReference::IconTag' has a wrong offset!");
static_assert(offsetof(FIconReference, IconInfo) == 0x000008, "Member 'FIconReference::IconInfo' has a wrong offset!");

// ScriptStruct RallyHereStart.PlayerExp_StatAccumulator
// 0x00C8 (0x00C8 - 0x0000)
struct FPlayerExp_StatAccumulator final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Minimum;                                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Maximum;                                           // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Mean;                                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        StandardDeviation;                                 // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Variance;                                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile25;                                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile50;                                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile75;                                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile90;                                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile95;                                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile97;                                        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	double                                        Quantile99;                                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SampleUnderflowCount;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SampleOverflowCount;                               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SampleCount;                                       // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerExp_StatAccumulator) == 0x000008, "Wrong alignment on FPlayerExp_StatAccumulator");
static_assert(sizeof(FPlayerExp_StatAccumulator) == 0x0000C8, "Wrong size on FPlayerExp_StatAccumulator");
static_assert(offsetof(FPlayerExp_StatAccumulator, Minimum) == 0x000060, "Member 'FPlayerExp_StatAccumulator::Minimum' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Maximum) == 0x000064, "Member 'FPlayerExp_StatAccumulator::Maximum' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Mean) == 0x000068, "Member 'FPlayerExp_StatAccumulator::Mean' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, StandardDeviation) == 0x000070, "Member 'FPlayerExp_StatAccumulator::StandardDeviation' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Variance) == 0x000078, "Member 'FPlayerExp_StatAccumulator::Variance' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile25) == 0x000080, "Member 'FPlayerExp_StatAccumulator::Quantile25' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile50) == 0x000088, "Member 'FPlayerExp_StatAccumulator::Quantile50' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile75) == 0x000090, "Member 'FPlayerExp_StatAccumulator::Quantile75' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile90) == 0x000098, "Member 'FPlayerExp_StatAccumulator::Quantile90' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile95) == 0x0000A0, "Member 'FPlayerExp_StatAccumulator::Quantile95' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile97) == 0x0000A8, "Member 'FPlayerExp_StatAccumulator::Quantile97' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, Quantile99) == 0x0000B0, "Member 'FPlayerExp_StatAccumulator::Quantile99' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, SampleUnderflowCount) == 0x0000B8, "Member 'FPlayerExp_StatAccumulator::SampleUnderflowCount' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, SampleOverflowCount) == 0x0000BC, "Member 'FPlayerExp_StatAccumulator::SampleOverflowCount' has a wrong offset!");
static_assert(offsetof(FPlayerExp_StatAccumulator, SampleCount) == 0x0000C0, "Member 'FPlayerExp_StatAccumulator::SampleCount' has a wrong offset!");

// ScriptStruct RallyHereStart.CurrencyImageRow
// 0x00C0 (0x00C8 - 0x0008)
struct FCurrencyImageRow final : public FTableRowBase
{
public:
	int32                                         Quantity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusQuantity;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0010(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FullSplashImage;                                   // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EExternalSkuSource, class FString>       ExternalProductSkus;                               // 0x0060(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FRH_LootId                             PurchaseLootId;                                    // 0x00B0(0x0014)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrencyImageRow) == 0x000008, "Wrong alignment on FCurrencyImageRow");
static_assert(sizeof(FCurrencyImageRow) == 0x0000C8, "Wrong size on FCurrencyImageRow");
static_assert(offsetof(FCurrencyImageRow, Quantity) == 0x000008, "Member 'FCurrencyImageRow::Quantity' has a wrong offset!");
static_assert(offsetof(FCurrencyImageRow, BonusQuantity) == 0x00000C, "Member 'FCurrencyImageRow::BonusQuantity' has a wrong offset!");
static_assert(offsetof(FCurrencyImageRow, Image) == 0x000010, "Member 'FCurrencyImageRow::Image' has a wrong offset!");
static_assert(offsetof(FCurrencyImageRow, FullSplashImage) == 0x000038, "Member 'FCurrencyImageRow::FullSplashImage' has a wrong offset!");
static_assert(offsetof(FCurrencyImageRow, ExternalProductSkus) == 0x000060, "Member 'FCurrencyImageRow::ExternalProductSkus' has a wrong offset!");
static_assert(offsetof(FCurrencyImageRow, PurchaseLootId) == 0x0000B0, "Member 'FCurrencyImageRow::PurchaseLootId' has a wrong offset!");

// ScriptStruct RallyHereStart.RHEventData
// 0x0028 (0x0030 - 0x0008)
struct FRHEventData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class URHEvent>                DataObject;                                        // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHEventData) == 0x000008, "Wrong alignment on FRHEventData");
static_assert(sizeof(FRHEventData) == 0x000030, "Wrong size on FRHEventData");
static_assert(offsetof(FRHEventData, DataObject) == 0x000008, "Member 'FRHEventData::DataObject' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSonyMatchData
// 0x0040 (0x0040 - 0x0000)
struct FRHSonyMatchData final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x30];                                      // 0x0010(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHSonyMatchData) == 0x000008, "Wrong alignment on FRHSonyMatchData");
static_assert(sizeof(FRHSonyMatchData) == 0x000040, "Wrong size on FRHSonyMatchData");
static_assert(offsetof(FRHSonyMatchData, MatchID) == 0x000000, "Member 'FRHSonyMatchData::MatchID' has a wrong offset!");

// ScriptStruct RallyHereStart.RHPlayerProfile
// 0x0028 (0x0028 - 0x0000)
struct FRHPlayerProfile
{
public:
	struct FGuid                                  RHPlayerUuid;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpectator;                                        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugPlayer;                                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHPlayerProfile) == 0x000008, "Wrong alignment on FRHPlayerProfile");
static_assert(sizeof(FRHPlayerProfile) == 0x000028, "Wrong size on FRHPlayerProfile");
static_assert(offsetof(FRHPlayerProfile, RHPlayerUuid) == 0x000000, "Member 'FRHPlayerProfile::RHPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRHPlayerProfile, PlayerName) == 0x000010, "Member 'FRHPlayerProfile::PlayerName' has a wrong offset!");
static_assert(offsetof(FRHPlayerProfile, bSpectator) == 0x000020, "Member 'FRHPlayerProfile::bSpectator' has a wrong offset!");
static_assert(offsetof(FRHPlayerProfile, bDebugPlayer) == 0x000021, "Member 'FRHPlayerProfile::bDebugPlayer' has a wrong offset!");

// ScriptStruct RallyHereStart.ButtonPromptData
// 0x0030 (0x0030 - 0x0000)
struct FButtonPromptData final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonPromptData) == 0x000008, "Wrong alignment on FButtonPromptData");
static_assert(sizeof(FButtonPromptData) == 0x000030, "Wrong size on FButtonPromptData");
static_assert(offsetof(FButtonPromptData, Key) == 0x000000, "Member 'FButtonPromptData::Key' has a wrong offset!");
static_assert(offsetof(FButtonPromptData, Text) == 0x000018, "Member 'FButtonPromptData::Text' has a wrong offset!");

// ScriptStruct RallyHereStart.ButtonPromptContext
// 0x0010 (0x0010 - 0x0000)
struct FButtonPromptContext final
{
public:
	TArray<struct FButtonPromptData>              PromptInfo;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FButtonPromptContext) == 0x000008, "Wrong alignment on FButtonPromptContext");
static_assert(sizeof(FButtonPromptContext) == 0x000010, "Wrong size on FButtonPromptContext");
static_assert(offsetof(FButtonPromptContext, PromptInfo) == 0x000000, "Member 'FButtonPromptContext::PromptInfo' has a wrong offset!");

// ScriptStruct RallyHereStart.SettingConfigPair
// 0x0018 (0x0018 - 0x0000)
struct FSettingConfigPair final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingConfigPair) == 0x000008, "Wrong alignment on FSettingConfigPair");
static_assert(sizeof(FSettingConfigPair) == 0x000018, "Wrong size on FSettingConfigPair");
static_assert(offsetof(FSettingConfigPair, Name) == 0x000000, "Member 'FSettingConfigPair::Name' has a wrong offset!");
static_assert(offsetof(FSettingConfigPair, Value) == 0x000008, "Member 'FSettingConfigPair::Value' has a wrong offset!");

// ScriptStruct RallyHereStart.ColorPaletteInfo
// 0x0010 (0x0018 - 0x0008)
struct FColorPaletteInfo final : public FTableRowBase
{
public:
	struct FLinearColor                           LinearColor;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorPaletteInfo) == 0x000008, "Wrong alignment on FColorPaletteInfo");
static_assert(sizeof(FColorPaletteInfo) == 0x000018, "Wrong size on FColorPaletteInfo");
static_assert(offsetof(FColorPaletteInfo, LinearColor) == 0x000008, "Member 'FColorPaletteInfo::LinearColor' has a wrong offset!");

// ScriptStruct RallyHereStart.RHWidgetInfoParams
// 0x0048 (0x0048 - 0x0000)
struct FRHWidgetInfoParams final
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreloadWidget;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 WidgetParentTarget;                                // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InfoActor;                                         // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHWidgetInfoParams) == 0x000008, "Wrong alignment on FRHWidgetInfoParams");
static_assert(sizeof(FRHWidgetInfoParams) == 0x000048, "Wrong size on FRHWidgetInfoParams");
static_assert(offsetof(FRHWidgetInfoParams, Widget) == 0x000000, "Member 'FRHWidgetInfoParams::Widget' has a wrong offset!");
static_assert(offsetof(FRHWidgetInfoParams, bPreloadWidget) == 0x000028, "Member 'FRHWidgetInfoParams::bPreloadWidget' has a wrong offset!");
static_assert(offsetof(FRHWidgetInfoParams, WidgetParentTarget) == 0x000030, "Member 'FRHWidgetInfoParams::WidgetParentTarget' has a wrong offset!");
static_assert(offsetof(FRHWidgetInfoParams, InfoActor) == 0x000040, "Member 'FRHWidgetInfoParams::InfoActor' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputFocusGroup
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FRHInputFocusGroup final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHInputFocusGroup) == 0x000008, "Wrong alignment on FRHInputFocusGroup");
static_assert(sizeof(FRHInputFocusGroup) == 0x000038, "Wrong size on FRHInputFocusGroup");

// ScriptStruct RallyHereStart.RHInputFocusDetails
// 0x0018 (0x0018 - 0x0000)
struct FRHInputFocusDetails final
{
public:
	TArray<struct FRHInputFocusGroup>             FocusGroups;                                       // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultFocusGroupIndex;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentFocusGroupIndex;                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHInputFocusDetails) == 0x000008, "Wrong alignment on FRHInputFocusDetails");
static_assert(sizeof(FRHInputFocusDetails) == 0x000018, "Wrong size on FRHInputFocusDetails");
static_assert(offsetof(FRHInputFocusDetails, FocusGroups) == 0x000000, "Member 'FRHInputFocusDetails::FocusGroups' has a wrong offset!");
static_assert(offsetof(FRHInputFocusDetails, DefaultFocusGroupIndex) == 0x000010, "Member 'FRHInputFocusDetails::DefaultFocusGroupIndex' has a wrong offset!");
static_assert(offsetof(FRHInputFocusDetails, CurrentFocusGroupIndex) == 0x000014, "Member 'FRHInputFocusDetails::CurrentFocusGroupIndex' has a wrong offset!");

// ScriptStruct RallyHereStart.ContextAction
// 0x0050 (0x0058 - 0x0008)
struct FContextAction final : public FTableRowBase
{
public:
	class FText                                   Text;                                              // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UInputAction*                           Action;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           AltAction;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ERH_INPUT_STATE>                       ValidInputTypes;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextPromptAnchoring                       Anchor;                                            // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContextActionType                            ActionType;                                        // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URHWidget>                  PromptWidget;                                      // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldDuration;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHidden;                                          // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FContextAction) == 0x000008, "Wrong alignment on FContextAction");
static_assert(sizeof(FContextAction) == 0x000058, "Wrong size on FContextAction");
static_assert(offsetof(FContextAction, Text) == 0x000008, "Member 'FContextAction::Text' has a wrong offset!");
static_assert(offsetof(FContextAction, Action) == 0x000020, "Member 'FContextAction::Action' has a wrong offset!");
static_assert(offsetof(FContextAction, AltAction) == 0x000028, "Member 'FContextAction::AltAction' has a wrong offset!");
static_assert(offsetof(FContextAction, ValidInputTypes) == 0x000030, "Member 'FContextAction::ValidInputTypes' has a wrong offset!");
static_assert(offsetof(FContextAction, SortOrder) == 0x000040, "Member 'FContextAction::SortOrder' has a wrong offset!");
static_assert(offsetof(FContextAction, Anchor) == 0x000044, "Member 'FContextAction::Anchor' has a wrong offset!");
static_assert(offsetof(FContextAction, ActionType) == 0x000045, "Member 'FContextAction::ActionType' has a wrong offset!");
static_assert(offsetof(FContextAction, PromptWidget) == 0x000048, "Member 'FContextAction::PromptWidget' has a wrong offset!");
static_assert(offsetof(FContextAction, HoldDuration) == 0x000050, "Member 'FContextAction::HoldDuration' has a wrong offset!");
static_assert(offsetof(FContextAction, IsHidden) == 0x000054, "Member 'FContextAction::IsHidden' has a wrong offset!");

// ScriptStruct RallyHereStart.RouteContextInfo
// 0x0010 (0x0010 - 0x0000)
struct FRouteContextInfo final
{
public:
	TArray<class UContextActionData*>             ActionData;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRouteContextInfo) == 0x000008, "Wrong alignment on FRouteContextInfo");
static_assert(sizeof(FRouteContextInfo) == 0x000010, "Wrong size on FRouteContextInfo");
static_assert(offsetof(FRouteContextInfo, ActionData) == 0x000000, "Member 'FRouteContextInfo::ActionData' has a wrong offset!");

// ScriptStruct RallyHereStart.RHPlayerLoadoutsWrapper
// 0x0050 (0x0050 - 0x0000)
struct FRHPlayerLoadoutsWrapper final
{
public:
	TMap<class FString, class URH_PlayerLoadout*> LoadoutsById;                                      // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHPlayerLoadoutsWrapper) == 0x000008, "Wrong alignment on FRHPlayerLoadoutsWrapper");
static_assert(sizeof(FRHPlayerLoadoutsWrapper) == 0x000050, "Wrong size on FRHPlayerLoadoutsWrapper");
static_assert(offsetof(FRHPlayerLoadoutsWrapper, LoadoutsById) == 0x000000, "Member 'FRHPlayerLoadoutsWrapper::LoadoutsById' has a wrong offset!");

// ScriptStruct RallyHereStart.AccountLoadoutDefaults
// 0x0030 (0x0038 - 0x0008)
struct FAccountLoadoutDefaults final : public FTableRowBase
{
public:
	ERHLoadoutSlotTypes                           SlotType;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPlatformInventoryItem>  Default;                                           // 0x0010(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccountLoadoutDefaults) == 0x000008, "Wrong alignment on FAccountLoadoutDefaults");
static_assert(sizeof(FAccountLoadoutDefaults) == 0x000038, "Wrong size on FAccountLoadoutDefaults");
static_assert(offsetof(FAccountLoadoutDefaults, SlotType) == 0x000008, "Member 'FAccountLoadoutDefaults::SlotType' has a wrong offset!");
static_assert(offsetof(FAccountLoadoutDefaults, Default) == 0x000010, "Member 'FAccountLoadoutDefaults::Default' has a wrong offset!");

// ScriptStruct RallyHereStart.ErrorMessage
// 0x0020 (0x0028 - 0x0008)
struct FErrorMessage final : public FTableRowBase
{
public:
	int32                                         ErrorMsgId;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ErrorMsg;                                          // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorMessage) == 0x000008, "Wrong alignment on FErrorMessage");
static_assert(sizeof(FErrorMessage) == 0x000028, "Wrong size on FErrorMessage");
static_assert(offsetof(FErrorMessage, ErrorMsgId) == 0x000008, "Member 'FErrorMessage::ErrorMsgId' has a wrong offset!");
static_assert(offsetof(FErrorMessage, ErrorMsg) == 0x000010, "Member 'FErrorMessage::ErrorMsg' has a wrong offset!");

// ScriptStruct RallyHereStart.RHMediaPlayerWidgetPlaylistEntry
// 0x0040 (0x0048 - 0x0008)
struct FRHMediaPlayerWidgetPlaylistEntry final : public FTableRowBase
{
public:
	bool                                          bIsSkippable;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkippableAfter;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceFirstWatch;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyWatchOnce;                                    // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MajorVersion;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPlatformMediaSource>    PlatformMediaSource;                               // 0x0018(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MediaId;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHMediaPlayerWidgetPlaylistEntry) == 0x000008, "Wrong alignment on FRHMediaPlayerWidgetPlaylistEntry");
static_assert(sizeof(FRHMediaPlayerWidgetPlaylistEntry) == 0x000048, "Wrong size on FRHMediaPlayerWidgetPlaylistEntry");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, bIsSkippable) == 0x000008, "Member 'FRHMediaPlayerWidgetPlaylistEntry::bIsSkippable' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, SkippableAfter) == 0x00000C, "Member 'FRHMediaPlayerWidgetPlaylistEntry::SkippableAfter' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, bForceFirstWatch) == 0x000010, "Member 'FRHMediaPlayerWidgetPlaylistEntry::bForceFirstWatch' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, bOnlyWatchOnce) == 0x000011, "Member 'FRHMediaPlayerWidgetPlaylistEntry::bOnlyWatchOnce' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, MajorVersion) == 0x000012, "Member 'FRHMediaPlayerWidgetPlaylistEntry::MajorVersion' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, PlatformMediaSource) == 0x000018, "Member 'FRHMediaPlayerWidgetPlaylistEntry::PlatformMediaSource' has a wrong offset!");
static_assert(offsetof(FRHMediaPlayerWidgetPlaylistEntry, MediaId) == 0x000040, "Member 'FRHMediaPlayerWidgetPlaylistEntry::MediaId' has a wrong offset!");

// ScriptStruct RallyHereStart.RHJsonDataWrapper
// 0x0050 (0x0050 - 0x0000)
struct FRHJsonDataWrapper final
{
public:
	TSet<class URHJsonData*>                      JsonDataSet;                                       // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHJsonDataWrapper) == 0x000008, "Wrong alignment on FRHJsonDataWrapper");
static_assert(sizeof(FRHJsonDataWrapper) == 0x000050, "Wrong size on FRHJsonDataWrapper");
static_assert(offsetof(FRHJsonDataWrapper, JsonDataSet) == 0x000000, "Member 'FRHJsonDataWrapper::JsonDataSet' has a wrong offset!");

// ScriptStruct RallyHereStart.RHShouldShowPanelsWrapper
// 0x0050 (0x0050 - 0x0000)
struct FRHShouldShowPanelsWrapper final
{
public:
	TMap<class URHJsonData*, bool>                ShouldShowByPanel;                                 // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHShouldShowPanelsWrapper) == 0x000008, "Wrong alignment on FRHShouldShowPanelsWrapper");
static_assert(sizeof(FRHShouldShowPanelsWrapper) == 0x000050, "Wrong size on FRHShouldShowPanelsWrapper");
static_assert(offsetof(FRHShouldShowPanelsWrapper, ShouldShowByPanel) == 0x000000, "Member 'FRHShouldShowPanelsWrapper::ShouldShowByPanel' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInventoryCountWrapper
// 0x0050 (0x0050 - 0x0000)
struct FRHInventoryCountWrapper final
{
public:
	TMap<struct FRH_ItemId, int32>                InventoryCountsById;                               // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHInventoryCountWrapper) == 0x000008, "Wrong alignment on FRHInventoryCountWrapper");
static_assert(sizeof(FRHInventoryCountWrapper) == 0x000050, "Wrong size on FRHInventoryCountWrapper");
static_assert(offsetof(FRHInventoryCountWrapper, InventoryCountsById) == 0x000000, "Member 'FRHInventoryCountWrapper::InventoryCountsById' has a wrong offset!");

// ScriptStruct RallyHereStart.OrderHeaderOverrides
// 0x0028 (0x0030 - 0x0008)
struct FOrderHeaderOverrides final : public FTableRowBase
{
public:
	class FText                                   Header;                                            // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FRH_LootId>                     LootTableItemIds;                                  // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOrderHeaderOverrides) == 0x000008, "Wrong alignment on FOrderHeaderOverrides");
static_assert(sizeof(FOrderHeaderOverrides) == 0x000030, "Wrong size on FOrderHeaderOverrides");
static_assert(offsetof(FOrderHeaderOverrides, Header) == 0x000008, "Member 'FOrderHeaderOverrides::Header' has a wrong offset!");
static_assert(offsetof(FOrderHeaderOverrides, LootTableItemIds) == 0x000020, "Member 'FOrderHeaderOverrides::LootTableItemIds' has a wrong offset!");

// ScriptStruct RallyHereStart.RH_ActiveOrderWatch
// 0x0040 (0x0040 - 0x0000)
struct FRH_ActiveOrderWatch final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_ActiveOrderWatch) == 0x000008, "Wrong alignment on FRH_ActiveOrderWatch");
static_assert(sizeof(FRH_ActiveOrderWatch) == 0x000040, "Wrong size on FRH_ActiveOrderWatch");
static_assert(offsetof(FRH_ActiveOrderWatch, PlayerInfo) == 0x000000, "Member 'FRH_ActiveOrderWatch::PlayerInfo' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputActionTiedNames
// 0x0018 (0x0018 - 0x0000)
struct FRHInputActionTiedNames final
{
public:
	class FName                                   Press;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Hold;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Repeat;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHInputActionTiedNames) == 0x000004, "Wrong alignment on FRHInputActionTiedNames");
static_assert(sizeof(FRHInputActionTiedNames) == 0x000018, "Wrong size on FRHInputActionTiedNames");
static_assert(offsetof(FRHInputActionTiedNames, Press) == 0x000000, "Member 'FRHInputActionTiedNames::Press' has a wrong offset!");
static_assert(offsetof(FRHInputActionTiedNames, Hold) == 0x000008, "Member 'FRHInputActionTiedNames::Hold' has a wrong offset!");
static_assert(offsetof(FRHInputActionTiedNames, Repeat) == 0x000010, "Member 'FRHInputActionTiedNames::Repeat' has a wrong offset!");

// ScriptStruct RallyHereStart.RHCustomInputActionKey
// 0x0014 (0x0014 - 0x0000)
struct FRHCustomInputActionKey final
{
public:
	int32                                         PropId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyboardName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GamepadName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHCustomInputActionKey) == 0x000004, "Wrong alignment on FRHCustomInputActionKey");
static_assert(sizeof(FRHCustomInputActionKey) == 0x000014, "Wrong size on FRHCustomInputActionKey");
static_assert(offsetof(FRHCustomInputActionKey, PropId) == 0x000000, "Member 'FRHCustomInputActionKey::PropId' has a wrong offset!");
static_assert(offsetof(FRHCustomInputActionKey, KeyboardName) == 0x000004, "Member 'FRHCustomInputActionKey::KeyboardName' has a wrong offset!");
static_assert(offsetof(FRHCustomInputActionKey, GamepadName) == 0x00000C, "Member 'FRHCustomInputActionKey::GamepadName' has a wrong offset!");

// ScriptStruct RallyHereStart.RHCustomInputAxisKey
// 0x001C (0x001C - 0x0000)
struct FRHCustomInputAxisKey final
{
public:
	int32                                         PropId;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KeyboardName;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyboardScale;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GamepadName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GamepadScale;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHCustomInputAxisKey) == 0x000004, "Wrong alignment on FRHCustomInputAxisKey");
static_assert(sizeof(FRHCustomInputAxisKey) == 0x00001C, "Wrong size on FRHCustomInputAxisKey");
static_assert(offsetof(FRHCustomInputAxisKey, PropId) == 0x000000, "Member 'FRHCustomInputAxisKey::PropId' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKey, KeyboardName) == 0x000004, "Member 'FRHCustomInputAxisKey::KeyboardName' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKey, KeyboardScale) == 0x00000C, "Member 'FRHCustomInputAxisKey::KeyboardScale' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKey, GamepadName) == 0x000010, "Member 'FRHCustomInputAxisKey::GamepadName' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKey, GamepadScale) == 0x000018, "Member 'FRHCustomInputAxisKey::GamepadScale' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputActionKey
// 0x0020 (0x0020 - 0x0000)
struct FRHInputActionKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionType                              Type;                                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHInputActionKey) == 0x000008, "Wrong alignment on FRHInputActionKey");
static_assert(sizeof(FRHInputActionKey) == 0x000020, "Wrong size on FRHInputActionKey");
static_assert(offsetof(FRHInputActionKey, Key) == 0x000000, "Member 'FRHInputActionKey::Key' has a wrong offset!");
static_assert(offsetof(FRHInputActionKey, Type) == 0x000018, "Member 'FRHInputActionKey::Type' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputActionKeyMapping
// 0x0030 (0x0030 - 0x0000)
struct FRHInputActionKeyMapping final
{
public:
	struct FInputActionKeyMapping                 Mapping;                                           // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	EInputActionType                              Type;                                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHInputActionKeyMapping) == 0x000008, "Wrong alignment on FRHInputActionKeyMapping");
static_assert(sizeof(FRHInputActionKeyMapping) == 0x000030, "Wrong size on FRHInputActionKeyMapping");
static_assert(offsetof(FRHInputActionKeyMapping, Mapping) == 0x000000, "Member 'FRHInputActionKeyMapping::Mapping' has a wrong offset!");
static_assert(offsetof(FRHInputActionKeyMapping, Type) == 0x000028, "Member 'FRHInputActionKeyMapping::Type' has a wrong offset!");

// ScriptStruct RallyHereStart.RHCustomInputActionKeyMappings
// 0x0030 (0x0030 - 0x0000)
struct FRHCustomInputActionKeyMappings final
{
public:
	TArray<struct FRHInputActionKeyMapping>       KBM_Mappings;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRHInputActionKeyMapping>       GP_Mappings;                                       // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRHInputActionKeyMapping>       Touch_Mappings;                                    // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHCustomInputActionKeyMappings) == 0x000008, "Wrong alignment on FRHCustomInputActionKeyMappings");
static_assert(sizeof(FRHCustomInputActionKeyMappings) == 0x000030, "Wrong size on FRHCustomInputActionKeyMappings");
static_assert(offsetof(FRHCustomInputActionKeyMappings, KBM_Mappings) == 0x000000, "Member 'FRHCustomInputActionKeyMappings::KBM_Mappings' has a wrong offset!");
static_assert(offsetof(FRHCustomInputActionKeyMappings, GP_Mappings) == 0x000010, "Member 'FRHCustomInputActionKeyMappings::GP_Mappings' has a wrong offset!");
static_assert(offsetof(FRHCustomInputActionKeyMappings, Touch_Mappings) == 0x000020, "Member 'FRHCustomInputActionKeyMappings::Touch_Mappings' has a wrong offset!");

// ScriptStruct RallyHereStart.RHInputAxisKeyMappings
// 0x0010 (0x0010 - 0x0000)
struct FRHInputAxisKeyMappings final
{
public:
	TArray<struct FInputAxisKeyMapping>           InputAxisKeyMappings;                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHInputAxisKeyMappings) == 0x000008, "Wrong alignment on FRHInputAxisKeyMappings");
static_assert(sizeof(FRHInputAxisKeyMappings) == 0x000010, "Wrong size on FRHInputAxisKeyMappings");
static_assert(offsetof(FRHInputAxisKeyMappings, InputAxisKeyMappings) == 0x000000, "Member 'FRHInputAxisKeyMappings::InputAxisKeyMappings' has a wrong offset!");

// ScriptStruct RallyHereStart.RHCustomInputAxisKeyMappings
// 0x00F0 (0x00F0 - 0x0000)
struct FRHCustomInputAxisKeyMappings final
{
public:
	TMap<float, struct FRHInputAxisKeyMappings>   KBM_Mappings;                                      // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<float, struct FRHInputAxisKeyMappings>   GP_Mappings;                                       // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<float, struct FRHInputAxisKeyMappings>   Touch_Mappings;                                    // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHCustomInputAxisKeyMappings) == 0x000008, "Wrong alignment on FRHCustomInputAxisKeyMappings");
static_assert(sizeof(FRHCustomInputAxisKeyMappings) == 0x0000F0, "Wrong size on FRHCustomInputAxisKeyMappings");
static_assert(offsetof(FRHCustomInputAxisKeyMappings, KBM_Mappings) == 0x000000, "Member 'FRHCustomInputAxisKeyMappings::KBM_Mappings' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKeyMappings, GP_Mappings) == 0x000050, "Member 'FRHCustomInputAxisKeyMappings::GP_Mappings' has a wrong offset!");
static_assert(offsetof(FRHCustomInputAxisKeyMappings, Touch_Mappings) == 0x0000A0, "Member 'FRHCustomInputAxisKeyMappings::Touch_Mappings' has a wrong offset!");

// ScriptStruct RallyHereStart.RHPopupConfig
// 0x0108 (0x0108 - 0x0000)
struct FRHPopupConfig final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SubHeading;                                        // 0x0018(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              HeadingIcon;                                       // 0x0030(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0058(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Warning;                                           // 0x0070(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockActions;                                     // 0x008C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TextEntry;                                         // 0x008D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextEntryHint;                                     // 0x0090(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsImportant;                                       // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBeShownOver;                                    // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TreatAsBlocker;                                    // 0x00AA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHPopupButtonConfig>           Buttons;                                           // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              CancelAction;                                      // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ETextJustify                                  TextAlignment;                                     // 0x00D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PopupId;                                           // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHPopupFormat                                PopupFormat;                                       // 0x00D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TopImageTextureName;                               // 0x00E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   KeyToDisplay;                                      // 0x00F0(0x0018)(BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHPopupConfig) == 0x000008, "Wrong alignment on FRHPopupConfig");
static_assert(sizeof(FRHPopupConfig) == 0x000108, "Wrong size on FRHPopupConfig");
static_assert(offsetof(FRHPopupConfig, Header) == 0x000000, "Member 'FRHPopupConfig::Header' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, SubHeading) == 0x000018, "Member 'FRHPopupConfig::SubHeading' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, HeadingIcon) == 0x000030, "Member 'FRHPopupConfig::HeadingIcon' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, Description) == 0x000058, "Member 'FRHPopupConfig::Description' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, Warning) == 0x000070, "Member 'FRHPopupConfig::Warning' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, Timer) == 0x000088, "Member 'FRHPopupConfig::Timer' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, bBlockActions) == 0x00008C, "Member 'FRHPopupConfig::bBlockActions' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, TextEntry) == 0x00008D, "Member 'FRHPopupConfig::TextEntry' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, TextEntryHint) == 0x000090, "Member 'FRHPopupConfig::TextEntryHint' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, IsImportant) == 0x0000A8, "Member 'FRHPopupConfig::IsImportant' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, CanBeShownOver) == 0x0000A9, "Member 'FRHPopupConfig::CanBeShownOver' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, TreatAsBlocker) == 0x0000AA, "Member 'FRHPopupConfig::TreatAsBlocker' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, Buttons) == 0x0000B0, "Member 'FRHPopupConfig::Buttons' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, CancelAction) == 0x0000C0, "Member 'FRHPopupConfig::CancelAction' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, TextAlignment) == 0x0000D0, "Member 'FRHPopupConfig::TextAlignment' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, PopupId) == 0x0000D4, "Member 'FRHPopupConfig::PopupId' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, PopupFormat) == 0x0000D8, "Member 'FRHPopupConfig::PopupFormat' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, TopImageTextureName) == 0x0000E0, "Member 'FRHPopupConfig::TopImageTextureName' has a wrong offset!");
static_assert(offsetof(FRHPopupConfig, KeyToDisplay) == 0x0000F0, "Member 'FRHPopupConfig::KeyToDisplay' has a wrong offset!");

// ScriptStruct RallyHereStart.RHMapDetails
// 0x0070 (0x0078 - 0x0008)
struct FRHMapDetails final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UWorld>                  Map;                                               // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Thumbnail;                                         // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TransitionInfoTag;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHMapDetails) == 0x000008, "Wrong alignment on FRHMapDetails");
static_assert(sizeof(FRHMapDetails) == 0x000078, "Wrong size on FRHMapDetails");
static_assert(offsetof(FRHMapDetails, Map) == 0x000008, "Member 'FRHMapDetails::Map' has a wrong offset!");
static_assert(offsetof(FRHMapDetails, Name) == 0x000030, "Member 'FRHMapDetails::Name' has a wrong offset!");
static_assert(offsetof(FRHMapDetails, Thumbnail) == 0x000048, "Member 'FRHMapDetails::Thumbnail' has a wrong offset!");
static_assert(offsetof(FRHMapDetails, TransitionInfoTag) == 0x000070, "Member 'FRHMapDetails::TransitionInfoTag' has a wrong offset!");

// ScriptStruct RallyHereStart.RHMatchmakingAttributes
// 0x0140 (0x0140 - 0x0000)
struct FRHMatchmakingAttributes final
{
public:
	TMap<class FString, float>                    DoubleAttributes;                                  // 0x0000(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StringAttributes;                                  // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class FString>                           TagAttributes;                                     // 0x00A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ExtensionAttributes;                               // 0x00F0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHMatchmakingAttributes) == 0x000008, "Wrong alignment on FRHMatchmakingAttributes");
static_assert(sizeof(FRHMatchmakingAttributes) == 0x000140, "Wrong size on FRHMatchmakingAttributes");
static_assert(offsetof(FRHMatchmakingAttributes, DoubleAttributes) == 0x000000, "Member 'FRHMatchmakingAttributes::DoubleAttributes' has a wrong offset!");
static_assert(offsetof(FRHMatchmakingAttributes, StringAttributes) == 0x000050, "Member 'FRHMatchmakingAttributes::StringAttributes' has a wrong offset!");
static_assert(offsetof(FRHMatchmakingAttributes, TagAttributes) == 0x0000A0, "Member 'FRHMatchmakingAttributes::TagAttributes' has a wrong offset!");
static_assert(offsetof(FRHMatchmakingAttributes, ExtensionAttributes) == 0x0000F0, "Member 'FRHMatchmakingAttributes::ExtensionAttributes' has a wrong offset!");

// ScriptStruct RallyHereStart.DCS_JoinQueueRequest
// 0x0160 (0x0160 - 0x0000)
struct FDCS_JoinQueueRequest final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueId;                                           // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHMatchmakingAttributes               AdditionalJoinParams;                              // 0x0020(0x0140)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDCS_JoinQueueRequest) == 0x000008, "Wrong alignment on FDCS_JoinQueueRequest");
static_assert(sizeof(FDCS_JoinQueueRequest) == 0x000160, "Wrong size on FDCS_JoinQueueRequest");
static_assert(offsetof(FDCS_JoinQueueRequest, SessionId) == 0x000000, "Member 'FDCS_JoinQueueRequest::SessionId' has a wrong offset!");
static_assert(offsetof(FDCS_JoinQueueRequest, QueueId) == 0x000010, "Member 'FDCS_JoinQueueRequest::QueueId' has a wrong offset!");
static_assert(offsetof(FDCS_JoinQueueRequest, AdditionalJoinParams) == 0x000020, "Member 'FDCS_JoinQueueRequest::AdditionalJoinParams' has a wrong offset!");

// ScriptStruct RallyHereStart.DCS_JoinQueueResponse
// 0x0028 (0x0028 - 0x0000)
struct FDCS_JoinQueueResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ticket_id;                                         // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDCS_JoinQueueResponse) == 0x000008, "Wrong alignment on FDCS_JoinQueueResponse");
static_assert(sizeof(FDCS_JoinQueueResponse) == 0x000028, "Wrong size on FDCS_JoinQueueResponse");
static_assert(offsetof(FDCS_JoinQueueResponse, Success) == 0x000000, "Member 'FDCS_JoinQueueResponse::Success' has a wrong offset!");
static_assert(offsetof(FDCS_JoinQueueResponse, Error) == 0x000008, "Member 'FDCS_JoinQueueResponse::Error' has a wrong offset!");
static_assert(offsetof(FDCS_JoinQueueResponse, ticket_id) == 0x000018, "Member 'FDCS_JoinQueueResponse::ticket_id' has a wrong offset!");

// ScriptStruct RallyHereStart.SettingDelegateStruct
// 0x0020 (0x0020 - 0x0000)
struct FSettingDelegateStruct final
{
public:
	TDelegate<void()>                             SettingApplied;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             SettingSaved;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSettingDelegateStruct) == 0x000004, "Wrong alignment on FSettingDelegateStruct");
static_assert(sizeof(FSettingDelegateStruct) == 0x000020, "Wrong size on FSettingDelegateStruct");
static_assert(offsetof(FSettingDelegateStruct, SettingApplied) == 0x000000, "Member 'FSettingDelegateStruct::SettingApplied' has a wrong offset!");
static_assert(offsetof(FSettingDelegateStruct, SettingSaved) == 0x000010, "Member 'FSettingDelegateStruct::SettingSaved' has a wrong offset!");

// ScriptStruct RallyHereStart.RHAllowedPlatformTypes
// 0x000A (0x000A - 0x0000)
struct FRHAllowedPlatformTypes final
{
public:
	bool                                          XBoxOne;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PS4;                                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SWITCH;                                            // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Windows;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mac;                                               // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Linux;                                             // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IOS;                                               // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Android;                                           // 0x0007(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          XSX;                                               // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PS5;                                               // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHAllowedPlatformTypes) == 0x000001, "Wrong alignment on FRHAllowedPlatformTypes");
static_assert(sizeof(FRHAllowedPlatformTypes) == 0x00000A, "Wrong size on FRHAllowedPlatformTypes");
static_assert(offsetof(FRHAllowedPlatformTypes, XBoxOne) == 0x000000, "Member 'FRHAllowedPlatformTypes::XBoxOne' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, PS4) == 0x000001, "Member 'FRHAllowedPlatformTypes::PS4' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, SWITCH) == 0x000002, "Member 'FRHAllowedPlatformTypes::SWITCH' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, Windows) == 0x000003, "Member 'FRHAllowedPlatformTypes::Windows' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, Mac) == 0x000004, "Member 'FRHAllowedPlatformTypes::Mac' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, Linux) == 0x000005, "Member 'FRHAllowedPlatformTypes::Linux' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, IOS) == 0x000006, "Member 'FRHAllowedPlatformTypes::IOS' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, Android) == 0x000007, "Member 'FRHAllowedPlatformTypes::Android' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, XSX) == 0x000008, "Member 'FRHAllowedPlatformTypes::XSX' has a wrong offset!");
static_assert(offsetof(FRHAllowedPlatformTypes, PS5) == 0x000009, "Member 'FRHAllowedPlatformTypes::PS5' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSettingsState
// 0x0005 (0x0005 - 0x0000)
struct FRHSettingsState final
{
public:
	bool                                          bIsGamepadAttached;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMouseAttached;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDockedMode;                                     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHandheldMode;                                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTouchMode;                                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSettingsState) == 0x000001, "Wrong alignment on FRHSettingsState");
static_assert(sizeof(FRHSettingsState) == 0x000005, "Wrong size on FRHSettingsState");
static_assert(offsetof(FRHSettingsState, bIsGamepadAttached) == 0x000000, "Member 'FRHSettingsState::bIsGamepadAttached' has a wrong offset!");
static_assert(offsetof(FRHSettingsState, bIsMouseAttached) == 0x000001, "Member 'FRHSettingsState::bIsMouseAttached' has a wrong offset!");
static_assert(offsetof(FRHSettingsState, bIsDockedMode) == 0x000002, "Member 'FRHSettingsState::bIsDockedMode' has a wrong offset!");
static_assert(offsetof(FRHSettingsState, bIsHandheldMode) == 0x000003, "Member 'FRHSettingsState::bIsHandheldMode' has a wrong offset!");
static_assert(offsetof(FRHSettingsState, bIsTouchMode) == 0x000004, "Member 'FRHSettingsState::bIsTouchMode' has a wrong offset!");

// ScriptStruct RallyHereStart.RHRequiredInputTypes
// 0x0003 (0x0003 - 0x0000)
struct FRHRequiredInputTypes final
{
public:
	bool                                          Gamepad;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mouse;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Touch;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHRequiredInputTypes) == 0x000001, "Wrong alignment on FRHRequiredInputTypes");
static_assert(sizeof(FRHRequiredInputTypes) == 0x000003, "Wrong size on FRHRequiredInputTypes");
static_assert(offsetof(FRHRequiredInputTypes, Gamepad) == 0x000000, "Member 'FRHRequiredInputTypes::Gamepad' has a wrong offset!");
static_assert(offsetof(FRHRequiredInputTypes, Mouse) == 0x000001, "Member 'FRHRequiredInputTypes::Mouse' has a wrong offset!");
static_assert(offsetof(FRHRequiredInputTypes, Touch) == 0x000002, "Member 'FRHRequiredInputTypes::Touch' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSettingsWidgetConfig
// 0x0010 (0x0010 - 0x0000)
struct FRHSettingsWidgetConfig final
{
public:
	TSubclassOf<class URHSettingsWidget>          WidgetClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URHSettingsInfoBase>        SettingInfo;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSettingsWidgetConfig) == 0x000008, "Wrong alignment on FRHSettingsWidgetConfig");
static_assert(sizeof(FRHSettingsWidgetConfig) == 0x000010, "Wrong size on FRHSettingsWidgetConfig");
static_assert(offsetof(FRHSettingsWidgetConfig, WidgetClass) == 0x000000, "Member 'FRHSettingsWidgetConfig::WidgetClass' has a wrong offset!");
static_assert(offsetof(FRHSettingsWidgetConfig, SettingInfo) == 0x000008, "Member 'FRHSettingsWidgetConfig::SettingInfo' has a wrong offset!");

// ScriptStruct RallyHereStart.ColorOptions
// 0x0028 (0x0028 - 0x0000)
struct FColorOptions final
{
public:
	class FText                                   OptionName;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           OptionColor;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FColorOptions) == 0x000008, "Wrong alignment on FColorOptions");
static_assert(sizeof(FColorOptions) == 0x000028, "Wrong size on FColorOptions");
static_assert(offsetof(FColorOptions, OptionName) == 0x000000, "Member 'FColorOptions::OptionName' has a wrong offset!");
static_assert(offsetof(FColorOptions, OptionColor) == 0x000018, "Member 'FColorOptions::OptionColor' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSettingsGroupConfig
// 0x0018 (0x0018 - 0x0000)
struct FRHSettingsGroupConfig final
{
public:
	class URHSettingsContainerConfigAsset*        MainSettingContainerAsset;                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URHSettingsContainerConfigAsset*> SubSettingContainerAssets;                        // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSettingsGroupConfig) == 0x000008, "Wrong alignment on FRHSettingsGroupConfig");
static_assert(sizeof(FRHSettingsGroupConfig) == 0x000018, "Wrong size on FRHSettingsGroupConfig");
static_assert(offsetof(FRHSettingsGroupConfig, MainSettingContainerAsset) == 0x000000, "Member 'FRHSettingsGroupConfig::MainSettingContainerAsset' has a wrong offset!");
static_assert(offsetof(FRHSettingsGroupConfig, SubSettingContainerAssets) == 0x000008, "Member 'FRHSettingsGroupConfig::SubSettingContainerAssets' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSettingPropertyId
// 0x000C (0x000C - 0x0000)
struct FRHSettingPropertyId final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSettingPropertyId) == 0x000004, "Wrong alignment on FRHSettingPropertyId");
static_assert(sizeof(FRHSettingPropertyId) == 0x00000C, "Wrong size on FRHSettingPropertyId");
static_assert(offsetof(FRHSettingPropertyId, Name) == 0x000000, "Member 'FRHSettingPropertyId::Name' has a wrong offset!");
static_assert(offsetof(FRHSettingPropertyId, ID) == 0x000008, "Member 'FRHSettingPropertyId::ID' has a wrong offset!");

// ScriptStruct RallyHereStart.RHKeyBind
// 0x0078 (0x0078 - 0x0000)
struct FRHKeyBind final
{
public:
	struct FKey                                   Primary;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionType                              PrimaryInputActionType;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Secondary;                                         // 0x0020(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionType                              SecondaryInputActionType;                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Gamepad;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Combo;                                             // 0x0058(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionType                              GamepadInputActionType;                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHKeyBind) == 0x000008, "Wrong alignment on FRHKeyBind");
static_assert(sizeof(FRHKeyBind) == 0x000078, "Wrong size on FRHKeyBind");
static_assert(offsetof(FRHKeyBind, Primary) == 0x000000, "Member 'FRHKeyBind::Primary' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, PrimaryInputActionType) == 0x000018, "Member 'FRHKeyBind::PrimaryInputActionType' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, Secondary) == 0x000020, "Member 'FRHKeyBind::Secondary' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, SecondaryInputActionType) == 0x000038, "Member 'FRHKeyBind::SecondaryInputActionType' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, Gamepad) == 0x000040, "Member 'FRHKeyBind::Gamepad' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, Combo) == 0x000058, "Member 'FRHKeyBind::Combo' has a wrong offset!");
static_assert(offsetof(FRHKeyBind, GamepadInputActionType) == 0x000070, "Member 'FRHKeyBind::GamepadInputActionType' has a wrong offset!");

// ScriptStruct RallyHereStart.RHKeyGroup
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FRHKeyGroup final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHKeyGroup) == 0x000004, "Wrong alignment on FRHKeyGroup");
static_assert(sizeof(FRHKeyGroup) == 0x00001C, "Wrong size on FRHKeyGroup");

// ScriptStruct RallyHereStart.RHSocialPanelSectionDef
// 0x0003 (0x0003 - 0x0000)
struct FRHSocialPanelSectionDef final
{
public:
	uint8                                         Pad_0[0x3];                                        // 0x0000(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHSocialPanelSectionDef) == 0x000001, "Wrong alignment on FRHSocialPanelSectionDef");
static_assert(sizeof(FRHSocialPanelSectionDef) == 0x000003, "Wrong size on FRHSocialPanelSectionDef");

// ScriptStruct RallyHereStart.StorePriceKey
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FStorePriceKey final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStorePriceKey) == 0x000004, "Wrong alignment on FStorePriceKey");
static_assert(sizeof(FStorePriceKey) == 0x000020, "Wrong size on FStorePriceKey");

// ScriptStruct RallyHereStart.StoreItemWithTrueSort
// 0x0018 (0x0018 - 0x0000)
struct FStoreItemWithTrueSort final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreItemWithTrueSort) == 0x000008, "Wrong alignment on FStoreItemWithTrueSort");
static_assert(sizeof(FStoreItemWithTrueSort) == 0x000018, "Wrong size on FStoreItemWithTrueSort");
static_assert(offsetof(FStoreItemWithTrueSort, StoreItem) == 0x000000, "Member 'FStoreItemWithTrueSort::StoreItem' has a wrong offset!");

// ScriptStruct RallyHereStart.RHStorePurchaseCurrencyPrice
// 0x0010 (0x0010 - 0x0000)
struct FRHStorePurchaseCurrencyPrice final
{
public:
	int32                                         PriceInUI;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformInventoryItem*                 CurrencyType;                                      // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHStorePurchaseCurrencyPrice) == 0x000008, "Wrong alignment on FRHStorePurchaseCurrencyPrice");
static_assert(sizeof(FRHStorePurchaseCurrencyPrice) == 0x000010, "Wrong size on FRHStorePurchaseCurrencyPrice");
static_assert(offsetof(FRHStorePurchaseCurrencyPrice, PriceInUI) == 0x000000, "Member 'FRHStorePurchaseCurrencyPrice::PriceInUI' has a wrong offset!");
static_assert(offsetof(FRHStorePurchaseCurrencyPrice, CurrencyType) == 0x000008, "Member 'FRHStorePurchaseCurrencyPrice::CurrencyType' has a wrong offset!");

// ScriptStruct RallyHereStart.RHStoreItemCurrencyPrice
// 0x0038 (0x0038 - 0x0000)
struct FRHStoreItemCurrencyPrice final
{
public:
	int32                                         PreSalePrice;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinReducedPrice;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPlatformInventoryItem>  CurrencyType;                                      // 0x0010(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHStoreItemCurrencyPrice) == 0x000008, "Wrong alignment on FRHStoreItemCurrencyPrice");
static_assert(sizeof(FRHStoreItemCurrencyPrice) == 0x000038, "Wrong size on FRHStoreItemCurrencyPrice");
static_assert(offsetof(FRHStoreItemCurrencyPrice, PreSalePrice) == 0x000000, "Member 'FRHStoreItemCurrencyPrice::PreSalePrice' has a wrong offset!");
static_assert(offsetof(FRHStoreItemCurrencyPrice, Price) == 0x000004, "Member 'FRHStoreItemCurrencyPrice::Price' has a wrong offset!");
static_assert(offsetof(FRHStoreItemCurrencyPrice, MinReducedPrice) == 0x000008, "Member 'FRHStoreItemCurrencyPrice::MinReducedPrice' has a wrong offset!");
static_assert(offsetof(FRHStoreItemCurrencyPrice, CurrencyType) == 0x000010, "Member 'FRHStoreItemCurrencyPrice::CurrencyType' has a wrong offset!");

// ScriptStruct RallyHereStart.AccountConsumableDetails
// 0x0010 (0x0010 - 0x0000)
struct FAccountConsumableDetails final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QuantityOwned;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccountConsumableDetails) == 0x000008, "Wrong alignment on FAccountConsumableDetails");
static_assert(sizeof(FAccountConsumableDetails) == 0x000010, "Wrong size on FAccountConsumableDetails");
static_assert(offsetof(FAccountConsumableDetails, Item) == 0x000000, "Member 'FAccountConsumableDetails::Item' has a wrong offset!");
static_assert(offsetof(FAccountConsumableDetails, QuantityOwned) == 0x000008, "Member 'FAccountConsumableDetails::QuantityOwned' has a wrong offset!");

// ScriptStruct RallyHereStart.ToastData
// 0x0050 (0x0050 - 0x0000)
struct FToastData final
{
public:
	EToastCategory                                ToastCategory;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class URHStoreItem*                           Reward;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformInventoryItem*                 OptionalItemValue;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OptionalIntValue;                                  // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToastData) == 0x000008, "Wrong alignment on FToastData");
static_assert(sizeof(FToastData) == 0x000050, "Wrong size on FToastData");
static_assert(offsetof(FToastData, ToastCategory) == 0x000000, "Member 'FToastData::ToastCategory' has a wrong offset!");
static_assert(offsetof(FToastData, Title) == 0x000008, "Member 'FToastData::Title' has a wrong offset!");
static_assert(offsetof(FToastData, Message) == 0x000020, "Member 'FToastData::Message' has a wrong offset!");
static_assert(offsetof(FToastData, Reward) == 0x000038, "Member 'FToastData::Reward' has a wrong offset!");
static_assert(offsetof(FToastData, OptionalItemValue) == 0x000040, "Member 'FToastData::OptionalItemValue' has a wrong offset!");
static_assert(offsetof(FToastData, OptionalIntValue) == 0x000048, "Member 'FToastData::OptionalIntValue' has a wrong offset!");

// ScriptStruct RallyHereStart.ReportPlayerParams
// 0x0068 (0x0068 - 0x0000)
struct FReportPlayerParams final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceId;                                        // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReportPlayerReason                           Reason;                                            // 0x0050(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportComment;                                     // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportPlayerParams) == 0x000008, "Wrong alignment on FReportPlayerParams");
static_assert(sizeof(FReportPlayerParams) == 0x000068, "Wrong size on FReportPlayerParams");
static_assert(offsetof(FReportPlayerParams, PlayerId) == 0x000000, "Member 'FReportPlayerParams::PlayerId' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, SessionId) == 0x000010, "Member 'FReportPlayerParams::SessionId' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, InstanceId) == 0x000020, "Member 'FReportPlayerParams::InstanceId' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, MatchID) == 0x000030, "Member 'FReportPlayerParams::MatchID' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, PlayerName) == 0x000040, "Member 'FReportPlayerParams::PlayerName' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, Reason) == 0x000050, "Member 'FReportPlayerParams::Reason' has a wrong offset!");
static_assert(offsetof(FReportPlayerParams, ReportComment) == 0x000058, "Member 'FReportPlayerParams::ReportComment' has a wrong offset!");

// ScriptStruct RallyHereStart.RHSoundThemeEventMapping
// 0x0010 (0x0010 - 0x0000)
struct FRHSoundThemeEventMapping final
{
public:
	class FName                                   SoundEventName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              SoundToPlay;                                       // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRHSoundThemeEventMapping) == 0x000008, "Wrong alignment on FRHSoundThemeEventMapping");
static_assert(sizeof(FRHSoundThemeEventMapping) == 0x000010, "Wrong size on FRHSoundThemeEventMapping");
static_assert(offsetof(FRHSoundThemeEventMapping, SoundEventName) == 0x000000, "Member 'FRHSoundThemeEventMapping::SoundEventName' has a wrong offset!");
static_assert(offsetof(FRHSoundThemeEventMapping, SoundToPlay) == 0x000008, "Member 'FRHSoundThemeEventMapping::SoundToPlay' has a wrong offset!");

// ScriptStruct RallyHereStart.ViewRouteRedirectData
// 0x0018 (0x0018 - 0x0000)
struct FViewRouteRedirectData final
{
public:
	struct FGameplayTag                           Route;                                             // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckOrder;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenOverOriginal;                                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URHViewRedirecter*                      Redirector;                                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FViewRouteRedirectData) == 0x000008, "Wrong alignment on FViewRouteRedirectData");
static_assert(sizeof(FViewRouteRedirectData) == 0x000018, "Wrong size on FViewRouteRedirectData");
static_assert(offsetof(FViewRouteRedirectData, Route) == 0x000000, "Member 'FViewRouteRedirectData::Route' has a wrong offset!");
static_assert(offsetof(FViewRouteRedirectData, CheckOrder) == 0x000008, "Member 'FViewRouteRedirectData::CheckOrder' has a wrong offset!");
static_assert(offsetof(FViewRouteRedirectData, OpenOverOriginal) == 0x00000C, "Member 'FViewRouteRedirectData::OpenOverOriginal' has a wrong offset!");
static_assert(offsetof(FViewRouteRedirectData, Redirector) == 0x000010, "Member 'FViewRouteRedirectData::Redirector' has a wrong offset!");

// ScriptStruct RallyHereStart.StickyWidgetData
// 0x0010 (0x0010 - 0x0000)
struct FStickyWidgetData final
{
public:
	class FName                                   StickyWidgetName;                                  // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStickyWidgetData) == 0x000008, "Wrong alignment on FStickyWidgetData");
static_assert(sizeof(FStickyWidgetData) == 0x000010, "Wrong size on FStickyWidgetData");
static_assert(offsetof(FStickyWidgetData, StickyWidgetName) == 0x000000, "Member 'FStickyWidgetData::StickyWidgetName' has a wrong offset!");
static_assert(offsetof(FStickyWidgetData, Widget) == 0x000008, "Member 'FStickyWidgetData::Widget' has a wrong offset!");

// ScriptStruct RallyHereStart.ViewRoute
// 0x0040 (0x0048 - 0x0008)
struct FViewRoute final : public FTableRowBase
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0008(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URHWidget>                  ViewWidget;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ViewStickyWidgets;                                 // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EViewManagerLayer                             ViewLayer;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefaultRoute;                                    // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPreload;                                     // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequiresLoggedIn;                                  // 0x002B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysShowContextBar;                              // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewRouteRedirectionPhase                    RedirectionPhase;                                  // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RedirectionPhaseOrder;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class URHViewRedirecter>          ViewRedirector;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenOverOriginal;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockOrders;                                       // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewRouteNavigationType                      NavigationType;                                    // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickCommonUICursor;                               // 0x0043(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FViewRoute) == 0x000008, "Wrong alignment on FViewRoute");
static_assert(sizeof(FViewRoute) == 0x000048, "Wrong size on FViewRoute");
static_assert(offsetof(FViewRoute, RouteTag) == 0x000008, "Member 'FViewRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(FViewRoute, ViewWidget) == 0x000010, "Member 'FViewRoute::ViewWidget' has a wrong offset!");
static_assert(offsetof(FViewRoute, ViewStickyWidgets) == 0x000018, "Member 'FViewRoute::ViewStickyWidgets' has a wrong offset!");
static_assert(offsetof(FViewRoute, ViewLayer) == 0x000028, "Member 'FViewRoute::ViewLayer' has a wrong offset!");
static_assert(offsetof(FViewRoute, IsDefaultRoute) == 0x000029, "Member 'FViewRoute::IsDefaultRoute' has a wrong offset!");
static_assert(offsetof(FViewRoute, ShouldPreload) == 0x00002A, "Member 'FViewRoute::ShouldPreload' has a wrong offset!");
static_assert(offsetof(FViewRoute, RequiresLoggedIn) == 0x00002B, "Member 'FViewRoute::RequiresLoggedIn' has a wrong offset!");
static_assert(offsetof(FViewRoute, AlwaysShowContextBar) == 0x00002C, "Member 'FViewRoute::AlwaysShowContextBar' has a wrong offset!");
static_assert(offsetof(FViewRoute, RedirectionPhase) == 0x00002D, "Member 'FViewRoute::RedirectionPhase' has a wrong offset!");
static_assert(offsetof(FViewRoute, RedirectionPhaseOrder) == 0x000030, "Member 'FViewRoute::RedirectionPhaseOrder' has a wrong offset!");
static_assert(offsetof(FViewRoute, ViewRedirector) == 0x000038, "Member 'FViewRoute::ViewRedirector' has a wrong offset!");
static_assert(offsetof(FViewRoute, OpenOverOriginal) == 0x000040, "Member 'FViewRoute::OpenOverOriginal' has a wrong offset!");
static_assert(offsetof(FViewRoute, BlockOrders) == 0x000041, "Member 'FViewRoute::BlockOrders' has a wrong offset!");
static_assert(offsetof(FViewRoute, NavigationType) == 0x000042, "Member 'FViewRoute::NavigationType' has a wrong offset!");
static_assert(offsetof(FViewRoute, bTickCommonUICursor) == 0x000043, "Member 'FViewRoute::bTickCommonUICursor' has a wrong offset!");

// ScriptStruct RallyHereStart.SubPanel
// 0x0030 (0x0030 - 0x0000)
struct FSubPanel final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Desc;                                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubPanel) == 0x000008, "Wrong alignment on FSubPanel");
static_assert(sizeof(FSubPanel) == 0x000030, "Wrong size on FSubPanel");
static_assert(offsetof(FSubPanel, Header) == 0x000000, "Member 'FSubPanel::Header' has a wrong offset!");
static_assert(offsetof(FSubPanel, Desc) == 0x000018, "Member 'FSubPanel::Desc' has a wrong offset!");

}

