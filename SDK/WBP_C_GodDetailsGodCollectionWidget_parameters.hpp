#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_C_GodDetailsGodCollectionWidget

#include "Basic.hpp"

#include "Hemingway_structs.hpp"
#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "HemingwayUI_structs.hpp"


namespace SDK::Params
{

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.BP_HandleOnGodSet
// 0x0001 (0x0001 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet) == 0x000001, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet) == 0x000001, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandleOnGodSet::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.BP_HandlePreviewInventoryItem
// 0x0118 (0x0118 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem final
{
public:
	class UHWInventoryItem*                       InventoryItem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UIconInfo*                              NewLocalVar;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWCollectionItem*                      K2Node_DynamicCast_AsHWCollection_Item;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x005C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x0064(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UHWCharacterItem>        CallFunc_GetAssociatedCharacter_ReturnValue;       // 0x0070(0x0028)(ConstParm, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URH_PlayerInfo*                         CallFunc_GetLocalPlayerInfo_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UHWCharacterItem*                 K2Node_DynamicCast_AsHWCharacter_Item;             // 0x00A8(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemName_ReturnValue;                  // 0x00B8(0x0018)()
	bool                                          CallFunc_IsOwnedCached_ReturnValue;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x00D4(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x00E0(0x0018)()
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetItemName_ReturnValue_1;                // 0x0100(0x0018)()
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem) == 0x000118, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, InventoryItem) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::InventoryItem' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, NewLocalVar) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::NewLocalVar' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_byte_Variable) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_DynamicCast_AsHWCollection_Item) == 0x000018, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_DynamicCast_AsHWCollection_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_byte_Variable_1) == 0x000021, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_bool_Variable) == 0x000022, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_text_Variable) == 0x000028, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_text_Variable_1) == 0x000040, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_bool_Variable_1) == 0x000058, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_struct_Variable) == 0x00005C, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_struct_Variable_1) == 0x000064, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, Temp_bool_Variable_2) == 0x00006C, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_GetAssociatedCharacter_ReturnValue) == 0x000070, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_GetAssociatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000098, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_GetLocalPlayerInfo_ReturnValue) == 0x0000A0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_GetLocalPlayerInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_DynamicCast_AsHWCharacter_Item) == 0x0000A8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_DynamicCast_AsHWCharacter_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_IsValid_ReturnValue) == 0x0000B1, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_GetItemName_ReturnValue) == 0x0000B8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_GetItemName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_IsOwnedCached_ReturnValue) == 0x0000D0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_IsOwnedCached_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_Select_Default) == 0x0000D4, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_Select_Default_1) == 0x0000E0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, K2Node_Select_Default_2) == 0x0000F8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000F9, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem, CallFunc_GetItemName_ReturnValue_1) == 0x000100, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_HandlePreviewInventoryItem::CallFunc_GetItemName_ReturnValue_1' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.DisplayButtonEquipStatus
// 0x0028 (0x0028 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus final
{
public:
	EHWButtonEquipStatus                          ButtonStatus;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWButtonEquipStatus                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetButtonEquipText_Text;                  // 0x0010(0x0018)()
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus) == 0x000028, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, ButtonStatus) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::ButtonStatus' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable) == 0x000001, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable_4) == 0x000005, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, Temp_byte_Variable_5) == 0x000006, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, K2Node_Select_Default) == 0x000007, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus, CallFunc_GetButtonEquipText_Text) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayButtonEquipStatus::CallFunc_GetButtonEquipText_Text' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.DisplayCollectionItemStatus
// 0x0038 (0x0038 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus final
{
public:
	EHWCollectionItemStatus                       ItemStatus;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLockedVariant;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       Temp_byte_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       Temp_byte_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemStatus                       Temp_byte_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UHWInventoryItem*                 CallFunc_GetPreviewedInventoryItem_ReturnValue;    // 0x0018(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWSkinItem*                            K2Node_DynamicCast_AsHWSkin_Item;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVariantSkin_ReturnValue;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_3;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus) == 0x000038, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, ItemStatus) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::ItemStatus' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, bIsLockedVariant) == 0x000001, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::bIsLockedVariant' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_bool_Variable) == 0x000002, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable) == 0x000003, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_1) == 0x000004, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_2) == 0x000005, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_3) == 0x000006, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_4) == 0x000007, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_5) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_6) == 0x000009, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_7) == 0x00000A, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_8) == 0x00000B, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_9) == 0x00000C, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_10) == 0x00000D, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_11) == 0x00000E, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_byte_Variable_12) == 0x00000F, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_bool_Variable_1) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_bool_Variable_2) == 0x000011, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_bool_Variable_3) == 0x000012, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, Temp_bool_Variable_4) == 0x000013, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, CallFunc_GetPreviewedInventoryItem_ReturnValue) == 0x000018, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::CallFunc_GetPreviewedInventoryItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_DynamicCast_AsHWSkin_Item) == 0x000020, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_DynamicCast_AsHWSkin_Item' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, CallFunc_IsVariantSkin_ReturnValue) == 0x00002A, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::CallFunc_IsVariantSkin_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, CallFunc_BooleanAND_ReturnValue_1) == 0x00002C, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_Select_Default) == 0x00002D, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_Select_Default_1) == 0x00002E, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_Select_Default_2) == 0x00002F, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus, K2Node_Select_Default_3) == 0x000030, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionItemStatus::K2Node_Select_Default_3' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.DisplayCollectionType
// 0x04C8 (0x04C8 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType final
{
public:
	EHWCollectionItemType                         CollectionType;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWCollectionItemType                         Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00B0(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00C8(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x00E0(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x00F8(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0110(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0128(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0140(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0158(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0170(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x0188(0x0018)()
	class FText                                   Temp_text_Variable_17;                             // 0x01A0(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01B8(0x0018)()
	class FText                                   Temp_text_Variable_19;                             // 0x01D0(0x0018)()
	class FText                                   Temp_text_Variable_20;                             // 0x01E8(0x0018)()
	class FText                                   Temp_text_Variable_21;                             // 0x0200(0x0018)()
	class FText                                   Temp_text_Variable_22;                             // 0x0218(0x0018)()
	class FText                                   Temp_text_Variable_23;                             // 0x0230(0x0018)()
	EHWCollectionItemType                         Temp_byte_Variable_3;                              // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0250(0x0018)()
	class FText                                   Temp_text_Variable_24;                             // 0x0268(0x0018)()
	class FText                                   Temp_text_Variable_25;                             // 0x0280(0x0018)()
	class FText                                   Temp_text_Variable_26;                             // 0x0298(0x0018)()
	class FText                                   Temp_text_Variable_27;                             // 0x02B0(0x0018)()
	class FText                                   Temp_text_Variable_28;                             // 0x02C8(0x0018)()
	class FText                                   Temp_text_Variable_29;                             // 0x02E0(0x0018)()
	class FText                                   Temp_text_Variable_30;                             // 0x02F8(0x0018)()
	class FText                                   Temp_text_Variable_31;                             // 0x0310(0x0018)()
	class FText                                   Temp_text_Variable_32;                             // 0x0328(0x0018)()
	class FText                                   Temp_text_Variable_33;                             // 0x0340(0x0018)()
	class FText                                   Temp_text_Variable_34;                             // 0x0358(0x0018)()
	class FText                                   Temp_text_Variable_35;                             // 0x0370(0x0018)()
	class FText                                   Temp_text_Variable_36;                             // 0x0388(0x0018)()
	class FText                                   Temp_text_Variable_37;                             // 0x03A0(0x0018)()
	class FText                                   Temp_text_Variable_38;                             // 0x03B8(0x0018)()
	class FText                                   Temp_text_Variable_39;                             // 0x03D0(0x0018)()
	class FText                                   Temp_text_Variable_40;                             // 0x03E8(0x0018)()
	class FText                                   Temp_text_Variable_41;                             // 0x0400(0x0018)()
	class FText                                   Temp_text_Variable_42;                             // 0x0418(0x0018)()
	class FText                                   Temp_text_Variable_43;                             // 0x0430(0x0018)()
	class FText                                   Temp_text_Variable_44;                             // 0x0448(0x0018)()
	class FText                                   Temp_text_Variable_45;                             // 0x0460(0x0018)()
	class FText                                   Temp_text_Variable_46;                             // 0x0478(0x0018)()
	class FText                                   Temp_text_Variable_47;                             // 0x0490(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x04A8(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x04C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType) == 0x0004C8, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, CollectionType) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::CollectionType' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_1) == 0x000020, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_2) == 0x000038, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_3) == 0x000050, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_4) == 0x000068, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_5) == 0x000080, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_6) == 0x000098, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_7) == 0x0000B0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_8) == 0x0000C8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_9) == 0x0000E0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_10) == 0x0000F8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_11) == 0x000110, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_12) == 0x000128, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_13) == 0x000140, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_14) == 0x000158, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_15) == 0x000170, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_16) == 0x000188, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_17) == 0x0001A0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_18) == 0x0001B8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_19) == 0x0001D0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_20) == 0x0001E8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_20' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_21) == 0x000200, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_21' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_22) == 0x000218, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_22' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_23) == 0x000230, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_23' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_byte_Variable_3) == 0x000248, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, K2Node_Select_Default) == 0x000250, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_24) == 0x000268, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_24' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_25) == 0x000280, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_25' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_26) == 0x000298, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_26' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_27) == 0x0002B0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_27' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_28) == 0x0002C8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_28' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_29) == 0x0002E0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_29' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_30) == 0x0002F8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_30' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_31) == 0x000310, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_31' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_32) == 0x000328, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_32' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_33) == 0x000340, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_33' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_34) == 0x000358, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_34' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_35) == 0x000370, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_35' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_36) == 0x000388, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_36' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_37) == 0x0003A0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_37' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_38) == 0x0003B8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_38' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_39) == 0x0003D0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_39' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_40) == 0x0003E8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_40' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_41) == 0x000400, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_41' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_42) == 0x000418, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_42' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_43) == 0x000430, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_43' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_44) == 0x000448, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_44' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_45) == 0x000460, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_45' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_46) == 0x000478, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_46' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, Temp_text_Variable_47) == 0x000490, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::Temp_text_Variable_47' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, K2Node_Select_Default_1) == 0x0004A8, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0004C0, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType, K2Node_Select_Default_2) == 0x0004C1, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayCollectionType::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.DisplayPriceItem
// 0x0018 (0x0018 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem final
{
public:
	class URHStoreItemPrice*                      PriceItem;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           PriceGroup;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem) == 0x000018, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem, PriceItem) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem::PriceItem' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem, PriceGroup) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem::PriceGroup' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_DisplayPriceItem::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.EquipPreviewStateUpdated
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated final
{
public:
	bool                                          bIsInEquipPreview;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated) == 0x000001, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated) == 0x000005, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated, bIsInEquipPreview) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated::bIsInEquipPreview' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_EquipPreviewStateUpdated::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget
// 0x0028 (0x0028 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UHWStoreSubsystem*                      CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWStoreSubsystem*                      CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UHWMultiPromptWidget*>           K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget) == 0x000028, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget, EntryPoint) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget, K2Node_MakeArray_Array) == 0x000018, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_ExecuteUbergraph_WBP_C_GodDetailsGodCollectionWidget::K2Node_MakeArray_Array' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.PreviewInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem final
{
public:
	class UHWItemDisplayWidget*                   EntryWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UHWInventoryItem*                 InventoryItem;                                     // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem) == 0x000010, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem, EntryWidget) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem::EntryWidget' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem, InventoryItem) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_PreviewInventoryItem::InventoryItem' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.UpdateUnequipButtonDisplay
// 0x0005 (0x0005 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay) == 0x000001, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay) == 0x000005, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay, bIsVisible) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay::bIsVisible' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay, Temp_bool_Variable) == 0x000001, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay, Temp_byte_Variable) == 0x000002, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay, K2Node_Select_Default) == 0x000004, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_UpdateUnequipButtonDisplay::K2Node_Select_Default' has a wrong offset!");

// Function WBP_C_GodDetailsGodCollectionWidget.WBP_C_GodDetailsGodCollectionWidget_C.BP_GetDesiredFocusTarget
// 0x0028 (0x0028 - 0x0000)
struct WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetContainerDesiredFocusTarget_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget) == 0x000008, "Wrong alignment on WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget");
static_assert(sizeof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget) == 0x000028, "Wrong size on WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget, ReturnValue) == 0x000000, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget, Temp_bool_Variable) == 0x000008, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget, CallFunc_GetContainerDesiredFocusTarget_ReturnValue) == 0x000010, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget::CallFunc_GetContainerDesiredFocusTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget, K2Node_Select_Default) == 0x000020, "Member 'WBP_C_GodDetailsGodCollectionWidget_C_BP_GetDesiredFocusTarget::K2Node_Select_Default' has a wrong offset!");

}

