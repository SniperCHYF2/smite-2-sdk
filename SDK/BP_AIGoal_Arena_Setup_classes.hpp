#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_Arena_Setup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_Arena_Setup.BP_AIGoal_Arena_Setup_C
// 0x0078 (0x0160 - 0x00E8)
class UBP_AIGoal_Arena_Setup_C final : public UHWAIGoal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        AbortGameTime;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartDelay;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWBotFactory*                          CurrentCampFactory;                                // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinJumpTimerDelay;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxJumpTimerDelay;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpChance;                                        // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   JumpAbilitySoftClass;                              // 0x0120(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	class UClass*                                 JumpAbilityClass;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MinStartDelay;                                     // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxStartDelay;                                     // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SkipCampChance;                                    // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyVariance();
	bool CheckPreconditionsBP(class AHWAIController* InController);
	void EndGoalBP();
	void ExecuteUbergraph_BP_AIGoal_Arena_Setup(int32 EntryPoint);
	void GetNextBuffCamp(class AActor* SourceCharacter, bool ActiveOnly, class AActor** JungleCampFactory);
	void JumpTimer();
	void OnStartTimerFinished();
	void StartGoalBP();
	void StartRandomJumpTimer();
	void TryJump();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_Arena_Setup_C">();
	}
	static class UBP_AIGoal_Arena_Setup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_Arena_Setup_C>();
	}
};
static_assert(alignof(UBP_AIGoal_Arena_Setup_C) == 0x000008, "Wrong alignment on UBP_AIGoal_Arena_Setup_C");
static_assert(sizeof(UBP_AIGoal_Arena_Setup_C) == 0x000160, "Wrong size on UBP_AIGoal_Arena_Setup_C");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, UberGraphFrame) == 0x0000E8, "Member 'UBP_AIGoal_Arena_Setup_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, AbortGameTime) == 0x0000F0, "Member 'UBP_AIGoal_Arena_Setup_C::AbortGameTime' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, StartDelay) == 0x0000F8, "Member 'UBP_AIGoal_Arena_Setup_C::StartDelay' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, CurrentCampFactory) == 0x000100, "Member 'UBP_AIGoal_Arena_Setup_C::CurrentCampFactory' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, MinJumpTimerDelay) == 0x000108, "Member 'UBP_AIGoal_Arena_Setup_C::MinJumpTimerDelay' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, MaxJumpTimerDelay) == 0x000110, "Member 'UBP_AIGoal_Arena_Setup_C::MaxJumpTimerDelay' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, JumpChance) == 0x000118, "Member 'UBP_AIGoal_Arena_Setup_C::JumpChance' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, JumpAbilitySoftClass) == 0x000120, "Member 'UBP_AIGoal_Arena_Setup_C::JumpAbilitySoftClass' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, JumpAbilityClass) == 0x000148, "Member 'UBP_AIGoal_Arena_Setup_C::JumpAbilityClass' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, MinStartDelay) == 0x000150, "Member 'UBP_AIGoal_Arena_Setup_C::MinStartDelay' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, MaxStartDelay) == 0x000154, "Member 'UBP_AIGoal_Arena_Setup_C::MaxStartDelay' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Arena_Setup_C, SkipCampChance) == 0x000158, "Member 'UBP_AIGoal_Arena_Setup_C::SkipCampChance' has a wrong offset!");

}

