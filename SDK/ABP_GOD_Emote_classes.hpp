#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GOD_Emote

#include "Basic.hpp"

#include "ECharGenericStance_structs.hpp"
#include "Engine_structs.hpp"
#include "E_CombatState_structs.hpp"
#include "Hemingway_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ECharPassiveState_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GOD_Emote.ABP_GOD_Emote_C
// 0x05F0 (0x0C30 - 0x0640)
class UABP_GOD_Emote_C final : public UHWCharacter_AnimInstGod
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0640(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0648(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0650(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0658(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0680(0x0050)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x06D0(0x0130)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0800(0x0028)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0828(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0850(0x0050)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x08A0(0x0050)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x08F0(0x00F8)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x09E8(0x00F8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0AE0(0x0130)()
	double                                        Prop1Scale;                                        // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Prop2Scale;                                        // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop1Lock;                                         // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Prop2Lock;                                         // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintBeginPlay();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BPI_AN_CanTransition(bool CanTransition);
	void BPI_AN_GenericStance(ECharGenericStance Stance_State);
	void BPI_AN_JumpEnd(bool JumpEnd);
	void BPI_AN_PassiveState(ECharPassiveState PassiveState, double PassiveValue);
	void BPI_AN_PlayRate(double PlayRate);
	void BPI_AN_RunVariant(bool Variant);
	void BPI_ANS_DisablePhysics(class FName Bone_Name, bool Turn_Off);
	void BPI_ANS_DisableTurnInPlace(bool DisableTurnInPlace);
	void BPI_ANS_EmoteQuery(bool EmoteQuery);
	void BPI_ANS_ForceFullBody(bool Fullbody, double BlendOutTime);
	void BPI_ANS_HideBlueprintVFX(bool Hide);
	void BPI_ANS_PlayRate(double PlayRate, double Duration);
	void BPI_ANS_Prop01Lock(bool Lock);
	void BPI_ANS_Prop02Lock(bool Lock);
	void BPI_ANS_ScaleCharacter(double ScaleValue);
	void BPI_ANS_ScaleFromCurve(const struct FRigVMFunction_AnimRichCurve& BoneScaleCurve, class FName Bone_Name, double Scale);
	void BPI_ANS_ScaleWeapon(double ScaleValue, int32 Weapon, bool Override);
	void BPI_ANS_ShowMesh(bool Visibility);
	void BPI_ANS_StopMotionWarping(double AlphaValue);
	void BPI_ANS_ToggleBoulder(bool Visible);
	void BPI_BellonaWeaponOverride(bool Override, ECharGenericStance OverrideStance);
	void BPI_ChildMesh_Outro(bool PlayOutro);
	void BPI_CombatStance(E_CombatState CombatState_0);
	void BPI_Morrigan_Fire(bool PlayFire);
	void BPI_Morrigan_PlayIntroA(bool PlayIntro);
	void BPI_Morrigan_PlayIntroB(bool PlayIntro);
	void BPI_PelvisDirectionFromVelocity(bool UsePelvisDirection, double ALPHA);
	void BPI_TailAlpha(double AlphaValue);
	void ExecuteUbergraph_ABP_GOD_Emote(int32 EntryPoint);
	void FidgetTimer();
	void IntroMat(double DeltaTime);

	struct FGameplayTag GetSkinnedFiringMontageTag(const struct FGameplayTag& SourceIdTag, const struct FGameplayTag& OriginalFiringMontageTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GOD_Emote_C">();
	}
	static class UABP_GOD_Emote_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GOD_Emote_C>();
	}
};
static_assert(alignof(UABP_GOD_Emote_C) == 0x000010, "Wrong alignment on UABP_GOD_Emote_C");
static_assert(sizeof(UABP_GOD_Emote_C) == 0x000C30, "Wrong size on UABP_GOD_Emote_C");
static_assert(offsetof(UABP_GOD_Emote_C, UberGraphFrame) == 0x000640, "Member 'UABP_GOD_Emote_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimBlueprintExtension_PropertyAccess) == 0x000648, "Member 'UABP_GOD_Emote_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimBlueprintExtension_Base) == 0x000650, "Member 'UABP_GOD_Emote_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_Root) == 0x000658, "Member 'UABP_GOD_Emote_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_Slot_2) == 0x000680, "Member 'UABP_GOD_Emote_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_ModifyBone_1) == 0x0006D0, "Member 'UABP_GOD_Emote_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_LocalToComponentSpace) == 0x000800, "Member 'UABP_GOD_Emote_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_ComponentToLocalSpace) == 0x000828, "Member 'UABP_GOD_Emote_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_Slot_1) == 0x000850, "Member 'UABP_GOD_Emote_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_Slot) == 0x0008A0, "Member 'UABP_GOD_Emote_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_CopyBone_1) == 0x0008F0, "Member 'UABP_GOD_Emote_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_CopyBone) == 0x0009E8, "Member 'UABP_GOD_Emote_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, AnimGraphNode_ModifyBone) == 0x000AE0, "Member 'UABP_GOD_Emote_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, Prop1Scale) == 0x000C10, "Member 'UABP_GOD_Emote_C::Prop1Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, Prop2Scale) == 0x000C18, "Member 'UABP_GOD_Emote_C::Prop2Scale' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, Prop1Lock) == 0x000C20, "Member 'UABP_GOD_Emote_C::Prop1Lock' has a wrong offset!");
static_assert(offsetof(UABP_GOD_Emote_C, Prop2Lock) == 0x000C21, "Member 'UABP_GOD_Emote_C::Prop2Lock' has a wrong offset!");

}

