#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AIGoal_Play_Seige_AttackTower

#include "Basic.hpp"

#include "Hemingway_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AIGoal_Play_Seige_AttackTower.BP_AIGoal_Play_Seige_AttackTower_C
// 0x0020 (0x0108 - 0x00E8)
class UBP_AIGoal_Play_Seige_AttackTower_C final : public UHWAIGoal
{
public:
	double                                        CloseToTowerRange;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxETAToTowerForTeammates;                         // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Arrival_Distance;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttackTowerMinHealthPct;                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckPreconditionsBP(class AHWAIController* InController);
	void IsATank(const class AHWCharacter_Base* Character, bool bMustBeHealthy, bool* bIsATankAndHealthy);
	void IsPlayActorDamageable(class AActor* PlayActor, bool* bIsPlayActorDamageable);
	void IsTowerBeingTankedByOtherCharacter(class AActor* InPlayActor, class AHWCharacter_Base* InCharacter, bool* IsTankedByOtherCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AIGoal_Play_Seige_AttackTower_C">();
	}
	static class UBP_AIGoal_Play_Seige_AttackTower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AIGoal_Play_Seige_AttackTower_C>();
	}
};
static_assert(alignof(UBP_AIGoal_Play_Seige_AttackTower_C) == 0x000008, "Wrong alignment on UBP_AIGoal_Play_Seige_AttackTower_C");
static_assert(sizeof(UBP_AIGoal_Play_Seige_AttackTower_C) == 0x000108, "Wrong size on UBP_AIGoal_Play_Seige_AttackTower_C");
static_assert(offsetof(UBP_AIGoal_Play_Seige_AttackTower_C, CloseToTowerRange) == 0x0000E8, "Member 'UBP_AIGoal_Play_Seige_AttackTower_C::CloseToTowerRange' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Play_Seige_AttackTower_C, MaxETAToTowerForTeammates) == 0x0000F0, "Member 'UBP_AIGoal_Play_Seige_AttackTower_C::MaxETAToTowerForTeammates' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Play_Seige_AttackTower_C, Arrival_Distance) == 0x0000F8, "Member 'UBP_AIGoal_Play_Seige_AttackTower_C::Arrival_Distance' has a wrong offset!");
static_assert(offsetof(UBP_AIGoal_Play_Seige_AttackTower_C, AttackTowerMinHealthPct) == 0x000100, "Member 'UBP_AIGoal_Play_Seige_AttackTower_C::AttackTowerMinHealthPct' has a wrong offset!");

}

