#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GOD_Lobby

#include "Basic.hpp"

#include "ECharGenericStance_structs.hpp"
#include "Engine_structs.hpp"
#include "RigVM_structs.hpp"
#include "ECharPassiveState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_CombatState_structs.hpp"


namespace SDK::Params
{

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_GOD_Lobby_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_AnimGraph");
static_assert(sizeof(ABP_GOD_Lobby_C_AnimGraph) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_AnimGraph");
static_assert(offsetof(ABP_GOD_Lobby_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_GOD_Lobby_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BlinkInit
// 0x0020 (0x0020 - 0x0000)
struct ABP_GOD_Lobby_C_BlinkInit final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_GOD_Lobby_C_BlinkInit) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BlinkInit");
static_assert(sizeof(ABP_GOD_Lobby_C_BlinkInit) == 0x000020, "Wrong size on ABP_GOD_Lobby_C_BlinkInit");
static_assert(offsetof(ABP_GOD_Lobby_C_BlinkInit, Context) == 0x000000, "Member 'ABP_GOD_Lobby_C_BlinkInit::Context' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BlinkInit, Node) == 0x000010, "Member 'ABP_GOD_Lobby_C_BlinkInit::Node' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BlueprintThreadSafeUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong size on ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_GOD_Lobby_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_GOD_Lobby_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_GOD_Lobby_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_GOD_Lobby_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_GOD_Lobby_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_GOD_Lobby_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_CanTransition
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_CanTransition final
{
public:
	bool                                          CanTransition;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_CanTransition) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_CanTransition");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_CanTransition) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_CanTransition");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_CanTransition, CanTransition) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_CanTransition::CanTransition' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_GenericStance
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_GenericStance final
{
public:
	ECharGenericStance                            Stance_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_GenericStance) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_GenericStance");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_GenericStance) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_GenericStance");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_GenericStance, Stance_State) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_GenericStance::Stance_State' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_JumpEnd
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_JumpEnd final
{
public:
	bool                                          JumpEnd;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_JumpEnd) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_JumpEnd");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_JumpEnd) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_JumpEnd");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_JumpEnd, JumpEnd) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_JumpEnd::JumpEnd' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_PassiveState
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_PassiveState final
{
public:
	ECharPassiveState                             PassiveState;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PassiveValue;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_PassiveState) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_PassiveState");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_PassiveState) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_PassiveState");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_PassiveState, PassiveState) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_PassiveState::PassiveState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_PassiveState, PassiveValue) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_AN_PassiveState::PassiveValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_PlayRate
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_PlayRate) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_PlayRate");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_PlayRate) == 0x000008, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_PlayRate");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_PlayRate, PlayRate) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_PlayRate::PlayRate' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_AN_RunVariant
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_AN_RunVariant final
{
public:
	bool                                          Variant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_AN_RunVariant) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_AN_RunVariant");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_AN_RunVariant) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_AN_RunVariant");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_AN_RunVariant, Variant) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_AN_RunVariant::Variant' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_DisablePhysics
// 0x000C (0x000C - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics final
{
public:
	class FName                                   Bone_Name;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Turn_Off;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics) == 0x000004, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics) == 0x00000C, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics, Bone_Name) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics::Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics, Turn_Off) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_ANS_DisablePhysics::Turn_Off' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_DisableTurnInPlace
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace final
{
public:
	bool                                          DisableTurnInPlace;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace, DisableTurnInPlace) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_DisableTurnInPlace::DisableTurnInPlace' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_EmoteQuery
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery final
{
public:
	bool                                          EmoteQuery;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery, EmoteQuery) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_EmoteQuery::EmoteQuery' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ForceFullBody
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody final
{
public:
	bool                                          Fullbody;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlendOutTime;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody, Fullbody) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody::Fullbody' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody, BlendOutTime) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ForceFullBody::BlendOutTime' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_HideBlueprintVFX
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX, Hide) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_HideBlueprintVFX::Hide' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_PlayRate
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_PlayRate final
{
public:
	double                                        PlayRate;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Duration;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_PlayRate) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_PlayRate");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_PlayRate) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_PlayRate");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_PlayRate, PlayRate) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_PlayRate::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_PlayRate, Duration) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_ANS_PlayRate::Duration' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_Prop01Lock
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock, Lock) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_Prop01Lock::Lock' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_Prop02Lock
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock, Lock) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_Prop02Lock::Lock' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ScaleCharacter
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter) == 0x000008, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter, ScaleValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleCharacter::ScaleValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ScaleFromCurve
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve final
{
public:
	struct FRigVMFunction_AnimRichCurve           BoneScaleCurve;                                    // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   Bone_Name;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve) == 0x0000A0, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve, BoneScaleCurve) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve::BoneScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve, Bone_Name) == 0x000090, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve::Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve, Scale) == 0x000098, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleFromCurve::Scale' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ScaleWeapon
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon final
{
public:
	double                                        ScaleValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weapon;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override;                                          // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon, ScaleValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon::ScaleValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon, Weapon) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon, Override) == 0x00000C, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ScaleWeapon::Override' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ShowMesh
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ShowMesh final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ShowMesh");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ShowMesh) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ShowMesh");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ShowMesh, Visibility) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ShowMesh::Visibility' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_StopMotionWarping
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping) == 0x000008, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping, AlphaValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_StopMotionWarping::AlphaValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ANS_ToggleBoulder
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder, Visible) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ANS_ToggleBoulder::Visible' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_BellonaWeaponOverride
// 0x0002 (0x0002 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride final
{
public:
	bool                                          Override;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            OverrideStance;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride) == 0x000002, "Wrong size on ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride, Override) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride::Override' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride, OverrideStance) == 0x000001, "Member 'ABP_GOD_Lobby_C_BPI_BellonaWeaponOverride::OverrideStance' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_ChildMesh_Outro
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_ChildMesh_Outro final
{
public:
	bool                                          PlayOutro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_ChildMesh_Outro");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_ChildMesh_Outro) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_ChildMesh_Outro");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_ChildMesh_Outro, PlayOutro) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_ChildMesh_Outro::PlayOutro' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_CombatStance
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_CombatStance final
{
public:
	E_CombatState                                 CombatState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_CombatStance) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_CombatStance");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_CombatStance) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_CombatStance");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_CombatStance, CombatState) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_CombatStance::CombatState' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_Morrigan_Fire
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_Morrigan_Fire final
{
public:
	bool                                          PlayFire;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_Morrigan_Fire) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_Morrigan_Fire");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_Morrigan_Fire) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_Morrigan_Fire");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_Morrigan_Fire, PlayFire) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_Morrigan_Fire::PlayFire' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_Morrigan_PlayIntroA
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA, PlayIntro) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroA::PlayIntro' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_Morrigan_PlayIntroB
// 0x0001 (0x0001 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB final
{
public:
	bool                                          PlayIntro;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong alignment on ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB) == 0x000001, "Wrong size on ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB, PlayIntro) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_Morrigan_PlayIntroB::PlayIntro' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_PelvisDirectionFromVelocity
// 0x0010 (0x0010 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity final
{
public:
	bool                                          UsePelvisDirection;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ALPHA;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity) == 0x000010, "Wrong size on ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity, UsePelvisDirection) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity::UsePelvisDirection' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity, ALPHA) == 0x000008, "Member 'ABP_GOD_Lobby_C_BPI_PelvisDirectionFromVelocity::ALPHA' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.BPI_TailAlpha
// 0x0008 (0x0008 - 0x0000)
struct ABP_GOD_Lobby_C_BPI_TailAlpha final
{
public:
	double                                        AlphaValue;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_BPI_TailAlpha) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_BPI_TailAlpha");
static_assert(sizeof(ABP_GOD_Lobby_C_BPI_TailAlpha) == 0x000008, "Wrong size on ABP_GOD_Lobby_C_BPI_TailAlpha");
static_assert(offsetof(ABP_GOD_Lobby_C_BPI_TailAlpha, AlphaValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_BPI_TailAlpha::AlphaValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.Delay Blink
// 0x0028 (0x0028 - 0x0000)
struct ABP_GOD_Lobby_C_Delay_Blink final
{
public:
	double                                        DelayTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_Delay_Blink) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_Delay_Blink");
static_assert(sizeof(ABP_GOD_Lobby_C_Delay_Blink) == 0x000028, "Wrong size on ABP_GOD_Lobby_C_Delay_Blink");
static_assert(offsetof(ABP_GOD_Lobby_C_Delay_Blink, DelayTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_Delay_Blink::DelayTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_Delay_Blink, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ABP_GOD_Lobby_C_Delay_Blink::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_Delay_Blink, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_Delay_Blink::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_Delay_Blink, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000020, "Member 'ABP_GOD_Lobby_C_Delay_Blink::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.ExecuteUbergraph_ABP_GOD_Lobby
// 0x03F0 (0x03F0 - 0x0000)
struct ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigVMFunction_AnimRichCurve           K2Node_Event_BoneScaleCurve;                       // 0x0008(0x0090)()
	class FName                                   K2Node_Event_Bone_Name_1;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Scale;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_Bone_Name;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Turn_Off;                             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayOutro;                            // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_UsePelvisDirection;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Alpha;                                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Override_1;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            K2Node_Event_OverrideStance;                       // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AlphaValue_1;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayFire;                             // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayIntro_1;                          // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_PlayIntro;                            // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_AlphaValue;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_JumpEnd;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible;                              // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CanTransition;                        // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_ScaleValue_1;                         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Hide;                                 // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Variant;                              // 0x00F3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue; // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharPassiveState                             K2Node_Event_PassiveState;                         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_PassiveValue;                         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_2;    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue; // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visibility;                           // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1; // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_3;    // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_UpdateSpine1_RotOut;                      // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_UpdateSpine1_ScaleOut;                    // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_UpdateSpine2_RotOut;                      // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_UpdateSpine2_ScaleOut;                    // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_UpdateNeck_RotOut;                        // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_UpdateNeck_ScaleOut;                      // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DisableTurnInPlace;                   // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x01B4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x01C4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x01D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x01E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_CombatState                                 K2Node_Event_CombatState;                          // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue_1; // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x01FC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20D[0x3];                                      // 0x020D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0210(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECharGenericStance                            K2Node_Event_Stance_State;                         // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_222[0x6];                                      // 0x0222(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0230(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0240(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0250(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x0260(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_4;         // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_4;        // 0x0280(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_5;         // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_5;        // 0x0290(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Lock_1;                               // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_ScaleValue;                           // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Weapon;                               // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Override;                             // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x02AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_FullBody;                             // 0x02AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AF[0x1];                                      // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_BlendOutTime;                         // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Lock;                                 // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Playrate;                             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Duration;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_Playrate_1;                           // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_EmoteQuery;                           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x02E4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue_6;         // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_6;        // 0x0300(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_IntroMat_DeltaTime_ImplicitCast;          // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateSkinIntro_DeltaTime_ImplicitCast;   // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateBreathWave_DeltaTime_ImplicitCast;  // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateBlink_DeltaTime_ImplicitCast;       // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateAim_DeltaTime_ImplicitCast;         // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_1;    // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_1;    // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1;  // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_2;    // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_2;    // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_3;    // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2;  // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_3;    // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_3;  // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_4;    // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_4;    // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_5;    // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_4;  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_5;    // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_5;  // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_6;  // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby");
static_assert(sizeof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby) == 0x0003F0, "Wrong size on ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, EntryPoint) == 0x000000, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_BoneScaleCurve) == 0x000008, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_BoneScaleCurve' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Bone_Name_1) == 0x000098, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Bone_Name_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Scale) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Scale' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Bone_Name) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Bone_Name' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Turn_Off) == 0x0000B0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Turn_Off' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PlayOutro) == 0x0000B1, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PlayOutro' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_UsePelvisDirection) == 0x0000B2, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_UsePelvisDirection' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Alpha) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Override_1) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Override_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_OverrideStance) == 0x0000C1, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_OverrideStance' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_AlphaValue_1) == 0x0000C8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_AlphaValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PlayFire) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PlayFire' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PlayIntro_1) == 0x0000D1, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PlayIntro_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PlayIntro) == 0x0000D2, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PlayIntro' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_AlphaValue) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_AlphaValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_JumpEnd) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_JumpEnd' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Visible) == 0x0000E1, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_CanTransition) == 0x0000E2, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_CanTransition' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_ScaleValue_1) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_ScaleValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x0000F1, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Hide) == 0x0000F2, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Hide' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Variant) == 0x0000F3, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Variant' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue) == 0x0000F4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PassiveState) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PassiveState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_PassiveValue) == 0x000100, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_PassiveValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_ReturnValue_2) == 0x000108, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue) == 0x00010C, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000110, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Visibility) == 0x000111, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Visibility' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1) == 0x000114, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_GetRelevantAnimTimeRemainingFraction_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_DeltaTimeX) == 0x000118, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_ReturnValue_3) == 0x00011C, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateSpine1_RotOut) == 0x000120, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateSpine1_RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateSpine1_ScaleOut) == 0x000138, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateSpine1_ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateSpine2_RotOut) == 0x000150, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateSpine2_RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateSpine2_ScaleOut) == 0x000168, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateSpine2_ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateNeck_RotOut) == 0x000180, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateNeck_RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateNeck_ScaleOut) == 0x000198, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateNeck_ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_DisableTurnInPlace) == 0x0001B0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_DisableTurnInPlace' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate) == 0x0001B4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001C4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_2) == 0x0001D4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_3) == 0x0001E4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_CombatState) == 0x0001F4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_CombatState' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue_1) == 0x0001F8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_GetInstanceCurrentStateElapsedTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001FC, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x00020C, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_5) == 0x000210, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_BooleanAND_ReturnValue) == 0x000220, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Stance_State) == 0x000221, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Stance_State' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue) == 0x000228, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000230, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000238, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000240, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000248, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000250, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x000258, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x000260, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Add_IntInt_ReturnValue) == 0x000268, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Add_IntInt_ReturnValue_1) == 0x00026C, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000270, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000274, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_4) == 0x000278, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_4) == 0x000280, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_5) == 0x000288, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_5) == 0x000290, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Lock_1) == 0x000298, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Lock_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_ScaleValue) == 0x0002A0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_ScaleValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Weapon) == 0x0002A8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Override) == 0x0002AC, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Override' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_SwitchInteger_CmpSuccess) == 0x0002AD, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_FullBody) == 0x0002AE, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_FullBody' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_BlendOutTime) == 0x0002B0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_BlendOutTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Lock) == 0x0002B8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Lock' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x0002BC, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0002C0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Playrate) == 0x0002C8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Playrate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Duration) == 0x0002D0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Duration' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_Playrate_1) == 0x0002D8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_Playrate_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_Event_EmoteQuery) == 0x0002E0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_Event_EmoteQuery' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, K2Node_CreateDelegate_OutputDelegate_6) == 0x0002E4, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_ReturnValue_6) == 0x0002F8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_ReturnValue_6) == 0x000300, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000308, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000310, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x000318, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_IntroMat_DeltaTime_ImplicitCast) == 0x000320, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_IntroMat_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateSkinIntro_DeltaTime_ImplicitCast) == 0x000328, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateSkinIntro_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateBreathWave_DeltaTime_ImplicitCast) == 0x000330, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateBreathWave_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateBlink_DeltaTime_ImplicitCast) == 0x000338, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateBlink_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_UpdateAim_DeltaTime_ImplicitCast) == 0x000340, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_UpdateAim_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000348, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000350, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000358, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast_1) == 0x000360, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000368, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast_1) == 0x000370, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1) == 0x000378, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast_2) == 0x000380, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast_2) == 0x000388, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast_3) == 0x000390, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2) == 0x000398, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast_3) == 0x0003A0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_3) == 0x0003A8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast_4) == 0x0003B0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast_4) == 0x0003B8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Max_ImplicitCast_5) == 0x0003C0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Max_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_4) == 0x0003C8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_RandomFloatInRange_Min_ImplicitCast_5) == 0x0003D0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_RandomFloatInRange_Min_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_5) == 0x0003D8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0003E0, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_6) == 0x0003E8, "Member 'ABP_GOD_Lobby_C_ExecuteUbergraph_ABP_GOD_Lobby::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast_6' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.EyeDart
// 0x0038 (0x0038 - 0x0000)
struct ABP_GOD_Lobby_C_EyeDart final
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Random;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVectorArrayMultiple_isEmpty;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_EyeDart) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_EyeDart");
static_assert(sizeof(ABP_GOD_Lobby_C_EyeDart) == 0x000038, "Wrong size on ABP_GOD_Lobby_C_EyeDart");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, Array) == 0x000000, "Member 'ABP_GOD_Lobby_C_EyeDart::Array' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, Random) == 0x000010, "Member 'ABP_GOD_Lobby_C_EyeDart::Random' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00001C, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_IsVectorArrayMultiple_isEmpty) == 0x000021, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_IsVectorArrayMultiple_isEmpty' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000022, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000023, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000028, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_EyeDart, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x000030, "Member 'ABP_GOD_Lobby_C_EyeDart::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.GetAllSkeletalMeshes
// 0x0058 (0x0058 - 0x0000)
struct ABP_GOD_Lobby_C_GetAllSkeletalMeshes final
{
public:
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AHWSkinnablePreviewActor*               K2Node_DynamicCast_AsHWSkinnable_Preview_Actor;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_GetChildComponent_ReturnValue;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkinnableSkeletalMeshComponent*        K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component; // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_K2_GetRootComponent_ReturnValue_1;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumChildrenComponents_ReturnValue;     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_GetAllSkeletalMeshes");
static_assert(sizeof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes) == 0x000058, "Wrong size on ABP_GOD_Lobby_C_GetAllSkeletalMeshes");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_GetOwningActor_ReturnValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_K2_GetRootComponent_ReturnValue) == 0x000008, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_K2_GetRootComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, K2Node_DynamicCast_AsHWSkinnable_Preview_Actor) == 0x000010, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::K2Node_DynamicCast_AsHWSkinnable_Preview_Actor' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, Temp_int_Variable) == 0x00001C, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_GetChildComponent_ReturnValue) == 0x000020, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_GetChildComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component) == 0x000028, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::K2Node_DynamicCast_AsSkinnable_Skeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_K2_GetRootComponent_ReturnValue_1) == 0x000038, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_K2_GetRootComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_GetNumChildrenComponents_ReturnValue) == 0x000040, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_GetNumChildrenComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000048, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAllSkeletalMeshes, CallFunc_Array_Add_ReturnValue_1) == 0x000050, "Member 'ABP_GOD_Lobby_C_GetAllSkeletalMeshes::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.GetAnimBlinkTimerStarted
// 0x0020 (0x0020 - 0x0000)
struct ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted");
static_assert(sizeof(ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted) == 0x000020, "Wrong size on ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted, Context) == 0x000000, "Member 'ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted::Context' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted, Node) == 0x000010, "Member 'ABP_GOD_Lobby_C_GetAnimBlinkTimerStarted::Node' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.IdleEntry
// 0x0020 (0x0020 - 0x0000)
struct ABP_GOD_Lobby_C_IdleEntry final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(ABP_GOD_Lobby_C_IdleEntry) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_IdleEntry");
static_assert(sizeof(ABP_GOD_Lobby_C_IdleEntry) == 0x000020, "Wrong size on ABP_GOD_Lobby_C_IdleEntry");
static_assert(offsetof(ABP_GOD_Lobby_C_IdleEntry, Context) == 0x000000, "Member 'ABP_GOD_Lobby_C_IdleEntry::Context' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IdleEntry, Node) == 0x000010, "Member 'ABP_GOD_Lobby_C_IdleEntry::Node' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.IntroMat
// 0x01C0 (0x01C0 - 0x0000)
struct ABP_GOD_Lobby_C_IntroMat final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFXSystemSpawnParameters               K2Node_MakeStruct_FXSystemSpawnParameters;         // 0x0070(0x0070)(NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttachedWithParams_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_2;                         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item_3;                         // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11D[0x3];                                      // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_Array_Get_Item_4;                         // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFXSystemSpawnParameters               K2Node_MakeStruct_FXSystemSpawnParameters_1;       // 0x0128(0x0070)(NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttachedWithParams_ReturnValue_1; // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x01B8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_IntroMat) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_IntroMat");
static_assert(sizeof(ABP_GOD_Lobby_C_IntroMat) == 0x0001C0, "Wrong size on ABP_GOD_Lobby_C_IntroMat");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_IntroMat::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Variable) == 0x000008, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Variable_1) == 0x00001C, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000030, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Variable_2) == 0x000034, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Array_Index_Variable) == 0x000038, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_IntInt_ReturnValue_2) == 0x00003C, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_IntInt_ReturnValue_3) == 0x000044, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Get_Item) == 0x000050, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'ABP_GOD_Lobby_C_IntroMat::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, K2Node_MakeStruct_FXSystemSpawnParameters) == 0x000070, "Member 'ABP_GOD_Lobby_C_IntroMat::K2Node_MakeStruct_FXSystemSpawnParameters' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_SpawnSystemAttachedWithParams_ReturnValue) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_SpawnSystemAttachedWithParams_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Length_ReturnValue_1) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F4, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Get_Item_2) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, K2Node_SwitchEnum_CmpSuccess) == 0x000100, "Member 'ABP_GOD_Lobby_C_IntroMat::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Length_ReturnValue_2) == 0x000104, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_IntInt_ReturnValue_2) == 0x000108, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Get_Item_3) == 0x000110, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Length_ReturnValue_3) == 0x000118, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_IntInt_ReturnValue_3) == 0x00011C, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Get_Item_4) == 0x000120, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, K2Node_MakeStruct_FXSystemSpawnParameters_1) == 0x000128, "Member 'ABP_GOD_Lobby_C_IntroMat::K2Node_MakeStruct_FXSystemSpawnParameters_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Array_Length_ReturnValue_4) == 0x000198, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_SpawnSystemAttachedWithParams_ReturnValue_1) == 0x0001A0, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_SpawnSystemAttachedWithParams_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Less_IntInt_ReturnValue_4) == 0x0001A8, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001B0, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IntroMat, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x0001B8, "Member 'ABP_GOD_Lobby_C_IntroMat::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.IsVectorArrayMultiple
// 0x0020 (0x0020 - 0x0000)
struct ABP_GOD_Lobby_C_IsVectorArrayMultiple final
{
public:
	TArray<struct FVector>                        Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsEmpty;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_IsVectorArrayMultiple) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_IsVectorArrayMultiple");
static_assert(sizeof(ABP_GOD_Lobby_C_IsVectorArrayMultiple) == 0x000020, "Wrong size on ABP_GOD_Lobby_C_IsVectorArrayMultiple");
static_assert(offsetof(ABP_GOD_Lobby_C_IsVectorArrayMultiple, Array) == 0x000000, "Member 'ABP_GOD_Lobby_C_IsVectorArrayMultiple::Array' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IsVectorArrayMultiple, IsEmpty) == 0x000010, "Member 'ABP_GOD_Lobby_C_IsVectorArrayMultiple::IsEmpty' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IsVectorArrayMultiple, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'ABP_GOD_Lobby_C_IsVectorArrayMultiple::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_IsVectorArrayMultiple, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_IsVectorArrayMultiple::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.NewAim
// 0x0150 (0x0150 - 0x0000)
struct ABP_GOD_Lobby_C_NewAim final
{
public:
	double                                        YawIn;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchIn;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RandomV2;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        randomPitchDiff;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        randomYawDiff;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InPitch;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        inYaw;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetAbs_ReturnValue;                // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Max_ImplicitCast;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast_1;    // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Max_ImplicitCast_1;    // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast_1;    // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast_1;    // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_NewAim) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_NewAim");
static_assert(sizeof(ABP_GOD_Lobby_C_NewAim) == 0x000150, "Wrong size on ABP_GOD_Lobby_C_NewAim");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, YawIn) == 0x000000, "Member 'ABP_GOD_Lobby_C_NewAim::YawIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, PitchIn) == 0x000008, "Member 'ABP_GOD_Lobby_C_NewAim::PitchIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, Yaw) == 0x000010, "Member 'ABP_GOD_Lobby_C_NewAim::Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, Pitch) == 0x000018, "Member 'ABP_GOD_Lobby_C_NewAim::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, RandomV2) == 0x000020, "Member 'ABP_GOD_Lobby_C_NewAim::RandomV2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, randomPitchDiff) == 0x000038, "Member 'ABP_GOD_Lobby_C_NewAim::randomPitchDiff' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, randomYawDiff) == 0x000040, "Member 'ABP_GOD_Lobby_C_NewAim::randomYawDiff' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, InPitch) == 0x000048, "Member 'ABP_GOD_Lobby_C_NewAim::InPitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, inYaw) == 0x000050, "Member 'ABP_GOD_Lobby_C_NewAim::inYaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, Index_0) == 0x000058, "Member 'ABP_GOD_Lobby_C_NewAim::Index_0' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_ReturnValue) == 0x000060, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000068, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_X) == 0x000088, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_Y) == 0x000090, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_Z) == 0x000098, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x0000A1, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, Temp_int_Variable) == 0x0000A4, "Member 'ABP_GOD_Lobby_C_NewAim::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_MakeVector_ReturnValue_1) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_Vector_GetAbs_ReturnValue) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_Vector_GetAbs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_X_1) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_Y_1) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_BreakVector_Z_1) == 0x000100, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_Greater_IntInt_ReturnValue) == 0x000108, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_Add_IntInt_ReturnValue) == 0x00010C, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_Max_ImplicitCast) == 0x000110, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_Min_ImplicitCast) == 0x000118, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_Min_ImplicitCast_1) == 0x000120, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_InRange_FloatFloat_Max_ImplicitCast_1) == 0x000128, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_InRange_FloatFloat_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000130, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000138, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_Max_ImplicitCast_1) == 0x000140, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewAim, CallFunc_RandomFloatInRange_Min_ImplicitCast_1) == 0x000148, "Member 'ABP_GOD_Lobby_C_NewAim::CallFunc_RandomFloatInRange_Min_ImplicitCast_1' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.NewFidget
// 0x0088 (0x0088 - 0x0000)
struct ABP_GOD_Lobby_C_NewFidget final
{
public:
	bool                                          canShuffle;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Index_0;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Random;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Random_OutItem;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_NewFidget) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_NewFidget");
static_assert(sizeof(ABP_GOD_Lobby_C_NewFidget) == 0x000088, "Wrong size on ABP_GOD_Lobby_C_NewFidget");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, canShuffle) == 0x000000, "Member 'ABP_GOD_Lobby_C_NewFidget::canShuffle' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, Index_0) == 0x000004, "Member 'ABP_GOD_Lobby_C_NewFidget::Index_0' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, Random) == 0x000008, "Member 'ABP_GOD_Lobby_C_NewFidget::Random' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_RandomIntegerInRange_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x000018, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_RandomFloatInRange_ReturnValue) == 0x000020, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_Random_OutItem) == 0x00002C, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_Random_OutIndex) == 0x000030, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'ABP_GOD_Lobby_C_NewFidget::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Add_IntInt_ReturnValue_2) == 0x000038, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000040, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_IsEmpty_ReturnValue) == 0x000041, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000048, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, K2Node_CreateDelegate_OutputDelegate) == 0x00004C, "Member 'ABP_GOD_Lobby_C_NewFidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000060, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, Temp_int_Variable) == 0x000068, "Member 'ABP_GOD_Lobby_C_NewFidget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_Array_RemoveItem_ReturnValue) == 0x00006C, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000070, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000078, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_NewFidget, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000080, "Member 'ABP_GOD_Lobby_C_NewFidget::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.SetWeaponScaleFromCurve
// 0x0028 (0x0028 - 0x0000)
struct ABP_GOD_Lobby_C_SetWeaponScaleFromCurve final
{
public:
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue;        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue;     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValueWithDefault_OutValue_1;      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurveValueWithDefault_ReturnValue_1;   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_WeaponScale_Prop2_ImplicitCast; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_WeaponScale_Prop1_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_SetWeaponScaleFromCurve");
static_assert(sizeof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve) == 0x000028, "Wrong size on ABP_GOD_Lobby_C_SetWeaponScaleFromCurve");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000001, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_GetCurveValueWithDefault_OutValue) == 0x000004, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_GetCurveValueWithDefault_OutValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_GetCurveValueWithDefault_ReturnValue) == 0x000008, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_GetCurveValueWithDefault_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_GetCurveValueWithDefault_OutValue_1) == 0x00000C, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_GetCurveValueWithDefault_OutValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_GetCurveValueWithDefault_ReturnValue_1) == 0x000010, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_GetCurveValueWithDefault_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, CallFunc_BooleanOR_ReturnValue) == 0x000011, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, K2Node_VariableSet_WeaponScale_Prop2_ImplicitCast) == 0x000018, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::K2Node_VariableSet_WeaponScale_Prop2_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_SetWeaponScaleFromCurve, K2Node_VariableSet_WeaponScale_Prop1_ImplicitCast) == 0x000020, "Member 'ABP_GOD_Lobby_C_SetWeaponScaleFromCurve::K2Node_VariableSet_WeaponScale_Prop1_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateAim
// 0x0088 (0x0088 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateAim final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        cacheYaw;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        cachePitch;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         loopCounter;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NewAim_Yaw;                               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NewAim_Pitch;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue_1;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AimPitch_ImplicitCast;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Min_ImplicitCast;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast_1;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_AimYaw_ImplicitCast;            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateAim) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateAim");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateAim) == 0x000088, "Wrong size on ABP_GOD_Lobby_C_UpdateAim");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateAim::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, cacheYaw) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateAim::cacheYaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, cachePitch) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateAim::cachePitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, loopCounter) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateAim::loopCounter' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_NewAim_Yaw) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_NewAim_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_NewAim_Pitch) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_NewAim_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_FInterpTo_ReturnValue) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_RandomFloatInRange_ReturnValue) == 0x000038, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_FInterpTo_ReturnValue_1) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, K2Node_VariableSet_AimPitch_ImplicitCast) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateAim::K2Node_VariableSet_AimPitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_RandomFloatInRange_Min_ImplicitCast) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_RandomFloatInRange_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, CallFunc_FInterpTo_Current_ImplicitCast_1) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateAim::CallFunc_FInterpTo_Current_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateAim, K2Node_VariableSet_AimYaw_ImplicitCast) == 0x000080, "Member 'ABP_GOD_Lobby_C_UpdateAim::K2Node_VariableSet_AimYaw_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateBlink
// 0x0070 (0x0070 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateBlink final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateBlink) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateBlink");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateBlink) == 0x000070, "Wrong size on ABP_GOD_Lobby_C_UpdateBlink");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateBlink::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_GetFloatValue_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_MakeRotator_ReturnValue) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_GetTimeRange_MinTime) == 0x000038, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_GetTimeRange_MaxTime) == 0x00003C, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBlink, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateBlink::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateBreathWave
// 0x0030 (0x0030 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateBreathWave final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateBreathWave) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateBreathWave");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateBreathWave) == 0x000030, "Wrong size on ABP_GOD_Lobby_C_UpdateBreathWave");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_GetTimeRange_MinTime) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_GetTimeRange_MaxTime) == 0x00000C, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_GetFloatValue_ReturnValue) == 0x000014, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateBreathWave, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateBreathWave::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateGetEyeRot
// 0x0180 (0x0180 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateGetEyeRot final
{
public:
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue_1;           // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_RotatorToString_ReturnValue;         // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_RotatorToString_ReturnValue_1;       // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateGetEyeRot) == 0x000010, "Wrong alignment on ABP_GOD_Lobby_C_UpdateGetEyeRot");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateGetEyeRot) == 0x000180, "Wrong size on ABP_GOD_Lobby_C_UpdateGetEyeRot");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_GetOwningComponent_ReturnValue) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_GetBoneTransform_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_GetBoneTransform_ReturnValue_1) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_GetBoneTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Location_1) == 0x000118, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Rotation_1) == 0x000130, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_BreakTransform_Scale_1) == 0x000148, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_Conv_RotatorToString_ReturnValue) == 0x000160, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_Conv_RotatorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateGetEyeRot, CallFunc_Conv_RotatorToString_ReturnValue_1) == 0x000170, "Member 'ABP_GOD_Lobby_C_UpdateGetEyeRot::CallFunc_Conv_RotatorToString_ReturnValue_1' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateHead
// 0x0080 (0x0080 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateHead final
{
public:
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateHead) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateHead");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateHead) == 0x000080, "Wrong size on ABP_GOD_Lobby_C_UpdateHead");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_BreakRotator_Roll) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_BreakRotator_Pitch) == 0x000004, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_BreakRotator_Yaw) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00006C, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateHead, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateHead::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateL_Clavicle
// 0x0080 (0x0080 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateL_Clavicle final
{
public:
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateL_Clavicle) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateL_Clavicle");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateL_Clavicle) == 0x000080, "Wrong size on ABP_GOD_Lobby_C_UpdateL_Clavicle");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_BreakRotator_Roll) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_BreakRotator_Pitch) == 0x000004, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_BreakRotator_Yaw) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00006C, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateL_Clavicle, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateL_Clavicle::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateNeck
// 0x01B8 (0x01B8 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateNeck final
{
public:
	struct FRotator                               RotIn;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleIn;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotOut;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleOut;                                          // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_4;            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_ReturnValue_5;            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_3;     // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_4;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_5;     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateNeck) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateNeck");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateNeck) == 0x0001B8, "Wrong size on ABP_GOD_Lobby_C_UpdateNeck");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, RotIn) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateNeck::RotIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, ScaleIn) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateNeck::ScaleIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, RotOut) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateNeck::RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, ScaleOut) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateNeck::ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_X) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_Y) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_Z) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_SafeDivide_ReturnValue) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_SafeDivide_ReturnValue_1) == 0x000080, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_SafeDivide_ReturnValue_2) == 0x000088, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_Y_1) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_BreakVector_Z_1) == 0x0000B0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000C8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue_4) == 0x000100, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeRotator_ReturnValue) == 0x000108, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_ReturnValue_5) == 0x000120, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000128, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeVector_ReturnValue) == 0x000130, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeVector_ReturnValue_1) == 0x000148, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000160, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000168, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000170, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000178, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000180, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000188, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000190, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast_3) == 0x000198, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast_4) == 0x0001A0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001A8, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0001AC, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeck, CallFunc_MapRangeClamped_Value_ImplicitCast_5) == 0x0001B0, "Member 'ABP_GOD_Lobby_C_UpdateNeck::CallFunc_MapRangeClamped_Value_ImplicitCast_5' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateNeckChildren
// 0x00F8 (0x00F8 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateNeckChildren final
{
public:
	struct FRotator                               RotIn;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleIn;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateNeckChildren) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateNeckChildren");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateNeckChildren) == 0x0000F8, "Wrong size on ABP_GOD_Lobby_C_UpdateNeckChildren");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, RotIn) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::RotIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, ScaleIn) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::ScaleIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakVector_X) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakVector_Y) == 0x000038, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakVector_Z) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakRotator_Roll) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakRotator_Pitch) == 0x00004C, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_BreakRotator_Yaw) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_SafeDivide_ReturnValue) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_SafeDivide_ReturnValue_1) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_SafeDivide_ReturnValue_2) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MakeVector_ReturnValue) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_ReturnValue) == 0x000088, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000090, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000098, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x0000C8, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNeckChildren, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0000F4, "Member 'ABP_GOD_Lobby_C_UpdateNeckChildren::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateNWings_temp
// 0x0120 (0x0120 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateNWings_temp final
{
public:
	struct FRotator                               RotIn;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleIn;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotOut;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleOut;                                          // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateNWings_temp) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateNWings_temp");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateNWings_temp) == 0x000120, "Wrong size on ABP_GOD_Lobby_C_UpdateNWings_temp");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, RotIn) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::RotIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, ScaleIn) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::ScaleIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, RotOut) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, ScaleOut) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_BreakVector_X) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_BreakVector_Y) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_BreakVector_Z) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_SafeDivide_ReturnValue) == 0x000080, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_SafeDivide_ReturnValue_1) == 0x000088, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_SafeDivide_ReturnValue_2) == 0x000090, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000B0, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000C8, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MakeVector_ReturnValue_1) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000108, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000110, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateNWings_temp, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000118, "Member 'ABP_GOD_Lobby_C_UpdateNWings_temp::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateR_Clavicle
// 0x0080 (0x0080 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateR_Clavicle final
{
public:
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateR_Clavicle) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateR_Clavicle");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateR_Clavicle) == 0x000080, "Wrong size on ABP_GOD_Lobby_C_UpdateR_Clavicle");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_BreakRotator_Roll) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_BreakRotator_Pitch) == 0x000004, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_BreakRotator_Yaw) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MakeRotator_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00006C, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateR_Clavicle, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateR_Clavicle::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateSkinIntro
// 0x0030 (0x0030 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateSkinIntro final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                cacheWorldLocation;                                // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateSkinIntro) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateSkinIntro");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateSkinIntro) == 0x000030, "Wrong size on ABP_GOD_Lobby_C_UpdateSkinIntro");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSkinIntro, DeltaTime) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateSkinIntro::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSkinIntro, cacheWorldLocation) == 0x000008, "Member 'ABP_GOD_Lobby_C_UpdateSkinIntro::cacheWorldLocation' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSkinIntro, Curve) == 0x000020, "Member 'ABP_GOD_Lobby_C_UpdateSkinIntro::Curve' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSkinIntro, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000028, "Member 'ABP_GOD_Lobby_C_UpdateSkinIntro::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateSpine1
// 0x0128 (0x0128 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateSpine1 final
{
public:
	struct FRotator                               RotOut;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleOut;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_4;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_5;            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_3;     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_4;     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_5;     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateSpine1) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateSpine1");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateSpine1) == 0x000128, "Wrong size on ABP_GOD_Lobby_C_UpdateSpine1");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, RotOut) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, ScaleOut) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakRotator_Roll) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakRotator_Pitch) == 0x000034, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakRotator_Yaw) == 0x000038, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue) == 0x000040, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000050, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MakeRotator_ReturnValue) == 0x000058, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakVector_X) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakVector_Y) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_BreakVector_Z) == 0x000080, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000088, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue_3) == 0x000098, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue_4) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_ReturnValue_5) == 0x0000B0, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MakeVector_ReturnValue) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast_3) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast_4) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000100, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000108, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MapRangeClamped_Value_ImplicitCast_5) == 0x000110, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MapRangeClamped_Value_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000118, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x00011C, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine1, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000120, "Member 'ABP_GOD_Lobby_C_UpdateSpine1::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.UpdateSpine2
// 0x01B8 (0x01B8 - 0x0000)
struct ABP_GOD_Lobby_C_UpdateSpine2 final
{
public:
	struct FRotator                               RotIn;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleIn;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotOut;                                            // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                ScaleOut;                                          // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue;                   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_1;                 // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SafeDivide_ReturnValue_2;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_4;            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_MapRangeClamped_ReturnValue_5;            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_1;     // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast;   // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_2;     // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_3;     // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_4;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast_5;     // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_UpdateSpine2) == 0x000008, "Wrong alignment on ABP_GOD_Lobby_C_UpdateSpine2");
static_assert(sizeof(ABP_GOD_Lobby_C_UpdateSpine2) == 0x0001B8, "Wrong size on ABP_GOD_Lobby_C_UpdateSpine2");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, RotIn) == 0x000000, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::RotIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, ScaleIn) == 0x000018, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::ScaleIn' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, RotOut) == 0x000030, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::RotOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, ScaleOut) == 0x000048, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::ScaleOut' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_X) == 0x000060, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_Y) == 0x000068, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_Z) == 0x000070, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_SafeDivide_ReturnValue) == 0x000078, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_SafeDivide_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_SafeDivide_ReturnValue_1) == 0x000080, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_SafeDivide_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_SafeDivide_ReturnValue_2) == 0x000088, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_SafeDivide_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakRotator_Roll) == 0x000090, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakRotator_Pitch) == 0x000094, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakRotator_Yaw) == 0x000098, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_X_1) == 0x0000A0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_Y_1) == 0x0000A8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_BreakVector_Z_1) == 0x0000B0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue) == 0x0000C0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000C8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000D0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000D8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000E0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000E8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000F0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0000F8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue_4) == 0x000100, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeRotator_ReturnValue) == 0x000108, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_ReturnValue_5) == 0x000120, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000128, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeVector_ReturnValue) == 0x000130, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeVector_ReturnValue_1) == 0x000148, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000160, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast_1) == 0x000168, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast) == 0x000170, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1) == 0x000178, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2) == 0x000180, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_OutRangeB_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast_2) == 0x000188, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000190, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast_3) == 0x000198, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast_4) == 0x0001A0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001A8, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x0001AC, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_UpdateSpine2, CallFunc_MapRangeClamped_Value_ImplicitCast_5) == 0x0001B0, "Member 'ABP_GOD_Lobby_C_UpdateSpine2::CallFunc_MapRangeClamped_Value_ImplicitCast_5' has a wrong offset!");

// Function ABP_GOD_Lobby.ABP_GOD_Lobby_C.GetSkinnedFiringMontageTag
// 0x0018 (0x0018 - 0x0000)
struct ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag final
{
public:
	struct FGameplayTag                           SourceIdTag;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           OriginalFiringMontageTag;                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag) == 0x000004, "Wrong alignment on ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag");
static_assert(sizeof(ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag) == 0x000018, "Wrong size on ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag");
static_assert(offsetof(ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag, SourceIdTag) == 0x000000, "Member 'ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag::SourceIdTag' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag, OriginalFiringMontageTag) == 0x000008, "Member 'ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag::OriginalFiringMontageTag' has a wrong offset!");
static_assert(offsetof(ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag, ReturnValue) == 0x000010, "Member 'ABP_GOD_Lobby_C_GetSkinnedFiringMontageTag::ReturnValue' has a wrong offset!");

}

