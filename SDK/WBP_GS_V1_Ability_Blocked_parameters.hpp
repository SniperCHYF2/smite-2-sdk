#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GS_V1_Ability_Blocked

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.BlockedChanged
// 0x0010 (0x0010 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_BlockedChanged final
{
public:
	struct FGameplayTag                           OldBlockedReason;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           NewBlockedReason;                                  // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_BlockedChanged) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_BlockedChanged");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_BlockedChanged) == 0x000010, "Wrong size on WBP_GS_V1_Ability_Blocked_C_BlockedChanged");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_BlockedChanged, OldBlockedReason) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_BlockedChanged::OldBlockedReason' has a wrong offset!");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_BlockedChanged, NewBlockedReason) == 0x000008, "Member 'WBP_GS_V1_Ability_Blocked_C_BlockedChanged::NewBlockedReason' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.BlockedFinished
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_BlockedFinished final
{
public:
	struct FGameplayTag                           OldBlockedReason;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_BlockedFinished) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_BlockedFinished");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_BlockedFinished) == 0x000008, "Wrong size on WBP_GS_V1_Ability_Blocked_C_BlockedFinished");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_BlockedFinished, OldBlockedReason) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_BlockedFinished::OldBlockedReason' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.BlockedStarted
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_BlockedStarted final
{
public:
	struct FGameplayTag                           BlockedReason;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_BlockedStarted) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_BlockedStarted");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_BlockedStarted) == 0x000008, "Wrong size on WBP_GS_V1_Ability_Blocked_C_BlockedStarted");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_BlockedStarted, BlockedReason) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_BlockedStarted::BlockedReason' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.ExecuteUbergraph_WBP_GS_V1_Ability_Blocked
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked) == 0x000008, "Wrong size on WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked, EntryPoint) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_GS_V1_Ability_Blocked_C_ExecuteUbergraph_WBP_GS_V1_Ability_Blocked::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.PlayBlockAnimation
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation final
{
public:
	struct FGameplayTag                           BlockedReason;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation) == 0x000008, "Wrong size on WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation, BlockedReason) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_PlayBlockAnimation::BlockedReason' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_PreConstruct");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_PreConstruct) == 0x000001, "Wrong size on WBP_GS_V1_Ability_Blocked_C_PreConstruct");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_GS_V1_Ability_Blocked.WBP_GS_V1_Ability_Blocked_C.SetBlockLayout
// 0x0008 (0x0008 - 0x0000)
struct WBP_GS_V1_Ability_Blocked_C_SetBlockLayout final
{
public:
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GS_V1_Ability_Blocked_C_SetBlockLayout) == 0x000004, "Wrong alignment on WBP_GS_V1_Ability_Blocked_C_SetBlockLayout");
static_assert(sizeof(WBP_GS_V1_Ability_Blocked_C_SetBlockLayout) == 0x000008, "Wrong size on WBP_GS_V1_Ability_Blocked_C_SetBlockLayout");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_SetBlockLayout, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000000, "Member 'WBP_GS_V1_Ability_Blocked_C_SetBlockLayout::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_GS_V1_Ability_Blocked_C_SetBlockLayout, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000004, "Member 'WBP_GS_V1_Ability_Blocked_C_SetBlockLayout::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

}

