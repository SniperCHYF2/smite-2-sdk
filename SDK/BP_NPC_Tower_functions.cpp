#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPC_Tower

#include "Basic.hpp"

#include "BP_NPC_Tower_classes.hpp"
#include "BP_NPC_Tower_parameters.hpp"


namespace SDK
{

// Function BP_NPC_Tower.BP_NPC_Tower_C.ApplyAncientFuryDebuff
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::ApplyAncientFuryDebuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "ApplyAncientFuryDebuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.BindRivalTowerEvents
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::BindRivalTowerEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "BindRivalTowerEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.Destroy Tower Component
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::Destroy_Tower_Component()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "Destroy Tower Component");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.DistributeDestructionStageReward
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DamageEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_NPC_Tower_C::DistributeDestructionStageReward(const struct FDamageEventData& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "DistributeDestructionStageReward");

	Params::BP_NPC_Tower_C_DistributeDestructionStageReward Parms{};

	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.EndAbilityCalled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::EndAbilityCalled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "EndAbilityCalled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.ExecuteUbergraph_BP_NPC_Tower
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::ExecuteUbergraph_BP_NPC_Tower(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "ExecuteUbergraph_BP_NPC_Tower");

	Params::BP_NPC_Tower_C_ExecuteUbergraph_BP_NPC_Tower Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.Get Bastion Attach Points
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USceneComponent*>*         Component                                              (Parm, OutParm, ContainsInstancedReference)

void ABP_NPC_Tower_C::Get_Bastion_Attach_Points(TArray<class USceneComponent*>* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "Get Bastion Attach Points");

	Params::BP_NPC_Tower_C_Get_Bastion_Attach_Points Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = std::move(Parms.Component);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetClosestEnemyGodWithinRadius
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          ClosestGod                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::GetClosestEnemyGodWithinRadius(class AActor** ClosestGod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetClosestEnemyGodWithinRadius");

	Params::BP_NPC_Tower_C_GetClosestEnemyGodWithinRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ClosestGod != nullptr)
		*ClosestGod = Parms.ClosestGod;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetLeashCapsule
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent**             LeashComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::GetLeashCapsule(class UPrimitiveComponent** LeashComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetLeashCapsule");

	Params::BP_NPC_Tower_C_GetLeashCapsule Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LeashComponent != nullptr)
		*LeashComponent = Parms.LeashComponent;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetLeashRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 LeashRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::GetLeashRadius(double* LeashRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetLeashRadius");

	Params::BP_NPC_Tower_C_GetLeashRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LeashRadius != nullptr)
		*LeashRadius = Parms.LeashRadius;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetLeashVolume
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class ATriggerVolume>*   LeashVolume                                            (Parm, OutParm, HasGetValueTypeHash)

void ABP_NPC_Tower_C::GetLeashVolume(TSoftObjectPtr<class ATriggerVolume>* LeashVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetLeashVolume");

	Params::BP_NPC_Tower_C_GetLeashVolume Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LeashVolume != nullptr)
		*LeashVolume = Parms.LeashVolume;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetLocToRightOrLeftOfInstigator
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bRight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InstigatorLoc                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MinDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_NPC_Tower_C::GetLocToRightOrLeftOfInstigator(bool bRight, const struct FVector& InstigatorLoc, double MinDistance, double MaxDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetLocToRightOrLeftOfInstigator");

	Params::BP_NPC_Tower_C_GetLocToRightOrLeftOfInstigator Parms{};

	Parms.bRight = bRight;
	Parms.InstigatorLoc = std::move(InstigatorLoc);
	Parms.MinDistance = MinDistance;
	Parms.MaxDistance = MaxDistance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetNearbyMinionCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  MinionCount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::GetNearbyMinionCount(int32* MinionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetNearbyMinionCount");

	Params::BP_NPC_Tower_C_GetNearbyMinionCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MinionCount != nullptr)
		*MinionCount = Parms.MinionCount;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.GetStartingWaypoints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class AWaypoint_C>>*Waypoints                                              (Parm, OutParm)

void ABP_NPC_Tower_C::GetStartingWaypoints(TArray<TSoftObjectPtr<class AWaypoint_C>>* Waypoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "GetStartingWaypoints");

	Params::BP_NPC_Tower_C_GetStartingWaypoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Waypoints != nullptr)
		*Waypoints = std::move(Parms.Waypoints);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.IsInstigatorCloseToStructure
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           InstigatorActor                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsNearby                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::IsInstigatorCloseToStructure(class AActor* InstigatorActor, bool* IsNearby)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "IsInstigatorCloseToStructure");

	Params::BP_NPC_Tower_C_IsInstigatorCloseToStructure Parms{};

	Parms.InstigatorActor = InstigatorActor;

	UObject::ProcessEvent(Func, &Parms);

	if (IsNearby != nullptr)
		*IsNearby = Parms.IsNearby;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.MulticastDestructionStageEvent
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32                             Stage                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::MulticastDestructionStageEvent(const int32 Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "MulticastDestructionStageEvent");

	Params::BP_NPC_Tower_C_MulticastDestructionStageEvent Parms{};

	Parms.Stage = Stage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.MulticastPlayHitFX
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::MulticastPlayHitFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "MulticastPlayHitFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.OnDamageTaken
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DamageEvent                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_NPC_Tower_C::OnDamageTaken(const struct FDamageEventData& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "OnDamageTaken");

	Params::BP_NPC_Tower_C_OnDamageTaken Parms{};

	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.OnDamageThresholdReached
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ThresholdIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FDamageEventData&          DamageEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_NPC_Tower_C::OnDamageThresholdReached(int32 ThresholdIndex, const struct FDamageEventData& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "OnDamageThresholdReached");

	Params::BP_NPC_Tower_C_OnDamageThresholdReached Parms{};

	Parms.ThresholdIndex = ThresholdIndex;
	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.OnRep_CanSpawnFinalReward
// (BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::OnRep_CanSpawnFinalReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "OnRep_CanSpawnFinalReward");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.OnRivalTowerDestructionStageReached
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FinalStage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::OnRivalTowerDestructionStageReached(int32 Stage, bool FinalStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "OnRivalTowerDestructionStageReached");

	Params::BP_NPC_Tower_C_OnRivalTowerDestructionStageReached Parms{};

	Parms.Stage = Stage;
	Parms.FinalStage = FinalStage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.OnTowerDestructionStageReached
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Stage                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FDamageEventData&          DamageEvent                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_NPC_Tower_C::OnTowerDestructionStageReached(int32 Stage, const struct FDamageEventData& DamageEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "OnTowerDestructionStageReached");

	Params::BP_NPC_Tower_C_OnTowerDestructionStageReached Parms{};

	Parms.Stage = Stage;
	Parms.DamageEvent = std::move(DamageEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NPC_Tower_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.RegisterBastion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Deployable_Bastion_C*         Bastion                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::RegisterBastion(class ABP_Deployable_Bastion_C* Bastion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "RegisterBastion");

	Params::BP_NPC_Tower_C_RegisterBastion Parms{};

	Parms.Bastion = Bastion;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.RemoveAncientFuryDebuff
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NPC_Tower_C::RemoveAncientFuryDebuff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "RemoveAncientFuryDebuff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.RetrieveTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor**                          CurrentTargetActor                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::RetrieveTargetActor(class AActor** CurrentTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "RetrieveTargetActor");

	Params::BP_NPC_Tower_C_RetrieveTargetActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentTargetActor != nullptr)
		*CurrentTargetActor = Parms.CurrentTargetActor;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.SpawnDestructionStageReward
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDamageEventData&          DamageEventData                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UClass*                           RewardActorClass                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   NumToSpawn                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RNGLoc                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::SpawnDestructionStageReward(const struct FDamageEventData& DamageEventData, class UClass* RewardActorClass, int32 NumToSpawn, bool RNGLoc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "SpawnDestructionStageReward");

	Params::BP_NPC_Tower_C_SpawnDestructionStageReward Parms{};

	Parms.DamageEventData = std::move(DamageEventData);
	Parms.RewardActorClass = RewardActorClass;
	Parms.NumToSpawn = NumToSpawn;
	Parms.RNGLoc = RNGLoc;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.UpdateNearbyMinionCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  NewMinionCount                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::UpdateNearbyMinionCount(int32 NewCount, int32* NewMinionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "UpdateNearbyMinionCount");

	Params::BP_NPC_Tower_C_UpdateNearbyMinionCount Parms{};

	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);

	if (NewMinionCount != nullptr)
		*NewMinionCount = Parms.NewMinionCount;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.UpdateTargetActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           NewTargetActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_NPC_Tower_C::UpdateTargetActor(class AActor* NewTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "UpdateTargetActor");

	Params::BP_NPC_Tower_C_UpdateTargetActor Parms{};

	Parms.NewTargetActor = NewTargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.CanBeAffectedByCrit
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NPC_Tower_C::CanBeAffectedByCrit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "CanBeAffectedByCrit");

	Params::BP_NPC_Tower_C_CanBeAffectedByCrit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_NPC_Tower.BP_NPC_Tower_C.CanBeAffectedByLifeSteal
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_NPC_Tower_C::CanBeAffectedByLifeSteal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPC_Tower_C", "CanBeAffectedByLifeSteal");

	Params::BP_NPC_Tower_C_CanBeAffectedByLifeSteal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

