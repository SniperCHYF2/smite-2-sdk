#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTS_GodBot_SetNearestEnemyTower

#include "Basic.hpp"


namespace SDK::Params
{

// Function BTS_GodBot_SetNearestEnemyTower.BTS_GodBot_SetNearestEnemyTower_C.ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower
// 0x0050 (0x0050 - 0x0000)
struct BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetClosestTeamStructure_outDistance;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      CallFunc_GetClosestTeamStructure_ReturnValue;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower) == 0x000008, "Wrong alignment on BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower");
static_assert(sizeof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower) == 0x000050, "Wrong size on BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, EntryPoint) == 0x000000, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, K2Node_Event_OwnerController) == 0x000008, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000020, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_GetClosestTeamStructure_outDistance) == 0x00002C, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_GetClosestTeamStructure_outDistance' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_GetClosestTeamStructure_ReturnValue) == 0x000030, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_GetClosestTeamStructure_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000038, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x000040, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ExecuteUbergraph_BTS_GodBot_SetNearestEnemyTower::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BTS_GodBot_SetNearestEnemyTower.BTS_GodBot_SetNearestEnemyTower_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI");
static_assert(sizeof(BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI) == 0x000018, "Wrong size on BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BTS_GodBot_SetNearestEnemyTower_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

}

