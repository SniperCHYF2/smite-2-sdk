#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GC_WindSprite_LeapPreview

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.CheckEndPoint
// 0x0120 (0x0120 - 0x0000)
struct GC_WindSprite_LeapPreview_C_CheckEndPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_GetCapsuleHalfHeight_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_ReturnValue;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CapsuleTraceSingleForObjects_OutHit;      // 0x0030(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_CapsuleTraceSingleForObjects_ReturnValue; // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_CheckEndPoint) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_CheckEndPoint");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_CheckEndPoint) == 0x000120, "Wrong size on GC_WindSprite_LeapPreview_C_CheckEndPoint");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, ReturnValue) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, Temp_object_Variable) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, K2Node_MakeArray_Array) == 0x000018, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, CallFunc_GetCapsuleHalfHeight_ReturnValue) == 0x000028, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::CallFunc_GetCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, CallFunc_GetCapsuleRadius_ReturnValue) == 0x00002C, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::CallFunc_GetCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, CallFunc_CapsuleTraceSingleForObjects_OutHit) == 0x000030, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::CallFunc_CapsuleTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_CheckEndPoint, CallFunc_CapsuleTraceSingleForObjects_ReturnValue) == 0x000118, "Member 'GC_WindSprite_LeapPreview_C_CheckEndPoint::CallFunc_CapsuleTraceSingleForObjects_ReturnValue' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.ExecuteUbergraph_GC_WindSprite_LeapPreview
// 0x0378 (0x0378 - 0x0000)
struct GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetEndLocation_ReturnValue;               // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetLocalPlayerController_ReturnValue;     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetInstigatorActor_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHWCharacter_Base*                      K2Node_DynamicCast_AsHWCharacter_Base;             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEndPoint_ReturnValue;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_183[0x1];                                      // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0288(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview) == 0x000378, "Wrong size on GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, EntryPoint) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::EntryPoint' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, Temp_object_Variable) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_GetEndLocation_ReturnValue) == 0x000018, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_GetEndLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, K2Node_Event_DeltaSeconds) == 0x000030, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_GetLocalPlayerController_ReturnValue) == 0x000038, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_GetLocalPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue) == 0x000040, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_K2_GetPawn_ReturnValue) == 0x000048, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_GetInstigatorActor_ReturnValue) == 0x000050, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_GetInstigatorActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, K2Node_DynamicCast_AsHWCharacter_Base) == 0x000058, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::K2Node_DynamicCast_AsHWCharacter_Base' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_IsValid_ReturnValue) == 0x000061, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BooleanAND_ReturnValue) == 0x000062, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, K2Node_MakeArray_Array) == 0x000068, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BooleanAND_ReturnValue_1) == 0x000078, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_CheckEndPoint_ReturnValue) == 0x000079, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_CheckEndPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000098, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000180, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_bBlockingHit) == 0x000181, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_bInitialOverlap) == 0x000182, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_Time) == 0x000184, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_Distance) == 0x000188, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_Location) == 0x000190, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_Normal) == 0x0001C0, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_ImpactNormal) == 0x0001D8, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_PhysMat) == 0x0001F0, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_HitActor) == 0x0001F8, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_HitComponent) == 0x000200, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_HitBoneName) == 0x000208, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_BoneName) == 0x000210, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_HitItem) == 0x000218, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_ElementIndex) == 0x00021C, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_FaceIndex) == 0x000220, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_TraceStart) == 0x000228, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakHitResult_TraceEnd) == 0x000240, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakVector_X) == 0x000258, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakVector_Y) == 0x000260, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_BreakVector_Z) == 0x000268, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_MakeVector_ReturnValue) == 0x000270, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000288, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000370, "Member 'GC_WindSprite_LeapPreview_C_ExecuteUbergraph_GC_WindSprite_LeapPreview::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.GetEndLocation
// 0x00D8 (0x00D8 - 0x0000)
struct GC_WindSprite_LeapPreview_C_GetEndLocation final
{
public:
	class AHWCharacter_Base*                      Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCapsuleRadius_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_GetEndLocation) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_GetEndLocation");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_GetEndLocation) == 0x0000D8, "Wrong size on GC_WindSprite_LeapPreview_C_GetEndLocation");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, Target) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::Target' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, ReturnValue) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_GetCapsuleRadius_ReturnValue) == 0x000020, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_GetCapsuleRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000028, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000040, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000058, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000B8, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_GetEndLocation, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x0000D0, "Member 'GC_WindSprite_LeapPreview_C_GetEndLocation::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.OnActive
// 0x00E8 (0x00E8 - 0x0000)
struct GC_WindSprite_LeapPreview_C_OnActive final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters_0;                                      // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnActive_ReturnValue;                     // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue; // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_OnActive) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_OnActive");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_OnActive) == 0x0000E8, "Wrong size on GC_WindSprite_LeapPreview_C_OnActive");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnActive, MyTarget) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_OnActive::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnActive, Parameters_0) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_OnActive::Parameters_0' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnActive, ReturnValue) == 0x0000E0, "Member 'GC_WindSprite_LeapPreview_C_OnActive::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnActive, CallFunc_OnActive_ReturnValue) == 0x0000E1, "Member 'GC_WindSprite_LeapPreview_C_OnActive::CallFunc_OnActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnActive, CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue) == 0x0000E2, "Member 'GC_WindSprite_LeapPreview_C_OnActive::CallFunc_IsInstigatorLocallyControlledPlayer_ReturnValue' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.OnRemove
// 0x00E8 (0x00E8 - 0x0000)
struct GC_WindSprite_LeapPreview_C_OnRemove final
{
public:
	class AActor*                                 MyTarget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 Parameters_0;                                      // 0x0008(0x00D8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OnRemove_ReturnValue;                     // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_OnRemove) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_OnRemove");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_OnRemove) == 0x0000E8, "Wrong size on GC_WindSprite_LeapPreview_C_OnRemove");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnRemove, MyTarget) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_OnRemove::MyTarget' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnRemove, Parameters_0) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_OnRemove::Parameters_0' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnRemove, ReturnValue) == 0x0000E0, "Member 'GC_WindSprite_LeapPreview_C_OnRemove::ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_OnRemove, CallFunc_OnRemove_ReturnValue) == 0x0000E1, "Member 'GC_WindSprite_LeapPreview_C_OnRemove::CallFunc_OnRemove_ReturnValue' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GC_WindSprite_LeapPreview_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_ReceiveTick) == 0x000004, "Wrong alignment on GC_WindSprite_LeapPreview_C_ReceiveTick");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_ReceiveTick) == 0x000004, "Wrong size on GC_WindSprite_LeapPreview_C_ReceiveTick");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function GC_WindSprite_LeapPreview.GC_WindSprite_LeapPreview_C.SetTargeterToEndPoint
// 0x0120 (0x0120 - 0x0000)
struct GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint final
{
public:
	double                                        CallFunc_BreakVector_X;                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x0030(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint) == 0x000008, "Wrong alignment on GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint");
static_assert(sizeof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint) == 0x000120, "Wrong size on GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_BreakVector_X) == 0x000000, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_BreakVector_Y) == 0x000008, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_BreakVector_Z) == 0x000010, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x000030, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint, CallFunc_K2_SetActorLocation_ReturnValue) == 0x000118, "Member 'GC_WindSprite_LeapPreview_C_SetTargeterToEndPoint::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");

}

