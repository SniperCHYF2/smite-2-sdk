#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CustomGameBrowser_Entry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK::Params
{

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.AssessJoinability
// 0x0014 (0x0014 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_AssessJoinability final
{
public:
	bool                                          bJoinable;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsGameStarted_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_AssessJoinability) == 0x000004, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_AssessJoinability");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_AssessJoinability) == 0x000014, "Wrong size on WBP_CustomGameBrowser_Entry_C_AssessJoinability");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, bJoinable) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::bJoinable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, Temp_bool_Variable) == 0x000001, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, Temp_int_Variable) == 0x000004, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, Temp_int_Variable_1) == 0x000008, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, CallFunc_GetIsGameStarted_ReturnValue) == 0x00000C, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::CallFunc_GetIsGameStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_AssessJoinability, K2Node_Select_Default) == 0x000010, "Member 'WBP_CustomGameBrowser_Entry_C_AssessJoinability::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature final
{
public:
	class UHWWidget*                              Button_Widget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature, Button_Widget) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_4_OnButtonClicked__DelegateSignature::Button_Widget' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature final
{
public:
	bool                                          bHovered;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature) == 0x000001, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature) == 0x000001, "Wrong size on WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature, bHovered) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_BndEvt__WBP_CustomGameBrowser_Entry_RHHitTarget_K2Node_ComponentBoundEvent_5_OnButtonHovered__DelegateSignature::bHovered' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.ExecuteUbergraph_WBP_CustomGameBrowser_Entry
// 0x0040 (0x0040 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bHovered;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class URHQueueDataFactory*                    CallFunc_GetQueueDataFactory_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AssessJoinability_bJoinable;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWWidget*                              K2Node_ComponentBoundEvent_Button_Widget;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry) == 0x000040, "Wrong size on WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, EntryPoint) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, K2Node_ComponentBoundEvent_bHovered) == 0x000004, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::K2Node_ComponentBoundEvent_bHovered' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, CallFunc_GetQueueDataFactory_ReturnValue) == 0x000018, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::CallFunc_GetQueueDataFactory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, CallFunc_AssessJoinability_bJoinable) == 0x000020, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::CallFunc_AssessJoinability_bJoinable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, CallFunc_PlayAnimation_ReturnValue) == 0x000028, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000030, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry, K2Node_ComponentBoundEvent_Button_Widget) == 0x000038, "Member 'WBP_CustomGameBrowser_Entry_C_ExecuteUbergraph_WBP_CustomGameBrowser_Entry::K2Node_ComponentBoundEvent_Button_Widget' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.GetJoinButton
// 0x0008 (0x0008 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_GetJoinButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_GetJoinButton) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_GetJoinButton");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_GetJoinButton) == 0x000008, "Wrong size on WBP_CustomGameBrowser_Entry_C_GetJoinButton");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_GetJoinButton, ReturnValue) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_GetJoinButton::ReturnValue' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.OnCustomMatchSessionJoinResult
// 0x0010 (0x0010 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class URH_SessionView*                  SessionToJoin;                                     // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult) == 0x000010, "Wrong size on WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult, bSuccess) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult::bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult, SessionToJoin) == 0x000008, "Member 'WBP_CustomGameBrowser_Entry_C_OnCustomMatchSessionJoinResult::SessionToJoin' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetGameLeaderNameDisplay
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay final
{
public:
	class FString                                 LeaderName_0;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0088(0x0018)()
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay) == 0x0000A0, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay, LeaderName_0) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay::LeaderName_0' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay, K2Node_MakeArray_Array) == 0x000078, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay, CallFunc_Format_ReturnValue) == 0x000088, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLeaderNameDisplay::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetGameLobbyNameDisplay
// 0x0050 (0x0050 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay final
{
public:
	class FString                                 LobbyName;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGameLeaderName_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay) == 0x000050, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, LobbyName) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::LobbyName' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, Temp_bool_Variable) == 0x000010, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, CallFunc_IsEmpty_ReturnValue) == 0x000011, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, CallFunc_GetGameLeaderName_ReturnValue) == 0x000018, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::CallFunc_GetGameLeaderName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, K2Node_Select_Default) == 0x000028, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameLobbyNameDisplay::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetGamePlayerCountDisplay
// 0x00E0 (0x00E0 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay final
{
public:
	int32                                         PlayerCount_0;                                     // 0x0000(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPlayerCount;                                    // 0x0004(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0050)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0068(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C8(0x0018)()
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay) == 0x0000E0, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, PlayerCount_0) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::PlayerCount_0' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, MaxPlayerCount) == 0x000004, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::MaxPlayerCount' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x000010, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, K2Node_MakeStruct_FormatArgumentData_1) == 0x000068, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, K2Node_MakeArray_Array) == 0x0000B8, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay, CallFunc_Format_ReturnValue) == 0x0000C8, "Member 'WBP_CustomGameBrowser_Entry_C_SetGamePlayerCountDisplay::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetGameStarted
// 0x0002 (0x0002 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetGameStarted final
{
public:
	bool                                          bGameStarted;                                      // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AssessJoinability_bJoinable;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetGameStarted) == 0x000001, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetGameStarted");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetGameStarted) == 0x000002, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetGameStarted");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameStarted, bGameStarted) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameStarted::bGameStarted' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetGameStarted, CallFunc_AssessJoinability_bJoinable) == 0x000001, "Member 'WBP_CustomGameBrowser_Entry_C_SetGameStarted::CallFunc_AssessJoinability_bJoinable' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetMapInfo
// 0x01D0 (0x01D0 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetMapInfo final
{
public:
	class FName                                   MapRowName;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRHMapDetails                          MapDetails;                                        // 0x0008(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Temp_text_Variable;                                // 0x0080(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHQueueDataFactory*                    CallFunc_GetQueueDataFactory_ReturnValue;          // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UHWQueueDataFactory*                    K2Node_DynamicCast_AsHWQueue_Data_Factory;         // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHWGameModeInfo                        CallFunc_GetCustomSessionGameModeInfo_OutGameModeInfo; // 0x00B8(0x00F8)()
	bool                                          CallFunc_GetCustomSessionGameModeInfo_ReturnValue; // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x01B8(0x0018)()
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetMapInfo) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetMapInfo");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetMapInfo) == 0x0001D0, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetMapInfo");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, MapRowName) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::MapRowName' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, MapDetails) == 0x000008, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::MapDetails' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, Temp_text_Variable) == 0x000080, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, Temp_bool_Variable) == 0x000098, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, CallFunc_GetQueueDataFactory_ReturnValue) == 0x0000A0, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::CallFunc_GetQueueDataFactory_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, K2Node_DynamicCast_AsHWQueue_Data_Factory) == 0x0000A8, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::K2Node_DynamicCast_AsHWQueue_Data_Factory' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, CallFunc_GetCustomSessionGameModeInfo_OutGameModeInfo) == 0x0000B8, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::CallFunc_GetCustomSessionGameModeInfo_OutGameModeInfo' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, CallFunc_GetCustomSessionGameModeInfo_ReturnValue) == 0x0001B0, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::CallFunc_GetCustomSessionGameModeInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetMapInfo, K2Node_Select_Default) == 0x0001B8, "Member 'WBP_CustomGameBrowser_Entry_C_SetMapInfo::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CustomGameBrowser_Entry.WBP_CustomGameBrowser_Entry_C.SetRegionDisplay
// 0x0018 (0x0018 - 0x0000)
struct WBP_CustomGameBrowser_Entry_C_SetRegionDisplay final
{
public:
	class FText                                   RegionAsText;                                      // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CustomGameBrowser_Entry_C_SetRegionDisplay) == 0x000008, "Wrong alignment on WBP_CustomGameBrowser_Entry_C_SetRegionDisplay");
static_assert(sizeof(WBP_CustomGameBrowser_Entry_C_SetRegionDisplay) == 0x000018, "Wrong size on WBP_CustomGameBrowser_Entry_C_SetRegionDisplay");
static_assert(offsetof(WBP_CustomGameBrowser_Entry_C_SetRegionDisplay, RegionAsText) == 0x000000, "Member 'WBP_CustomGameBrowser_Entry_C_SetRegionDisplay::RegionAsText' has a wrong offset!");

}

