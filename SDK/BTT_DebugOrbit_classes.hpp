#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_DebugOrbit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_DebugOrbit.BTT_DebugOrbit_C
// 0x0058 (0x0100 - 0x00A8)
class UBTT_DebugOrbit_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 RadiusBlackboardKey;                               // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector                                OrbitLocation;                                     // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OrbitBuffer;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OrbitCached;                                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Calculate_and_Cache_Orbit_Point(class APawn* Pawn);
	void EvaluateOrbit(class APawn* Pawn, double DeltaTime, class AAIController* Controller);
	void ExecuteUbergraph_BTT_DebugOrbit(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void WalkInDirection(class APawn* Pawn, const struct FVector& Direction, class AAIController* Controller);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_DebugOrbit_C">();
	}
	static class UBTT_DebugOrbit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_DebugOrbit_C>();
	}
};
static_assert(alignof(UBTT_DebugOrbit_C) == 0x000008, "Wrong alignment on UBTT_DebugOrbit_C");
static_assert(sizeof(UBTT_DebugOrbit_C) == 0x000100, "Wrong size on UBTT_DebugOrbit_C");
static_assert(offsetof(UBTT_DebugOrbit_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_DebugOrbit_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_DebugOrbit_C, RadiusBlackboardKey) == 0x0000B0, "Member 'UBTT_DebugOrbit_C::RadiusBlackboardKey' has a wrong offset!");
static_assert(offsetof(UBTT_DebugOrbit_C, OrbitLocation) == 0x0000D8, "Member 'UBTT_DebugOrbit_C::OrbitLocation' has a wrong offset!");
static_assert(offsetof(UBTT_DebugOrbit_C, OrbitBuffer) == 0x0000F0, "Member 'UBTT_DebugOrbit_C::OrbitBuffer' has a wrong offset!");
static_assert(offsetof(UBTT_DebugOrbit_C, OrbitCached) == 0x0000F8, "Member 'UBTT_DebugOrbit_C::OrbitCached' has a wrong offset!");

}

