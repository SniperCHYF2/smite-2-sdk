#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpawnDirector

#include "Basic.hpp"

#include "EFactoryDifficulty_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_SpawnManager_WaveDifficulty_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpawnDirector.BP_SpawnDirector_C
// 0x01B8 (0x0450 - 0x0298)
class ABP_SpawnDirector_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class AHWBotFactory>>   LaneMinionFactories;                               // 0x02A8(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class AHWBotFactory>>   JungleCamps;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible)
	double                                        SpawnInterval;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InitialNagaSpawnTime;                              // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NagaRespawnTime;                                   // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PyromancerSpawnTiming;                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BeginSpawningPhase;                                // 0x02DC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSpawns;                                      // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPopulateLaneMinionFactories;                   // 0x02E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E6[0x2];                                      // 0x02E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StopSpawningPhase;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpawnTimer;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpawningActive;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentWaveIndex;                                  // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCycleIndex;                                 // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumWaves;                                          // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_SpawnManager_WaveDifficulty> WaveDifficulties;                                  // 0x0308(0x0010)(Edit, BlueprintVisible)
	bool                                          EnableSpawnDirector;                               // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WaveCounter;                                       // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFactoryDifficulty                            CurrentWaveDifficulty;                             // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JungleCampsSpawned;                                // 0x0321(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322[0x6];                                      // 0x0322(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ElapsedMatchTime;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartSpawningImmediately;                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CachedTime;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CyclingSpawns;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ABP_BotFactory_C>> ChaosMinionFactories;                             // 0x0348(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class ABP_BotFactory_C>> OrderMinionFactories;                             // 0x0358(0x0010)(Edit, BlueprintVisible)
	bool                                          JungleCampsLevelingEnabled;                        // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class ABP_BotFactory_Naga_C>> NagaCamps;                                   // 0x0370(0x0010)(Edit, BlueprintVisible)
	class ABP_BotFactory_Naga_C*                  NagaFactory;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NagaTimer;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasNagaSpawnedOnce;                                // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  LastNagaFactoryTags;                               // 0x0398(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LastNagaSideSpawn;                                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_BotFactory_C>        PyromancerCamp;                                    // 0x03C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FGameplayTag                           LaneMinionFactoryAssetTag;                         // 0x03E8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	TArray<class AHWBotFactory*>                  CachedLaneMinionFactories;                         // 0x03F0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AutoPopulateJungleCampFactories;                   // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           JungleCampFactoryAssetTag;                         // 0x0404(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AHWBotFactory*>                  CachedJungleCampFactories;                         // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TSoftObjectPtr<class AHWBotFactory>           FireGiantFactory;                                  // 0x0420(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         FireGiantInitialSpawnDelay;                        // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BeginSpawning();
	void EnableSpawnDirectorAndBeginSpawning();
	void ExecuteUbergraph_BP_SpawnDirector(int32 EntryPoint);
	void FilterOutNagaTeamSpawns(TArray<TSoftObjectPtr<class ABP_BotFactory_Naga_C>>* FilteredSpawns);
	void ForceSpawnWave();
	void GatherAllFactories();
	void GatherFactories(bool AutoPopulate, const struct FGameplayTag& FactoryTag, TArray<TSoftObjectPtr<class ABP_BotFactory_C>>& ManuallySelectedBotFactories, TArray<class AHWBotFactory*>& OutFactoryArray);
	void GetMatchPhase(struct FGameplayTag* CurrentPhaseTag);
	void GetMatchTime(float* MatchTime);
	void GetWaveDifficulty(EFactoryDifficulty* Difficulty);
	void InitializeMinionFactories();
	void KillAllWaves();
	void NagaFactoryEmpty(class AHWBotFactory* BotFactory, class AActor* Causer);
	void OnMatchPhaseStarted(const struct FGameplayTag& NewPhase);
	void ReceiveBeginPlay();
	void ResetWaveVariables();
	void SetSpawnTableForFactories(const struct FGameplayTag& SpawnTableTag);
	void SpawnCyclingWave();
	void SpawnFireGiant();
	void SpawnPause();
	void SpawnResume();
	void SpawnWave();
	void StartFireGiantTimer();
	void StartJungleCamps(bool* Return);
	void StartJungleCampsLeveling(bool* Return);
	void StartNagaCamps();
	void StartNagaTimer();
	void StartPyromancerTimer();
	void StartSpawnTimer();
	void StopSpawning();
	void Swap_To_Pyromancer();
	void Timestamp(class FString* RealClockTime);
	void TriggerSpawn();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpawnDirector_C">();
	}
	static class ABP_SpawnDirector_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SpawnDirector_C>();
	}
};
static_assert(alignof(ABP_SpawnDirector_C) == 0x000008, "Wrong alignment on ABP_SpawnDirector_C");
static_assert(sizeof(ABP_SpawnDirector_C) == 0x000450, "Wrong size on ABP_SpawnDirector_C");
static_assert(offsetof(ABP_SpawnDirector_C, UberGraphFrame) == 0x000298, "Member 'ABP_SpawnDirector_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, Billboard) == 0x0002A0, "Member 'ABP_SpawnDirector_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, LaneMinionFactories) == 0x0002A8, "Member 'ABP_SpawnDirector_C::LaneMinionFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, JungleCamps) == 0x0002B8, "Member 'ABP_SpawnDirector_C::JungleCamps' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, SpawnInterval) == 0x0002C8, "Member 'ABP_SpawnDirector_C::SpawnInterval' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, InitialNagaSpawnTime) == 0x0002D0, "Member 'ABP_SpawnDirector_C::InitialNagaSpawnTime' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, NagaRespawnTime) == 0x0002D4, "Member 'ABP_SpawnDirector_C::NagaRespawnTime' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, PyromancerSpawnTiming) == 0x0002D8, "Member 'ABP_SpawnDirector_C::PyromancerSpawnTiming' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, BeginSpawningPhase) == 0x0002DC, "Member 'ABP_SpawnDirector_C::BeginSpawningPhase' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, EnableSpawns) == 0x0002E4, "Member 'ABP_SpawnDirector_C::EnableSpawns' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, AutoPopulateLaneMinionFactories) == 0x0002E5, "Member 'ABP_SpawnDirector_C::AutoPopulateLaneMinionFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, StopSpawningPhase) == 0x0002E8, "Member 'ABP_SpawnDirector_C::StopSpawningPhase' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, SpawnTimer) == 0x0002F0, "Member 'ABP_SpawnDirector_C::SpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, IsSpawningActive) == 0x0002F8, "Member 'ABP_SpawnDirector_C::IsSpawningActive' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CurrentWaveIndex) == 0x0002FC, "Member 'ABP_SpawnDirector_C::CurrentWaveIndex' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CurrentCycleIndex) == 0x000300, "Member 'ABP_SpawnDirector_C::CurrentCycleIndex' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, NumWaves) == 0x000304, "Member 'ABP_SpawnDirector_C::NumWaves' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, WaveDifficulties) == 0x000308, "Member 'ABP_SpawnDirector_C::WaveDifficulties' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, EnableSpawnDirector) == 0x000318, "Member 'ABP_SpawnDirector_C::EnableSpawnDirector' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, WaveCounter) == 0x00031C, "Member 'ABP_SpawnDirector_C::WaveCounter' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CurrentWaveDifficulty) == 0x000320, "Member 'ABP_SpawnDirector_C::CurrentWaveDifficulty' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, JungleCampsSpawned) == 0x000321, "Member 'ABP_SpawnDirector_C::JungleCampsSpawned' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, ElapsedMatchTime) == 0x000328, "Member 'ABP_SpawnDirector_C::ElapsedMatchTime' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, StartSpawningImmediately) == 0x000330, "Member 'ABP_SpawnDirector_C::StartSpawningImmediately' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CachedTime) == 0x000338, "Member 'ABP_SpawnDirector_C::CachedTime' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CyclingSpawns) == 0x000340, "Member 'ABP_SpawnDirector_C::CyclingSpawns' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, ChaosMinionFactories) == 0x000348, "Member 'ABP_SpawnDirector_C::ChaosMinionFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, OrderMinionFactories) == 0x000358, "Member 'ABP_SpawnDirector_C::OrderMinionFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, JungleCampsLevelingEnabled) == 0x000368, "Member 'ABP_SpawnDirector_C::JungleCampsLevelingEnabled' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, NagaCamps) == 0x000370, "Member 'ABP_SpawnDirector_C::NagaCamps' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, NagaFactory) == 0x000380, "Member 'ABP_SpawnDirector_C::NagaFactory' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, NagaTimer) == 0x000388, "Member 'ABP_SpawnDirector_C::NagaTimer' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, HasNagaSpawnedOnce) == 0x000390, "Member 'ABP_SpawnDirector_C::HasNagaSpawnedOnce' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, LastNagaFactoryTags) == 0x000398, "Member 'ABP_SpawnDirector_C::LastNagaFactoryTags' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, LastNagaSideSpawn) == 0x0003B8, "Member 'ABP_SpawnDirector_C::LastNagaSideSpawn' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, PyromancerCamp) == 0x0003C0, "Member 'ABP_SpawnDirector_C::PyromancerCamp' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, LaneMinionFactoryAssetTag) == 0x0003E8, "Member 'ABP_SpawnDirector_C::LaneMinionFactoryAssetTag' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CachedLaneMinionFactories) == 0x0003F0, "Member 'ABP_SpawnDirector_C::CachedLaneMinionFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, AutoPopulateJungleCampFactories) == 0x000400, "Member 'ABP_SpawnDirector_C::AutoPopulateJungleCampFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, JungleCampFactoryAssetTag) == 0x000404, "Member 'ABP_SpawnDirector_C::JungleCampFactoryAssetTag' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, CachedJungleCampFactories) == 0x000410, "Member 'ABP_SpawnDirector_C::CachedJungleCampFactories' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, FireGiantFactory) == 0x000420, "Member 'ABP_SpawnDirector_C::FireGiantFactory' has a wrong offset!");
static_assert(offsetof(ABP_SpawnDirector_C, FireGiantInitialSpawnDelay) == 0x000448, "Member 'ABP_SpawnDirector_C::FireGiantInitialSpawnDelay' has a wrong offset!");

}

