#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RallyHereStart

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "RallyHereIntegration_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "RallyHereStart_structs.hpp"
#include "UMG_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreOnline_structs.hpp"
#include "RallyHereAPI_structs.hpp"


namespace SDK::Params
{

// Function RallyHereStart.PlatformInventoryItem.GetItemByFriendlyName
// 0x0038 (0x0038 - 0x0000)
struct PlatformInventoryItem_GetItemByFriendlyName final
{
public:
	class FString                                 InFriendlyName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPlatformInventoryItem>  ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemByFriendlyName) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemByFriendlyName");
static_assert(sizeof(PlatformInventoryItem_GetItemByFriendlyName) == 0x000038, "Wrong size on PlatformInventoryItem_GetItemByFriendlyName");
static_assert(offsetof(PlatformInventoryItem_GetItemByFriendlyName, InFriendlyName) == 0x000000, "Member 'PlatformInventoryItem_GetItemByFriendlyName::InFriendlyName' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetItemByFriendlyName, ReturnValue) == 0x000010, "Member 'PlatformInventoryItem_GetItemByFriendlyName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.BLUEPRINT_CanOwnMore
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_BLUEPRINT_CanOwnMore final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_BLUEPRINT_CanOwnMore) == 0x000008, "Wrong alignment on PlatformInventoryItem_BLUEPRINT_CanOwnMore");
static_assert(sizeof(PlatformInventoryItem_BLUEPRINT_CanOwnMore) == 0x000018, "Wrong size on PlatformInventoryItem_BLUEPRINT_CanOwnMore");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_CanOwnMore, PlayerInfo) == 0x000000, "Member 'PlatformInventoryItem_BLUEPRINT_CanOwnMore::PlayerInfo' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_CanOwnMore, Delegate) == 0x000008, "Member 'PlatformInventoryItem_BLUEPRINT_CanOwnMore::Delegate' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.BLUEPRINT_GetQuantityOwned
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_BLUEPRINT_GetQuantityOwned final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InstanceCount)>          Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_BLUEPRINT_GetQuantityOwned) == 0x000008, "Wrong alignment on PlatformInventoryItem_BLUEPRINT_GetQuantityOwned");
static_assert(sizeof(PlatformInventoryItem_BLUEPRINT_GetQuantityOwned) == 0x000018, "Wrong size on PlatformInventoryItem_BLUEPRINT_GetQuantityOwned");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_GetQuantityOwned, PlayerInfo) == 0x000000, "Member 'PlatformInventoryItem_BLUEPRINT_GetQuantityOwned::PlayerInfo' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_GetQuantityOwned, Delegate) == 0x000008, "Member 'PlatformInventoryItem_BLUEPRINT_GetQuantityOwned::Delegate' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.BLUEPRINT_IsOwned
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_BLUEPRINT_IsOwned final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_BLUEPRINT_IsOwned) == 0x000008, "Wrong alignment on PlatformInventoryItem_BLUEPRINT_IsOwned");
static_assert(sizeof(PlatformInventoryItem_BLUEPRINT_IsOwned) == 0x000018, "Wrong size on PlatformInventoryItem_BLUEPRINT_IsOwned");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_IsOwned, PlayerInfo) == 0x000000, "Member 'PlatformInventoryItem_BLUEPRINT_IsOwned::PlayerInfo' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_IsOwned, Delegate) == 0x000008, "Member 'PlatformInventoryItem_BLUEPRINT_IsOwned::Delegate' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.BLUEPRINT_IsRented
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_BLUEPRINT_IsRented final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_BLUEPRINT_IsRented) == 0x000008, "Wrong alignment on PlatformInventoryItem_BLUEPRINT_IsRented");
static_assert(sizeof(PlatformInventoryItem_BLUEPRINT_IsRented) == 0x000018, "Wrong size on PlatformInventoryItem_BLUEPRINT_IsRented");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_IsRented, PlayerInfo) == 0x000000, "Member 'PlatformInventoryItem_BLUEPRINT_IsRented::PlayerInfo' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_BLUEPRINT_IsRented, Delegate) == 0x000008, "Member 'PlatformInventoryItem_BLUEPRINT_IsRented::Delegate' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetTextureAsync
// 0x0038 (0x0038 - 0x0000)
struct PlatformInventoryItem_GetTextureAsync final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UTexture2D* ItemIcon)>   IconLoadedEvent;                                   // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetTextureAsync) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetTextureAsync");
static_assert(sizeof(PlatformInventoryItem_GetTextureAsync) == 0x000038, "Wrong size on PlatformInventoryItem_GetTextureAsync");
static_assert(offsetof(PlatformInventoryItem_GetTextureAsync, Texture) == 0x000000, "Member 'PlatformInventoryItem_GetTextureAsync::Texture' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetTextureAsync, IconLoadedEvent) == 0x000028, "Member 'PlatformInventoryItem_GetTextureAsync::IconLoadedEvent' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.SetCollectionContainer
// 0x0020 (0x0020 - 0x0000)
struct PlatformInventoryItem_SetCollectionContainer final
{
public:
	struct FGameplayTagContainer                  InContainer;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_SetCollectionContainer) == 0x000008, "Wrong alignment on PlatformInventoryItem_SetCollectionContainer");
static_assert(sizeof(PlatformInventoryItem_SetCollectionContainer) == 0x000020, "Wrong size on PlatformInventoryItem_SetCollectionContainer");
static_assert(offsetof(PlatformInventoryItem_SetCollectionContainer, InContainer) == 0x000000, "Member 'PlatformInventoryItem_SetCollectionContainer::InContainer' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.SetFriendlySearchName
// 0x0010 (0x0010 - 0x0000)
struct PlatformInventoryItem_SetFriendlySearchName final
{
public:
	class FString                                 InFriendlyName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_SetFriendlySearchName) == 0x000008, "Wrong alignment on PlatformInventoryItem_SetFriendlySearchName");
static_assert(sizeof(PlatformInventoryItem_SetFriendlySearchName) == 0x000010, "Wrong size on PlatformInventoryItem_SetFriendlySearchName");
static_assert(offsetof(PlatformInventoryItem_SetFriendlySearchName, InFriendlyName) == 0x000000, "Member 'PlatformInventoryItem_SetFriendlySearchName::InFriendlyName' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.SetItemDescription
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_SetItemDescription final
{
public:
	class FText                                   NewItemDescription;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_SetItemDescription) == 0x000008, "Wrong alignment on PlatformInventoryItem_SetItemDescription");
static_assert(sizeof(PlatformInventoryItem_SetItemDescription) == 0x000018, "Wrong size on PlatformInventoryItem_SetItemDescription");
static_assert(offsetof(PlatformInventoryItem_SetItemDescription, NewItemDescription) == 0x000000, "Member 'PlatformInventoryItem_SetItemDescription::NewItemDescription' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.SetItemName
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_SetItemName final
{
public:
	class FText                                   NewItemDisplayName;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_SetItemName) == 0x000008, "Wrong alignment on PlatformInventoryItem_SetItemName");
static_assert(sizeof(PlatformInventoryItem_SetItemName) == 0x000018, "Wrong size on PlatformInventoryItem_SetItemName");
static_assert(offsetof(PlatformInventoryItem_SetItemName, NewItemDisplayName) == 0x000000, "Member 'PlatformInventoryItem_SetItemName::NewItemDisplayName' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.CanSelectPurchaseQuantity
// 0x0001 (0x0001 - 0x0000)
struct PlatformInventoryItem_CanSelectPurchaseQuantity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_CanSelectPurchaseQuantity) == 0x000001, "Wrong alignment on PlatformInventoryItem_CanSelectPurchaseQuantity");
static_assert(sizeof(PlatformInventoryItem_CanSelectPurchaseQuantity) == 0x000001, "Wrong size on PlatformInventoryItem_CanSelectPurchaseQuantity");
static_assert(offsetof(PlatformInventoryItem_CanSelectPurchaseQuantity, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_CanSelectPurchaseQuantity::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetAllIconTexturesForTag
// 0x0058 (0x0058 - 0x0000)
struct PlatformInventoryItem_GetAllIconTexturesForTag final
{
public:
	struct FGameplayTag                           IconTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, TSoftObjectPtr<class UTexture2D>> OutTextures;                         // 0x0008(0x0050)(Parm, OutParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetAllIconTexturesForTag) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetAllIconTexturesForTag");
static_assert(sizeof(PlatformInventoryItem_GetAllIconTexturesForTag) == 0x000058, "Wrong size on PlatformInventoryItem_GetAllIconTexturesForTag");
static_assert(offsetof(PlatformInventoryItem_GetAllIconTexturesForTag, IconTag) == 0x000000, "Member 'PlatformInventoryItem_GetAllIconTexturesForTag::IconTag' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetAllIconTexturesForTag, OutTextures) == 0x000008, "Member 'PlatformInventoryItem_GetAllIconTexturesForTag::OutTextures' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetCollectionContainer
// 0x0020 (0x0020 - 0x0000)
struct PlatformInventoryItem_GetCollectionContainer final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetCollectionContainer) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetCollectionContainer");
static_assert(sizeof(PlatformInventoryItem_GetCollectionContainer) == 0x000020, "Wrong size on PlatformInventoryItem_GetCollectionContainer");
static_assert(offsetof(PlatformInventoryItem_GetCollectionContainer, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetCollectionContainer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetFriendlySearchName
// 0x0010 (0x0010 - 0x0000)
struct PlatformInventoryItem_GetFriendlySearchName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetFriendlySearchName) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetFriendlySearchName");
static_assert(sizeof(PlatformInventoryItem_GetFriendlySearchName) == 0x000010, "Wrong size on PlatformInventoryItem_GetFriendlySearchName");
static_assert(offsetof(PlatformInventoryItem_GetFriendlySearchName, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetFriendlySearchName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetIconInfoByName
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_GetIconInfoByName final
{
public:
	class FName                                   IconType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIconInfo*                              Icon;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformInventoryItem_GetIconInfoByName) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetIconInfoByName");
static_assert(sizeof(PlatformInventoryItem_GetIconInfoByName) == 0x000018, "Wrong size on PlatformInventoryItem_GetIconInfoByName");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByName, IconType) == 0x000000, "Member 'PlatformInventoryItem_GetIconInfoByName::IconType' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByName, Icon) == 0x000008, "Member 'PlatformInventoryItem_GetIconInfoByName::Icon' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByName, ReturnValue) == 0x000010, "Member 'PlatformInventoryItem_GetIconInfoByName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetIconInfoByTag
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_GetIconInfoByTag final
{
public:
	struct FGameplayTag                           IconTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIconInfo*                              OutIcon;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformInventoryItem_GetIconInfoByTag) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetIconInfoByTag");
static_assert(sizeof(PlatformInventoryItem_GetIconInfoByTag) == 0x000018, "Wrong size on PlatformInventoryItem_GetIconInfoByTag");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByTag, IconTag) == 0x000000, "Member 'PlatformInventoryItem_GetIconInfoByTag::IconTag' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByTag, OutIcon) == 0x000008, "Member 'PlatformInventoryItem_GetIconInfoByTag::OutIcon' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByTag, bExactMatch) == 0x000010, "Member 'PlatformInventoryItem_GetIconInfoByTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconInfoByTag, ReturnValue) == 0x000011, "Member 'PlatformInventoryItem_GetIconInfoByTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetIconMaterialByTag
// 0x0038 (0x0038 - 0x0000)
struct PlatformInventoryItem_GetIconMaterialByTag final
{
public:
	struct FGameplayTag                           IconTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetIconMaterialByTag) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetIconMaterialByTag");
static_assert(sizeof(PlatformInventoryItem_GetIconMaterialByTag) == 0x000038, "Wrong size on PlatformInventoryItem_GetIconMaterialByTag");
static_assert(offsetof(PlatformInventoryItem_GetIconMaterialByTag, IconTag) == 0x000000, "Member 'PlatformInventoryItem_GetIconMaterialByTag::IconTag' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconMaterialByTag, bExactMatch) == 0x000008, "Member 'PlatformInventoryItem_GetIconMaterialByTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconMaterialByTag, ReturnValue) == 0x000010, "Member 'PlatformInventoryItem_GetIconMaterialByTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetIconTextureByTag
// 0x0038 (0x0038 - 0x0000)
struct PlatformInventoryItem_GetIconTextureByTag final
{
public:
	struct FGameplayTag                           IconTag;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetIconTextureByTag) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetIconTextureByTag");
static_assert(sizeof(PlatformInventoryItem_GetIconTextureByTag) == 0x000038, "Wrong size on PlatformInventoryItem_GetIconTextureByTag");
static_assert(offsetof(PlatformInventoryItem_GetIconTextureByTag, IconTag) == 0x000000, "Member 'PlatformInventoryItem_GetIconTextureByTag::IconTag' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconTextureByTag, bExactMatch) == 0x000008, "Member 'PlatformInventoryItem_GetIconTextureByTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_GetIconTextureByTag, ReturnValue) == 0x000010, "Member 'PlatformInventoryItem_GetIconTextureByTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemDescription
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_GetItemDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemDescription) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemDescription");
static_assert(sizeof(PlatformInventoryItem_GetItemDescription) == 0x000018, "Wrong size on PlatformInventoryItem_GetItemDescription");
static_assert(offsetof(PlatformInventoryItem_GetItemDescription, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemDescription::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemDescriptionAsString
// 0x0010 (0x0010 - 0x0000)
struct PlatformInventoryItem_GetItemDescriptionAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemDescriptionAsString) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemDescriptionAsString");
static_assert(sizeof(PlatformInventoryItem_GetItemDescriptionAsString) == 0x000010, "Wrong size on PlatformInventoryItem_GetItemDescriptionAsString");
static_assert(offsetof(PlatformInventoryItem_GetItemDescriptionAsString, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemDescriptionAsString::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemIconInfo
// 0x0008 (0x0008 - 0x0000)
struct PlatformInventoryItem_GetItemIconInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemIconInfo) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemIconInfo");
static_assert(sizeof(PlatformInventoryItem_GetItemIconInfo) == 0x000008, "Wrong size on PlatformInventoryItem_GetItemIconInfo");
static_assert(offsetof(PlatformInventoryItem_GetItemIconInfo, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemIconInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemIconTexture
// 0x0028 (0x0028 - 0x0000)
struct PlatformInventoryItem_GetItemIconTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemIconTexture) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemIconTexture");
static_assert(sizeof(PlatformInventoryItem_GetItemIconTexture) == 0x000028, "Wrong size on PlatformInventoryItem_GetItemIconTexture");
static_assert(offsetof(PlatformInventoryItem_GetItemIconTexture, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemIconTexture::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemId
// 0x0014 (0x0014 - 0x0000)
struct PlatformInventoryItem_GetItemId final
{
public:
	struct FRH_ItemId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemId) == 0x000004, "Wrong alignment on PlatformInventoryItem_GetItemId");
static_assert(sizeof(PlatformInventoryItem_GetItemId) == 0x000014, "Wrong size on PlatformInventoryItem_GetItemId");
static_assert(offsetof(PlatformInventoryItem_GetItemId, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_GetItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemName) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemName");
static_assert(sizeof(PlatformInventoryItem_GetItemName) == 0x000018, "Wrong size on PlatformInventoryItem_GetItemName");
static_assert(offsetof(PlatformInventoryItem_GetItemName, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetItemNameAsString
// 0x0010 (0x0010 - 0x0000)
struct PlatformInventoryItem_GetItemNameAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetItemNameAsString) == 0x000008, "Wrong alignment on PlatformInventoryItem_GetItemNameAsString");
static_assert(sizeof(PlatformInventoryItem_GetItemNameAsString) == 0x000010, "Wrong size on PlatformInventoryItem_GetItemNameAsString");
static_assert(offsetof(PlatformInventoryItem_GetItemNameAsString, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetItemNameAsString::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.GetLootId
// 0x0014 (0x0014 - 0x0000)
struct PlatformInventoryItem_GetLootId final
{
public:
	struct FRH_LootId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_GetLootId) == 0x000004, "Wrong alignment on PlatformInventoryItem_GetLootId");
static_assert(sizeof(PlatformInventoryItem_GetLootId) == 0x000014, "Wrong size on PlatformInventoryItem_GetLootId");
static_assert(offsetof(PlatformInventoryItem_GetLootId, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_GetLootId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.IsItemDisabled
// 0x0002 (0x0002 - 0x0000)
struct PlatformInventoryItem_IsItemDisabled final
{
public:
	bool                                          bIncludeTempDisabled;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_IsItemDisabled) == 0x000001, "Wrong alignment on PlatformInventoryItem_IsItemDisabled");
static_assert(sizeof(PlatformInventoryItem_IsItemDisabled) == 0x000002, "Wrong size on PlatformInventoryItem_IsItemDisabled");
static_assert(offsetof(PlatformInventoryItem_IsItemDisabled, bIncludeTempDisabled) == 0x000000, "Member 'PlatformInventoryItem_IsItemDisabled::bIncludeTempDisabled' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_IsItemDisabled, ReturnValue) == 0x000001, "Member 'PlatformInventoryItem_IsItemDisabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.IsItemTempDisabled
// 0x0001 (0x0001 - 0x0000)
struct PlatformInventoryItem_IsItemTempDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformInventoryItem_IsItemTempDisabled) == 0x000001, "Wrong alignment on PlatformInventoryItem_IsItemTempDisabled");
static_assert(sizeof(PlatformInventoryItem_IsItemTempDisabled) == 0x000001, "Wrong size on PlatformInventoryItem_IsItemTempDisabled");
static_assert(offsetof(PlatformInventoryItem_IsItemTempDisabled, ReturnValue) == 0x000000, "Member 'PlatformInventoryItem_IsItemTempDisabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlatformInventoryItem.ShouldDisplayToUser
// 0x0018 (0x0018 - 0x0000)
struct PlatformInventoryItem_ShouldDisplayToUser final
{
public:
	struct FRH_LootId                             LootId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformInventoryItem_ShouldDisplayToUser) == 0x000004, "Wrong alignment on PlatformInventoryItem_ShouldDisplayToUser");
static_assert(sizeof(PlatformInventoryItem_ShouldDisplayToUser) == 0x000018, "Wrong size on PlatformInventoryItem_ShouldDisplayToUser");
static_assert(offsetof(PlatformInventoryItem_ShouldDisplayToUser, LootId) == 0x000000, "Member 'PlatformInventoryItem_ShouldDisplayToUser::LootId' has a wrong offset!");
static_assert(offsetof(PlatformInventoryItem_ShouldDisplayToUser, ReturnValue) == 0x000014, "Member 'PlatformInventoryItem_ShouldDisplayToUser::ReturnValue' has a wrong offset!");

// Function RallyHereStart.PlayerExp_PlayerComponent.ServerFrameTimeUpdate
// 0x00D0 (0x00D0 - 0x0000)
struct PlayerExp_PlayerComponent_ServerFrameTimeUpdate final
{
public:
	struct FPlayerExp_StatAccumulator             InFrameTimeStats;                                  // 0x0000(0x00C8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InHitchesDetected;                                 // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerExp_PlayerComponent_ServerFrameTimeUpdate) == 0x000008, "Wrong alignment on PlayerExp_PlayerComponent_ServerFrameTimeUpdate");
static_assert(sizeof(PlayerExp_PlayerComponent_ServerFrameTimeUpdate) == 0x0000D0, "Wrong size on PlayerExp_PlayerComponent_ServerFrameTimeUpdate");
static_assert(offsetof(PlayerExp_PlayerComponent_ServerFrameTimeUpdate, InFrameTimeStats) == 0x000000, "Member 'PlayerExp_PlayerComponent_ServerFrameTimeUpdate::InFrameTimeStats' has a wrong offset!");
static_assert(offsetof(PlayerExp_PlayerComponent_ServerFrameTimeUpdate, InHitchesDetected) == 0x0000C8, "Member 'PlayerExp_PlayerComponent_ServerFrameTimeUpdate::InHitchesDetected' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetBrushFromIconInfo
// 0x0010 (0x0010 - 0x0000)
struct RHAsyncImage_SetBrushFromIconInfo final
{
public:
	class UIconInfo*                              IconInfo;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHAsyncImage_SetBrushFromIconInfo) == 0x000008, "Wrong alignment on RHAsyncImage_SetBrushFromIconInfo");
static_assert(sizeof(RHAsyncImage_SetBrushFromIconInfo) == 0x000010, "Wrong size on RHAsyncImage_SetBrushFromIconInfo");
static_assert(offsetof(RHAsyncImage_SetBrushFromIconInfo, IconInfo) == 0x000000, "Member 'RHAsyncImage_SetBrushFromIconInfo::IconInfo' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromIconInfo, bMatchSize) == 0x000008, "Member 'RHAsyncImage_SetBrushFromIconInfo::bMatchSize' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetBrushFromItemIcon
// 0x0010 (0x0010 - 0x0000)
struct RHAsyncImage_SetBrushFromItemIcon final
{
public:
	const class UPlatformInventoryItem*           Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHAsyncImage_SetBrushFromItemIcon) == 0x000008, "Wrong alignment on RHAsyncImage_SetBrushFromItemIcon");
static_assert(sizeof(RHAsyncImage_SetBrushFromItemIcon) == 0x000010, "Wrong size on RHAsyncImage_SetBrushFromItemIcon");
static_assert(offsetof(RHAsyncImage_SetBrushFromItemIcon, Item) == 0x000000, "Member 'RHAsyncImage_SetBrushFromItemIcon::Item' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromItemIcon, bMatchSize) == 0x000008, "Member 'RHAsyncImage_SetBrushFromItemIcon::bMatchSize' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetBrushFromPathOnItem
// 0x0030 (0x0030 - 0x0000)
struct RHAsyncImage_SetBrushFromPathOnItem final
{
public:
	const class UPlatformInventoryItem*           Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHAsyncImage_SetBrushFromPathOnItem) == 0x000008, "Wrong alignment on RHAsyncImage_SetBrushFromPathOnItem");
static_assert(sizeof(RHAsyncImage_SetBrushFromPathOnItem) == 0x000030, "Wrong size on RHAsyncImage_SetBrushFromPathOnItem");
static_assert(offsetof(RHAsyncImage_SetBrushFromPathOnItem, Item) == 0x000000, "Member 'RHAsyncImage_SetBrushFromPathOnItem::Item' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromPathOnItem, Path) == 0x000008, "Member 'RHAsyncImage_SetBrushFromPathOnItem::Path' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromPathOnItem, bMatchSize) == 0x000028, "Member 'RHAsyncImage_SetBrushFromPathOnItem::bMatchSize' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetBrushFromSoftPath
// 0x0028 (0x0028 - 0x0000)
struct RHAsyncImage_SetBrushFromSoftPath final
{
public:
	struct FSoftObjectPath                        SoftPath;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHAsyncImage_SetBrushFromSoftPath) == 0x000008, "Wrong alignment on RHAsyncImage_SetBrushFromSoftPath");
static_assert(sizeof(RHAsyncImage_SetBrushFromSoftPath) == 0x000028, "Wrong size on RHAsyncImage_SetBrushFromSoftPath");
static_assert(offsetof(RHAsyncImage_SetBrushFromSoftPath, SoftPath) == 0x000000, "Member 'RHAsyncImage_SetBrushFromSoftPath::SoftPath' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromSoftPath, bMatchSize) == 0x000020, "Member 'RHAsyncImage_SetBrushFromSoftPath::bMatchSize' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetBrushFromTextureOnItem
// 0x0038 (0x0038 - 0x0000)
struct RHAsyncImage_SetBrushFromTextureOnItem final
{
public:
	const class UPlatformInventoryItem*           Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Texture;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHAsyncImage_SetBrushFromTextureOnItem) == 0x000008, "Wrong alignment on RHAsyncImage_SetBrushFromTextureOnItem");
static_assert(sizeof(RHAsyncImage_SetBrushFromTextureOnItem) == 0x000038, "Wrong size on RHAsyncImage_SetBrushFromTextureOnItem");
static_assert(offsetof(RHAsyncImage_SetBrushFromTextureOnItem, Item) == 0x000000, "Member 'RHAsyncImage_SetBrushFromTextureOnItem::Item' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromTextureOnItem, Texture) == 0x000008, "Member 'RHAsyncImage_SetBrushFromTextureOnItem::Texture' has a wrong offset!");
static_assert(offsetof(RHAsyncImage_SetBrushFromTextureOnItem, bMatchSize) == 0x000030, "Member 'RHAsyncImage_SetBrushFromTextureOnItem::bMatchSize' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetMaterialToUse
// 0x0008 (0x0008 - 0x0000)
struct RHAsyncImage_SetMaterialToUse final
{
public:
	class UMaterialInstanceDynamic*               InMID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHAsyncImage_SetMaterialToUse) == 0x000008, "Wrong alignment on RHAsyncImage_SetMaterialToUse");
static_assert(sizeof(RHAsyncImage_SetMaterialToUse) == 0x000008, "Wrong size on RHAsyncImage_SetMaterialToUse");
static_assert(offsetof(RHAsyncImage_SetMaterialToUse, InMID) == 0x000000, "Member 'RHAsyncImage_SetMaterialToUse::InMID' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.SetWaitingWidget
// 0x0008 (0x0008 - 0x0000)
struct RHAsyncImage_SetWaitingWidget final
{
public:
	class UWidget*                                InWaitingWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHAsyncImage_SetWaitingWidget) == 0x000008, "Wrong alignment on RHAsyncImage_SetWaitingWidget");
static_assert(sizeof(RHAsyncImage_SetWaitingWidget) == 0x000008, "Wrong size on RHAsyncImage_SetWaitingWidget");
static_assert(offsetof(RHAsyncImage_SetWaitingWidget, InWaitingWidget) == 0x000000, "Member 'RHAsyncImage_SetWaitingWidget::InWaitingWidget' has a wrong offset!");

// Function RallyHereStart.RHAsyncImage.IsCurrentlyAsyncLoading
// 0x0001 (0x0001 - 0x0000)
struct RHAsyncImage_IsCurrentlyAsyncLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHAsyncImage_IsCurrentlyAsyncLoading) == 0x000001, "Wrong alignment on RHAsyncImage_IsCurrentlyAsyncLoading");
static_assert(sizeof(RHAsyncImage_IsCurrentlyAsyncLoading) == 0x000001, "Wrong size on RHAsyncImage_IsCurrentlyAsyncLoading");
static_assert(offsetof(RHAsyncImage_IsCurrentlyAsyncLoading, ReturnValue) == 0x000000, "Member 'RHAsyncImage_IsCurrentlyAsyncLoading::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHAvatar.GetLargeAvatarInfo
// 0x0008 (0x0008 - 0x0000)
struct RHAvatar_GetLargeAvatarInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHAvatar_GetLargeAvatarInfo) == 0x000008, "Wrong alignment on RHAvatar_GetLargeAvatarInfo");
static_assert(sizeof(RHAvatar_GetLargeAvatarInfo) == 0x000008, "Wrong size on RHAvatar_GetLargeAvatarInfo");
static_assert(offsetof(RHAvatar_GetLargeAvatarInfo, ReturnValue) == 0x000000, "Member 'RHAvatar_GetLargeAvatarInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBanner.GetLargeBannerInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBanner_GetLargeBannerInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBanner_GetLargeBannerInfo) == 0x000008, "Wrong alignment on RHBanner_GetLargeBannerInfo");
static_assert(sizeof(RHBanner_GetLargeBannerInfo) == 0x000008, "Wrong size on RHBanner_GetLargeBannerInfo");
static_assert(offsetof(RHBanner_GetLargeBannerInfo, ReturnValue) == 0x000000, "Member 'RHBanner_GetLargeBannerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBanner.GetSmallBannerInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBanner_GetSmallBannerInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBanner_GetSmallBannerInfo) == 0x000008, "Wrong alignment on RHBanner_GetSmallBannerInfo");
static_assert(sizeof(RHBanner_GetSmallBannerInfo) == 0x000008, "Wrong size on RHBanner_GetSmallBannerInfo");
static_assert(offsetof(RHBanner_GetSmallBannerInfo, ReturnValue) == 0x000000, "Member 'RHBanner_GetSmallBannerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardItem.GetRewardLevel
// 0x0004 (0x0004 - 0x0000)
struct RHBattlepassRewardItem_GetRewardLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardItem_GetRewardLevel) == 0x000004, "Wrong alignment on RHBattlepassRewardItem_GetRewardLevel");
static_assert(sizeof(RHBattlepassRewardItem_GetRewardLevel) == 0x000004, "Wrong size on RHBattlepassRewardItem_GetRewardLevel");
static_assert(offsetof(RHBattlepassRewardItem_GetRewardLevel, ReturnValue) == 0x000000, "Member 'RHBattlepassRewardItem_GetRewardLevel::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassLevel.GetXPSpan
// 0x0004 (0x0004 - 0x0000)
struct RHBattlepassLevel_GetXPSpan final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassLevel_GetXPSpan) == 0x000004, "Wrong alignment on RHBattlepassLevel_GetXPSpan");
static_assert(sizeof(RHBattlepassLevel_GetXPSpan) == 0x000004, "Wrong size on RHBattlepassLevel_GetXPSpan");
static_assert(offsetof(RHBattlepassLevel_GetXPSpan, ReturnValue) == 0x000000, "Member 'RHBattlepassLevel_GetXPSpan::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHEvent.GetRemainingSeconds
// 0x0010 (0x0010 - 0x0000)
struct RHEvent_GetRemainingSeconds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHEvent_GetRemainingSeconds) == 0x000008, "Wrong alignment on RHEvent_GetRemainingSeconds");
static_assert(sizeof(RHEvent_GetRemainingSeconds) == 0x000010, "Wrong size on RHEvent_GetRemainingSeconds");
static_assert(offsetof(RHEvent_GetRemainingSeconds, WorldContextObject) == 0x000000, "Member 'RHEvent_GetRemainingSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHEvent_GetRemainingSeconds, ReturnValue) == 0x000008, "Member 'RHEvent_GetRemainingSeconds::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.BLUEPRINT_GetCurrentLevel
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepass_BLUEPRINT_GetCurrentLevel final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InstanceCount)>          Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_BLUEPRINT_GetCurrentLevel) == 0x000008, "Wrong alignment on RHBattlepass_BLUEPRINT_GetCurrentLevel");
static_assert(sizeof(RHBattlepass_BLUEPRINT_GetCurrentLevel) == 0x000018, "Wrong size on RHBattlepass_BLUEPRINT_GetCurrentLevel");
static_assert(offsetof(RHBattlepass_BLUEPRINT_GetCurrentLevel, PlayerInfo) == 0x000000, "Member 'RHBattlepass_BLUEPRINT_GetCurrentLevel::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHBattlepass_BLUEPRINT_GetCurrentLevel, Delegate) == 0x000008, "Member 'RHBattlepass_BLUEPRINT_GetCurrentLevel::Delegate' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.BLUEPRINT_GetTotalXpProgress
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepass_BLUEPRINT_GetTotalXpProgress final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InstanceCount)>          Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_BLUEPRINT_GetTotalXpProgress) == 0x000008, "Wrong alignment on RHBattlepass_BLUEPRINT_GetTotalXpProgress");
static_assert(sizeof(RHBattlepass_BLUEPRINT_GetTotalXpProgress) == 0x000018, "Wrong size on RHBattlepass_BLUEPRINT_GetTotalXpProgress");
static_assert(offsetof(RHBattlepass_BLUEPRINT_GetTotalXpProgress, PlayerInfo) == 0x000000, "Member 'RHBattlepass_BLUEPRINT_GetTotalXpProgress::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHBattlepass_BLUEPRINT_GetTotalXpProgress, Delegate) == 0x000008, "Member 'RHBattlepass_BLUEPRINT_GetTotalXpProgress::Delegate' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetInstantUnlockRewards
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepass_GetInstantUnlockRewards final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URHBattlepassRewardItem*>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_GetInstantUnlockRewards) == 0x000008, "Wrong alignment on RHBattlepass_GetInstantUnlockRewards");
static_assert(sizeof(RHBattlepass_GetInstantUnlockRewards) == 0x000018, "Wrong size on RHBattlepass_GetInstantUnlockRewards");
static_assert(offsetof(RHBattlepass_GetInstantUnlockRewards, WorldContextObject) == 0x000000, "Member 'RHBattlepass_GetInstantUnlockRewards::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHBattlepass_GetInstantUnlockRewards, ReturnValue) == 0x000008, "Member 'RHBattlepass_GetInstantUnlockRewards::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetLevels
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepass_GetLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URHBattlepassLevel*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_GetLevels) == 0x000008, "Wrong alignment on RHBattlepass_GetLevels");
static_assert(sizeof(RHBattlepass_GetLevels) == 0x000018, "Wrong size on RHBattlepass_GetLevels");
static_assert(offsetof(RHBattlepass_GetLevels, WorldContextObject) == 0x000000, "Member 'RHBattlepass_GetLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHBattlepass_GetLevels, ReturnValue) == 0x000008, "Member 'RHBattlepass_GetLevels::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetBattlepassLevel
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepass_GetBattlepassLevel final
{
public:
	int32                                         LevelNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHBattlepassLevel*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_GetBattlepassLevel) == 0x000008, "Wrong alignment on RHBattlepass_GetBattlepassLevel");
static_assert(sizeof(RHBattlepass_GetBattlepassLevel) == 0x000010, "Wrong size on RHBattlepass_GetBattlepassLevel");
static_assert(offsetof(RHBattlepass_GetBattlepassLevel, LevelNumber) == 0x000000, "Member 'RHBattlepass_GetBattlepassLevel::LevelNumber' has a wrong offset!");
static_assert(offsetof(RHBattlepass_GetBattlepassLevel, ReturnValue) == 0x000008, "Member 'RHBattlepass_GetBattlepassLevel::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetFreeIconInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBattlepass_GetFreeIconInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_GetFreeIconInfo) == 0x000008, "Wrong alignment on RHBattlepass_GetFreeIconInfo");
static_assert(sizeof(RHBattlepass_GetFreeIconInfo) == 0x000008, "Wrong size on RHBattlepass_GetFreeIconInfo");
static_assert(offsetof(RHBattlepass_GetFreeIconInfo, ReturnValue) == 0x000000, "Member 'RHBattlepass_GetFreeIconInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetLevelCount
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepass_GetLevelCount final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHBattlepass_GetLevelCount) == 0x000008, "Wrong alignment on RHBattlepass_GetLevelCount");
static_assert(sizeof(RHBattlepass_GetLevelCount) == 0x000010, "Wrong size on RHBattlepass_GetLevelCount");
static_assert(offsetof(RHBattlepass_GetLevelCount, WorldContextObject) == 0x000000, "Member 'RHBattlepass_GetLevelCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHBattlepass_GetLevelCount, ReturnValue) == 0x000008, "Member 'RHBattlepass_GetLevelCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepass.GetPremiumIconInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBattlepass_GetPremiumIconInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepass_GetPremiumIconInfo) == 0x000008, "Wrong alignment on RHBattlepass_GetPremiumIconInfo");
static_assert(sizeof(RHBattlepass_GetPremiumIconInfo) == 0x000008, "Wrong size on RHBattlepass_GetPremiumIconInfo");
static_assert(offsetof(RHBattlepass_GetPremiumIconInfo, ReturnValue) == 0x000000, "Member 'RHBattlepass_GetPremiumIconInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHActivatableWidget.GetEnableWidgets
// 0x0010 (0x0010 - 0x0000)
struct RHActivatableWidget_GetEnableWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHActivatableWidget_GetEnableWidgets) == 0x000008, "Wrong alignment on RHActivatableWidget_GetEnableWidgets");
static_assert(sizeof(RHActivatableWidget_GetEnableWidgets) == 0x000010, "Wrong size on RHActivatableWidget_GetEnableWidgets");
static_assert(offsetof(RHActivatableWidget_GetEnableWidgets, ReturnValue) == 0x000000, "Member 'RHActivatableWidget_GetEnableWidgets::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHActivatableWidget.GetInteractableWidgets
// 0x0010 (0x0010 - 0x0000)
struct RHActivatableWidget_GetInteractableWidgets final
{
public:
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHActivatableWidget_GetInteractableWidgets) == 0x000008, "Wrong alignment on RHActivatableWidget_GetInteractableWidgets");
static_assert(sizeof(RHActivatableWidget_GetInteractableWidgets) == 0x000010, "Wrong size on RHActivatableWidget_GetInteractableWidgets");
static_assert(offsetof(RHActivatableWidget_GetInteractableWidgets, ReturnValue) == 0x000000, "Member 'RHActivatableWidget_GetInteractableWidgets::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.AddContextAction
// 0x0020 (0x0020 - 0x0000)
struct RHWidget_AddContextAction final
{
public:
	class FName                                   ContextName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FormatAdditive;                                    // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_AddContextAction) == 0x000008, "Wrong alignment on RHWidget_AddContextAction");
static_assert(sizeof(RHWidget_AddContextAction) == 0x000020, "Wrong size on RHWidget_AddContextAction");
static_assert(offsetof(RHWidget_AddContextAction, ContextName) == 0x000000, "Member 'RHWidget_AddContextAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHWidget_AddContextAction, FormatAdditive) == 0x000008, "Member 'RHWidget_AddContextAction::FormatAdditive' has a wrong offset!");

// Function RallyHereStart.RHWidget.AddContextActions
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_AddContextActions final
{
public:
	TArray<class FName>                           ContextNames;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_AddContextActions) == 0x000008, "Wrong alignment on RHWidget_AddContextActions");
static_assert(sizeof(RHWidget_AddContextActions) == 0x000010, "Wrong size on RHWidget_AddContextActions");
static_assert(offsetof(RHWidget_AddContextActions, ContextNames) == 0x000000, "Member 'RHWidget_AddContextActions::ContextNames' has a wrong offset!");

// Function RallyHereStart.RHWidget.AddTickAnimation
// 0x002C (0x002C - 0x0000)
struct RHWidget_AddTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float ElapsedTime, float ElapsedAlpha)> UpdateEvent;                              // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FinishedEvent;                                     // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_AddTickAnimation) == 0x000004, "Wrong alignment on RHWidget_AddTickAnimation");
static_assert(sizeof(RHWidget_AddTickAnimation) == 0x00002C, "Wrong size on RHWidget_AddTickAnimation");
static_assert(offsetof(RHWidget_AddTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_AddTickAnimation::AnimName' has a wrong offset!");
static_assert(offsetof(RHWidget_AddTickAnimation, Duration) == 0x000008, "Member 'RHWidget_AddTickAnimation::Duration' has a wrong offset!");
static_assert(offsetof(RHWidget_AddTickAnimation, UpdateEvent) == 0x00000C, "Member 'RHWidget_AddTickAnimation::UpdateEvent' has a wrong offset!");
static_assert(offsetof(RHWidget_AddTickAnimation, FinishedEvent) == 0x00001C, "Member 'RHWidget_AddTickAnimation::FinishedEvent' has a wrong offset!");

// Function RallyHereStart.RHWidget.AddViewRoute
// 0x0020 (0x0020 - 0x0000)
struct RHWidget_AddViewRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearRouteStack;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Data;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_AddViewRoute) == 0x000008, "Wrong alignment on RHWidget_AddViewRoute");
static_assert(sizeof(RHWidget_AddViewRoute) == 0x000020, "Wrong size on RHWidget_AddViewRoute");
static_assert(offsetof(RHWidget_AddViewRoute, RouteTag) == 0x000000, "Member 'RHWidget_AddViewRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_AddViewRoute, ClearRouteStack) == 0x000008, "Member 'RHWidget_AddViewRoute::ClearRouteStack' has a wrong offset!");
static_assert(offsetof(RHWidget_AddViewRoute, ForceTransition) == 0x000009, "Member 'RHWidget_AddViewRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHWidget_AddViewRoute, Data) == 0x000010, "Member 'RHWidget_AddViewRoute::Data' has a wrong offset!");
static_assert(offsetof(RHWidget_AddViewRoute, ReturnValue) == 0x000018, "Member 'RHWidget_AddViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.AsyncLoadTexture2D
// 0x0028 (0x0028 - 0x0000)
struct RHWidget_AsyncLoadTexture2D final
{
public:
	TSoftObjectPtr<class UTexture2D>              Texture2DRef;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_AsyncLoadTexture2D) == 0x000008, "Wrong alignment on RHWidget_AsyncLoadTexture2D");
static_assert(sizeof(RHWidget_AsyncLoadTexture2D) == 0x000028, "Wrong size on RHWidget_AsyncLoadTexture2D");
static_assert(offsetof(RHWidget_AsyncLoadTexture2D, Texture2DRef) == 0x000000, "Member 'RHWidget_AsyncLoadTexture2D::Texture2DRef' has a wrong offset!");

// Function RallyHereStart.RHWidget.BindToInputManager
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_BindToInputManager final
{
public:
	int32                                         DefaultFocusGroup;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_BindToInputManager) == 0x000004, "Wrong alignment on RHWidget_BindToInputManager");
static_assert(sizeof(RHWidget_BindToInputManager) == 0x000004, "Wrong size on RHWidget_BindToInputManager");
static_assert(offsetof(RHWidget_BindToInputManager, DefaultFocusGroup) == 0x000000, "Member 'RHWidget_BindToInputManager::DefaultFocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.BindToViewportSizeChange
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_BindToViewportSizeChange final
{
public:
	TDelegate<void(const struct FIntPoint& ViewportSize)> InViewportEvent;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_BindToViewportSizeChange) == 0x000004, "Wrong alignment on RHWidget_BindToViewportSizeChange");
static_assert(sizeof(RHWidget_BindToViewportSizeChange) == 0x000010, "Wrong size on RHWidget_BindToViewportSizeChange");
static_assert(offsetof(RHWidget_BindToViewportSizeChange, InViewportEvent) == 0x000000, "Member 'RHWidget_BindToViewportSizeChange::InViewportEvent' has a wrong offset!");

// Function RallyHereStart.RHWidget.CanCloseOnLogout
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_CanCloseOnLogout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_CanCloseOnLogout) == 0x000001, "Wrong alignment on RHWidget_CanCloseOnLogout");
static_assert(sizeof(RHWidget_CanCloseOnLogout) == 0x000001, "Wrong size on RHWidget_CanCloseOnLogout");
static_assert(offsetof(RHWidget_CanCloseOnLogout, ReturnValue) == 0x000000, "Member 'RHWidget_CanCloseOnLogout::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ClearContextAction
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_ClearContextAction final
{
public:
	class FName                                   ContextName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ClearContextAction) == 0x000004, "Wrong alignment on RHWidget_ClearContextAction");
static_assert(sizeof(RHWidget_ClearContextAction) == 0x000008, "Wrong size on RHWidget_ClearContextAction");
static_assert(offsetof(RHWidget_ClearContextAction, ContextName) == 0x000000, "Member 'RHWidget_ClearContextAction::ContextName' has a wrong offset!");

// Function RallyHereStart.RHWidget.DisplayGenericError
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_DisplayGenericError final
{
public:
	class FString                                 sDesc;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_DisplayGenericError) == 0x000008, "Wrong alignment on RHWidget_DisplayGenericError");
static_assert(sizeof(RHWidget_DisplayGenericError) == 0x000010, "Wrong size on RHWidget_DisplayGenericError");
static_assert(offsetof(RHWidget_DisplayGenericError, sDesc) == 0x000000, "Member 'RHWidget_DisplayGenericError::sDesc' has a wrong offset!");

// Function RallyHereStart.RHWidget.DisplayGenericPopup
// 0x0020 (0x0020 - 0x0000)
struct RHWidget_DisplayGenericPopup final
{
public:
	class FString                                 sTitle;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sDesc;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_DisplayGenericPopup) == 0x000008, "Wrong alignment on RHWidget_DisplayGenericPopup");
static_assert(sizeof(RHWidget_DisplayGenericPopup) == 0x000020, "Wrong size on RHWidget_DisplayGenericPopup");
static_assert(offsetof(RHWidget_DisplayGenericPopup, sTitle) == 0x000000, "Member 'RHWidget_DisplayGenericPopup::sTitle' has a wrong offset!");
static_assert(offsetof(RHWidget_DisplayGenericPopup, sDesc) == 0x000010, "Member 'RHWidget_DisplayGenericPopup::sDesc' has a wrong offset!");

// Function RallyHereStart.RHWidget.ExplicitNavigateDown
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ExplicitNavigateDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ExplicitNavigateDown) == 0x000001, "Wrong alignment on RHWidget_ExplicitNavigateDown");
static_assert(sizeof(RHWidget_ExplicitNavigateDown) == 0x000001, "Wrong size on RHWidget_ExplicitNavigateDown");
static_assert(offsetof(RHWidget_ExplicitNavigateDown, ReturnValue) == 0x000000, "Member 'RHWidget_ExplicitNavigateDown::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ExplicitNavigateLeft
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ExplicitNavigateLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ExplicitNavigateLeft) == 0x000001, "Wrong alignment on RHWidget_ExplicitNavigateLeft");
static_assert(sizeof(RHWidget_ExplicitNavigateLeft) == 0x000001, "Wrong size on RHWidget_ExplicitNavigateLeft");
static_assert(offsetof(RHWidget_ExplicitNavigateLeft, ReturnValue) == 0x000000, "Member 'RHWidget_ExplicitNavigateLeft::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ExplicitNavigateRight
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ExplicitNavigateRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ExplicitNavigateRight) == 0x000001, "Wrong alignment on RHWidget_ExplicitNavigateRight");
static_assert(sizeof(RHWidget_ExplicitNavigateRight) == 0x000001, "Wrong size on RHWidget_ExplicitNavigateRight");
static_assert(offsetof(RHWidget_ExplicitNavigateRight, ReturnValue) == 0x000000, "Member 'RHWidget_ExplicitNavigateRight::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ExplicitNavigateUp
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ExplicitNavigateUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ExplicitNavigateUp) == 0x000001, "Wrong alignment on RHWidget_ExplicitNavigateUp");
static_assert(sizeof(RHWidget_ExplicitNavigateUp) == 0x000001, "Wrong size on RHWidget_ExplicitNavigateUp");
static_assert(offsetof(RHWidget_ExplicitNavigateUp, ReturnValue) == 0x000000, "Member 'RHWidget_ExplicitNavigateUp::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.FocusGroupNavigateDownFailure
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_FocusGroupNavigateDownFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_FocusGroupNavigateDownFailure) == 0x000004, "Wrong alignment on RHWidget_FocusGroupNavigateDownFailure");
static_assert(sizeof(RHWidget_FocusGroupNavigateDownFailure) == 0x000004, "Wrong size on RHWidget_FocusGroupNavigateDownFailure");
static_assert(offsetof(RHWidget_FocusGroupNavigateDownFailure, FocusGroup) == 0x000000, "Member 'RHWidget_FocusGroupNavigateDownFailure::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.FocusGroupNavigateLeftFailure
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_FocusGroupNavigateLeftFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_FocusGroupNavigateLeftFailure) == 0x000004, "Wrong alignment on RHWidget_FocusGroupNavigateLeftFailure");
static_assert(sizeof(RHWidget_FocusGroupNavigateLeftFailure) == 0x000004, "Wrong size on RHWidget_FocusGroupNavigateLeftFailure");
static_assert(offsetof(RHWidget_FocusGroupNavigateLeftFailure, FocusGroup) == 0x000000, "Member 'RHWidget_FocusGroupNavigateLeftFailure::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.FocusGroupNavigateRightFailure
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_FocusGroupNavigateRightFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_FocusGroupNavigateRightFailure) == 0x000004, "Wrong alignment on RHWidget_FocusGroupNavigateRightFailure");
static_assert(sizeof(RHWidget_FocusGroupNavigateRightFailure) == 0x000004, "Wrong size on RHWidget_FocusGroupNavigateRightFailure");
static_assert(offsetof(RHWidget_FocusGroupNavigateRightFailure, FocusGroup) == 0x000000, "Member 'RHWidget_FocusGroupNavigateRightFailure::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.FocusGroupNavigateUpFailure
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_FocusGroupNavigateUpFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_FocusGroupNavigateUpFailure) == 0x000004, "Wrong alignment on RHWidget_FocusGroupNavigateUpFailure");
static_assert(sizeof(RHWidget_FocusGroupNavigateUpFailure) == 0x000004, "Wrong size on RHWidget_FocusGroupNavigateUpFailure");
static_assert(offsetof(RHWidget_FocusGroupNavigateUpFailure, FocusGroup) == 0x000000, "Member 'RHWidget_FocusGroupNavigateUpFailure::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.GamepadButtonDown
// 0x00D0 (0x00D0 - 0x0000)
struct RHWidget_GamepadButtonDown final
{
public:
	struct FKey                                   Button;                                            // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0018(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GamepadButtonDown) == 0x000008, "Wrong alignment on RHWidget_GamepadButtonDown");
static_assert(sizeof(RHWidget_GamepadButtonDown) == 0x0000D0, "Wrong size on RHWidget_GamepadButtonDown");
static_assert(offsetof(RHWidget_GamepadButtonDown, Button) == 0x000000, "Member 'RHWidget_GamepadButtonDown::Button' has a wrong offset!");
static_assert(offsetof(RHWidget_GamepadButtonDown, ReturnValue) == 0x000018, "Member 'RHWidget_GamepadButtonDown::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GamepadButtonUp
// 0x00D0 (0x00D0 - 0x0000)
struct RHWidget_GamepadButtonUp final
{
public:
	struct FKey                                   Button;                                            // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x0018(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GamepadButtonUp) == 0x000008, "Wrong alignment on RHWidget_GamepadButtonUp");
static_assert(sizeof(RHWidget_GamepadButtonUp) == 0x0000D0, "Wrong size on RHWidget_GamepadButtonUp");
static_assert(offsetof(RHWidget_GamepadButtonUp, Button) == 0x000000, "Member 'RHWidget_GamepadButtonUp::Button' has a wrong offset!");
static_assert(offsetof(RHWidget_GamepadButtonUp, ReturnValue) == 0x000018, "Member 'RHWidget_GamepadButtonUp::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GameStateSet
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GameStateSet final
{
public:
	class AGameStateBase*                         GameState;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GameStateSet) == 0x000008, "Wrong alignment on RHWidget_GameStateSet");
static_assert(sizeof(RHWidget_GameStateSet) == 0x000008, "Wrong size on RHWidget_GameStateSet");
static_assert(offsetof(RHWidget_GameStateSet, GameState) == 0x000000, "Member 'RHWidget_GameStateSet::GameState' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetBlockerClickToClose
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_GetBlockerClickToClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetBlockerClickToClose) == 0x000001, "Wrong alignment on RHWidget_GetBlockerClickToClose");
static_assert(sizeof(RHWidget_GetBlockerClickToClose) == 0x000001, "Wrong size on RHWidget_GetBlockerClickToClose");
static_assert(offsetof(RHWidget_GetBlockerClickToClose, ReturnValue) == 0x000000, "Member 'RHWidget_GetBlockerClickToClose::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetCurrentFocusForGroup
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_GetCurrentFocusForGroup final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetCurrentFocusForGroup) == 0x000008, "Wrong alignment on RHWidget_GetCurrentFocusForGroup");
static_assert(sizeof(RHWidget_GetCurrentFocusForGroup) == 0x000010, "Wrong size on RHWidget_GetCurrentFocusForGroup");
static_assert(offsetof(RHWidget_GetCurrentFocusForGroup, FocusGroup) == 0x000000, "Member 'RHWidget_GetCurrentFocusForGroup::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_GetCurrentFocusForGroup, ReturnValue) == 0x000008, "Member 'RHWidget_GetCurrentFocusForGroup::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetCurrentFocusGroup
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GetCurrentFocusGroup final
{
public:
	int32                                         OutFocusGroup;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_GetCurrentFocusGroup) == 0x000004, "Wrong alignment on RHWidget_GetCurrentFocusGroup");
static_assert(sizeof(RHWidget_GetCurrentFocusGroup) == 0x000008, "Wrong size on RHWidget_GetCurrentFocusGroup");
static_assert(offsetof(RHWidget_GetCurrentFocusGroup, OutFocusGroup) == 0x000000, "Member 'RHWidget_GetCurrentFocusGroup::OutFocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_GetCurrentFocusGroup, ReturnValue) == 0x000004, "Member 'RHWidget_GetCurrentFocusGroup::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetGeometryFromLastTick
// 0x0038 (0x0038 - 0x0000)
struct RHWidget_GetGeometryFromLastTick final
{
public:
	struct FGeometry                              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetGeometryFromLastTick) == 0x000004, "Wrong alignment on RHWidget_GetGeometryFromLastTick");
static_assert(sizeof(RHWidget_GetGeometryFromLastTick) == 0x000038, "Wrong size on RHWidget_GetGeometryFromLastTick");
static_assert(offsetof(RHWidget_GetGeometryFromLastTick, ReturnValue) == 0x000000, "Member 'RHWidget_GetGeometryFromLastTick::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetIsComponent
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_GetIsComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetIsComponent) == 0x000001, "Wrong alignment on RHWidget_GetIsComponent");
static_assert(sizeof(RHWidget_GetIsComponent) == 0x000001, "Wrong size on RHWidget_GetIsComponent");
static_assert(offsetof(RHWidget_GetIsComponent, ReturnValue) == 0x000000, "Member 'RHWidget_GetIsComponent::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetTickAnimationInfo
// 0x0038 (0x0038 - 0x0000)
struct RHWidget_GetTickAnimationInfo final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTickAnimationParams                   OutAnimParams;                                     // 0x0008(0x002C)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_GetTickAnimationInfo) == 0x000004, "Wrong alignment on RHWidget_GetTickAnimationInfo");
static_assert(sizeof(RHWidget_GetTickAnimationInfo) == 0x000038, "Wrong size on RHWidget_GetTickAnimationInfo");
static_assert(offsetof(RHWidget_GetTickAnimationInfo, AnimName) == 0x000000, "Member 'RHWidget_GetTickAnimationInfo::AnimName' has a wrong offset!");
static_assert(offsetof(RHWidget_GetTickAnimationInfo, OutAnimParams) == 0x000008, "Member 'RHWidget_GetTickAnimationInfo::OutAnimParams' has a wrong offset!");
static_assert(offsetof(RHWidget_GetTickAnimationInfo, ReturnValue) == 0x000034, "Member 'RHWidget_GetTickAnimationInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetUsesBlocker
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_GetUsesBlocker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetUsesBlocker) == 0x000001, "Wrong alignment on RHWidget_GetUsesBlocker");
static_assert(sizeof(RHWidget_GetUsesBlocker) == 0x000001, "Wrong size on RHWidget_GetUsesBlocker");
static_assert(offsetof(RHWidget_GetUsesBlocker, ReturnValue) == 0x000000, "Member 'RHWidget_GetUsesBlocker::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.HideWidget
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_HideWidget final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_HideWidget) == 0x000001, "Wrong alignment on RHWidget_HideWidget");
static_assert(sizeof(RHWidget_HideWidget) == 0x000001, "Wrong size on RHWidget_HideWidget");
static_assert(offsetof(RHWidget_HideWidget, InVisibility) == 0x000000, "Member 'RHWidget_HideWidget::InVisibility' has a wrong offset!");

// Function RallyHereStart.RHWidget.InheritFocusGroupFromWidget
// 0x0018 (0x0018 - 0x0000)
struct RHWidget_InheritFocusGroupFromWidget final
{
public:
	int32                                         TargetFocusGroupNum;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              SourceWidget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceFocusGroupNum;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_InheritFocusGroupFromWidget) == 0x000008, "Wrong alignment on RHWidget_InheritFocusGroupFromWidget");
static_assert(sizeof(RHWidget_InheritFocusGroupFromWidget) == 0x000018, "Wrong size on RHWidget_InheritFocusGroupFromWidget");
static_assert(offsetof(RHWidget_InheritFocusGroupFromWidget, TargetFocusGroupNum) == 0x000000, "Member 'RHWidget_InheritFocusGroupFromWidget::TargetFocusGroupNum' has a wrong offset!");
static_assert(offsetof(RHWidget_InheritFocusGroupFromWidget, SourceWidget) == 0x000008, "Member 'RHWidget_InheritFocusGroupFromWidget::SourceWidget' has a wrong offset!");
static_assert(offsetof(RHWidget_InheritFocusGroupFromWidget, SourceFocusGroupNum) == 0x000010, "Member 'RHWidget_InheritFocusGroupFromWidget::SourceFocusGroupNum' has a wrong offset!");

// Function RallyHereStart.RHWidget.IsFocusEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_IsFocusEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_IsFocusEnabled) == 0x000001, "Wrong alignment on RHWidget_IsFocusEnabled");
static_assert(sizeof(RHWidget_IsFocusEnabled) == 0x000001, "Wrong size on RHWidget_IsFocusEnabled");
static_assert(offsetof(RHWidget_IsFocusEnabled, ReturnValue) == 0x000000, "Member 'RHWidget_IsFocusEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.IsTopViewRoute
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_IsTopViewRoute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_IsTopViewRoute) == 0x000001, "Wrong alignment on RHWidget_IsTopViewRoute");
static_assert(sizeof(RHWidget_IsTopViewRoute) == 0x000001, "Wrong size on RHWidget_IsTopViewRoute");
static_assert(offsetof(RHWidget_IsTopViewRoute, ReturnValue) == 0x000000, "Member 'RHWidget_IsTopViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.NativeFocusGroupNavigateDownFailure
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_NativeFocusGroupNavigateDownFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NativeFocusGroupNavigateDownFailure) == 0x000008, "Wrong alignment on RHWidget_NativeFocusGroupNavigateDownFailure");
static_assert(sizeof(RHWidget_NativeFocusGroupNavigateDownFailure) == 0x000010, "Wrong size on RHWidget_NativeFocusGroupNavigateDownFailure");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateDownFailure, FocusGroup) == 0x000000, "Member 'RHWidget_NativeFocusGroupNavigateDownFailure::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateDownFailure, Widget) == 0x000008, "Member 'RHWidget_NativeFocusGroupNavigateDownFailure::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.NativeFocusGroupNavigateLeftFailure
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_NativeFocusGroupNavigateLeftFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NativeFocusGroupNavigateLeftFailure) == 0x000008, "Wrong alignment on RHWidget_NativeFocusGroupNavigateLeftFailure");
static_assert(sizeof(RHWidget_NativeFocusGroupNavigateLeftFailure) == 0x000010, "Wrong size on RHWidget_NativeFocusGroupNavigateLeftFailure");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateLeftFailure, FocusGroup) == 0x000000, "Member 'RHWidget_NativeFocusGroupNavigateLeftFailure::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateLeftFailure, Widget) == 0x000008, "Member 'RHWidget_NativeFocusGroupNavigateLeftFailure::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.NativeFocusGroupNavigateRightFailure
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_NativeFocusGroupNavigateRightFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NativeFocusGroupNavigateRightFailure) == 0x000008, "Wrong alignment on RHWidget_NativeFocusGroupNavigateRightFailure");
static_assert(sizeof(RHWidget_NativeFocusGroupNavigateRightFailure) == 0x000010, "Wrong size on RHWidget_NativeFocusGroupNavigateRightFailure");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateRightFailure, FocusGroup) == 0x000000, "Member 'RHWidget_NativeFocusGroupNavigateRightFailure::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateRightFailure, Widget) == 0x000008, "Member 'RHWidget_NativeFocusGroupNavigateRightFailure::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.NativeFocusGroupNavigateUpFailure
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_NativeFocusGroupNavigateUpFailure final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NativeFocusGroupNavigateUpFailure) == 0x000008, "Wrong alignment on RHWidget_NativeFocusGroupNavigateUpFailure");
static_assert(sizeof(RHWidget_NativeFocusGroupNavigateUpFailure) == 0x000010, "Wrong size on RHWidget_NativeFocusGroupNavigateUpFailure");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateUpFailure, FocusGroup) == 0x000000, "Member 'RHWidget_NativeFocusGroupNavigateUpFailure::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_NativeFocusGroupNavigateUpFailure, Widget) == 0x000008, "Member 'RHWidget_NativeFocusGroupNavigateUpFailure::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.NavigateBack
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_NavigateBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NavigateBack) == 0x000001, "Wrong alignment on RHWidget_NavigateBack");
static_assert(sizeof(RHWidget_NavigateBack) == 0x000001, "Wrong size on RHWidget_NavigateBack");
static_assert(offsetof(RHWidget_NavigateBack, ReturnValue) == 0x000000, "Member 'RHWidget_NavigateBack::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.NavigateBackPressed
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_NavigateBackPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NavigateBackPressed) == 0x000001, "Wrong alignment on RHWidget_NavigateBackPressed");
static_assert(sizeof(RHWidget_NavigateBackPressed) == 0x000001, "Wrong size on RHWidget_NavigateBackPressed");
static_assert(offsetof(RHWidget_NavigateBackPressed, ReturnValue) == 0x000000, "Member 'RHWidget_NavigateBackPressed::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.NavigateConfirm
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_NavigateConfirm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NavigateConfirm) == 0x000001, "Wrong alignment on RHWidget_NavigateConfirm");
static_assert(sizeof(RHWidget_NavigateConfirm) == 0x000001, "Wrong size on RHWidget_NavigateConfirm");
static_assert(offsetof(RHWidget_NavigateConfirm, ReturnValue) == 0x000000, "Member 'RHWidget_NavigateConfirm::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.NavigateConfirmPressed
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_NavigateConfirmPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_NavigateConfirmPressed) == 0x000001, "Wrong alignment on RHWidget_NavigateConfirmPressed");
static_assert(sizeof(RHWidget_NavigateConfirmPressed) == 0x000001, "Wrong size on RHWidget_NavigateConfirmPressed");
static_assert(offsetof(RHWidget_NavigateConfirmPressed, ReturnValue) == 0x000000, "Member 'RHWidget_NavigateConfirmPressed::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.PauseTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_PauseTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_PauseTickAnimation) == 0x000004, "Wrong alignment on RHWidget_PauseTickAnimation");
static_assert(sizeof(RHWidget_PauseTickAnimation) == 0x000008, "Wrong size on RHWidget_PauseTickAnimation");
static_assert(offsetof(RHWidget_PauseTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_PauseTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.PlayTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_PlayTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_PlayTickAnimation) == 0x000004, "Wrong alignment on RHWidget_PlayTickAnimation");
static_assert(sizeof(RHWidget_PlayTickAnimation) == 0x000008, "Wrong size on RHWidget_PlayTickAnimation");
static_assert(offsetof(RHWidget_PlayTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_PlayTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.RegisterWidgetToInputManager
// 0x0030 (0x0030 - 0x0000)
struct RHWidget_RegisterWidgetToInputManager final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusGroup;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Up;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Down;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Left;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Right;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_RegisterWidgetToInputManager) == 0x000008, "Wrong alignment on RHWidget_RegisterWidgetToInputManager");
static_assert(sizeof(RHWidget_RegisterWidgetToInputManager) == 0x000030, "Wrong size on RHWidget_RegisterWidgetToInputManager");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, Widget) == 0x000000, "Member 'RHWidget_RegisterWidgetToInputManager::Widget' has a wrong offset!");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, FocusGroup) == 0x000008, "Member 'RHWidget_RegisterWidgetToInputManager::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, Up) == 0x000010, "Member 'RHWidget_RegisterWidgetToInputManager::Up' has a wrong offset!");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, Down) == 0x000018, "Member 'RHWidget_RegisterWidgetToInputManager::Down' has a wrong offset!");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, Left) == 0x000020, "Member 'RHWidget_RegisterWidgetToInputManager::Left' has a wrong offset!");
static_assert(offsetof(RHWidget_RegisterWidgetToInputManager, Right) == 0x000028, "Member 'RHWidget_RegisterWidgetToInputManager::Right' has a wrong offset!");

// Function RallyHereStart.RHWidget.RemoveTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_RemoveTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_RemoveTickAnimation) == 0x000004, "Wrong alignment on RHWidget_RemoveTickAnimation");
static_assert(sizeof(RHWidget_RemoveTickAnimation) == 0x000008, "Wrong size on RHWidget_RemoveTickAnimation");
static_assert(offsetof(RHWidget_RemoveTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_RemoveTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.RemoveTopViewRoute
// 0x0002 (0x0002 - 0x0000)
struct RHWidget_RemoveTopViewRoute final
{
public:
	bool                                          ForceTransition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_RemoveTopViewRoute) == 0x000001, "Wrong alignment on RHWidget_RemoveTopViewRoute");
static_assert(sizeof(RHWidget_RemoveTopViewRoute) == 0x000002, "Wrong size on RHWidget_RemoveTopViewRoute");
static_assert(offsetof(RHWidget_RemoveTopViewRoute, ForceTransition) == 0x000000, "Member 'RHWidget_RemoveTopViewRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHWidget_RemoveTopViewRoute, ReturnValue) == 0x000001, "Member 'RHWidget_RemoveTopViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.RemoveViewRoute
// 0x000C (0x000C - 0x0000)
struct RHWidget_RemoveViewRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_RemoveViewRoute) == 0x000004, "Wrong alignment on RHWidget_RemoveViewRoute");
static_assert(sizeof(RHWidget_RemoveViewRoute) == 0x00000C, "Wrong size on RHWidget_RemoveViewRoute");
static_assert(offsetof(RHWidget_RemoveViewRoute, RouteTag) == 0x000000, "Member 'RHWidget_RemoveViewRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_RemoveViewRoute, ForceTransition) == 0x000008, "Member 'RHWidget_RemoveViewRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHWidget_RemoveViewRoute, ReturnValue) == 0x000009, "Member 'RHWidget_RemoveViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ResumeTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_ResumeTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ResumeTickAnimation) == 0x000004, "Wrong alignment on RHWidget_ResumeTickAnimation");
static_assert(sizeof(RHWidget_ResumeTickAnimation) == 0x000008, "Wrong size on RHWidget_ResumeTickAnimation");
static_assert(offsetof(RHWidget_ResumeTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_ResumeTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetAllAnimationsPlaybackSpeed
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_SetAllAnimationsPlaybackSpeed final
{
public:
	float                                         PlaybackSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetAllAnimationsPlaybackSpeed) == 0x000004, "Wrong alignment on RHWidget_SetAllAnimationsPlaybackSpeed");
static_assert(sizeof(RHWidget_SetAllAnimationsPlaybackSpeed) == 0x000004, "Wrong size on RHWidget_SetAllAnimationsPlaybackSpeed");
static_assert(offsetof(RHWidget_SetAllAnimationsPlaybackSpeed, PlaybackSpeed) == 0x000000, "Member 'RHWidget_SetAllAnimationsPlaybackSpeed::PlaybackSpeed' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetContextAction
// 0x0018 (0x0018 - 0x0000)
struct RHWidget_SetContextAction final
{
public:
	class FName                                   ContextName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             EventCallback;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetContextAction) == 0x000004, "Wrong alignment on RHWidget_SetContextAction");
static_assert(sizeof(RHWidget_SetContextAction) == 0x000018, "Wrong size on RHWidget_SetContextAction");
static_assert(offsetof(RHWidget_SetContextAction, ContextName) == 0x000000, "Member 'RHWidget_SetContextAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHWidget_SetContextAction, EventCallback) == 0x000008, "Member 'RHWidget_SetContextAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetContextCycleAction
// 0x0018 (0x0018 - 0x0000)
struct RHWidget_SetContextCycleAction final
{
public:
	class FName                                   ContextName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bNext)>                   EventCallback;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetContextCycleAction) == 0x000004, "Wrong alignment on RHWidget_SetContextCycleAction");
static_assert(sizeof(RHWidget_SetContextCycleAction) == 0x000018, "Wrong size on RHWidget_SetContextCycleAction");
static_assert(offsetof(RHWidget_SetContextCycleAction, ContextName) == 0x000000, "Member 'RHWidget_SetContextCycleAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHWidget_SetContextCycleAction, EventCallback) == 0x000008, "Member 'RHWidget_SetContextCycleAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetContextHoldReleaseAction
// 0x0028 (0x0028 - 0x0000)
struct RHWidget_SetContextHoldReleaseAction final
{
public:
	class FName                                   ContextName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float fPercentage)>            UpdateCallback;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EContextActionHoldReleaseState Status)> EventCallback;                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetContextHoldReleaseAction) == 0x000004, "Wrong alignment on RHWidget_SetContextHoldReleaseAction");
static_assert(sizeof(RHWidget_SetContextHoldReleaseAction) == 0x000028, "Wrong size on RHWidget_SetContextHoldReleaseAction");
static_assert(offsetof(RHWidget_SetContextHoldReleaseAction, ContextName) == 0x000000, "Member 'RHWidget_SetContextHoldReleaseAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHWidget_SetContextHoldReleaseAction, UpdateCallback) == 0x000008, "Member 'RHWidget_SetContextHoldReleaseAction::UpdateCallback' has a wrong offset!");
static_assert(offsetof(RHWidget_SetContextHoldReleaseAction, EventCallback) == 0x000018, "Member 'RHWidget_SetContextHoldReleaseAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetDefaultFocusForGroup
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_SetDefaultFocusForGroup final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusGroup;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_SetDefaultFocusForGroup) == 0x000008, "Wrong alignment on RHWidget_SetDefaultFocusForGroup");
static_assert(sizeof(RHWidget_SetDefaultFocusForGroup) == 0x000010, "Wrong size on RHWidget_SetDefaultFocusForGroup");
static_assert(offsetof(RHWidget_SetDefaultFocusForGroup, Widget) == 0x000000, "Member 'RHWidget_SetDefaultFocusForGroup::Widget' has a wrong offset!");
static_assert(offsetof(RHWidget_SetDefaultFocusForGroup, FocusGroup) == 0x000008, "Member 'RHWidget_SetDefaultFocusForGroup::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetFocusToGroup
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_SetFocusToGroup final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepLastFocus;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_SetFocusToGroup) == 0x000004, "Wrong alignment on RHWidget_SetFocusToGroup");
static_assert(sizeof(RHWidget_SetFocusToGroup) == 0x000008, "Wrong size on RHWidget_SetFocusToGroup");
static_assert(offsetof(RHWidget_SetFocusToGroup, FocusGroup) == 0x000000, "Member 'RHWidget_SetFocusToGroup::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_SetFocusToGroup, KeepLastFocus) == 0x000004, "Member 'RHWidget_SetFocusToGroup::KeepLastFocus' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetFocusToThis
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_SetFocusToThis final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetFocusToThis) == 0x000008, "Wrong alignment on RHWidget_SetFocusToThis");
static_assert(sizeof(RHWidget_SetFocusToThis) == 0x000008, "Wrong size on RHWidget_SetFocusToThis");
static_assert(offsetof(RHWidget_SetFocusToThis, ReturnValue) == 0x000000, "Member 'RHWidget_SetFocusToThis::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetFocusToWidgetOfGroup
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_SetFocusToWidgetOfGroup final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetFocusToWidgetOfGroup) == 0x000008, "Wrong alignment on RHWidget_SetFocusToWidgetOfGroup");
static_assert(sizeof(RHWidget_SetFocusToWidgetOfGroup) == 0x000010, "Wrong size on RHWidget_SetFocusToWidgetOfGroup");
static_assert(offsetof(RHWidget_SetFocusToWidgetOfGroup, FocusGroup) == 0x000000, "Member 'RHWidget_SetFocusToWidgetOfGroup::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_SetFocusToWidgetOfGroup, Widget) == 0x000008, "Member 'RHWidget_SetFocusToWidgetOfGroup::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetPendingRouteData
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_SetPendingRouteData final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetPendingRouteData) == 0x000008, "Wrong alignment on RHWidget_SetPendingRouteData");
static_assert(sizeof(RHWidget_SetPendingRouteData) == 0x000010, "Wrong size on RHWidget_SetPendingRouteData");
static_assert(offsetof(RHWidget_SetPendingRouteData, RouteTag) == 0x000000, "Member 'RHWidget_SetPendingRouteData::RouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_SetPendingRouteData, Data) == 0x000008, "Member 'RHWidget_SetPendingRouteData::Data' has a wrong offset!");

// Function RallyHereStart.RHWidget.SetRouteTag
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_SetRouteTag final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SetRouteTag) == 0x000004, "Wrong alignment on RHWidget_SetRouteTag");
static_assert(sizeof(RHWidget_SetRouteTag) == 0x000008, "Wrong size on RHWidget_SetRouteTag");
static_assert(offsetof(RHWidget_SetRouteTag, RouteTag) == 0x000000, "Member 'RHWidget_SetRouteTag::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHWidget.ShowWidget
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ShowWidget final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ShowWidget) == 0x000001, "Wrong alignment on RHWidget_ShowWidget");
static_assert(sizeof(RHWidget_ShowWidget) == 0x000001, "Wrong size on RHWidget_ShowWidget");
static_assert(offsetof(RHWidget_ShowWidget, InVisibility) == 0x000000, "Member 'RHWidget_ShowWidget::InVisibility' has a wrong offset!");

// Function RallyHereStart.RHWidget.SkipToEndTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_SkipToEndTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_SkipToEndTickAnimation) == 0x000004, "Wrong alignment on RHWidget_SkipToEndTickAnimation");
static_assert(sizeof(RHWidget_SkipToEndTickAnimation) == 0x000008, "Wrong size on RHWidget_SkipToEndTickAnimation");
static_assert(offsetof(RHWidget_SkipToEndTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_SkipToEndTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.StartHideSequence
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_StartHideSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_StartHideSequence) == 0x000004, "Wrong alignment on RHWidget_StartHideSequence");
static_assert(sizeof(RHWidget_StartHideSequence) == 0x000010, "Wrong size on RHWidget_StartHideSequence");
static_assert(offsetof(RHWidget_StartHideSequence, FromRoute) == 0x000000, "Member 'RHWidget_StartHideSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(RHWidget_StartHideSequence, ToRoute) == 0x000008, "Member 'RHWidget_StartHideSequence::ToRoute' has a wrong offset!");

// Function RallyHereStart.RHWidget.StartShowSequence
// 0x0010 (0x0010 - 0x0000)
struct RHWidget_StartShowSequence final
{
public:
	struct FGameplayTag                           FromRoute;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ToRoute;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_StartShowSequence) == 0x000004, "Wrong alignment on RHWidget_StartShowSequence");
static_assert(sizeof(RHWidget_StartShowSequence) == 0x000010, "Wrong size on RHWidget_StartShowSequence");
static_assert(offsetof(RHWidget_StartShowSequence, FromRoute) == 0x000000, "Member 'RHWidget_StartShowSequence::FromRoute' has a wrong offset!");
static_assert(offsetof(RHWidget_StartShowSequence, ToRoute) == 0x000008, "Member 'RHWidget_StartShowSequence::ToRoute' has a wrong offset!");

// Function RallyHereStart.RHWidget.StopTickAnimation
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_StopTickAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_StopTickAnimation) == 0x000004, "Wrong alignment on RHWidget_StopTickAnimation");
static_assert(sizeof(RHWidget_StopTickAnimation) == 0x000008, "Wrong size on RHWidget_StopTickAnimation");
static_assert(offsetof(RHWidget_StopTickAnimation, AnimName) == 0x000000, "Member 'RHWidget_StopTickAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.RHWidget.SwapViewRoute
// 0x0014 (0x0014 - 0x0000)
struct RHWidget_SwapViewRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SwapTargetRouteTag;                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_SwapViewRoute) == 0x000004, "Wrong alignment on RHWidget_SwapViewRoute");
static_assert(sizeof(RHWidget_SwapViewRoute) == 0x000014, "Wrong size on RHWidget_SwapViewRoute");
static_assert(offsetof(RHWidget_SwapViewRoute, RouteTag) == 0x000000, "Member 'RHWidget_SwapViewRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_SwapViewRoute, SwapTargetRouteTag) == 0x000008, "Member 'RHWidget_SwapViewRoute::SwapTargetRouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_SwapViewRoute, ForceTransition) == 0x000010, "Member 'RHWidget_SwapViewRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHWidget_SwapViewRoute, ReturnValue) == 0x000011, "Member 'RHWidget_SwapViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ToggleMobileLayout
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ToggleMobileLayout final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ToggleMobileLayout) == 0x000001, "Wrong alignment on RHWidget_ToggleMobileLayout");
static_assert(sizeof(RHWidget_ToggleMobileLayout) == 0x000001, "Wrong size on RHWidget_ToggleMobileLayout");
static_assert(offsetof(RHWidget_ToggleMobileLayout, InputState) == 0x000000, "Member 'RHWidget_ToggleMobileLayout::InputState' has a wrong offset!");

// Function RallyHereStart.RHWidget.UnregisterFocusGroup
// 0x0004 (0x0004 - 0x0000)
struct RHWidget_UnregisterFocusGroup final
{
public:
	int32                                         FocusGroup;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_UnregisterFocusGroup) == 0x000004, "Wrong alignment on RHWidget_UnregisterFocusGroup");
static_assert(sizeof(RHWidget_UnregisterFocusGroup) == 0x000004, "Wrong size on RHWidget_UnregisterFocusGroup");
static_assert(offsetof(RHWidget_UnregisterFocusGroup, FocusGroup) == 0x000000, "Member 'RHWidget_UnregisterFocusGroup::FocusGroup' has a wrong offset!");

// Function RallyHereStart.RHWidget.UnregisterWidgetFromInputManager
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_UnregisterWidgetFromInputManager final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_UnregisterWidgetFromInputManager) == 0x000008, "Wrong alignment on RHWidget_UnregisterWidgetFromInputManager");
static_assert(sizeof(RHWidget_UnregisterWidgetFromInputManager) == 0x000008, "Wrong size on RHWidget_UnregisterWidgetFromInputManager");
static_assert(offsetof(RHWidget_UnregisterWidgetFromInputManager, Widget) == 0x000000, "Member 'RHWidget_UnregisterWidgetFromInputManager::Widget' has a wrong offset!");

// Function RallyHereStart.RHWidget.UpdateRegistrationToInputManager
// 0x0030 (0x0030 - 0x0000)
struct RHWidget_UpdateRegistrationToInputManager final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusGroup;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Up;                                                // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Down;                                              // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Left;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Right;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_UpdateRegistrationToInputManager) == 0x000008, "Wrong alignment on RHWidget_UpdateRegistrationToInputManager");
static_assert(sizeof(RHWidget_UpdateRegistrationToInputManager) == 0x000030, "Wrong size on RHWidget_UpdateRegistrationToInputManager");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, Widget) == 0x000000, "Member 'RHWidget_UpdateRegistrationToInputManager::Widget' has a wrong offset!");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, FocusGroup) == 0x000008, "Member 'RHWidget_UpdateRegistrationToInputManager::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, Up) == 0x000010, "Member 'RHWidget_UpdateRegistrationToInputManager::Up' has a wrong offset!");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, Down) == 0x000018, "Member 'RHWidget_UpdateRegistrationToInputManager::Down' has a wrong offset!");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, Left) == 0x000020, "Member 'RHWidget_UpdateRegistrationToInputManager::Left' has a wrong offset!");
static_assert(offsetof(RHWidget_UpdateRegistrationToInputManager, Right) == 0x000028, "Member 'RHWidget_UpdateRegistrationToInputManager::Right' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetActivePlayerController
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GetActivePlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetActivePlayerController) == 0x000008, "Wrong alignment on RHWidget_GetActivePlayerController");
static_assert(sizeof(RHWidget_GetActivePlayerController) == 0x000008, "Wrong size on RHWidget_GetActivePlayerController");
static_assert(offsetof(RHWidget_GetActivePlayerController, ReturnValue) == 0x000000, "Member 'RHWidget_GetActivePlayerController::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetNormalOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GetNormalOwningPlayer final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetNormalOwningPlayer) == 0x000008, "Wrong alignment on RHWidget_GetNormalOwningPlayer");
static_assert(sizeof(RHWidget_GetNormalOwningPlayer) == 0x000008, "Wrong size on RHWidget_GetNormalOwningPlayer");
static_assert(offsetof(RHWidget_GetNormalOwningPlayer, ReturnValue) == 0x000000, "Member 'RHWidget_GetNormalOwningPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetPendingRouteData
// 0x0018 (0x0018 - 0x0000)
struct RHWidget_GetPendingRouteData final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHWidget_GetPendingRouteData) == 0x000008, "Wrong alignment on RHWidget_GetPendingRouteData");
static_assert(sizeof(RHWidget_GetPendingRouteData) == 0x000018, "Wrong size on RHWidget_GetPendingRouteData");
static_assert(offsetof(RHWidget_GetPendingRouteData, RouteTag) == 0x000000, "Member 'RHWidget_GetPendingRouteData::RouteTag' has a wrong offset!");
static_assert(offsetof(RHWidget_GetPendingRouteData, Data) == 0x000008, "Member 'RHWidget_GetPendingRouteData::Data' has a wrong offset!");
static_assert(offsetof(RHWidget_GetPendingRouteData, ReturnValue) == 0x000010, "Member 'RHWidget_GetPendingRouteData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetRouteTag
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GetRouteTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetRouteTag) == 0x000004, "Wrong alignment on RHWidget_GetRouteTag");
static_assert(sizeof(RHWidget_GetRouteTag) == 0x000008, "Wrong size on RHWidget_GetRouteTag");
static_assert(offsetof(RHWidget_GetRouteTag, ReturnValue) == 0x000000, "Member 'RHWidget_GetRouteTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.GetViewManager
// 0x0008 (0x0008 - 0x0000)
struct RHWidget_GetViewManager final
{
public:
	class URHViewManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_GetViewManager) == 0x000008, "Wrong alignment on RHWidget_GetViewManager");
static_assert(sizeof(RHWidget_GetViewManager) == 0x000008, "Wrong size on RHWidget_GetViewManager");
static_assert(offsetof(RHWidget_GetViewManager, ReturnValue) == 0x000000, "Member 'RHWidget_GetViewManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWidget.ShouldUseMobileLayout
// 0x0001 (0x0001 - 0x0000)
struct RHWidget_ShouldUseMobileLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWidget_ShouldUseMobileLayout) == 0x000001, "Wrong alignment on RHWidget_ShouldUseMobileLayout");
static_assert(sizeof(RHWidget_ShouldUseMobileLayout) == 0x000001, "Wrong size on RHWidget_ShouldUseMobileLayout");
static_assert(offsetof(RHWidget_ShouldUseMobileLayout, ReturnValue) == 0x000000, "Member 'RHWidget_ShouldUseMobileLayout::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.ApplyMeterPercentages
// 0x0008 (0x0008 - 0x0000)
struct RHProgressMeterWidgetBase_ApplyMeterPercentages final
{
public:
	float                                         BasePercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaPercent;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_ApplyMeterPercentages) == 0x000004, "Wrong alignment on RHProgressMeterWidgetBase_ApplyMeterPercentages");
static_assert(sizeof(RHProgressMeterWidgetBase_ApplyMeterPercentages) == 0x000008, "Wrong size on RHProgressMeterWidgetBase_ApplyMeterPercentages");
static_assert(offsetof(RHProgressMeterWidgetBase_ApplyMeterPercentages, BasePercent) == 0x000000, "Member 'RHProgressMeterWidgetBase_ApplyMeterPercentages::BasePercent' has a wrong offset!");
static_assert(offsetof(RHProgressMeterWidgetBase_ApplyMeterPercentages, DeltaPercent) == 0x000004, "Member 'RHProgressMeterWidgetBase_ApplyMeterPercentages::DeltaPercent' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.ApplyMeterPercentages_Raw
// 0x0008 (0x0008 - 0x0000)
struct RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw final
{
public:
	float                                         BasePercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaPercent;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw) == 0x000004, "Wrong alignment on RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw");
static_assert(sizeof(RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw) == 0x000008, "Wrong size on RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw");
static_assert(offsetof(RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw, BasePercent) == 0x000000, "Member 'RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw::BasePercent' has a wrong offset!");
static_assert(offsetof(RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw, DeltaPercent) == 0x000004, "Member 'RHProgressMeterWidgetBase_ApplyMeterPercentages_Raw::DeltaPercent' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.IsPlayingDeltaAnimation
// 0x0001 (0x0001 - 0x0000)
struct RHProgressMeterWidgetBase_IsPlayingDeltaAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_IsPlayingDeltaAnimation) == 0x000001, "Wrong alignment on RHProgressMeterWidgetBase_IsPlayingDeltaAnimation");
static_assert(sizeof(RHProgressMeterWidgetBase_IsPlayingDeltaAnimation) == 0x000001, "Wrong size on RHProgressMeterWidgetBase_IsPlayingDeltaAnimation");
static_assert(offsetof(RHProgressMeterWidgetBase_IsPlayingDeltaAnimation, ReturnValue) == 0x000000, "Member 'RHProgressMeterWidgetBase_IsPlayingDeltaAnimation::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.OnDeltaAnimationFinished
// 0x0001 (0x0001 - 0x0000)
struct RHProgressMeterWidgetBase_OnDeltaAnimationFinished final
{
public:
	bool                                          bLevelChange;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_OnDeltaAnimationFinished) == 0x000001, "Wrong alignment on RHProgressMeterWidgetBase_OnDeltaAnimationFinished");
static_assert(sizeof(RHProgressMeterWidgetBase_OnDeltaAnimationFinished) == 0x000001, "Wrong size on RHProgressMeterWidgetBase_OnDeltaAnimationFinished");
static_assert(offsetof(RHProgressMeterWidgetBase_OnDeltaAnimationFinished, bLevelChange) == 0x000000, "Member 'RHProgressMeterWidgetBase_OnDeltaAnimationFinished::bLevelChange' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.PlayDeltaAnimation
// 0x0004 (0x0004 - 0x0000)
struct RHProgressMeterWidgetBase_PlayDeltaAnimation final
{
public:
	float                                         StartDelay;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_PlayDeltaAnimation) == 0x000004, "Wrong alignment on RHProgressMeterWidgetBase_PlayDeltaAnimation");
static_assert(sizeof(RHProgressMeterWidgetBase_PlayDeltaAnimation) == 0x000004, "Wrong size on RHProgressMeterWidgetBase_PlayDeltaAnimation");
static_assert(offsetof(RHProgressMeterWidgetBase_PlayDeltaAnimation, StartDelay) == 0x000000, "Member 'RHProgressMeterWidgetBase_PlayDeltaAnimation::StartDelay' has a wrong offset!");

// Function RallyHereStart.RHProgressMeterWidgetBase.SetDeltaAnimationParams
// 0x000C (0x000C - 0x0000)
struct RHProgressMeterWidgetBase_SetDeltaAnimationParams final
{
public:
	float                                         BasePercent;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaPercent;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgressMeterWidgetBase_SetDeltaAnimationParams) == 0x000004, "Wrong alignment on RHProgressMeterWidgetBase_SetDeltaAnimationParams");
static_assert(sizeof(RHProgressMeterWidgetBase_SetDeltaAnimationParams) == 0x00000C, "Wrong size on RHProgressMeterWidgetBase_SetDeltaAnimationParams");
static_assert(offsetof(RHProgressMeterWidgetBase_SetDeltaAnimationParams, BasePercent) == 0x000000, "Member 'RHProgressMeterWidgetBase_SetDeltaAnimationParams::BasePercent' has a wrong offset!");
static_assert(offsetof(RHProgressMeterWidgetBase_SetDeltaAnimationParams, DeltaPercent) == 0x000004, "Member 'RHProgressMeterWidgetBase_SetDeltaAnimationParams::DeltaPercent' has a wrong offset!");
static_assert(offsetof(RHProgressMeterWidgetBase_SetDeltaAnimationParams, AnimTime) == 0x000008, "Member 'RHProgressMeterWidgetBase_SetDeltaAnimationParams::AnimTime' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.ApplySegmentBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor final
{
public:
	struct FLinearColor                           BackgroundColor;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor, BackgroundColor) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_ApplySegmentBackgroundColor::BackgroundColor' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.ApplySegmentLabel
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepassRewardsTrackSegment_ApplySegmentLabel final
{
public:
	class FText                                   LabelText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_ApplySegmentLabel) == 0x000008, "Wrong alignment on RHBattlepassRewardsTrackSegment_ApplySegmentLabel");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_ApplySegmentLabel) == 0x000018, "Wrong size on RHBattlepassRewardsTrackSegment_ApplySegmentLabel");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_ApplySegmentLabel, LabelText) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_ApplySegmentLabel::LabelText' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.ApplySegmentMeterColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor final
{
public:
	struct FLinearColor                           MeterColor;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor, MeterColor) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_ApplySegmentMeterColor::MeterColor' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.ApplySegmentProgress
// 0x0004 (0x0004 - 0x0000)
struct RHBattlepassRewardsTrackSegment_ApplySegmentProgress final
{
public:
	float                                         ProgressPercent;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_ApplySegmentProgress) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_ApplySegmentProgress");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_ApplySegmentProgress) == 0x000004, "Wrong size on RHBattlepassRewardsTrackSegment_ApplySegmentProgress");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_ApplySegmentProgress, ProgressPercent) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_ApplySegmentProgress::ProgressPercent' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.GetBattlePassFreeColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor, ReturnValue) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_GetBattlePassFreeColor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.GetBattlePassPremiumColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor, ReturnValue) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_GetBattlePassPremiumColor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.GetPremiumBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor, ReturnValue) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_GetPremiumBackgroundColor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.GetStandardBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor) == 0x000004, "Wrong alignment on RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor) == 0x000010, "Wrong size on RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor, ReturnValue) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_GetStandardBackgroundColor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBattlepassRewardsTrackSegment.UpdateFromRewardItem
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepassRewardsTrackSegment_UpdateFromRewardItem final
{
public:
	class URHBattlepass*                          Battlepass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHBattlepassRewardItem*                BattlepassRewardItem;                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassRewardsTrackSegment_UpdateFromRewardItem) == 0x000008, "Wrong alignment on RHBattlepassRewardsTrackSegment_UpdateFromRewardItem");
static_assert(sizeof(RHBattlepassRewardsTrackSegment_UpdateFromRewardItem) == 0x000018, "Wrong size on RHBattlepassRewardsTrackSegment_UpdateFromRewardItem");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_UpdateFromRewardItem, Battlepass) == 0x000000, "Member 'RHBattlepassRewardsTrackSegment_UpdateFromRewardItem::Battlepass' has a wrong offset!");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_UpdateFromRewardItem, BattlepassRewardItem) == 0x000008, "Member 'RHBattlepassRewardsTrackSegment_UpdateFromRewardItem::BattlepassRewardItem' has a wrong offset!");
static_assert(offsetof(RHBattlepassRewardsTrackSegment_UpdateFromRewardItem, PlayerInfo) == 0x000010, "Member 'RHBattlepassRewardsTrackSegment_UpdateFromRewardItem::PlayerInfo' has a wrong offset!");

// Function RallyHereStart.RHBattlepassTrackWidget.SetBattlepass
// 0x0008 (0x0008 - 0x0000)
struct RHBattlepassTrackWidget_SetBattlepass final
{
public:
	class URHBattlepass*                          Battlepass_0;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassTrackWidget_SetBattlepass) == 0x000008, "Wrong alignment on RHBattlepassTrackWidget_SetBattlepass");
static_assert(sizeof(RHBattlepassTrackWidget_SetBattlepass) == 0x000008, "Wrong size on RHBattlepassTrackWidget_SetBattlepass");
static_assert(offsetof(RHBattlepassTrackWidget_SetBattlepass, Battlepass_0) == 0x000000, "Member 'RHBattlepassTrackWidget_SetBattlepass::Battlepass_0' has a wrong offset!");

// Function RallyHereStart.RHBattlepassTrackWidget.GetRewardItemsForPage
// 0x0018 (0x0018 - 0x0000)
struct RHBattlepassTrackWidget_GetRewardItemsForPage final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHBattlepassRewardItem*>        RewardItems_0;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassTrackWidget_GetRewardItemsForPage) == 0x000008, "Wrong alignment on RHBattlepassTrackWidget_GetRewardItemsForPage");
static_assert(sizeof(RHBattlepassTrackWidget_GetRewardItemsForPage) == 0x000018, "Wrong size on RHBattlepassTrackWidget_GetRewardItemsForPage");
static_assert(offsetof(RHBattlepassTrackWidget_GetRewardItemsForPage, Index_0) == 0x000000, "Member 'RHBattlepassTrackWidget_GetRewardItemsForPage::Index_0' has a wrong offset!");
static_assert(offsetof(RHBattlepassTrackWidget_GetRewardItemsForPage, RewardItems_0) == 0x000008, "Member 'RHBattlepassTrackWidget_GetRewardItemsForPage::RewardItems_0' has a wrong offset!");

// Function RallyHereStart.RHBattlepassWidget.ShowPurchaseBattlepassTiers
// 0x0004 (0x0004 - 0x0000)
struct RHBattlepassWidget_ShowPurchaseBattlepassTiers final
{
public:
	int32                                         TierCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBattlepassWidget_ShowPurchaseBattlepassTiers) == 0x000004, "Wrong alignment on RHBattlepassWidget_ShowPurchaseBattlepassTiers");
static_assert(sizeof(RHBattlepassWidget_ShowPurchaseBattlepassTiers) == 0x000004, "Wrong size on RHBattlepassWidget_ShowPurchaseBattlepassTiers");
static_assert(offsetof(RHBattlepassWidget_ShowPurchaseBattlepassTiers, TierCount) == 0x000000, "Member 'RHBattlepassWidget_ShowPurchaseBattlepassTiers::TierCount' has a wrong offset!");

// Function RallyHereStart.RHBorder.GetLargeBorderInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBorder_GetLargeBorderInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBorder_GetLargeBorderInfo) == 0x000008, "Wrong alignment on RHBorder_GetLargeBorderInfo");
static_assert(sizeof(RHBorder_GetLargeBorderInfo) == 0x000008, "Wrong size on RHBorder_GetLargeBorderInfo");
static_assert(offsetof(RHBorder_GetLargeBorderInfo, ReturnValue) == 0x000000, "Member 'RHBorder_GetLargeBorderInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHBorder.GetSmallBorderInfo
// 0x0008 (0x0008 - 0x0000)
struct RHBorder_GetSmallBorderInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHBorder_GetSmallBorderInfo) == 0x000008, "Wrong alignment on RHBorder_GetSmallBorderInfo");
static_assert(sizeof(RHBorder_GetSmallBorderInfo) == 0x000008, "Wrong size on RHBorder_GetSmallBorderInfo");
static_assert(offsetof(RHBorder_GetSmallBorderInfo, ReturnValue) == 0x000000, "Member 'RHBorder_GetSmallBorderInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCanvasPanel.PlaceWidgetUnder
// 0x0010 (0x0010 - 0x0000)
struct RHCanvasPanel_PlaceWidgetUnder final
{
public:
	class UUserWidget*                            BottomWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            TopWidget;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCanvasPanel_PlaceWidgetUnder) == 0x000008, "Wrong alignment on RHCanvasPanel_PlaceWidgetUnder");
static_assert(sizeof(RHCanvasPanel_PlaceWidgetUnder) == 0x000010, "Wrong size on RHCanvasPanel_PlaceWidgetUnder");
static_assert(offsetof(RHCanvasPanel_PlaceWidgetUnder, BottomWidget) == 0x000000, "Member 'RHCanvasPanel_PlaceWidgetUnder::BottomWidget' has a wrong offset!");
static_assert(offsetof(RHCanvasPanel_PlaceWidgetUnder, TopWidget) == 0x000008, "Member 'RHCanvasPanel_PlaceWidgetUnder::TopWidget' has a wrong offset!");

// Function RallyHereStart.RHContextBarPrompt.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RHContextBarPrompt_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextBarPrompt_HandleInputStateChanged) == 0x000001, "Wrong alignment on RHContextBarPrompt_HandleInputStateChanged");
static_assert(sizeof(RHContextBarPrompt_HandleInputStateChanged) == 0x000001, "Wrong size on RHContextBarPrompt_HandleInputStateChanged");
static_assert(offsetof(RHContextBarPrompt_HandleInputStateChanged, InputState) == 0x000000, "Member 'RHContextBarPrompt_HandleInputStateChanged::InputState' has a wrong offset!");

// Function RallyHereStart.RHContextBarPrompt.OnContextActionUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHContextBarPrompt_OnContextActionUpdated final
{
public:
	class UContextActionData*                     InData;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextBarPrompt_OnContextActionUpdated) == 0x000008, "Wrong alignment on RHContextBarPrompt_OnContextActionUpdated");
static_assert(sizeof(RHContextBarPrompt_OnContextActionUpdated) == 0x000008, "Wrong size on RHContextBarPrompt_OnContextActionUpdated");
static_assert(offsetof(RHContextBarPrompt_OnContextActionUpdated, InData) == 0x000000, "Member 'RHContextBarPrompt_OnContextActionUpdated::InData' has a wrong offset!");

// Function RallyHereStart.RHContextBarPrompt.OnInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RHContextBarPrompt_OnInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextBarPrompt_OnInputStateChanged) == 0x000001, "Wrong alignment on RHContextBarPrompt_OnInputStateChanged");
static_assert(sizeof(RHContextBarPrompt_OnInputStateChanged) == 0x000001, "Wrong size on RHContextBarPrompt_OnInputStateChanged");
static_assert(offsetof(RHContextBarPrompt_OnInputStateChanged, InputState) == 0x000000, "Member 'RHContextBarPrompt_OnInputStateChanged::InputState' has a wrong offset!");

// Function RallyHereStart.RHContextBarPrompt.GetContextActionData
// 0x0008 (0x0008 - 0x0000)
struct RHContextBarPrompt_GetContextActionData final
{
public:
	class UContextActionData*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextBarPrompt_GetContextActionData) == 0x000008, "Wrong alignment on RHContextBarPrompt_GetContextActionData");
static_assert(sizeof(RHContextBarPrompt_GetContextActionData) == 0x000008, "Wrong size on RHContextBarPrompt_GetContextActionData");
static_assert(offsetof(RHContextBarPrompt_GetContextActionData, ReturnValue) == 0x000000, "Member 'RHContextBarPrompt_GetContextActionData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.AddContextMenuButton
// 0x0008 (0x0008 - 0x0000)
struct RHContextMenu_AddContextMenuButton final
{
public:
	class URHContextMenuButton*                   ContextButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_AddContextMenuButton) == 0x000008, "Wrong alignment on RHContextMenu_AddContextMenuButton");
static_assert(sizeof(RHContextMenu_AddContextMenuButton) == 0x000008, "Wrong size on RHContextMenu_AddContextMenuButton");
static_assert(offsetof(RHContextMenu_AddContextMenuButton, ContextButton) == 0x000000, "Member 'RHContextMenu_AddContextMenuButton::ContextButton' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.GetContextButtonByEnum
// 0x0010 (0x0010 - 0x0000)
struct RHContextMenu_GetContextButtonByEnum final
{
public:
	EPlayerContextOptions                         ContextOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URHContextMenuButton*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_GetContextButtonByEnum) == 0x000008, "Wrong alignment on RHContextMenu_GetContextButtonByEnum");
static_assert(sizeof(RHContextMenu_GetContextButtonByEnum) == 0x000010, "Wrong size on RHContextMenu_GetContextButtonByEnum");
static_assert(offsetof(RHContextMenu_GetContextButtonByEnum, ContextOption) == 0x000000, "Member 'RHContextMenu_GetContextButtonByEnum::ContextOption' has a wrong offset!");
static_assert(offsetof(RHContextMenu_GetContextButtonByEnum, ReturnValue) == 0x000008, "Member 'RHContextMenu_GetContextButtonByEnum::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.HandleOnQueueStatusChange
// 0x0001 (0x0001 - 0x0000)
struct RHContextMenu_HandleOnQueueStatusChange final
{
public:
	ERH_MatchStatus                               QueueStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_HandleOnQueueStatusChange) == 0x000001, "Wrong alignment on RHContextMenu_HandleOnQueueStatusChange");
static_assert(sizeof(RHContextMenu_HandleOnQueueStatusChange) == 0x000001, "Wrong size on RHContextMenu_HandleOnQueueStatusChange");
static_assert(offsetof(RHContextMenu_HandleOnQueueStatusChange, QueueStatus) == 0x000000, "Member 'RHContextMenu_HandleOnQueueStatusChange::QueueStatus' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.OnOptionSelected
// 0x0002 (0x0002 - 0x0000)
struct RHContextMenu_OnOptionSelected final
{
public:
	EPlayerContextOptions                         ContextOption;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_OnOptionSelected) == 0x000001, "Wrong alignment on RHContextMenu_OnOptionSelected");
static_assert(sizeof(RHContextMenu_OnOptionSelected) == 0x000002, "Wrong size on RHContextMenu_OnOptionSelected");
static_assert(offsetof(RHContextMenu_OnOptionSelected, ContextOption) == 0x000000, "Member 'RHContextMenu_OnOptionSelected::ContextOption' has a wrong offset!");
static_assert(offsetof(RHContextMenu_OnOptionSelected, ReturnValue) == 0x000001, "Member 'RHContextMenu_OnOptionSelected::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.RemoveContextMenuButton
// 0x0008 (0x0008 - 0x0000)
struct RHContextMenu_RemoveContextMenuButton final
{
public:
	class URHContextMenuButton*                   ContextButton;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_RemoveContextMenuButton) == 0x000008, "Wrong alignment on RHContextMenu_RemoveContextMenuButton");
static_assert(sizeof(RHContextMenu_RemoveContextMenuButton) == 0x000008, "Wrong size on RHContextMenu_RemoveContextMenuButton");
static_assert(offsetof(RHContextMenu_RemoveContextMenuButton, ContextButton) == 0x000000, "Member 'RHContextMenu_RemoveContextMenuButton::ContextButton' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.SetCurrentFriend
// 0x0008 (0x0008 - 0x0000)
struct RHContextMenu_SetCurrentFriend final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_SetCurrentFriend) == 0x000008, "Wrong alignment on RHContextMenu_SetCurrentFriend");
static_assert(sizeof(RHContextMenu_SetCurrentFriend) == 0x000008, "Wrong size on RHContextMenu_SetCurrentFriend");
static_assert(offsetof(RHContextMenu_SetCurrentFriend, Friend) == 0x000000, "Member 'RHContextMenu_SetCurrentFriend::Friend' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.SetMenuPosition
// 0x0038 (0x0038 - 0x0000)
struct RHContextMenu_SetMenuPosition final
{
public:
	class URHWidget*                              WidgetToMove;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                WidgetPadding;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EViewSide                                     side;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         menuWidth;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         menuHeight;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_SetMenuPosition) == 0x000008, "Wrong alignment on RHContextMenu_SetMenuPosition");
static_assert(sizeof(RHContextMenu_SetMenuPosition) == 0x000038, "Wrong size on RHContextMenu_SetMenuPosition");
static_assert(offsetof(RHContextMenu_SetMenuPosition, WidgetToMove) == 0x000000, "Member 'RHContextMenu_SetMenuPosition::WidgetToMove' has a wrong offset!");
static_assert(offsetof(RHContextMenu_SetMenuPosition, WidgetPadding) == 0x000008, "Member 'RHContextMenu_SetMenuPosition::WidgetPadding' has a wrong offset!");
static_assert(offsetof(RHContextMenu_SetMenuPosition, side) == 0x000018, "Member 'RHContextMenu_SetMenuPosition::side' has a wrong offset!");
static_assert(offsetof(RHContextMenu_SetMenuPosition, menuWidth) == 0x00001C, "Member 'RHContextMenu_SetMenuPosition::menuWidth' has a wrong offset!");
static_assert(offsetof(RHContextMenu_SetMenuPosition, menuHeight) == 0x000020, "Member 'RHContextMenu_SetMenuPosition::menuHeight' has a wrong offset!");
static_assert(offsetof(RHContextMenu_SetMenuPosition, ReturnValue) == 0x000028, "Member 'RHContextMenu_SetMenuPosition::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHContextMenu_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_GetPartyManager) == 0x000008, "Wrong alignment on RHContextMenu_GetPartyManager");
static_assert(sizeof(RHContextMenu_GetPartyManager) == 0x000008, "Wrong size on RHContextMenu_GetPartyManager");
static_assert(offsetof(RHContextMenu_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHContextMenu_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenu.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHContextMenu_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenu_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHContextMenu_GetQueueDataFactory");
static_assert(sizeof(RHContextMenu_GetQueueDataFactory) == 0x000008, "Wrong size on RHContextMenu_GetQueueDataFactory");
static_assert(offsetof(RHContextMenu_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHContextMenu_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHContextMenuButton.HandleActive
// 0x0001 (0x0001 - 0x0000)
struct RHContextMenuButton_HandleActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenuButton_HandleActive) == 0x000001, "Wrong alignment on RHContextMenuButton_HandleActive");
static_assert(sizeof(RHContextMenuButton_HandleActive) == 0x000001, "Wrong size on RHContextMenuButton_HandleActive");
static_assert(offsetof(RHContextMenuButton_HandleActive, IsActive) == 0x000000, "Member 'RHContextMenuButton_HandleActive::IsActive' has a wrong offset!");

// Function RallyHereStart.RHContextMenuButton.HandleVisibility
// 0x0001 (0x0001 - 0x0000)
struct RHContextMenuButton_HandleVisibility final
{
public:
	bool                                          isVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenuButton_HandleVisibility) == 0x000001, "Wrong alignment on RHContextMenuButton_HandleVisibility");
static_assert(sizeof(RHContextMenuButton_HandleVisibility) == 0x000001, "Wrong size on RHContextMenuButton_HandleVisibility");
static_assert(offsetof(RHContextMenuButton_HandleVisibility, isVisibility) == 0x000000, "Member 'RHContextMenuButton_HandleVisibility::isVisibility' has a wrong offset!");

// Function RallyHereStart.RHContextMenuButton.SetContextOption
// 0x0001 (0x0001 - 0x0000)
struct RHContextMenuButton_SetContextOption final
{
public:
	EPlayerContextOptions                         Context;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenuButton_SetContextOption) == 0x000001, "Wrong alignment on RHContextMenuButton_SetContextOption");
static_assert(sizeof(RHContextMenuButton_SetContextOption) == 0x000001, "Wrong size on RHContextMenuButton_SetContextOption");
static_assert(offsetof(RHContextMenuButton_SetContextOption, Context) == 0x000000, "Member 'RHContextMenuButton_SetContextOption::Context' has a wrong offset!");

// Function RallyHereStart.RHContextMenuButton.GetContextOption
// 0x0001 (0x0001 - 0x0000)
struct RHContextMenuButton_GetContextOption final
{
public:
	EPlayerContextOptions                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHContextMenuButton_GetContextOption) == 0x000001, "Wrong alignment on RHContextMenuButton_GetContextOption");
static_assert(sizeof(RHContextMenuButton_GetContextOption) == 0x000001, "Wrong size on RHContextMenuButton_GetContextOption");
static_assert(offsetof(RHContextMenuButton_GetContextOption, ReturnValue) == 0x000000, "Member 'RHContextMenuButton_GetContextOption::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCurrency.GetCurrencyDataForQuantity
// 0x00D8 (0x00D8 - 0x0000)
struct RHCurrency_GetCurrencyDataForQuantity final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyImageRow                      Data;                                              // 0x0008(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHCurrency_GetCurrencyDataForQuantity) == 0x000008, "Wrong alignment on RHCurrency_GetCurrencyDataForQuantity");
static_assert(sizeof(RHCurrency_GetCurrencyDataForQuantity) == 0x0000D8, "Wrong size on RHCurrency_GetCurrencyDataForQuantity");
static_assert(offsetof(RHCurrency_GetCurrencyDataForQuantity, Quantity) == 0x000000, "Member 'RHCurrency_GetCurrencyDataForQuantity::Quantity' has a wrong offset!");
static_assert(offsetof(RHCurrency_GetCurrencyDataForQuantity, Data) == 0x000008, "Member 'RHCurrency_GetCurrencyDataForQuantity::Data' has a wrong offset!");
static_assert(offsetof(RHCurrency_GetCurrencyDataForQuantity, ReturnValue) == 0x0000D0, "Member 'RHCurrency_GetCurrencyDataForQuantity::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCurrency.GetFullSplash
// 0x0008 (0x0008 - 0x0000)
struct RHCurrency_GetFullSplash final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCurrency_GetFullSplash) == 0x000008, "Wrong alignment on RHCurrency_GetFullSplash");
static_assert(sizeof(RHCurrency_GetFullSplash) == 0x000008, "Wrong size on RHCurrency_GetFullSplash");
static_assert(offsetof(RHCurrency_GetFullSplash, ReturnValue) == 0x000000, "Member 'RHCurrency_GetFullSplash::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCurrency.GetSmallIcon
// 0x0008 (0x0008 - 0x0000)
struct RHCurrency_GetSmallIcon final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCurrency_GetSmallIcon) == 0x000008, "Wrong alignment on RHCurrency_GetSmallIcon");
static_assert(sizeof(RHCurrency_GetSmallIcon) == 0x000008, "Wrong size on RHCurrency_GetSmallIcon");
static_assert(offsetof(RHCurrency_GetSmallIcon, ReturnValue) == 0x000000, "Member 'RHCurrency_GetSmallIcon::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCurrencyDisplay.SetCurrentDisplayByItem
// 0x0008 (0x0008 - 0x0000)
struct RHCurrencyDisplay_SetCurrentDisplayByItem final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCurrencyDisplay_SetCurrentDisplayByItem) == 0x000008, "Wrong alignment on RHCurrencyDisplay_SetCurrentDisplayByItem");
static_assert(sizeof(RHCurrencyDisplay_SetCurrentDisplayByItem) == 0x000008, "Wrong size on RHCurrencyDisplay_SetCurrentDisplayByItem");
static_assert(offsetof(RHCurrencyDisplay_SetCurrentDisplayByItem, StoreItem) == 0x000000, "Member 'RHCurrencyDisplay_SetCurrentDisplayByItem::StoreItem' has a wrong offset!");

// Function RallyHereStart.RHCurrencyDisplay.SetInventoryCountOnText
// 0x0020 (0x0020 - 0x0000)
struct RHCurrencyDisplay_SetInventoryCountOnText final
{
public:
	struct FRH_ItemId                             ItemId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             TextBlock;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCurrencyDisplay_SetInventoryCountOnText) == 0x000008, "Wrong alignment on RHCurrencyDisplay_SetInventoryCountOnText");
static_assert(sizeof(RHCurrencyDisplay_SetInventoryCountOnText) == 0x000020, "Wrong size on RHCurrencyDisplay_SetInventoryCountOnText");
static_assert(offsetof(RHCurrencyDisplay_SetInventoryCountOnText, ItemId) == 0x000000, "Member 'RHCurrencyDisplay_SetInventoryCountOnText::ItemId' has a wrong offset!");
static_assert(offsetof(RHCurrencyDisplay_SetInventoryCountOnText, TextBlock) == 0x000018, "Member 'RHCurrencyDisplay_SetInventoryCountOnText::TextBlock' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.HandleSearchResultReceived
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowser_HandleSearchResultReceived final
{
public:
	TArray<class URH_SessionView*>                CustomSessions;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_HandleSearchResultReceived) == 0x000008, "Wrong alignment on RHCustomBrowser_HandleSearchResultReceived");
static_assert(sizeof(RHCustomBrowser_HandleSearchResultReceived) == 0x000010, "Wrong size on RHCustomBrowser_HandleSearchResultReceived");
static_assert(offsetof(RHCustomBrowser_HandleSearchResultReceived, CustomSessions) == 0x000000, "Member 'RHCustomBrowser_HandleSearchResultReceived::CustomSessions' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.OnBrowserEntryAdded
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowser_OnBrowserEntryAdded final
{
public:
	class URHCustomBrowserEntry*                  BrowserEntry;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_OnBrowserEntryAdded) == 0x000008, "Wrong alignment on RHCustomBrowser_OnBrowserEntryAdded");
static_assert(sizeof(RHCustomBrowser_OnBrowserEntryAdded) == 0x000008, "Wrong size on RHCustomBrowser_OnBrowserEntryAdded");
static_assert(offsetof(RHCustomBrowser_OnBrowserEntryAdded, BrowserEntry) == 0x000000, "Member 'RHCustomBrowser_OnBrowserEntryAdded::BrowserEntry' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.UpdateNameFilterText
// 0x0018 (0x0018 - 0x0000)
struct RHCustomBrowser_UpdateNameFilterText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_UpdateNameFilterText) == 0x000008, "Wrong alignment on RHCustomBrowser_UpdateNameFilterText");
static_assert(sizeof(RHCustomBrowser_UpdateNameFilterText) == 0x000018, "Wrong size on RHCustomBrowser_UpdateNameFilterText");
static_assert(offsetof(RHCustomBrowser_UpdateNameFilterText, InText) == 0x000000, "Member 'RHCustomBrowser_UpdateNameFilterText::InText' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.GetBrowserEntriesContainer
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowser_GetBrowserEntriesContainer final
{
public:
	class UPanelWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_GetBrowserEntriesContainer) == 0x000008, "Wrong alignment on RHCustomBrowser_GetBrowserEntriesContainer");
static_assert(sizeof(RHCustomBrowser_GetBrowserEntriesContainer) == 0x000008, "Wrong size on RHCustomBrowser_GetBrowserEntriesContainer");
static_assert(offsetof(RHCustomBrowser_GetBrowserEntriesContainer, ReturnValue) == 0x000000, "Member 'RHCustomBrowser_GetBrowserEntriesContainer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.GetFilteredSessionSearchResults
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowser_GetFilteredSessionSearchResults final
{
public:
	TArray<class URH_SessionView*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_GetFilteredSessionSearchResults) == 0x000008, "Wrong alignment on RHCustomBrowser_GetFilteredSessionSearchResults");
static_assert(sizeof(RHCustomBrowser_GetFilteredSessionSearchResults) == 0x000010, "Wrong size on RHCustomBrowser_GetFilteredSessionSearchResults");
static_assert(offsetof(RHCustomBrowser_GetFilteredSessionSearchResults, ReturnValue) == 0x000000, "Member 'RHCustomBrowser_GetFilteredSessionSearchResults::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.GetJoinCustomButtons
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowser_GetJoinCustomButtons final
{
public:
	TArray<class URHWidget*>                      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_GetJoinCustomButtons) == 0x000008, "Wrong alignment on RHCustomBrowser_GetJoinCustomButtons");
static_assert(sizeof(RHCustomBrowser_GetJoinCustomButtons) == 0x000010, "Wrong size on RHCustomBrowser_GetJoinCustomButtons");
static_assert(offsetof(RHCustomBrowser_GetJoinCustomButtons, ReturnValue) == 0x000000, "Member 'RHCustomBrowser_GetJoinCustomButtons::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowser_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHCustomBrowser_GetQueueDataFactory");
static_assert(sizeof(RHCustomBrowser_GetQueueDataFactory) == 0x000008, "Wrong size on RHCustomBrowser_GetQueueDataFactory");
static_assert(offsetof(RHCustomBrowser_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHCustomBrowser_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowser.GetTotalPages
// 0x0004 (0x0004 - 0x0000)
struct RHCustomBrowser_GetTotalPages final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowser_GetTotalPages) == 0x000004, "Wrong alignment on RHCustomBrowser_GetTotalPages");
static_assert(sizeof(RHCustomBrowser_GetTotalPages) == 0x000004, "Wrong size on RHCustomBrowser_GetTotalPages");
static_assert(offsetof(RHCustomBrowser_GetTotalPages, ReturnValue) == 0x000000, "Member 'RHCustomBrowser_GetTotalPages::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.GetJoinButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowserEntry_GetJoinButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_GetJoinButton) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_GetJoinButton");
static_assert(sizeof(RHCustomBrowserEntry_GetJoinButton) == 0x000008, "Wrong size on RHCustomBrowserEntry_GetJoinButton");
static_assert(offsetof(RHCustomBrowserEntry_GetJoinButton, ReturnValue) == 0x000000, "Member 'RHCustomBrowserEntry_GetJoinButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.OnCustomLobbyNameSanitized
// 0x0018 (0x0018 - 0x0000)
struct RHCustomBrowserEntry_OnCustomLobbyNameSanitized final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SanitizedName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_OnCustomLobbyNameSanitized) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_OnCustomLobbyNameSanitized");
static_assert(sizeof(RHCustomBrowserEntry_OnCustomLobbyNameSanitized) == 0x000018, "Wrong size on RHCustomBrowserEntry_OnCustomLobbyNameSanitized");
static_assert(offsetof(RHCustomBrowserEntry_OnCustomLobbyNameSanitized, bSuccess) == 0x000000, "Member 'RHCustomBrowserEntry_OnCustomLobbyNameSanitized::bSuccess' has a wrong offset!");
static_assert(offsetof(RHCustomBrowserEntry_OnCustomLobbyNameSanitized, SanitizedName) == 0x000008, "Member 'RHCustomBrowserEntry_OnCustomLobbyNameSanitized::SanitizedName' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.OnCustomMatchSessionJoinResult
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowserEntry_OnCustomMatchSessionJoinResult final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class URH_SessionView*                  SessionToJoin;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_OnCustomMatchSessionJoinResult) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_OnCustomMatchSessionJoinResult");
static_assert(sizeof(RHCustomBrowserEntry_OnCustomMatchSessionJoinResult) == 0x000010, "Wrong size on RHCustomBrowserEntry_OnCustomMatchSessionJoinResult");
static_assert(offsetof(RHCustomBrowserEntry_OnCustomMatchSessionJoinResult, bSuccess) == 0x000000, "Member 'RHCustomBrowserEntry_OnCustomMatchSessionJoinResult::bSuccess' has a wrong offset!");
static_assert(offsetof(RHCustomBrowserEntry_OnCustomMatchSessionJoinResult, SessionToJoin) == 0x000008, "Member 'RHCustomBrowserEntry_OnCustomMatchSessionJoinResult::SessionToJoin' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetCustomGameInfo
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowserEntry_SetCustomGameInfo final
{
public:
	class URH_SessionView*                        InSession;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetCustomGameInfo) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_SetCustomGameInfo");
static_assert(sizeof(RHCustomBrowserEntry_SetCustomGameInfo) == 0x000008, "Wrong size on RHCustomBrowserEntry_SetCustomGameInfo");
static_assert(offsetof(RHCustomBrowserEntry_SetCustomGameInfo, InSession) == 0x000000, "Member 'RHCustomBrowserEntry_SetCustomGameInfo::InSession' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetGameLeaderNameDisplay
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowserEntry_SetGameLeaderNameDisplay final
{
public:
	class FString                                 LeaderName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetGameLeaderNameDisplay) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_SetGameLeaderNameDisplay");
static_assert(sizeof(RHCustomBrowserEntry_SetGameLeaderNameDisplay) == 0x000010, "Wrong size on RHCustomBrowserEntry_SetGameLeaderNameDisplay");
static_assert(offsetof(RHCustomBrowserEntry_SetGameLeaderNameDisplay, LeaderName) == 0x000000, "Member 'RHCustomBrowserEntry_SetGameLeaderNameDisplay::LeaderName' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetGameLobbyNameDisplay
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowserEntry_SetGameLobbyNameDisplay final
{
public:
	class FString                                 LobbyName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetGameLobbyNameDisplay) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_SetGameLobbyNameDisplay");
static_assert(sizeof(RHCustomBrowserEntry_SetGameLobbyNameDisplay) == 0x000010, "Wrong size on RHCustomBrowserEntry_SetGameLobbyNameDisplay");
static_assert(offsetof(RHCustomBrowserEntry_SetGameLobbyNameDisplay, LobbyName) == 0x000000, "Member 'RHCustomBrowserEntry_SetGameLobbyNameDisplay::LobbyName' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetGamePlayerCountDisplay
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowserEntry_SetGamePlayerCountDisplay final
{
public:
	int32                                         PlayerCount;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerCount;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetGamePlayerCountDisplay) == 0x000004, "Wrong alignment on RHCustomBrowserEntry_SetGamePlayerCountDisplay");
static_assert(sizeof(RHCustomBrowserEntry_SetGamePlayerCountDisplay) == 0x000008, "Wrong size on RHCustomBrowserEntry_SetGamePlayerCountDisplay");
static_assert(offsetof(RHCustomBrowserEntry_SetGamePlayerCountDisplay, PlayerCount) == 0x000000, "Member 'RHCustomBrowserEntry_SetGamePlayerCountDisplay::PlayerCount' has a wrong offset!");
static_assert(offsetof(RHCustomBrowserEntry_SetGamePlayerCountDisplay, MaxPlayerCount) == 0x000004, "Member 'RHCustomBrowserEntry_SetGamePlayerCountDisplay::MaxPlayerCount' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetGameStarted
// 0x0001 (0x0001 - 0x0000)
struct RHCustomBrowserEntry_SetGameStarted final
{
public:
	bool                                          bGameStarted;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetGameStarted) == 0x000001, "Wrong alignment on RHCustomBrowserEntry_SetGameStarted");
static_assert(sizeof(RHCustomBrowserEntry_SetGameStarted) == 0x000001, "Wrong size on RHCustomBrowserEntry_SetGameStarted");
static_assert(offsetof(RHCustomBrowserEntry_SetGameStarted, bGameStarted) == 0x000000, "Member 'RHCustomBrowserEntry_SetGameStarted::bGameStarted' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetMapInfo
// 0x0080 (0x0080 - 0x0000)
struct RHCustomBrowserEntry_SetMapInfo final
{
public:
	class FName                                   MapRowName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHMapDetails                          MapDetails;                                        // 0x0008(0x0078)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetMapInfo) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_SetMapInfo");
static_assert(sizeof(RHCustomBrowserEntry_SetMapInfo) == 0x000080, "Wrong size on RHCustomBrowserEntry_SetMapInfo");
static_assert(offsetof(RHCustomBrowserEntry_SetMapInfo, MapRowName) == 0x000000, "Member 'RHCustomBrowserEntry_SetMapInfo::MapRowName' has a wrong offset!");
static_assert(offsetof(RHCustomBrowserEntry_SetMapInfo, MapDetails) == 0x000008, "Member 'RHCustomBrowserEntry_SetMapInfo::MapDetails' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.SetRegionDisplay
// 0x0018 (0x0018 - 0x0000)
struct RHCustomBrowserEntry_SetRegionDisplay final
{
public:
	class FText                                   RegionAsText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_SetRegionDisplay) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_SetRegionDisplay");
static_assert(sizeof(RHCustomBrowserEntry_SetRegionDisplay) == 0x000018, "Wrong size on RHCustomBrowserEntry_SetRegionDisplay");
static_assert(offsetof(RHCustomBrowserEntry_SetRegionDisplay, RegionAsText) == 0x000000, "Member 'RHCustomBrowserEntry_SetRegionDisplay::RegionAsText' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.GetGameLeaderName
// 0x0010 (0x0010 - 0x0000)
struct RHCustomBrowserEntry_GetGameLeaderName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_GetGameLeaderName) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_GetGameLeaderName");
static_assert(sizeof(RHCustomBrowserEntry_GetGameLeaderName) == 0x000010, "Wrong size on RHCustomBrowserEntry_GetGameLeaderName");
static_assert(offsetof(RHCustomBrowserEntry_GetGameLeaderName, ReturnValue) == 0x000000, "Member 'RHCustomBrowserEntry_GetGameLeaderName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.GetIsGameStarted
// 0x0001 (0x0001 - 0x0000)
struct RHCustomBrowserEntry_GetIsGameStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_GetIsGameStarted) == 0x000001, "Wrong alignment on RHCustomBrowserEntry_GetIsGameStarted");
static_assert(sizeof(RHCustomBrowserEntry_GetIsGameStarted) == 0x000001, "Wrong size on RHCustomBrowserEntry_GetIsGameStarted");
static_assert(offsetof(RHCustomBrowserEntry_GetIsGameStarted, ReturnValue) == 0x000000, "Member 'RHCustomBrowserEntry_GetIsGameStarted::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomBrowserEntry.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHCustomBrowserEntry_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomBrowserEntry_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHCustomBrowserEntry_GetQueueDataFactory");
static_assert(sizeof(RHCustomBrowserEntry_GetQueueDataFactory) == 0x000008, "Wrong size on RHCustomBrowserEntry_GetQueueDataFactory");
static_assert(offsetof(RHCustomBrowserEntry_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHCustomBrowserEntry_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetLeaveLobbyButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetLeaveLobbyButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetLeaveLobbyButton) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetLeaveLobbyButton");
static_assert(sizeof(RHCustomGameLobby_GetLeaveLobbyButton) == 0x000008, "Wrong size on RHCustomGameLobby_GetLeaveLobbyButton");
static_assert(offsetof(RHCustomGameLobby_GetLeaveLobbyButton, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetLeaveLobbyButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetPlayerWidgetForUuid
// 0x0018 (0x0018 - 0x0000)
struct RHCustomGameLobby_GetPlayerWidgetForUuid final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHCustomLobbyPlayer*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetPlayerWidgetForUuid) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetPlayerWidgetForUuid");
static_assert(sizeof(RHCustomGameLobby_GetPlayerWidgetForUuid) == 0x000018, "Wrong size on RHCustomGameLobby_GetPlayerWidgetForUuid");
static_assert(offsetof(RHCustomGameLobby_GetPlayerWidgetForUuid, PlayerUuid) == 0x000000, "Member 'RHCustomGameLobby_GetPlayerWidgetForUuid::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_GetPlayerWidgetForUuid, ReturnValue) == 0x000010, "Member 'RHCustomGameLobby_GetPlayerWidgetForUuid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetSpectatorButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetSpectatorButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetSpectatorButton) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetSpectatorButton");
static_assert(sizeof(RHCustomGameLobby_GetSpectatorButton) == 0x000008, "Wrong size on RHCustomGameLobby_GetSpectatorButton");
static_assert(offsetof(RHCustomGameLobby_GetSpectatorButton, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetSpectatorButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetStartGameButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetStartGameButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetStartGameButton) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetStartGameButton");
static_assert(sizeof(RHCustomGameLobby_GetStartGameButton) == 0x000008, "Wrong size on RHCustomGameLobby_GetStartGameButton");
static_assert(offsetof(RHCustomGameLobby_GetStartGameButton, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetStartGameButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetTeam1AddBotButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetTeam1AddBotButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetTeam1AddBotButton) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetTeam1AddBotButton");
static_assert(sizeof(RHCustomGameLobby_GetTeam1AddBotButton) == 0x000008, "Wrong size on RHCustomGameLobby_GetTeam1AddBotButton");
static_assert(offsetof(RHCustomGameLobby_GetTeam1AddBotButton, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetTeam1AddBotButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetTeam2AddBotButton
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetTeam2AddBotButton final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetTeam2AddBotButton) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetTeam2AddBotButton");
static_assert(sizeof(RHCustomGameLobby_GetTeam2AddBotButton) == 0x000008, "Wrong size on RHCustomGameLobby_GetTeam2AddBotButton");
static_assert(offsetof(RHCustomGameLobby_GetTeam2AddBotButton, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetTeam2AddBotButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.HandlePlayerClicked
// 0x0028 (0x0028 - 0x0000)
struct RHCustomGameLobby_HandlePlayerClicked final
{
public:
	struct FRH_CustomMatchMember                  MatchMember;                                       // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class URHCustomLobbyPlayer*                   PlayerWidget;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_HandlePlayerClicked) == 0x000008, "Wrong alignment on RHCustomGameLobby_HandlePlayerClicked");
static_assert(sizeof(RHCustomGameLobby_HandlePlayerClicked) == 0x000028, "Wrong size on RHCustomGameLobby_HandlePlayerClicked");
static_assert(offsetof(RHCustomGameLobby_HandlePlayerClicked, MatchMember) == 0x000000, "Member 'RHCustomGameLobby_HandlePlayerClicked::MatchMember' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_HandlePlayerClicked, PlayerWidget) == 0x000020, "Member 'RHCustomGameLobby_HandlePlayerClicked::PlayerWidget' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.HandlePlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_HandlePlayerInputTypeChanged final
{
public:
	ERH_INPUT_STATE                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_HandlePlayerInputTypeChanged) == 0x000001, "Wrong alignment on RHCustomGameLobby_HandlePlayerInputTypeChanged");
static_assert(sizeof(RHCustomGameLobby_HandlePlayerInputTypeChanged) == 0x000001, "Wrong size on RHCustomGameLobby_HandlePlayerInputTypeChanged");
static_assert(offsetof(RHCustomGameLobby_HandlePlayerInputTypeChanged, NewState) == 0x000000, "Member 'RHCustomGameLobby_HandlePlayerInputTypeChanged::NewState' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.HandlePlayerSwapTeam
// 0x0014 (0x0014 - 0x0000)
struct RHCustomGameLobby_HandlePlayerSwapTeam final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTeam;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_HandlePlayerSwapTeam) == 0x000004, "Wrong alignment on RHCustomGameLobby_HandlePlayerSwapTeam");
static_assert(sizeof(RHCustomGameLobby_HandlePlayerSwapTeam) == 0x000014, "Wrong size on RHCustomGameLobby_HandlePlayerSwapTeam");
static_assert(offsetof(RHCustomGameLobby_HandlePlayerSwapTeam, PlayerUuid) == 0x000000, "Member 'RHCustomGameLobby_HandlePlayerSwapTeam::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_HandlePlayerSwapTeam, CurrentTeam) == 0x000010, "Member 'RHCustomGameLobby_HandlePlayerSwapTeam::CurrentTeam' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.HandlePrivacyChanged
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_HandlePrivacyChanged final
{
public:
	EHWCustomMatchPrivacy                         MatchPrivacy;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_HandlePrivacyChanged) == 0x000001, "Wrong alignment on RHCustomGameLobby_HandlePrivacyChanged");
static_assert(sizeof(RHCustomGameLobby_HandlePrivacyChanged) == 0x000001, "Wrong size on RHCustomGameLobby_HandlePrivacyChanged");
static_assert(offsetof(RHCustomGameLobby_HandlePrivacyChanged, MatchPrivacy) == 0x000000, "Member 'RHCustomGameLobby_HandlePrivacyChanged::MatchPrivacy' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.HandleRegionChanged
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_HandleRegionChanged final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_HandleRegionChanged) == 0x000008, "Wrong alignment on RHCustomGameLobby_HandleRegionChanged");
static_assert(sizeof(RHCustomGameLobby_HandleRegionChanged) == 0x000010, "Wrong size on RHCustomGameLobby_HandleRegionChanged");
static_assert(offsetof(RHCustomGameLobby_HandleRegionChanged, RegionId) == 0x000000, "Member 'RHCustomGameLobby_HandleRegionChanged::RegionId' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.MassInvite_IsSelected
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_MassInvite_IsSelected final
{
public:
	class URH_RHFriendAndPlatformFriend*          PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHCustomGameLobby_MassInvite_IsSelected) == 0x000008, "Wrong alignment on RHCustomGameLobby_MassInvite_IsSelected");
static_assert(sizeof(RHCustomGameLobby_MassInvite_IsSelected) == 0x000010, "Wrong size on RHCustomGameLobby_MassInvite_IsSelected");
static_assert(offsetof(RHCustomGameLobby_MassInvite_IsSelected, PlayerInfo) == 0x000000, "Member 'RHCustomGameLobby_MassInvite_IsSelected::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_MassInvite_IsSelected, ReturnValue) == 0x000008, "Member 'RHCustomGameLobby_MassInvite_IsSelected::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.MassInvite_Select
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_MassInvite_Select final
{
public:
	class URH_RHFriendAndPlatformFriend*          PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHInviteSelectResult                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHCustomGameLobby_MassInvite_Select) == 0x000008, "Wrong alignment on RHCustomGameLobby_MassInvite_Select");
static_assert(sizeof(RHCustomGameLobby_MassInvite_Select) == 0x000010, "Wrong size on RHCustomGameLobby_MassInvite_Select");
static_assert(offsetof(RHCustomGameLobby_MassInvite_Select, PlayerInfo) == 0x000000, "Member 'RHCustomGameLobby_MassInvite_Select::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_MassInvite_Select, ReturnValue) == 0x000008, "Member 'RHCustomGameLobby_MassInvite_Select::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.MassInvite_ShouldShowPlayer
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_MassInvite_ShouldShowPlayer final
{
public:
	class URH_RHFriendAndPlatformFriend*          PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHCustomGameLobby_MassInvite_ShouldShowPlayer) == 0x000008, "Wrong alignment on RHCustomGameLobby_MassInvite_ShouldShowPlayer");
static_assert(sizeof(RHCustomGameLobby_MassInvite_ShouldShowPlayer) == 0x000010, "Wrong size on RHCustomGameLobby_MassInvite_ShouldShowPlayer");
static_assert(offsetof(RHCustomGameLobby_MassInvite_ShouldShowPlayer, PlayerInfo) == 0x000000, "Member 'RHCustomGameLobby_MassInvite_ShouldShowPlayer::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_MassInvite_ShouldShowPlayer, ReturnValue) == 0x000008, "Member 'RHCustomGameLobby_MassInvite_ShouldShowPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.OnCustomLobbyNameSanitized
// 0x0018 (0x0018 - 0x0000)
struct RHCustomGameLobby_OnCustomLobbyNameSanitized final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SanitizedName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_OnCustomLobbyNameSanitized) == 0x000008, "Wrong alignment on RHCustomGameLobby_OnCustomLobbyNameSanitized");
static_assert(sizeof(RHCustomGameLobby_OnCustomLobbyNameSanitized) == 0x000018, "Wrong size on RHCustomGameLobby_OnCustomLobbyNameSanitized");
static_assert(offsetof(RHCustomGameLobby_OnCustomLobbyNameSanitized, bSuccess) == 0x000000, "Member 'RHCustomGameLobby_OnCustomLobbyNameSanitized::bSuccess' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_OnCustomLobbyNameSanitized, SanitizedName) == 0x000008, "Member 'RHCustomGameLobby_OnCustomLobbyNameSanitized::SanitizedName' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.OpenMassInviteView
// 0x0004 (0x0004 - 0x0000)
struct RHCustomGameLobby_OpenMassInviteView final
{
public:
	int32                                         InTeamToInviteTo;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_OpenMassInviteView) == 0x000004, "Wrong alignment on RHCustomGameLobby_OpenMassInviteView");
static_assert(sizeof(RHCustomGameLobby_OpenMassInviteView) == 0x000004, "Wrong size on RHCustomGameLobby_OpenMassInviteView");
static_assert(offsetof(RHCustomGameLobby_OpenMassInviteView, InTeamToInviteTo) == 0x000000, "Member 'RHCustomGameLobby_OpenMassInviteView::InTeamToInviteTo' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.PlayerInputTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_PlayerInputTypeChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_PlayerInputTypeChanged) == 0x000001, "Wrong alignment on RHCustomGameLobby_PlayerInputTypeChanged");
static_assert(sizeof(RHCustomGameLobby_PlayerInputTypeChanged) == 0x000001, "Wrong size on RHCustomGameLobby_PlayerInputTypeChanged");
static_assert(offsetof(RHCustomGameLobby_PlayerInputTypeChanged, bIsGamepad) == 0x000000, "Member 'RHCustomGameLobby_PlayerInputTypeChanged::bIsGamepad' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.UpdateLobbyName
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_UpdateLobbyName final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_UpdateLobbyName) == 0x000008, "Wrong alignment on RHCustomGameLobby_UpdateLobbyName");
static_assert(sizeof(RHCustomGameLobby_UpdateLobbyName) == 0x000010, "Wrong size on RHCustomGameLobby_UpdateLobbyName");
static_assert(offsetof(RHCustomGameLobby_UpdateLobbyName, NewName) == 0x000000, "Member 'RHCustomGameLobby_UpdateLobbyName::NewName' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.UpdateLobbyPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_UpdateLobbyPrivacy final
{
public:
	EHWCustomMatchPrivacy                         NewMatchPrivacy;                                   // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_UpdateLobbyPrivacy) == 0x000001, "Wrong alignment on RHCustomGameLobby_UpdateLobbyPrivacy");
static_assert(sizeof(RHCustomGameLobby_UpdateLobbyPrivacy) == 0x000001, "Wrong size on RHCustomGameLobby_UpdateLobbyPrivacy");
static_assert(offsetof(RHCustomGameLobby_UpdateLobbyPrivacy, NewMatchPrivacy) == 0x000000, "Member 'RHCustomGameLobby_UpdateLobbyPrivacy::NewMatchPrivacy' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.UpdateRegionDisplay
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_UpdateRegionDisplay final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_UpdateRegionDisplay) == 0x000008, "Wrong alignment on RHCustomGameLobby_UpdateRegionDisplay");
static_assert(sizeof(RHCustomGameLobby_UpdateRegionDisplay) == 0x000010, "Wrong size on RHCustomGameLobby_UpdateRegionDisplay");
static_assert(offsetof(RHCustomGameLobby_UpdateRegionDisplay, RegionId) == 0x000000, "Member 'RHCustomGameLobby_UpdateRegionDisplay::RegionId' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetCustomMatchSession
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetCustomMatchSession final
{
public:
	class URH_JoinedSession*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetCustomMatchSession) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetCustomMatchSession");
static_assert(sizeof(RHCustomGameLobby_GetCustomMatchSession) == 0x000008, "Wrong size on RHCustomGameLobby_GetCustomMatchSession");
static_assert(offsetof(RHCustomGameLobby_GetCustomMatchSession, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetCustomMatchSession::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetPlayerWidget
// 0x0010 (0x0010 - 0x0000)
struct RHCustomGameLobby_GetPlayerWidget final
{
public:
	int32                                         TeamIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetPlayerWidget) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetPlayerWidget");
static_assert(sizeof(RHCustomGameLobby_GetPlayerWidget) == 0x000010, "Wrong size on RHCustomGameLobby_GetPlayerWidget");
static_assert(offsetof(RHCustomGameLobby_GetPlayerWidget, TeamIndex) == 0x000000, "Member 'RHCustomGameLobby_GetPlayerWidget::TeamIndex' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_GetPlayerWidget, PlayerIndex) == 0x000004, "Member 'RHCustomGameLobby_GetPlayerWidget::PlayerIndex' has a wrong offset!");
static_assert(offsetof(RHCustomGameLobby_GetPlayerWidget, ReturnValue) == 0x000008, "Member 'RHCustomGameLobby_GetPlayerWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHCustomGameLobby_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHCustomGameLobby_GetQueueDataFactory");
static_assert(sizeof(RHCustomGameLobby_GetQueueDataFactory) == 0x000008, "Wrong size on RHCustomGameLobby_GetQueueDataFactory");
static_assert(offsetof(RHCustomGameLobby_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.IsCustomBotEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_IsCustomBotEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_IsCustomBotEnabled) == 0x000001, "Wrong alignment on RHCustomGameLobby_IsCustomBotEnabled");
static_assert(sizeof(RHCustomGameLobby_IsCustomBotEnabled) == 0x000001, "Wrong size on RHCustomGameLobby_IsCustomBotEnabled");
static_assert(offsetof(RHCustomGameLobby_IsCustomBotEnabled, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_IsCustomBotEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.IsLocalPlayerSpectator
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_IsLocalPlayerSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_IsLocalPlayerSpectator) == 0x000001, "Wrong alignment on RHCustomGameLobby_IsLocalPlayerSpectator");
static_assert(sizeof(RHCustomGameLobby_IsLocalPlayerSpectator) == 0x000001, "Wrong size on RHCustomGameLobby_IsLocalPlayerSpectator");
static_assert(offsetof(RHCustomGameLobby_IsLocalPlayerSpectator, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_IsLocalPlayerSpectator::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomGameLobby.IsSpectatingEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHCustomGameLobby_IsSpectatingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomGameLobby_IsSpectatingEnabled) == 0x000001, "Wrong alignment on RHCustomGameLobby_IsSpectatingEnabled");
static_assert(sizeof(RHCustomGameLobby_IsSpectatingEnabled) == 0x000001, "Wrong size on RHCustomGameLobby_IsSpectatingEnabled");
static_assert(offsetof(RHCustomGameLobby_IsSpectatingEnabled, ReturnValue) == 0x000000, "Member 'RHCustomGameLobby_IsSpectatingEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomLobbyPlayer.SetMatchMember
// 0x0020 (0x0020 - 0x0000)
struct RHCustomLobbyPlayer_SetMatchMember final
{
public:
	struct FRH_CustomMatchMember                  InMatchMember;                                     // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomLobbyPlayer_SetMatchMember) == 0x000008, "Wrong alignment on RHCustomLobbyPlayer_SetMatchMember");
static_assert(sizeof(RHCustomLobbyPlayer_SetMatchMember) == 0x000020, "Wrong size on RHCustomLobbyPlayer_SetMatchMember");
static_assert(offsetof(RHCustomLobbyPlayer_SetMatchMember, InMatchMember) == 0x000000, "Member 'RHCustomLobbyPlayer_SetMatchMember::InMatchMember' has a wrong offset!");

// Function RallyHereStart.RHCustomLobbyPlayer.GetCanLocalPlayerControl
// 0x0001 (0x0001 - 0x0000)
struct RHCustomLobbyPlayer_GetCanLocalPlayerControl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomLobbyPlayer_GetCanLocalPlayerControl) == 0x000001, "Wrong alignment on RHCustomLobbyPlayer_GetCanLocalPlayerControl");
static_assert(sizeof(RHCustomLobbyPlayer_GetCanLocalPlayerControl) == 0x000001, "Wrong size on RHCustomLobbyPlayer_GetCanLocalPlayerControl");
static_assert(offsetof(RHCustomLobbyPlayer_GetCanLocalPlayerControl, ReturnValue) == 0x000000, "Member 'RHCustomLobbyPlayer_GetCanLocalPlayerControl::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomLobbyPlayer.GetCanLocalPlayerKick
// 0x0001 (0x0001 - 0x0000)
struct RHCustomLobbyPlayer_GetCanLocalPlayerKick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomLobbyPlayer_GetCanLocalPlayerKick) == 0x000001, "Wrong alignment on RHCustomLobbyPlayer_GetCanLocalPlayerKick");
static_assert(sizeof(RHCustomLobbyPlayer_GetCanLocalPlayerKick) == 0x000001, "Wrong size on RHCustomLobbyPlayer_GetCanLocalPlayerKick");
static_assert(offsetof(RHCustomLobbyPlayer_GetCanLocalPlayerKick, ReturnValue) == 0x000000, "Member 'RHCustomLobbyPlayer_GetCanLocalPlayerKick::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomLobbyPlayer.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHCustomLobbyPlayer_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomLobbyPlayer_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHCustomLobbyPlayer_GetQueueDataFactory");
static_assert(sizeof(RHCustomLobbyPlayer_GetQueueDataFactory) == 0x000008, "Wrong size on RHCustomLobbyPlayer_GetQueueDataFactory");
static_assert(offsetof(RHCustomLobbyPlayer_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHCustomLobbyPlayer_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomMapSelect.GetMapGrid
// 0x0008 (0x0008 - 0x0000)
struct RHCustomMapSelect_GetMapGrid final
{
public:
	class UUniformGridPanel*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomMapSelect_GetMapGrid) == 0x000008, "Wrong alignment on RHCustomMapSelect_GetMapGrid");
static_assert(sizeof(RHCustomMapSelect_GetMapGrid) == 0x000008, "Wrong size on RHCustomMapSelect_GetMapGrid");
static_assert(offsetof(RHCustomMapSelect_GetMapGrid, ReturnValue) == 0x000000, "Member 'RHCustomMapSelect_GetMapGrid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHCustomMapSelect.HandleOnMapButtonSelected
// 0x0008 (0x0008 - 0x0000)
struct RHCustomMapSelect_HandleOnMapButtonSelected final
{
public:
	class FName                                   MapName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHCustomMapSelect_HandleOnMapButtonSelected) == 0x000004, "Wrong alignment on RHCustomMapSelect_HandleOnMapButtonSelected");
static_assert(sizeof(RHCustomMapSelect_HandleOnMapButtonSelected) == 0x000008, "Wrong size on RHCustomMapSelect_HandleOnMapButtonSelected");
static_assert(offsetof(RHCustomMapSelect_HandleOnMapButtonSelected, MapName) == 0x000000, "Member 'RHCustomMapSelect_HandleOnMapButtonSelected::MapName' has a wrong offset!");

// Function RallyHereStart.RHDataFactory.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct RHDataFactory_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataFactory_IsLoggedIn) == 0x000001, "Wrong alignment on RHDataFactory_IsLoggedIn");
static_assert(sizeof(RHDataFactory_IsLoggedIn) == 0x000001, "Wrong size on RHDataFactory_IsLoggedIn");
static_assert(offsetof(RHDataFactory_IsLoggedIn, ReturnValue) == 0x000000, "Member 'RHDataFactory_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.GetPlayerList
// 0x0010 (0x0010 - 0x0000)
struct RHDataSocialCategory_GetPlayerList final
{
public:
	TArray<class URHDataSocialPlayer*>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_GetPlayerList) == 0x000008, "Wrong alignment on RHDataSocialCategory_GetPlayerList");
static_assert(sizeof(RHDataSocialCategory_GetPlayerList) == 0x000010, "Wrong size on RHDataSocialCategory_GetPlayerList");
static_assert(offsetof(RHDataSocialCategory_GetPlayerList, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_GetPlayerList::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.SetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct RHDataSocialCategory_SetHeaderText final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_SetHeaderText) == 0x000008, "Wrong alignment on RHDataSocialCategory_SetHeaderText");
static_assert(sizeof(RHDataSocialCategory_SetHeaderText) == 0x000018, "Wrong size on RHDataSocialCategory_SetHeaderText");
static_assert(offsetof(RHDataSocialCategory_SetHeaderText, Header) == 0x000000, "Member 'RHDataSocialCategory_SetHeaderText::Header' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.SetMessageText
// 0x0020 (0x0020 - 0x0000)
struct RHDataSocialCategory_SetMessageText final
{
public:
	bool                                          bProcessing;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MessageText;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_SetMessageText) == 0x000008, "Wrong alignment on RHDataSocialCategory_SetMessageText");
static_assert(sizeof(RHDataSocialCategory_SetMessageText) == 0x000020, "Wrong size on RHDataSocialCategory_SetMessageText");
static_assert(offsetof(RHDataSocialCategory_SetMessageText, bProcessing) == 0x000000, "Member 'RHDataSocialCategory_SetMessageText::bProcessing' has a wrong offset!");
static_assert(offsetof(RHDataSocialCategory_SetMessageText, MessageText) == 0x000008, "Member 'RHDataSocialCategory_SetMessageText::MessageText' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.SetOpenOnUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHDataSocialCategory_SetOpenOnUpdate final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_SetOpenOnUpdate) == 0x000001, "Wrong alignment on RHDataSocialCategory_SetOpenOnUpdate");
static_assert(sizeof(RHDataSocialCategory_SetOpenOnUpdate) == 0x000001, "Wrong size on RHDataSocialCategory_SetOpenOnUpdate");
static_assert(offsetof(RHDataSocialCategory_SetOpenOnUpdate, Value) == 0x000000, "Member 'RHDataSocialCategory_SetOpenOnUpdate::Value' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.TryConsumeOpenOnUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHDataSocialCategory_TryConsumeOpenOnUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_TryConsumeOpenOnUpdate) == 0x000001, "Wrong alignment on RHDataSocialCategory_TryConsumeOpenOnUpdate");
static_assert(sizeof(RHDataSocialCategory_TryConsumeOpenOnUpdate) == 0x000001, "Wrong size on RHDataSocialCategory_TryConsumeOpenOnUpdate");
static_assert(offsetof(RHDataSocialCategory_TryConsumeOpenOnUpdate, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_TryConsumeOpenOnUpdate::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.BP_GetSectionValue
// 0x0001 (0x0001 - 0x0000)
struct RHDataSocialCategory_BP_GetSectionValue final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_BP_GetSectionValue) == 0x000001, "Wrong alignment on RHDataSocialCategory_BP_GetSectionValue");
static_assert(sizeof(RHDataSocialCategory_BP_GetSectionValue) == 0x000001, "Wrong size on RHDataSocialCategory_BP_GetSectionValue");
static_assert(offsetof(RHDataSocialCategory_BP_GetSectionValue, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_BP_GetSectionValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.GetHeaderText
// 0x0018 (0x0018 - 0x0000)
struct RHDataSocialCategory_GetHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_GetHeaderText) == 0x000008, "Wrong alignment on RHDataSocialCategory_GetHeaderText");
static_assert(sizeof(RHDataSocialCategory_GetHeaderText) == 0x000018, "Wrong size on RHDataSocialCategory_GetHeaderText");
static_assert(offsetof(RHDataSocialCategory_GetHeaderText, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_GetHeaderText::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.GetMessageText
// 0x0018 (0x0018 - 0x0000)
struct RHDataSocialCategory_GetMessageText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_GetMessageText) == 0x000008, "Wrong alignment on RHDataSocialCategory_GetMessageText");
static_assert(sizeof(RHDataSocialCategory_GetMessageText) == 0x000018, "Wrong size on RHDataSocialCategory_GetMessageText");
static_assert(offsetof(RHDataSocialCategory_GetMessageText, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_GetMessageText::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.GetSectionSubtype
// 0x0010 (0x0010 - 0x0000)
struct RHDataSocialCategory_GetSectionSubtype final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_GetSectionSubtype) == 0x000008, "Wrong alignment on RHDataSocialCategory_GetSectionSubtype");
static_assert(sizeof(RHDataSocialCategory_GetSectionSubtype) == 0x000010, "Wrong size on RHDataSocialCategory_GetSectionSubtype");
static_assert(offsetof(RHDataSocialCategory_GetSectionSubtype, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_GetSectionSubtype::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.IsProcessing
// 0x0001 (0x0001 - 0x0000)
struct RHDataSocialCategory_IsProcessing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_IsProcessing) == 0x000001, "Wrong alignment on RHDataSocialCategory_IsProcessing");
static_assert(sizeof(RHDataSocialCategory_IsProcessing) == 0x000001, "Wrong size on RHDataSocialCategory_IsProcessing");
static_assert(offsetof(RHDataSocialCategory_IsProcessing, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_IsProcessing::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialCategory.Num
// 0x0004 (0x0004 - 0x0000)
struct RHDataSocialCategory_Num final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialCategory_Num) == 0x000004, "Wrong alignment on RHDataSocialCategory_Num");
static_assert(sizeof(RHDataSocialCategory_Num) == 0x000004, "Wrong size on RHDataSocialCategory_Num");
static_assert(offsetof(RHDataSocialCategory_Num, ReturnValue) == 0x000000, "Member 'RHDataSocialCategory_Num::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialPlayer.GetFriend
// 0x0008 (0x0008 - 0x0000)
struct RHDataSocialPlayer_GetFriend final
{
public:
	class URH_RHFriendAndPlatformFriend*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialPlayer_GetFriend) == 0x000008, "Wrong alignment on RHDataSocialPlayer_GetFriend");
static_assert(sizeof(RHDataSocialPlayer_GetFriend) == 0x000008, "Wrong size on RHDataSocialPlayer_GetFriend");
static_assert(offsetof(RHDataSocialPlayer_GetFriend, ReturnValue) == 0x000000, "Member 'RHDataSocialPlayer_GetFriend::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataSocialPlayer.IsValid
// 0x0001 (0x0001 - 0x0000)
struct RHDataSocialPlayer_IsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataSocialPlayer_IsValid) == 0x000001, "Wrong alignment on RHDataSocialPlayer_IsValid");
static_assert(sizeof(RHDataSocialPlayer_IsValid) == 0x000001, "Wrong size on RHDataSocialPlayer_IsValid");
static_assert(offsetof(RHDataSocialPlayer_IsValid, ReturnValue) == 0x000000, "Member 'RHDataSocialPlayer_IsValid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHEventSubsystem.GetEventByTag
// 0x0010 (0x0010 - 0x0000)
struct RHEventSubsystem_GetEventByTag final
{
public:
	class FName                                   EventTag;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHEvent*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHEventSubsystem_GetEventByTag) == 0x000008, "Wrong alignment on RHEventSubsystem_GetEventByTag");
static_assert(sizeof(RHEventSubsystem_GetEventByTag) == 0x000010, "Wrong size on RHEventSubsystem_GetEventByTag");
static_assert(offsetof(RHEventSubsystem_GetEventByTag, EventTag) == 0x000000, "Member 'RHEventSubsystem_GetEventByTag::EventTag' has a wrong offset!");
static_assert(offsetof(RHEventSubsystem_GetEventByTag, ReturnValue) == 0x000008, "Member 'RHEventSubsystem_GetEventByTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.DisplayForValue
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_DisplayForValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_DisplayForValue) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_DisplayForValue");
static_assert(sizeof(RHFloatTickLerpWidgetBase_DisplayForValue) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_DisplayForValue");
static_assert(offsetof(RHFloatTickLerpWidgetBase_DisplayForValue, Value) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_DisplayForValue::Value' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.ForceCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_ForceCurrentValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_ForceCurrentValue) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_ForceCurrentValue");
static_assert(sizeof(RHFloatTickLerpWidgetBase_ForceCurrentValue) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_ForceCurrentValue");
static_assert(offsetof(RHFloatTickLerpWidgetBase_ForceCurrentValue, Value) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_ForceCurrentValue::Value' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_GetCurrentValue) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_GetCurrentValue");
static_assert(sizeof(RHFloatTickLerpWidgetBase_GetCurrentValue) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_GetCurrentValue");
static_assert(offsetof(RHFloatTickLerpWidgetBase_GetCurrentValue, ReturnValue) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.IsLerping
// 0x0001 (0x0001 - 0x0000)
struct RHFloatTickLerpWidgetBase_IsLerping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_IsLerping) == 0x000001, "Wrong alignment on RHFloatTickLerpWidgetBase_IsLerping");
static_assert(sizeof(RHFloatTickLerpWidgetBase_IsLerping) == 0x000001, "Wrong size on RHFloatTickLerpWidgetBase_IsLerping");
static_assert(offsetof(RHFloatTickLerpWidgetBase_IsLerping, ReturnValue) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_IsLerping::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.SetLerpPower
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_SetLerpPower final
{
public:
	float                                         Power;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_SetLerpPower) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_SetLerpPower");
static_assert(sizeof(RHFloatTickLerpWidgetBase_SetLerpPower) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_SetLerpPower");
static_assert(offsetof(RHFloatTickLerpWidgetBase_SetLerpPower, Power) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_SetLerpPower::Power' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.SetLerpTime
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_SetLerpTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_SetLerpTime) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_SetLerpTime");
static_assert(sizeof(RHFloatTickLerpWidgetBase_SetLerpTime) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_SetLerpTime");
static_assert(offsetof(RHFloatTickLerpWidgetBase_SetLerpTime, Time) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_SetLerpTime::Time' has a wrong offset!");

// Function RallyHereStart.RHFloatTickLerpWidgetBase.SetTargetValue
// 0x0004 (0x0004 - 0x0000)
struct RHFloatTickLerpWidgetBase_SetTargetValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHFloatTickLerpWidgetBase_SetTargetValue) == 0x000004, "Wrong alignment on RHFloatTickLerpWidgetBase_SetTargetValue");
static_assert(sizeof(RHFloatTickLerpWidgetBase_SetTargetValue) == 0x000004, "Wrong size on RHFloatTickLerpWidgetBase_SetTargetValue");
static_assert(offsetof(RHFloatTickLerpWidgetBase_SetTargetValue, Value) == 0x000000, "Member 'RHFloatTickLerpWidgetBase_SetTargetValue::Value' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.ApplySafeFrameScale
// 0x0004 (0x0004 - 0x0000)
struct RHHUDCommon_ApplySafeFrameScale final
{
public:
	float                                         SafeFrameScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_ApplySafeFrameScale) == 0x000004, "Wrong alignment on RHHUDCommon_ApplySafeFrameScale");
static_assert(sizeof(RHHUDCommon_ApplySafeFrameScale) == 0x000004, "Wrong size on RHHUDCommon_ApplySafeFrameScale");
static_assert(offsetof(RHHUDCommon_ApplySafeFrameScale, SafeFrameScale) == 0x000000, "Member 'RHHUDCommon_ApplySafeFrameScale::SafeFrameScale' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.DisplayGenericError
// 0x0010 (0x0010 - 0x0000)
struct RHHUDCommon_DisplayGenericError final
{
public:
	class FString                                 sDesc;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_DisplayGenericError) == 0x000008, "Wrong alignment on RHHUDCommon_DisplayGenericError");
static_assert(sizeof(RHHUDCommon_DisplayGenericError) == 0x000010, "Wrong size on RHHUDCommon_DisplayGenericError");
static_assert(offsetof(RHHUDCommon_DisplayGenericError, sDesc) == 0x000000, "Member 'RHHUDCommon_DisplayGenericError::sDesc' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.DisplayGenericPopup
// 0x0020 (0x0020 - 0x0000)
struct RHHUDCommon_DisplayGenericPopup final
{
public:
	class FString                                 sTitle;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 sDesc;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_DisplayGenericPopup) == 0x000008, "Wrong alignment on RHHUDCommon_DisplayGenericPopup");
static_assert(sizeof(RHHUDCommon_DisplayGenericPopup) == 0x000020, "Wrong size on RHHUDCommon_DisplayGenericPopup");
static_assert(offsetof(RHHUDCommon_DisplayGenericPopup, sTitle) == 0x000000, "Member 'RHHUDCommon_DisplayGenericPopup::sTitle' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_DisplayGenericPopup, sDesc) == 0x000010, "Member 'RHHUDCommon_DisplayGenericPopup::sDesc' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetAcceptPressedAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetAcceptPressedAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetAcceptPressedAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetAcceptPressedAction");
static_assert(sizeof(RHHUDCommon_GetAcceptPressedAction) == 0x000008, "Wrong size on RHHUDCommon_GetAcceptPressedAction");
static_assert(offsetof(RHHUDCommon_GetAcceptPressedAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetAcceptPressedAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetAcceptReleasedAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetAcceptReleasedAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetAcceptReleasedAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetAcceptReleasedAction");
static_assert(sizeof(RHHUDCommon_GetAcceptReleasedAction) == 0x000008, "Wrong size on RHHUDCommon_GetAcceptReleasedAction");
static_assert(offsetof(RHHUDCommon_GetAcceptReleasedAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetAcceptReleasedAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetCancelPressedAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetCancelPressedAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetCancelPressedAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetCancelPressedAction");
static_assert(sizeof(RHHUDCommon_GetCancelPressedAction) == 0x000008, "Wrong size on RHHUDCommon_GetCancelPressedAction");
static_assert(offsetof(RHHUDCommon_GetCancelPressedAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetCancelPressedAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetCancelReleasedAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetCancelReleasedAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetCancelReleasedAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetCancelReleasedAction");
static_assert(sizeof(RHHUDCommon_GetCancelReleasedAction) == 0x000008, "Wrong size on RHHUDCommon_GetCancelReleasedAction");
static_assert(offsetof(RHHUDCommon_GetCancelReleasedAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetCancelReleasedAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetFocusableWidgetContainers
// 0x0010 (0x0010 - 0x0000)
struct RHHUDCommon_GetFocusableWidgetContainers final
{
public:
	TArray<class UPanelWidget*>                   ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetFocusableWidgetContainers) == 0x000008, "Wrong alignment on RHHUDCommon_GetFocusableWidgetContainers");
static_assert(sizeof(RHHUDCommon_GetFocusableWidgetContainers) == 0x000010, "Wrong size on RHHUDCommon_GetFocusableWidgetContainers");
static_assert(offsetof(RHHUDCommon_GetFocusableWidgetContainers, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetFocusableWidgetContainers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetHoldToCancelAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetHoldToCancelAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetHoldToCancelAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetHoldToCancelAction");
static_assert(sizeof(RHHUDCommon_GetHoldToCancelAction) == 0x000008, "Wrong size on RHHUDCommon_GetHoldToCancelAction");
static_assert(offsetof(RHHUDCommon_GetHoldToCancelAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetHoldToCancelAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetHoldToConfirmAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetHoldToConfirmAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetHoldToConfirmAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetHoldToConfirmAction");
static_assert(sizeof(RHHUDCommon_GetHoldToConfirmAction) == 0x000008, "Wrong size on RHHUDCommon_GetHoldToConfirmAction");
static_assert(offsetof(RHHUDCommon_GetHoldToConfirmAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetHoldToConfirmAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetHUDMappingContext
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetHUDMappingContext final
{
public:
	class UInputMappingContext*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetHUDMappingContext) == 0x000008, "Wrong alignment on RHHUDCommon_GetHUDMappingContext");
static_assert(sizeof(RHHUDCommon_GetHUDMappingContext) == 0x000008, "Wrong size on RHHUDCommon_GetHUDMappingContext");
static_assert(offsetof(RHHUDCommon_GetHUDMappingContext, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetHUDMappingContext::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetInputManager
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetInputManager final
{
public:
	class URHInputManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetInputManager) == 0x000008, "Wrong alignment on RHHUDCommon_GetInputManager");
static_assert(sizeof(RHHUDCommon_GetInputManager) == 0x000008, "Wrong size on RHHUDCommon_GetInputManager");
static_assert(offsetof(RHHUDCommon_GetInputManager, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetInputManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetNavigateDownAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetNavigateDownAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetNavigateDownAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetNavigateDownAction");
static_assert(sizeof(RHHUDCommon_GetNavigateDownAction) == 0x000008, "Wrong size on RHHUDCommon_GetNavigateDownAction");
static_assert(offsetof(RHHUDCommon_GetNavigateDownAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetNavigateDownAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetNavigateLeftAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetNavigateLeftAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetNavigateLeftAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetNavigateLeftAction");
static_assert(sizeof(RHHUDCommon_GetNavigateLeftAction) == 0x000008, "Wrong size on RHHUDCommon_GetNavigateLeftAction");
static_assert(offsetof(RHHUDCommon_GetNavigateLeftAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetNavigateLeftAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetNavigateRightAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetNavigateRightAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetNavigateRightAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetNavigateRightAction");
static_assert(sizeof(RHHUDCommon_GetNavigateRightAction) == 0x000008, "Wrong size on RHHUDCommon_GetNavigateRightAction");
static_assert(offsetof(RHHUDCommon_GetNavigateRightAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetNavigateRightAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetNavigateUpAction
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetNavigateUpAction final
{
public:
	class UInputAction*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetNavigateUpAction) == 0x000008, "Wrong alignment on RHHUDCommon_GetNavigateUpAction");
static_assert(sizeof(RHHUDCommon_GetNavigateUpAction) == 0x000008, "Wrong size on RHHUDCommon_GetNavigateUpAction");
static_assert(offsetof(RHHUDCommon_GetNavigateUpAction, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetNavigateUpAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetOrCreatePlayerInfo
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_GetOrCreatePlayerInfo final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetOrCreatePlayerInfo) == 0x000008, "Wrong alignment on RHHUDCommon_GetOrCreatePlayerInfo");
static_assert(sizeof(RHHUDCommon_GetOrCreatePlayerInfo) == 0x000018, "Wrong size on RHHUDCommon_GetOrCreatePlayerInfo");
static_assert(offsetof(RHHUDCommon_GetOrCreatePlayerInfo, PlayerUuid) == 0x000000, "Member 'RHHUDCommon_GetOrCreatePlayerInfo::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetOrCreatePlayerInfo, ReturnValue) == 0x000010, "Member 'RHHUDCommon_GetOrCreatePlayerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPlayerControllerOwner
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetPlayerControllerOwner final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPlayerControllerOwner) == 0x000008, "Wrong alignment on RHHUDCommon_GetPlayerControllerOwner");
static_assert(sizeof(RHHUDCommon_GetPlayerControllerOwner) == 0x000008, "Wrong size on RHHUDCommon_GetPlayerControllerOwner");
static_assert(offsetof(RHHUDCommon_GetPlayerControllerOwner, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetPlayerControllerOwner::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPlayerInfo
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_GetPlayerInfo final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPlayerInfo) == 0x000008, "Wrong alignment on RHHUDCommon_GetPlayerInfo");
static_assert(sizeof(RHHUDCommon_GetPlayerInfo) == 0x000018, "Wrong size on RHHUDCommon_GetPlayerInfo");
static_assert(offsetof(RHHUDCommon_GetPlayerInfo, PlayerUuid) == 0x000000, "Member 'RHHUDCommon_GetPlayerInfo::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetPlayerInfo, ReturnValue) == 0x000010, "Member 'RHHUDCommon_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPopupManager
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetPopupManager final
{
public:
	class URHPopupManager*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPopupManager) == 0x000008, "Wrong alignment on RHHUDCommon_GetPopupManager");
static_assert(sizeof(RHHUDCommon_GetPopupManager) == 0x000008, "Wrong size on RHHUDCommon_GetPopupManager");
static_assert(offsetof(RHHUDCommon_GetPopupManager, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetPopupManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.HandleLoginStateChange
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_HandleLoginStateChange final
{
public:
	ERHLoginState                                 LoginState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_HandleLoginStateChange) == 0x000001, "Wrong alignment on RHHUDCommon_HandleLoginStateChange");
static_assert(sizeof(RHHUDCommon_HandleLoginStateChange) == 0x000001, "Wrong size on RHHUDCommon_HandleLoginStateChange");
static_assert(offsetof(RHHUDCommon_HandleLoginStateChange, LoginState) == 0x000000, "Member 'RHHUDCommon_HandleLoginStateChange::LoginState' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.HandleMatchStatusUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_HandleMatchStatusUpdated final
{
public:
	ERH_MatchStatus                               MatchStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_HandleMatchStatusUpdated) == 0x000001, "Wrong alignment on RHHUDCommon_HandleMatchStatusUpdated");
static_assert(sizeof(RHHUDCommon_HandleMatchStatusUpdated) == 0x000001, "Wrong size on RHHUDCommon_HandleMatchStatusUpdated");
static_assert(offsetof(RHHUDCommon_HandleMatchStatusUpdated, MatchStatus) == 0x000000, "Member 'RHHUDCommon_HandleMatchStatusUpdated::MatchStatus' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.InputStateChangePassthrough
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_InputStateChangePassthrough final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_InputStateChangePassthrough) == 0x000001, "Wrong alignment on RHHUDCommon_InputStateChangePassthrough");
static_assert(sizeof(RHHUDCommon_InputStateChangePassthrough) == 0x000001, "Wrong size on RHHUDCommon_InputStateChangePassthrough");
static_assert(offsetof(RHHUDCommon_InputStateChangePassthrough, InputState) == 0x000000, "Member 'RHHUDCommon_InputStateChangePassthrough::InputState' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.LogErrorMessage
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_LogErrorMessage final
{
public:
	class FText                                   ErrorMsg;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_LogErrorMessage) == 0x000008, "Wrong alignment on RHHUDCommon_LogErrorMessage");
static_assert(sizeof(RHHUDCommon_LogErrorMessage) == 0x000018, "Wrong size on RHHUDCommon_LogErrorMessage");
static_assert(offsetof(RHHUDCommon_LogErrorMessage, ErrorMsg) == 0x000000, "Member 'RHHUDCommon_LogErrorMessage::ErrorMsg' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.OnInvalidVoucherOrder
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_OnInvalidVoucherOrder final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_OnInvalidVoucherOrder) == 0x000008, "Wrong alignment on RHHUDCommon_OnInvalidVoucherOrder");
static_assert(sizeof(RHHUDCommon_OnInvalidVoucherOrder) == 0x000008, "Wrong size on RHHUDCommon_OnInvalidVoucherOrder");
static_assert(offsetof(RHHUDCommon_OnInvalidVoucherOrder, StoreItem) == 0x000000, "Member 'RHHUDCommon_OnInvalidVoucherOrder::StoreItem' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.OnNavigateBack
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_OnNavigateBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_OnNavigateBack) == 0x000001, "Wrong alignment on RHHUDCommon_OnNavigateBack");
static_assert(sizeof(RHHUDCommon_OnNavigateBack) == 0x000001, "Wrong size on RHHUDCommon_OnNavigateBack");
static_assert(offsetof(RHHUDCommon_OnNavigateBack, ReturnValue) == 0x000000, "Member 'RHHUDCommon_OnNavigateBack::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.OnRegionsUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_OnRegionsUpdated final
{
public:
	class URH_MatchmakingBrowserCache*            MatchingBrowserCache;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_OnRegionsUpdated) == 0x000008, "Wrong alignment on RHHUDCommon_OnRegionsUpdated");
static_assert(sizeof(RHHUDCommon_OnRegionsUpdated) == 0x000008, "Wrong size on RHHUDCommon_OnRegionsUpdated");
static_assert(offsetof(RHHUDCommon_OnRegionsUpdated, MatchingBrowserCache) == 0x000000, "Member 'RHHUDCommon_OnRegionsUpdated::MatchingBrowserCache' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.PrintToLog
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_PrintToLog final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_PrintToLog) == 0x000008, "Wrong alignment on RHHUDCommon_PrintToLog");
static_assert(sizeof(RHHUDCommon_PrintToLog) == 0x000018, "Wrong size on RHHUDCommon_PrintToLog");
static_assert(offsetof(RHHUDCommon_PrintToLog, InText) == 0x000000, "Member 'RHHUDCommon_PrintToLog::InText' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.SetNavigationEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_SetNavigationEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_SetNavigationEnabled) == 0x000001, "Wrong alignment on RHHUDCommon_SetNavigationEnabled");
static_assert(sizeof(RHHUDCommon_SetNavigationEnabled) == 0x000001, "Wrong size on RHHUDCommon_SetNavigationEnabled");
static_assert(offsetof(RHHUDCommon_SetNavigationEnabled, Enabled) == 0x000000, "Member 'RHHUDCommon_SetNavigationEnabled::Enabled' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.SetPreferredRegionId
// 0x0010 (0x0010 - 0x0000)
struct RHHUDCommon_SetPreferredRegionId final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_SetPreferredRegionId) == 0x000008, "Wrong alignment on RHHUDCommon_SetPreferredRegionId");
static_assert(sizeof(RHHUDCommon_SetPreferredRegionId) == 0x000010, "Wrong size on RHHUDCommon_SetPreferredRegionId");
static_assert(offsetof(RHHUDCommon_SetPreferredRegionId, RegionId) == 0x000000, "Member 'RHHUDCommon_SetPreferredRegionId::RegionId' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.SetUseNewUIFeatures
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_SetUseNewUIFeatures final
{
public:
	bool                                          UseNewFeatures;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_SetUseNewUIFeatures) == 0x000001, "Wrong alignment on RHHUDCommon_SetUseNewUIFeatures");
static_assert(sizeof(RHHUDCommon_SetUseNewUIFeatures) == 0x000001, "Wrong size on RHHUDCommon_SetUseNewUIFeatures");
static_assert(offsetof(RHHUDCommon_SetUseNewUIFeatures, UseNewFeatures) == 0x000000, "Member 'RHHUDCommon_SetUseNewUIFeatures::UseNewFeatures' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.SetViewManager
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_SetViewManager final
{
public:
	class URHViewManager*                         InViewManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_SetViewManager) == 0x000008, "Wrong alignment on RHHUDCommon_SetViewManager");
static_assert(sizeof(RHHUDCommon_SetViewManager) == 0x000008, "Wrong size on RHHUDCommon_SetViewManager");
static_assert(offsetof(RHHUDCommon_SetViewManager, InViewManager) == 0x000000, "Member 'RHHUDCommon_SetViewManager::InViewManager' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.ShowErrorPopup
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_ShowErrorPopup final
{
public:
	class FText                                   ErrorMsg;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_ShowErrorPopup) == 0x000008, "Wrong alignment on RHHUDCommon_ShowErrorPopup");
static_assert(sizeof(RHHUDCommon_ShowErrorPopup) == 0x000018, "Wrong size on RHHUDCommon_ShowErrorPopup");
static_assert(offsetof(RHHUDCommon_ShowErrorPopup, ErrorMsg) == 0x000000, "Member 'RHHUDCommon_ShowErrorPopup::ErrorMsg' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetColor
// 0x001C (0x001C - 0x0000)
struct RHHUDCommon_GetColor final
{
public:
	class FName                                   ColorName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnColor;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_GetColor) == 0x000004, "Wrong alignment on RHHUDCommon_GetColor");
static_assert(sizeof(RHHUDCommon_GetColor) == 0x00001C, "Wrong size on RHHUDCommon_GetColor");
static_assert(offsetof(RHHUDCommon_GetColor, ColorName) == 0x000000, "Member 'RHHUDCommon_GetColor::ColorName' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetColor, ReturnColor) == 0x000008, "Member 'RHHUDCommon_GetColor::ReturnColor' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetColor, ReturnValue) == 0x000018, "Member 'RHHUDCommon_GetColor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetCurrentInputState
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_GetCurrentInputState final
{
public:
	ERH_INPUT_STATE                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetCurrentInputState) == 0x000001, "Wrong alignment on RHHUDCommon_GetCurrentInputState");
static_assert(sizeof(RHHUDCommon_GetCurrentInputState) == 0x000001, "Wrong size on RHHUDCommon_GetCurrentInputState");
static_assert(offsetof(RHHUDCommon_GetCurrentInputState, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetCurrentInputState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetFont
// 0x0068 (0x0068 - 0x0000)
struct RHHUDCommon_GetFont final
{
public:
	class FName                                   FontName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         ReturnFont;                                        // 0x0008(0x0058)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_GetFont) == 0x000008, "Wrong alignment on RHHUDCommon_GetFont");
static_assert(sizeof(RHHUDCommon_GetFont) == 0x000068, "Wrong size on RHHUDCommon_GetFont");
static_assert(offsetof(RHHUDCommon_GetFont, FontName) == 0x000000, "Member 'RHHUDCommon_GetFont::FontName' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetFont, ReturnFont) == 0x000008, "Member 'RHHUDCommon_GetFont::ReturnFont' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetFont, ReturnValue) == 0x000060, "Member 'RHHUDCommon_GetFont::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetGameInstanceSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetGameInstanceSubsystem final
{
public:
	class URH_GameInstanceSubsystem*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetGameInstanceSubsystem) == 0x000008, "Wrong alignment on RHHUDCommon_GetGameInstanceSubsystem");
static_assert(sizeof(RHHUDCommon_GetGameInstanceSubsystem) == 0x000008, "Wrong size on RHHUDCommon_GetGameInstanceSubsystem");
static_assert(offsetof(RHHUDCommon_GetGameInstanceSubsystem, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetGameInstanceSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetLocalDataSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetLocalDataSubsystem final
{
public:
	class URHLocalDataSubsystem*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetLocalDataSubsystem) == 0x000008, "Wrong alignment on RHHUDCommon_GetLocalDataSubsystem");
static_assert(sizeof(RHHUDCommon_GetLocalDataSubsystem) == 0x000008, "Wrong size on RHHUDCommon_GetLocalDataSubsystem");
static_assert(offsetof(RHHUDCommon_GetLocalDataSubsystem, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetLocalDataSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetLocalPlayerSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetLocalPlayerSubsystem final
{
public:
	class URH_LocalPlayerSubsystem*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetLocalPlayerSubsystem) == 0x000008, "Wrong alignment on RHHUDCommon_GetLocalPlayerSubsystem");
static_assert(sizeof(RHHUDCommon_GetLocalPlayerSubsystem) == 0x000008, "Wrong size on RHHUDCommon_GetLocalPlayerSubsystem");
static_assert(offsetof(RHHUDCommon_GetLocalPlayerSubsystem, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetLocalPlayerSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetLoginDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetLoginDataFactory final
{
public:
	class URHLoginDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetLoginDataFactory) == 0x000008, "Wrong alignment on RHHUDCommon_GetLoginDataFactory");
static_assert(sizeof(RHHUDCommon_GetLoginDataFactory) == 0x000008, "Wrong size on RHHUDCommon_GetLoginDataFactory");
static_assert(offsetof(RHHUDCommon_GetLoginDataFactory, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetLoginDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetOrderSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetOrderSubsystem final
{
public:
	class URHOrderSubsystem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetOrderSubsystem) == 0x000008, "Wrong alignment on RHHUDCommon_GetOrderSubsystem");
static_assert(sizeof(RHHUDCommon_GetOrderSubsystem) == 0x000008, "Wrong size on RHHUDCommon_GetOrderSubsystem");
static_assert(offsetof(RHHUDCommon_GetOrderSubsystem, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetOrderSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetOSSUniqueId
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_GetOSSUniqueId final
{
public:
	struct FUniqueNetIdWrapper                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetOSSUniqueId) == 0x000001, "Wrong alignment on RHHUDCommon_GetOSSUniqueId");
static_assert(sizeof(RHHUDCommon_GetOSSUniqueId) == 0x000001, "Wrong size on RHHUDCommon_GetOSSUniqueId");
static_assert(offsetof(RHHUDCommon_GetOSSUniqueId, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetOSSUniqueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPartyManager) == 0x000008, "Wrong alignment on RHHUDCommon_GetPartyManager");
static_assert(sizeof(RHHUDCommon_GetPartyManager) == 0x000008, "Wrong size on RHHUDCommon_GetPartyManager");
static_assert(offsetof(RHHUDCommon_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPlatformUserId
// 0x0004 (0x0004 - 0x0000)
struct RHHUDCommon_GetPlatformUserId final
{
public:
	struct FPlatformUserId                        ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPlatformUserId) == 0x000004, "Wrong alignment on RHHUDCommon_GetPlatformUserId");
static_assert(sizeof(RHHUDCommon_GetPlatformUserId) == 0x000004, "Wrong size on RHHUDCommon_GetPlatformUserId");
static_assert(offsetof(RHHUDCommon_GetPlatformUserId, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetPlatformUserId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPlayerInfoSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetPlayerInfoSubsystem final
{
public:
	class URH_PlayerInfoSubsystem*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetPlayerInfoSubsystem) == 0x000008, "Wrong alignment on RHHUDCommon_GetPlayerInfoSubsystem");
static_assert(sizeof(RHHUDCommon_GetPlayerInfoSubsystem) == 0x000008, "Wrong size on RHHUDCommon_GetPlayerInfoSubsystem");
static_assert(offsetof(RHHUDCommon_GetPlayerInfoSubsystem, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetPlayerInfoSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetPreferredRegionId
// 0x0018 (0x0018 - 0x0000)
struct RHHUDCommon_GetPreferredRegionId final
{
public:
	class FString                                 OutRegionId;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_GetPreferredRegionId) == 0x000008, "Wrong alignment on RHHUDCommon_GetPreferredRegionId");
static_assert(sizeof(RHHUDCommon_GetPreferredRegionId) == 0x000018, "Wrong size on RHHUDCommon_GetPreferredRegionId");
static_assert(offsetof(RHHUDCommon_GetPreferredRegionId, OutRegionId) == 0x000000, "Member 'RHHUDCommon_GetPreferredRegionId::OutRegionId' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetPreferredRegionId, ReturnValue) == 0x000010, "Member 'RHHUDCommon_GetPreferredRegionId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHHUDCommon_GetQueueDataFactory");
static_assert(sizeof(RHHUDCommon_GetQueueDataFactory) == 0x000008, "Wrong size on RHHUDCommon_GetQueueDataFactory");
static_assert(offsetof(RHHUDCommon_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetRegionList
// 0x0058 (0x0058 - 0x0000)
struct RHHUDCommon_GetRegionList final
{
public:
	TMap<class FString, class FText>              OutRegionIdToNameMap;                              // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          bIncludeCustomOnlyRegions;                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_GetRegionList) == 0x000008, "Wrong alignment on RHHUDCommon_GetRegionList");
static_assert(sizeof(RHHUDCommon_GetRegionList) == 0x000058, "Wrong size on RHHUDCommon_GetRegionList");
static_assert(offsetof(RHHUDCommon_GetRegionList, OutRegionIdToNameMap) == 0x000000, "Member 'RHHUDCommon_GetRegionList::OutRegionIdToNameMap' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_GetRegionList, bIncludeCustomOnlyRegions) == 0x000050, "Member 'RHHUDCommon_GetRegionList::bIncludeCustomOnlyRegions' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetSettingsDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetSettingsDataFactory final
{
public:
	class URHSettingsDataFactory*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetSettingsDataFactory) == 0x000008, "Wrong alignment on RHHUDCommon_GetSettingsDataFactory");
static_assert(sizeof(RHHUDCommon_GetSettingsDataFactory) == 0x000008, "Wrong size on RHHUDCommon_GetSettingsDataFactory");
static_assert(offsetof(RHHUDCommon_GetSettingsDataFactory, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetSettingsDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.GetViewManager
// 0x0008 (0x0008 - 0x0000)
struct RHHUDCommon_GetViewManager final
{
public:
	class URHViewManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_GetViewManager) == 0x000008, "Wrong alignment on RHHUDCommon_GetViewManager");
static_assert(sizeof(RHHUDCommon_GetViewManager) == 0x000008, "Wrong size on RHHUDCommon_GetViewManager");
static_assert(offsetof(RHHUDCommon_GetViewManager, ReturnValue) == 0x000000, "Member 'RHHUDCommon_GetViewManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.IsCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_IsCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_IsCrossplayEnabled) == 0x000001, "Wrong alignment on RHHUDCommon_IsCrossplayEnabled");
static_assert(sizeof(RHHUDCommon_IsCrossplayEnabled) == 0x000001, "Wrong size on RHHUDCommon_IsCrossplayEnabled");
static_assert(offsetof(RHHUDCommon_IsCrossplayEnabled, ReturnValue) == 0x000000, "Member 'RHHUDCommon_IsCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.IsLobbyHUD
// 0x0001 (0x0001 - 0x0000)
struct RHHUDCommon_IsLobbyHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDCommon_IsLobbyHUD) == 0x000001, "Wrong alignment on RHHUDCommon_IsLobbyHUD");
static_assert(sizeof(RHHUDCommon_IsLobbyHUD) == 0x000001, "Wrong size on RHHUDCommon_IsLobbyHUD");
static_assert(offsetof(RHHUDCommon_IsLobbyHUD, ReturnValue) == 0x000000, "Member 'RHHUDCommon_IsLobbyHUD::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.IsSamePlatformAsLocalPlayer
// 0x0014 (0x0014 - 0x0000)
struct RHHUDCommon_IsSamePlatformAsLocalPlayer final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_IsSamePlatformAsLocalPlayer) == 0x000004, "Wrong alignment on RHHUDCommon_IsSamePlatformAsLocalPlayer");
static_assert(sizeof(RHHUDCommon_IsSamePlatformAsLocalPlayer) == 0x000014, "Wrong size on RHHUDCommon_IsSamePlatformAsLocalPlayer");
static_assert(offsetof(RHHUDCommon_IsSamePlatformAsLocalPlayer, PlayerId) == 0x000000, "Member 'RHHUDCommon_IsSamePlatformAsLocalPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_IsSamePlatformAsLocalPlayer, ReturnValue) == 0x000010, "Member 'RHHUDCommon_IsSamePlatformAsLocalPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.ShouldShowCrossplayIconForPlayer
// 0x0014 (0x0014 - 0x0000)
struct RHHUDCommon_ShouldShowCrossplayIconForPlayer final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_ShouldShowCrossplayIconForPlayer) == 0x000004, "Wrong alignment on RHHUDCommon_ShouldShowCrossplayIconForPlayer");
static_assert(sizeof(RHHUDCommon_ShouldShowCrossplayIconForPlayer) == 0x000014, "Wrong size on RHHUDCommon_ShouldShowCrossplayIconForPlayer");
static_assert(offsetof(RHHUDCommon_ShouldShowCrossplayIconForPlayer, PlayerId) == 0x000000, "Member 'RHHUDCommon_ShouldShowCrossplayIconForPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_ShouldShowCrossplayIconForPlayer, ReturnValue) == 0x000010, "Member 'RHHUDCommon_ShouldShowCrossplayIconForPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDCommon.ShouldShowCrossplayIconForPlayerState
// 0x0010 (0x0010 - 0x0000)
struct RHHUDCommon_ShouldShowCrossplayIconForPlayerState final
{
public:
	class ARHPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDCommon_ShouldShowCrossplayIconForPlayerState) == 0x000008, "Wrong alignment on RHHUDCommon_ShouldShowCrossplayIconForPlayerState");
static_assert(sizeof(RHHUDCommon_ShouldShowCrossplayIconForPlayerState) == 0x000010, "Wrong size on RHHUDCommon_ShouldShowCrossplayIconForPlayerState");
static_assert(offsetof(RHHUDCommon_ShouldShowCrossplayIconForPlayerState, PlayerState) == 0x000000, "Member 'RHHUDCommon_ShouldShowCrossplayIconForPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(RHHUDCommon_ShouldShowCrossplayIconForPlayerState, ReturnValue) == 0x000008, "Member 'RHHUDCommon_ShouldShowCrossplayIconForPlayerState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.BeginLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct RHGameInstance_BeginLoadingScreen final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameInstance_BeginLoadingScreen) == 0x000008, "Wrong alignment on RHGameInstance_BeginLoadingScreen");
static_assert(sizeof(RHGameInstance_BeginLoadingScreen) == 0x000010, "Wrong size on RHGameInstance_BeginLoadingScreen");
static_assert(offsetof(RHGameInstance_BeginLoadingScreen, MapName) == 0x000000, "Member 'RHGameInstance_BeginLoadingScreen::MapName' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.EndLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct RHGameInstance_EndLoadingScreen final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameInstance_EndLoadingScreen) == 0x000008, "Wrong alignment on RHGameInstance_EndLoadingScreen");
static_assert(sizeof(RHGameInstance_EndLoadingScreen) == 0x000008, "Wrong size on RHGameInstance_EndLoadingScreen");
static_assert(offsetof(RHGameInstance_EndLoadingScreen, World) == 0x000000, "Member 'RHGameInstance_EndLoadingScreen::World' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.SetVoiceMuted
// 0x0014 (0x0014 - 0x0000)
struct RHGameInstance_SetVoiceMuted final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHGameInstance_SetVoiceMuted) == 0x000004, "Wrong alignment on RHGameInstance_SetVoiceMuted");
static_assert(sizeof(RHGameInstance_SetVoiceMuted) == 0x000014, "Wrong size on RHGameInstance_SetVoiceMuted");
static_assert(offsetof(RHGameInstance_SetVoiceMuted, PlayerUuid) == 0x000000, "Member 'RHGameInstance_SetVoiceMuted::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHGameInstance_SetVoiceMuted, bIsMuted) == 0x000010, "Member 'RHGameInstance_SetVoiceMuted::bIsMuted' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHGameInstance_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameInstance_GetPartyManager) == 0x000008, "Wrong alignment on RHGameInstance_GetPartyManager");
static_assert(sizeof(RHGameInstance_GetPartyManager) == 0x000008, "Wrong size on RHGameInstance_GetPartyManager");
static_assert(offsetof(RHGameInstance_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHGameInstance_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHGameInstance_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameInstance_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHGameInstance_GetQueueDataFactory");
static_assert(sizeof(RHGameInstance_GetQueueDataFactory) == 0x000008, "Wrong size on RHGameInstance_GetQueueDataFactory");
static_assert(offsetof(RHGameInstance_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHGameInstance_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameInstance.IsVoiceMuted
// 0x0014 (0x0014 - 0x0000)
struct RHGameInstance_IsVoiceMuted final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHGameInstance_IsVoiceMuted) == 0x000004, "Wrong alignment on RHGameInstance_IsVoiceMuted");
static_assert(sizeof(RHGameInstance_IsVoiceMuted) == 0x000014, "Wrong size on RHGameInstance_IsVoiceMuted");
static_assert(offsetof(RHGameInstance_IsVoiceMuted, PlayerUuid) == 0x000000, "Member 'RHGameInstance_IsVoiceMuted::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHGameInstance_IsVoiceMuted, ReturnValue) == 0x000010, "Member 'RHGameInstance_IsVoiceMuted::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameModeBase.CalculateMatchCloseness
// 0x0004 (0x0004 - 0x0000)
struct RHGameModeBase_CalculateMatchCloseness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameModeBase_CalculateMatchCloseness) == 0x000004, "Wrong alignment on RHGameModeBase_CalculateMatchCloseness");
static_assert(sizeof(RHGameModeBase_CalculateMatchCloseness) == 0x000004, "Wrong size on RHGameModeBase_CalculateMatchCloseness");
static_assert(offsetof(RHGameModeBase_CalculateMatchCloseness, ReturnValue) == 0x000000, "Member 'RHGameModeBase_CalculateMatchCloseness::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameModeBase.InactivePlayerStateDestroyed
// 0x0008 (0x0008 - 0x0000)
struct RHGameModeBase_InactivePlayerStateDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameModeBase_InactivePlayerStateDestroyed) == 0x000008, "Wrong alignment on RHGameModeBase_InactivePlayerStateDestroyed");
static_assert(sizeof(RHGameModeBase_InactivePlayerStateDestroyed) == 0x000008, "Wrong size on RHGameModeBase_InactivePlayerStateDestroyed");
static_assert(offsetof(RHGameModeBase_InactivePlayerStateDestroyed, InActor) == 0x000000, "Member 'RHGameModeBase_InactivePlayerStateDestroyed::InActor' has a wrong offset!");

// Function RallyHereStart.RHGamepadCurvedLookSpeedManager.SetBaseVelocityCurve
// 0x0008 (0x0008 - 0x0000)
struct RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve final
{
public:
	class FName                                   TestCurveName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve) == 0x000004, "Wrong alignment on RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve");
static_assert(sizeof(RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve) == 0x000008, "Wrong size on RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve, TestCurveName) == 0x000000, "Member 'RHGamepadCurvedLookSpeedManager_SetBaseVelocityCurve::TestCurveName' has a wrong offset!");

// Function RallyHereStart.RHGamepadCurvedLookSpeedManager.SetBoostAcceleration
// 0x0004 (0x0004 - 0x0000)
struct RHGamepadCurvedLookSpeedManager_SetBoostAcceleration final
{
public:
	float                                         NewAccel;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadCurvedLookSpeedManager_SetBoostAcceleration) == 0x000004, "Wrong alignment on RHGamepadCurvedLookSpeedManager_SetBoostAcceleration");
static_assert(sizeof(RHGamepadCurvedLookSpeedManager_SetBoostAcceleration) == 0x000004, "Wrong size on RHGamepadCurvedLookSpeedManager_SetBoostAcceleration");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetBoostAcceleration, NewAccel) == 0x000000, "Member 'RHGamepadCurvedLookSpeedManager_SetBoostAcceleration::NewAccel' has a wrong offset!");

// Function RallyHereStart.RHGamepadCurvedLookSpeedManager.SetBoostMultiplier
// 0x0008 (0x0008 - 0x0000)
struct RHGamepadCurvedLookSpeedManager_SetBoostMultiplier final
{
public:
	float                                         NewBoostX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewBoostY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadCurvedLookSpeedManager_SetBoostMultiplier) == 0x000004, "Wrong alignment on RHGamepadCurvedLookSpeedManager_SetBoostMultiplier");
static_assert(sizeof(RHGamepadCurvedLookSpeedManager_SetBoostMultiplier) == 0x000008, "Wrong size on RHGamepadCurvedLookSpeedManager_SetBoostMultiplier");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetBoostMultiplier, NewBoostX) == 0x000000, "Member 'RHGamepadCurvedLookSpeedManager_SetBoostMultiplier::NewBoostX' has a wrong offset!");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetBoostMultiplier, NewBoostY) == 0x000004, "Member 'RHGamepadCurvedLookSpeedManager_SetBoostMultiplier::NewBoostY' has a wrong offset!");

// Function RallyHereStart.RHGamepadCurvedLookSpeedManager.SetOuterDeadZone
// 0x0008 (0x0008 - 0x0000)
struct RHGamepadCurvedLookSpeedManager_SetOuterDeadZone final
{
public:
	float                                         NewZoneX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewZoneY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadCurvedLookSpeedManager_SetOuterDeadZone) == 0x000004, "Wrong alignment on RHGamepadCurvedLookSpeedManager_SetOuterDeadZone");
static_assert(sizeof(RHGamepadCurvedLookSpeedManager_SetOuterDeadZone) == 0x000008, "Wrong size on RHGamepadCurvedLookSpeedManager_SetOuterDeadZone");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetOuterDeadZone, NewZoneX) == 0x000000, "Member 'RHGamepadCurvedLookSpeedManager_SetOuterDeadZone::NewZoneX' has a wrong offset!");
static_assert(offsetof(RHGamepadCurvedLookSpeedManager_SetOuterDeadZone, NewZoneY) == 0x000004, "Member 'RHGamepadCurvedLookSpeedManager_SetOuterDeadZone::NewZoneY' has a wrong offset!");

// Function RallyHereStart.RHGamepadPromptWidget.ApplyContext
// 0x0010 (0x0010 - 0x0000)
struct RHGamepadPromptWidget_ApplyContext final
{
public:
	struct FButtonPromptContext                   Context;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadPromptWidget_ApplyContext) == 0x000008, "Wrong alignment on RHGamepadPromptWidget_ApplyContext");
static_assert(sizeof(RHGamepadPromptWidget_ApplyContext) == 0x000010, "Wrong size on RHGamepadPromptWidget_ApplyContext");
static_assert(offsetof(RHGamepadPromptWidget_ApplyContext, Context) == 0x000000, "Member 'RHGamepadPromptWidget_ApplyContext::Context' has a wrong offset!");

// Function RallyHereStart.RHGamepadPromptWidget.PopContext
// 0x0018 (0x0018 - 0x0000)
struct RHGamepadPromptWidget_PopContext final
{
public:
	struct FButtonPromptContext                   OutContext;                                        // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHGamepadPromptWidget_PopContext) == 0x000008, "Wrong alignment on RHGamepadPromptWidget_PopContext");
static_assert(sizeof(RHGamepadPromptWidget_PopContext) == 0x000018, "Wrong size on RHGamepadPromptWidget_PopContext");
static_assert(offsetof(RHGamepadPromptWidget_PopContext, OutContext) == 0x000000, "Member 'RHGamepadPromptWidget_PopContext::OutContext' has a wrong offset!");
static_assert(offsetof(RHGamepadPromptWidget_PopContext, ReturnValue) == 0x000010, "Member 'RHGamepadPromptWidget_PopContext::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGamepadPromptWidget.PushContext
// 0x0010 (0x0010 - 0x0000)
struct RHGamepadPromptWidget_PushContext final
{
public:
	struct FButtonPromptContext                   PromptContext;                                     // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadPromptWidget_PushContext) == 0x000008, "Wrong alignment on RHGamepadPromptWidget_PushContext");
static_assert(sizeof(RHGamepadPromptWidget_PushContext) == 0x000010, "Wrong size on RHGamepadPromptWidget_PushContext");
static_assert(offsetof(RHGamepadPromptWidget_PushContext, PromptContext) == 0x000000, "Member 'RHGamepadPromptWidget_PushContext::PromptContext' has a wrong offset!");

// Function RallyHereStart.RHGamepadPromptWidget.SetContext
// 0x0010 (0x0010 - 0x0000)
struct RHGamepadPromptWidget_SetContext final
{
public:
	struct FButtonPromptContext                   PromptContext;                                     // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGamepadPromptWidget_SetContext) == 0x000008, "Wrong alignment on RHGamepadPromptWidget_SetContext");
static_assert(sizeof(RHGamepadPromptWidget_SetContext) == 0x000010, "Wrong size on RHGamepadPromptWidget_SetContext");
static_assert(offsetof(RHGamepadPromptWidget_SetContext, PromptContext) == 0x000000, "Member 'RHGamepadPromptWidget_SetContext::PromptContext' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.SaveLocalAction
// 0x0008 (0x0008 - 0x0000)
struct RHGameUserSettings_SaveLocalAction final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameUserSettings_SaveLocalAction) == 0x000004, "Wrong alignment on RHGameUserSettings_SaveLocalAction");
static_assert(sizeof(RHGameUserSettings_SaveLocalAction) == 0x000008, "Wrong size on RHGameUserSettings_SaveLocalAction");
static_assert(offsetof(RHGameUserSettings_SaveLocalAction, Name_0) == 0x000000, "Member 'RHGameUserSettings_SaveLocalAction::Name_0' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.GetColorCorrection
// 0x0001 (0x0001 - 0x0000)
struct RHGameUserSettings_GetColorCorrection final
{
public:
	EColorVisionDeficiency                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameUserSettings_GetColorCorrection) == 0x000001, "Wrong alignment on RHGameUserSettings_GetColorCorrection");
static_assert(sizeof(RHGameUserSettings_GetColorCorrection) == 0x000001, "Wrong size on RHGameUserSettings_GetColorCorrection");
static_assert(offsetof(RHGameUserSettings_GetColorCorrection, ReturnValue) == 0x000000, "Member 'RHGameUserSettings_GetColorCorrection::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.GetSafeFrameScale
// 0x0004 (0x0004 - 0x0000)
struct RHGameUserSettings_GetSafeFrameScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameUserSettings_GetSafeFrameScale) == 0x000004, "Wrong alignment on RHGameUserSettings_GetSafeFrameScale");
static_assert(sizeof(RHGameUserSettings_GetSafeFrameScale) == 0x000004, "Wrong size on RHGameUserSettings_GetSafeFrameScale");
static_assert(offsetof(RHGameUserSettings_GetSafeFrameScale, ReturnValue) == 0x000000, "Member 'RHGameUserSettings_GetSafeFrameScale::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.GetTextChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHGameUserSettings_GetTextChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameUserSettings_GetTextChatEnabled) == 0x000001, "Wrong alignment on RHGameUserSettings_GetTextChatEnabled");
static_assert(sizeof(RHGameUserSettings_GetTextChatEnabled) == 0x000001, "Wrong size on RHGameUserSettings_GetTextChatEnabled");
static_assert(offsetof(RHGameUserSettings_GetTextChatEnabled, ReturnValue) == 0x000000, "Member 'RHGameUserSettings_GetTextChatEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.GetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHGameUserSettings_GetVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong alignment on RHGameUserSettings_GetVoiceChatEnabled");
static_assert(sizeof(RHGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong size on RHGameUserSettings_GetVoiceChatEnabled");
static_assert(offsetof(RHGameUserSettings_GetVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'RHGameUserSettings_GetVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameUserSettings.IsLocalActionSaved
// 0x000C (0x000C - 0x0000)
struct RHGameUserSettings_IsLocalActionSaved final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHGameUserSettings_IsLocalActionSaved) == 0x000004, "Wrong alignment on RHGameUserSettings_IsLocalActionSaved");
static_assert(sizeof(RHGameUserSettings_IsLocalActionSaved) == 0x00000C, "Wrong size on RHGameUserSettings_IsLocalActionSaved");
static_assert(offsetof(RHGameUserSettings_IsLocalActionSaved, Name_0) == 0x000000, "Member 'RHGameUserSettings_IsLocalActionSaved::Name_0' has a wrong offset!");
static_assert(offsetof(RHGameUserSettings_IsLocalActionSaved, ReturnValue) == 0x000008, "Member 'RHGameUserSettings_IsLocalActionSaved::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameWidget.GetPanelsForViewManager
// 0x0010 (0x0010 - 0x0000)
struct RHGameWidget_GetPanelsForViewManager final
{
public:
	TArray<class UCanvasPanel*>                   ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameWidget_GetPanelsForViewManager) == 0x000008, "Wrong alignment on RHGameWidget_GetPanelsForViewManager");
static_assert(sizeof(RHGameWidget_GetPanelsForViewManager) == 0x000010, "Wrong size on RHGameWidget_GetPanelsForViewManager");
static_assert(offsetof(RHGameWidget_GetPanelsForViewManager, ReturnValue) == 0x000000, "Member 'RHGameWidget_GetPanelsForViewManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHGameWidget.GetStickyWidgetDataForViewManager
// 0x0010 (0x0010 - 0x0000)
struct RHGameWidget_GetStickyWidgetDataForViewManager final
{
public:
	TArray<struct FStickyWidgetData>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHGameWidget_GetStickyWidgetDataForViewManager) == 0x000008, "Wrong alignment on RHGameWidget_GetStickyWidgetDataForViewManager");
static_assert(sizeof(RHGameWidget_GetStickyWidgetDataForViewManager) == 0x000010, "Wrong size on RHGameWidget_GetStickyWidgetDataForViewManager");
static_assert(offsetof(RHGameWidget_GetStickyWidgetDataForViewManager, ReturnValue) == 0x000000, "Member 'RHGameWidget_GetStickyWidgetDataForViewManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.BindEventToWidgetMessages
// 0x0010 (0x0010 - 0x0000)
struct RHHUDInterface_BindEventToWidgetMessages final
{
public:
	TDelegate<void(class FName Message)>          Callback;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_BindEventToWidgetMessages) == 0x000004, "Wrong alignment on RHHUDInterface_BindEventToWidgetMessages");
static_assert(sizeof(RHHUDInterface_BindEventToWidgetMessages) == 0x000010, "Wrong size on RHHUDInterface_BindEventToWidgetMessages");
static_assert(offsetof(RHHUDInterface_BindEventToWidgetMessages, Callback) == 0x000000, "Member 'RHHUDInterface_BindEventToWidgetMessages::Callback' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.BroadcastWidgetMessage
// 0x0008 (0x0008 - 0x0000)
struct RHHUDInterface_BroadcastWidgetMessage final
{
public:
	class FName                                   Message;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_BroadcastWidgetMessage) == 0x000004, "Wrong alignment on RHHUDInterface_BroadcastWidgetMessage");
static_assert(sizeof(RHHUDInterface_BroadcastWidgetMessage) == 0x000008, "Wrong size on RHHUDInterface_BroadcastWidgetMessage");
static_assert(offsetof(RHHUDInterface_BroadcastWidgetMessage, Message) == 0x000000, "Member 'RHHUDInterface_BroadcastWidgetMessage::Message' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.CreateGameRuleWidget
// 0x0048 (0x0048 - 0x0000)
struct RHHUDInterface_CreateGameRuleWidget final
{
public:
	struct FRHWidgetInfoParams                    WidgetInfoParams;                                  // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_CreateGameRuleWidget) == 0x000008, "Wrong alignment on RHHUDInterface_CreateGameRuleWidget");
static_assert(sizeof(RHHUDInterface_CreateGameRuleWidget) == 0x000048, "Wrong size on RHHUDInterface_CreateGameRuleWidget");
static_assert(offsetof(RHHUDInterface_CreateGameRuleWidget, WidgetInfoParams) == 0x000000, "Member 'RHHUDInterface_CreateGameRuleWidget::WidgetInfoParams' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.OnLoadRoute
// 0x000C (0x000C - 0x0000)
struct RHHUDInterface_OnLoadRoute final
{
public:
	class FName                                   Route;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHHUDInterface_OnLoadRoute) == 0x000004, "Wrong alignment on RHHUDInterface_OnLoadRoute");
static_assert(sizeof(RHHUDInterface_OnLoadRoute) == 0x00000C, "Wrong size on RHHUDInterface_OnLoadRoute");
static_assert(offsetof(RHHUDInterface_OnLoadRoute, Route) == 0x000000, "Member 'RHHUDInterface_OnLoadRoute::Route' has a wrong offset!");
static_assert(offsetof(RHHUDInterface_OnLoadRoute, ForceTransition) == 0x000008, "Member 'RHHUDInterface_OnLoadRoute::ForceTransition' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.ReceivedGameModeClass
// 0x0008 (0x0008 - 0x0000)
struct RHHUDInterface_ReceivedGameModeClass final
{
public:
	TSubclassOf<class AGameModeBase>              GameModeClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_ReceivedGameModeClass) == 0x000008, "Wrong alignment on RHHUDInterface_ReceivedGameModeClass");
static_assert(sizeof(RHHUDInterface_ReceivedGameModeClass) == 0x000008, "Wrong size on RHHUDInterface_ReceivedGameModeClass");
static_assert(offsetof(RHHUDInterface_ReceivedGameModeClass, GameModeClass) == 0x000000, "Member 'RHHUDInterface_ReceivedGameModeClass::GameModeClass' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.SetHUDVisible
// 0x0001 (0x0001 - 0x0000)
struct RHHUDInterface_SetHUDVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_SetHUDVisible) == 0x000001, "Wrong alignment on RHHUDInterface_SetHUDVisible");
static_assert(sizeof(RHHUDInterface_SetHUDVisible) == 0x000001, "Wrong size on RHHUDInterface_SetHUDVisible");
static_assert(offsetof(RHHUDInterface_SetHUDVisible, bVisible) == 0x000000, "Member 'RHHUDInterface_SetHUDVisible::bVisible' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.SetSafeFrameScale
// 0x0004 (0x0004 - 0x0000)
struct RHHUDInterface_SetSafeFrameScale final
{
public:
	float                                         SafeFrameScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_SetSafeFrameScale) == 0x000004, "Wrong alignment on RHHUDInterface_SetSafeFrameScale");
static_assert(sizeof(RHHUDInterface_SetSafeFrameScale) == 0x000004, "Wrong size on RHHUDInterface_SetSafeFrameScale");
static_assert(offsetof(RHHUDInterface_SetSafeFrameScale, SafeFrameScale) == 0x000000, "Member 'RHHUDInterface_SetSafeFrameScale::SafeFrameScale' has a wrong offset!");

// Function RallyHereStart.RHHUDInterface.GetSettingsCallbackInterface
// 0x0010 (0x0010 - 0x0000)
struct RHHUDInterface_GetSettingsCallbackInterface final
{
public:
	TScriptInterface<class IRHSettingsCallbackInterface> ReturnValue;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHHUDInterface_GetSettingsCallbackInterface) == 0x000008, "Wrong alignment on RHHUDInterface_GetSettingsCallbackInterface");
static_assert(sizeof(RHHUDInterface_GetSettingsCallbackInterface) == 0x000010, "Wrong size on RHHUDInterface_GetSettingsCallbackInterface");
static_assert(offsetof(RHHUDInterface_GetSettingsCallbackInterface, ReturnValue) == 0x000000, "Member 'RHHUDInterface_GetSettingsCallbackInterface::ReturnValue' has a wrong offset!");

// Function RallyHereStart.ContextActionData.TriggerCycleContextAction
// 0x0001 (0x0001 - 0x0000)
struct ContextActionData_TriggerCycleContextAction final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextActionData_TriggerCycleContextAction) == 0x000001, "Wrong alignment on ContextActionData_TriggerCycleContextAction");
static_assert(sizeof(ContextActionData_TriggerCycleContextAction) == 0x000001, "Wrong size on ContextActionData_TriggerCycleContextAction");
static_assert(offsetof(ContextActionData_TriggerCycleContextAction, bNext) == 0x000000, "Member 'ContextActionData_TriggerCycleContextAction::bNext' has a wrong offset!");

// Function RallyHereStart.ContextActionData.TriggerHoldReleaseContextAction
// 0x0001 (0x0001 - 0x0000)
struct ContextActionData_TriggerHoldReleaseContextAction final
{
public:
	EContextActionHoldReleaseState                Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextActionData_TriggerHoldReleaseContextAction) == 0x000001, "Wrong alignment on ContextActionData_TriggerHoldReleaseContextAction");
static_assert(sizeof(ContextActionData_TriggerHoldReleaseContextAction) == 0x000001, "Wrong size on ContextActionData_TriggerHoldReleaseContextAction");
static_assert(offsetof(ContextActionData_TriggerHoldReleaseContextAction, Status) == 0x000000, "Member 'ContextActionData_TriggerHoldReleaseContextAction::Status' has a wrong offset!");

// Function RallyHereStart.RHInputManager.AddContextAction
// 0x0028 (0x0028 - 0x0000)
struct RHInputManager_AddContextAction final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FormatAdditive;                                    // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_AddContextAction) == 0x000008, "Wrong alignment on RHInputManager_AddContextAction");
static_assert(sizeof(RHInputManager_AddContextAction) == 0x000028, "Wrong size on RHInputManager_AddContextAction");
static_assert(offsetof(RHInputManager_AddContextAction, RouteTag) == 0x000000, "Member 'RHInputManager_AddContextAction::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_AddContextAction, ContextName) == 0x000008, "Member 'RHInputManager_AddContextAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHInputManager_AddContextAction, FormatAdditive) == 0x000010, "Member 'RHInputManager_AddContextAction::FormatAdditive' has a wrong offset!");

// Function RallyHereStart.RHInputManager.AddContextActions
// 0x0018 (0x0018 - 0x0000)
struct RHInputManager_AddContextActions final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ContextNames;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_AddContextActions) == 0x000008, "Wrong alignment on RHInputManager_AddContextActions");
static_assert(sizeof(RHInputManager_AddContextActions) == 0x000018, "Wrong size on RHInputManager_AddContextActions");
static_assert(offsetof(RHInputManager_AddContextActions, RouteTag) == 0x000000, "Member 'RHInputManager_AddContextActions::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_AddContextActions, ContextNames) == 0x000008, "Member 'RHInputManager_AddContextActions::ContextNames' has a wrong offset!");

// Function RallyHereStart.RHInputManager.ClearAllContextActions
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_ClearAllContextActions final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_ClearAllContextActions) == 0x000004, "Wrong alignment on RHInputManager_ClearAllContextActions");
static_assert(sizeof(RHInputManager_ClearAllContextActions) == 0x000008, "Wrong size on RHInputManager_ClearAllContextActions");
static_assert(offsetof(RHInputManager_ClearAllContextActions, RouteTag) == 0x000000, "Member 'RHInputManager_ClearAllContextActions::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHInputManager.ClearContextAction
// 0x0010 (0x0010 - 0x0000)
struct RHInputManager_ClearContextAction final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_ClearContextAction) == 0x000004, "Wrong alignment on RHInputManager_ClearContextAction");
static_assert(sizeof(RHInputManager_ClearContextAction) == 0x000010, "Wrong size on RHInputManager_ClearContextAction");
static_assert(offsetof(RHInputManager_ClearContextAction, RouteTag) == 0x000000, "Member 'RHInputManager_ClearContextAction::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_ClearContextAction, ContextName) == 0x000008, "Member 'RHInputManager_ClearContextAction::ContextName' has a wrong offset!");

// Function RallyHereStart.RHInputManager.GetAllButtonsForInputAction
// 0x0020 (0x0020 - 0x0000)
struct RHInputManager_GetAllButtonsForInputAction final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Buttons;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHInputManager_GetAllButtonsForInputAction) == 0x000008, "Wrong alignment on RHInputManager_GetAllButtonsForInputAction");
static_assert(sizeof(RHInputManager_GetAllButtonsForInputAction) == 0x000020, "Wrong size on RHInputManager_GetAllButtonsForInputAction");
static_assert(offsetof(RHInputManager_GetAllButtonsForInputAction, Action) == 0x000000, "Member 'RHInputManager_GetAllButtonsForInputAction::Action' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetAllButtonsForInputAction, Buttons) == 0x000008, "Member 'RHInputManager_GetAllButtonsForInputAction::Buttons' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetAllButtonsForInputAction, ReturnValue) == 0x000018, "Member 'RHInputManager_GetAllButtonsForInputAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.GetButtonForInputAction
// 0x0028 (0x0028 - 0x0000)
struct RHInputManager_GetButtonForInputAction final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Button;                                            // 0x0008(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGamepadKey;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHInputManager_GetButtonForInputAction) == 0x000008, "Wrong alignment on RHInputManager_GetButtonForInputAction");
static_assert(sizeof(RHInputManager_GetButtonForInputAction) == 0x000028, "Wrong size on RHInputManager_GetButtonForInputAction");
static_assert(offsetof(RHInputManager_GetButtonForInputAction, Action) == 0x000000, "Member 'RHInputManager_GetButtonForInputAction::Action' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetButtonForInputAction, Button) == 0x000008, "Member 'RHInputManager_GetButtonForInputAction::Button' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetButtonForInputAction, IsGamepadKey) == 0x000020, "Member 'RHInputManager_GetButtonForInputAction::IsGamepadKey' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetButtonForInputAction, ReturnValue) == 0x000021, "Member 'RHInputManager_GetButtonForInputAction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.GetFocusedWidget
// 0x0018 (0x0018 - 0x0000)
struct RHInputManager_GetFocusedWidget final
{
public:
	class URHWidget*                              ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                FocusWidget;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHInputManager_GetFocusedWidget) == 0x000008, "Wrong alignment on RHInputManager_GetFocusedWidget");
static_assert(sizeof(RHInputManager_GetFocusedWidget) == 0x000018, "Wrong size on RHInputManager_GetFocusedWidget");
static_assert(offsetof(RHInputManager_GetFocusedWidget, ParentWidget) == 0x000000, "Member 'RHInputManager_GetFocusedWidget::ParentWidget' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetFocusedWidget, FocusWidget) == 0x000008, "Member 'RHInputManager_GetFocusedWidget::FocusWidget' has a wrong offset!");
static_assert(offsetof(RHInputManager_GetFocusedWidget, ReturnValue) == 0x000010, "Member 'RHInputManager_GetFocusedWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.HandleModeChange
// 0x0001 (0x0001 - 0x0000)
struct RHInputManager_HandleModeChange final
{
public:
	ERH_INPUT_STATE                               Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_HandleModeChange) == 0x000001, "Wrong alignment on RHInputManager_HandleModeChange");
static_assert(sizeof(RHInputManager_HandleModeChange) == 0x000001, "Wrong size on RHInputManager_HandleModeChange");
static_assert(offsetof(RHInputManager_HandleModeChange, Mode) == 0x000000, "Member 'RHInputManager_HandleModeChange::Mode' has a wrong offset!");

// Function RallyHereStart.RHInputManager.PopOverrideRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_PopOverrideRoute final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_PopOverrideRoute) == 0x000004, "Wrong alignment on RHInputManager_PopOverrideRoute");
static_assert(sizeof(RHInputManager_PopOverrideRoute) == 0x000008, "Wrong size on RHInputManager_PopOverrideRoute");
static_assert(offsetof(RHInputManager_PopOverrideRoute, ReturnValue) == 0x000000, "Member 'RHInputManager_PopOverrideRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.PushOverrideRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_PushOverrideRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_PushOverrideRoute) == 0x000004, "Wrong alignment on RHInputManager_PushOverrideRoute");
static_assert(sizeof(RHInputManager_PushOverrideRoute) == 0x000008, "Wrong size on RHInputManager_PushOverrideRoute");
static_assert(offsetof(RHInputManager_PushOverrideRoute, RouteTag) == 0x000000, "Member 'RHInputManager_PushOverrideRoute::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHInputManager.RemoveOverrideRoute
// 0x000C (0x000C - 0x0000)
struct RHInputManager_RemoveOverrideRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHInputManager_RemoveOverrideRoute) == 0x000004, "Wrong alignment on RHInputManager_RemoveOverrideRoute");
static_assert(sizeof(RHInputManager_RemoveOverrideRoute) == 0x00000C, "Wrong size on RHInputManager_RemoveOverrideRoute");
static_assert(offsetof(RHInputManager_RemoveOverrideRoute, RouteTag) == 0x000000, "Member 'RHInputManager_RemoveOverrideRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_RemoveOverrideRoute, ReturnValue) == 0x000008, "Member 'RHInputManager_RemoveOverrideRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetActiveRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_SetActiveRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetActiveRoute) == 0x000004, "Wrong alignment on RHInputManager_SetActiveRoute");
static_assert(sizeof(RHInputManager_SetActiveRoute) == 0x000008, "Wrong size on RHInputManager_SetActiveRoute");
static_assert(offsetof(RHInputManager_SetActiveRoute, RouteTag) == 0x000000, "Member 'RHInputManager_SetActiveRoute::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetContextAction
// 0x0020 (0x0020 - 0x0000)
struct RHInputManager_SetContextAction final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             EventCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetContextAction) == 0x000004, "Wrong alignment on RHInputManager_SetContextAction");
static_assert(sizeof(RHInputManager_SetContextAction) == 0x000020, "Wrong size on RHInputManager_SetContextAction");
static_assert(offsetof(RHInputManager_SetContextAction, RouteTag) == 0x000000, "Member 'RHInputManager_SetContextAction::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextAction, ContextName) == 0x000008, "Member 'RHInputManager_SetContextAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextAction, EventCallback) == 0x000010, "Member 'RHInputManager_SetContextAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetContextCycleAction
// 0x0020 (0x0020 - 0x0000)
struct RHInputManager_SetContextCycleAction final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bNext)>                   EventCallback;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetContextCycleAction) == 0x000004, "Wrong alignment on RHInputManager_SetContextCycleAction");
static_assert(sizeof(RHInputManager_SetContextCycleAction) == 0x000020, "Wrong size on RHInputManager_SetContextCycleAction");
static_assert(offsetof(RHInputManager_SetContextCycleAction, RouteTag) == 0x000000, "Member 'RHInputManager_SetContextCycleAction::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextCycleAction, ContextName) == 0x000008, "Member 'RHInputManager_SetContextCycleAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextCycleAction, EventCallback) == 0x000010, "Member 'RHInputManager_SetContextCycleAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetContextHoldReleaseAction
// 0x0030 (0x0030 - 0x0000)
struct RHInputManager_SetContextHoldReleaseAction final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContextName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float fPercentage)>            UpdateCallback;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EContextActionHoldReleaseState Status)> EventCallback;                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetContextHoldReleaseAction) == 0x000004, "Wrong alignment on RHInputManager_SetContextHoldReleaseAction");
static_assert(sizeof(RHInputManager_SetContextHoldReleaseAction) == 0x000030, "Wrong size on RHInputManager_SetContextHoldReleaseAction");
static_assert(offsetof(RHInputManager_SetContextHoldReleaseAction, RouteTag) == 0x000000, "Member 'RHInputManager_SetContextHoldReleaseAction::RouteTag' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextHoldReleaseAction, ContextName) == 0x000008, "Member 'RHInputManager_SetContextHoldReleaseAction::ContextName' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextHoldReleaseAction, UpdateCallback) == 0x000010, "Member 'RHInputManager_SetContextHoldReleaseAction::UpdateCallback' has a wrong offset!");
static_assert(offsetof(RHInputManager_SetContextHoldReleaseAction, EventCallback) == 0x000020, "Member 'RHInputManager_SetContextHoldReleaseAction::EventCallback' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetInputActions
// 0x0010 (0x0010 - 0x0000)
struct RHInputManager_SetInputActions final
{
public:
	TArray<class UContextActionData*>             ActionData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetInputActions) == 0x000008, "Wrong alignment on RHInputManager_SetInputActions");
static_assert(sizeof(RHInputManager_SetInputActions) == 0x000010, "Wrong size on RHInputManager_SetInputActions");
static_assert(offsetof(RHInputManager_SetInputActions, ActionData) == 0x000000, "Member 'RHInputManager_SetInputActions::ActionData' has a wrong offset!");

// Function RallyHereStart.RHInputManager.SetPendingRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_SetPendingRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_SetPendingRoute) == 0x000004, "Wrong alignment on RHInputManager_SetPendingRoute");
static_assert(sizeof(RHInputManager_SetPendingRoute) == 0x000008, "Wrong size on RHInputManager_SetPendingRoute");
static_assert(offsetof(RHInputManager_SetPendingRoute, RouteTag) == 0x000000, "Member 'RHInputManager_SetPendingRoute::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHInputManager.GetCurrentContextRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_GetCurrentContextRoute final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_GetCurrentContextRoute) == 0x000004, "Wrong alignment on RHInputManager_GetCurrentContextRoute");
static_assert(sizeof(RHInputManager_GetCurrentContextRoute) == 0x000008, "Wrong size on RHInputManager_GetCurrentContextRoute");
static_assert(offsetof(RHInputManager_GetCurrentContextRoute, ReturnValue) == 0x000000, "Member 'RHInputManager_GetCurrentContextRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHInputManager.GetCurrentRoute
// 0x0008 (0x0008 - 0x0000)
struct RHInputManager_GetCurrentRoute final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHInputManager_GetCurrentRoute) == 0x000004, "Wrong alignment on RHInputManager_GetCurrentRoute");
static_assert(sizeof(RHInputManager_GetCurrentRoute) == 0x000008, "Wrong size on RHInputManager_GetCurrentRoute");
static_assert(offsetof(RHInputManager_GetCurrentRoute, ReturnValue) == 0x000000, "Member 'RHInputManager_GetCurrentRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetCount
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_SetCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetCount) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_SetCount");
static_assert(sizeof(RH_PlayerLoadoutItem_SetCount) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_SetCount");
static_assert(offsetof(RH_PlayerLoadoutItem_SetCount, InCount) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetCount::InCount' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetCreationDate
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadoutItem_SetCreationDate final
{
public:
	struct FDateTime                              InCreationDate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetCreationDate) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_SetCreationDate");
static_assert(sizeof(RH_PlayerLoadoutItem_SetCreationDate) == 0x000008, "Wrong size on RH_PlayerLoadoutItem_SetCreationDate");
static_assert(offsetof(RH_PlayerLoadoutItem_SetCreationDate, InCreationDate) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetCreationDate::InCreationDate' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetItemId
// 0x0014 (0x0014 - 0x0000)
struct RH_PlayerLoadoutItem_SetItemId final
{
public:
	struct FRH_ItemId                             InItemId;                                          // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetItemId) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_SetItemId");
static_assert(sizeof(RH_PlayerLoadoutItem_SetItemId) == 0x000014, "Wrong size on RH_PlayerLoadoutItem_SetItemId");
static_assert(offsetof(RH_PlayerLoadoutItem_SetItemId, InItemId) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetItemId::InItemId' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetItemValueId
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_SetItemValueId final
{
public:
	int32                                         InItemValueId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetItemValueId) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_SetItemValueId");
static_assert(sizeof(RH_PlayerLoadoutItem_SetItemValueId) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_SetItemValueId");
static_assert(offsetof(RH_PlayerLoadoutItem_SetItemValueId, InItemValueId) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetItemValueId::InItemValueId' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetLastModifiedTime
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadoutItem_SetLastModifiedTime final
{
public:
	struct FDateTime                              InLastModifiedTime;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetLastModifiedTime) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_SetLastModifiedTime");
static_assert(sizeof(RH_PlayerLoadoutItem_SetLastModifiedTime) == 0x000008, "Wrong size on RH_PlayerLoadoutItem_SetLastModifiedTime");
static_assert(offsetof(RH_PlayerLoadoutItem_SetLastModifiedTime, InLastModifiedTime) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetLastModifiedTime::InLastModifiedTime' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetLoadoutItemId
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadoutItem_SetLoadoutItemId final
{
public:
	class FString                                 InLoadoutItemId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetLoadoutItemId) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_SetLoadoutItemId");
static_assert(sizeof(RH_PlayerLoadoutItem_SetLoadoutItemId) == 0x000010, "Wrong size on RH_PlayerLoadoutItem_SetLoadoutItemId");
static_assert(offsetof(RH_PlayerLoadoutItem_SetLoadoutItemId, InLoadoutItemId) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetLoadoutItemId::InLoadoutItemId' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.SetSortOrder
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_SetSortOrder final
{
public:
	int32                                         InSortOrder;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_SetSortOrder) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_SetSortOrder");
static_assert(sizeof(RH_PlayerLoadoutItem_SetSortOrder) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_SetSortOrder");
static_assert(offsetof(RH_PlayerLoadoutItem_SetSortOrder, InSortOrder) == 0x000000, "Member 'RH_PlayerLoadoutItem_SetSortOrder::InSortOrder' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetCount
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetCount) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_GetCount");
static_assert(sizeof(RH_PlayerLoadoutItem_GetCount) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_GetCount");
static_assert(offsetof(RH_PlayerLoadoutItem_GetCount, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetCreationDate
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadoutItem_GetCreationDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetCreationDate) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_GetCreationDate");
static_assert(sizeof(RH_PlayerLoadoutItem_GetCreationDate) == 0x000008, "Wrong size on RH_PlayerLoadoutItem_GetCreationDate");
static_assert(offsetof(RH_PlayerLoadoutItem_GetCreationDate, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetCreationDate::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetItemId
// 0x0014 (0x0014 - 0x0000)
struct RH_PlayerLoadoutItem_GetItemId final
{
public:
	struct FRH_ItemId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetItemId) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_GetItemId");
static_assert(sizeof(RH_PlayerLoadoutItem_GetItemId) == 0x000014, "Wrong size on RH_PlayerLoadoutItem_GetItemId");
static_assert(offsetof(RH_PlayerLoadoutItem_GetItemId, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetItemValueId
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_GetItemValueId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetItemValueId) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_GetItemValueId");
static_assert(sizeof(RH_PlayerLoadoutItem_GetItemValueId) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_GetItemValueId");
static_assert(offsetof(RH_PlayerLoadoutItem_GetItemValueId, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetItemValueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetLastModifiedTime
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadoutItem_GetLastModifiedTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetLastModifiedTime) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_GetLastModifiedTime");
static_assert(sizeof(RH_PlayerLoadoutItem_GetLastModifiedTime) == 0x000008, "Wrong size on RH_PlayerLoadoutItem_GetLastModifiedTime");
static_assert(offsetof(RH_PlayerLoadoutItem_GetLastModifiedTime, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetLastModifiedTime::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetLoadoutItemId
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadoutItem_GetLoadoutItemId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetLoadoutItemId) == 0x000008, "Wrong alignment on RH_PlayerLoadoutItem_GetLoadoutItemId");
static_assert(sizeof(RH_PlayerLoadoutItem_GetLoadoutItemId) == 0x000010, "Wrong size on RH_PlayerLoadoutItem_GetLoadoutItemId");
static_assert(offsetof(RH_PlayerLoadoutItem_GetLoadoutItemId, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetLoadoutItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadoutItem.GetSortOrder
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadoutItem_GetSortOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadoutItem_GetSortOrder) == 0x000004, "Wrong alignment on RH_PlayerLoadoutItem_GetSortOrder");
static_assert(sizeof(RH_PlayerLoadoutItem_GetSortOrder) == 0x000004, "Wrong size on RH_PlayerLoadoutItem_GetSortOrder");
static_assert(offsetof(RH_PlayerLoadoutItem_GetSortOrder, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadoutItem_GetSortOrder::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetEquippedItemInSlot
// 0x0014 (0x0014 - 0x0000)
struct RH_PlayerLoadout_GetEquippedItemInSlot final
{
public:
	TDelegate<void(const struct FRHEquippedLoadoutItemWrapper& ItemWrapper)> Event;                  // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHLoadoutSlotTypes                           LoadoutSlot;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RH_PlayerLoadout_GetEquippedItemInSlot) == 0x000004, "Wrong alignment on RH_PlayerLoadout_GetEquippedItemInSlot");
static_assert(sizeof(RH_PlayerLoadout_GetEquippedItemInSlot) == 0x000014, "Wrong size on RH_PlayerLoadout_GetEquippedItemInSlot");
static_assert(offsetof(RH_PlayerLoadout_GetEquippedItemInSlot, Event) == 0x000000, "Member 'RH_PlayerLoadout_GetEquippedItemInSlot::Event' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_GetEquippedItemInSlot, LoadoutSlot) == 0x000010, "Member 'RH_PlayerLoadout_GetEquippedItemInSlot::LoadoutSlot' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_GetEquippedItemInSlot, ReturnValue) == 0x000011, "Member 'RH_PlayerLoadout_GetEquippedItemInSlot::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.IsItemEquippedInSlot
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadout_IsItemEquippedInSlot final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHLoadoutSlotTypes                           LoadoutSlot;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RH_PlayerLoadout_IsItemEquippedInSlot) == 0x000008, "Wrong alignment on RH_PlayerLoadout_IsItemEquippedInSlot");
static_assert(sizeof(RH_PlayerLoadout_IsItemEquippedInSlot) == 0x000010, "Wrong size on RH_PlayerLoadout_IsItemEquippedInSlot");
static_assert(offsetof(RH_PlayerLoadout_IsItemEquippedInSlot, Item) == 0x000000, "Member 'RH_PlayerLoadout_IsItemEquippedInSlot::Item' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_IsItemEquippedInSlot, LoadoutSlot) == 0x000008, "Member 'RH_PlayerLoadout_IsItemEquippedInSlot::LoadoutSlot' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_IsItemEquippedInSlot, ReturnValue) == 0x000009, "Member 'RH_PlayerLoadout_IsItemEquippedInSlot::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.LocalEquipItemToSlot
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadout_LocalEquipItemToSlot final
{
public:
	class UPlatformInventoryItem*                 Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHLoadoutSlotTypes                           LoadoutSlot;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RH_PlayerLoadout_LocalEquipItemToSlot) == 0x000008, "Wrong alignment on RH_PlayerLoadout_LocalEquipItemToSlot");
static_assert(sizeof(RH_PlayerLoadout_LocalEquipItemToSlot) == 0x000010, "Wrong size on RH_PlayerLoadout_LocalEquipItemToSlot");
static_assert(offsetof(RH_PlayerLoadout_LocalEquipItemToSlot, Item) == 0x000000, "Member 'RH_PlayerLoadout_LocalEquipItemToSlot::Item' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_LocalEquipItemToSlot, LoadoutSlot) == 0x000008, "Member 'RH_PlayerLoadout_LocalEquipItemToSlot::LoadoutSlot' has a wrong offset!");
static_assert(offsetof(RH_PlayerLoadout_LocalEquipItemToSlot, ReturnValue) == 0x000009, "Member 'RH_PlayerLoadout_LocalEquipItemToSlot::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetCreationDate
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadout_GetCreationDate final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetCreationDate) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetCreationDate");
static_assert(sizeof(RH_PlayerLoadout_GetCreationDate) == 0x000008, "Wrong size on RH_PlayerLoadout_GetCreationDate");
static_assert(offsetof(RH_PlayerLoadout_GetCreationDate, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetCreationDate::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetDefaultItems
// 0x0050 (0x0050 - 0x0000)
struct RH_PlayerLoadout_GetDefaultItems final
{
public:
	TMap<ERHLoadoutSlotTypes, class UPlatformInventoryItem*> ReturnValue;                            // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetDefaultItems) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetDefaultItems");
static_assert(sizeof(RH_PlayerLoadout_GetDefaultItems) == 0x000050, "Wrong size on RH_PlayerLoadout_GetDefaultItems");
static_assert(offsetof(RH_PlayerLoadout_GetDefaultItems, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetDefaultItems::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetItems
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadout_GetItems final
{
public:
	TArray<class URH_PlayerLoadoutItem*>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetItems) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetItems");
static_assert(sizeof(RH_PlayerLoadout_GetItems) == 0x000010, "Wrong size on RH_PlayerLoadout_GetItems");
static_assert(offsetof(RH_PlayerLoadout_GetItems, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetItems::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetLastModifiedTime
// 0x0008 (0x0008 - 0x0000)
struct RH_PlayerLoadout_GetLastModifiedTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetLastModifiedTime) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetLastModifiedTime");
static_assert(sizeof(RH_PlayerLoadout_GetLastModifiedTime) == 0x000008, "Wrong size on RH_PlayerLoadout_GetLastModifiedTime");
static_assert(offsetof(RH_PlayerLoadout_GetLastModifiedTime, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetLastModifiedTime::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetLoadoutId
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadout_GetLoadoutId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetLoadoutId) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetLoadoutId");
static_assert(sizeof(RH_PlayerLoadout_GetLoadoutId) == 0x000010, "Wrong size on RH_PlayerLoadout_GetLoadoutId");
static_assert(offsetof(RH_PlayerLoadout_GetLoadoutId, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetLoadoutId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetName
// 0x0010 (0x0010 - 0x0000)
struct RH_PlayerLoadout_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetName) == 0x000008, "Wrong alignment on RH_PlayerLoadout_GetName");
static_assert(sizeof(RH_PlayerLoadout_GetName) == 0x000010, "Wrong size on RH_PlayerLoadout_GetName");
static_assert(offsetof(RH_PlayerLoadout_GetName, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetSortOrder
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadout_GetSortOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetSortOrder) == 0x000004, "Wrong alignment on RH_PlayerLoadout_GetSortOrder");
static_assert(sizeof(RH_PlayerLoadout_GetSortOrder) == 0x000004, "Wrong size on RH_PlayerLoadout_GetSortOrder");
static_assert(offsetof(RH_PlayerLoadout_GetSortOrder, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetSortOrder::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetType
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadout_GetType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetType) == 0x000004, "Wrong alignment on RH_PlayerLoadout_GetType");
static_assert(sizeof(RH_PlayerLoadout_GetType) == 0x000004, "Wrong size on RH_PlayerLoadout_GetType");
static_assert(offsetof(RH_PlayerLoadout_GetType, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RH_PlayerLoadout.GetV
// 0x0004 (0x0004 - 0x0000)
struct RH_PlayerLoadout_GetV final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RH_PlayerLoadout_GetV) == 0x000004, "Wrong alignment on RH_PlayerLoadout_GetV");
static_assert(sizeof(RH_PlayerLoadout_GetV) == 0x000004, "Wrong size on RH_PlayerLoadout_GetV");
static_assert(offsetof(RH_PlayerLoadout_GetV, ReturnValue) == 0x000000, "Member 'RH_PlayerLoadout_GetV::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoadoutSubsystem.BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType
// 0x0030 (0x0030 - 0x0000)
struct RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHLoadoutTypes                               LoadoutType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateIfNeeded;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              StaleThreshold;                                    // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRefresh;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class URH_PlayerInfo* PlayerInfo, class URH_PlayerLoadout* Loadout)> Delegate;    // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType) == 0x000008, "Wrong alignment on RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType");
static_assert(sizeof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType) == 0x000030, "Wrong size on RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, PlayerInfo) == 0x000000, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, LoadoutType) == 0x000008, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::LoadoutType' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, bCreateIfNeeded) == 0x000009, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::bCreateIfNeeded' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, StaleThreshold) == 0x000010, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::StaleThreshold' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, bForceRefresh) == 0x000018, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::bForceRefresh' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType, Delegate) == 0x00001C, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettingByLoadoutType::Delegate' has a wrong offset!");

// Function RallyHereStart.RHLoadoutSubsystem.BLUEPRINT_RequestPlayerLoadoutSettings
// 0x0028 (0x0028 - 0x0000)
struct RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              StaleThreshold;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRefresh;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class URH_PlayerInfo* PlayerInfo, const TArray<class URH_PlayerLoadout*>& Loadouts)> Delegate; // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings) == 0x000008, "Wrong alignment on RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings");
static_assert(sizeof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings) == 0x000028, "Wrong size on RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings, PlayerInfo) == 0x000000, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings, StaleThreshold) == 0x000008, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings::StaleThreshold' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings, bForceRefresh) == 0x000010, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings::bForceRefresh' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings, Delegate) == 0x000014, "Member 'RHLoadoutSubsystem_BLUEPRINT_RequestPlayerLoadoutSettings::Delegate' has a wrong offset!");

// Function RallyHereStart.RHLoadoutSubsystem.BLUEPRINT_SetPlayerLoadoutSettings
// 0x0028 (0x0028 - 0x0000)
struct RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URH_PlayerLoadout*>              Loadouts;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class URH_PlayerInfo* PlayerInfo, bool bSuccess)> Delegate;                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings) == 0x000008, "Wrong alignment on RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings");
static_assert(sizeof(RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings) == 0x000028, "Wrong size on RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings, PlayerInfo) == 0x000000, "Member 'RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings, Loadouts) == 0x000008, "Member 'RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings::Loadouts' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings, Delegate) == 0x000018, "Member 'RHLoadoutSubsystem_BLUEPRINT_SetPlayerLoadoutSettings::Delegate' has a wrong offset!");

// Function RallyHereStart.RHLoadoutSubsystem.GetDefaultItemForLoadoutSlotType
// 0x0010 (0x0010 - 0x0000)
struct RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType final
{
public:
	ERHLoadoutSlotTypes                           SlotType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformInventoryItem*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType) == 0x000008, "Wrong alignment on RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType");
static_assert(sizeof(RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType) == 0x000010, "Wrong size on RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType");
static_assert(offsetof(RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType, SlotType) == 0x000000, "Member 'RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType::SlotType' has a wrong offset!");
static_assert(offsetof(RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType, ReturnValue) == 0x000008, "Member 'RHLoadoutSubsystem_GetDefaultItemForLoadoutSlotType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLobbyHUD.GetDefaultPlayerAccountItem
// 0x0010 (0x0010 - 0x0000)
struct RHLobbyHUD_GetDefaultPlayerAccountItem final
{
public:
	ERHLoadoutSlotTypes                           ItemSlot;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlatformInventoryItem*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLobbyHUD_GetDefaultPlayerAccountItem) == 0x000008, "Wrong alignment on RHLobbyHUD_GetDefaultPlayerAccountItem");
static_assert(sizeof(RHLobbyHUD_GetDefaultPlayerAccountItem) == 0x000010, "Wrong size on RHLobbyHUD_GetDefaultPlayerAccountItem");
static_assert(offsetof(RHLobbyHUD_GetDefaultPlayerAccountItem, ItemSlot) == 0x000000, "Member 'RHLobbyHUD_GetDefaultPlayerAccountItem::ItemSlot' has a wrong offset!");
static_assert(offsetof(RHLobbyHUD_GetDefaultPlayerAccountItem, ReturnValue) == 0x000008, "Member 'RHLobbyHUD_GetDefaultPlayerAccountItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLobbyHUD.GetLobbyWidget
// 0x0008 (0x0008 - 0x0000)
struct RHLobbyHUD_GetLobbyWidget final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLobbyHUD_GetLobbyWidget) == 0x000008, "Wrong alignment on RHLobbyHUD_GetLobbyWidget");
static_assert(sizeof(RHLobbyHUD_GetLobbyWidget) == 0x000008, "Wrong size on RHLobbyHUD_GetLobbyWidget");
static_assert(offsetof(RHLobbyHUD_GetLobbyWidget, ReturnValue) == 0x000000, "Member 'RHLobbyHUD_GetLobbyWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLobbyHUD.OnNotEnoughCurrency
// 0x0008 (0x0008 - 0x0000)
struct RHLobbyHUD_OnNotEnoughCurrency final
{
public:
	class URHStorePurchaseRequest*                PurchaseRequest;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLobbyHUD_OnNotEnoughCurrency) == 0x000008, "Wrong alignment on RHLobbyHUD_OnNotEnoughCurrency");
static_assert(sizeof(RHLobbyHUD_OnNotEnoughCurrency) == 0x000008, "Wrong size on RHLobbyHUD_OnNotEnoughCurrency");
static_assert(offsetof(RHLobbyHUD_OnNotEnoughCurrency, PurchaseRequest) == 0x000000, "Member 'RHLobbyHUD_OnNotEnoughCurrency::PurchaseRequest' has a wrong offset!");

// Function RallyHereStart.RHLobbyHUD.ShowPopupConfirmation
// 0x0020 (0x0020 - 0x0000)
struct RHLobbyHUD_ShowPopupConfirmation final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	ESocialMessageType                            MessageType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLobbyHUD_ShowPopupConfirmation) == 0x000008, "Wrong alignment on RHLobbyHUD_ShowPopupConfirmation");
static_assert(sizeof(RHLobbyHUD_ShowPopupConfirmation) == 0x000020, "Wrong size on RHLobbyHUD_ShowPopupConfirmation");
static_assert(offsetof(RHLobbyHUD_ShowPopupConfirmation, Message) == 0x000000, "Member 'RHLobbyHUD_ShowPopupConfirmation::Message' has a wrong offset!");
static_assert(offsetof(RHLobbyHUD_ShowPopupConfirmation, MessageType) == 0x000018, "Member 'RHLobbyHUD_ShowPopupConfirmation::MessageType' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoadEULAFile
// 0x0018 (0x0018 - 0x0000)
struct RHLoginDataFactory_LoadEULAFile final
{
public:
	class FString                                 SaveText;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoginDataFactory_LoadEULAFile) == 0x000008, "Wrong alignment on RHLoginDataFactory_LoadEULAFile");
static_assert(sizeof(RHLoginDataFactory_LoadEULAFile) == 0x000018, "Wrong size on RHLoginDataFactory_LoadEULAFile");
static_assert(offsetof(RHLoginDataFactory_LoadEULAFile, SaveText) == 0x000000, "Member 'RHLoginDataFactory_LoadEULAFile::SaveText' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_LoadEULAFile, ReturnValue) == 0x000010, "Member 'RHLoginDataFactory_LoadEULAFile::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetCurrentLoginState
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_GetCurrentLoginState final
{
public:
	ERHLoginState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_GetCurrentLoginState) == 0x000001, "Wrong alignment on RHLoginDataFactory_GetCurrentLoginState");
static_assert(sizeof(RHLoginDataFactory_GetCurrentLoginState) == 0x000001, "Wrong size on RHLoginDataFactory_GetCurrentLoginState");
static_assert(offsetof(RHLoginDataFactory_GetCurrentLoginState, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_GetCurrentLoginState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetCurrentPlayerName
// 0x0020 (0x0020 - 0x0000)
struct RHLoginDataFactory_GetCurrentPlayerName final
{
public:
	class FText                                   NameText;                                          // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoginDataFactory_GetCurrentPlayerName) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetCurrentPlayerName");
static_assert(sizeof(RHLoginDataFactory_GetCurrentPlayerName) == 0x000020, "Wrong size on RHLoginDataFactory_GetCurrentPlayerName");
static_assert(offsetof(RHLoginDataFactory_GetCurrentPlayerName, NameText) == 0x000000, "Member 'RHLoginDataFactory_GetCurrentPlayerName::NameText' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_GetCurrentPlayerName, ReturnValue) == 0x000018, "Member 'RHLoginDataFactory_GetCurrentPlayerName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetLastDisconnectReason
// 0x0020 (0x0020 - 0x0000)
struct RHLoginDataFactory_GetLastDisconnectReason final
{
public:
	class FText                                   ErrorMsg;                                          // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoginDataFactory_GetLastDisconnectReason) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetLastDisconnectReason");
static_assert(sizeof(RHLoginDataFactory_GetLastDisconnectReason) == 0x000020, "Wrong size on RHLoginDataFactory_GetLastDisconnectReason");
static_assert(offsetof(RHLoginDataFactory_GetLastDisconnectReason, ErrorMsg) == 0x000000, "Member 'RHLoginDataFactory_GetLastDisconnectReason::ErrorMsg' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_GetLastDisconnectReason, ReturnValue) == 0x000018, "Member 'RHLoginDataFactory_GetLastDisconnectReason::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.HandleControllerConnectionChange
// 0x000C (0x000C - 0x0000)
struct RHLoginDataFactory_HandleControllerConnectionChange final
{
public:
	EInputDeviceConnectionState                   NewConnectionState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlatformUserId                        PlatformUserId;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_HandleControllerConnectionChange) == 0x000004, "Wrong alignment on RHLoginDataFactory_HandleControllerConnectionChange");
static_assert(sizeof(RHLoginDataFactory_HandleControllerConnectionChange) == 0x00000C, "Wrong size on RHLoginDataFactory_HandleControllerConnectionChange");
static_assert(offsetof(RHLoginDataFactory_HandleControllerConnectionChange, NewConnectionState) == 0x000000, "Member 'RHLoginDataFactory_HandleControllerConnectionChange::NewConnectionState' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_HandleControllerConnectionChange, PlatformUserId) == 0x000004, "Member 'RHLoginDataFactory_HandleControllerConnectionChange::PlatformUserId' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_HandleControllerConnectionChange, InputDeviceId) == 0x000008, "Member 'RHLoginDataFactory_HandleControllerConnectionChange::InputDeviceId' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.HandleControllerPairingChange
// 0x000C (0x000C - 0x0000)
struct RHLoginDataFactory_HandleControllerPairingChange final
{
public:
	struct FInputDeviceId                         InputDeviceId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlatformUserId                        NewUserPlatformId;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlatformUserId                        OldUserPlatformId;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_HandleControllerPairingChange) == 0x000004, "Wrong alignment on RHLoginDataFactory_HandleControllerPairingChange");
static_assert(sizeof(RHLoginDataFactory_HandleControllerPairingChange) == 0x00000C, "Wrong size on RHLoginDataFactory_HandleControllerPairingChange");
static_assert(offsetof(RHLoginDataFactory_HandleControllerPairingChange, InputDeviceId) == 0x000000, "Member 'RHLoginDataFactory_HandleControllerPairingChange::InputDeviceId' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_HandleControllerPairingChange, NewUserPlatformId) == 0x000004, "Member 'RHLoginDataFactory_HandleControllerPairingChange::NewUserPlatformId' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_HandleControllerPairingChange, OldUserPlatformId) == 0x000008, "Member 'RHLoginDataFactory_HandleControllerPairingChange::OldUserPlatformId' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.HandlePlayerLoggedOut
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_HandlePlayerLoggedOut final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_HandlePlayerLoggedOut) == 0x000001, "Wrong alignment on RHLoginDataFactory_HandlePlayerLoggedOut");
static_assert(sizeof(RHLoginDataFactory_HandlePlayerLoggedOut) == 0x000001, "Wrong size on RHLoginDataFactory_HandlePlayerLoggedOut");
static_assert(offsetof(RHLoginDataFactory_HandlePlayerLoggedOut, bSuccess) == 0x000000, "Member 'RHLoginDataFactory_HandlePlayerLoggedOut::bSuccess' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoginEvent_EACFailed
// 0x0018 (0x0018 - 0x0000)
struct RHLoginDataFactory_LoginEvent_EACFailed final
{
public:
	class FText                                   ErrorMsg;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_LoginEvent_EACFailed) == 0x000008, "Wrong alignment on RHLoginDataFactory_LoginEvent_EACFailed");
static_assert(sizeof(RHLoginDataFactory_LoginEvent_EACFailed) == 0x000018, "Wrong size on RHLoginDataFactory_LoginEvent_EACFailed");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_EACFailed, ErrorMsg) == 0x000000, "Member 'RHLoginDataFactory_LoginEvent_EACFailed::ErrorMsg' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoginEvent_FailedClient
// 0x0018 (0x0018 - 0x0000)
struct RHLoginDataFactory_LoginEvent_FailedClient final
{
public:
	class FText                                   ErrorMsg;                                          // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_LoginEvent_FailedClient) == 0x000008, "Wrong alignment on RHLoginDataFactory_LoginEvent_FailedClient");
static_assert(sizeof(RHLoginDataFactory_LoginEvent_FailedClient) == 0x000018, "Wrong size on RHLoginDataFactory_LoginEvent_FailedClient");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_FailedClient, ErrorMsg) == 0x000000, "Member 'RHLoginDataFactory_LoginEvent_FailedClient::ErrorMsg' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoginEvent_FailedWithRestrictions
// 0x0010 (0x0010 - 0x0000)
struct RHLoginDataFactory_LoginEvent_FailedWithRestrictions final
{
public:
	TArray<struct FRHAPI_Restriction>             Restrictions;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_LoginEvent_FailedWithRestrictions) == 0x000008, "Wrong alignment on RHLoginDataFactory_LoginEvent_FailedWithRestrictions");
static_assert(sizeof(RHLoginDataFactory_LoginEvent_FailedWithRestrictions) == 0x000010, "Wrong size on RHLoginDataFactory_LoginEvent_FailedWithRestrictions");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_FailedWithRestrictions, Restrictions) == 0x000000, "Member 'RHLoginDataFactory_LoginEvent_FailedWithRestrictions::Restrictions' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoginEvent_Queued
// 0x000C (0x000C - 0x0000)
struct RHLoginDataFactory_LoginEvent_Queued final
{
public:
	uint32                                        QueuePosition;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        QueueSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        queueEstimatedWait;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_LoginEvent_Queued) == 0x000004, "Wrong alignment on RHLoginDataFactory_LoginEvent_Queued");
static_assert(sizeof(RHLoginDataFactory_LoginEvent_Queued) == 0x00000C, "Wrong size on RHLoginDataFactory_LoginEvent_Queued");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_Queued, QueuePosition) == 0x000000, "Member 'RHLoginDataFactory_LoginEvent_Queued::QueuePosition' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_Queued, QueueSize) == 0x000004, "Member 'RHLoginDataFactory_LoginEvent_Queued::QueueSize' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_Queued, queueEstimatedWait) == 0x000008, "Member 'RHLoginDataFactory_LoginEvent_Queued::queueEstimatedWait' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.LoginEvent_ShowAgreements
// 0x0003 (0x0003 - 0x0000)
struct RHLoginDataFactory_LoginEvent_ShowAgreements final
{
public:
	bool                                          bNeedsEULA;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsTOS;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedsPP;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_LoginEvent_ShowAgreements) == 0x000001, "Wrong alignment on RHLoginDataFactory_LoginEvent_ShowAgreements");
static_assert(sizeof(RHLoginDataFactory_LoginEvent_ShowAgreements) == 0x000003, "Wrong size on RHLoginDataFactory_LoginEvent_ShowAgreements");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_ShowAgreements, bNeedsEULA) == 0x000000, "Member 'RHLoginDataFactory_LoginEvent_ShowAgreements::bNeedsEULA' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_ShowAgreements, bNeedsTOS) == 0x000001, "Member 'RHLoginDataFactory_LoginEvent_ShowAgreements::bNeedsTOS' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_LoginEvent_ShowAgreements, bNeedsPP) == 0x000002, "Member 'RHLoginDataFactory_LoginEvent_ShowAgreements::bNeedsPP' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.RecordLoginState
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_RecordLoginState final
{
public:
	ERHLoginState                                 NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_RecordLoginState) == 0x000001, "Wrong alignment on RHLoginDataFactory_RecordLoginState");
static_assert(sizeof(RHLoginDataFactory_RecordLoginState) == 0x000001, "Wrong size on RHLoginDataFactory_RecordLoginState");
static_assert(offsetof(RHLoginDataFactory_RecordLoginState, NewState) == 0x000000, "Member 'RHLoginDataFactory_RecordLoginState::NewState' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.UIX_OnLinkExistingAccount
// 0x0020 (0x0020 - 0x0000)
struct RHLoginDataFactory_UIX_OnLinkExistingAccount final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_UIX_OnLinkExistingAccount) == 0x000008, "Wrong alignment on RHLoginDataFactory_UIX_OnLinkExistingAccount");
static_assert(sizeof(RHLoginDataFactory_UIX_OnLinkExistingAccount) == 0x000020, "Wrong size on RHLoginDataFactory_UIX_OnLinkExistingAccount");
static_assert(offsetof(RHLoginDataFactory_UIX_OnLinkExistingAccount, UserName) == 0x000000, "Member 'RHLoginDataFactory_UIX_OnLinkExistingAccount::UserName' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_UIX_OnLinkExistingAccount, Password) == 0x000010, "Member 'RHLoginDataFactory_UIX_OnLinkExistingAccount::Password' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.UIX_OnSignInWithApple
// 0x0004 (0x0004 - 0x0000)
struct RHLoginDataFactory_UIX_OnSignInWithApple final
{
public:
	struct FPlatformUserId                        PlatformId;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_UIX_OnSignInWithApple) == 0x000004, "Wrong alignment on RHLoginDataFactory_UIX_OnSignInWithApple");
static_assert(sizeof(RHLoginDataFactory_UIX_OnSignInWithApple) == 0x000004, "Wrong size on RHLoginDataFactory_UIX_OnSignInWithApple");
static_assert(offsetof(RHLoginDataFactory_UIX_OnSignInWithApple, PlatformId) == 0x000000, "Member 'RHLoginDataFactory_UIX_OnSignInWithApple::PlatformId' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.UIX_OnSignInWithGoogle
// 0x0004 (0x0004 - 0x0000)
struct RHLoginDataFactory_UIX_OnSignInWithGoogle final
{
public:
	struct FPlatformUserId                        PlatformId;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_UIX_OnSignInWithGoogle) == 0x000004, "Wrong alignment on RHLoginDataFactory_UIX_OnSignInWithGoogle");
static_assert(sizeof(RHLoginDataFactory_UIX_OnSignInWithGoogle) == 0x000004, "Wrong size on RHLoginDataFactory_UIX_OnSignInWithGoogle");
static_assert(offsetof(RHLoginDataFactory_UIX_OnSignInWithGoogle, PlatformId) == 0x000000, "Member 'RHLoginDataFactory_UIX_OnSignInWithGoogle::PlatformId' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.UIX_OnSubmitAutoLogin
// 0x0004 (0x0004 - 0x0000)
struct RHLoginDataFactory_UIX_OnSubmitAutoLogin final
{
public:
	struct FPlatformUserId                        PlatformId;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_UIX_OnSubmitAutoLogin) == 0x000004, "Wrong alignment on RHLoginDataFactory_UIX_OnSubmitAutoLogin");
static_assert(sizeof(RHLoginDataFactory_UIX_OnSubmitAutoLogin) == 0x000004, "Wrong size on RHLoginDataFactory_UIX_OnSubmitAutoLogin");
static_assert(offsetof(RHLoginDataFactory_UIX_OnSubmitAutoLogin, PlatformId) == 0x000000, "Member 'RHLoginDataFactory_UIX_OnSubmitAutoLogin::PlatformId' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.UIX_OnSubmitLogin
// 0x0020 (0x0020 - 0x0000)
struct RHLoginDataFactory_UIX_OnSubmitLogin final
{
public:
	class FString                                 UserName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_UIX_OnSubmitLogin) == 0x000008, "Wrong alignment on RHLoginDataFactory_UIX_OnSubmitLogin");
static_assert(sizeof(RHLoginDataFactory_UIX_OnSubmitLogin) == 0x000020, "Wrong size on RHLoginDataFactory_UIX_OnSubmitLogin");
static_assert(offsetof(RHLoginDataFactory_UIX_OnSubmitLogin, UserName) == 0x000000, "Member 'RHLoginDataFactory_UIX_OnSubmitLogin::UserName' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_UIX_OnSubmitLogin, Password) == 0x000010, "Member 'RHLoginDataFactory_UIX_OnSubmitLogin::Password' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.AllowUserSwitching
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_AllowUserSwitching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_AllowUserSwitching) == 0x000001, "Wrong alignment on RHLoginDataFactory_AllowUserSwitching");
static_assert(sizeof(RHLoginDataFactory_AllowUserSwitching) == 0x000001, "Wrong size on RHLoginDataFactory_AllowUserSwitching");
static_assert(offsetof(RHLoginDataFactory_AllowUserSwitching, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_AllowUserSwitching::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.AreLoginsLimited
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_AreLoginsLimited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_AreLoginsLimited) == 0x000001, "Wrong alignment on RHLoginDataFactory_AreLoginsLimited");
static_assert(sizeof(RHLoginDataFactory_AreLoginsLimited) == 0x000001, "Wrong size on RHLoginDataFactory_AreLoginsLimited");
static_assert(offsetof(RHLoginDataFactory_AreLoginsLimited, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_AreLoginsLimited::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetCurrentPlayerId
// 0x0020 (0x0020 - 0x0000)
struct RHLoginDataFactory_GetCurrentPlayerId final
{
public:
	class FText                                   ID;                                                // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHLoginDataFactory_GetCurrentPlayerId) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetCurrentPlayerId");
static_assert(sizeof(RHLoginDataFactory_GetCurrentPlayerId) == 0x000020, "Wrong size on RHLoginDataFactory_GetCurrentPlayerId");
static_assert(offsetof(RHLoginDataFactory_GetCurrentPlayerId, ID) == 0x000000, "Member 'RHLoginDataFactory_GetCurrentPlayerId::ID' has a wrong offset!");
static_assert(offsetof(RHLoginDataFactory_GetCurrentPlayerId, ReturnValue) == 0x000018, "Member 'RHLoginDataFactory_GetCurrentPlayerId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetRH_ConfigSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHLoginDataFactory_GetRH_ConfigSubsystem final
{
public:
	class URH_ConfigSubsystem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_GetRH_ConfigSubsystem) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetRH_ConfigSubsystem");
static_assert(sizeof(RHLoginDataFactory_GetRH_ConfigSubsystem) == 0x000008, "Wrong size on RHLoginDataFactory_GetRH_ConfigSubsystem");
static_assert(offsetof(RHLoginDataFactory_GetRH_ConfigSubsystem, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_GetRH_ConfigSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetRH_LocalPlayerLoginSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem final
{
public:
	class URH_LocalPlayerLoginSubsystem*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem");
static_assert(sizeof(RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem) == 0x000008, "Wrong size on RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem");
static_assert(offsetof(RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_GetRH_LocalPlayerLoginSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.GetRH_LocalPlayerSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHLoginDataFactory_GetRH_LocalPlayerSubsystem final
{
public:
	class URH_LocalPlayerSubsystem*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_GetRH_LocalPlayerSubsystem) == 0x000008, "Wrong alignment on RHLoginDataFactory_GetRH_LocalPlayerSubsystem");
static_assert(sizeof(RHLoginDataFactory_GetRH_LocalPlayerSubsystem) == 0x000008, "Wrong size on RHLoginDataFactory_GetRH_LocalPlayerSubsystem");
static_assert(offsetof(RHLoginDataFactory_GetRH_LocalPlayerSubsystem, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_GetRH_LocalPlayerSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginDataFactory.ShouldDisplayDisconnectError
// 0x0001 (0x0001 - 0x0000)
struct RHLoginDataFactory_ShouldDisplayDisconnectError final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginDataFactory_ShouldDisplayDisconnectError) == 0x000001, "Wrong alignment on RHLoginDataFactory_ShouldDisplayDisconnectError");
static_assert(sizeof(RHLoginDataFactory_ShouldDisplayDisconnectError) == 0x000001, "Wrong size on RHLoginDataFactory_ShouldDisplayDisconnectError");
static_assert(offsetof(RHLoginDataFactory_ShouldDisplayDisconnectError, ReturnValue) == 0x000000, "Member 'RHLoginDataFactory_ShouldDisplayDisconnectError::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewRedirecter.ShouldRedirect
// 0x0020 (0x0020 - 0x0000)
struct RHViewRedirecter_ShouldRedirect final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RouteTag;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                SceneData;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewRedirecter_ShouldRedirect) == 0x000008, "Wrong alignment on RHViewRedirecter_ShouldRedirect");
static_assert(sizeof(RHViewRedirecter_ShouldRedirect) == 0x000020, "Wrong size on RHViewRedirecter_ShouldRedirect");
static_assert(offsetof(RHViewRedirecter_ShouldRedirect, HUD) == 0x000000, "Member 'RHViewRedirecter_ShouldRedirect::HUD' has a wrong offset!");
static_assert(offsetof(RHViewRedirecter_ShouldRedirect, RouteTag) == 0x000008, "Member 'RHViewRedirecter_ShouldRedirect::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewRedirecter_ShouldRedirect, SceneData) == 0x000010, "Member 'RHViewRedirecter_ShouldRedirect::SceneData' has a wrong offset!");
static_assert(offsetof(RHViewRedirecter_ShouldRedirect, ReturnValue) == 0x000018, "Member 'RHViewRedirecter_ShouldRedirect::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWhatsNewModal.BLUEPRINT_GetPanelDataAsync
// 0x0010 (0x0010 - 0x0000)
struct RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync final
{
public:
	TDelegate<void(const TArray<class URHWhatsNewPanel*>& PanelData)> Delegate;                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync) == 0x000004, "Wrong alignment on RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync");
static_assert(sizeof(RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync) == 0x000010, "Wrong size on RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync");
static_assert(offsetof(RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync, Delegate) == 0x000000, "Member 'RHWhatsNewModal_BLUEPRINT_GetPanelDataAsync::Delegate' has a wrong offset!");

// Function RallyHereStart.RHWhatsNewModal.GetNewsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHWhatsNewModal_GetNewsSubsystem final
{
public:
	class URHNewsSubsystem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWhatsNewModal_GetNewsSubsystem) == 0x000008, "Wrong alignment on RHWhatsNewModal_GetNewsSubsystem");
static_assert(sizeof(RHWhatsNewModal_GetNewsSubsystem) == 0x000008, "Wrong size on RHWhatsNewModal_GetNewsSubsystem");
static_assert(offsetof(RHWhatsNewModal_GetNewsSubsystem, ReturnValue) == 0x000000, "Member 'RHWhatsNewModal_GetNewsSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHWhatsNewModal.UpdateWhatsNewPanels
// 0x0010 (0x0010 - 0x0000)
struct RHWhatsNewModal_UpdateWhatsNewPanels final
{
public:
	class FString                                 JsonName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWhatsNewModal_UpdateWhatsNewPanels) == 0x000008, "Wrong alignment on RHWhatsNewModal_UpdateWhatsNewPanels");
static_assert(sizeof(RHWhatsNewModal_UpdateWhatsNewPanels) == 0x000010, "Wrong size on RHWhatsNewModal_UpdateWhatsNewPanels");
static_assert(offsetof(RHWhatsNewModal_UpdateWhatsNewPanels, JsonName) == 0x000000, "Member 'RHWhatsNewModal_UpdateWhatsNewPanels::JsonName' has a wrong offset!");

// Function RallyHereStart.RHWhatsNewModal.GetMaxPanelCount
// 0x0004 (0x0004 - 0x0000)
struct RHWhatsNewModal_GetMaxPanelCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHWhatsNewModal_GetMaxPanelCount) == 0x000004, "Wrong alignment on RHWhatsNewModal_GetMaxPanelCount");
static_assert(sizeof(RHWhatsNewModal_GetMaxPanelCount) == 0x000004, "Wrong size on RHWhatsNewModal_GetMaxPanelCount");
static_assert(offsetof(RHWhatsNewModal_GetMaxPanelCount, ReturnValue) == 0x000000, "Member 'RHWhatsNewModal_GetMaxPanelCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLoginExistingBase.ShouldBlockLogin
// 0x0001 (0x0001 - 0x0000)
struct RHLoginExistingBase_ShouldBlockLogin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLoginExistingBase_ShouldBlockLogin) == 0x000001, "Wrong alignment on RHLoginExistingBase_ShouldBlockLogin");
static_assert(sizeof(RHLoginExistingBase_ShouldBlockLogin) == 0x000001, "Wrong size on RHLoginExistingBase_ShouldBlockLogin");
static_assert(offsetof(RHLoginExistingBase_ShouldBlockLogin, ReturnValue) == 0x000000, "Member 'RHLoginExistingBase_ShouldBlockLogin::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLootBoxContents.GetContentsFilterOptions
// 0x0010 (0x0010 - 0x0000)
struct RHLootBoxContents_GetContentsFilterOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLootBoxContents_GetContentsFilterOptions) == 0x000008, "Wrong alignment on RHLootBoxContents_GetContentsFilterOptions");
static_assert(sizeof(RHLootBoxContents_GetContentsFilterOptions) == 0x000010, "Wrong size on RHLootBoxContents_GetContentsFilterOptions");
static_assert(offsetof(RHLootBoxContents_GetContentsFilterOptions, ReturnValue) == 0x000000, "Member 'RHLootBoxContents_GetContentsFilterOptions::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLootBoxSubsystem.GetContentCategoryName
// 0x0020 (0x0020 - 0x0000)
struct RHLootBoxSubsystem_GetContentCategoryName final
{
public:
	ELootBoxContentsCategories                    Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLootBoxSubsystem_GetContentCategoryName) == 0x000008, "Wrong alignment on RHLootBoxSubsystem_GetContentCategoryName");
static_assert(sizeof(RHLootBoxSubsystem_GetContentCategoryName) == 0x000020, "Wrong size on RHLootBoxSubsystem_GetContentCategoryName");
static_assert(offsetof(RHLootBoxSubsystem_GetContentCategoryName, Category) == 0x000000, "Member 'RHLootBoxSubsystem_GetContentCategoryName::Category' has a wrong offset!");
static_assert(offsetof(RHLootBoxSubsystem_GetContentCategoryName, ReturnValue) == 0x000008, "Member 'RHLootBoxSubsystem_GetContentCategoryName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHLootBoxSubsystem.OnStoreVendorsLoaded
// 0x0001 (0x0001 - 0x0000)
struct RHLootBoxSubsystem_OnStoreVendorsLoaded final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHLootBoxSubsystem_OnStoreVendorsLoaded) == 0x000001, "Wrong alignment on RHLootBoxSubsystem_OnStoreVendorsLoaded");
static_assert(sizeof(RHLootBoxSubsystem_OnStoreVendorsLoaded) == 0x000001, "Wrong size on RHLootBoxSubsystem_OnStoreVendorsLoaded");
static_assert(offsetof(RHLootBoxSubsystem_OnStoreVendorsLoaded, bSuccess) == 0x000000, "Member 'RHLootBoxSubsystem_OnStoreVendorsLoaded::bSuccess' has a wrong offset!");

// Function RallyHereStart.RHMapButton.SetMap
// 0x0008 (0x0008 - 0x0000)
struct RHMapButton_SetMap final
{
public:
	class FName                                   InMapName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMapButton_SetMap) == 0x000004, "Wrong alignment on RHMapButton_SetMap");
static_assert(sizeof(RHMapButton_SetMap) == 0x000008, "Wrong size on RHMapButton_SetMap");
static_assert(offsetof(RHMapButton_SetMap, InMapName) == 0x000000, "Member 'RHMapButton_SetMap::InMapName' has a wrong offset!");

// Function RallyHereStart.RHMapButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RHMapButton_SetSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMapButton_SetSelected) == 0x000001, "Wrong alignment on RHMapButton_SetSelected");
static_assert(sizeof(RHMapButton_SetSelected) == 0x000001, "Wrong size on RHMapButton_SetSelected");
static_assert(offsetof(RHMapButton_SetSelected, bSelected) == 0x000000, "Member 'RHMapButton_SetSelected::bSelected' has a wrong offset!");

// Function RallyHereStart.RHMapButton.GetMapDetails
// 0x0080 (0x0080 - 0x0000)
struct RHMapButton_GetMapDetails final
{
public:
	struct FRHMapDetails                          OutMapDetails;                                     // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHMapButton_GetMapDetails) == 0x000008, "Wrong alignment on RHMapButton_GetMapDetails");
static_assert(sizeof(RHMapButton_GetMapDetails) == 0x000080, "Wrong size on RHMapButton_GetMapDetails");
static_assert(offsetof(RHMapButton_GetMapDetails, OutMapDetails) == 0x000000, "Member 'RHMapButton_GetMapDetails::OutMapDetails' has a wrong offset!");
static_assert(offsetof(RHMapButton_GetMapDetails, ReturnValue) == 0x000078, "Member 'RHMapButton_GetMapDetails::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataIndividualInviteSetup.SetCallbacks
// 0x0048 (0x0048 - 0x0000)
struct RHDataIndividualInviteSetup_SetCallbacks final
{
public:
	TDelegate<void(class URH_RHFriendAndPlatformFriend* PlayerInfo)> GetIsSelected;                  // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class URH_RHFriendAndPlatformFriend* PlayerInfo)> Select;                         // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class URH_RHFriendAndPlatformFriend* PlayerAndPlatformInfo)> ShouldShowPlayer;    // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Close;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHDataIndividualInviteSetup*           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataIndividualInviteSetup_SetCallbacks) == 0x000008, "Wrong alignment on RHDataIndividualInviteSetup_SetCallbacks");
static_assert(sizeof(RHDataIndividualInviteSetup_SetCallbacks) == 0x000048, "Wrong size on RHDataIndividualInviteSetup_SetCallbacks");
static_assert(offsetof(RHDataIndividualInviteSetup_SetCallbacks, GetIsSelected) == 0x000000, "Member 'RHDataIndividualInviteSetup_SetCallbacks::GetIsSelected' has a wrong offset!");
static_assert(offsetof(RHDataIndividualInviteSetup_SetCallbacks, Select) == 0x000010, "Member 'RHDataIndividualInviteSetup_SetCallbacks::Select' has a wrong offset!");
static_assert(offsetof(RHDataIndividualInviteSetup_SetCallbacks, ShouldShowPlayer) == 0x000020, "Member 'RHDataIndividualInviteSetup_SetCallbacks::ShouldShowPlayer' has a wrong offset!");
static_assert(offsetof(RHDataIndividualInviteSetup_SetCallbacks, Close) == 0x000030, "Member 'RHDataIndividualInviteSetup_SetCallbacks::Close' has a wrong offset!");
static_assert(offsetof(RHDataIndividualInviteSetup_SetCallbacks, ReturnValue) == 0x000040, "Member 'RHDataIndividualInviteSetup_SetCallbacks::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHDataBatchInviteSetup.SetCallbacks
// 0x0038 (0x0038 - 0x0000)
struct RHDataBatchInviteSetup_SetCallbacks final
{
public:
	TDelegate<void(const TArray<class URH_RHFriendAndPlatformFriend*>& Friends)> Select;             // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class URH_RHFriendAndPlatformFriend* PlayerAndPlatformInfo)> ShouldShowPlayer;    // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Cancel;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHDataBatchInviteSetup*                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHDataBatchInviteSetup_SetCallbacks) == 0x000008, "Wrong alignment on RHDataBatchInviteSetup_SetCallbacks");
static_assert(sizeof(RHDataBatchInviteSetup_SetCallbacks) == 0x000038, "Wrong size on RHDataBatchInviteSetup_SetCallbacks");
static_assert(offsetof(RHDataBatchInviteSetup_SetCallbacks, Select) == 0x000000, "Member 'RHDataBatchInviteSetup_SetCallbacks::Select' has a wrong offset!");
static_assert(offsetof(RHDataBatchInviteSetup_SetCallbacks, ShouldShowPlayer) == 0x000010, "Member 'RHDataBatchInviteSetup_SetCallbacks::ShouldShowPlayer' has a wrong offset!");
static_assert(offsetof(RHDataBatchInviteSetup_SetCallbacks, Cancel) == 0x000020, "Member 'RHDataBatchInviteSetup_SetCallbacks::Cancel' has a wrong offset!");
static_assert(offsetof(RHDataBatchInviteSetup_SetCallbacks, ReturnValue) == 0x000030, "Member 'RHDataBatchInviteSetup_SetCallbacks::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.CloseScreen
// 0x0001 (0x0001 - 0x0000)
struct RHMassInviteModal_CloseScreen final
{
public:
	ERHInviteCloseAction                          CloseAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMassInviteModal_CloseScreen) == 0x000001, "Wrong alignment on RHMassInviteModal_CloseScreen");
static_assert(sizeof(RHMassInviteModal_CloseScreen) == 0x000001, "Wrong size on RHMassInviteModal_CloseScreen");
static_assert(offsetof(RHMassInviteModal_CloseScreen, CloseAction) == 0x000000, "Member 'RHMassInviteModal_CloseScreen::CloseAction' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.DoSearch
// 0x0018 (0x0018 - 0x0000)
struct RHMassInviteModal_DoSearch final
{
public:
	class FText                                   SearchTerm;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMassInviteModal_DoSearch) == 0x000008, "Wrong alignment on RHMassInviteModal_DoSearch");
static_assert(sizeof(RHMassInviteModal_DoSearch) == 0x000018, "Wrong size on RHMassInviteModal_DoSearch");
static_assert(offsetof(RHMassInviteModal_DoSearch, SearchTerm) == 0x000000, "Member 'RHMassInviteModal_DoSearch::SearchTerm' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.GetShouldSelect
// 0x0010 (0x0010 - 0x0000)
struct RHMassInviteModal_GetShouldSelect final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHMassInviteModal_GetShouldSelect) == 0x000008, "Wrong alignment on RHMassInviteModal_GetShouldSelect");
static_assert(sizeof(RHMassInviteModal_GetShouldSelect) == 0x000010, "Wrong size on RHMassInviteModal_GetShouldSelect");
static_assert(offsetof(RHMassInviteModal_GetShouldSelect, Friend) == 0x000000, "Member 'RHMassInviteModal_GetShouldSelect::Friend' has a wrong offset!");
static_assert(offsetof(RHMassInviteModal_GetShouldSelect, ReturnValue) == 0x000008, "Member 'RHMassInviteModal_GetShouldSelect::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.OnSearchResultUpdated
// 0x0010 (0x0010 - 0x0000)
struct RHMassInviteModal_OnSearchResultUpdated final
{
public:
	TArray<class URH_RHFriendAndPlatformFriend*>  ResultPlayers;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMassInviteModal_OnSearchResultUpdated) == 0x000008, "Wrong alignment on RHMassInviteModal_OnSearchResultUpdated");
static_assert(sizeof(RHMassInviteModal_OnSearchResultUpdated) == 0x000010, "Wrong size on RHMassInviteModal_OnSearchResultUpdated");
static_assert(offsetof(RHMassInviteModal_OnSearchResultUpdated, ResultPlayers) == 0x000000, "Member 'RHMassInviteModal_OnSearchResultUpdated::ResultPlayers' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.RequestFriends
// 0x0010 (0x0010 - 0x0000)
struct RHMassInviteModal_RequestFriends final
{
public:
	TDelegate<void(const TArray<class URH_RHFriendAndPlatformFriend*>& PlayerAndPlatformInfos)> OnReceivePlayers; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMassInviteModal_RequestFriends) == 0x000004, "Wrong alignment on RHMassInviteModal_RequestFriends");
static_assert(sizeof(RHMassInviteModal_RequestFriends) == 0x000010, "Wrong size on RHMassInviteModal_RequestFriends");
static_assert(offsetof(RHMassInviteModal_RequestFriends, OnReceivePlayers) == 0x000000, "Member 'RHMassInviteModal_RequestFriends::OnReceivePlayers' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.SelectPlayer
// 0x0010 (0x0010 - 0x0000)
struct RHMassInviteModal_SelectPlayer final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHInviteSelectResult                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHMassInviteModal_SelectPlayer) == 0x000008, "Wrong alignment on RHMassInviteModal_SelectPlayer");
static_assert(sizeof(RHMassInviteModal_SelectPlayer) == 0x000010, "Wrong size on RHMassInviteModal_SelectPlayer");
static_assert(offsetof(RHMassInviteModal_SelectPlayer, Friend) == 0x000000, "Member 'RHMassInviteModal_SelectPlayer::Friend' has a wrong offset!");
static_assert(offsetof(RHMassInviteModal_SelectPlayer, ReturnValue) == 0x000008, "Member 'RHMassInviteModal_SelectPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMassInviteModal.UpdateRouteData
// 0x0001 (0x0001 - 0x0000)
struct RHMassInviteModal_UpdateRouteData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMassInviteModal_UpdateRouteData) == 0x000001, "Wrong alignment on RHMassInviteModal_UpdateRouteData");
static_assert(sizeof(RHMassInviteModal_UpdateRouteData) == 0x000001, "Wrong size on RHMassInviteModal_UpdateRouteData");
static_assert(offsetof(RHMassInviteModal_UpdateRouteData, ReturnValue) == 0x000000, "Member 'RHMassInviteModal_UpdateRouteData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchIdWidget.GetLongMatchId
// 0x0018 (0x0018 - 0x0000)
struct RHMatchIdWidget_GetLongMatchId final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchIdWidget_GetLongMatchId) == 0x000008, "Wrong alignment on RHMatchIdWidget_GetLongMatchId");
static_assert(sizeof(RHMatchIdWidget_GetLongMatchId) == 0x000018, "Wrong size on RHMatchIdWidget_GetLongMatchId");
static_assert(offsetof(RHMatchIdWidget_GetLongMatchId, ReturnValue) == 0x000000, "Member 'RHMatchIdWidget_GetLongMatchId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchIdWidget.GetShortMatchId
// 0x0018 (0x0018 - 0x0000)
struct RHMatchIdWidget_GetShortMatchId final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchIdWidget_GetShortMatchId) == 0x000008, "Wrong alignment on RHMatchIdWidget_GetShortMatchId");
static_assert(sizeof(RHMatchIdWidget_GetShortMatchId) == 0x000018, "Wrong size on RHMatchIdWidget_GetShortMatchId");
static_assert(offsetof(RHMatchIdWidget_GetShortMatchId, ReturnValue) == 0x000000, "Member 'RHMatchIdWidget_GetShortMatchId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchInvitationModal.AcceptInvite
// 0x0004 (0x0004 - 0x0000)
struct RHMatchInvitationModal_AcceptInvite final
{
public:
	int32                                         MapId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchInvitationModal_AcceptInvite) == 0x000004, "Wrong alignment on RHMatchInvitationModal_AcceptInvite");
static_assert(sizeof(RHMatchInvitationModal_AcceptInvite) == 0x000004, "Wrong size on RHMatchInvitationModal_AcceptInvite");
static_assert(offsetof(RHMatchInvitationModal_AcceptInvite, MapId) == 0x000000, "Member 'RHMatchInvitationModal_AcceptInvite::MapId' has a wrong offset!");

// Function RallyHereStart.RHMatchInvitationModal.GetInvitationTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct RHMatchInvitationModal_GetInvitationTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchInvitationModal_GetInvitationTimeRemaining) == 0x000004, "Wrong alignment on RHMatchInvitationModal_GetInvitationTimeRemaining");
static_assert(sizeof(RHMatchInvitationModal_GetInvitationTimeRemaining) == 0x000004, "Wrong size on RHMatchInvitationModal_GetInvitationTimeRemaining");
static_assert(offsetof(RHMatchInvitationModal_GetInvitationTimeRemaining, ReturnValue) == 0x000000, "Member 'RHMatchInvitationModal_GetInvitationTimeRemaining::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchInvitationModal.GetInvitationTotalTimeToExpire
// 0x0004 (0x0004 - 0x0000)
struct RHMatchInvitationModal_GetInvitationTotalTimeToExpire final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchInvitationModal_GetInvitationTotalTimeToExpire) == 0x000004, "Wrong alignment on RHMatchInvitationModal_GetInvitationTotalTimeToExpire");
static_assert(sizeof(RHMatchInvitationModal_GetInvitationTotalTimeToExpire) == 0x000004, "Wrong size on RHMatchInvitationModal_GetInvitationTotalTimeToExpire");
static_assert(offsetof(RHMatchInvitationModal_GetInvitationTotalTimeToExpire, ReturnValue) == 0x000000, "Member 'RHMatchInvitationModal_GetInvitationTotalTimeToExpire::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchInvitationModal.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHMatchInvitationModal_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchInvitationModal_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHMatchInvitationModal_GetQueueDataFactory");
static_assert(sizeof(RHMatchInvitationModal_GetQueueDataFactory) == 0x000008, "Wrong size on RHMatchInvitationModal_GetQueueDataFactory");
static_assert(offsetof(RHMatchInvitationModal_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHMatchInvitationModal_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMatchInvitationModal.GetRH_LocalPlayerFriendSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem final
{
public:
	class URH_FriendSubsystem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem) == 0x000008, "Wrong alignment on RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem");
static_assert(sizeof(RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem) == 0x000008, "Wrong size on RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem");
static_assert(offsetof(RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem, ReturnValue) == 0x000000, "Member 'RHMatchInvitationModal_GetRH_LocalPlayerFriendSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.HandleSubtitleText
// 0x0018 (0x0018 - 0x0000)
struct RHMediaPlayerWidget_HandleSubtitleText final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMediaPlayerWidget_HandleSubtitleText) == 0x000008, "Wrong alignment on RHMediaPlayerWidget_HandleSubtitleText");
static_assert(sizeof(RHMediaPlayerWidget_HandleSubtitleText) == 0x000018, "Wrong size on RHMediaPlayerWidget_HandleSubtitleText");
static_assert(offsetof(RHMediaPlayerWidget_HandleSubtitleText, Subtitle) == 0x000000, "Member 'RHMediaPlayerWidget_HandleSubtitleText::Subtitle' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.HandleViewStateChanged
// 0x0014 (0x0014 - 0x0000)
struct RHMediaPlayerWidget_HandleViewStateChanged final
{
public:
	struct FGameplayTag                           CurrentRoute;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PreviousRoute;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewManagerLayer                             Layer;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHMediaPlayerWidget_HandleViewStateChanged) == 0x000004, "Wrong alignment on RHMediaPlayerWidget_HandleViewStateChanged");
static_assert(sizeof(RHMediaPlayerWidget_HandleViewStateChanged) == 0x000014, "Wrong size on RHMediaPlayerWidget_HandleViewStateChanged");
static_assert(offsetof(RHMediaPlayerWidget_HandleViewStateChanged, CurrentRoute) == 0x000000, "Member 'RHMediaPlayerWidget_HandleViewStateChanged::CurrentRoute' has a wrong offset!");
static_assert(offsetof(RHMediaPlayerWidget_HandleViewStateChanged, PreviousRoute) == 0x000008, "Member 'RHMediaPlayerWidget_HandleViewStateChanged::PreviousRoute' has a wrong offset!");
static_assert(offsetof(RHMediaPlayerWidget_HandleViewStateChanged, Layer) == 0x000010, "Member 'RHMediaPlayerWidget_HandleViewStateChanged::Layer' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.OnPlaybackStarted
// 0x0008 (0x0008 - 0x0000)
struct RHMediaPlayerWidget_OnPlaybackStarted final
{
public:
	const class UPlatformMediaSource*             PlatformMediaSource;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMediaPlayerWidget_OnPlaybackStarted) == 0x000008, "Wrong alignment on RHMediaPlayerWidget_OnPlaybackStarted");
static_assert(sizeof(RHMediaPlayerWidget_OnPlaybackStarted) == 0x000008, "Wrong size on RHMediaPlayerWidget_OnPlaybackStarted");
static_assert(offsetof(RHMediaPlayerWidget_OnPlaybackStarted, PlatformMediaSource) == 0x000000, "Member 'RHMediaPlayerWidget_OnPlaybackStarted::PlatformMediaSource' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.OnReadyForPlayback
// 0x0008 (0x0008 - 0x0000)
struct RHMediaPlayerWidget_OnReadyForPlayback final
{
public:
	const class UPlatformMediaSource*             PlatformMediaSource;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMediaPlayerWidget_OnReadyForPlayback) == 0x000008, "Wrong alignment on RHMediaPlayerWidget_OnReadyForPlayback");
static_assert(sizeof(RHMediaPlayerWidget_OnReadyForPlayback) == 0x000008, "Wrong size on RHMediaPlayerWidget_OnReadyForPlayback");
static_assert(offsetof(RHMediaPlayerWidget_OnReadyForPlayback, PlatformMediaSource) == 0x000000, "Member 'RHMediaPlayerWidget_OnReadyForPlayback::PlatformMediaSource' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.OnShouldShowPromptChanged
// 0x0001 (0x0001 - 0x0000)
struct RHMediaPlayerWidget_OnShouldShowPromptChanged final
{
public:
	bool                                          bCanSkipEntry;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMediaPlayerWidget_OnShouldShowPromptChanged) == 0x000001, "Wrong alignment on RHMediaPlayerWidget_OnShouldShowPromptChanged");
static_assert(sizeof(RHMediaPlayerWidget_OnShouldShowPromptChanged) == 0x000001, "Wrong size on RHMediaPlayerWidget_OnShouldShowPromptChanged");
static_assert(offsetof(RHMediaPlayerWidget_OnShouldShowPromptChanged, bCanSkipEntry) == 0x000000, "Member 'RHMediaPlayerWidget_OnShouldShowPromptChanged::bCanSkipEntry' has a wrong offset!");

// Function RallyHereStart.RHMediaPlayerWidget.IsCurrentEntrySkippable
// 0x0001 (0x0001 - 0x0000)
struct RHMediaPlayerWidget_IsCurrentEntrySkippable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHMediaPlayerWidget_IsCurrentEntrySkippable) == 0x000001, "Wrong alignment on RHMediaPlayerWidget_IsCurrentEntrySkippable");
static_assert(sizeof(RHMediaPlayerWidget_IsCurrentEntrySkippable) == 0x000001, "Wrong size on RHMediaPlayerWidget_IsCurrentEntrySkippable");
static_assert(offsetof(RHMediaPlayerWidget_IsCurrentEntrySkippable, ReturnValue) == 0x000000, "Member 'RHMediaPlayerWidget_IsCurrentEntrySkippable::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHNavTabWidget.SetDisabled
// 0x0001 (0x0001 - 0x0000)
struct RHNavTabWidget_SetDisabled final
{
public:
	bool                                          bNewDisabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNavTabWidget_SetDisabled) == 0x000001, "Wrong alignment on RHNavTabWidget_SetDisabled");
static_assert(sizeof(RHNavTabWidget_SetDisabled) == 0x000001, "Wrong size on RHNavTabWidget_SetDisabled");
static_assert(offsetof(RHNavTabWidget_SetDisabled, bNewDisabled) == 0x000000, "Member 'RHNavTabWidget_SetDisabled::bNewDisabled' has a wrong offset!");

// Function RallyHereStart.RHNavTabWidget.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RHNavTabWidget_SetSelected final
{
public:
	bool                                          bNewSelected;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNavTabWidget_SetSelected) == 0x000001, "Wrong alignment on RHNavTabWidget_SetSelected");
static_assert(sizeof(RHNavTabWidget_SetSelected) == 0x000001, "Wrong size on RHNavTabWidget_SetSelected");
static_assert(offsetof(RHNavTabWidget_SetSelected, bNewSelected) == 0x000000, "Member 'RHNavTabWidget_SetSelected::bNewSelected' has a wrong offset!");

// Function RallyHereStart.RHNavTabWidget.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct RHNavTabWidget_IsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNavTabWidget_IsDisabled) == 0x000001, "Wrong alignment on RHNavTabWidget_IsDisabled");
static_assert(sizeof(RHNavTabWidget_IsDisabled) == 0x000001, "Wrong size on RHNavTabWidget_IsDisabled");
static_assert(offsetof(RHNavTabWidget_IsDisabled, ReturnValue) == 0x000000, "Member 'RHNavTabWidget_IsDisabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHNavTabWidget.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct RHNavTabWidget_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNavTabWidget_IsSelected) == 0x000001, "Wrong alignment on RHNavTabWidget_IsSelected");
static_assert(sizeof(RHNavTabWidget_IsSelected) == 0x000001, "Wrong size on RHNavTabWidget_IsSelected");
static_assert(offsetof(RHNavTabWidget_IsSelected, ReturnValue) == 0x000000, "Member 'RHNavTabWidget_IsSelected::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHNewsRotatorWidget.BLUEPRINT_CheckShouldShowPanels
// 0x0020 (0x0020 - 0x0000)
struct RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels final
{
public:
	TArray<class URHNewsRotatorData*>             Panels;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)> Delegate;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels) == 0x000008, "Wrong alignment on RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels");
static_assert(sizeof(RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels) == 0x000020, "Wrong size on RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels");
static_assert(offsetof(RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels, Panels) == 0x000000, "Member 'RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels::Panels' has a wrong offset!");
static_assert(offsetof(RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels, Delegate) == 0x000010, "Member 'RHNewsRotatorWidget_BLUEPRINT_CheckShouldShowPanels::Delegate' has a wrong offset!");

// Function RallyHereStart.RHNewsRotatorWidget.BLUEPRINT_GetPanelDataAsync
// 0x0010 (0x0010 - 0x0000)
struct RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync final
{
public:
	TDelegate<void(const TArray<class URHNewsRotatorData*>& Data)> Delegate;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync) == 0x000004, "Wrong alignment on RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync");
static_assert(sizeof(RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync) == 0x000010, "Wrong size on RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync");
static_assert(offsetof(RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync, Delegate) == 0x000000, "Member 'RHNewsRotatorWidget_BLUEPRINT_GetPanelDataAsync::Delegate' has a wrong offset!");

// Function RallyHereStart.RHNewsRotatorWidget.GetNewsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHNewsRotatorWidget_GetNewsSubsystem final
{
public:
	class URHNewsSubsystem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsRotatorWidget_GetNewsSubsystem) == 0x000008, "Wrong alignment on RHNewsRotatorWidget_GetNewsSubsystem");
static_assert(sizeof(RHNewsRotatorWidget_GetNewsSubsystem) == 0x000008, "Wrong size on RHNewsRotatorWidget_GetNewsSubsystem");
static_assert(offsetof(RHNewsRotatorWidget_GetNewsSubsystem, ReturnValue) == 0x000000, "Member 'RHNewsRotatorWidget_GetNewsSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHNewsRotatorWidget.OnJsonChanged
// 0x0010 (0x0010 - 0x0000)
struct RHNewsRotatorWidget_OnJsonChanged final
{
public:
	class FString                                 JsonName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsRotatorWidget_OnJsonChanged) == 0x000008, "Wrong alignment on RHNewsRotatorWidget_OnJsonChanged");
static_assert(sizeof(RHNewsRotatorWidget_OnJsonChanged) == 0x000010, "Wrong size on RHNewsRotatorWidget_OnJsonChanged");
static_assert(offsetof(RHNewsRotatorWidget_OnJsonChanged, JsonName) == 0x000000, "Member 'RHNewsRotatorWidget_OnJsonChanged::JsonName' has a wrong offset!");

// Function RallyHereStart.RHNewsRotatorWidget.OnNewsPanelClicked
// 0x0008 (0x0008 - 0x0000)
struct RHNewsRotatorWidget_OnNewsPanelClicked final
{
public:
	class URHNewsRotatorData*                     Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsRotatorWidget_OnNewsPanelClicked) == 0x000008, "Wrong alignment on RHNewsRotatorWidget_OnNewsPanelClicked");
static_assert(sizeof(RHNewsRotatorWidget_OnNewsPanelClicked) == 0x000008, "Wrong size on RHNewsRotatorWidget_OnNewsPanelClicked");
static_assert(offsetof(RHNewsRotatorWidget_OnNewsPanelClicked, Panel) == 0x000000, "Member 'RHNewsRotatorWidget_OnNewsPanelClicked::Panel' has a wrong offset!");

// Function RallyHereStart.RHNewsSubsystem.HandleImagesReady
// 0x0008 (0x0008 - 0x0000)
struct RHNewsSubsystem_HandleImagesReady final
{
public:
	class URHLandingPanelJSONHandler*             pHandler;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsSubsystem_HandleImagesReady) == 0x000008, "Wrong alignment on RHNewsSubsystem_HandleImagesReady");
static_assert(sizeof(RHNewsSubsystem_HandleImagesReady) == 0x000008, "Wrong size on RHNewsSubsystem_HandleImagesReady");
static_assert(offsetof(RHNewsSubsystem_HandleImagesReady, pHandler) == 0x000000, "Member 'RHNewsSubsystem_HandleImagesReady::pHandler' has a wrong offset!");

// Function RallyHereStart.RHNewsSubsystem.HandleJsonReady
// 0x0008 (0x0008 - 0x0000)
struct RHNewsSubsystem_HandleJsonReady final
{
public:
	class URHLandingPanelJSONHandler*             pHandler;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewsSubsystem_HandleJsonReady) == 0x000008, "Wrong alignment on RHNewsSubsystem_HandleJsonReady");
static_assert(sizeof(RHNewsSubsystem_HandleJsonReady) == 0x000008, "Wrong size on RHNewsSubsystem_HandleJsonReady");
static_assert(offsetof(RHNewsSubsystem_HandleJsonReady, pHandler) == 0x000000, "Member 'RHNewsSubsystem_HandleJsonReady::pHandler' has a wrong offset!");

// Function RallyHereStart.RHNewStartMenuWidget.BLUEPRINT_CheckIsNewsAvailable
// 0x0010 (0x0010 - 0x0000)
struct RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable final
{
public:
	TDelegate<void(bool bAvailable)>              Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable) == 0x000004, "Wrong alignment on RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable");
static_assert(sizeof(RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable) == 0x000010, "Wrong size on RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable");
static_assert(offsetof(RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable, Delegate) == 0x000000, "Member 'RHNewStartMenuWidget_BLUEPRINT_CheckIsNewsAvailable::Delegate' has a wrong offset!");

// Function RallyHereStart.RHNewStartMenuWidget.GetNewsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHNewStartMenuWidget_GetNewsSubsystem final
{
public:
	class URHNewsSubsystem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHNewStartMenuWidget_GetNewsSubsystem) == 0x000008, "Wrong alignment on RHNewStartMenuWidget_GetNewsSubsystem");
static_assert(sizeof(RHNewStartMenuWidget_GetNewsSubsystem) == 0x000008, "Wrong size on RHNewStartMenuWidget_GetNewsSubsystem");
static_assert(offsetof(RHNewStartMenuWidget_GetNewsSubsystem, ReturnValue) == 0x000000, "Member 'RHNewStartMenuWidget_GetNewsSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrderModal.GetAcquisitionReason
// 0x0018 (0x0018 - 0x0000)
struct RHOrderModal_GetAcquisitionReason final
{
public:
	const class URHOrder*                         Order;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrderModal_GetAcquisitionReason) == 0x000008, "Wrong alignment on RHOrderModal_GetAcquisitionReason");
static_assert(sizeof(RHOrderModal_GetAcquisitionReason) == 0x000018, "Wrong size on RHOrderModal_GetAcquisitionReason");
static_assert(offsetof(RHOrderModal_GetAcquisitionReason, Order) == 0x000000, "Member 'RHOrderModal_GetAcquisitionReason::Order' has a wrong offset!");
static_assert(offsetof(RHOrderModal_GetAcquisitionReason, ReturnValue) == 0x000008, "Member 'RHOrderModal_GetAcquisitionReason::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrderModal.GetHeaderText
// 0x0020 (0x0020 - 0x0000)
struct RHOrderModal_GetHeaderText final
{
public:
	const class URHOrder*                         Order;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrderModal_GetHeaderText) == 0x000008, "Wrong alignment on RHOrderModal_GetHeaderText");
static_assert(sizeof(RHOrderModal_GetHeaderText) == 0x000020, "Wrong size on RHOrderModal_GetHeaderText");
static_assert(offsetof(RHOrderModal_GetHeaderText, Order) == 0x000000, "Member 'RHOrderModal_GetHeaderText::Order' has a wrong offset!");
static_assert(offsetof(RHOrderModal_GetHeaderText, ReturnValue) == 0x000008, "Member 'RHOrderModal_GetHeaderText::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrderModal.GetOrderSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHOrderModal_GetOrderSubsystem final
{
public:
	class URHOrderSubsystem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrderModal_GetOrderSubsystem) == 0x000008, "Wrong alignment on RHOrderModal_GetOrderSubsystem");
static_assert(sizeof(RHOrderModal_GetOrderSubsystem) == 0x000008, "Wrong size on RHOrderModal_GetOrderSubsystem");
static_assert(offsetof(RHOrderModal_GetOrderSubsystem, ReturnValue) == 0x000000, "Member 'RHOrderModal_GetOrderSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrder.IsBundleOrder
// 0x0001 (0x0001 - 0x0000)
struct RHOrder_IsBundleOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrder_IsBundleOrder) == 0x000001, "Wrong alignment on RHOrder_IsBundleOrder");
static_assert(sizeof(RHOrder_IsBundleOrder) == 0x000001, "Wrong size on RHOrder_IsBundleOrder");
static_assert(offsetof(RHOrder_IsBundleOrder, ReturnValue) == 0x000000, "Member 'RHOrder_IsBundleOrder::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrder.IsPurchase
// 0x0001 (0x0001 - 0x0000)
struct RHOrder_IsPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrder_IsPurchase) == 0x000001, "Wrong alignment on RHOrder_IsPurchase");
static_assert(sizeof(RHOrder_IsPurchase) == 0x000001, "Wrong size on RHOrder_IsPurchase");
static_assert(offsetof(RHOrder_IsPurchase, ReturnValue) == 0x000000, "Member 'RHOrder_IsPurchase::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOrderSubsystem.CreateOrderForItem
// 0x0010 (0x0010 - 0x0000)
struct RHOrderSubsystem_CreateOrderForItem final
{
public:
	class URHStoreItem*                           StoreItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrderSubsystem_CreateOrderForItem) == 0x000008, "Wrong alignment on RHOrderSubsystem_CreateOrderForItem");
static_assert(sizeof(RHOrderSubsystem_CreateOrderForItem) == 0x000010, "Wrong size on RHOrderSubsystem_CreateOrderForItem");
static_assert(offsetof(RHOrderSubsystem_CreateOrderForItem, StoreItem) == 0x000000, "Member 'RHOrderSubsystem_CreateOrderForItem::StoreItem' has a wrong offset!");
static_assert(offsetof(RHOrderSubsystem_CreateOrderForItem, PlayerInfo) == 0x000008, "Member 'RHOrderSubsystem_CreateOrderForItem::PlayerInfo' has a wrong offset!");

// Function RallyHereStart.RHOrderSubsystem.GetNextOrder
// 0x0008 (0x0008 - 0x0000)
struct RHOrderSubsystem_GetNextOrder final
{
public:
	class URHOrder*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOrderSubsystem_GetNextOrder) == 0x000008, "Wrong alignment on RHOrderSubsystem_GetNextOrder");
static_assert(sizeof(RHOrderSubsystem_GetNextOrder) == 0x000008, "Wrong size on RHOrderSubsystem_GetNextOrder");
static_assert(offsetof(RHOrderSubsystem_GetNextOrder, ReturnValue) == 0x000000, "Member 'RHOrderSubsystem_GetNextOrder::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHTabValidator.IsValidTab
// 0x0001 (0x0001 - 0x0000)
struct RHTabValidator_IsValidTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHTabValidator_IsValidTab) == 0x000001, "Wrong alignment on RHTabValidator_IsValidTab");
static_assert(sizeof(RHTabValidator_IsValidTab) == 0x000001, "Wrong size on RHTabValidator_IsValidTab");
static_assert(offsetof(RHTabValidator_IsValidTab, ReturnValue) == 0x000000, "Member 'RHTabValidator_IsValidTab::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.HandleActiveViewChanged
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabEntryWidget_HandleActiveViewChanged final
{
public:
	class FName                                   ActiveView;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_HandleActiveViewChanged) == 0x000004, "Wrong alignment on RHOverlayTabEntryWidget_HandleActiveViewChanged");
static_assert(sizeof(RHOverlayTabEntryWidget_HandleActiveViewChanged) == 0x000008, "Wrong size on RHOverlayTabEntryWidget_HandleActiveViewChanged");
static_assert(offsetof(RHOverlayTabEntryWidget_HandleActiveViewChanged, ActiveView) == 0x000000, "Member 'RHOverlayTabEntryWidget_HandleActiveViewChanged::ActiveView' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.HandleInputStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RHOverlayTabEntryWidget_HandleInputStateChanged final
{
public:
	ERH_INPUT_STATE                               InputState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_HandleInputStateChanged) == 0x000001, "Wrong alignment on RHOverlayTabEntryWidget_HandleInputStateChanged");
static_assert(sizeof(RHOverlayTabEntryWidget_HandleInputStateChanged) == 0x000001, "Wrong size on RHOverlayTabEntryWidget_HandleInputStateChanged");
static_assert(offsetof(RHOverlayTabEntryWidget_HandleInputStateChanged, InputState) == 0x000000, "Member 'RHOverlayTabEntryWidget_HandleInputStateChanged::InputState' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.SetTabState
// 0x0001 (0x0001 - 0x0000)
struct RHOverlayTabEntryWidget_SetTabState final
{
public:
	ERHOverlayTabState                            InTabState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_SetTabState) == 0x000001, "Wrong alignment on RHOverlayTabEntryWidget_SetTabState");
static_assert(sizeof(RHOverlayTabEntryWidget_SetTabState) == 0x000001, "Wrong size on RHOverlayTabEntryWidget_SetTabState");
static_assert(offsetof(RHOverlayTabEntryWidget_SetTabState, InTabState) == 0x000000, "Member 'RHOverlayTabEntryWidget_SetTabState::InTabState' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.SetViewInfo
// 0x0030 (0x0030 - 0x0000)
struct RHOverlayTabEntryWidget_SetViewInfo final
{
public:
	struct FOverlayTabViewRow                     InViewInfo;                                        // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_SetViewInfo) == 0x000008, "Wrong alignment on RHOverlayTabEntryWidget_SetViewInfo");
static_assert(sizeof(RHOverlayTabEntryWidget_SetViewInfo) == 0x000030, "Wrong size on RHOverlayTabEntryWidget_SetViewInfo");
static_assert(offsetof(RHOverlayTabEntryWidget_SetViewInfo, InViewInfo) == 0x000000, "Member 'RHOverlayTabEntryWidget_SetViewInfo::InViewInfo' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.SetViewName
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabEntryWidget_SetViewName final
{
public:
	class FName                                   InViewName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_SetViewName) == 0x000004, "Wrong alignment on RHOverlayTabEntryWidget_SetViewName");
static_assert(sizeof(RHOverlayTabEntryWidget_SetViewName) == 0x000008, "Wrong size on RHOverlayTabEntryWidget_SetViewName");
static_assert(offsetof(RHOverlayTabEntryWidget_SetViewName, InViewName) == 0x000000, "Member 'RHOverlayTabEntryWidget_SetViewName::InViewName' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.GetTabState
// 0x0001 (0x0001 - 0x0000)
struct RHOverlayTabEntryWidget_GetTabState final
{
public:
	ERHOverlayTabState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_GetTabState) == 0x000001, "Wrong alignment on RHOverlayTabEntryWidget_GetTabState");
static_assert(sizeof(RHOverlayTabEntryWidget_GetTabState) == 0x000001, "Wrong size on RHOverlayTabEntryWidget_GetTabState");
static_assert(offsetof(RHOverlayTabEntryWidget_GetTabState, ReturnValue) == 0x000000, "Member 'RHOverlayTabEntryWidget_GetTabState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabEntryWidget.GetViewInfo
// 0x0030 (0x0030 - 0x0000)
struct RHOverlayTabEntryWidget_GetViewInfo final
{
public:
	struct FOverlayTabViewRow                     ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabEntryWidget_GetViewInfo) == 0x000008, "Wrong alignment on RHOverlayTabEntryWidget_GetViewInfo");
static_assert(sizeof(RHOverlayTabEntryWidget_GetViewInfo) == 0x000030, "Wrong size on RHOverlayTabEntryWidget_GetViewInfo");
static_assert(offsetof(RHOverlayTabEntryWidget_GetViewInfo, ReturnValue) == 0x000000, "Member 'RHOverlayTabEntryWidget_GetViewInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.AddView
// 0x0038 (0x0038 - 0x0000)
struct RHOverlayTabHubBase_AddView final
{
public:
	class FName                                   ViewName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOverlayTabViewRow                     ViewInfo;                                          // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_AddView) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_AddView");
static_assert(sizeof(RHOverlayTabHubBase_AddView) == 0x000038, "Wrong size on RHOverlayTabHubBase_AddView");
static_assert(offsetof(RHOverlayTabHubBase_AddView, ViewName) == 0x000000, "Member 'RHOverlayTabHubBase_AddView::ViewName' has a wrong offset!");
static_assert(offsetof(RHOverlayTabHubBase_AddView, ViewInfo) == 0x000008, "Member 'RHOverlayTabHubBase_AddView::ViewInfo' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.ChangeView
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_ChangeView final
{
public:
	class FName                                   ViewName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_ChangeView) == 0x000004, "Wrong alignment on RHOverlayTabHubBase_ChangeView");
static_assert(sizeof(RHOverlayTabHubBase_ChangeView) == 0x000008, "Wrong size on RHOverlayTabHubBase_ChangeView");
static_assert(offsetof(RHOverlayTabHubBase_ChangeView, ViewName) == 0x000000, "Member 'RHOverlayTabHubBase_ChangeView::ViewName' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.GetLandingInfo
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_GetLandingInfo final
{
public:
	class URHOverlayTabHubRouteData*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_GetLandingInfo) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_GetLandingInfo");
static_assert(sizeof(RHOverlayTabHubBase_GetLandingInfo) == 0x000008, "Wrong size on RHOverlayTabHubBase_GetLandingInfo");
static_assert(offsetof(RHOverlayTabHubBase_GetLandingInfo, ReturnValue) == 0x000000, "Member 'RHOverlayTabHubBase_GetLandingInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.HandleActiveViewRequested
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_HandleActiveViewRequested final
{
public:
	class FName                                   ViewName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_HandleActiveViewRequested) == 0x000004, "Wrong alignment on RHOverlayTabHubBase_HandleActiveViewRequested");
static_assert(sizeof(RHOverlayTabHubBase_HandleActiveViewRequested) == 0x000008, "Wrong size on RHOverlayTabHubBase_HandleActiveViewRequested");
static_assert(offsetof(RHOverlayTabHubBase_HandleActiveViewRequested, ViewName) == 0x000000, "Member 'RHOverlayTabHubBase_HandleActiveViewRequested::ViewName' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.HandleFocusToViewRequested
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_HandleFocusToViewRequested final
{
public:
	class FName                                   ViewName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_HandleFocusToViewRequested) == 0x000004, "Wrong alignment on RHOverlayTabHubBase_HandleFocusToViewRequested");
static_assert(sizeof(RHOverlayTabHubBase_HandleFocusToViewRequested) == 0x000008, "Wrong size on RHOverlayTabHubBase_HandleFocusToViewRequested");
static_assert(offsetof(RHOverlayTabHubBase_HandleFocusToViewRequested, ViewName) == 0x000000, "Member 'RHOverlayTabHubBase_HandleFocusToViewRequested::ViewName' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.OnViewAdded
// 0x0048 (0x0048 - 0x0000)
struct RHOverlayTabHubBase_OnViewAdded final
{
public:
	class FName                                   ViewName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOverlayTabViewRow                     ViewInfo;                                          // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	class URHOverlayTabEntryWidget*               TabEntry;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              ViewWidget;                                        // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_OnViewAdded) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_OnViewAdded");
static_assert(sizeof(RHOverlayTabHubBase_OnViewAdded) == 0x000048, "Wrong size on RHOverlayTabHubBase_OnViewAdded");
static_assert(offsetof(RHOverlayTabHubBase_OnViewAdded, ViewName) == 0x000000, "Member 'RHOverlayTabHubBase_OnViewAdded::ViewName' has a wrong offset!");
static_assert(offsetof(RHOverlayTabHubBase_OnViewAdded, ViewInfo) == 0x000008, "Member 'RHOverlayTabHubBase_OnViewAdded::ViewInfo' has a wrong offset!");
static_assert(offsetof(RHOverlayTabHubBase_OnViewAdded, TabEntry) == 0x000038, "Member 'RHOverlayTabHubBase_OnViewAdded::TabEntry' has a wrong offset!");
static_assert(offsetof(RHOverlayTabHubBase_OnViewAdded, ViewWidget) == 0x000040, "Member 'RHOverlayTabHubBase_OnViewAdded::ViewWidget' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.SetFocusToView
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_SetFocusToView final
{
public:
	class URHWidget*                              InitialFocusedWidget;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_SetFocusToView) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_SetFocusToView");
static_assert(sizeof(RHOverlayTabHubBase_SetFocusToView) == 0x000008, "Wrong size on RHOverlayTabHubBase_SetFocusToView");
static_assert(offsetof(RHOverlayTabHubBase_SetFocusToView, InitialFocusedWidget) == 0x000000, "Member 'RHOverlayTabHubBase_SetFocusToView::InitialFocusedWidget' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.GetCurrentViewWidget
// 0x0008 (0x0008 - 0x0000)
struct RHOverlayTabHubBase_GetCurrentViewWidget final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_GetCurrentViewWidget) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_GetCurrentViewWidget");
static_assert(sizeof(RHOverlayTabHubBase_GetCurrentViewWidget) == 0x000008, "Wrong size on RHOverlayTabHubBase_GetCurrentViewWidget");
static_assert(offsetof(RHOverlayTabHubBase_GetCurrentViewWidget, ReturnValue) == 0x000000, "Member 'RHOverlayTabHubBase_GetCurrentViewWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.GetTabEntries
// 0x0010 (0x0010 - 0x0000)
struct RHOverlayTabHubBase_GetTabEntries final
{
public:
	TArray<class URHOverlayTabEntryWidget*>       ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_GetTabEntries) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_GetTabEntries");
static_assert(sizeof(RHOverlayTabHubBase_GetTabEntries) == 0x000010, "Wrong size on RHOverlayTabHubBase_GetTabEntries");
static_assert(offsetof(RHOverlayTabHubBase_GetTabEntries, ReturnValue) == 0x000000, "Member 'RHOverlayTabHubBase_GetTabEntries::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHOverlayTabHubBase.GetViewWidgets
// 0x0010 (0x0010 - 0x0000)
struct RHOverlayTabHubBase_GetViewWidgets final
{
public:
	TArray<class URHWidget*>                      ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHOverlayTabHubBase_GetViewWidgets) == 0x000008, "Wrong alignment on RHOverlayTabHubBase_GetViewWidgets");
static_assert(sizeof(RHOverlayTabHubBase_GetViewWidgets) == 0x000010, "Wrong size on RHOverlayTabHubBase_GetViewWidgets");
static_assert(offsetof(RHOverlayTabHubBase_GetViewWidgets, ReturnValue) == 0x000000, "Member 'RHOverlayTabHubBase_GetViewWidgets::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.BroadcastPartyInvitationError
// 0x0018 (0x0018 - 0x0000)
struct RHPartyManager_BroadcastPartyInvitationError final
{
public:
	class FText                                   InvitationError;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_BroadcastPartyInvitationError) == 0x000008, "Wrong alignment on RHPartyManager_BroadcastPartyInvitationError");
static_assert(sizeof(RHPartyManager_BroadcastPartyInvitationError) == 0x000018, "Wrong size on RHPartyManager_BroadcastPartyInvitationError");
static_assert(offsetof(RHPartyManager_BroadcastPartyInvitationError, InvitationError) == 0x000000, "Member 'RHPartyManager_BroadcastPartyInvitationError::InvitationError' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.DoesPartyHaveDeserter
// 0x0020 (0x0020 - 0x0000)
struct RHPartyManager_DoesPartyHaveDeserter final
{
public:
	struct FDateTime                              OutExperationTime;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutPlayerInfo;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_DoesPartyHaveDeserter) == 0x000008, "Wrong alignment on RHPartyManager_DoesPartyHaveDeserter");
static_assert(sizeof(RHPartyManager_DoesPartyHaveDeserter) == 0x000020, "Wrong size on RHPartyManager_DoesPartyHaveDeserter");
static_assert(offsetof(RHPartyManager_DoesPartyHaveDeserter, OutExperationTime) == 0x000000, "Member 'RHPartyManager_DoesPartyHaveDeserter::OutExperationTime' has a wrong offset!");
static_assert(offsetof(RHPartyManager_DoesPartyHaveDeserter, OutPlayerInfo) == 0x000008, "Member 'RHPartyManager_DoesPartyHaveDeserter::OutPlayerInfo' has a wrong offset!");
static_assert(offsetof(RHPartyManager_DoesPartyHaveDeserter, ReturnValue) == 0x000018, "Member 'RHPartyManager_DoesPartyHaveDeserter::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyDeserters
// 0x0050 (0x0050 - 0x0000)
struct RHPartyManager_GetPartyDeserters final
{
public:
	struct FRH_PartyDeserters                     ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyDeserters) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyDeserters");
static_assert(sizeof(RHPartyManager_GetPartyDeserters) == 0x000050, "Wrong size on RHPartyManager_GetPartyDeserters");
static_assert(offsetof(RHPartyManager_GetPartyDeserters, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartyDeserters::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyMemberByID
// 0x0040 (0x0040 - 0x0000)
struct RHPartyManager_GetPartyMemberByID final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_PartyMemberData                    ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyMemberByID) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyMemberByID");
static_assert(sizeof(RHPartyManager_GetPartyMemberByID) == 0x000040, "Wrong size on RHPartyManager_GetPartyMemberByID");
static_assert(offsetof(RHPartyManager_GetPartyMemberByID, PlayerId) == 0x000000, "Member 'RHPartyManager_GetPartyMemberByID::PlayerId' has a wrong offset!");
static_assert(offsetof(RHPartyManager_GetPartyMemberByID, ReturnValue) == 0x000010, "Member 'RHPartyManager_GetPartyMemberByID::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.HandlePartyMemberDeserterUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManager_HandlePartyMemberDeserterUpdated final
{
public:
	class URH_PlayerInfoSubobject*                deserterSubobject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_HandlePartyMemberDeserterUpdated) == 0x000008, "Wrong alignment on RHPartyManager_HandlePartyMemberDeserterUpdated");
static_assert(sizeof(RHPartyManager_HandlePartyMemberDeserterUpdated) == 0x000008, "Wrong size on RHPartyManager_HandlePartyMemberDeserterUpdated");
static_assert(offsetof(RHPartyManager_HandlePartyMemberDeserterUpdated, deserterSubobject) == 0x000000, "Member 'RHPartyManager_HandlePartyMemberDeserterUpdated::deserterSubobject' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.IsPlayerInParty
// 0x0014 (0x0014 - 0x0000)
struct RHPartyManager_IsPlayerInParty final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_IsPlayerInParty) == 0x000004, "Wrong alignment on RHPartyManager_IsPlayerInParty");
static_assert(sizeof(RHPartyManager_IsPlayerInParty) == 0x000014, "Wrong size on RHPartyManager_IsPlayerInParty");
static_assert(offsetof(RHPartyManager_IsPlayerInParty, PlayerId) == 0x000000, "Member 'RHPartyManager_IsPlayerInParty::PlayerId' has a wrong offset!");
static_assert(offsetof(RHPartyManager_IsPlayerInParty, ReturnValue) == 0x000010, "Member 'RHPartyManager_IsPlayerInParty::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.SetPartyInfo
// 0x0020 (0x0020 - 0x0000)
struct RHPartyManager_SetPartyInfo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_SetPartyInfo) == 0x000008, "Wrong alignment on RHPartyManager_SetPartyInfo");
static_assert(sizeof(RHPartyManager_SetPartyInfo) == 0x000020, "Wrong size on RHPartyManager_SetPartyInfo");
static_assert(offsetof(RHPartyManager_SetPartyInfo, Key) == 0x000000, "Member 'RHPartyManager_SetPartyInfo::Key' has a wrong offset!");
static_assert(offsetof(RHPartyManager_SetPartyInfo, Value) == 0x000010, "Member 'RHPartyManager_SetPartyInfo::Value' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.SetSelectedQueueId
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_SetSelectedQueueId final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_SetSelectedQueueId) == 0x000008, "Wrong alignment on RHPartyManager_SetSelectedQueueId");
static_assert(sizeof(RHPartyManager_SetSelectedQueueId) == 0x000010, "Wrong size on RHPartyManager_SetSelectedQueueId");
static_assert(offsetof(RHPartyManager_SetSelectedQueueId, QueueId) == 0x000000, "Member 'RHPartyManager_SetSelectedQueueId::QueueId' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.UIX_GiveMemberInvitePermission
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_UIX_GiveMemberInvitePermission final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_UIX_GiveMemberInvitePermission) == 0x000004, "Wrong alignment on RHPartyManager_UIX_GiveMemberInvitePermission");
static_assert(sizeof(RHPartyManager_UIX_GiveMemberInvitePermission) == 0x000010, "Wrong size on RHPartyManager_UIX_GiveMemberInvitePermission");
static_assert(offsetof(RHPartyManager_UIX_GiveMemberInvitePermission, PlayerId) == 0x000000, "Member 'RHPartyManager_UIX_GiveMemberInvitePermission::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.UIX_InviteMemberToParty
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManager_UIX_InviteMemberToParty final
{
public:
	class URH_RHFriendAndPlatformFriend*          Invitee;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_UIX_InviteMemberToParty) == 0x000008, "Wrong alignment on RHPartyManager_UIX_InviteMemberToParty");
static_assert(sizeof(RHPartyManager_UIX_InviteMemberToParty) == 0x000008, "Wrong size on RHPartyManager_UIX_InviteMemberToParty");
static_assert(offsetof(RHPartyManager_UIX_InviteMemberToParty, Invitee) == 0x000000, "Member 'RHPartyManager_UIX_InviteMemberToParty::Invitee' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.UIX_KickMemberFromParty
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_UIX_KickMemberFromParty final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_UIX_KickMemberFromParty) == 0x000004, "Wrong alignment on RHPartyManager_UIX_KickMemberFromParty");
static_assert(sizeof(RHPartyManager_UIX_KickMemberFromParty) == 0x000010, "Wrong size on RHPartyManager_UIX_KickMemberFromParty");
static_assert(offsetof(RHPartyManager_UIX_KickMemberFromParty, PlayerId) == 0x000000, "Member 'RHPartyManager_UIX_KickMemberFromParty::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.UIX_PromoteMemberToLeader
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_UIX_PromoteMemberToLeader final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_UIX_PromoteMemberToLeader) == 0x000004, "Wrong alignment on RHPartyManager_UIX_PromoteMemberToLeader");
static_assert(sizeof(RHPartyManager_UIX_PromoteMemberToLeader) == 0x000010, "Wrong size on RHPartyManager_UIX_PromoteMemberToLeader");
static_assert(offsetof(RHPartyManager_UIX_PromoteMemberToLeader, PlayerId) == 0x000000, "Member 'RHPartyManager_UIX_PromoteMemberToLeader::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.UIX_RevokeMemberInvitePermission
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_UIX_RevokeMemberInvitePermission final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_UIX_RevokeMemberInvitePermission) == 0x000004, "Wrong alignment on RHPartyManager_UIX_RevokeMemberInvitePermission");
static_assert(sizeof(RHPartyManager_UIX_RevokeMemberInvitePermission) == 0x000010, "Wrong size on RHPartyManager_UIX_RevokeMemberInvitePermission");
static_assert(offsetof(RHPartyManager_UIX_RevokeMemberInvitePermission, PlayerId) == 0x000000, "Member 'RHPartyManager_UIX_RevokeMemberInvitePermission::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.CheckPartyMemberIsLeader
// 0x0020 (0x0020 - 0x0000)
struct RHPartyManager_CheckPartyMemberIsLeader final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_JoinedSession*                      Session;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_CheckPartyMemberIsLeader) == 0x000008, "Wrong alignment on RHPartyManager_CheckPartyMemberIsLeader");
static_assert(sizeof(RHPartyManager_CheckPartyMemberIsLeader) == 0x000020, "Wrong size on RHPartyManager_CheckPartyMemberIsLeader");
static_assert(offsetof(RHPartyManager_CheckPartyMemberIsLeader, PlayerId) == 0x000000, "Member 'RHPartyManager_CheckPartyMemberIsLeader::PlayerId' has a wrong offset!");
static_assert(offsetof(RHPartyManager_CheckPartyMemberIsLeader, Session) == 0x000010, "Member 'RHPartyManager_CheckPartyMemberIsLeader::Session' has a wrong offset!");
static_assert(offsetof(RHPartyManager_CheckPartyMemberIsLeader, ReturnValue) == 0x000018, "Member 'RHPartyManager_CheckPartyMemberIsLeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetMaxPartyMembers
// 0x0004 (0x0004 - 0x0000)
struct RHPartyManager_GetMaxPartyMembers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetMaxPartyMembers) == 0x000004, "Wrong alignment on RHPartyManager_GetMaxPartyMembers");
static_assert(sizeof(RHPartyManager_GetMaxPartyMembers) == 0x000004, "Wrong size on RHPartyManager_GetMaxPartyMembers");
static_assert(offsetof(RHPartyManager_GetMaxPartyMembers, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetMaxPartyMembers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyInfo
// 0x0020 (0x0020 - 0x0000)
struct RHPartyManager_GetPartyInfo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyInfo) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyInfo");
static_assert(sizeof(RHPartyManager_GetPartyInfo) == 0x000020, "Wrong size on RHPartyManager_GetPartyInfo");
static_assert(offsetof(RHPartyManager_GetPartyInfo, Key) == 0x000000, "Member 'RHPartyManager_GetPartyInfo::Key' has a wrong offset!");
static_assert(offsetof(RHPartyManager_GetPartyInfo, ReturnValue) == 0x000010, "Member 'RHPartyManager_GetPartyInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyInviteMode
// 0x0001 (0x0001 - 0x0000)
struct RHPartyManager_GetPartyInviteMode final
{
public:
	ERH_PartyInviteRightsMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyInviteMode) == 0x000001, "Wrong alignment on RHPartyManager_GetPartyInviteMode");
static_assert(sizeof(RHPartyManager_GetPartyInviteMode) == 0x000001, "Wrong size on RHPartyManager_GetPartyInviteMode");
static_assert(offsetof(RHPartyManager_GetPartyInviteMode, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartyInviteMode::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyInviter
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManager_GetPartyInviter final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyInviter) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyInviter");
static_assert(sizeof(RHPartyManager_GetPartyInviter) == 0x000008, "Wrong size on RHPartyManager_GetPartyInviter");
static_assert(offsetof(RHPartyManager_GetPartyInviter, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartyInviter::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyLeader
// 0x0170 (0x0170 - 0x0000)
struct RHPartyManager_GetPartyLeader final
{
public:
	struct FRHAPI_SessionPlayer                   OutPlayer;                                         // 0x0000(0x0168)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_GetPartyLeader) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyLeader");
static_assert(sizeof(RHPartyManager_GetPartyLeader) == 0x000170, "Wrong size on RHPartyManager_GetPartyLeader");
static_assert(offsetof(RHPartyManager_GetPartyLeader, OutPlayer) == 0x000000, "Member 'RHPartyManager_GetPartyLeader::OutPlayer' has a wrong offset!");
static_assert(offsetof(RHPartyManager_GetPartyLeader, ReturnValue) == 0x000168, "Member 'RHPartyManager_GetPartyLeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RHPartyManager_GetPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyMemberCount) == 0x000004, "Wrong alignment on RHPartyManager_GetPartyMemberCount");
static_assert(sizeof(RHPartyManager_GetPartyMemberCount) == 0x000004, "Wrong size on RHPartyManager_GetPartyMemberCount");
static_assert(offsetof(RHPartyManager_GetPartyMemberCount, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartyMemberCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_GetPartyMembers final
{
public:
	TArray<struct FRH_PartyMemberData>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartyMembers) == 0x000008, "Wrong alignment on RHPartyManager_GetPartyMembers");
static_assert(sizeof(RHPartyManager_GetPartyMembers) == 0x000010, "Wrong size on RHPartyManager_GetPartyMembers");
static_assert(offsetof(RHPartyManager_GetPartyMembers, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartyMembers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetPartySession
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManager_GetPartySession final
{
public:
	class URH_JoinedSession*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetPartySession) == 0x000008, "Wrong alignment on RHPartyManager_GetPartySession");
static_assert(sizeof(RHPartyManager_GetPartySession) == 0x000008, "Wrong size on RHPartyManager_GetPartySession");
static_assert(offsetof(RHPartyManager_GetPartySession, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetPartySession::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetReadyPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RHPartyManager_GetReadyPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetReadyPartyMemberCount) == 0x000004, "Wrong alignment on RHPartyManager_GetReadyPartyMemberCount");
static_assert(sizeof(RHPartyManager_GetReadyPartyMemberCount) == 0x000004, "Wrong size on RHPartyManager_GetReadyPartyMemberCount");
static_assert(offsetof(RHPartyManager_GetReadyPartyMemberCount, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetReadyPartyMemberCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetRHSessionType
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_GetRHSessionType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetRHSessionType) == 0x000008, "Wrong alignment on RHPartyManager_GetRHSessionType");
static_assert(sizeof(RHPartyManager_GetRHSessionType) == 0x000010, "Wrong size on RHPartyManager_GetRHSessionType");
static_assert(offsetof(RHPartyManager_GetRHSessionType, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetRHSessionType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.GetSelectedQueueId
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_GetSelectedQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_GetSelectedQueueId) == 0x000008, "Wrong alignment on RHPartyManager_GetSelectedQueueId");
static_assert(sizeof(RHPartyManager_GetSelectedQueueId) == 0x000010, "Wrong size on RHPartyManager_GetSelectedQueueId");
static_assert(offsetof(RHPartyManager_GetSelectedQueueId, ReturnValue) == 0x000000, "Member 'RHPartyManager_GetSelectedQueueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.HasInvitePermission
// 0x0014 (0x0014 - 0x0000)
struct RHPartyManager_HasInvitePermission final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_HasInvitePermission) == 0x000004, "Wrong alignment on RHPartyManager_HasInvitePermission");
static_assert(sizeof(RHPartyManager_HasInvitePermission) == 0x000014, "Wrong size on RHPartyManager_HasInvitePermission");
static_assert(offsetof(RHPartyManager_HasInvitePermission, PlayerId) == 0x000000, "Member 'RHPartyManager_HasInvitePermission::PlayerId' has a wrong offset!");
static_assert(offsetof(RHPartyManager_HasInvitePermission, ReturnValue) == 0x000010, "Member 'RHPartyManager_HasInvitePermission::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.IsInParty
// 0x0001 (0x0001 - 0x0000)
struct RHPartyManager_IsInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_IsInParty) == 0x000001, "Wrong alignment on RHPartyManager_IsInParty");
static_assert(sizeof(RHPartyManager_IsInParty) == 0x000001, "Wrong size on RHPartyManager_IsInParty");
static_assert(offsetof(RHPartyManager_IsInParty, ReturnValue) == 0x000000, "Member 'RHPartyManager_IsInParty::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.IsLeader
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManager_IsLeader final
{
public:
	class URH_JoinedSession*                      Session;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPartyManager_IsLeader) == 0x000008, "Wrong alignment on RHPartyManager_IsLeader");
static_assert(sizeof(RHPartyManager_IsLeader) == 0x000010, "Wrong size on RHPartyManager_IsLeader");
static_assert(offsetof(RHPartyManager_IsLeader, Session) == 0x000000, "Member 'RHPartyManager_IsLeader::Session' has a wrong offset!");
static_assert(offsetof(RHPartyManager_IsLeader, ReturnValue) == 0x000008, "Member 'RHPartyManager_IsLeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManager.IsPartyMaxed
// 0x0001 (0x0001 - 0x0000)
struct RHPartyManager_IsPartyMaxed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManager_IsPartyMaxed) == 0x000001, "Wrong alignment on RHPartyManager_IsPartyMaxed");
static_assert(sizeof(RHPartyManager_IsPartyMaxed) == 0x000001, "Wrong size on RHPartyManager_IsPartyMaxed");
static_assert(offsetof(RHPartyManager_IsPartyMaxed, ReturnValue) == 0x000000, "Member 'RHPartyManager_IsPartyMaxed::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.ApplyPartyData
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManagerWidgetBase_ApplyPartyData final
{
public:
	TArray<struct FRH_PartyMemberData>            PartyMembers;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_ApplyPartyData) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_ApplyPartyData");
static_assert(sizeof(RHPartyManagerWidgetBase_ApplyPartyData) == 0x000010, "Wrong size on RHPartyManagerWidgetBase_ApplyPartyData");
static_assert(offsetof(RHPartyManagerWidgetBase_ApplyPartyData, PartyMembers) == 0x000000, "Member 'RHPartyManagerWidgetBase_ApplyPartyData::PartyMembers' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.GetCachedDisplayedPartyMembers
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers final
{
public:
	TArray<struct FRH_PartyMemberData>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers");
static_assert(sizeof(RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers) == 0x000010, "Wrong size on RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers");
static_assert(offsetof(RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers, ReturnValue) == 0x000000, "Member 'RHPartyManagerWidgetBase_GetCachedDisplayedPartyMembers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManagerWidgetBase_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_GetPartyManager) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_GetPartyManager");
static_assert(sizeof(RHPartyManagerWidgetBase_GetPartyManager) == 0x000008, "Wrong size on RHPartyManagerWidgetBase_GetPartyManager");
static_assert(offsetof(RHPartyManagerWidgetBase_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHPartyManagerWidgetBase_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.GetSuggestedInvite
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManagerWidgetBase_GetSuggestedInvite final
{
public:
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_GetSuggestedInvite) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_GetSuggestedInvite");
static_assert(sizeof(RHPartyManagerWidgetBase_GetSuggestedInvite) == 0x000008, "Wrong size on RHPartyManagerWidgetBase_GetSuggestedInvite");
static_assert(offsetof(RHPartyManagerWidgetBase_GetSuggestedInvite, ReturnValue) == 0x000000, "Member 'RHPartyManagerWidgetBase_GetSuggestedInvite::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.HandlePartyMemberDataUpdated
// 0x0030 (0x0030 - 0x0000)
struct RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated final
{
public:
	struct FRH_PartyMemberData                    MemberData;                                        // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated");
static_assert(sizeof(RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated) == 0x000030, "Wrong size on RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated");
static_assert(offsetof(RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated, MemberData) == 0x000000, "Member 'RHPartyManagerWidgetBase_HandlePartyMemberDataUpdated::MemberData' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.HandlePartyMemberUpdateById
// 0x0010 (0x0010 - 0x0000)
struct RHPartyManagerWidgetBase_HandlePartyMemberUpdateById final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateById) == 0x000004, "Wrong alignment on RHPartyManagerWidgetBase_HandlePartyMemberUpdateById");
static_assert(sizeof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateById) == 0x000010, "Wrong size on RHPartyManagerWidgetBase_HandlePartyMemberUpdateById");
static_assert(offsetof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateById, PlayerId) == 0x000000, "Member 'RHPartyManagerWidgetBase_HandlePartyMemberUpdateById::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.HandlePartyMemberUpdateByInfo
// 0x0008 (0x0008 - 0x0000)
struct RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo");
static_assert(sizeof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo) == 0x000008, "Wrong size on RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo");
static_assert(offsetof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo, PlayerInfo) == 0x000000, "Member 'RHPartyManagerWidgetBase_HandlePartyMemberUpdateByInfo::PlayerInfo' has a wrong offset!");

// Function RallyHereStart.RHPartyManagerWidgetBase.HandlePartyMemberUpdateByName
// 0x0018 (0x0018 - 0x0000)
struct RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName) == 0x000008, "Wrong alignment on RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName");
static_assert(sizeof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName) == 0x000018, "Wrong size on RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName");
static_assert(offsetof(RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName, PlayerName) == 0x000000, "Member 'RHPartyManagerWidgetBase_HandlePartyMemberUpdateByName::PlayerName' has a wrong offset!");

// Function RallyHereStart.RHPlayerCardModuleBase.OnRHFriendSet
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerCardModuleBase_OnRHFriendSet final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerCardModuleBase_OnRHFriendSet) == 0x000008, "Wrong alignment on RHPlayerCardModuleBase_OnRHFriendSet");
static_assert(sizeof(RHPlayerCardModuleBase_OnRHFriendSet) == 0x000008, "Wrong size on RHPlayerCardModuleBase_OnRHFriendSet");
static_assert(offsetof(RHPlayerCardModuleBase_OnRHFriendSet, Friend) == 0x000000, "Member 'RHPlayerCardModuleBase_OnRHFriendSet::Friend' has a wrong offset!");

// Function RallyHereStart.RHPlayerCardModuleBase.View_SetFriend
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerCardModuleBase_View_SetFriend final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerCardModuleBase_View_SetFriend) == 0x000008, "Wrong alignment on RHPlayerCardModuleBase_View_SetFriend");
static_assert(sizeof(RHPlayerCardModuleBase_View_SetFriend) == 0x000008, "Wrong size on RHPlayerCardModuleBase_View_SetFriend");
static_assert(offsetof(RHPlayerCardModuleBase_View_SetFriend, Friend) == 0x000000, "Member 'RHPlayerCardModuleBase_View_SetFriend::Friend' has a wrong offset!");

// Function RallyHereStart.RHPlayerController.ClientUpdateSonyMatchData
// 0x0020 (0x0020 - 0x0000)
struct RHPlayerController_ClientUpdateSonyMatchData final
{
public:
	class FString                                 InMatchId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InActivityId;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerController_ClientUpdateSonyMatchData) == 0x000008, "Wrong alignment on RHPlayerController_ClientUpdateSonyMatchData");
static_assert(sizeof(RHPlayerController_ClientUpdateSonyMatchData) == 0x000020, "Wrong size on RHPlayerController_ClientUpdateSonyMatchData");
static_assert(offsetof(RHPlayerController_ClientUpdateSonyMatchData, InMatchId) == 0x000000, "Member 'RHPlayerController_ClientUpdateSonyMatchData::InMatchId' has a wrong offset!");
static_assert(offsetof(RHPlayerController_ClientUpdateSonyMatchData, InActivityId) == 0x000010, "Member 'RHPlayerController_ClientUpdateSonyMatchData::InActivityId' has a wrong offset!");

// Function RallyHereStart.RHPlayerController.ServerReportPlayer
// 0x0024 (0x0024 - 0x0000)
struct RHPlayerController_ServerReportPlayer final
{
public:
	struct FGuid                                  ReporterGuid;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  ReportedGuid;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReportPlayerReason                           ReportReason;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPlayerController_ServerReportPlayer) == 0x000004, "Wrong alignment on RHPlayerController_ServerReportPlayer");
static_assert(sizeof(RHPlayerController_ServerReportPlayer) == 0x000024, "Wrong size on RHPlayerController_ServerReportPlayer");
static_assert(offsetof(RHPlayerController_ServerReportPlayer, ReporterGuid) == 0x000000, "Member 'RHPlayerController_ServerReportPlayer::ReporterGuid' has a wrong offset!");
static_assert(offsetof(RHPlayerController_ServerReportPlayer, ReportedGuid) == 0x000010, "Member 'RHPlayerController_ServerReportPlayer::ReportedGuid' has a wrong offset!");
static_assert(offsetof(RHPlayerController_ServerReportPlayer, ReportReason) == 0x000020, "Member 'RHPlayerController_ServerReportPlayer::ReportReason' has a wrong offset!");

// Function RallyHereStart.RHPlayerController.ServerUpdateSonyMatchData
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerController_ServerUpdateSonyMatchData final
{
public:
	class FString                                 InMatchId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerController_ServerUpdateSonyMatchData) == 0x000008, "Wrong alignment on RHPlayerController_ServerUpdateSonyMatchData");
static_assert(sizeof(RHPlayerController_ServerUpdateSonyMatchData) == 0x000010, "Wrong size on RHPlayerController_ServerUpdateSonyMatchData");
static_assert(offsetof(RHPlayerController_ServerUpdateSonyMatchData, InMatchId) == 0x000000, "Member 'RHPlayerController_ServerUpdateSonyMatchData::InMatchId' has a wrong offset!");

// Function RallyHereStart.RHPlayerController.ServerUpdateSonyMatchOwnerEligibility
// 0x0001 (0x0001 - 0x0000)
struct RHPlayerController_ServerUpdateSonyMatchOwnerEligibility final
{
public:
	bool                                          bIsEligible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerController_ServerUpdateSonyMatchOwnerEligibility) == 0x000001, "Wrong alignment on RHPlayerController_ServerUpdateSonyMatchOwnerEligibility");
static_assert(sizeof(RHPlayerController_ServerUpdateSonyMatchOwnerEligibility) == 0x000001, "Wrong size on RHPlayerController_ServerUpdateSonyMatchOwnerEligibility");
static_assert(offsetof(RHPlayerController_ServerUpdateSonyMatchOwnerEligibility, bIsEligible) == 0x000000, "Member 'RHPlayerController_ServerUpdateSonyMatchOwnerEligibility::bIsEligible' has a wrong offset!");

// Function RallyHereStart.RHPlayerCosmeticWidget.GetItemsForSlot
// 0x0014 (0x0014 - 0x0000)
struct RHPlayerCosmeticWidget_GetItemsForSlot final
{
public:
	TDelegate<void(const struct FRHProfileItemsWrapper& ItemWrapper)> Event;                         // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHLoadoutSlotTypes                           SlotType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPlayerCosmeticWidget_GetItemsForSlot) == 0x000004, "Wrong alignment on RHPlayerCosmeticWidget_GetItemsForSlot");
static_assert(sizeof(RHPlayerCosmeticWidget_GetItemsForSlot) == 0x000014, "Wrong size on RHPlayerCosmeticWidget_GetItemsForSlot");
static_assert(offsetof(RHPlayerCosmeticWidget_GetItemsForSlot, Event) == 0x000000, "Member 'RHPlayerCosmeticWidget_GetItemsForSlot::Event' has a wrong offset!");
static_assert(offsetof(RHPlayerCosmeticWidget_GetItemsForSlot, SlotType) == 0x000010, "Member 'RHPlayerCosmeticWidget_GetItemsForSlot::SlotType' has a wrong offset!");
static_assert(offsetof(RHPlayerCosmeticWidget_GetItemsForSlot, ReturnValue) == 0x000011, "Member 'RHPlayerCosmeticWidget_GetItemsForSlot::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.BLUEPRINT_GetPlayerLevel
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel final
{
public:
	TDelegate<void(int32 InstanceCount)>          Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel) == 0x000004, "Wrong alignment on RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel");
static_assert(sizeof(RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel) == 0x000010, "Wrong size on RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel");
static_assert(offsetof(RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel, Delegate) == 0x000000, "Member 'RHPlayerInfoDisplay_BLUEPRINT_GetPlayerLevel::Delegate' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.GetPlayerPlatform
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerInfoDisplay_GetPlayerPlatform final
{
public:
	TDelegate<void(ERHPlatformDisplayType PlatformType)> Delegate;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_GetPlayerPlatform) == 0x000004, "Wrong alignment on RHPlayerInfoDisplay_GetPlayerPlatform");
static_assert(sizeof(RHPlayerInfoDisplay_GetPlayerPlatform) == 0x000010, "Wrong size on RHPlayerInfoDisplay_GetPlayerPlatform");
static_assert(offsetof(RHPlayerInfoDisplay_GetPlayerPlatform, Delegate) == 0x000000, "Member 'RHPlayerInfoDisplay_GetPlayerPlatform::Delegate' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.OnPartyMemberChanged
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerInfoDisplay_OnPartyMemberChanged final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_OnPartyMemberChanged) == 0x000004, "Wrong alignment on RHPlayerInfoDisplay_OnPartyMemberChanged");
static_assert(sizeof(RHPlayerInfoDisplay_OnPartyMemberChanged) == 0x000010, "Wrong size on RHPlayerInfoDisplay_OnPartyMemberChanged");
static_assert(offsetof(RHPlayerInfoDisplay_OnPartyMemberChanged, PlayerUuid) == 0x000000, "Member 'RHPlayerInfoDisplay_OnPartyMemberChanged::PlayerUuid' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.OnPlayerPresenceUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerInfoDisplay_OnPlayerPresenceUpdated final
{
public:
	class URH_PlayerInfoSubobject*                PlayerPresence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_OnPlayerPresenceUpdated) == 0x000008, "Wrong alignment on RHPlayerInfoDisplay_OnPlayerPresenceUpdated");
static_assert(sizeof(RHPlayerInfoDisplay_OnPlayerPresenceUpdated) == 0x000008, "Wrong size on RHPlayerInfoDisplay_OnPlayerPresenceUpdated");
static_assert(offsetof(RHPlayerInfoDisplay_OnPlayerPresenceUpdated, PlayerPresence) == 0x000000, "Member 'RHPlayerInfoDisplay_OnPlayerPresenceUpdated::PlayerPresence' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.RHUpdateFriends
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerInfoDisplay_RHUpdateFriends final
{
public:
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_RHUpdateFriends) == 0x000008, "Wrong alignment on RHPlayerInfoDisplay_RHUpdateFriends");
static_assert(sizeof(RHPlayerInfoDisplay_RHUpdateFriends) == 0x000008, "Wrong size on RHPlayerInfoDisplay_RHUpdateFriends");
static_assert(offsetof(RHPlayerInfoDisplay_RHUpdateFriends, Friend) == 0x000000, "Member 'RHPlayerInfoDisplay_RHUpdateFriends::Friend' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.SetPlayerInfo
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerInfoDisplay_SetPlayerInfo final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_SetPlayerInfo) == 0x000008, "Wrong alignment on RHPlayerInfoDisplay_SetPlayerInfo");
static_assert(sizeof(RHPlayerInfoDisplay_SetPlayerInfo) == 0x000008, "Wrong size on RHPlayerInfoDisplay_SetPlayerInfo");
static_assert(offsetof(RHPlayerInfoDisplay_SetPlayerInfo, PlayerInfo) == 0x000000, "Member 'RHPlayerInfoDisplay_SetPlayerInfo::PlayerInfo' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.UpdateVoiceChatDisplay
// 0x0003 (0x0003 - 0x0000)
struct RHPlayerInfoDisplay_UpdateVoiceChatDisplay final
{
public:
	bool                                          bInVoiceChannel;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_UpdateVoiceChatDisplay) == 0x000001, "Wrong alignment on RHPlayerInfoDisplay_UpdateVoiceChatDisplay");
static_assert(sizeof(RHPlayerInfoDisplay_UpdateVoiceChatDisplay) == 0x000003, "Wrong size on RHPlayerInfoDisplay_UpdateVoiceChatDisplay");
static_assert(offsetof(RHPlayerInfoDisplay_UpdateVoiceChatDisplay, bInVoiceChannel) == 0x000000, "Member 'RHPlayerInfoDisplay_UpdateVoiceChatDisplay::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(RHPlayerInfoDisplay_UpdateVoiceChatDisplay, bIsTalking) == 0x000001, "Member 'RHPlayerInfoDisplay_UpdateVoiceChatDisplay::bIsTalking' has a wrong offset!");
static_assert(offsetof(RHPlayerInfoDisplay_UpdateVoiceChatDisplay, bIsMuted) == 0x000002, "Member 'RHPlayerInfoDisplay_UpdateVoiceChatDisplay::bIsMuted' has a wrong offset!");

// Function RallyHereStart.RHPlayerInfoDisplay.GetPlayerXpProgression
// 0x0008 (0x0008 - 0x0000)
struct RHPlayerInfoDisplay_GetPlayerXpProgression final
{
public:
	class URHProgression*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInfoDisplay_GetPlayerXpProgression) == 0x000008, "Wrong alignment on RHPlayerInfoDisplay_GetPlayerXpProgression");
static_assert(sizeof(RHPlayerInfoDisplay_GetPlayerXpProgression) == 0x000008, "Wrong size on RHPlayerInfoDisplay_GetPlayerXpProgression");
static_assert(offsetof(RHPlayerInfoDisplay_GetPlayerXpProgression, ReturnValue) == 0x000000, "Member 'RHPlayerInfoDisplay_GetPlayerXpProgression::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPlayerInput.DoesInputTypeSupportChords
// 0x0002 (0x0002 - 0x0000)
struct RHPlayerInput_DoesInputTypeSupportChords final
{
public:
	EInputType                                    InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerInput_DoesInputTypeSupportChords) == 0x000001, "Wrong alignment on RHPlayerInput_DoesInputTypeSupportChords");
static_assert(sizeof(RHPlayerInput_DoesInputTypeSupportChords) == 0x000002, "Wrong size on RHPlayerInput_DoesInputTypeSupportChords");
static_assert(offsetof(RHPlayerInput_DoesInputTypeSupportChords, InputType) == 0x000000, "Member 'RHPlayerInput_DoesInputTypeSupportChords::InputType' has a wrong offset!");
static_assert(offsetof(RHPlayerInput_DoesInputTypeSupportChords, ReturnValue) == 0x000001, "Member 'RHPlayerInput_DoesInputTypeSupportChords::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPlayerState.GetPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerState_GetPlayerInfo final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerState_GetPlayerInfo) == 0x000008, "Wrong alignment on RHPlayerState_GetPlayerInfo");
static_assert(sizeof(RHPlayerState_GetPlayerInfo) == 0x000010, "Wrong size on RHPlayerState_GetPlayerInfo");
static_assert(offsetof(RHPlayerState_GetPlayerInfo, HUD) == 0x000000, "Member 'RHPlayerState_GetPlayerInfo::HUD' has a wrong offset!");
static_assert(offsetof(RHPlayerState_GetPlayerInfo, ReturnValue) == 0x000008, "Member 'RHPlayerState_GetPlayerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPlayerState.GetRHPlayerId
// 0x0004 (0x0004 - 0x0000)
struct RHPlayerState_GetRHPlayerId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerState_GetRHPlayerId) == 0x000004, "Wrong alignment on RHPlayerState_GetRHPlayerId");
static_assert(sizeof(RHPlayerState_GetRHPlayerId) == 0x000004, "Wrong size on RHPlayerState_GetRHPlayerId");
static_assert(offsetof(RHPlayerState_GetRHPlayerId, ReturnValue) == 0x000000, "Member 'RHPlayerState_GetRHPlayerId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPlayerState.GetRHPlayerUuid
// 0x0010 (0x0010 - 0x0000)
struct RHPlayerState_GetRHPlayerUuid final
{
public:
	struct FGuid                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPlayerState_GetRHPlayerUuid) == 0x000004, "Wrong alignment on RHPlayerState_GetRHPlayerUuid");
static_assert(sizeof(RHPlayerState_GetRHPlayerUuid) == 0x000010, "Wrong size on RHPlayerState_GetRHPlayerUuid");
static_assert(offsetof(RHPlayerState_GetRHPlayerUuid, ReturnValue) == 0x000000, "Member 'RHPlayerState_GetRHPlayerUuid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPopupManager.AddPopup
// 0x0110 (0x0110 - 0x0000)
struct RHPopupManager_AddPopup final
{
public:
	struct FRHPopupConfig                         popupData;                                         // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHPopupManager_AddPopup) == 0x000008, "Wrong alignment on RHPopupManager_AddPopup");
static_assert(sizeof(RHPopupManager_AddPopup) == 0x000110, "Wrong size on RHPopupManager_AddPopup");
static_assert(offsetof(RHPopupManager_AddPopup, popupData) == 0x000000, "Member 'RHPopupManager_AddPopup::popupData' has a wrong offset!");
static_assert(offsetof(RHPopupManager_AddPopup, ReturnValue) == 0x000108, "Member 'RHPopupManager_AddPopup::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPopupManager.OnPopupResponse
// 0x0008 (0x0008 - 0x0000)
struct RHPopupManager_OnPopupResponse final
{
public:
	int32                                         nPopupId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         nResponseIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPopupManager_OnPopupResponse) == 0x000004, "Wrong alignment on RHPopupManager_OnPopupResponse");
static_assert(sizeof(RHPopupManager_OnPopupResponse) == 0x000008, "Wrong size on RHPopupManager_OnPopupResponse");
static_assert(offsetof(RHPopupManager_OnPopupResponse, nPopupId) == 0x000000, "Member 'RHPopupManager_OnPopupResponse::nPopupId' has a wrong offset!");
static_assert(offsetof(RHPopupManager_OnPopupResponse, nResponseIndex) == 0x000004, "Member 'RHPopupManager_OnPopupResponse::nResponseIndex' has a wrong offset!");

// Function RallyHereStart.RHPopupManager.RemovePopup
// 0x0004 (0x0004 - 0x0000)
struct RHPopupManager_RemovePopup final
{
public:
	int32                                         PopupId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPopupManager_RemovePopup) == 0x000004, "Wrong alignment on RHPopupManager_RemovePopup");
static_assert(sizeof(RHPopupManager_RemovePopup) == 0x000004, "Wrong size on RHPopupManager_RemovePopup");
static_assert(offsetof(RHPopupManager_RemovePopup, PopupId) == 0x000000, "Member 'RHPopupManager_RemovePopup::PopupId' has a wrong offset!");

// Function RallyHereStart.RHPopupManager.ShowPopup
// 0x0108 (0x0108 - 0x0000)
struct RHPopupManager_ShowPopup final
{
public:
	struct FRHPopupConfig                         popupData;                                         // 0x0000(0x0108)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPopupManager_ShowPopup) == 0x000008, "Wrong alignment on RHPopupManager_ShowPopup");
static_assert(sizeof(RHPopupManager_ShowPopup) == 0x000108, "Wrong size on RHPopupManager_ShowPopup");
static_assert(offsetof(RHPopupManager_ShowPopup, popupData) == 0x000000, "Member 'RHPopupManager_ShowPopup::popupData' has a wrong offset!");

// Function RallyHereStart.RHPortalOffersWidget.GetPortalOfferItems
// 0x0010 (0x0010 - 0x0000)
struct RHPortalOffersWidget_GetPortalOfferItems final
{
public:
	TArray<class URHStoreItem*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPortalOffersWidget_GetPortalOfferItems) == 0x000008, "Wrong alignment on RHPortalOffersWidget_GetPortalOfferItems");
static_assert(sizeof(RHPortalOffersWidget_GetPortalOfferItems) == 0x000010, "Wrong size on RHPortalOffersWidget_GetPortalOfferItems");
static_assert(offsetof(RHPortalOffersWidget_GetPortalOfferItems, ReturnValue) == 0x000000, "Member 'RHPortalOffersWidget_GetPortalOfferItems::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPriceTag.SetPriceTag
// 0x0010 (0x0010 - 0x0000)
struct RHPriceTag_SetPriceTag final
{
public:
	class URHStoreItemPrice*                      StoreItemPrice;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           StoreItem;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPriceTag_SetPriceTag) == 0x000008, "Wrong alignment on RHPriceTag_SetPriceTag");
static_assert(sizeof(RHPriceTag_SetPriceTag) == 0x000010, "Wrong size on RHPriceTag_SetPriceTag");
static_assert(offsetof(RHPriceTag_SetPriceTag, StoreItemPrice) == 0x000000, "Member 'RHPriceTag_SetPriceTag::StoreItemPrice' has a wrong offset!");
static_assert(offsetof(RHPriceTag_SetPriceTag, StoreItem) == 0x000008, "Member 'RHPriceTag_SetPriceTag::StoreItem' has a wrong offset!");

// Function RallyHereStart.RHProgression.GetProgressionLevel
// 0x0010 (0x0010 - 0x0000)
struct RHProgression_GetProgressionLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressAmount;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgression_GetProgressionLevel) == 0x000008, "Wrong alignment on RHProgression_GetProgressionLevel");
static_assert(sizeof(RHProgression_GetProgressionLevel) == 0x000010, "Wrong size on RHProgression_GetProgressionLevel");
static_assert(offsetof(RHProgression_GetProgressionLevel, WorldContextObject) == 0x000000, "Member 'RHProgression_GetProgressionLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHProgression_GetProgressionLevel, ProgressAmount) == 0x000008, "Member 'RHProgression_GetProgressionLevel::ProgressAmount' has a wrong offset!");
static_assert(offsetof(RHProgression_GetProgressionLevel, ReturnValue) == 0x00000C, "Member 'RHProgression_GetProgressionLevel::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHProgression.GetProgressionLevelPercent
// 0x0010 (0x0010 - 0x0000)
struct RHProgression_GetProgressionLevelPercent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressAmount;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHProgression_GetProgressionLevelPercent) == 0x000008, "Wrong alignment on RHProgression_GetProgressionLevelPercent");
static_assert(sizeof(RHProgression_GetProgressionLevelPercent) == 0x000010, "Wrong size on RHProgression_GetProgressionLevelPercent");
static_assert(offsetof(RHProgression_GetProgressionLevelPercent, WorldContextObject) == 0x000000, "Member 'RHProgression_GetProgressionLevelPercent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHProgression_GetProgressionLevelPercent, ProgressAmount) == 0x000008, "Member 'RHProgression_GetProgressionLevelPercent::ProgressAmount' has a wrong offset!");
static_assert(offsetof(RHProgression_GetProgressionLevelPercent, ReturnValue) == 0x00000C, "Member 'RHProgression_GetProgressionLevelPercent::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHPurchaseConfirmationWidget.BLUEPRINT_CanChangePurchaseQuantity
// 0x0014 (0x0014 - 0x0000)
struct RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity final
{
public:
	int32                                         QuantityChangeAmount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity) == 0x000004, "Wrong alignment on RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity");
static_assert(sizeof(RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity) == 0x000014, "Wrong size on RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity");
static_assert(offsetof(RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity, QuantityChangeAmount) == 0x000000, "Member 'RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity::QuantityChangeAmount' has a wrong offset!");
static_assert(offsetof(RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity, Delegate) == 0x000004, "Member 'RHPurchaseConfirmationWidget_BLUEPRINT_CanChangePurchaseQuantity::Delegate' has a wrong offset!");

// Function RallyHereStart.RHPurchaseConfirmationWidget.BLUEPRINT_TryChangePurchaseQuantity
// 0x0014 (0x0014 - 0x0000)
struct RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity final
{
public:
	int32                                         QuantityChangeAmount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity) == 0x000004, "Wrong alignment on RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity");
static_assert(sizeof(RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity) == 0x000014, "Wrong size on RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity");
static_assert(offsetof(RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity, QuantityChangeAmount) == 0x000000, "Member 'RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity::QuantityChangeAmount' has a wrong offset!");
static_assert(offsetof(RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity, Delegate) == 0x000004, "Member 'RHPurchaseConfirmationWidget_BLUEPRINT_TryChangePurchaseQuantity::Delegate' has a wrong offset!");

// Function RallyHereStart.RHPurchaseConfirmationWidget.OnPurchaseComplete
// 0x0001 (0x0001 - 0x0000)
struct RHPurchaseConfirmationWidget_OnPurchaseComplete final
{
public:
	bool                                          bCompletedPurchase;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPurchaseConfirmationWidget_OnPurchaseComplete) == 0x000001, "Wrong alignment on RHPurchaseConfirmationWidget_OnPurchaseComplete");
static_assert(sizeof(RHPurchaseConfirmationWidget_OnPurchaseComplete) == 0x000001, "Wrong size on RHPurchaseConfirmationWidget_OnPurchaseComplete");
static_assert(offsetof(RHPurchaseConfirmationWidget_OnPurchaseComplete, bCompletedPurchase) == 0x000000, "Member 'RHPurchaseConfirmationWidget_OnPurchaseComplete::bCompletedPurchase' has a wrong offset!");

// Function RallyHereStart.RHPurchaseModal.HandleShowPurchaseModal
// 0x0010 (0x0010 - 0x0000)
struct RHPurchaseModal_HandleShowPurchaseModal final
{
public:
	class URHStoreItem*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItemPrice*                      Price;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPurchaseModal_HandleShowPurchaseModal) == 0x000008, "Wrong alignment on RHPurchaseModal_HandleShowPurchaseModal");
static_assert(sizeof(RHPurchaseModal_HandleShowPurchaseModal) == 0x000010, "Wrong size on RHPurchaseModal_HandleShowPurchaseModal");
static_assert(offsetof(RHPurchaseModal_HandleShowPurchaseModal, Item) == 0x000000, "Member 'RHPurchaseModal_HandleShowPurchaseModal::Item' has a wrong offset!");
static_assert(offsetof(RHPurchaseModal_HandleShowPurchaseModal, Price) == 0x000008, "Member 'RHPurchaseModal_HandleShowPurchaseModal::Price' has a wrong offset!");

// Function RallyHereStart.RHPushNotificationSubsystem.HandleJsonReady
// 0x0010 (0x0010 - 0x0000)
struct RHPushNotificationSubsystem_HandleJsonReady final
{
public:
	class FString                                 JsonName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPushNotificationSubsystem_HandleJsonReady) == 0x000008, "Wrong alignment on RHPushNotificationSubsystem_HandleJsonReady");
static_assert(sizeof(RHPushNotificationSubsystem_HandleJsonReady) == 0x000010, "Wrong size on RHPushNotificationSubsystem_HandleJsonReady");
static_assert(offsetof(RHPushNotificationSubsystem_HandleJsonReady, JsonName) == 0x000000, "Member 'RHPushNotificationSubsystem_HandleJsonReady::JsonName' has a wrong offset!");

// Function RallyHereStart.RHPushNotificationSubsystem.HandleRegisteredForRemoteNotifications
// 0x0010 (0x0010 - 0x0000)
struct RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications final
{
public:
	TArray<uint8>                                 InToken;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications) == 0x000008, "Wrong alignment on RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications");
static_assert(sizeof(RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications) == 0x000010, "Wrong size on RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications");
static_assert(offsetof(RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications, InToken) == 0x000000, "Member 'RHPushNotificationSubsystem_HandleRegisteredForRemoteNotifications::InToken' has a wrong offset!");

// Function RallyHereStart.RHPushNotificationSubsystem.HandleRegisteredForUserNotifications
// 0x0004 (0x0004 - 0x0000)
struct RHPushNotificationSubsystem_HandleRegisteredForUserNotifications final
{
public:
	int32                                         Types;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPushNotificationSubsystem_HandleRegisteredForUserNotifications) == 0x000004, "Wrong alignment on RHPushNotificationSubsystem_HandleRegisteredForUserNotifications");
static_assert(sizeof(RHPushNotificationSubsystem_HandleRegisteredForUserNotifications) == 0x000004, "Wrong size on RHPushNotificationSubsystem_HandleRegisteredForUserNotifications");
static_assert(offsetof(RHPushNotificationSubsystem_HandleRegisteredForUserNotifications, Types) == 0x000000, "Member 'RHPushNotificationSubsystem_HandleRegisteredForUserNotifications::Types' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.AttemptRejoinMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_AttemptRejoinMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_AttemptRejoinMatch) == 0x000001, "Wrong alignment on RHQueueDataFactory_AttemptRejoinMatch");
static_assert(sizeof(RHQueueDataFactory_AttemptRejoinMatch) == 0x000001, "Wrong size on RHQueueDataFactory_AttemptRejoinMatch");
static_assert(offsetof(RHQueueDataFactory_AttemptRejoinMatch, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_AttemptRejoinMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.AttemptToJoinCustomMatchSession
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_AttemptToJoinCustomMatchSession final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const class URH_SessionView* SessionToJoin)> Delegate;             // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_AttemptToJoinCustomMatchSession) == 0x000008, "Wrong alignment on RHQueueDataFactory_AttemptToJoinCustomMatchSession");
static_assert(sizeof(RHQueueDataFactory_AttemptToJoinCustomMatchSession) == 0x000018, "Wrong size on RHQueueDataFactory_AttemptToJoinCustomMatchSession");
static_assert(offsetof(RHQueueDataFactory_AttemptToJoinCustomMatchSession, InSession) == 0x000000, "Member 'RHQueueDataFactory_AttemptToJoinCustomMatchSession::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_AttemptToJoinCustomMatchSession, Delegate) == 0x000008, "Member 'RHQueueDataFactory_AttemptToJoinCustomMatchSession::Delegate' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.CreateCustomMatchSession
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_CreateCustomMatchSession final
{
public:
	bool                                          bAutoLaunchSelectedQueue;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_CreateCustomMatchSession) == 0x000001, "Wrong alignment on RHQueueDataFactory_CreateCustomMatchSession");
static_assert(sizeof(RHQueueDataFactory_CreateCustomMatchSession) == 0x000001, "Wrong size on RHQueueDataFactory_CreateCustomMatchSession");
static_assert(offsetof(RHQueueDataFactory_CreateCustomMatchSession, bAutoLaunchSelectedQueue) == 0x000000, "Member 'RHQueueDataFactory_CreateCustomMatchSession::bAutoLaunchSelectedQueue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomMatchMembers
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetCustomMatchMembers final
{
public:
	TArray<struct FRH_CustomMatchMember>          ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomMatchMembers) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomMatchMembers");
static_assert(sizeof(RHQueueDataFactory_GetCustomMatchMembers) == 0x000010, "Wrong size on RHQueueDataFactory_GetCustomMatchMembers");
static_assert(offsetof(RHQueueDataFactory_GetCustomMatchMembers, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetCustomMatchMembers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomSessionLobbyName
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_GetCustomSessionLobbyName final
{
public:
	class URH_SessionView*                        InSession;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess, const class FString& SanitizedName)> Delegate;                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomSessionLobbyName) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomSessionLobbyName");
static_assert(sizeof(RHQueueDataFactory_GetCustomSessionLobbyName) == 0x000018, "Wrong size on RHQueueDataFactory_GetCustomSessionLobbyName");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionLobbyName, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetCustomSessionLobbyName::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionLobbyName, Delegate) == 0x000008, "Member 'RHQueueDataFactory_GetCustomSessionLobbyName::Delegate' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomSessionRegionAsText
// 0x0020 (0x0020 - 0x0000)
struct RHQueueDataFactory_GetCustomSessionRegionAsText final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomSessionRegionAsText) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomSessionRegionAsText");
static_assert(sizeof(RHQueueDataFactory_GetCustomSessionRegionAsText) == 0x000020, "Wrong size on RHQueueDataFactory_GetCustomSessionRegionAsText");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionRegionAsText, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetCustomSessionRegionAsText::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionRegionAsText, ReturnValue) == 0x000008, "Member 'RHQueueDataFactory_GetCustomSessionRegionAsText::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomSessionRegionId
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_GetCustomSessionRegionId final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomSessionRegionId) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomSessionRegionId");
static_assert(sizeof(RHQueueDataFactory_GetCustomSessionRegionId) == 0x000018, "Wrong size on RHQueueDataFactory_GetCustomSessionRegionId");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionRegionId, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetCustomSessionRegionId::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionRegionId, ReturnValue) == 0x000008, "Member 'RHQueueDataFactory_GetCustomSessionRegionId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetLocalCustomLobbyName
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetLocalCustomLobbyName final
{
public:
	TDelegate<void(bool bSuccess, const class FString& SanitizedName)> Delegate;                     // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetLocalCustomLobbyName) == 0x000004, "Wrong alignment on RHQueueDataFactory_GetLocalCustomLobbyName");
static_assert(sizeof(RHQueueDataFactory_GetLocalCustomLobbyName) == 0x000010, "Wrong size on RHQueueDataFactory_GetLocalCustomLobbyName");
static_assert(offsetof(RHQueueDataFactory_GetLocalCustomLobbyName, Delegate) == 0x000000, "Member 'RHQueueDataFactory_GetLocalCustomLobbyName::Delegate' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.InviteToCustomMatch
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_InviteToCustomMatch final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_InviteToCustomMatch) == 0x000004, "Wrong alignment on RHQueueDataFactory_InviteToCustomMatch");
static_assert(sizeof(RHQueueDataFactory_InviteToCustomMatch) == 0x000014, "Wrong size on RHQueueDataFactory_InviteToCustomMatch");
static_assert(offsetof(RHQueueDataFactory_InviteToCustomMatch, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_InviteToCustomMatch::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_InviteToCustomMatch, TeamNum) == 0x000010, "Member 'RHQueueDataFactory_InviteToCustomMatch::TeamNum' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.JoinQueue
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_JoinQueue final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockIfSessionActive;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_JoinQueue) == 0x000008, "Wrong alignment on RHQueueDataFactory_JoinQueue");
static_assert(sizeof(RHQueueDataFactory_JoinQueue) == 0x000018, "Wrong size on RHQueueDataFactory_JoinQueue");
static_assert(offsetof(RHQueueDataFactory_JoinQueue, QueueId) == 0x000000, "Member 'RHQueueDataFactory_JoinQueue::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_JoinQueue, bBlockIfSessionActive) == 0x000010, "Member 'RHQueueDataFactory_JoinQueue::bBlockIfSessionActive' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.JoinSelectedQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_JoinSelectedQueue final
{
public:
	bool                                          bBlockIfSessionActive;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_JoinSelectedQueue) == 0x000001, "Wrong alignment on RHQueueDataFactory_JoinSelectedQueue");
static_assert(sizeof(RHQueueDataFactory_JoinSelectedQueue) == 0x000001, "Wrong size on RHQueueDataFactory_JoinSelectedQueue");
static_assert(offsetof(RHQueueDataFactory_JoinSelectedQueue, bBlockIfSessionActive) == 0x000000, "Member 'RHQueueDataFactory_JoinSelectedQueue::bBlockIfSessionActive' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.KickFromCustomMatch
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_KickFromCustomMatch final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_KickFromCustomMatch) == 0x000004, "Wrong alignment on RHQueueDataFactory_KickFromCustomMatch");
static_assert(sizeof(RHQueueDataFactory_KickFromCustomMatch) == 0x000010, "Wrong size on RHQueueDataFactory_KickFromCustomMatch");
static_assert(offsetof(RHQueueDataFactory_KickFromCustomMatch, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_KickFromCustomMatch::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.LeaveMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_LeaveMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_LeaveMatch) == 0x000001, "Wrong alignment on RHQueueDataFactory_LeaveMatch");
static_assert(sizeof(RHQueueDataFactory_LeaveMatch) == 0x000001, "Wrong size on RHQueueDataFactory_LeaveMatch");
static_assert(offsetof(RHQueueDataFactory_LeaveMatch, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_LeaveMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.LeaveQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_LeaveQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_LeaveQueue) == 0x000001, "Wrong alignment on RHQueueDataFactory_LeaveQueue");
static_assert(sizeof(RHQueueDataFactory_LeaveQueue) == 0x000001, "Wrong size on RHQueueDataFactory_LeaveQueue");
static_assert(offsetof(RHQueueDataFactory_LeaveQueue, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_LeaveQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.OnMatchJoined
// 0x0020 (0x0020 - 0x0000)
struct RHQueueDataFactory_OnMatchJoined final
{
public:
	class URH_JoinedSession*                      JoinedSession;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_OnMatchJoined) == 0x000008, "Wrong alignment on RHQueueDataFactory_OnMatchJoined");
static_assert(sizeof(RHQueueDataFactory_OnMatchJoined) == 0x000020, "Wrong size on RHQueueDataFactory_OnMatchJoined");
static_assert(offsetof(RHQueueDataFactory_OnMatchJoined, JoinedSession) == 0x000000, "Member 'RHQueueDataFactory_OnMatchJoined::JoinedSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_OnMatchJoined, bSuccess) == 0x000008, "Member 'RHQueueDataFactory_OnMatchJoined::bSuccess' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_OnMatchJoined, Error) == 0x000010, "Member 'RHQueueDataFactory_OnMatchJoined::Error' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.PromoteToCustomMatchHost
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_PromoteToCustomMatchHost final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_PromoteToCustomMatchHost) == 0x000004, "Wrong alignment on RHQueueDataFactory_PromoteToCustomMatchHost");
static_assert(sizeof(RHQueueDataFactory_PromoteToCustomMatchHost) == 0x000010, "Wrong size on RHQueueDataFactory_PromoteToCustomMatchHost");
static_assert(offsetof(RHQueueDataFactory_PromoteToCustomMatchHost, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_PromoteToCustomMatchHost::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetGameModeInfoTagForCustomMatch
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_SetGameModeInfoTagForCustomMatch final
{
public:
	struct FGameplayTag                           GameModeInfoTag;                                   // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetGameModeInfoTagForCustomMatch) == 0x000004, "Wrong alignment on RHQueueDataFactory_SetGameModeInfoTagForCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetGameModeInfoTagForCustomMatch) == 0x000008, "Wrong size on RHQueueDataFactory_SetGameModeInfoTagForCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetGameModeInfoTagForCustomMatch, GameModeInfoTag) == 0x000000, "Member 'RHQueueDataFactory_SetGameModeInfoTagForCustomMatch::GameModeInfoTag' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetLobbyNameForCustomMatch
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_SetLobbyNameForCustomMatch final
{
public:
	class FString                                 InNewName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetLobbyNameForCustomMatch) == 0x000008, "Wrong alignment on RHQueueDataFactory_SetLobbyNameForCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetLobbyNameForCustomMatch) == 0x000010, "Wrong size on RHQueueDataFactory_SetLobbyNameForCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetLobbyNameForCustomMatch, InNewName) == 0x000000, "Member 'RHQueueDataFactory_SetLobbyNameForCustomMatch::InNewName' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetMapForCustomMatch
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_SetMapForCustomMatch final
{
public:
	class FName                                   MapRowName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetMapForCustomMatch) == 0x000004, "Wrong alignment on RHQueueDataFactory_SetMapForCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetMapForCustomMatch) == 0x000008, "Wrong size on RHQueueDataFactory_SetMapForCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetMapForCustomMatch, MapRowName) == 0x000000, "Member 'RHQueueDataFactory_SetMapForCustomMatch::MapRowName' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetPlayerTeamCustomMatch
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_SetPlayerTeamCustomMatch final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetPlayerTeamCustomMatch) == 0x000004, "Wrong alignment on RHQueueDataFactory_SetPlayerTeamCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetPlayerTeamCustomMatch) == 0x000014, "Wrong size on RHQueueDataFactory_SetPlayerTeamCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetPlayerTeamCustomMatch, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_SetPlayerTeamCustomMatch::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_SetPlayerTeamCustomMatch, TeamId) == 0x000010, "Member 'RHQueueDataFactory_SetPlayerTeamCustomMatch::TeamId' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetPrivacyForCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_SetPrivacyForCustomMatch final
{
public:
	EHWCustomMatchPrivacy                         InPrivacy;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetPrivacyForCustomMatch) == 0x000001, "Wrong alignment on RHQueueDataFactory_SetPrivacyForCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetPrivacyForCustomMatch) == 0x000001, "Wrong size on RHQueueDataFactory_SetPrivacyForCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetPrivacyForCustomMatch, InPrivacy) == 0x000000, "Member 'RHQueueDataFactory_SetPrivacyForCustomMatch::InPrivacy' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetRegionForLocalCustomMatch
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_SetRegionForLocalCustomMatch final
{
public:
	class FString                                 InRegionId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_SetRegionForLocalCustomMatch) == 0x000008, "Wrong alignment on RHQueueDataFactory_SetRegionForLocalCustomMatch");
static_assert(sizeof(RHQueueDataFactory_SetRegionForLocalCustomMatch) == 0x000010, "Wrong size on RHQueueDataFactory_SetRegionForLocalCustomMatch");
static_assert(offsetof(RHQueueDataFactory_SetRegionForLocalCustomMatch, InRegionId) == 0x000000, "Member 'RHQueueDataFactory_SetRegionForLocalCustomMatch::InRegionId' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.SetSelectedQueueId
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_SetSelectedQueueId final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_SetSelectedQueueId) == 0x000008, "Wrong alignment on RHQueueDataFactory_SetSelectedQueueId");
static_assert(sizeof(RHQueueDataFactory_SetSelectedQueueId) == 0x000018, "Wrong size on RHQueueDataFactory_SetSelectedQueueId");
static_assert(offsetof(RHQueueDataFactory_SetSelectedQueueId, QueueId) == 0x000000, "Member 'RHQueueDataFactory_SetSelectedQueueId::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_SetSelectedQueueId, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_SetSelectedQueueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.StartCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_StartCustomMatch final
{
public:
	bool                                          bDedicatedInstance;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_StartCustomMatch) == 0x000001, "Wrong alignment on RHQueueDataFactory_StartCustomMatch");
static_assert(sizeof(RHQueueDataFactory_StartCustomMatch) == 0x000001, "Wrong size on RHQueueDataFactory_StartCustomMatch");
static_assert(offsetof(RHQueueDataFactory_StartCustomMatch, bDedicatedInstance) == 0x000000, "Member 'RHQueueDataFactory_StartCustomMatch::bDedicatedInstance' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.CanLocalPlayerControlCustomLobbyPlayer
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer) == 0x000004, "Wrong alignment on RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer");
static_assert(sizeof(RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer) == 0x000014, "Wrong size on RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_CanLocalPlayerControlCustomLobbyPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.CanLocalPlayerKickCustomLobbyPlayer
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer) == 0x000004, "Wrong alignment on RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer");
static_assert(sizeof(RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer) == 0x000014, "Wrong size on RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_CanLocalPlayerKickCustomLobbyPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.CanLocalPlayerPromoteCustomLobbyPlayer
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer) == 0x000004, "Wrong alignment on RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer");
static_assert(sizeof(RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer) == 0x000014, "Wrong size on RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_CanLocalPlayerPromoteCustomLobbyPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.CanQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_CanQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_CanQueue) == 0x000001, "Wrong alignment on RHQueueDataFactory_CanQueue");
static_assert(sizeof(RHQueueDataFactory_CanQueue) == 0x000001, "Wrong size on RHQueueDataFactory_CanQueue");
static_assert(offsetof(RHQueueDataFactory_CanQueue, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_CanQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCurrentQueueMatchState
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_GetCurrentQueueMatchState final
{
public:
	ERH_MatchStatus                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCurrentQueueMatchState) == 0x000001, "Wrong alignment on RHQueueDataFactory_GetCurrentQueueMatchState");
static_assert(sizeof(RHQueueDataFactory_GetCurrentQueueMatchState) == 0x000001, "Wrong size on RHQueueDataFactory_GetCurrentQueueMatchState");
static_assert(offsetof(RHQueueDataFactory_GetCurrentQueueMatchState, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetCurrentQueueMatchState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomMatchSession
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_GetCustomMatchSession final
{
public:
	class URH_JoinedSession*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomMatchSession) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomMatchSession");
static_assert(sizeof(RHQueueDataFactory_GetCustomMatchSession) == 0x000008, "Wrong size on RHQueueDataFactory_GetCustomMatchSession");
static_assert(offsetof(RHQueueDataFactory_GetCustomMatchSession, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetCustomMatchSession::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomMatchStatus
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_GetCustomMatchStatus final
{
public:
	ERHCustomMatchStatus                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetCustomMatchStatus) == 0x000001, "Wrong alignment on RHQueueDataFactory_GetCustomMatchStatus");
static_assert(sizeof(RHQueueDataFactory_GetCustomMatchStatus) == 0x000001, "Wrong size on RHQueueDataFactory_GetCustomMatchStatus");
static_assert(offsetof(RHQueueDataFactory_GetCustomMatchStatus, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetCustomMatchStatus::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomSessionGameModeInfoTag
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_GetCustomSessionGameModeInfoTag final
{
public:
	class URH_SessionView*                        InSession;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutGameModeInfoTag;                                // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetCustomSessionGameModeInfoTag) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomSessionGameModeInfoTag");
static_assert(sizeof(RHQueueDataFactory_GetCustomSessionGameModeInfoTag) == 0x000018, "Wrong size on RHQueueDataFactory_GetCustomSessionGameModeInfoTag");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionGameModeInfoTag, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetCustomSessionGameModeInfoTag::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionGameModeInfoTag, OutGameModeInfoTag) == 0x000008, "Member 'RHQueueDataFactory_GetCustomSessionGameModeInfoTag::OutGameModeInfoTag' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionGameModeInfoTag, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_GetCustomSessionGameModeInfoTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetCustomSessionMapDetails
// 0x0090 (0x0090 - 0x0000)
struct RHQueueDataFactory_GetCustomSessionMapDetails final
{
public:
	class URH_SessionView*                        InSession;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapRowName;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHMapDetails                          MapDetails;                                        // 0x0010(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetCustomSessionMapDetails) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetCustomSessionMapDetails");
static_assert(sizeof(RHQueueDataFactory_GetCustomSessionMapDetails) == 0x000090, "Wrong size on RHQueueDataFactory_GetCustomSessionMapDetails");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionMapDetails, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetCustomSessionMapDetails::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionMapDetails, MapRowName) == 0x000008, "Member 'RHQueueDataFactory_GetCustomSessionMapDetails::MapRowName' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionMapDetails, MapDetails) == 0x000010, "Member 'RHQueueDataFactory_GetCustomSessionMapDetails::MapDetails' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetCustomSessionMapDetails, ReturnValue) == 0x000088, "Member 'RHQueueDataFactory_GetCustomSessionMapDetails::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetGameSessionType
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetGameSessionType final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetGameSessionType) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetGameSessionType");
static_assert(sizeof(RHQueueDataFactory_GetGameSessionType) == 0x000010, "Wrong size on RHQueueDataFactory_GetGameSessionType");
static_assert(offsetof(RHQueueDataFactory_GetGameSessionType, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetGameSessionType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetIsCustomMatchStarted
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetIsCustomMatchStarted final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetIsCustomMatchStarted) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetIsCustomMatchStarted");
static_assert(sizeof(RHQueueDataFactory_GetIsCustomMatchStarted) == 0x000010, "Wrong size on RHQueueDataFactory_GetIsCustomMatchStarted");
static_assert(offsetof(RHQueueDataFactory_GetIsCustomMatchStarted, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetIsCustomMatchStarted::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetIsCustomMatchStarted, ReturnValue) == 0x000008, "Member 'RHQueueDataFactory_GetIsCustomMatchStarted::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetIsLocalCustomMatchStarted
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_GetIsLocalCustomMatchStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetIsLocalCustomMatchStarted) == 0x000001, "Wrong alignment on RHQueueDataFactory_GetIsLocalCustomMatchStarted");
static_assert(sizeof(RHQueueDataFactory_GetIsLocalCustomMatchStarted) == 0x000001, "Wrong size on RHQueueDataFactory_GetIsLocalCustomMatchStarted");
static_assert(offsetof(RHQueueDataFactory_GetIsLocalCustomMatchStarted, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetIsLocalCustomMatchStarted::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetLobbyLeaderBrowserInfoFieldName
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName");
static_assert(sizeof(RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName) == 0x000010, "Wrong size on RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName");
static_assert(offsetof(RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetLobbyLeaderBrowserInfoFieldName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetLobbyNameBrowserInfoFieldName
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName");
static_assert(sizeof(RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName) == 0x000010, "Wrong size on RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName");
static_assert(offsetof(RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetLobbyNameBrowserInfoFieldName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetLocalCustomMatchPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_GetLocalCustomMatchPrivacy final
{
public:
	EHWCustomMatchPrivacy                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetLocalCustomMatchPrivacy) == 0x000001, "Wrong alignment on RHQueueDataFactory_GetLocalCustomMatchPrivacy");
static_assert(sizeof(RHQueueDataFactory_GetLocalCustomMatchPrivacy) == 0x000001, "Wrong size on RHQueueDataFactory_GetLocalCustomMatchPrivacy");
static_assert(offsetof(RHQueueDataFactory_GetLocalCustomMatchPrivacy, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetLocalCustomMatchPrivacy::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetMapDetailsFromRowName
// 0x0088 (0x0088 - 0x0000)
struct RHQueueDataFactory_GetMapDetailsFromRowName final
{
public:
	class FName                                   MapRowName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHMapDetails                          OutMapDetails;                                     // 0x0008(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetMapDetailsFromRowName) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetMapDetailsFromRowName");
static_assert(sizeof(RHQueueDataFactory_GetMapDetailsFromRowName) == 0x000088, "Wrong size on RHQueueDataFactory_GetMapDetailsFromRowName");
static_assert(offsetof(RHQueueDataFactory_GetMapDetailsFromRowName, MapRowName) == 0x000000, "Member 'RHQueueDataFactory_GetMapDetailsFromRowName::MapRowName' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMapDetailsFromRowName, OutMapDetails) == 0x000008, "Member 'RHQueueDataFactory_GetMapDetailsFromRowName::OutMapDetails' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMapDetailsFromRowName, ReturnValue) == 0x000080, "Member 'RHQueueDataFactory_GetMapDetailsFromRowName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetMapPathAndTranstionInfoTagFromGameModeTag
// 0x0028 (0x0028 - 0x0000)
struct RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag final
{
public:
	struct FGameplayTag                           GameModeTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutMapPath;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutTransitionInfoTag;                              // 0x0018(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag");
static_assert(sizeof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag) == 0x000028, "Wrong size on RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag");
static_assert(offsetof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag, GameModeTag) == 0x000000, "Member 'RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag::GameModeTag' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag, OutMapPath) == 0x000008, "Member 'RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag::OutMapPath' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag, OutTransitionInfoTag) == 0x000018, "Member 'RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag::OutTransitionInfoTag' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag, ReturnValue) == 0x000020, "Member 'RHQueueDataFactory_GetMapPathAndTranstionInfoTagFromGameModeTag::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetMapsDetailsDT
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_GetMapsDetailsDT final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetMapsDetailsDT) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetMapsDetailsDT");
static_assert(sizeof(RHQueueDataFactory_GetMapsDetailsDT) == 0x000008, "Wrong size on RHQueueDataFactory_GetMapsDetailsDT");
static_assert(offsetof(RHQueueDataFactory_GetMapsDetailsDT, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetMapsDetailsDT::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetMaxPlayerCountForSessionTeams
// 0x0020 (0x0020 - 0x0000)
struct RHQueueDataFactory_GetMaxPlayerCountForSessionTeams final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TeamIds;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetMaxPlayerCountForSessionTeams) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetMaxPlayerCountForSessionTeams");
static_assert(sizeof(RHQueueDataFactory_GetMaxPlayerCountForSessionTeams) == 0x000020, "Wrong size on RHQueueDataFactory_GetMaxPlayerCountForSessionTeams");
static_assert(offsetof(RHQueueDataFactory_GetMaxPlayerCountForSessionTeams, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetMaxPlayerCountForSessionTeams::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMaxPlayerCountForSessionTeams, TeamIds) == 0x000008, "Member 'RHQueueDataFactory_GetMaxPlayerCountForSessionTeams::TeamIds' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetMaxPlayerCountForSessionTeams, ReturnValue) == 0x000018, "Member 'RHQueueDataFactory_GetMaxPlayerCountForSessionTeams::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetPlayerCountForSessionTeams
// 0x0020 (0x0020 - 0x0000)
struct RHQueueDataFactory_GetPlayerCountForSessionTeams final
{
public:
	const class URH_SessionView*                  InSession;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TeamIds;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetPlayerCountForSessionTeams) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetPlayerCountForSessionTeams");
static_assert(sizeof(RHQueueDataFactory_GetPlayerCountForSessionTeams) == 0x000020, "Wrong size on RHQueueDataFactory_GetPlayerCountForSessionTeams");
static_assert(offsetof(RHQueueDataFactory_GetPlayerCountForSessionTeams, InSession) == 0x000000, "Member 'RHQueueDataFactory_GetPlayerCountForSessionTeams::InSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetPlayerCountForSessionTeams, TeamIds) == 0x000008, "Member 'RHQueueDataFactory_GetPlayerCountForSessionTeams::TeamIds' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetPlayerCountForSessionTeams, ReturnValue) == 0x000018, "Member 'RHQueueDataFactory_GetPlayerCountForSessionTeams::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetPlayerTeamId
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_GetPlayerTeamId final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetPlayerTeamId) == 0x000004, "Wrong alignment on RHQueueDataFactory_GetPlayerTeamId");
static_assert(sizeof(RHQueueDataFactory_GetPlayerTeamId) == 0x000014, "Wrong size on RHQueueDataFactory_GetPlayerTeamId");
static_assert(offsetof(RHQueueDataFactory_GetPlayerTeamId, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_GetPlayerTeamId::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetPlayerTeamId, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_GetPlayerTeamId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetQueueDetailsByQueue
// 0x01A8 (0x01A8 - 0x0000)
struct RHQueueDataFactory_GetQueueDetailsByQueue final
{
public:
	class URH_MatchmakingQueueInfo*               Queue;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHQueueDetails                        QueueDetails;                                      // 0x0008(0x0198)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetQueueDetailsByQueue) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetQueueDetailsByQueue");
static_assert(sizeof(RHQueueDataFactory_GetQueueDetailsByQueue) == 0x0001A8, "Wrong size on RHQueueDataFactory_GetQueueDetailsByQueue");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueue, Queue) == 0x000000, "Member 'RHQueueDataFactory_GetQueueDetailsByQueue::Queue' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueue, QueueDetails) == 0x000008, "Member 'RHQueueDataFactory_GetQueueDetailsByQueue::QueueDetails' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueue, ReturnValue) == 0x0001A0, "Member 'RHQueueDataFactory_GetQueueDetailsByQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetQueueDetailsByQueueId
// 0x01B0 (0x01B0 - 0x0000)
struct RHQueueDataFactory_GetQueueDetailsByQueueId final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHQueueDetails                        QueueDetails;                                      // 0x0010(0x0198)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x01A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_GetQueueDetailsByQueueId) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetQueueDetailsByQueueId");
static_assert(sizeof(RHQueueDataFactory_GetQueueDetailsByQueueId) == 0x0001B0, "Wrong size on RHQueueDataFactory_GetQueueDetailsByQueueId");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueueId, QueueId) == 0x000000, "Member 'RHQueueDataFactory_GetQueueDetailsByQueueId::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueueId, QueueDetails) == 0x000010, "Member 'RHQueueDataFactory_GetQueueDetailsByQueueId::QueueDetails' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetQueueDetailsByQueueId, ReturnValue) == 0x0001A8, "Member 'RHQueueDataFactory_GetQueueDetailsByQueueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetQueueInfoById
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_GetQueueInfoById final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_MatchmakingQueueInfo*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetQueueInfoById) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetQueueInfoById");
static_assert(sizeof(RHQueueDataFactory_GetQueueInfoById) == 0x000018, "Wrong size on RHQueueDataFactory_GetQueueInfoById");
static_assert(offsetof(RHQueueDataFactory_GetQueueInfoById, QueueId) == 0x000000, "Member 'RHQueueDataFactory_GetQueueInfoById::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetQueueInfoById, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_GetQueueInfoById::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetQueues
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetQueues final
{
public:
	TArray<class URH_MatchmakingQueueInfo*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetQueues) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetQueues");
static_assert(sizeof(RHQueueDataFactory_GetQueues) == 0x000010, "Wrong size on RHQueueDataFactory_GetQueues");
static_assert(offsetof(RHQueueDataFactory_GetQueues, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetQueues::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetSelectedCustomMap
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_GetSelectedCustomMap final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetSelectedCustomMap) == 0x000004, "Wrong alignment on RHQueueDataFactory_GetSelectedCustomMap");
static_assert(sizeof(RHQueueDataFactory_GetSelectedCustomMap) == 0x000008, "Wrong size on RHQueueDataFactory_GetSelectedCustomMap");
static_assert(offsetof(RHQueueDataFactory_GetSelectedCustomMap, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetSelectedCustomMap::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetSelectedQueueId
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_GetSelectedQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetSelectedQueueId) == 0x000008, "Wrong alignment on RHQueueDataFactory_GetSelectedQueueId");
static_assert(sizeof(RHQueueDataFactory_GetSelectedQueueId) == 0x000010, "Wrong size on RHQueueDataFactory_GetSelectedQueueId");
static_assert(offsetof(RHQueueDataFactory_GetSelectedQueueId, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetSelectedQueueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetTeamMemberCount
// 0x0008 (0x0008 - 0x0000)
struct RHQueueDataFactory_GetTeamMemberCount final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetTeamMemberCount) == 0x000004, "Wrong alignment on RHQueueDataFactory_GetTeamMemberCount");
static_assert(sizeof(RHQueueDataFactory_GetTeamMemberCount) == 0x000008, "Wrong size on RHQueueDataFactory_GetTeamMemberCount");
static_assert(offsetof(RHQueueDataFactory_GetTeamMemberCount, TeamId) == 0x000000, "Member 'RHQueueDataFactory_GetTeamMemberCount::TeamId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_GetTeamMemberCount, ReturnValue) == 0x000004, "Member 'RHQueueDataFactory_GetTeamMemberCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.GetTimeInQueueSeconds
// 0x0004 (0x0004 - 0x0000)
struct RHQueueDataFactory_GetTimeInQueueSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_GetTimeInQueueSeconds) == 0x000004, "Wrong alignment on RHQueueDataFactory_GetTimeInQueueSeconds");
static_assert(sizeof(RHQueueDataFactory_GetTimeInQueueSeconds) == 0x000004, "Wrong size on RHQueueDataFactory_GetTimeInQueueSeconds");
static_assert(offsetof(RHQueueDataFactory_GetTimeInQueueSeconds, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_GetTimeInQueueSeconds::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsCustomGameSession
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_IsCustomGameSession final
{
public:
	const class URH_SessionView*                  pSession;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_IsCustomGameSession) == 0x000008, "Wrong alignment on RHQueueDataFactory_IsCustomGameSession");
static_assert(sizeof(RHQueueDataFactory_IsCustomGameSession) == 0x000010, "Wrong size on RHQueueDataFactory_IsCustomGameSession");
static_assert(offsetof(RHQueueDataFactory_IsCustomGameSession, pSession) == 0x000000, "Member 'RHQueueDataFactory_IsCustomGameSession::pSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_IsCustomGameSession, ReturnValue) == 0x000008, "Member 'RHQueueDataFactory_IsCustomGameSession::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsCustomInvitePending
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_IsCustomInvitePending final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_IsCustomInvitePending) == 0x000004, "Wrong alignment on RHQueueDataFactory_IsCustomInvitePending");
static_assert(sizeof(RHQueueDataFactory_IsCustomInvitePending) == 0x000014, "Wrong size on RHQueueDataFactory_IsCustomInvitePending");
static_assert(offsetof(RHQueueDataFactory_IsCustomInvitePending, PlayerId) == 0x000000, "Member 'RHQueueDataFactory_IsCustomInvitePending::PlayerId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_IsCustomInvitePending, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_IsCustomInvitePending::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsCustomMatchEnabled
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_IsCustomMatchEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_IsCustomMatchEnabled) == 0x000001, "Wrong alignment on RHQueueDataFactory_IsCustomMatchEnabled");
static_assert(sizeof(RHQueueDataFactory_IsCustomMatchEnabled) == 0x000001, "Wrong size on RHQueueDataFactory_IsCustomMatchEnabled");
static_assert(offsetof(RHQueueDataFactory_IsCustomMatchEnabled, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_IsCustomMatchEnabled::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsInCustomLobbyWithNoInstance
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_IsInCustomLobbyWithNoInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_IsInCustomLobbyWithNoInstance) == 0x000001, "Wrong alignment on RHQueueDataFactory_IsInCustomLobbyWithNoInstance");
static_assert(sizeof(RHQueueDataFactory_IsInCustomLobbyWithNoInstance) == 0x000001, "Wrong size on RHQueueDataFactory_IsInCustomLobbyWithNoInstance");
static_assert(offsetof(RHQueueDataFactory_IsInCustomLobbyWithNoInstance, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_IsInCustomLobbyWithNoInstance::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsInCustomMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_IsInCustomMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_IsInCustomMatch) == 0x000001, "Wrong alignment on RHQueueDataFactory_IsInCustomMatch");
static_assert(sizeof(RHQueueDataFactory_IsInCustomMatch) == 0x000001, "Wrong size on RHQueueDataFactory_IsInCustomMatch");
static_assert(offsetof(RHQueueDataFactory_IsInCustomMatch, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_IsInCustomMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsInQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_IsInQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_IsInQueue) == 0x000001, "Wrong alignment on RHQueueDataFactory_IsInQueue");
static_assert(sizeof(RHQueueDataFactory_IsInQueue) == 0x000001, "Wrong size on RHQueueDataFactory_IsInQueue");
static_assert(offsetof(RHQueueDataFactory_IsInQueue, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_IsInQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsLocalPlayerCustomLobbyLeader
// 0x0001 (0x0001 - 0x0000)
struct RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader) == 0x000001, "Wrong alignment on RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader");
static_assert(sizeof(RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader) == 0x000001, "Wrong size on RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader");
static_assert(offsetof(RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader, ReturnValue) == 0x000000, "Member 'RHQueueDataFactory_IsLocalPlayerCustomLobbyLeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsPlayerCustomLobbyLeader
// 0x0014 (0x0014 - 0x0000)
struct RHQueueDataFactory_IsPlayerCustomLobbyLeader final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_IsPlayerCustomLobbyLeader) == 0x000004, "Wrong alignment on RHQueueDataFactory_IsPlayerCustomLobbyLeader");
static_assert(sizeof(RHQueueDataFactory_IsPlayerCustomLobbyLeader) == 0x000014, "Wrong size on RHQueueDataFactory_IsPlayerCustomLobbyLeader");
static_assert(offsetof(RHQueueDataFactory_IsPlayerCustomLobbyLeader, PlayerUuid) == 0x000000, "Member 'RHQueueDataFactory_IsPlayerCustomLobbyLeader::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_IsPlayerCustomLobbyLeader, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_IsPlayerCustomLobbyLeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.IsQueueActive
// 0x0018 (0x0018 - 0x0000)
struct RHQueueDataFactory_IsQueueActive final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_IsQueueActive) == 0x000008, "Wrong alignment on RHQueueDataFactory_IsQueueActive");
static_assert(sizeof(RHQueueDataFactory_IsQueueActive) == 0x000018, "Wrong size on RHQueueDataFactory_IsQueueActive");
static_assert(offsetof(RHQueueDataFactory_IsQueueActive, QueueId) == 0x000000, "Member 'RHQueueDataFactory_IsQueueActive::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_IsQueueActive, ReturnValue) == 0x000010, "Member 'RHQueueDataFactory_IsQueueActive::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueDataFactory.ValidateActiveSessionForQueueJoin
// 0x0010 (0x0010 - 0x0000)
struct RHQueueDataFactory_ValidateActiveSessionForQueueJoin final
{
public:
	class URH_JoinedSession*                      ActiveSession;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueDataFactory_ValidateActiveSessionForQueueJoin) == 0x000008, "Wrong alignment on RHQueueDataFactory_ValidateActiveSessionForQueueJoin");
static_assert(sizeof(RHQueueDataFactory_ValidateActiveSessionForQueueJoin) == 0x000010, "Wrong size on RHQueueDataFactory_ValidateActiveSessionForQueueJoin");
static_assert(offsetof(RHQueueDataFactory_ValidateActiveSessionForQueueJoin, ActiveSession) == 0x000000, "Member 'RHQueueDataFactory_ValidateActiveSessionForQueueJoin::ActiveSession' has a wrong offset!");
static_assert(offsetof(RHQueueDataFactory_ValidateActiveSessionForQueueJoin, ReturnValue) == 0x000008, "Member 'RHQueueDataFactory_ValidateActiveSessionForQueueJoin::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueuedMessageWidget.GetNextMessage
// 0x0020 (0x0020 - 0x0000)
struct RHQueuedMessageWidget_GetNextMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueuedMessageWidget_GetNextMessage) == 0x000008, "Wrong alignment on RHQueuedMessageWidget_GetNextMessage");
static_assert(sizeof(RHQueuedMessageWidget_GetNextMessage) == 0x000020, "Wrong size on RHQueuedMessageWidget_GetNextMessage");
static_assert(offsetof(RHQueuedMessageWidget_GetNextMessage, Message) == 0x000000, "Member 'RHQueuedMessageWidget_GetNextMessage::Message' has a wrong offset!");
static_assert(offsetof(RHQueuedMessageWidget_GetNextMessage, ReturnValue) == 0x000018, "Member 'RHQueuedMessageWidget_GetNextMessage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueuedMessageWidget.QueueMessage
// 0x0018 (0x0018 - 0x0000)
struct RHQueuedMessageWidget_QueueMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueuedMessageWidget_QueueMessage) == 0x000008, "Wrong alignment on RHQueuedMessageWidget_QueueMessage");
static_assert(sizeof(RHQueuedMessageWidget_QueueMessage) == 0x000018, "Wrong size on RHQueuedMessageWidget_QueueMessage");
static_assert(offsetof(RHQueuedMessageWidget_QueueMessage, Message) == 0x000000, "Member 'RHQueuedMessageWidget_QueueMessage::Message' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.CheckDeserterPartyStatus
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_CheckDeserterPartyStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_CheckDeserterPartyStatus) == 0x000001, "Wrong alignment on RHQueueWidgetBase_CheckDeserterPartyStatus");
static_assert(sizeof(RHQueueWidgetBase_CheckDeserterPartyStatus) == 0x000001, "Wrong size on RHQueueWidgetBase_CheckDeserterPartyStatus");
static_assert(offsetof(RHQueueWidgetBase_CheckDeserterPartyStatus, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_CheckDeserterPartyStatus::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetQueueInfoById
// 0x0018 (0x0018 - 0x0000)
struct RHQueueWidgetBase_GetQueueInfoById final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_MatchmakingQueueInfo*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetQueueInfoById) == 0x000008, "Wrong alignment on RHQueueWidgetBase_GetQueueInfoById");
static_assert(sizeof(RHQueueWidgetBase_GetQueueInfoById) == 0x000018, "Wrong size on RHQueueWidgetBase_GetQueueInfoById");
static_assert(offsetof(RHQueueWidgetBase_GetQueueInfoById, QueueId) == 0x000000, "Member 'RHQueueWidgetBase_GetQueueInfoById::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueWidgetBase_GetQueueInfoById, ReturnValue) == 0x000010, "Member 'RHQueueWidgetBase_GetQueueInfoById::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetQueuePermissions
// 0x0002 (0x0002 - 0x0000)
struct RHQueueWidgetBase_GetQueuePermissions final
{
public:
	bool                                          CanControl;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanQueue;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetQueuePermissions) == 0x000001, "Wrong alignment on RHQueueWidgetBase_GetQueuePermissions");
static_assert(sizeof(RHQueueWidgetBase_GetQueuePermissions) == 0x000002, "Wrong size on RHQueueWidgetBase_GetQueuePermissions");
static_assert(offsetof(RHQueueWidgetBase_GetQueuePermissions, CanControl) == 0x000000, "Member 'RHQueueWidgetBase_GetQueuePermissions::CanControl' has a wrong offset!");
static_assert(offsetof(RHQueueWidgetBase_GetQueuePermissions, CanQueue) == 0x000001, "Member 'RHQueueWidgetBase_GetQueuePermissions::CanQueue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetQueues
// 0x0010 (0x0010 - 0x0000)
struct RHQueueWidgetBase_GetQueues final
{
public:
	TArray<class URH_MatchmakingQueueInfo*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetQueues) == 0x000008, "Wrong alignment on RHQueueWidgetBase_GetQueues");
static_assert(sizeof(RHQueueWidgetBase_GetQueues) == 0x000010, "Wrong size on RHQueueWidgetBase_GetQueues");
static_assert(offsetof(RHQueueWidgetBase_GetQueues, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_GetQueues::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandleMatchStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_HandleMatchStatusUpdate final
{
public:
	ERH_MatchStatus                               MatchStatus;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandleMatchStatusUpdate) == 0x000001, "Wrong alignment on RHQueueWidgetBase_HandleMatchStatusUpdate");
static_assert(sizeof(RHQueueWidgetBase_HandleMatchStatusUpdate) == 0x000001, "Wrong size on RHQueueWidgetBase_HandleMatchStatusUpdate");
static_assert(offsetof(RHQueueWidgetBase_HandleMatchStatusUpdate, MatchStatus) == 0x000000, "Member 'RHQueueWidgetBase_HandleMatchStatusUpdate::MatchStatus' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandlePartyDeserterUpdated
// 0x0058 (0x0058 - 0x0000)
struct RHQueueWidgetBase_HandlePartyDeserterUpdated final
{
public:
	bool                                          bIsDeserter;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_PartyDeserters                     DeserterStatuses;                                  // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandlePartyDeserterUpdated) == 0x000008, "Wrong alignment on RHQueueWidgetBase_HandlePartyDeserterUpdated");
static_assert(sizeof(RHQueueWidgetBase_HandlePartyDeserterUpdated) == 0x000058, "Wrong size on RHQueueWidgetBase_HandlePartyDeserterUpdated");
static_assert(offsetof(RHQueueWidgetBase_HandlePartyDeserterUpdated, bIsDeserter) == 0x000000, "Member 'RHQueueWidgetBase_HandlePartyDeserterUpdated::bIsDeserter' has a wrong offset!");
static_assert(offsetof(RHQueueWidgetBase_HandlePartyDeserterUpdated, DeserterStatuses) == 0x000008, "Member 'RHQueueWidgetBase_HandlePartyDeserterUpdated::DeserterStatuses' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandlePartyMemberDataUpdated
// 0x0030 (0x0030 - 0x0000)
struct RHQueueWidgetBase_HandlePartyMemberDataUpdated final
{
public:
	struct FRH_PartyMemberData                    PartyMember;                                       // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandlePartyMemberDataUpdated) == 0x000008, "Wrong alignment on RHQueueWidgetBase_HandlePartyMemberDataUpdated");
static_assert(sizeof(RHQueueWidgetBase_HandlePartyMemberDataUpdated) == 0x000030, "Wrong size on RHQueueWidgetBase_HandlePartyMemberDataUpdated");
static_assert(offsetof(RHQueueWidgetBase_HandlePartyMemberDataUpdated, PartyMember) == 0x000000, "Member 'RHQueueWidgetBase_HandlePartyMemberDataUpdated::PartyMember' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandlePartyMemberInventoryUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_HandlePartyMemberInventoryUpdated final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandlePartyMemberInventoryUpdated) == 0x000001, "Wrong alignment on RHQueueWidgetBase_HandlePartyMemberInventoryUpdated");
static_assert(sizeof(RHQueueWidgetBase_HandlePartyMemberInventoryUpdated) == 0x000001, "Wrong size on RHQueueWidgetBase_HandlePartyMemberInventoryUpdated");
static_assert(offsetof(RHQueueWidgetBase_HandlePartyMemberInventoryUpdated, bSuccess) == 0x000000, "Member 'RHQueueWidgetBase_HandlePartyMemberInventoryUpdated::bSuccess' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandlePartyMemberRemoved
// 0x0010 (0x0010 - 0x0000)
struct RHQueueWidgetBase_HandlePartyMemberRemoved final
{
public:
	struct FGuid                                  PartyMemberId;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandlePartyMemberRemoved) == 0x000004, "Wrong alignment on RHQueueWidgetBase_HandlePartyMemberRemoved");
static_assert(sizeof(RHQueueWidgetBase_HandlePartyMemberRemoved) == 0x000010, "Wrong size on RHQueueWidgetBase_HandlePartyMemberRemoved");
static_assert(offsetof(RHQueueWidgetBase_HandlePartyMemberRemoved, PartyMemberId) == 0x000000, "Member 'RHQueueWidgetBase_HandlePartyMemberRemoved::PartyMemberId' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.HandlePlayerSettingsUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHQueueWidgetBase_HandlePlayerSettingsUpdated final
{
public:
	class URH_ConfigSubsystem*                    ConfigSubsystem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_HandlePlayerSettingsUpdated) == 0x000008, "Wrong alignment on RHQueueWidgetBase_HandlePlayerSettingsUpdated");
static_assert(sizeof(RHQueueWidgetBase_HandlePlayerSettingsUpdated) == 0x000008, "Wrong size on RHQueueWidgetBase_HandlePlayerSettingsUpdated");
static_assert(offsetof(RHQueueWidgetBase_HandlePlayerSettingsUpdated, ConfigSubsystem) == 0x000000, "Member 'RHQueueWidgetBase_HandlePlayerSettingsUpdated::ConfigSubsystem' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.OnControlQueuePermissionUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_OnControlQueuePermissionUpdate final
{
public:
	bool                                          CanControl;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_OnControlQueuePermissionUpdate) == 0x000001, "Wrong alignment on RHQueueWidgetBase_OnControlQueuePermissionUpdate");
static_assert(sizeof(RHQueueWidgetBase_OnControlQueuePermissionUpdate) == 0x000001, "Wrong size on RHQueueWidgetBase_OnControlQueuePermissionUpdate");
static_assert(offsetof(RHQueueWidgetBase_OnControlQueuePermissionUpdate, CanControl) == 0x000000, "Member 'RHQueueWidgetBase_OnControlQueuePermissionUpdate::CanControl' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.OnQueuePermissionUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_OnQueuePermissionUpdate final
{
public:
	bool                                          CanQueue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_OnQueuePermissionUpdate) == 0x000001, "Wrong alignment on RHQueueWidgetBase_OnQueuePermissionUpdate");
static_assert(sizeof(RHQueueWidgetBase_OnQueuePermissionUpdate) == 0x000001, "Wrong size on RHQueueWidgetBase_OnQueuePermissionUpdate");
static_assert(offsetof(RHQueueWidgetBase_OnQueuePermissionUpdate, CanQueue) == 0x000000, "Member 'RHQueueWidgetBase_OnQueuePermissionUpdate::CanQueue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.OnQueueStateUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_OnQueueStateUpdate final
{
public:
	ERH_MatchStatus                               CurrentMatchStatus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_OnQueueStateUpdate) == 0x000001, "Wrong alignment on RHQueueWidgetBase_OnQueueStateUpdate");
static_assert(sizeof(RHQueueWidgetBase_OnQueueStateUpdate) == 0x000001, "Wrong size on RHQueueWidgetBase_OnQueueStateUpdate");
static_assert(offsetof(RHQueueWidgetBase_OnQueueStateUpdate, CurrentMatchStatus) == 0x000000, "Member 'RHQueueWidgetBase_OnQueueStateUpdate::CurrentMatchStatus' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.OnSelectedQueueUpdate
// 0x0008 (0x0008 - 0x0000)
struct RHQueueWidgetBase_OnSelectedQueueUpdate final
{
public:
	class URH_MatchmakingQueueInfo*               CurrentSelectedQueue;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_OnSelectedQueueUpdate) == 0x000008, "Wrong alignment on RHQueueWidgetBase_OnSelectedQueueUpdate");
static_assert(sizeof(RHQueueWidgetBase_OnSelectedQueueUpdate) == 0x000008, "Wrong size on RHQueueWidgetBase_OnSelectedQueueUpdate");
static_assert(offsetof(RHQueueWidgetBase_OnSelectedQueueUpdate, CurrentSelectedQueue) == 0x000000, "Member 'RHQueueWidgetBase_OnSelectedQueueUpdate::CurrentSelectedQueue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.ReceiveMatchStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_ReceiveMatchStatusUpdate final
{
public:
	ERH_MatchStatus                               CurrentMatchStatus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_ReceiveMatchStatusUpdate) == 0x000001, "Wrong alignment on RHQueueWidgetBase_ReceiveMatchStatusUpdate");
static_assert(sizeof(RHQueueWidgetBase_ReceiveMatchStatusUpdate) == 0x000001, "Wrong size on RHQueueWidgetBase_ReceiveMatchStatusUpdate");
static_assert(offsetof(RHQueueWidgetBase_ReceiveMatchStatusUpdate, CurrentMatchStatus) == 0x000000, "Member 'RHQueueWidgetBase_ReceiveMatchStatusUpdate::CurrentMatchStatus' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.SetCurrentlySelectedQueue
// 0x0018 (0x0018 - 0x0000)
struct RHQueueWidgetBase_SetCurrentlySelectedQueue final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueWidgetBase_SetCurrentlySelectedQueue) == 0x000008, "Wrong alignment on RHQueueWidgetBase_SetCurrentlySelectedQueue");
static_assert(sizeof(RHQueueWidgetBase_SetCurrentlySelectedQueue) == 0x000018, "Wrong size on RHQueueWidgetBase_SetCurrentlySelectedQueue");
static_assert(offsetof(RHQueueWidgetBase_SetCurrentlySelectedQueue, QueueId) == 0x000000, "Member 'RHQueueWidgetBase_SetCurrentlySelectedQueue::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueWidgetBase_SetCurrentlySelectedQueue, ReturnValue) == 0x000010, "Member 'RHQueueWidgetBase_SetCurrentlySelectedQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.UIX_AttemptCancelQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_UIX_AttemptCancelQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_UIX_AttemptCancelQueue) == 0x000001, "Wrong alignment on RHQueueWidgetBase_UIX_AttemptCancelQueue");
static_assert(sizeof(RHQueueWidgetBase_UIX_AttemptCancelQueue) == 0x000001, "Wrong size on RHQueueWidgetBase_UIX_AttemptCancelQueue");
static_assert(offsetof(RHQueueWidgetBase_UIX_AttemptCancelQueue, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_UIX_AttemptCancelQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.UIX_AttemptJoinSelectedQueue
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue) == 0x000001, "Wrong alignment on RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue");
static_assert(sizeof(RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue) == 0x000001, "Wrong size on RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue");
static_assert(offsetof(RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_UIX_AttemptJoinSelectedQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.UIX_AttemptLeaveMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_UIX_AttemptLeaveMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_UIX_AttemptLeaveMatch) == 0x000001, "Wrong alignment on RHQueueWidgetBase_UIX_AttemptLeaveMatch");
static_assert(sizeof(RHQueueWidgetBase_UIX_AttemptLeaveMatch) == 0x000001, "Wrong size on RHQueueWidgetBase_UIX_AttemptLeaveMatch");
static_assert(offsetof(RHQueueWidgetBase_UIX_AttemptLeaveMatch, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_UIX_AttemptLeaveMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.UIX_AttemptRejoinMatch
// 0x0001 (0x0001 - 0x0000)
struct RHQueueWidgetBase_UIX_AttemptRejoinMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_UIX_AttemptRejoinMatch) == 0x000001, "Wrong alignment on RHQueueWidgetBase_UIX_AttemptRejoinMatch");
static_assert(sizeof(RHQueueWidgetBase_UIX_AttemptRejoinMatch) == 0x000001, "Wrong size on RHQueueWidgetBase_UIX_AttemptRejoinMatch");
static_assert(offsetof(RHQueueWidgetBase_UIX_AttemptRejoinMatch, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_UIX_AttemptRejoinMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetCurrentlySelectedQueue
// 0x0008 (0x0008 - 0x0000)
struct RHQueueWidgetBase_GetCurrentlySelectedQueue final
{
public:
	class URH_MatchmakingQueueInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetCurrentlySelectedQueue) == 0x000008, "Wrong alignment on RHQueueWidgetBase_GetCurrentlySelectedQueue");
static_assert(sizeof(RHQueueWidgetBase_GetCurrentlySelectedQueue) == 0x000008, "Wrong size on RHQueueWidgetBase_GetCurrentlySelectedQueue");
static_assert(offsetof(RHQueueWidgetBase_GetCurrentlySelectedQueue, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_GetCurrentlySelectedQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHQueueWidgetBase_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetPartyManager) == 0x000008, "Wrong alignment on RHQueueWidgetBase_GetPartyManager");
static_assert(sizeof(RHQueueWidgetBase_GetPartyManager) == 0x000008, "Wrong size on RHQueueWidgetBase_GetPartyManager");
static_assert(offsetof(RHQueueWidgetBase_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHQueueWidgetBase_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueWidgetBase_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHQueueWidgetBase_GetQueueDataFactory");
static_assert(sizeof(RHQueueWidgetBase_GetQueueDataFactory) == 0x000008, "Wrong size on RHQueueWidgetBase_GetQueueDataFactory");
static_assert(offsetof(RHQueueWidgetBase_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHQueueWidgetBase_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueWidgetBase.IsValidQueue
// 0x0018 (0x0018 - 0x0000)
struct RHQueueWidgetBase_IsValidQueue final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQueueWidgetBase_IsValidQueue) == 0x000008, "Wrong alignment on RHQueueWidgetBase_IsValidQueue");
static_assert(sizeof(RHQueueWidgetBase_IsValidQueue) == 0x000018, "Wrong size on RHQueueWidgetBase_IsValidQueue");
static_assert(offsetof(RHQueueWidgetBase_IsValidQueue, QueueId) == 0x000000, "Member 'RHQueueWidgetBase_IsValidQueue::QueueId' has a wrong offset!");
static_assert(offsetof(RHQueueWidgetBase_IsValidQueue, ReturnValue) == 0x000010, "Member 'RHQueueWidgetBase_IsValidQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.OnUpdateQueueTime
// 0x0004 (0x0004 - 0x0000)
struct RHQueueTimerWidgetBase_OnUpdateQueueTime final
{
public:
	float                                         TimeSecs;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_OnUpdateQueueTime) == 0x000004, "Wrong alignment on RHQueueTimerWidgetBase_OnUpdateQueueTime");
static_assert(sizeof(RHQueueTimerWidgetBase_OnUpdateQueueTime) == 0x000004, "Wrong size on RHQueueTimerWidgetBase_OnUpdateQueueTime");
static_assert(offsetof(RHQueueTimerWidgetBase_OnUpdateQueueTime, TimeSecs) == 0x000000, "Member 'RHQueueTimerWidgetBase_OnUpdateQueueTime::TimeSecs' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.OnUpdateQueueTimerState
// 0x0001 (0x0001 - 0x0000)
struct RHQueueTimerWidgetBase_OnUpdateQueueTimerState final
{
public:
	EQueueTimerState                              State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_OnUpdateQueueTimerState) == 0x000001, "Wrong alignment on RHQueueTimerWidgetBase_OnUpdateQueueTimerState");
static_assert(sizeof(RHQueueTimerWidgetBase_OnUpdateQueueTimerState) == 0x000001, "Wrong size on RHQueueTimerWidgetBase_OnUpdateQueueTimerState");
static_assert(offsetof(RHQueueTimerWidgetBase_OnUpdateQueueTimerState, State) == 0x000000, "Member 'RHQueueTimerWidgetBase_OnUpdateQueueTimerState::State' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.GetCurrentTimerState
// 0x0001 (0x0001 - 0x0000)
struct RHQueueTimerWidgetBase_GetCurrentTimerState final
{
public:
	EQueueTimerState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_GetCurrentTimerState) == 0x000001, "Wrong alignment on RHQueueTimerWidgetBase_GetCurrentTimerState");
static_assert(sizeof(RHQueueTimerWidgetBase_GetCurrentTimerState) == 0x000001, "Wrong size on RHQueueTimerWidgetBase_GetCurrentTimerState");
static_assert(offsetof(RHQueueTimerWidgetBase_GetCurrentTimerState, ReturnValue) == 0x000000, "Member 'RHQueueTimerWidgetBase_GetCurrentTimerState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.GetQueueTime_PartHours
// 0x0004 (0x0004 - 0x0000)
struct RHQueueTimerWidgetBase_GetQueueTime_PartHours final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_GetQueueTime_PartHours) == 0x000004, "Wrong alignment on RHQueueTimerWidgetBase_GetQueueTime_PartHours");
static_assert(sizeof(RHQueueTimerWidgetBase_GetQueueTime_PartHours) == 0x000004, "Wrong size on RHQueueTimerWidgetBase_GetQueueTime_PartHours");
static_assert(offsetof(RHQueueTimerWidgetBase_GetQueueTime_PartHours, ReturnValue) == 0x000000, "Member 'RHQueueTimerWidgetBase_GetQueueTime_PartHours::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.GetQueueTime_PartMins
// 0x0004 (0x0004 - 0x0000)
struct RHQueueTimerWidgetBase_GetQueueTime_PartMins final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_GetQueueTime_PartMins) == 0x000004, "Wrong alignment on RHQueueTimerWidgetBase_GetQueueTime_PartMins");
static_assert(sizeof(RHQueueTimerWidgetBase_GetQueueTime_PartMins) == 0x000004, "Wrong size on RHQueueTimerWidgetBase_GetQueueTime_PartMins");
static_assert(offsetof(RHQueueTimerWidgetBase_GetQueueTime_PartMins, ReturnValue) == 0x000000, "Member 'RHQueueTimerWidgetBase_GetQueueTime_PartMins::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.GetQueueTime_PartSecs
// 0x0004 (0x0004 - 0x0000)
struct RHQueueTimerWidgetBase_GetQueueTime_PartSecs final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_GetQueueTime_PartSecs) == 0x000004, "Wrong alignment on RHQueueTimerWidgetBase_GetQueueTime_PartSecs");
static_assert(sizeof(RHQueueTimerWidgetBase_GetQueueTime_PartSecs) == 0x000004, "Wrong size on RHQueueTimerWidgetBase_GetQueueTime_PartSecs");
static_assert(offsetof(RHQueueTimerWidgetBase_GetQueueTime_PartSecs, ReturnValue) == 0x000000, "Member 'RHQueueTimerWidgetBase_GetQueueTime_PartSecs::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQueueTimerWidgetBase.GetQueueTime_TotalSecs
// 0x0004 (0x0004 - 0x0000)
struct RHQueueTimerWidgetBase_GetQueueTime_TotalSecs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQueueTimerWidgetBase_GetQueueTime_TotalSecs) == 0x000004, "Wrong alignment on RHQueueTimerWidgetBase_GetQueueTime_TotalSecs");
static_assert(sizeof(RHQueueTimerWidgetBase_GetQueueTime_TotalSecs) == 0x000004, "Wrong size on RHQueueTimerWidgetBase_GetQueueTime_TotalSecs");
static_assert(offsetof(RHQueueTimerWidgetBase_GetQueueTime_TotalSecs, ReturnValue) == 0x000000, "Member 'RHQueueTimerWidgetBase_GetQueueTime_TotalSecs::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetQueueInfoById
// 0x0018 (0x0018 - 0x0000)
struct RHQuickPlay_GetQueueInfoById final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_MatchmakingQueueInfo*               ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetQueueInfoById) == 0x000008, "Wrong alignment on RHQuickPlay_GetQueueInfoById");
static_assert(sizeof(RHQuickPlay_GetQueueInfoById) == 0x000018, "Wrong size on RHQuickPlay_GetQueueInfoById");
static_assert(offsetof(RHQuickPlay_GetQueueInfoById, QueueId) == 0x000000, "Member 'RHQuickPlay_GetQueueInfoById::QueueId' has a wrong offset!");
static_assert(offsetof(RHQuickPlay_GetQueueInfoById, ReturnValue) == 0x000010, "Member 'RHQuickPlay_GetQueueInfoById::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetQueues
// 0x0010 (0x0010 - 0x0000)
struct RHQuickPlay_GetQueues final
{
public:
	TArray<class URH_MatchmakingQueueInfo*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetQueues) == 0x000008, "Wrong alignment on RHQuickPlay_GetQueues");
static_assert(sizeof(RHQuickPlay_GetQueues) == 0x000010, "Wrong size on RHQuickPlay_GetQueues");
static_assert(offsetof(RHQuickPlay_GetQueues, ReturnValue) == 0x000000, "Member 'RHQuickPlay_GetQueues::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.HandlePartyMemberDataUpdated
// 0x0030 (0x0030 - 0x0000)
struct RHQuickPlay_HandlePartyMemberDataUpdated final
{
public:
	struct FRH_PartyMemberData                    PartyMember;                                       // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_HandlePartyMemberDataUpdated) == 0x000008, "Wrong alignment on RHQuickPlay_HandlePartyMemberDataUpdated");
static_assert(sizeof(RHQuickPlay_HandlePartyMemberDataUpdated) == 0x000030, "Wrong size on RHQuickPlay_HandlePartyMemberDataUpdated");
static_assert(offsetof(RHQuickPlay_HandlePartyMemberDataUpdated, PartyMember) == 0x000000, "Member 'RHQuickPlay_HandlePartyMemberDataUpdated::PartyMember' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.HandlePracticeButtonClicked
// 0x0018 (0x0018 - 0x0000)
struct RHQuickPlay_HandlePracticeButtonClicked final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TransitionTag;                                     // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_HandlePracticeButtonClicked) == 0x000008, "Wrong alignment on RHQuickPlay_HandlePracticeButtonClicked");
static_assert(sizeof(RHQuickPlay_HandlePracticeButtonClicked) == 0x000018, "Wrong size on RHQuickPlay_HandlePracticeButtonClicked");
static_assert(offsetof(RHQuickPlay_HandlePracticeButtonClicked, LevelName) == 0x000000, "Member 'RHQuickPlay_HandlePracticeButtonClicked::LevelName' has a wrong offset!");
static_assert(offsetof(RHQuickPlay_HandlePracticeButtonClicked, TransitionTag) == 0x000010, "Member 'RHQuickPlay_HandlePracticeButtonClicked::TransitionTag' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.OnControlQueuePermissionChanged
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlay_OnControlQueuePermissionChanged final
{
public:
	bool                                          CanControl;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_OnControlQueuePermissionChanged) == 0x000001, "Wrong alignment on RHQuickPlay_OnControlQueuePermissionChanged");
static_assert(sizeof(RHQuickPlay_OnControlQueuePermissionChanged) == 0x000001, "Wrong size on RHQuickPlay_OnControlQueuePermissionChanged");
static_assert(offsetof(RHQuickPlay_OnControlQueuePermissionChanged, CanControl) == 0x000000, "Member 'RHQuickPlay_OnControlQueuePermissionChanged::CanControl' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.OnQueuePermissionChanged
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlay_OnQueuePermissionChanged final
{
public:
	bool                                          CanQueue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_OnQueuePermissionChanged) == 0x000001, "Wrong alignment on RHQuickPlay_OnQueuePermissionChanged");
static_assert(sizeof(RHQuickPlay_OnQueuePermissionChanged) == 0x000001, "Wrong size on RHQuickPlay_OnQueuePermissionChanged");
static_assert(offsetof(RHQuickPlay_OnQueuePermissionChanged, CanQueue) == 0x000000, "Member 'RHQuickPlay_OnQueuePermissionChanged::CanQueue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.ReceiveMatchStatusUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlay_ReceiveMatchStatusUpdate final
{
public:
	ERH_MatchStatus                               CurrentMatchStatus;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_ReceiveMatchStatusUpdate) == 0x000001, "Wrong alignment on RHQuickPlay_ReceiveMatchStatusUpdate");
static_assert(sizeof(RHQuickPlay_ReceiveMatchStatusUpdate) == 0x000001, "Wrong size on RHQuickPlay_ReceiveMatchStatusUpdate");
static_assert(offsetof(RHQuickPlay_ReceiveMatchStatusUpdate, CurrentMatchStatus) == 0x000000, "Member 'RHQuickPlay_ReceiveMatchStatusUpdate::CurrentMatchStatus' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.SetCurrentlySelectedQueue
// 0x0018 (0x0018 - 0x0000)
struct RHQuickPlay_SetCurrentlySelectedQueue final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQuickPlay_SetCurrentlySelectedQueue) == 0x000008, "Wrong alignment on RHQuickPlay_SetCurrentlySelectedQueue");
static_assert(sizeof(RHQuickPlay_SetCurrentlySelectedQueue) == 0x000018, "Wrong size on RHQuickPlay_SetCurrentlySelectedQueue");
static_assert(offsetof(RHQuickPlay_SetCurrentlySelectedQueue, QueueId) == 0x000000, "Member 'RHQuickPlay_SetCurrentlySelectedQueue::QueueId' has a wrong offset!");
static_assert(offsetof(RHQuickPlay_SetCurrentlySelectedQueue, ReturnValue) == 0x000010, "Member 'RHQuickPlay_SetCurrentlySelectedQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetCurrentlySelectedQueue
// 0x0008 (0x0008 - 0x0000)
struct RHQuickPlay_GetCurrentlySelectedQueue final
{
public:
	class URH_MatchmakingQueueInfo*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetCurrentlySelectedQueue) == 0x000008, "Wrong alignment on RHQuickPlay_GetCurrentlySelectedQueue");
static_assert(sizeof(RHQuickPlay_GetCurrentlySelectedQueue) == 0x000008, "Wrong size on RHQuickPlay_GetCurrentlySelectedQueue");
static_assert(offsetof(RHQuickPlay_GetCurrentlySelectedQueue, ReturnValue) == 0x000000, "Member 'RHQuickPlay_GetCurrentlySelectedQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetDefaultSelectedQueueId
// 0x0010 (0x0010 - 0x0000)
struct RHQuickPlay_GetDefaultSelectedQueueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetDefaultSelectedQueueId) == 0x000008, "Wrong alignment on RHQuickPlay_GetDefaultSelectedQueueId");
static_assert(sizeof(RHQuickPlay_GetDefaultSelectedQueueId) == 0x000010, "Wrong size on RHQuickPlay_GetDefaultSelectedQueueId");
static_assert(offsetof(RHQuickPlay_GetDefaultSelectedQueueId, ReturnValue) == 0x000000, "Member 'RHQuickPlay_GetDefaultSelectedQueueId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHQuickPlay_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetPartyManager) == 0x000008, "Wrong alignment on RHQuickPlay_GetPartyManager");
static_assert(sizeof(RHQuickPlay_GetPartyManager) == 0x000008, "Wrong size on RHQuickPlay_GetPartyManager");
static_assert(offsetof(RHQuickPlay_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHQuickPlay_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.GetQueueDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHQuickPlay_GetQueueDataFactory final
{
public:
	class URHQueueDataFactory*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlay_GetQueueDataFactory) == 0x000008, "Wrong alignment on RHQuickPlay_GetQueueDataFactory");
static_assert(sizeof(RHQuickPlay_GetQueueDataFactory) == 0x000008, "Wrong size on RHQuickPlay_GetQueueDataFactory");
static_assert(offsetof(RHQuickPlay_GetQueueDataFactory, ReturnValue) == 0x000000, "Member 'RHQuickPlay_GetQueueDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlay.IsValidQueue
// 0x0018 (0x0018 - 0x0000)
struct RHQuickPlay_IsValidQueue final
{
public:
	class FString                                 QueueId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQuickPlay_IsValidQueue) == 0x000008, "Wrong alignment on RHQuickPlay_IsValidQueue");
static_assert(sizeof(RHQuickPlay_IsValidQueue) == 0x000018, "Wrong size on RHQuickPlay_IsValidQueue");
static_assert(offsetof(RHQuickPlay_IsValidQueue, QueueId) == 0x000000, "Member 'RHQuickPlay_IsValidQueue::QueueId' has a wrong offset!");
static_assert(offsetof(RHQuickPlay_IsValidQueue, ReturnValue) == 0x000010, "Member 'RHQuickPlay_IsValidQueue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.GetGameModeDisplayName
// 0x0020 (0x0020 - 0x0000)
struct RHQuickPlayWidget_GetGameModeDisplayName final
{
public:
	class FText                                   GameModeDisplayName;                               // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHQuickPlayWidget_GetGameModeDisplayName) == 0x000008, "Wrong alignment on RHQuickPlayWidget_GetGameModeDisplayName");
static_assert(sizeof(RHQuickPlayWidget_GetGameModeDisplayName) == 0x000020, "Wrong size on RHQuickPlayWidget_GetGameModeDisplayName");
static_assert(offsetof(RHQuickPlayWidget_GetGameModeDisplayName, GameModeDisplayName) == 0x000000, "Member 'RHQuickPlayWidget_GetGameModeDisplayName::GameModeDisplayName' has a wrong offset!");
static_assert(offsetof(RHQuickPlayWidget_GetGameModeDisplayName, ReturnValue) == 0x000018, "Member 'RHQuickPlayWidget_GetGameModeDisplayName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.IsPendingQueueUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_IsPendingQueueUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_IsPendingQueueUpdate) == 0x000001, "Wrong alignment on RHQuickPlayWidget_IsPendingQueueUpdate");
static_assert(sizeof(RHQuickPlayWidget_IsPendingQueueUpdate) == 0x000001, "Wrong size on RHQuickPlayWidget_IsPendingQueueUpdate");
static_assert(offsetof(RHQuickPlayWidget_IsPendingQueueUpdate, ReturnValue) == 0x000000, "Member 'RHQuickPlayWidget_IsPendingQueueUpdate::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.OnUpdatePenaltyTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct RHQuickPlayWidget_OnUpdatePenaltyTimeLeft final
{
public:
	int32                                         TimeLeft;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_OnUpdatePenaltyTimeLeft) == 0x000004, "Wrong alignment on RHQuickPlayWidget_OnUpdatePenaltyTimeLeft");
static_assert(sizeof(RHQuickPlayWidget_OnUpdatePenaltyTimeLeft) == 0x000004, "Wrong size on RHQuickPlayWidget_OnUpdatePenaltyTimeLeft");
static_assert(offsetof(RHQuickPlayWidget_OnUpdatePenaltyTimeLeft, TimeLeft) == 0x000000, "Member 'RHQuickPlayWidget_OnUpdatePenaltyTimeLeft::TimeLeft' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.OnUpdateQueueTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct RHQuickPlayWidget_OnUpdateQueueTimeElapsed final
{
public:
	float                                         TimeElapsed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_OnUpdateQueueTimeElapsed) == 0x000004, "Wrong alignment on RHQuickPlayWidget_OnUpdateQueueTimeElapsed");
static_assert(sizeof(RHQuickPlayWidget_OnUpdateQueueTimeElapsed) == 0x000004, "Wrong size on RHQuickPlayWidget_OnUpdateQueueTimeElapsed");
static_assert(offsetof(RHQuickPlayWidget_OnUpdateQueueTimeElapsed, TimeElapsed) == 0x000000, "Member 'RHQuickPlayWidget_OnUpdateQueueTimeElapsed::TimeElapsed' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.OnUpdateQuickPlayCanPlay
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_OnUpdateQuickPlayCanPlay final
{
public:
	bool                                          CanPlay;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_OnUpdateQuickPlayCanPlay) == 0x000001, "Wrong alignment on RHQuickPlayWidget_OnUpdateQuickPlayCanPlay");
static_assert(sizeof(RHQuickPlayWidget_OnUpdateQuickPlayCanPlay) == 0x000001, "Wrong size on RHQuickPlayWidget_OnUpdateQuickPlayCanPlay");
static_assert(offsetof(RHQuickPlayWidget_OnUpdateQuickPlayCanPlay, CanPlay) == 0x000000, "Member 'RHQuickPlayWidget_OnUpdateQuickPlayCanPlay::CanPlay' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.OnUpdateQuickPlayState
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_OnUpdateQuickPlayState final
{
public:
	EQuickPlayQueueState                          QueueState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_OnUpdateQuickPlayState) == 0x000001, "Wrong alignment on RHQuickPlayWidget_OnUpdateQuickPlayState");
static_assert(sizeof(RHQuickPlayWidget_OnUpdateQuickPlayState) == 0x000001, "Wrong size on RHQuickPlayWidget_OnUpdateQuickPlayState");
static_assert(offsetof(RHQuickPlayWidget_OnUpdateQuickPlayState, QueueState) == 0x000000, "Member 'RHQuickPlayWidget_OnUpdateQuickPlayState::QueueState' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.SetIsPendingQueueUpdate
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_SetIsPendingQueueUpdate final
{
public:
	bool                                          IsPending;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_SetIsPendingQueueUpdate) == 0x000001, "Wrong alignment on RHQuickPlayWidget_SetIsPendingQueueUpdate");
static_assert(sizeof(RHQuickPlayWidget_SetIsPendingQueueUpdate) == 0x000001, "Wrong size on RHQuickPlayWidget_SetIsPendingQueueUpdate");
static_assert(offsetof(RHQuickPlayWidget_SetIsPendingQueueUpdate, IsPending) == 0x000000, "Member 'RHQuickPlayWidget_SetIsPendingQueueUpdate::IsPending' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.GetCurrentQuickPlayState
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_GetCurrentQuickPlayState final
{
public:
	EQuickPlayQueueState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_GetCurrentQuickPlayState) == 0x000001, "Wrong alignment on RHQuickPlayWidget_GetCurrentQuickPlayState");
static_assert(sizeof(RHQuickPlayWidget_GetCurrentQuickPlayState) == 0x000001, "Wrong size on RHQuickPlayWidget_GetCurrentQuickPlayState");
static_assert(offsetof(RHQuickPlayWidget_GetCurrentQuickPlayState, ReturnValue) == 0x000000, "Member 'RHQuickPlayWidget_GetCurrentQuickPlayState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHQuickPlayWidget.GetSelectedQueueState
// 0x0001 (0x0001 - 0x0000)
struct RHQuickPlayWidget_GetSelectedQueueState final
{
public:
	EQuickPlayQueueState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHQuickPlayWidget_GetSelectedQueueState) == 0x000001, "Wrong alignment on RHQuickPlayWidget_GetSelectedQueueState");
static_assert(sizeof(RHQuickPlayWidget_GetSelectedQueueState) == 0x000001, "Wrong size on RHQuickPlayWidget_GetSelectedQueueState");
static_assert(offsetof(RHQuickPlayWidget_GetSelectedQueueState, ReturnValue) == 0x000000, "Member 'RHQuickPlayWidget_GetSelectedQueueState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHRedeemCodeScreenBase.OnRedeemCodeResult
// 0x0020 (0x0020 - 0x0000)
struct RHRedeemCodeScreenBase_OnRedeemCodeResult final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Error;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHRedeemCodeScreenBase_OnRedeemCodeResult) == 0x000008, "Wrong alignment on RHRedeemCodeScreenBase_OnRedeemCodeResult");
static_assert(sizeof(RHRedeemCodeScreenBase_OnRedeemCodeResult) == 0x000020, "Wrong size on RHRedeemCodeScreenBase_OnRedeemCodeResult");
static_assert(offsetof(RHRedeemCodeScreenBase_OnRedeemCodeResult, Success) == 0x000000, "Member 'RHRedeemCodeScreenBase_OnRedeemCodeResult::Success' has a wrong offset!");
static_assert(offsetof(RHRedeemCodeScreenBase_OnRedeemCodeResult, Error) == 0x000008, "Member 'RHRedeemCodeScreenBase_OnRedeemCodeResult::Error' has a wrong offset!");

// Function RallyHereStart.RHRedeemCodeScreenBase.RedeemCode
// 0x0010 (0x0010 - 0x0000)
struct RHRedeemCodeScreenBase_RedeemCode final
{
public:
	class FString                                 Code;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHRedeemCodeScreenBase_RedeemCode) == 0x000008, "Wrong alignment on RHRedeemCodeScreenBase_RedeemCode");
static_assert(sizeof(RHRedeemCodeScreenBase_RedeemCode) == 0x000010, "Wrong size on RHRedeemCodeScreenBase_RedeemCode");
static_assert(offsetof(RHRedeemCodeScreenBase_RedeemCode, Code) == 0x000000, "Member 'RHRedeemCodeScreenBase_RedeemCode::Code' has a wrong offset!");

// Function RallyHereStart.RHRedeemCodeScreenBase.IsPendingServerReply
// 0x0001 (0x0001 - 0x0000)
struct RHRedeemCodeScreenBase_IsPendingServerReply final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHRedeemCodeScreenBase_IsPendingServerReply) == 0x000001, "Wrong alignment on RHRedeemCodeScreenBase_IsPendingServerReply");
static_assert(sizeof(RHRedeemCodeScreenBase_IsPendingServerReply) == 0x000001, "Wrong size on RHRedeemCodeScreenBase_IsPendingServerReply");
static_assert(offsetof(RHRedeemCodeScreenBase_IsPendingServerReply, ReturnValue) == 0x000000, "Member 'RHRedeemCodeScreenBase_IsPendingServerReply::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSafeZone.SetBorderSides
// 0x0004 (0x0004 - 0x0000)
struct RHSafeZone_SetBorderSides final
{
public:
	bool                                          bInBorderLeft;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBorderRight;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBorderTop;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBorderBottom;                                   // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSafeZone_SetBorderSides) == 0x000001, "Wrong alignment on RHSafeZone_SetBorderSides");
static_assert(sizeof(RHSafeZone_SetBorderSides) == 0x000004, "Wrong size on RHSafeZone_SetBorderSides");
static_assert(offsetof(RHSafeZone_SetBorderSides, bInBorderLeft) == 0x000000, "Member 'RHSafeZone_SetBorderSides::bInBorderLeft' has a wrong offset!");
static_assert(offsetof(RHSafeZone_SetBorderSides, bInBorderRight) == 0x000001, "Member 'RHSafeZone_SetBorderSides::bInBorderRight' has a wrong offset!");
static_assert(offsetof(RHSafeZone_SetBorderSides, bInBorderTop) == 0x000002, "Member 'RHSafeZone_SetBorderSides::bInBorderTop' has a wrong offset!");
static_assert(offsetof(RHSafeZone_SetBorderSides, bInBorderBottom) == 0x000003, "Member 'RHSafeZone_SetBorderSides::bInBorderBottom' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackInterface.BindSettingCallbacks
// 0x0028 (0x0028 - 0x0000)
struct RHSettingsCallbackInterface_BindSettingCallbacks final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSettingDelegateStruct                 SettingDelegateStruct;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsCallbackInterface_BindSettingCallbacks) == 0x000004, "Wrong alignment on RHSettingsCallbackInterface_BindSettingCallbacks");
static_assert(sizeof(RHSettingsCallbackInterface_BindSettingCallbacks) == 0x000028, "Wrong size on RHSettingsCallbackInterface_BindSettingCallbacks");
static_assert(offsetof(RHSettingsCallbackInterface_BindSettingCallbacks, Name_0) == 0x000000, "Member 'RHSettingsCallbackInterface_BindSettingCallbacks::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_BindSettingCallbacks, SettingDelegateStruct) == 0x000008, "Member 'RHSettingsCallbackInterface_BindSettingCallbacks::SettingDelegateStruct' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackInterface.GetSettingAsBool
// 0x000C (0x000C - 0x0000)
struct RHSettingsCallbackInterface_GetSettingAsBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutBool;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackInterface_GetSettingAsBool) == 0x000004, "Wrong alignment on RHSettingsCallbackInterface_GetSettingAsBool");
static_assert(sizeof(RHSettingsCallbackInterface_GetSettingAsBool) == 0x00000C, "Wrong size on RHSettingsCallbackInterface_GetSettingAsBool");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsBool, Name_0) == 0x000000, "Member 'RHSettingsCallbackInterface_GetSettingAsBool::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsBool, OutBool) == 0x000008, "Member 'RHSettingsCallbackInterface_GetSettingAsBool::OutBool' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsBool, ReturnValue) == 0x000009, "Member 'RHSettingsCallbackInterface_GetSettingAsBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackInterface.GetSettingAsFloat
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsCallbackInterface_GetSettingAsFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFloat;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackInterface_GetSettingAsFloat) == 0x000004, "Wrong alignment on RHSettingsCallbackInterface_GetSettingAsFloat");
static_assert(sizeof(RHSettingsCallbackInterface_GetSettingAsFloat) == 0x000010, "Wrong size on RHSettingsCallbackInterface_GetSettingAsFloat");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsFloat, Name_0) == 0x000000, "Member 'RHSettingsCallbackInterface_GetSettingAsFloat::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsFloat, OutFloat) == 0x000008, "Member 'RHSettingsCallbackInterface_GetSettingAsFloat::OutFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsFloat, ReturnValue) == 0x00000C, "Member 'RHSettingsCallbackInterface_GetSettingAsFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackInterface.GetSettingAsInt
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsCallbackInterface_GetSettingAsInt final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInt;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackInterface_GetSettingAsInt) == 0x000004, "Wrong alignment on RHSettingsCallbackInterface_GetSettingAsInt");
static_assert(sizeof(RHSettingsCallbackInterface_GetSettingAsInt) == 0x000010, "Wrong size on RHSettingsCallbackInterface_GetSettingAsInt");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsInt, Name_0) == 0x000000, "Member 'RHSettingsCallbackInterface_GetSettingAsInt::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsInt, OutInt) == 0x000008, "Member 'RHSettingsCallbackInterface_GetSettingAsInt::OutInt' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackInterface_GetSettingAsInt, ReturnValue) == 0x00000C, "Member 'RHSettingsCallbackInterface_GetSettingAsInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.BindSettingCallback
// 0x0030 (0x0030 - 0x0000)
struct RHSettingsCallbackStatics_BindSettingCallback final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSettingDelegateStruct                 SettingDelegateStruct;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsCallbackStatics_BindSettingCallback) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_BindSettingCallback");
static_assert(sizeof(RHSettingsCallbackStatics_BindSettingCallback) == 0x000030, "Wrong size on RHSettingsCallbackStatics_BindSettingCallback");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallback, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_BindSettingCallback::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallback, SettingDelegateStruct) == 0x000008, "Member 'RHSettingsCallbackStatics_BindSettingCallback::SettingDelegateStruct' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallback, WorldContextObject) == 0x000028, "Member 'RHSettingsCallbackStatics_BindSettingCallback::WorldContextObject' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.BindSettingCallbackToPlayer
// 0x0030 (0x0030 - 0x0000)
struct RHSettingsCallbackStatics_BindSettingCallbackToPlayer final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSettingDelegateStruct                 SettingDelegateStruct;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayer;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsCallbackStatics_BindSettingCallbackToPlayer) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_BindSettingCallbackToPlayer");
static_assert(sizeof(RHSettingsCallbackStatics_BindSettingCallbackToPlayer) == 0x000030, "Wrong size on RHSettingsCallbackStatics_BindSettingCallbackToPlayer");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallbackToPlayer, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_BindSettingCallbackToPlayer::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallbackToPlayer, SettingDelegateStruct) == 0x000008, "Member 'RHSettingsCallbackStatics_BindSettingCallbackToPlayer::SettingDelegateStruct' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_BindSettingCallbackToPlayer, InPlayer) == 0x000028, "Member 'RHSettingsCallbackStatics_BindSettingCallbackToPlayer::InPlayer' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsBool
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutBool;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsBool) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsBool");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsBool) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsBool");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBool, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBool::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBool, OutBool) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBool::OutBool' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBool, WorldContextObject) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBool, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsBoolFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutBool;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer, OutBool) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer::OutBool' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer, InPlayer) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsBoolFromPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsFloat
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFloat;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsFloat) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsFloat");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsFloat) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsFloat");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloat, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloat::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloat, OutFloat) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloat::OutFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloat, WorldContextObject) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloat::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloat, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsFloatFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFloat;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer, OutFloat) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer::OutFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer, InPlayer) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsFloatFromPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsInt
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsInt final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInt;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsInt) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsInt");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsInt) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsInt");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsInt, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsInt::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsInt, OutInt) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsInt::OutInt' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsInt, WorldContextObject) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsInt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsInt, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingAsIntFromPlayer
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutInt;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      InPlayer;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer) == 0x000020, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer, Name_0) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer, OutInt) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer::OutInt' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer, InPlayer) == 0x000010, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer, ReturnValue) == 0x000018, "Member 'RHSettingsCallbackStatics_GetLocalSettingAsIntFromPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingsCallbackInterface
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IRHSettingsCallbackInterface> ReturnValue;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface) == 0x000018, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface, WorldContextObject) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface, ReturnValue) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingsCallbackInterface::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsCallbackStatics.GetLocalSettingsCallbackInterfaceFromPlayer
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer final
{
public:
	class APlayerController*                      InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IRHSettingsCallbackInterface> ReturnValue;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer) == 0x000008, "Wrong alignment on RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer");
static_assert(sizeof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer) == 0x000018, "Wrong size on RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer, InPlayer) == 0x000000, "Member 'RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer, ReturnValue) == 0x000008, "Member 'RHSettingsCallbackStatics_GetLocalSettingsCallbackInterfaceFromPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsContainerConfigAsset.GetSettingDescription
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsContainerConfigAsset_GetSettingDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsContainerConfigAsset_GetSettingDescription) == 0x000008, "Wrong alignment on RHSettingsContainerConfigAsset_GetSettingDescription");
static_assert(sizeof(RHSettingsContainerConfigAsset_GetSettingDescription) == 0x000018, "Wrong size on RHSettingsContainerConfigAsset_GetSettingDescription");
static_assert(offsetof(RHSettingsContainerConfigAsset_GetSettingDescription, ReturnValue) == 0x000000, "Member 'RHSettingsContainerConfigAsset_GetSettingDescription::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsContainerConfigAsset.GetSettingName
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsContainerConfigAsset_GetSettingName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsContainerConfigAsset_GetSettingName) == 0x000008, "Wrong alignment on RHSettingsContainerConfigAsset_GetSettingName");
static_assert(sizeof(RHSettingsContainerConfigAsset_GetSettingName) == 0x000018, "Wrong size on RHSettingsContainerConfigAsset_GetSettingName");
static_assert(offsetof(RHSettingsContainerConfigAsset_GetSettingName, ReturnValue) == 0x000000, "Member 'RHSettingsContainerConfigAsset_GetSettingName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsSectionConfigAsset.GetHeading
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsSectionConfigAsset_GetHeading final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsSectionConfigAsset_GetHeading) == 0x000008, "Wrong alignment on RHSettingsSectionConfigAsset_GetHeading");
static_assert(sizeof(RHSettingsSectionConfigAsset_GetHeading) == 0x000018, "Wrong size on RHSettingsSectionConfigAsset_GetHeading");
static_assert(offsetof(RHSettingsSectionConfigAsset_GetHeading, ReturnValue) == 0x000000, "Member 'RHSettingsSectionConfigAsset_GetHeading::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsPageConfigAsset.GetPageName
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsPageConfigAsset_GetPageName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsPageConfigAsset_GetPageName) == 0x000008, "Wrong alignment on RHSettingsPageConfigAsset_GetPageName");
static_assert(sizeof(RHSettingsPageConfigAsset_GetPageName) == 0x000018, "Wrong size on RHSettingsPageConfigAsset_GetPageName");
static_assert(offsetof(RHSettingsPageConfigAsset_GetPageName, ReturnValue) == 0x000000, "Member 'RHSettingsPageConfigAsset_GetPageName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.ApplyScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsDataFactory_ApplyScreenResolution final
{
public:
	struct FIntPoint                              ScreenResolution;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_ApplyScreenResolution) == 0x000004, "Wrong alignment on RHSettingsDataFactory_ApplyScreenResolution");
static_assert(sizeof(RHSettingsDataFactory_ApplyScreenResolution) == 0x000008, "Wrong size on RHSettingsDataFactory_ApplyScreenResolution");
static_assert(offsetof(RHSettingsDataFactory_ApplyScreenResolution, ScreenResolution) == 0x000000, "Member 'RHSettingsDataFactory_ApplyScreenResolution::ScreenResolution' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.ApplySettingAsBool
// 0x000C (0x000C - 0x0000)
struct RHSettingsDataFactory_ApplySettingAsBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsDataFactory_ApplySettingAsBool) == 0x000004, "Wrong alignment on RHSettingsDataFactory_ApplySettingAsBool");
static_assert(sizeof(RHSettingsDataFactory_ApplySettingAsBool) == 0x00000C, "Wrong size on RHSettingsDataFactory_ApplySettingAsBool");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsBool, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_ApplySettingAsBool::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsBool, Value) == 0x000008, "Member 'RHSettingsDataFactory_ApplySettingAsBool::Value' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.ApplySettingAsFloat
// 0x000C (0x000C - 0x0000)
struct RHSettingsDataFactory_ApplySettingAsFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_ApplySettingAsFloat) == 0x000004, "Wrong alignment on RHSettingsDataFactory_ApplySettingAsFloat");
static_assert(sizeof(RHSettingsDataFactory_ApplySettingAsFloat) == 0x00000C, "Wrong size on RHSettingsDataFactory_ApplySettingAsFloat");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsFloat, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_ApplySettingAsFloat::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsFloat, Value) == 0x000008, "Member 'RHSettingsDataFactory_ApplySettingAsFloat::Value' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.ApplySettingAsInt
// 0x000C (0x000C - 0x0000)
struct RHSettingsDataFactory_ApplySettingAsInt final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_ApplySettingAsInt) == 0x000004, "Wrong alignment on RHSettingsDataFactory_ApplySettingAsInt");
static_assert(sizeof(RHSettingsDataFactory_ApplySettingAsInt) == 0x00000C, "Wrong size on RHSettingsDataFactory_ApplySettingAsInt");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsInt, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_ApplySettingAsInt::Name_0' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_ApplySettingAsInt, Value) == 0x000008, "Member 'RHSettingsDataFactory_ApplySettingAsInt::Value' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.IsUserLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsDataFactory_IsUserLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_IsUserLoggedIn) == 0x000001, "Wrong alignment on RHSettingsDataFactory_IsUserLoggedIn");
static_assert(sizeof(RHSettingsDataFactory_IsUserLoggedIn) == 0x000001, "Wrong size on RHSettingsDataFactory_IsUserLoggedIn");
static_assert(offsetof(RHSettingsDataFactory_IsUserLoggedIn, ReturnValue) == 0x000000, "Member 'RHSettingsDataFactory_IsUserLoggedIn::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.OnSettingChanged
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsDataFactory_OnSettingChanged final
{
public:
	class FName                                   SettingId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsDataFactory_OnSettingChanged) == 0x000004, "Wrong alignment on RHSettingsDataFactory_OnSettingChanged");
static_assert(sizeof(RHSettingsDataFactory_OnSettingChanged) == 0x000010, "Wrong size on RHSettingsDataFactory_OnSettingChanged");
static_assert(offsetof(RHSettingsDataFactory_OnSettingChanged, SettingId) == 0x000000, "Member 'RHSettingsDataFactory_OnSettingChanged::SettingId' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_OnSettingChanged, SettingValue) == 0x000008, "Member 'RHSettingsDataFactory_OnSettingChanged::SettingValue' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_OnSettingChanged, ReturnValue) == 0x00000C, "Member 'RHSettingsDataFactory_OnSettingChanged::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.SaveSettingAsBool
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsDataFactory_SaveSettingAsBool final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_SaveSettingAsBool) == 0x000004, "Wrong alignment on RHSettingsDataFactory_SaveSettingAsBool");
static_assert(sizeof(RHSettingsDataFactory_SaveSettingAsBool) == 0x000008, "Wrong size on RHSettingsDataFactory_SaveSettingAsBool");
static_assert(offsetof(RHSettingsDataFactory_SaveSettingAsBool, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_SaveSettingAsBool::Name_0' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.SaveSettingAsFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsDataFactory_SaveSettingAsFloat final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_SaveSettingAsFloat) == 0x000004, "Wrong alignment on RHSettingsDataFactory_SaveSettingAsFloat");
static_assert(sizeof(RHSettingsDataFactory_SaveSettingAsFloat) == 0x000008, "Wrong size on RHSettingsDataFactory_SaveSettingAsFloat");
static_assert(offsetof(RHSettingsDataFactory_SaveSettingAsFloat, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_SaveSettingAsFloat::Name_0' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.SaveSettingAsInt
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsDataFactory_SaveSettingAsInt final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_SaveSettingAsInt) == 0x000004, "Wrong alignment on RHSettingsDataFactory_SaveSettingAsInt");
static_assert(sizeof(RHSettingsDataFactory_SaveSettingAsInt) == 0x000008, "Wrong size on RHSettingsDataFactory_SaveSettingAsInt");
static_assert(offsetof(RHSettingsDataFactory_SaveSettingAsInt, Name_0) == 0x000000, "Member 'RHSettingsDataFactory_SaveSettingAsInt::Name_0' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.SetSelectedRegion
// 0x0018 (0x0018 - 0x0000)
struct RHSettingsDataFactory_SetSelectedRegion final
{
public:
	class FString                                 RegionId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsDataFactory_SetSelectedRegion) == 0x000008, "Wrong alignment on RHSettingsDataFactory_SetSelectedRegion");
static_assert(sizeof(RHSettingsDataFactory_SetSelectedRegion) == 0x000018, "Wrong size on RHSettingsDataFactory_SetSelectedRegion");
static_assert(offsetof(RHSettingsDataFactory_SetSelectedRegion, RegionId) == 0x000000, "Member 'RHSettingsDataFactory_SetSelectedRegion::RegionId' has a wrong offset!");
static_assert(offsetof(RHSettingsDataFactory_SetSelectedRegion, ReturnValue) == 0x000010, "Member 'RHSettingsDataFactory_SetSelectedRegion::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.GetScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsDataFactory_GetScreenResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_GetScreenResolution) == 0x000004, "Wrong alignment on RHSettingsDataFactory_GetScreenResolution");
static_assert(sizeof(RHSettingsDataFactory_GetScreenResolution) == 0x000008, "Wrong size on RHSettingsDataFactory_GetScreenResolution");
static_assert(offsetof(RHSettingsDataFactory_GetScreenResolution, ReturnValue) == 0x000000, "Member 'RHSettingsDataFactory_GetScreenResolution::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsDataFactory.GetSelectedRegion
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsDataFactory_GetSelectedRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsDataFactory_GetSelectedRegion) == 0x000008, "Wrong alignment on RHSettingsDataFactory_GetSelectedRegion");
static_assert(sizeof(RHSettingsDataFactory_GetSelectedRegion) == 0x000010, "Wrong size on RHSettingsDataFactory_GetSelectedRegion");
static_assert(offsetof(RHSettingsDataFactory_GetSelectedRegion, ReturnValue) == 0x000000, "Member 'RHSettingsDataFactory_GetSelectedRegion::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyBoolValue
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_ApplyBoolValue final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_ApplyBoolValue) == 0x000001, "Wrong alignment on RHSettingsInfoBase_ApplyBoolValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyBoolValue) == 0x000002, "Wrong size on RHSettingsInfoBase_ApplyBoolValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyBoolValue, InBool) == 0x000000, "Member 'RHSettingsInfoBase_ApplyBoolValue::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyBoolValue, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_ApplyBoolValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyFloatValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_ApplyFloatValue final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_ApplyFloatValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_ApplyFloatValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyFloatValue) == 0x000008, "Wrong size on RHSettingsInfoBase_ApplyFloatValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyFloatValue, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_ApplyFloatValue::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyFloatValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_ApplyFloatValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyIntValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_ApplyIntValue final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_ApplyIntValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_ApplyIntValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyIntValue) == 0x000008, "Wrong size on RHSettingsInfoBase_ApplyIntValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyIntValue, inInt) == 0x000000, "Member 'RHSettingsInfoBase_ApplyIntValue::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyIntValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_ApplyIntValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyKeyBindValue
// 0x0080 (0x0080 - 0x0000)
struct RHSettingsInfoBase_ApplyKeyBindValue final
{
public:
	struct FRHKeyBind                             InKeyBind;                                         // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_ApplyKeyBindValue) == 0x000008, "Wrong alignment on RHSettingsInfoBase_ApplyKeyBindValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyKeyBindValue) == 0x000080, "Wrong size on RHSettingsInfoBase_ApplyKeyBindValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyKeyBindValue, InKeyBind) == 0x000000, "Member 'RHSettingsInfoBase_ApplyKeyBindValue::InKeyBind' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyKeyBindValue, ReturnValue) == 0x000078, "Member 'RHSettingsInfoBase_ApplyKeyBindValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyPreviewBoolValue
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_ApplyPreviewBoolValue final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_ApplyPreviewBoolValue) == 0x000001, "Wrong alignment on RHSettingsInfoBase_ApplyPreviewBoolValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyPreviewBoolValue) == 0x000002, "Wrong size on RHSettingsInfoBase_ApplyPreviewBoolValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewBoolValue, InBool) == 0x000000, "Member 'RHSettingsInfoBase_ApplyPreviewBoolValue::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewBoolValue, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_ApplyPreviewBoolValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyPreviewFloatValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_ApplyPreviewFloatValue final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_ApplyPreviewFloatValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_ApplyPreviewFloatValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyPreviewFloatValue) == 0x000008, "Wrong size on RHSettingsInfoBase_ApplyPreviewFloatValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewFloatValue, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_ApplyPreviewFloatValue::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewFloatValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_ApplyPreviewFloatValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ApplyPreviewIntValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_ApplyPreviewIntValue final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_ApplyPreviewIntValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_ApplyPreviewIntValue");
static_assert(sizeof(RHSettingsInfoBase_ApplyPreviewIntValue) == 0x000008, "Wrong size on RHSettingsInfoBase_ApplyPreviewIntValue");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewIntValue, inInt) == 0x000000, "Member 'RHSettingsInfoBase_ApplyPreviewIntValue::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_ApplyPreviewIntValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_ApplyPreviewIntValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetDirtyValueBool
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetDirtyValueBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetDirtyValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetDirtyValueBool");
static_assert(sizeof(RHSettingsInfoBase_GetDirtyValueBool) == 0x000001, "Wrong size on RHSettingsInfoBase_GetDirtyValueBool");
static_assert(offsetof(RHSettingsInfoBase_GetDirtyValueBool, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetDirtyValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetDirtyValueFloat
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetDirtyValueFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetDirtyValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetDirtyValueFloat");
static_assert(sizeof(RHSettingsInfoBase_GetDirtyValueFloat) == 0x000004, "Wrong size on RHSettingsInfoBase_GetDirtyValueFloat");
static_assert(offsetof(RHSettingsInfoBase_GetDirtyValueFloat, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetDirtyValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetDirtyValueInt
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetDirtyValueInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetDirtyValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetDirtyValueInt");
static_assert(sizeof(RHSettingsInfoBase_GetDirtyValueInt) == 0x000004, "Wrong size on RHSettingsInfoBase_GetDirtyValueInt");
static_assert(offsetof(RHSettingsInfoBase_GetDirtyValueInt, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetDirtyValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetDirtyValueKeyBind
// 0x0078 (0x0078 - 0x0000)
struct RHSettingsInfoBase_GetDirtyValueKeyBind final
{
public:
	struct FRHKeyBind                             ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetDirtyValueKeyBind) == 0x000008, "Wrong alignment on RHSettingsInfoBase_GetDirtyValueKeyBind");
static_assert(sizeof(RHSettingsInfoBase_GetDirtyValueKeyBind) == 0x000078, "Wrong size on RHSettingsInfoBase_GetDirtyValueKeyBind");
static_assert(offsetof(RHSettingsInfoBase_GetDirtyValueKeyBind, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetDirtyValueKeyBind::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetPreviewValueBool
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetPreviewValueBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetPreviewValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetPreviewValueBool");
static_assert(sizeof(RHSettingsInfoBase_GetPreviewValueBool) == 0x000001, "Wrong size on RHSettingsInfoBase_GetPreviewValueBool");
static_assert(offsetof(RHSettingsInfoBase_GetPreviewValueBool, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetPreviewValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetPreviewValueFloat
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetPreviewValueFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetPreviewValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetPreviewValueFloat");
static_assert(sizeof(RHSettingsInfoBase_GetPreviewValueFloat) == 0x000004, "Wrong size on RHSettingsInfoBase_GetPreviewValueFloat");
static_assert(offsetof(RHSettingsInfoBase_GetPreviewValueFloat, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetPreviewValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetPreviewValueInt
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetPreviewValueInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetPreviewValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetPreviewValueInt");
static_assert(sizeof(RHSettingsInfoBase_GetPreviewValueInt) == 0x000004, "Wrong size on RHSettingsInfoBase_GetPreviewValueInt");
static_assert(offsetof(RHSettingsInfoBase_GetPreviewValueInt, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetPreviewValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetValueBool
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetValueBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetValueBool");
static_assert(sizeof(RHSettingsInfoBase_GetValueBool) == 0x000001, "Wrong size on RHSettingsInfoBase_GetValueBool");
static_assert(offsetof(RHSettingsInfoBase_GetValueBool, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetValueFloat
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetValueFloat final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetValueFloat");
static_assert(sizeof(RHSettingsInfoBase_GetValueFloat) == 0x000004, "Wrong size on RHSettingsInfoBase_GetValueFloat");
static_assert(offsetof(RHSettingsInfoBase_GetValueFloat, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetValueInt
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetValueInt final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetValueInt");
static_assert(sizeof(RHSettingsInfoBase_GetValueInt) == 0x000004, "Wrong size on RHSettingsInfoBase_GetValueInt");
static_assert(offsetof(RHSettingsInfoBase_GetValueInt, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetValueKeyBind
// 0x0078 (0x0078 - 0x0000)
struct RHSettingsInfoBase_GetValueKeyBind final
{
public:
	struct FRHKeyBind                             ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetValueKeyBind) == 0x000008, "Wrong alignment on RHSettingsInfoBase_GetValueKeyBind");
static_assert(sizeof(RHSettingsInfoBase_GetValueKeyBind) == 0x000078, "Wrong size on RHSettingsInfoBase_GetValueKeyBind");
static_assert(offsetof(RHSettingsInfoBase_GetValueKeyBind, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetValueKeyBind::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueBoolApplied
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_OnValueBoolApplied final
{
public:
	bool                                          AppliedBool;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueBoolApplied) == 0x000001, "Wrong alignment on RHSettingsInfoBase_OnValueBoolApplied");
static_assert(sizeof(RHSettingsInfoBase_OnValueBoolApplied) == 0x000001, "Wrong size on RHSettingsInfoBase_OnValueBoolApplied");
static_assert(offsetof(RHSettingsInfoBase_OnValueBoolApplied, AppliedBool) == 0x000000, "Member 'RHSettingsInfoBase_OnValueBoolApplied::AppliedBool' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueBoolSaved
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_OnValueBoolSaved final
{
public:
	bool                                          SavedBool;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueBoolSaved) == 0x000001, "Wrong alignment on RHSettingsInfoBase_OnValueBoolSaved");
static_assert(sizeof(RHSettingsInfoBase_OnValueBoolSaved) == 0x000001, "Wrong size on RHSettingsInfoBase_OnValueBoolSaved");
static_assert(offsetof(RHSettingsInfoBase_OnValueBoolSaved, SavedBool) == 0x000000, "Member 'RHSettingsInfoBase_OnValueBoolSaved::SavedBool' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueFloatApplied
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_OnValueFloatApplied final
{
public:
	float                                         AppliedFloat;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueFloatApplied) == 0x000004, "Wrong alignment on RHSettingsInfoBase_OnValueFloatApplied");
static_assert(sizeof(RHSettingsInfoBase_OnValueFloatApplied) == 0x000004, "Wrong size on RHSettingsInfoBase_OnValueFloatApplied");
static_assert(offsetof(RHSettingsInfoBase_OnValueFloatApplied, AppliedFloat) == 0x000000, "Member 'RHSettingsInfoBase_OnValueFloatApplied::AppliedFloat' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueFloatSaved
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_OnValueFloatSaved final
{
public:
	float                                         SavedFloat;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueFloatSaved) == 0x000004, "Wrong alignment on RHSettingsInfoBase_OnValueFloatSaved");
static_assert(sizeof(RHSettingsInfoBase_OnValueFloatSaved) == 0x000004, "Wrong size on RHSettingsInfoBase_OnValueFloatSaved");
static_assert(offsetof(RHSettingsInfoBase_OnValueFloatSaved, SavedFloat) == 0x000000, "Member 'RHSettingsInfoBase_OnValueFloatSaved::SavedFloat' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueIntApplied
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_OnValueIntApplied final
{
public:
	int32                                         AppliedInt;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueIntApplied) == 0x000004, "Wrong alignment on RHSettingsInfoBase_OnValueIntApplied");
static_assert(sizeof(RHSettingsInfoBase_OnValueIntApplied) == 0x000004, "Wrong size on RHSettingsInfoBase_OnValueIntApplied");
static_assert(offsetof(RHSettingsInfoBase_OnValueIntApplied, AppliedInt) == 0x000000, "Member 'RHSettingsInfoBase_OnValueIntApplied::AppliedInt' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueIntSaved
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_OnValueIntSaved final
{
public:
	int32                                         SavedInt;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueIntSaved) == 0x000004, "Wrong alignment on RHSettingsInfoBase_OnValueIntSaved");
static_assert(sizeof(RHSettingsInfoBase_OnValueIntSaved) == 0x000004, "Wrong size on RHSettingsInfoBase_OnValueIntSaved");
static_assert(offsetof(RHSettingsInfoBase_OnValueIntSaved, SavedInt) == 0x000000, "Member 'RHSettingsInfoBase_OnValueIntSaved::SavedInt' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueKeyBindApplied
// 0x0078 (0x0078 - 0x0000)
struct RHSettingsInfoBase_OnValueKeyBindApplied final
{
public:
	struct FRHKeyBind                             AppliedKeyBind;                                    // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueKeyBindApplied) == 0x000008, "Wrong alignment on RHSettingsInfoBase_OnValueKeyBindApplied");
static_assert(sizeof(RHSettingsInfoBase_OnValueKeyBindApplied) == 0x000078, "Wrong size on RHSettingsInfoBase_OnValueKeyBindApplied");
static_assert(offsetof(RHSettingsInfoBase_OnValueKeyBindApplied, AppliedKeyBind) == 0x000000, "Member 'RHSettingsInfoBase_OnValueKeyBindApplied::AppliedKeyBind' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.OnValueKeyBindSaved
// 0x0078 (0x0078 - 0x0000)
struct RHSettingsInfoBase_OnValueKeyBindSaved final
{
public:
	struct FRHKeyBind                             SavedKeyBind;                                      // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_OnValueKeyBindSaved) == 0x000008, "Wrong alignment on RHSettingsInfoBase_OnValueKeyBindSaved");
static_assert(sizeof(RHSettingsInfoBase_OnValueKeyBindSaved) == 0x000078, "Wrong size on RHSettingsInfoBase_OnValueKeyBindSaved");
static_assert(offsetof(RHSettingsInfoBase_OnValueKeyBindSaved, SavedKeyBind) == 0x000000, "Member 'RHSettingsInfoBase_OnValueKeyBindSaved::SavedKeyBind' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SaveBoolValue
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_SaveBoolValue final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_SaveBoolValue) == 0x000001, "Wrong alignment on RHSettingsInfoBase_SaveBoolValue");
static_assert(sizeof(RHSettingsInfoBase_SaveBoolValue) == 0x000002, "Wrong size on RHSettingsInfoBase_SaveBoolValue");
static_assert(offsetof(RHSettingsInfoBase_SaveBoolValue, InBool) == 0x000000, "Member 'RHSettingsInfoBase_SaveBoolValue::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SaveBoolValue, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_SaveBoolValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SaveFloatValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SaveFloatValue final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SaveFloatValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SaveFloatValue");
static_assert(sizeof(RHSettingsInfoBase_SaveFloatValue) == 0x000008, "Wrong size on RHSettingsInfoBase_SaveFloatValue");
static_assert(offsetof(RHSettingsInfoBase_SaveFloatValue, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_SaveFloatValue::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SaveFloatValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SaveFloatValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SaveIntValue
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SaveIntValue final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SaveIntValue) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SaveIntValue");
static_assert(sizeof(RHSettingsInfoBase_SaveIntValue) == 0x000008, "Wrong size on RHSettingsInfoBase_SaveIntValue");
static_assert(offsetof(RHSettingsInfoBase_SaveIntValue, inInt) == 0x000000, "Member 'RHSettingsInfoBase_SaveIntValue::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SaveIntValue, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SaveIntValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SaveKeyBindValue
// 0x0080 (0x0080 - 0x0000)
struct RHSettingsInfoBase_SaveKeyBindValue final
{
public:
	struct FRHKeyBind                             InKeyBind;                                         // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SaveKeyBindValue) == 0x000008, "Wrong alignment on RHSettingsInfoBase_SaveKeyBindValue");
static_assert(sizeof(RHSettingsInfoBase_SaveKeyBindValue) == 0x000080, "Wrong size on RHSettingsInfoBase_SaveKeyBindValue");
static_assert(offsetof(RHSettingsInfoBase_SaveKeyBindValue, InKeyBind) == 0x000000, "Member 'RHSettingsInfoBase_SaveKeyBindValue::InKeyBind' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SaveKeyBindValue, ReturnValue) == 0x000078, "Member 'RHSettingsInfoBase_SaveKeyBindValue::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetDesiredValueBool
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_SetDesiredValueBool final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_SetDesiredValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_SetDesiredValueBool");
static_assert(sizeof(RHSettingsInfoBase_SetDesiredValueBool) == 0x000002, "Wrong size on RHSettingsInfoBase_SetDesiredValueBool");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueBool, InBool) == 0x000000, "Member 'RHSettingsInfoBase_SetDesiredValueBool::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueBool, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_SetDesiredValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetDesiredValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SetDesiredValueFloat final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SetDesiredValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SetDesiredValueFloat");
static_assert(sizeof(RHSettingsInfoBase_SetDesiredValueFloat) == 0x000008, "Wrong size on RHSettingsInfoBase_SetDesiredValueFloat");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueFloat, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_SetDesiredValueFloat::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueFloat, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SetDesiredValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetDesiredValueInt
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SetDesiredValueInt final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SetDesiredValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SetDesiredValueInt");
static_assert(sizeof(RHSettingsInfoBase_SetDesiredValueInt) == 0x000008, "Wrong size on RHSettingsInfoBase_SetDesiredValueInt");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueInt, inInt) == 0x000000, "Member 'RHSettingsInfoBase_SetDesiredValueInt::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueInt, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SetDesiredValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetDesiredValueKeyBind
// 0x0080 (0x0080 - 0x0000)
struct RHSettingsInfoBase_SetDesiredValueKeyBind final
{
public:
	struct FRHKeyBind                             InKeyBind;                                         // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SetDesiredValueKeyBind) == 0x000008, "Wrong alignment on RHSettingsInfoBase_SetDesiredValueKeyBind");
static_assert(sizeof(RHSettingsInfoBase_SetDesiredValueKeyBind) == 0x000080, "Wrong size on RHSettingsInfoBase_SetDesiredValueKeyBind");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueKeyBind, InKeyBind) == 0x000000, "Member 'RHSettingsInfoBase_SetDesiredValueKeyBind::InKeyBind' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetDesiredValueKeyBind, ReturnValue) == 0x000078, "Member 'RHSettingsInfoBase_SetDesiredValueKeyBind::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetPreviewValueBool
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_SetPreviewValueBool final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_SetPreviewValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_SetPreviewValueBool");
static_assert(sizeof(RHSettingsInfoBase_SetPreviewValueBool) == 0x000002, "Wrong size on RHSettingsInfoBase_SetPreviewValueBool");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueBool, InBool) == 0x000000, "Member 'RHSettingsInfoBase_SetPreviewValueBool::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueBool, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_SetPreviewValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetPreviewValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SetPreviewValueFloat final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SetPreviewValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SetPreviewValueFloat");
static_assert(sizeof(RHSettingsInfoBase_SetPreviewValueFloat) == 0x000008, "Wrong size on RHSettingsInfoBase_SetPreviewValueFloat");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueFloat, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_SetPreviewValueFloat::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueFloat, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SetPreviewValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.SetPreviewValueInt
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_SetPreviewValueInt final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_SetPreviewValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_SetPreviewValueInt");
static_assert(sizeof(RHSettingsInfoBase_SetPreviewValueInt) == 0x000008, "Wrong size on RHSettingsInfoBase_SetPreviewValueInt");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueInt, inInt) == 0x000000, "Member 'RHSettingsInfoBase_SetPreviewValueInt::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_SetPreviewValueInt, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_SetPreviewValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.UpdateTextOptions
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsInfoBase_UpdateTextOptions final
{
public:
	TArray<class FText>                           NewOptions;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_UpdateTextOptions) == 0x000008, "Wrong alignment on RHSettingsInfoBase_UpdateTextOptions");
static_assert(sizeof(RHSettingsInfoBase_UpdateTextOptions) == 0x000010, "Wrong size on RHSettingsInfoBase_UpdateTextOptions");
static_assert(offsetof(RHSettingsInfoBase_UpdateTextOptions, NewOptions) == 0x000000, "Member 'RHSettingsInfoBase_UpdateTextOptions::NewOptions' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.CanRevert
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_CanRevert final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_CanRevert) == 0x000001, "Wrong alignment on RHSettingsInfoBase_CanRevert");
static_assert(sizeof(RHSettingsInfoBase_CanRevert) == 0x000001, "Wrong size on RHSettingsInfoBase_CanRevert");
static_assert(offsetof(RHSettingsInfoBase_CanRevert, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_CanRevert::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.FixupInvalidBool
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_FixupInvalidBool final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_FixupInvalidBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_FixupInvalidBool");
static_assert(sizeof(RHSettingsInfoBase_FixupInvalidBool) == 0x000002, "Wrong size on RHSettingsInfoBase_FixupInvalidBool");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidBool, InBool) == 0x000000, "Member 'RHSettingsInfoBase_FixupInvalidBool::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidBool, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_FixupInvalidBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.FixupInvalidFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_FixupInvalidFloat final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_FixupInvalidFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_FixupInvalidFloat");
static_assert(sizeof(RHSettingsInfoBase_FixupInvalidFloat) == 0x000008, "Wrong size on RHSettingsInfoBase_FixupInvalidFloat");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidFloat, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_FixupInvalidFloat::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidFloat, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_FixupInvalidFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.FixupInvalidInt
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_FixupInvalidInt final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_FixupInvalidInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_FixupInvalidInt");
static_assert(sizeof(RHSettingsInfoBase_FixupInvalidInt) == 0x000008, "Wrong size on RHSettingsInfoBase_FixupInvalidInt");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidInt, inInt) == 0x000000, "Member 'RHSettingsInfoBase_FixupInvalidInt::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidInt, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_FixupInvalidInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.FixupInvalidKeyBind
// 0x00F0 (0x00F0 - 0x0000)
struct RHSettingsInfoBase_FixupInvalidKeyBind final
{
public:
	struct FRHKeyBind                             InKey;                                             // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
	struct FRHKeyBind                             ReturnValue;                                       // 0x0078(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_FixupInvalidKeyBind) == 0x000008, "Wrong alignment on RHSettingsInfoBase_FixupInvalidKeyBind");
static_assert(sizeof(RHSettingsInfoBase_FixupInvalidKeyBind) == 0x0000F0, "Wrong size on RHSettingsInfoBase_FixupInvalidKeyBind");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidKeyBind, InKey) == 0x000000, "Member 'RHSettingsInfoBase_FixupInvalidKeyBind::InKey' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_FixupInvalidKeyBind, ReturnValue) == 0x000078, "Member 'RHSettingsInfoBase_FixupInvalidKeyBind::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetIsPercent
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetIsPercent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetIsPercent) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetIsPercent");
static_assert(sizeof(RHSettingsInfoBase_GetIsPercent) == 0x000001, "Wrong size on RHSettingsInfoBase_GetIsPercent");
static_assert(offsetof(RHSettingsInfoBase_GetIsPercent, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetIsPercent::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetMax
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetMax) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetMax");
static_assert(sizeof(RHSettingsInfoBase_GetMax) == 0x000004, "Wrong size on RHSettingsInfoBase_GetMax");
static_assert(offsetof(RHSettingsInfoBase_GetMax, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetMax::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetMaxDisplay
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetMaxDisplay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetMaxDisplay) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetMaxDisplay");
static_assert(sizeof(RHSettingsInfoBase_GetMaxDisplay) == 0x000004, "Wrong size on RHSettingsInfoBase_GetMaxDisplay");
static_assert(offsetof(RHSettingsInfoBase_GetMaxDisplay, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetMaxDisplay::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetMin
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetMin) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetMin");
static_assert(sizeof(RHSettingsInfoBase_GetMin) == 0x000004, "Wrong size on RHSettingsInfoBase_GetMin");
static_assert(offsetof(RHSettingsInfoBase_GetMin, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetMin::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetMinDisplay
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetMinDisplay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetMinDisplay) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetMinDisplay");
static_assert(sizeof(RHSettingsInfoBase_GetMinDisplay) == 0x000004, "Wrong size on RHSettingsInfoBase_GetMinDisplay");
static_assert(offsetof(RHSettingsInfoBase_GetMinDisplay, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetMinDisplay::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetNumTextOptions
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetNumTextOptions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetNumTextOptions) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetNumTextOptions");
static_assert(sizeof(RHSettingsInfoBase_GetNumTextOptions) == 0x000004, "Wrong size on RHSettingsInfoBase_GetNumTextOptions");
static_assert(offsetof(RHSettingsInfoBase_GetNumTextOptions, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetNumTextOptions::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetRHHUD
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_GetRHHUD final
{
public:
	class ARHHUDCommon*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetRHHUD) == 0x000008, "Wrong alignment on RHSettingsInfoBase_GetRHHUD");
static_assert(sizeof(RHSettingsInfoBase_GetRHHUD) == 0x000008, "Wrong size on RHSettingsInfoBase_GetRHHUD");
static_assert(offsetof(RHSettingsInfoBase_GetRHHUD, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetRHHUD::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetRound
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetRound final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetRound) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetRound");
static_assert(sizeof(RHSettingsInfoBase_GetRound) == 0x000001, "Wrong size on RHSettingsInfoBase_GetRound");
static_assert(offsetof(RHSettingsInfoBase_GetRound, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetRound::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetRoundToNearest
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetRoundToNearest final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetRoundToNearest) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetRoundToNearest");
static_assert(sizeof(RHSettingsInfoBase_GetRoundToNearest) == 0x000004, "Wrong size on RHSettingsInfoBase_GetRoundToNearest");
static_assert(offsetof(RHSettingsInfoBase_GetRoundToNearest, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetRoundToNearest::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetSettingName
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_GetSettingName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetSettingName) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetSettingName");
static_assert(sizeof(RHSettingsInfoBase_GetSettingName) == 0x000008, "Wrong size on RHSettingsInfoBase_GetSettingName");
static_assert(offsetof(RHSettingsInfoBase_GetSettingName, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetSettingName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetSettingSaveType
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetSettingSaveType final
{
public:
	ERHSettingSaveType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetSettingSaveType) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetSettingSaveType");
static_assert(sizeof(RHSettingsInfoBase_GetSettingSaveType) == 0x000001, "Wrong size on RHSettingsInfoBase_GetSettingSaveType");
static_assert(offsetof(RHSettingsInfoBase_GetSettingSaveType, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetSettingSaveType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetSettingType
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_GetSettingType final
{
public:
	ERHSettingType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetSettingType) == 0x000001, "Wrong alignment on RHSettingsInfoBase_GetSettingType");
static_assert(sizeof(RHSettingsInfoBase_GetSettingType) == 0x000001, "Wrong size on RHSettingsInfoBase_GetSettingType");
static_assert(offsetof(RHSettingsInfoBase_GetSettingType, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetSettingType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetStep
// 0x0004 (0x0004 - 0x0000)
struct RHSettingsInfoBase_GetStep final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetStep) == 0x000004, "Wrong alignment on RHSettingsInfoBase_GetStep");
static_assert(sizeof(RHSettingsInfoBase_GetStep) == 0x000004, "Wrong size on RHSettingsInfoBase_GetStep");
static_assert(offsetof(RHSettingsInfoBase_GetStep, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetStep::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetTextOption
// 0x0020 (0x0020 - 0x0000)
struct RHSettingsInfoBase_GetTextOption final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetTextOption) == 0x000008, "Wrong alignment on RHSettingsInfoBase_GetTextOption");
static_assert(sizeof(RHSettingsInfoBase_GetTextOption) == 0x000020, "Wrong size on RHSettingsInfoBase_GetTextOption");
static_assert(offsetof(RHSettingsInfoBase_GetTextOption, Index_0) == 0x000000, "Member 'RHSettingsInfoBase_GetTextOption::Index_0' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_GetTextOption, ReturnValue) == 0x000008, "Member 'RHSettingsInfoBase_GetTextOption::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.GetTextOptions
// 0x0010 (0x0010 - 0x0000)
struct RHSettingsInfoBase_GetTextOptions final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_GetTextOptions) == 0x000008, "Wrong alignment on RHSettingsInfoBase_GetTextOptions");
static_assert(sizeof(RHSettingsInfoBase_GetTextOptions) == 0x000010, "Wrong size on RHSettingsInfoBase_GetTextOptions");
static_assert(offsetof(RHSettingsInfoBase_GetTextOptions, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_GetTextOptions::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.IsDirty
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_IsDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_IsDirty) == 0x000001, "Wrong alignment on RHSettingsInfoBase_IsDirty");
static_assert(sizeof(RHSettingsInfoBase_IsDirty) == 0x000001, "Wrong size on RHSettingsInfoBase_IsDirty");
static_assert(offsetof(RHSettingsInfoBase_IsDirty, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_IsDirty::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.IsValidValueBool
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsInfoBase_IsValidValueBool final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_IsValidValueBool) == 0x000001, "Wrong alignment on RHSettingsInfoBase_IsValidValueBool");
static_assert(sizeof(RHSettingsInfoBase_IsValidValueBool) == 0x000002, "Wrong size on RHSettingsInfoBase_IsValidValueBool");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueBool, InBool) == 0x000000, "Member 'RHSettingsInfoBase_IsValidValueBool::InBool' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueBool, ReturnValue) == 0x000001, "Member 'RHSettingsInfoBase_IsValidValueBool::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.IsValidValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_IsValidValueFloat final
{
public:
	float                                         InFloat;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_IsValidValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_IsValidValueFloat");
static_assert(sizeof(RHSettingsInfoBase_IsValidValueFloat) == 0x000008, "Wrong size on RHSettingsInfoBase_IsValidValueFloat");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueFloat, InFloat) == 0x000000, "Member 'RHSettingsInfoBase_IsValidValueFloat::InFloat' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueFloat, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_IsValidValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.IsValidValueInt
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_IsValidValueInt final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_IsValidValueInt) == 0x000004, "Wrong alignment on RHSettingsInfoBase_IsValidValueInt");
static_assert(sizeof(RHSettingsInfoBase_IsValidValueInt) == 0x000008, "Wrong size on RHSettingsInfoBase_IsValidValueInt");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueInt, inInt) == 0x000000, "Member 'RHSettingsInfoBase_IsValidValueInt::inInt' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueInt, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_IsValidValueInt::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.IsValidValueKeyBind
// 0x0080 (0x0080 - 0x0000)
struct RHSettingsInfoBase_IsValidValueKeyBind final
{
public:
	struct FRHKeyBind                             InKey;                                             // 0x0000(0x0078)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSettingsInfoBase_IsValidValueKeyBind) == 0x000008, "Wrong alignment on RHSettingsInfoBase_IsValidValueKeyBind");
static_assert(sizeof(RHSettingsInfoBase_IsValidValueKeyBind) == 0x000080, "Wrong size on RHSettingsInfoBase_IsValidValueKeyBind");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueKeyBind, InKey) == 0x000000, "Member 'RHSettingsInfoBase_IsValidValueKeyBind::InKey' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_IsValidValueKeyBind, ReturnValue) == 0x000078, "Member 'RHSettingsInfoBase_IsValidValueKeyBind::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.NeedsSave
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_NeedsSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_NeedsSave) == 0x000001, "Wrong alignment on RHSettingsInfoBase_NeedsSave");
static_assert(sizeof(RHSettingsInfoBase_NeedsSave) == 0x000001, "Wrong size on RHSettingsInfoBase_NeedsSave");
static_assert(offsetof(RHSettingsInfoBase_NeedsSave, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_NeedsSave::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.RoundToNearestValueFloat
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfoBase_RoundToNearestValueFloat final
{
public:
	float                                         ValueToRound;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_RoundToNearestValueFloat) == 0x000004, "Wrong alignment on RHSettingsInfoBase_RoundToNearestValueFloat");
static_assert(sizeof(RHSettingsInfoBase_RoundToNearestValueFloat) == 0x000008, "Wrong size on RHSettingsInfoBase_RoundToNearestValueFloat");
static_assert(offsetof(RHSettingsInfoBase_RoundToNearestValueFloat, ValueToRound) == 0x000000, "Member 'RHSettingsInfoBase_RoundToNearestValueFloat::ValueToRound' has a wrong offset!");
static_assert(offsetof(RHSettingsInfoBase_RoundToNearestValueFloat, ReturnValue) == 0x000004, "Member 'RHSettingsInfoBase_RoundToNearestValueFloat::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfoBase.ShouldSaveForDataAnalysis
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsInfoBase_ShouldSaveForDataAnalysis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfoBase_ShouldSaveForDataAnalysis) == 0x000001, "Wrong alignment on RHSettingsInfoBase_ShouldSaveForDataAnalysis");
static_assert(sizeof(RHSettingsInfoBase_ShouldSaveForDataAnalysis) == 0x000001, "Wrong size on RHSettingsInfoBase_ShouldSaveForDataAnalysis");
static_assert(offsetof(RHSettingsInfoBase_ShouldSaveForDataAnalysis, ReturnValue) == 0x000000, "Member 'RHSettingsInfoBase_ShouldSaveForDataAnalysis::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfo_Brightness.GetRHSettingsDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfo_Brightness_GetRHSettingsDataFactory final
{
public:
	class URHSettingsDataFactory*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfo_Brightness_GetRHSettingsDataFactory) == 0x000008, "Wrong alignment on RHSettingsInfo_Brightness_GetRHSettingsDataFactory");
static_assert(sizeof(RHSettingsInfo_Brightness_GetRHSettingsDataFactory) == 0x000008, "Wrong size on RHSettingsInfo_Brightness_GetRHSettingsDataFactory");
static_assert(offsetof(RHSettingsInfo_Brightness_GetRHSettingsDataFactory, ReturnValue) == 0x000000, "Member 'RHSettingsInfo_Brightness_GetRHSettingsDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsInfo_Generic.GetRHSettingsDataFactory
// 0x0008 (0x0008 - 0x0000)
struct RHSettingsInfo_Generic_GetRHSettingsDataFactory final
{
public:
	class URHSettingsDataFactory*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsInfo_Generic_GetRHSettingsDataFactory) == 0x000008, "Wrong alignment on RHSettingsInfo_Generic_GetRHSettingsDataFactory");
static_assert(sizeof(RHSettingsInfo_Generic_GetRHSettingsDataFactory) == 0x000008, "Wrong size on RHSettingsInfo_Generic_GetRHSettingsDataFactory");
static_assert(offsetof(RHSettingsInfo_Generic_GetRHSettingsDataFactory, ReturnValue) == 0x000000, "Member 'RHSettingsInfo_Generic_GetRHSettingsDataFactory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.CanGamepadNavigate
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsWidget_CanGamepadNavigate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_CanGamepadNavigate) == 0x000001, "Wrong alignment on RHSettingsWidget_CanGamepadNavigate");
static_assert(sizeof(RHSettingsWidget_CanGamepadNavigate) == 0x000001, "Wrong size on RHSettingsWidget_CanGamepadNavigate");
static_assert(offsetof(RHSettingsWidget_CanGamepadNavigate, ReturnValue) == 0x000000, "Member 'RHSettingsWidget_CanGamepadNavigate::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.IsApplied
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsWidget_IsApplied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_IsApplied) == 0x000001, "Wrong alignment on RHSettingsWidget_IsApplied");
static_assert(sizeof(RHSettingsWidget_IsApplied) == 0x000001, "Wrong size on RHSettingsWidget_IsApplied");
static_assert(offsetof(RHSettingsWidget_IsApplied, ReturnValue) == 0x000000, "Member 'RHSettingsWidget_IsApplied::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.IsSaved
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsWidget_IsSaved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_IsSaved) == 0x000001, "Wrong alignment on RHSettingsWidget_IsSaved");
static_assert(sizeof(RHSettingsWidget_IsSaved) == 0x000001, "Wrong size on RHSettingsWidget_IsSaved");
static_assert(offsetof(RHSettingsWidget_IsSaved, ReturnValue) == 0x000000, "Member 'RHSettingsWidget_IsSaved::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.OnInputAttached
// 0x0002 (0x0002 - 0x0000)
struct RHSettingsWidget_OnInputAttached final
{
public:
	bool                                          bGamepadAttached;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMouseAttached;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_OnInputAttached) == 0x000001, "Wrong alignment on RHSettingsWidget_OnInputAttached");
static_assert(sizeof(RHSettingsWidget_OnInputAttached) == 0x000002, "Wrong size on RHSettingsWidget_OnInputAttached");
static_assert(offsetof(RHSettingsWidget_OnInputAttached, bGamepadAttached) == 0x000000, "Member 'RHSettingsWidget_OnInputAttached::bGamepadAttached' has a wrong offset!");
static_assert(offsetof(RHSettingsWidget_OnInputAttached, bMouseAttached) == 0x000001, "Member 'RHSettingsWidget_OnInputAttached::bMouseAttached' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.OnSettingsInfoValueChanged
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsWidget_OnSettingsInfoValueChanged final
{
public:
	bool                                          bChangedExternally;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_OnSettingsInfoValueChanged) == 0x000001, "Wrong alignment on RHSettingsWidget_OnSettingsInfoValueChanged");
static_assert(sizeof(RHSettingsWidget_OnSettingsInfoValueChanged) == 0x000001, "Wrong size on RHSettingsWidget_OnSettingsInfoValueChanged");
static_assert(offsetof(RHSettingsWidget_OnSettingsInfoValueChanged, bChangedExternally) == 0x000000, "Member 'RHSettingsWidget_OnSettingsInfoValueChanged::bChangedExternally' has a wrong offset!");

// Function RallyHereStart.RHSettingsWidget.HasPreview
// 0x0001 (0x0001 - 0x0000)
struct RHSettingsWidget_HasPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSettingsWidget_HasPreview) == 0x000001, "Wrong alignment on RHSettingsWidget_HasPreview");
static_assert(sizeof(RHSettingsWidget_HasPreview) == 0x000001, "Wrong size on RHSettingsWidget_HasPreview");
static_assert(offsetof(RHSettingsWidget_HasPreview, ReturnValue) == 0x000000, "Member 'RHSettingsWidget_HasPreview::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.GetSubListFromData
// 0x0018 (0x0018 - 0x0000)
struct RHSocialPanelBase_GetSubListFromData final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Out_List;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_GetSubListFromData) == 0x000008, "Wrong alignment on RHSocialPanelBase_GetSubListFromData");
static_assert(sizeof(RHSocialPanelBase_GetSubListFromData) == 0x000018, "Wrong size on RHSocialPanelBase_GetSubListFromData");
static_assert(offsetof(RHSocialPanelBase_GetSubListFromData, Source) == 0x000000, "Member 'RHSocialPanelBase_GetSubListFromData::Source' has a wrong offset!");
static_assert(offsetof(RHSocialPanelBase_GetSubListFromData, Out_List) == 0x000008, "Member 'RHSocialPanelBase_GetSubListFromData::Out_List' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.OnDataChange
// 0x0010 (0x0010 - 0x0000)
struct RHSocialPanelBase_OnDataChange final
{
public:
	TArray<struct FRHSocialOverlaySectionInfo>    Sections;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_OnDataChange) == 0x000008, "Wrong alignment on RHSocialPanelBase_OnDataChange");
static_assert(sizeof(RHSocialPanelBase_OnDataChange) == 0x000010, "Wrong size on RHSocialPanelBase_OnDataChange");
static_assert(offsetof(RHSocialPanelBase_OnDataChange, Sections) == 0x000000, "Member 'RHSocialPanelBase_OnDataChange::Sections' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.SetDataSource
// 0x0008 (0x0008 - 0x0000)
struct RHSocialPanelBase_SetDataSource final
{
public:
	class URHSocialOverlay*                       Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_SetDataSource) == 0x000008, "Wrong alignment on RHSocialPanelBase_SetDataSource");
static_assert(sizeof(RHSocialPanelBase_SetDataSource) == 0x000008, "Wrong size on RHSocialPanelBase_SetDataSource");
static_assert(offsetof(RHSocialPanelBase_SetDataSource, Source) == 0x000000, "Member 'RHSocialPanelBase_SetDataSource::Source' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.SetupTreeView
// 0x0008 (0x0008 - 0x0000)
struct RHSocialPanelBase_SetupTreeView final
{
public:
	class UTreeView*                              List;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_SetupTreeView) == 0x000008, "Wrong alignment on RHSocialPanelBase_SetupTreeView");
static_assert(sizeof(RHSocialPanelBase_SetupTreeView) == 0x000008, "Wrong size on RHSocialPanelBase_SetupTreeView");
static_assert(offsetof(RHSocialPanelBase_SetupTreeView, List) == 0x000000, "Member 'RHSocialPanelBase_SetupTreeView::List' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.GetDataSource
// 0x0008 (0x0008 - 0x0000)
struct RHSocialPanelBase_GetDataSource final
{
public:
	class URHSocialOverlay*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_GetDataSource) == 0x000008, "Wrong alignment on RHSocialPanelBase_GetDataSource");
static_assert(sizeof(RHSocialPanelBase_GetDataSource) == 0x000008, "Wrong size on RHSocialPanelBase_GetDataSource");
static_assert(offsetof(RHSocialPanelBase_GetDataSource, ReturnValue) == 0x000000, "Member 'RHSocialPanelBase_GetDataSource::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialPanelBase.GetTreeView
// 0x0008 (0x0008 - 0x0000)
struct RHSocialPanelBase_GetTreeView final
{
public:
	class UTreeView*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialPanelBase_GetTreeView) == 0x000008, "Wrong alignment on RHSocialPanelBase_GetTreeView");
static_assert(sizeof(RHSocialPanelBase_GetTreeView) == 0x000008, "Wrong size on RHSocialPanelBase_GetTreeView");
static_assert(offsetof(RHSocialPanelBase_GetTreeView, ReturnValue) == 0x000000, "Member 'RHSocialPanelBase_GetTreeView::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialOverlay.OnPartyMemberChanged
// 0x0010 (0x0010 - 0x0000)
struct RHSocialOverlay_OnPartyMemberChanged final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialOverlay_OnPartyMemberChanged) == 0x000004, "Wrong alignment on RHSocialOverlay_OnPartyMemberChanged");
static_assert(sizeof(RHSocialOverlay_OnPartyMemberChanged) == 0x000010, "Wrong size on RHSocialOverlay_OnPartyMemberChanged");
static_assert(offsetof(RHSocialOverlay_OnPartyMemberChanged, PlayerUuid) == 0x000000, "Member 'RHSocialOverlay_OnPartyMemberChanged::PlayerUuid' has a wrong offset!");

// Function RallyHereStart.RHSocialOverlay.PlayTransition
// 0x0010 (0x0010 - 0x0000)
struct RHSocialOverlay_PlayTransition final
{
public:
	class UWidgetAnimation*                       Animation;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TransitionOut;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHSocialOverlay_PlayTransition) == 0x000008, "Wrong alignment on RHSocialOverlay_PlayTransition");
static_assert(sizeof(RHSocialOverlay_PlayTransition) == 0x000010, "Wrong size on RHSocialOverlay_PlayTransition");
static_assert(offsetof(RHSocialOverlay_PlayTransition, Animation) == 0x000000, "Member 'RHSocialOverlay_PlayTransition::Animation' has a wrong offset!");
static_assert(offsetof(RHSocialOverlay_PlayTransition, TransitionOut) == 0x000008, "Member 'RHSocialOverlay_PlayTransition::TransitionOut' has a wrong offset!");

// Function RallyHereStart.RHSocialOverlay.GetCategories
// 0x0020 (0x0020 - 0x0000)
struct RHSocialOverlay_GetCategories final
{
public:
	TArray<ERHSocialOverlaySection>               Categories;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class URHDataSocialCategory*>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialOverlay_GetCategories) == 0x000008, "Wrong alignment on RHSocialOverlay_GetCategories");
static_assert(sizeof(RHSocialOverlay_GetCategories) == 0x000020, "Wrong size on RHSocialOverlay_GetCategories");
static_assert(offsetof(RHSocialOverlay_GetCategories, Categories) == 0x000000, "Member 'RHSocialOverlay_GetCategories::Categories' has a wrong offset!");
static_assert(offsetof(RHSocialOverlay_GetCategories, ReturnValue) == 0x000010, "Member 'RHSocialOverlay_GetCategories::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialOverlay.GetCategory
// 0x0020 (0x0020 - 0x0000)
struct RHSocialOverlay_GetCategory final
{
public:
	struct FRHSocialOverlaySectionInfo            Section;                                           // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHDataSocialCategory*                  ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialOverlay_GetCategory) == 0x000008, "Wrong alignment on RHSocialOverlay_GetCategory");
static_assert(sizeof(RHSocialOverlay_GetCategory) == 0x000020, "Wrong size on RHSocialOverlay_GetCategory");
static_assert(offsetof(RHSocialOverlay_GetCategory, Section) == 0x000000, "Member 'RHSocialOverlay_GetCategory::Section' has a wrong offset!");
static_assert(offsetof(RHSocialOverlay_GetCategory, ReturnValue) == 0x000018, "Member 'RHSocialOverlay_GetCategory::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialOverlay.GetData
// 0x0010 (0x0010 - 0x0000)
struct RHSocialOverlay_GetData final
{
public:
	TArray<class URHDataSocialCategory*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialOverlay_GetData) == 0x000008, "Wrong alignment on RHSocialOverlay_GetData");
static_assert(sizeof(RHSocialOverlay_GetData) == 0x000010, "Wrong size on RHSocialOverlay_GetData");
static_assert(offsetof(RHSocialOverlay_GetData, ReturnValue) == 0x000000, "Member 'RHSocialOverlay_GetData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialSearchPanel.DoSearch
// 0x0018 (0x0018 - 0x0000)
struct RHSocialSearchPanel_DoSearch final
{
public:
	class FText                                   SearchTerm;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialSearchPanel_DoSearch) == 0x000008, "Wrong alignment on RHSocialSearchPanel_DoSearch");
static_assert(sizeof(RHSocialSearchPanel_DoSearch) == 0x000018, "Wrong size on RHSocialSearchPanel_DoSearch");
static_assert(offsetof(RHSocialSearchPanel_DoSearch, SearchTerm) == 0x000000, "Member 'RHSocialSearchPanel_DoSearch::SearchTerm' has a wrong offset!");

// Function RallyHereStart.RHSocialSearchPanel.OnSearchComplete
// 0x0040 (0x0040 - 0x0000)
struct RHSocialSearchPanel_OnSearchComplete final
{
public:
	class FText                                   SearchTerm;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Error;                                             // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class URHDataSocialPlayer*>            Results;                                           // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialSearchPanel_OnSearchComplete) == 0x000008, "Wrong alignment on RHSocialSearchPanel_OnSearchComplete");
static_assert(sizeof(RHSocialSearchPanel_OnSearchComplete) == 0x000040, "Wrong size on RHSocialSearchPanel_OnSearchComplete");
static_assert(offsetof(RHSocialSearchPanel_OnSearchComplete, SearchTerm) == 0x000000, "Member 'RHSocialSearchPanel_OnSearchComplete::SearchTerm' has a wrong offset!");
static_assert(offsetof(RHSocialSearchPanel_OnSearchComplete, Error) == 0x000018, "Member 'RHSocialSearchPanel_OnSearchComplete::Error' has a wrong offset!");
static_assert(offsetof(RHSocialSearchPanel_OnSearchComplete, Results) == 0x000030, "Member 'RHSocialSearchPanel_OnSearchComplete::Results' has a wrong offset!");

// Function RallyHereStart.RHSocialSearchPanel.GetActiveSearchTerm
// 0x0018 (0x0018 - 0x0000)
struct RHSocialSearchPanel_GetActiveSearchTerm final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialSearchPanel_GetActiveSearchTerm) == 0x000008, "Wrong alignment on RHSocialSearchPanel_GetActiveSearchTerm");
static_assert(sizeof(RHSocialSearchPanel_GetActiveSearchTerm) == 0x000018, "Wrong size on RHSocialSearchPanel_GetActiveSearchTerm");
static_assert(offsetof(RHSocialSearchPanel_GetActiveSearchTerm, ReturnValue) == 0x000000, "Member 'RHSocialSearchPanel_GetActiveSearchTerm::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHSocialWidgetBase_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_GetPartyManager) == 0x000008, "Wrong alignment on RHSocialWidgetBase_GetPartyManager");
static_assert(sizeof(RHSocialWidgetBase_GetPartyManager) == 0x000008, "Wrong size on RHSocialWidgetBase_GetPartyManager");
static_assert(offsetof(RHSocialWidgetBase_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHSocialWidgetBase_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.HandleSpecificPartyDataAdded
// 0x0030 (0x0030 - 0x0000)
struct RHSocialWidgetBase_HandleSpecificPartyDataAdded final
{
public:
	struct FRH_PartyMemberData                    PartyMember;                                       // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_HandleSpecificPartyDataAdded) == 0x000008, "Wrong alignment on RHSocialWidgetBase_HandleSpecificPartyDataAdded");
static_assert(sizeof(RHSocialWidgetBase_HandleSpecificPartyDataAdded) == 0x000030, "Wrong size on RHSocialWidgetBase_HandleSpecificPartyDataAdded");
static_assert(offsetof(RHSocialWidgetBase_HandleSpecificPartyDataAdded, PartyMember) == 0x000000, "Member 'RHSocialWidgetBase_HandleSpecificPartyDataAdded::PartyMember' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.HandleSpecificPartyDataUpdated
// 0x0030 (0x0030 - 0x0000)
struct RHSocialWidgetBase_HandleSpecificPartyDataUpdated final
{
public:
	struct FRH_PartyMemberData                    PartyMember;                                       // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_HandleSpecificPartyDataUpdated) == 0x000008, "Wrong alignment on RHSocialWidgetBase_HandleSpecificPartyDataUpdated");
static_assert(sizeof(RHSocialWidgetBase_HandleSpecificPartyDataUpdated) == 0x000030, "Wrong size on RHSocialWidgetBase_HandleSpecificPartyDataUpdated");
static_assert(offsetof(RHSocialWidgetBase_HandleSpecificPartyDataUpdated, PartyMember) == 0x000000, "Member 'RHSocialWidgetBase_HandleSpecificPartyDataUpdated::PartyMember' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.HandleSpecificPartyIdDataUpdated
// 0x0010 (0x0010 - 0x0000)
struct RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated) == 0x000004, "Wrong alignment on RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated");
static_assert(sizeof(RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated) == 0x000010, "Wrong size on RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated");
static_assert(offsetof(RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated, PlayerId) == 0x000000, "Member 'RHSocialWidgetBase_HandleSpecificPartyIdDataUpdated::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.RHUpdateFriends
// 0x0010 (0x0010 - 0x0000)
struct RHSocialWidgetBase_RHUpdateFriends final
{
public:
	TArray<class URH_RHFriendAndPlatformFriend*>  UpdatedFriends;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_RHUpdateFriends) == 0x000008, "Wrong alignment on RHSocialWidgetBase_RHUpdateFriends");
static_assert(sizeof(RHSocialWidgetBase_RHUpdateFriends) == 0x000010, "Wrong size on RHSocialWidgetBase_RHUpdateFriends");
static_assert(offsetof(RHSocialWidgetBase_RHUpdateFriends, UpdatedFriends) == 0x000000, "Member 'RHSocialWidgetBase_RHUpdateFriends::UpdatedFriends' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.GetIncomingInvitesCount
// 0x0004 (0x0004 - 0x0000)
struct RHSocialWidgetBase_GetIncomingInvitesCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_GetIncomingInvitesCount) == 0x000004, "Wrong alignment on RHSocialWidgetBase_GetIncomingInvitesCount");
static_assert(sizeof(RHSocialWidgetBase_GetIncomingInvitesCount) == 0x000004, "Wrong size on RHSocialWidgetBase_GetIncomingInvitesCount");
static_assert(offsetof(RHSocialWidgetBase_GetIncomingInvitesCount, ReturnValue) == 0x000000, "Member 'RHSocialWidgetBase_GetIncomingInvitesCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSocialWidgetBase.GetOnlineFriendCount
// 0x0004 (0x0004 - 0x0000)
struct RHSocialWidgetBase_GetOnlineFriendCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSocialWidgetBase_GetOnlineFriendCount) == 0x000004, "Wrong alignment on RHSocialWidgetBase_GetOnlineFriendCount");
static_assert(sizeof(RHSocialWidgetBase_GetOnlineFriendCount) == 0x000004, "Wrong size on RHSocialWidgetBase_GetOnlineFriendCount");
static_assert(offsetof(RHSocialWidgetBase_GetOnlineFriendCount, ReturnValue) == 0x000000, "Member 'RHSocialWidgetBase_GetOnlineFriendCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHSortableGridPanel.AddChildAutoLayout
// 0x0010 (0x0010 - 0x0000)
struct RHSortableGridPanel_AddChildAutoLayout final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridSlot*                              ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHSortableGridPanel_AddChildAutoLayout) == 0x000008, "Wrong alignment on RHSortableGridPanel_AddChildAutoLayout");
static_assert(sizeof(RHSortableGridPanel_AddChildAutoLayout) == 0x000010, "Wrong size on RHSortableGridPanel_AddChildAutoLayout");
static_assert(offsetof(RHSortableGridPanel_AddChildAutoLayout, Content) == 0x000000, "Member 'RHSortableGridPanel_AddChildAutoLayout::Content' has a wrong offset!");
static_assert(offsetof(RHSortableGridPanel_AddChildAutoLayout, ReturnValue) == 0x000008, "Member 'RHSortableGridPanel_AddChildAutoLayout::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStatsMgr.GetBattlepassXpLootId
// 0x0014 (0x0014 - 0x0000)
struct RHStatsMgr_GetBattlepassXpLootId final
{
public:
	struct FRH_LootId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStatsMgr_GetBattlepassXpLootId) == 0x000004, "Wrong alignment on RHStatsMgr_GetBattlepassXpLootId");
static_assert(sizeof(RHStatsMgr_GetBattlepassXpLootId) == 0x000014, "Wrong size on RHStatsMgr_GetBattlepassXpLootId");
static_assert(offsetof(RHStatsMgr_GetBattlepassXpLootId, ReturnValue) == 0x000000, "Member 'RHStatsMgr_GetBattlepassXpLootId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStatsMgr.GetPlayerXpLootId
// 0x0014 (0x0014 - 0x0000)
struct RHStatsMgr_GetPlayerXpLootId final
{
public:
	struct FRH_LootId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStatsMgr_GetPlayerXpLootId) == 0x000004, "Wrong alignment on RHStatsMgr_GetPlayerXpLootId");
static_assert(sizeof(RHStatsMgr_GetPlayerXpLootId) == 0x000014, "Wrong size on RHStatsMgr_GetPlayerXpLootId");
static_assert(offsetof(RHStatsMgr_GetPlayerXpLootId, ReturnValue) == 0x000000, "Member 'RHStatsMgr_GetPlayerXpLootId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStorePurchaseRequest.SubmitPurchaseRequest
// 0x0010 (0x0010 - 0x0000)
struct RHStorePurchaseRequest_SubmitPurchaseRequest final
{
public:
	TDelegate<void(bool bSuccess)>                Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStorePurchaseRequest_SubmitPurchaseRequest) == 0x000004, "Wrong alignment on RHStorePurchaseRequest_SubmitPurchaseRequest");
static_assert(sizeof(RHStorePurchaseRequest_SubmitPurchaseRequest) == 0x000010, "Wrong size on RHStorePurchaseRequest_SubmitPurchaseRequest");
static_assert(offsetof(RHStorePurchaseRequest_SubmitPurchaseRequest, Delegate) == 0x000000, "Member 'RHStorePurchaseRequest_SubmitPurchaseRequest::Delegate' has a wrong offset!");

// Function RallyHereStart.RHPortalOffer.GetDiscountPercentage
// 0x0004 (0x0004 - 0x0000)
struct RHPortalOffer_GetDiscountPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHPortalOffer_GetDiscountPercentage) == 0x000004, "Wrong alignment on RHPortalOffer_GetDiscountPercentage");
static_assert(sizeof(RHPortalOffer_GetDiscountPercentage) == 0x000004, "Wrong size on RHPortalOffer_GetDiscountPercentage");
static_assert(offsetof(RHPortalOffer_GetDiscountPercentage, ReturnValue) == 0x000000, "Member 'RHPortalOffer_GetDiscountPercentage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItemPrice.BLUEPRINT_CanAfford
// 0x0028 (0x0028 - 0x0000)
struct RHStoreItemPrice_BLUEPRINT_CanAfford final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           Coupon;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItemPrice_BLUEPRINT_CanAfford) == 0x000008, "Wrong alignment on RHStoreItemPrice_BLUEPRINT_CanAfford");
static_assert(sizeof(RHStoreItemPrice_BLUEPRINT_CanAfford) == 0x000028, "Wrong size on RHStoreItemPrice_BLUEPRINT_CanAfford");
static_assert(offsetof(RHStoreItemPrice_BLUEPRINT_CanAfford, PlayerInfo) == 0x000000, "Member 'RHStoreItemPrice_BLUEPRINT_CanAfford::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItemPrice_BLUEPRINT_CanAfford, Delegate) == 0x000008, "Member 'RHStoreItemPrice_BLUEPRINT_CanAfford::Delegate' has a wrong offset!");
static_assert(offsetof(RHStoreItemPrice_BLUEPRINT_CanAfford, Quantity) == 0x000018, "Member 'RHStoreItemPrice_BLUEPRINT_CanAfford::Quantity' has a wrong offset!");
static_assert(offsetof(RHStoreItemPrice_BLUEPRINT_CanAfford, Coupon) == 0x000020, "Member 'RHStoreItemPrice_BLUEPRINT_CanAfford::Coupon' has a wrong offset!");

// Function RallyHereStart.RHStoreItemPrice.GetDiscountPercentage
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItemPrice_GetDiscountPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItemPrice_GetDiscountPercentage) == 0x000004, "Wrong alignment on RHStoreItemPrice_GetDiscountPercentage");
static_assert(sizeof(RHStoreItemPrice_GetDiscountPercentage) == 0x000004, "Wrong size on RHStoreItemPrice_GetDiscountPercentage");
static_assert(offsetof(RHStoreItemPrice_GetDiscountPercentage, ReturnValue) == 0x000000, "Member 'RHStoreItemPrice_GetDiscountPercentage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItemPrice.GetPriceWithCoupon
// 0x0010 (0x0010 - 0x0000)
struct RHStoreItemPrice_GetPriceWithCoupon final
{
public:
	class URHStoreItem*                           Coupon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreItemPrice_GetPriceWithCoupon) == 0x000008, "Wrong alignment on RHStoreItemPrice_GetPriceWithCoupon");
static_assert(sizeof(RHStoreItemPrice_GetPriceWithCoupon) == 0x000010, "Wrong size on RHStoreItemPrice_GetPriceWithCoupon");
static_assert(offsetof(RHStoreItemPrice_GetPriceWithCoupon, Coupon) == 0x000000, "Member 'RHStoreItemPrice_GetPriceWithCoupon::Coupon' has a wrong offset!");
static_assert(offsetof(RHStoreItemPrice_GetPriceWithCoupon, ReturnValue) == 0x000008, "Member 'RHStoreItemPrice_GetPriceWithCoupon::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_CanAfford
// 0x0028 (0x0028 - 0x0000)
struct RHStoreItem_BLUEPRINT_CanAfford final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URHStoreItemPrice*                Price;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreItem_BLUEPRINT_CanAfford) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_CanAfford");
static_assert(sizeof(RHStoreItem_BLUEPRINT_CanAfford) == 0x000028, "Wrong size on RHStoreItem_BLUEPRINT_CanAfford");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanAfford, PlayerInfo) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_CanAfford::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanAfford, Price) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_CanAfford::Price' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanAfford, Delegate) == 0x000010, "Member 'RHStoreItem_BLUEPRINT_CanAfford::Delegate' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanAfford, Quantity) == 0x000020, "Member 'RHStoreItem_BLUEPRINT_CanAfford::Quantity' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_CanOwnMore
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_BLUEPRINT_CanOwnMore final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_CanOwnMore) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_CanOwnMore");
static_assert(sizeof(RHStoreItem_BLUEPRINT_CanOwnMore) == 0x000018, "Wrong size on RHStoreItem_BLUEPRINT_CanOwnMore");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanOwnMore, PlayerInfo) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_CanOwnMore::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_CanOwnMore, Delegate) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_CanOwnMore::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_GetBestCouponForPrice
// 0x0020 (0x0020 - 0x0000)
struct RHStoreItem_BLUEPRINT_GetBestCouponForPrice final
{
public:
	const class URHStoreItemPrice*                Price;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class URHStoreItem* StoreItem)> Delegate;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_GetBestCouponForPrice) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_GetBestCouponForPrice");
static_assert(sizeof(RHStoreItem_BLUEPRINT_GetBestCouponForPrice) == 0x000020, "Wrong size on RHStoreItem_BLUEPRINT_GetBestCouponForPrice");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetBestCouponForPrice, Price) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_GetBestCouponForPrice::Price' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetBestCouponForPrice, PlayerInfo) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_GetBestCouponForPrice::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetBestCouponForPrice, Delegate) == 0x000010, "Member 'RHStoreItem_BLUEPRINT_GetBestCouponForPrice::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_GetCouponsForPrice
// 0x0020 (0x0020 - 0x0000)
struct RHStoreItem_BLUEPRINT_GetCouponsForPrice final
{
public:
	const class URHStoreItemPrice*                Price;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const TArray<class URHStoreItem*>& StoreItems)> Delegate;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_GetCouponsForPrice) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_GetCouponsForPrice");
static_assert(sizeof(RHStoreItem_BLUEPRINT_GetCouponsForPrice) == 0x000020, "Wrong size on RHStoreItem_BLUEPRINT_GetCouponsForPrice");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetCouponsForPrice, Price) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_GetCouponsForPrice::Price' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetCouponsForPrice, PlayerInfo) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_GetCouponsForPrice::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetCouponsForPrice, Delegate) == 0x000010, "Member 'RHStoreItem_BLUEPRINT_GetCouponsForPrice::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_GetQuantityOwned
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_BLUEPRINT_GetQuantityOwned final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 InstanceCount)>          Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_GetQuantityOwned) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_GetQuantityOwned");
static_assert(sizeof(RHStoreItem_BLUEPRINT_GetQuantityOwned) == 0x000018, "Wrong size on RHStoreItem_BLUEPRINT_GetQuantityOwned");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetQuantityOwned, PlayerInfo) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_GetQuantityOwned::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_GetQuantityOwned, Delegate) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_GetQuantityOwned::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_IsOwned
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_BLUEPRINT_IsOwned final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_IsOwned) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_IsOwned");
static_assert(sizeof(RHStoreItem_BLUEPRINT_IsOwned) == 0x000018, "Wrong size on RHStoreItem_BLUEPRINT_IsOwned");
static_assert(offsetof(RHStoreItem_BLUEPRINT_IsOwned, PlayerInfo) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_IsOwned::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_IsOwned, Delegate) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_IsOwned::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BLUEPRINT_IsRented
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_BLUEPRINT_IsRented final
{
public:
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsValid)>                 Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_BLUEPRINT_IsRented) == 0x000008, "Wrong alignment on RHStoreItem_BLUEPRINT_IsRented");
static_assert(sizeof(RHStoreItem_BLUEPRINT_IsRented) == 0x000018, "Wrong size on RHStoreItem_BLUEPRINT_IsRented");
static_assert(offsetof(RHStoreItem_BLUEPRINT_IsRented, PlayerInfo) == 0x000000, "Member 'RHStoreItem_BLUEPRINT_IsRented::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BLUEPRINT_IsRented, Delegate) == 0x000008, "Member 'RHStoreItem_BLUEPRINT_IsRented::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetBestDiscount
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetBestDiscount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetBestDiscount) == 0x000004, "Wrong alignment on RHStoreItem_GetBestDiscount");
static_assert(sizeof(RHStoreItem_GetBestDiscount) == 0x000004, "Wrong size on RHStoreItem_GetBestDiscount");
static_assert(offsetof(RHStoreItem_GetBestDiscount, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetBestDiscount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetDLCForVoucher
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_GetDLCForVoucher final
{
public:
	class URHStoreItem*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetDLCForVoucher) == 0x000008, "Wrong alignment on RHStoreItem_GetDLCForVoucher");
static_assert(sizeof(RHStoreItem_GetDLCForVoucher) == 0x000008, "Wrong size on RHStoreItem_GetDLCForVoucher");
static_assert(offsetof(RHStoreItem_GetDLCForVoucher, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetDLCForVoucher::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetPrice
// 0x0030 (0x0030 - 0x0000)
struct RHStoreItem_GetPrice final
{
public:
	TSoftObjectPtr<class UPlatformInventoryItem>  nCurrencyType;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItemPrice*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetPrice) == 0x000008, "Wrong alignment on RHStoreItem_GetPrice");
static_assert(sizeof(RHStoreItem_GetPrice) == 0x000030, "Wrong size on RHStoreItem_GetPrice");
static_assert(offsetof(RHStoreItem_GetPrice, nCurrencyType) == 0x000000, "Member 'RHStoreItem_GetPrice::nCurrencyType' has a wrong offset!");
static_assert(offsetof(RHStoreItem_GetPrice, ReturnValue) == 0x000028, "Member 'RHStoreItem_GetPrice::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetPrices
// 0x0010 (0x0010 - 0x0000)
struct RHStoreItem_GetPrices final
{
public:
	TArray<class URHStoreItemPrice*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetPrices) == 0x000008, "Wrong alignment on RHStoreItem_GetPrices");
static_assert(sizeof(RHStoreItem_GetPrices) == 0x000010, "Wrong size on RHStoreItem_GetPrices");
static_assert(offsetof(RHStoreItem_GetPrices, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetPrices::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetPurchaseRequest
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_GetPurchaseRequest final
{
public:
	class URHStorePurchaseRequest*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetPurchaseRequest) == 0x000008, "Wrong alignment on RHStoreItem_GetPurchaseRequest");
static_assert(sizeof(RHStoreItem_GetPurchaseRequest) == 0x000008, "Wrong size on RHStoreItem_GetPurchaseRequest");
static_assert(offsetof(RHStoreItem_GetPurchaseRequest, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetPurchaseRequest::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetPurchaseRequestFromPrice
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_GetPurchaseRequestFromPrice final
{
public:
	class URHStoreItemPrice*                      pPrice;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStorePurchaseRequest*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetPurchaseRequestFromPrice) == 0x000008, "Wrong alignment on RHStoreItem_GetPurchaseRequestFromPrice");
static_assert(sizeof(RHStoreItem_GetPurchaseRequestFromPrice) == 0x000018, "Wrong size on RHStoreItem_GetPurchaseRequestFromPrice");
static_assert(offsetof(RHStoreItem_GetPurchaseRequestFromPrice, pPrice) == 0x000000, "Member 'RHStoreItem_GetPurchaseRequestFromPrice::pPrice' has a wrong offset!");
static_assert(offsetof(RHStoreItem_GetPurchaseRequestFromPrice, Quantity) == 0x000008, "Member 'RHStoreItem_GetPurchaseRequestFromPrice::Quantity' has a wrong offset!");
static_assert(offsetof(RHStoreItem_GetPurchaseRequestFromPrice, ReturnValue) == 0x000010, "Member 'RHStoreItem_GetPurchaseRequestFromPrice::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.IsOnSale
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_IsOnSale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_IsOnSale) == 0x000001, "Wrong alignment on RHStoreItem_IsOnSale");
static_assert(sizeof(RHStoreItem_IsOnSale) == 0x000001, "Wrong size on RHStoreItem_IsOnSale");
static_assert(offsetof(RHStoreItem_IsOnSale, ReturnValue) == 0x000000, "Member 'RHStoreItem_IsOnSale::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.UIX_ShowPurchaseConfirmation
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_UIX_ShowPurchaseConfirmation final
{
public:
	class URHStoreItemPrice*                      pPrice;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_UIX_ShowPurchaseConfirmation) == 0x000008, "Wrong alignment on RHStoreItem_UIX_ShowPurchaseConfirmation");
static_assert(sizeof(RHStoreItem_UIX_ShowPurchaseConfirmation) == 0x000008, "Wrong size on RHStoreItem_UIX_ShowPurchaseConfirmation");
static_assert(offsetof(RHStoreItem_UIX_ShowPurchaseConfirmation, pPrice) == 0x000000, "Member 'RHStoreItem_UIX_ShowPurchaseConfirmation::pPrice' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.BundleContainsItemId
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_BundleContainsItemId final
{
public:
	struct FRH_ItemId                             nItemId;                                           // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchSubContainers;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreItem_BundleContainsItemId) == 0x000004, "Wrong alignment on RHStoreItem_BundleContainsItemId");
static_assert(sizeof(RHStoreItem_BundleContainsItemId) == 0x000018, "Wrong size on RHStoreItem_BundleContainsItemId");
static_assert(offsetof(RHStoreItem_BundleContainsItemId, nItemId) == 0x000000, "Member 'RHStoreItem_BundleContainsItemId::nItemId' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BundleContainsItemId, bSearchSubContainers) == 0x000014, "Member 'RHStoreItem_BundleContainsItemId::bSearchSubContainers' has a wrong offset!");
static_assert(offsetof(RHStoreItem_BundleContainsItemId, ReturnValue) == 0x000015, "Member 'RHStoreItem_BundleContainsItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetBundledContents
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_GetBundledContents final
{
public:
	TArray<class URHStoreItem*>                   ContainedItems;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreItem_GetBundledContents) == 0x000008, "Wrong alignment on RHStoreItem_GetBundledContents");
static_assert(sizeof(RHStoreItem_GetBundledContents) == 0x000018, "Wrong size on RHStoreItem_GetBundledContents");
static_assert(offsetof(RHStoreItem_GetBundledContents, ContainedItems) == 0x000000, "Member 'RHStoreItem_GetBundledContents::ContainedItems' has a wrong offset!");
static_assert(offsetof(RHStoreItem_GetBundledContents, ReturnValue) == 0x000010, "Member 'RHStoreItem_GetBundledContents::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetBundleId
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetBundleId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetBundleId) == 0x000004, "Wrong alignment on RHStoreItem_GetBundleId");
static_assert(sizeof(RHStoreItem_GetBundleId) == 0x000004, "Wrong size on RHStoreItem_GetBundleId");
static_assert(offsetof(RHStoreItem_GetBundleId, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetBundleId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetDescription) == 0x000008, "Wrong alignment on RHStoreItem_GetDescription");
static_assert(sizeof(RHStoreItem_GetDescription) == 0x000018, "Wrong size on RHStoreItem_GetDescription");
static_assert(offsetof(RHStoreItem_GetDescription, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetDescription::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetFormattedDescDisplay
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_GetFormattedDescDisplay final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetFormattedDescDisplay) == 0x000008, "Wrong alignment on RHStoreItem_GetFormattedDescDisplay");
static_assert(sizeof(RHStoreItem_GetFormattedDescDisplay) == 0x000018, "Wrong size on RHStoreItem_GetFormattedDescDisplay");
static_assert(offsetof(RHStoreItem_GetFormattedDescDisplay, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetFormattedDescDisplay::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetFormattedNameDisplay
// 0x0020 (0x0020 - 0x0000)
struct RHStoreItem_GetFormattedNameDisplay final
{
public:
	int32                                         ExternalQuantity;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetFormattedNameDisplay) == 0x000008, "Wrong alignment on RHStoreItem_GetFormattedNameDisplay");
static_assert(sizeof(RHStoreItem_GetFormattedNameDisplay) == 0x000020, "Wrong size on RHStoreItem_GetFormattedNameDisplay");
static_assert(offsetof(RHStoreItem_GetFormattedNameDisplay, ExternalQuantity) == 0x000000, "Member 'RHStoreItem_GetFormattedNameDisplay::ExternalQuantity' has a wrong offset!");
static_assert(offsetof(RHStoreItem_GetFormattedNameDisplay, ReturnValue) == 0x000008, "Member 'RHStoreItem_GetFormattedNameDisplay::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetIconInfo
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_GetIconInfo final
{
public:
	class UIconInfo*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetIconInfo) == 0x000008, "Wrong alignment on RHStoreItem_GetIconInfo");
static_assert(sizeof(RHStoreItem_GetIconInfo) == 0x000008, "Wrong size on RHStoreItem_GetIconInfo");
static_assert(offsetof(RHStoreItem_GetIconInfo, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetIconInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetInventoryItem
// 0x0028 (0x0028 - 0x0000)
struct RHStoreItem_GetInventoryItem final
{
public:
	TSoftObjectPtr<class UPlatformInventoryItem>  ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetInventoryItem) == 0x000008, "Wrong alignment on RHStoreItem_GetInventoryItem");
static_assert(sizeof(RHStoreItem_GetInventoryItem) == 0x000028, "Wrong size on RHStoreItem_GetInventoryItem");
static_assert(offsetof(RHStoreItem_GetInventoryItem, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetInventoryItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetInventoryOperation
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_GetInventoryOperation final
{
public:
	ERHAPI_InventoryOperation                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetInventoryOperation) == 0x000001, "Wrong alignment on RHStoreItem_GetInventoryOperation");
static_assert(sizeof(RHStoreItem_GetInventoryOperation) == 0x000001, "Wrong size on RHStoreItem_GetInventoryOperation");
static_assert(offsetof(RHStoreItem_GetInventoryOperation, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetInventoryOperation::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetInventorySelector
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_GetInventorySelector final
{
public:
	ERHAPI_InventorySelector                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetInventorySelector) == 0x000001, "Wrong alignment on RHStoreItem_GetInventorySelector");
static_assert(sizeof(RHStoreItem_GetInventorySelector) == 0x000001, "Wrong size on RHStoreItem_GetInventorySelector");
static_assert(offsetof(RHStoreItem_GetInventorySelector, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetInventorySelector::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetItemId
// 0x0014 (0x0014 - 0x0000)
struct RHStoreItem_GetItemId final
{
public:
	struct FRH_ItemId                             ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetItemId) == 0x000004, "Wrong alignment on RHStoreItem_GetItemId");
static_assert(sizeof(RHStoreItem_GetItemId) == 0x000014, "Wrong size on RHStoreItem_GetItemId");
static_assert(offsetof(RHStoreItem_GetItemId, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetLootId
// 0x0014 (0x0014 - 0x0000)
struct RHStoreItem_GetLootId final
{
public:
	struct FRH_LootId                             ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetLootId) == 0x000004, "Wrong alignment on RHStoreItem_GetLootId");
static_assert(sizeof(RHStoreItem_GetLootId) == 0x000014, "Wrong size on RHStoreItem_GetLootId");
static_assert(offsetof(RHStoreItem_GetLootId, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetLootId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetLootQuantity
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetLootQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetLootQuantity) == 0x000004, "Wrong alignment on RHStoreItem_GetLootQuantity");
static_assert(sizeof(RHStoreItem_GetLootQuantity) == 0x000004, "Wrong size on RHStoreItem_GetLootQuantity");
static_assert(offsetof(RHStoreItem_GetLootQuantity, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetLootQuantity::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetName
// 0x0018 (0x0018 - 0x0000)
struct RHStoreItem_GetName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetName) == 0x000008, "Wrong alignment on RHStoreItem_GetName");
static_assert(sizeof(RHStoreItem_GetName) == 0x000018, "Wrong size on RHStoreItem_GetName");
static_assert(offsetof(RHStoreItem_GetName, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetPortalOffer
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_GetPortalOffer final
{
public:
	class URHPortalOffer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetPortalOffer) == 0x000008, "Wrong alignment on RHStoreItem_GetPortalOffer");
static_assert(sizeof(RHStoreItem_GetPortalOffer) == 0x000008, "Wrong size on RHStoreItem_GetPortalOffer");
static_assert(offsetof(RHStoreItem_GetPortalOffer, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetPortalOffer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetSortOrder
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetSortOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetSortOrder) == 0x000004, "Wrong alignment on RHStoreItem_GetSortOrder");
static_assert(sizeof(RHStoreItem_GetSortOrder) == 0x000004, "Wrong size on RHStoreItem_GetSortOrder");
static_assert(offsetof(RHStoreItem_GetSortOrder, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetSortOrder::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetUIHint
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetUIHint final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetUIHint) == 0x000004, "Wrong alignment on RHStoreItem_GetUIHint");
static_assert(sizeof(RHStoreItem_GetUIHint) == 0x000004, "Wrong size on RHStoreItem_GetUIHint");
static_assert(offsetof(RHStoreItem_GetUIHint, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetUIHint::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.GetVendorId
// 0x0004 (0x0004 - 0x0000)
struct RHStoreItem_GetVendorId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_GetVendorId) == 0x000004, "Wrong alignment on RHStoreItem_GetVendorId");
static_assert(sizeof(RHStoreItem_GetVendorId) == 0x000004, "Wrong size on RHStoreItem_GetVendorId");
static_assert(offsetof(RHStoreItem_GetVendorId, ReturnValue) == 0x000000, "Member 'RHStoreItem_GetVendorId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.HasPortalOffer
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_HasPortalOffer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_HasPortalOffer) == 0x000001, "Wrong alignment on RHStoreItem_HasPortalOffer");
static_assert(sizeof(RHStoreItem_HasPortalOffer) == 0x000001, "Wrong size on RHStoreItem_HasPortalOffer");
static_assert(offsetof(RHStoreItem_HasPortalOffer, ReturnValue) == 0x000000, "Member 'RHStoreItem_HasPortalOffer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.IsActive
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_IsActive) == 0x000001, "Wrong alignment on RHStoreItem_IsActive");
static_assert(sizeof(RHStoreItem_IsActive) == 0x000001, "Wrong size on RHStoreItem_IsActive");
static_assert(offsetof(RHStoreItem_IsActive, ReturnValue) == 0x000000, "Member 'RHStoreItem_IsActive::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.IsBundleWithPriceReduction
// 0x0008 (0x0008 - 0x0000)
struct RHStoreItem_IsBundleWithPriceReduction final
{
public:
	int32                                         OutSubVendorId;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreItem_IsBundleWithPriceReduction) == 0x000004, "Wrong alignment on RHStoreItem_IsBundleWithPriceReduction");
static_assert(sizeof(RHStoreItem_IsBundleWithPriceReduction) == 0x000008, "Wrong size on RHStoreItem_IsBundleWithPriceReduction");
static_assert(offsetof(RHStoreItem_IsBundleWithPriceReduction, OutSubVendorId) == 0x000000, "Member 'RHStoreItem_IsBundleWithPriceReduction::OutSubVendorId' has a wrong offset!");
static_assert(offsetof(RHStoreItem_IsBundleWithPriceReduction, ReturnValue) == 0x000004, "Member 'RHStoreItem_IsBundleWithPriceReduction::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreItem.ShouldDisplayToUser
// 0x0001 (0x0001 - 0x0000)
struct RHStoreItem_ShouldDisplayToUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreItem_ShouldDisplayToUser) == 0x000001, "Wrong alignment on RHStoreItem_ShouldDisplayToUser");
static_assert(sizeof(RHStoreItem_ShouldDisplayToUser) == 0x000001, "Wrong size on RHStoreItem_ShouldDisplayToUser");
static_assert(offsetof(RHStoreItem_ShouldDisplayToUser, ReturnValue) == 0x000000, "Member 'RHStoreItem_ShouldDisplayToUser::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.AreInventoryBucketUseRuleSetsLoaded
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded) == 0x000001, "Wrong alignment on RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded");
static_assert(sizeof(RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded) == 0x000001, "Wrong size on RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded");
static_assert(offsetof(RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_AreInventoryBucketUseRuleSetsLoaded::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.ArePortalOffersLoaded
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_ArePortalOffersLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_ArePortalOffersLoaded) == 0x000001, "Wrong alignment on RHStoreSubsystem_ArePortalOffersLoaded");
static_assert(sizeof(RHStoreSubsystem_ArePortalOffersLoaded) == 0x000001, "Wrong size on RHStoreSubsystem_ArePortalOffersLoaded");
static_assert(offsetof(RHStoreSubsystem_ArePortalOffersLoaded, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_ArePortalOffersLoaded::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.ArePricePointsLoaded
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_ArePricePointsLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_ArePricePointsLoaded) == 0x000001, "Wrong alignment on RHStoreSubsystem_ArePricePointsLoaded");
static_assert(sizeof(RHStoreSubsystem_ArePricePointsLoaded) == 0x000001, "Wrong size on RHStoreSubsystem_ArePricePointsLoaded");
static_assert(offsetof(RHStoreSubsystem_ArePricePointsLoaded, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_ArePricePointsLoaded::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.AreXpTablesLoaded
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_AreXpTablesLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_AreXpTablesLoaded) == 0x000001, "Wrong alignment on RHStoreSubsystem_AreXpTablesLoaded");
static_assert(sizeof(RHStoreSubsystem_AreXpTablesLoaded) == 0x000001, "Wrong size on RHStoreSubsystem_AreXpTablesLoaded");
static_assert(offsetof(RHStoreSubsystem_AreXpTablesLoaded, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_AreXpTablesLoaded::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.BLUEPRINT_RequestVendorData
// 0x0020 (0x0020 - 0x0000)
struct RHStoreSubsystem_BLUEPRINT_RequestVendorData final
{
public:
	TArray<int32>                                 VendorIds;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Delegate;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_BLUEPRINT_RequestVendorData) == 0x000008, "Wrong alignment on RHStoreSubsystem_BLUEPRINT_RequestVendorData");
static_assert(sizeof(RHStoreSubsystem_BLUEPRINT_RequestVendorData) == 0x000020, "Wrong size on RHStoreSubsystem_BLUEPRINT_RequestVendorData");
static_assert(offsetof(RHStoreSubsystem_BLUEPRINT_RequestVendorData, VendorIds) == 0x000000, "Member 'RHStoreSubsystem_BLUEPRINT_RequestVendorData::VendorIds' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_BLUEPRINT_RequestVendorData, Delegate) == 0x000010, "Member 'RHStoreSubsystem_BLUEPRINT_RequestVendorData::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.CheckEmptyInGameStore
// 0x0010 (0x0010 - 0x0000)
struct RHStoreSubsystem_CheckEmptyInGameStore final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreSubsystem_CheckEmptyInGameStore) == 0x000008, "Wrong alignment on RHStoreSubsystem_CheckEmptyInGameStore");
static_assert(sizeof(RHStoreSubsystem_CheckEmptyInGameStore) == 0x000010, "Wrong size on RHStoreSubsystem_CheckEmptyInGameStore");
static_assert(offsetof(RHStoreSubsystem_CheckEmptyInGameStore, WorldContextObject) == 0x000000, "Member 'RHStoreSubsystem_CheckEmptyInGameStore::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_CheckEmptyInGameStore, ReturnValue) == 0x000008, "Member 'RHStoreSubsystem_CheckEmptyInGameStore::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetStoreItem
// 0x0020 (0x0020 - 0x0000)
struct RHStoreSubsystem_GetStoreItem final
{
public:
	struct FRH_LootId                             LootId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHStoreItem*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetStoreItem) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetStoreItem");
static_assert(sizeof(RHStoreSubsystem_GetStoreItem) == 0x000020, "Wrong size on RHStoreSubsystem_GetStoreItem");
static_assert(offsetof(RHStoreSubsystem_GetStoreItem, LootId) == 0x000000, "Member 'RHStoreSubsystem_GetStoreItem::LootId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItem, ReturnValue) == 0x000018, "Member 'RHStoreSubsystem_GetStoreItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetStoreItemForVendor
// 0x0020 (0x0020 - 0x0000)
struct RHStoreSubsystem_GetStoreItemForVendor final
{
public:
	int32                                         nVendorId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_LootId                             nLootItemId;                                       // 0x0004(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHStoreItem*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetStoreItemForVendor) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetStoreItemForVendor");
static_assert(sizeof(RHStoreSubsystem_GetStoreItemForVendor) == 0x000020, "Wrong size on RHStoreSubsystem_GetStoreItemForVendor");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemForVendor, nVendorId) == 0x000000, "Member 'RHStoreSubsystem_GetStoreItemForVendor::nVendorId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemForVendor, nLootItemId) == 0x000004, "Member 'RHStoreSubsystem_GetStoreItemForVendor::nLootItemId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemForVendor, ReturnValue) == 0x000018, "Member 'RHStoreSubsystem_GetStoreItemForVendor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetStoreItemsAndQuantitiesForVendor
// 0x0070 (0x0070 - 0x0000)
struct RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor final
{
public:
	int32                                         nVendorId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeInactiveItems;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchSubContainers;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FRH_LootId, int32>                QuantityMap;                                       // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ExternalQuantity;                                  // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHStoreItem*>                   ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor");
static_assert(sizeof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor) == 0x000070, "Wrong size on RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, nVendorId) == 0x000000, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::nVendorId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, bIncludeInactiveItems) == 0x000004, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::bIncludeInactiveItems' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, bSearchSubContainers) == 0x000005, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::bSearchSubContainers' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, QuantityMap) == 0x000008, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::QuantityMap' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, ExternalQuantity) == 0x000058, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::ExternalQuantity' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor, ReturnValue) == 0x000060, "Member 'RHStoreSubsystem_GetStoreItemsAndQuantitiesForVendor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetStoreItemsForVendor
// 0x0018 (0x0018 - 0x0000)
struct RHStoreSubsystem_GetStoreItemsForVendor final
{
public:
	int32                                         nVendorId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeInactiveItems;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSearchSubContainers;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHStoreItem*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetStoreItemsForVendor) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetStoreItemsForVendor");
static_assert(sizeof(RHStoreSubsystem_GetStoreItemsForVendor) == 0x000018, "Wrong size on RHStoreSubsystem_GetStoreItemsForVendor");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsForVendor, nVendorId) == 0x000000, "Member 'RHStoreSubsystem_GetStoreItemsForVendor::nVendorId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsForVendor, bIncludeInactiveItems) == 0x000004, "Member 'RHStoreSubsystem_GetStoreItemsForVendor::bIncludeInactiveItems' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsForVendor, bSearchSubContainers) == 0x000005, "Member 'RHStoreSubsystem_GetStoreItemsForVendor::bSearchSubContainers' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetStoreItemsForVendor, ReturnValue) == 0x000008, "Member 'RHStoreSubsystem_GetStoreItemsForVendor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetXpTable
// 0x00F8 (0x00F8 - 0x0000)
struct RHStoreSubsystem_GetXpTable final
{
public:
	int32                                         XpTableId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_XpTable                         XpTable;                                           // 0x0008(0x00E8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHStoreSubsystem_GetXpTable) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetXpTable");
static_assert(sizeof(RHStoreSubsystem_GetXpTable) == 0x0000F8, "Wrong size on RHStoreSubsystem_GetXpTable");
static_assert(offsetof(RHStoreSubsystem_GetXpTable, XpTableId) == 0x000000, "Member 'RHStoreSubsystem_GetXpTable::XpTableId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetXpTable, XpTable) == 0x000008, "Member 'RHStoreSubsystem_GetXpTable::XpTable' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetXpTable, ReturnValue) == 0x0000F0, "Member 'RHStoreSubsystem_GetXpTable::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.OnEntitlementResult
// 0x0018 (0x0018 - 0x0000)
struct RHStoreSubsystem_OnEntitlementResult final
{
public:
	TArray<struct FRHAPI_PlayerOrder>             OrderResults;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	const class URH_PlayerInfo*                   PlayerInfo;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_OnEntitlementResult) == 0x000008, "Wrong alignment on RHStoreSubsystem_OnEntitlementResult");
static_assert(sizeof(RHStoreSubsystem_OnEntitlementResult) == 0x000018, "Wrong size on RHStoreSubsystem_OnEntitlementResult");
static_assert(offsetof(RHStoreSubsystem_OnEntitlementResult, OrderResults) == 0x000000, "Member 'RHStoreSubsystem_OnEntitlementResult::OrderResults' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_OnEntitlementResult, PlayerInfo) == 0x000010, "Member 'RHStoreSubsystem_OnEntitlementResult::PlayerInfo' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.OnInventoryBucketUseRuleSetsUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated) == 0x000001, "Wrong alignment on RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated");
static_assert(sizeof(RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated) == 0x000001, "Wrong size on RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated");
static_assert(offsetof(RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated, Success) == 0x000000, "Member 'RHStoreSubsystem_OnInventoryBucketUseRuleSetsUpdated::Success' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.OnPricePointsUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_OnPricePointsUpdated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_OnPricePointsUpdated) == 0x000001, "Wrong alignment on RHStoreSubsystem_OnPricePointsUpdated");
static_assert(sizeof(RHStoreSubsystem_OnPricePointsUpdated) == 0x000001, "Wrong size on RHStoreSubsystem_OnPricePointsUpdated");
static_assert(offsetof(RHStoreSubsystem_OnPricePointsUpdated, Success) == 0x000000, "Member 'RHStoreSubsystem_OnPricePointsUpdated::Success' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.OnStoreVendorsUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_OnStoreVendorsUpdated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_OnStoreVendorsUpdated) == 0x000001, "Wrong alignment on RHStoreSubsystem_OnStoreVendorsUpdated");
static_assert(sizeof(RHStoreSubsystem_OnStoreVendorsUpdated) == 0x000001, "Wrong size on RHStoreSubsystem_OnStoreVendorsUpdated");
static_assert(offsetof(RHStoreSubsystem_OnStoreVendorsUpdated, Success) == 0x000000, "Member 'RHStoreSubsystem_OnStoreVendorsUpdated::Success' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.OnXpTablesUpdated
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_OnXpTablesUpdated final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_OnXpTablesUpdated) == 0x000001, "Wrong alignment on RHStoreSubsystem_OnXpTablesUpdated");
static_assert(sizeof(RHStoreSubsystem_OnXpTablesUpdated) == 0x000001, "Wrong size on RHStoreSubsystem_OnXpTablesUpdated");
static_assert(offsetof(RHStoreSubsystem_OnXpTablesUpdated, Success) == 0x000000, "Member 'RHStoreSubsystem_OnXpTablesUpdated::Success' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.RedeemDLCVoucher
// 0x0020 (0x0020 - 0x0000)
struct RHStoreSubsystem_RedeemDLCVoucher final
{
public:
	class URHStoreItem*                           DLCVoucher;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Delegate;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_RedeemDLCVoucher) == 0x000008, "Wrong alignment on RHStoreSubsystem_RedeemDLCVoucher");
static_assert(sizeof(RHStoreSubsystem_RedeemDLCVoucher) == 0x000020, "Wrong size on RHStoreSubsystem_RedeemDLCVoucher");
static_assert(offsetof(RHStoreSubsystem_RedeemDLCVoucher, DLCVoucher) == 0x000000, "Member 'RHStoreSubsystem_RedeemDLCVoucher::DLCVoucher' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_RedeemDLCVoucher, PlayerInfo) == 0x000008, "Member 'RHStoreSubsystem_RedeemDLCVoucher::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_RedeemDLCVoucher, Delegate) == 0x000010, "Member 'RHStoreSubsystem_RedeemDLCVoucher::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.UIX_CompletePurchaseItem
// 0x0018 (0x0018 - 0x0000)
struct RHStoreSubsystem_UIX_CompletePurchaseItem final
{
public:
	class URHStorePurchaseRequest*                PurchaseRequest;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Delegate;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_UIX_CompletePurchaseItem) == 0x000008, "Wrong alignment on RHStoreSubsystem_UIX_CompletePurchaseItem");
static_assert(sizeof(RHStoreSubsystem_UIX_CompletePurchaseItem) == 0x000018, "Wrong size on RHStoreSubsystem_UIX_CompletePurchaseItem");
static_assert(offsetof(RHStoreSubsystem_UIX_CompletePurchaseItem, PurchaseRequest) == 0x000000, "Member 'RHStoreSubsystem_UIX_CompletePurchaseItem::PurchaseRequest' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_UIX_CompletePurchaseItem, Delegate) == 0x000008, "Member 'RHStoreSubsystem_UIX_CompletePurchaseItem::Delegate' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.DoesPortalHaveOffers
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_DoesPortalHaveOffers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_DoesPortalHaveOffers) == 0x000001, "Wrong alignment on RHStoreSubsystem_DoesPortalHaveOffers");
static_assert(sizeof(RHStoreSubsystem_DoesPortalHaveOffers) == 0x000001, "Wrong size on RHStoreSubsystem_DoesPortalHaveOffers");
static_assert(offsetof(RHStoreSubsystem_DoesPortalHaveOffers, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_DoesPortalHaveOffers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetCurrencyItem
// 0x0020 (0x0020 - 0x0000)
struct RHStoreSubsystem_GetCurrencyItem final
{
public:
	struct FRH_ItemId                             ItemId;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHCurrency*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetCurrencyItem) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetCurrencyItem");
static_assert(sizeof(RHStoreSubsystem_GetCurrencyItem) == 0x000020, "Wrong size on RHStoreSubsystem_GetCurrencyItem");
static_assert(offsetof(RHStoreSubsystem_GetCurrencyItem, ItemId) == 0x000000, "Member 'RHStoreSubsystem_GetCurrencyItem::ItemId' has a wrong offset!");
static_assert(offsetof(RHStoreSubsystem_GetCurrencyItem, ReturnValue) == 0x000018, "Member 'RHStoreSubsystem_GetCurrencyItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetFreeCurrencyItem
// 0x0008 (0x0008 - 0x0000)
struct RHStoreSubsystem_GetFreeCurrencyItem final
{
public:
	class URHCurrency*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetFreeCurrencyItem) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetFreeCurrencyItem");
static_assert(sizeof(RHStoreSubsystem_GetFreeCurrencyItem) == 0x000008, "Wrong size on RHStoreSubsystem_GetFreeCurrencyItem");
static_assert(offsetof(RHStoreSubsystem_GetFreeCurrencyItem, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_GetFreeCurrencyItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetPendingPurchaseData
// 0x0010 (0x0010 - 0x0000)
struct RHStoreSubsystem_GetPendingPurchaseData final
{
public:
	TArray<class URHStorePurchaseRequest*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetPendingPurchaseData) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetPendingPurchaseData");
static_assert(sizeof(RHStoreSubsystem_GetPendingPurchaseData) == 0x000010, "Wrong size on RHStoreSubsystem_GetPendingPurchaseData");
static_assert(offsetof(RHStoreSubsystem_GetPendingPurchaseData, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_GetPendingPurchaseData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.GetPremiumCurrencyItem
// 0x0008 (0x0008 - 0x0000)
struct RHStoreSubsystem_GetPremiumCurrencyItem final
{
public:
	class URHCurrency*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_GetPremiumCurrencyItem) == 0x000008, "Wrong alignment on RHStoreSubsystem_GetPremiumCurrencyItem");
static_assert(sizeof(RHStoreSubsystem_GetPremiumCurrencyItem) == 0x000008, "Wrong size on RHStoreSubsystem_GetPremiumCurrencyItem");
static_assert(offsetof(RHStoreSubsystem_GetPremiumCurrencyItem, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_GetPremiumCurrencyItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSubsystem.HasPendingPurchase
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSubsystem_HasPendingPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSubsystem_HasPendingPurchase) == 0x000001, "Wrong alignment on RHStoreSubsystem_HasPendingPurchase");
static_assert(sizeof(RHStoreSubsystem_HasPendingPurchase) == 0x000001, "Wrong size on RHStoreSubsystem_HasPendingPurchase");
static_assert(offsetof(RHStoreSubsystem_HasPendingPurchase, ReturnValue) == 0x000000, "Member 'RHStoreSubsystem_HasPendingPurchase::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStorePanelItem.IsOnSale
// 0x0001 (0x0001 - 0x0000)
struct RHStorePanelItem_IsOnSale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStorePanelItem_IsOnSale) == 0x000001, "Wrong alignment on RHStorePanelItem_IsOnSale");
static_assert(sizeof(RHStorePanelItem_IsOnSale) == 0x000001, "Wrong size on RHStorePanelItem_IsOnSale");
static_assert(offsetof(RHStorePanelItem_IsOnSale, ReturnValue) == 0x000000, "Member 'RHStorePanelItem_IsOnSale::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSectionItem.HasUnseenItems
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSectionItem_HasUnseenItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSectionItem_HasUnseenItems) == 0x000001, "Wrong alignment on RHStoreSectionItem_HasUnseenItems");
static_assert(sizeof(RHStoreSectionItem_HasUnseenItems) == 0x000001, "Wrong size on RHStoreSectionItem_HasUnseenItems");
static_assert(offsetof(RHStoreSectionItem_HasUnseenItems, ReturnValue) == 0x000000, "Member 'RHStoreSectionItem_HasUnseenItems::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSection.GetSecondsRemaining
// 0x0004 (0x0004 - 0x0000)
struct RHStoreSection_GetSecondsRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSection_GetSecondsRemaining) == 0x000004, "Wrong alignment on RHStoreSection_GetSecondsRemaining");
static_assert(sizeof(RHStoreSection_GetSecondsRemaining) == 0x000004, "Wrong size on RHStoreSection_GetSecondsRemaining");
static_assert(offsetof(RHStoreSection_GetSecondsRemaining, ReturnValue) == 0x000000, "Member 'RHStoreSection_GetSecondsRemaining::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSection.GetSectionHeader
// 0x0018 (0x0018 - 0x0000)
struct RHStoreSection_GetSectionHeader final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSection_GetSectionHeader) == 0x000008, "Wrong alignment on RHStoreSection_GetSectionHeader");
static_assert(sizeof(RHStoreSection_GetSectionHeader) == 0x000018, "Wrong size on RHStoreSection_GetSectionHeader");
static_assert(offsetof(RHStoreSection_GetSectionHeader, ReturnValue) == 0x000000, "Member 'RHStoreSection_GetSectionHeader::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreSection.HasUnseenItems
// 0x0001 (0x0001 - 0x0000)
struct RHStoreSection_HasUnseenItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreSection_HasUnseenItems) == 0x000001, "Wrong alignment on RHStoreSection_HasUnseenItems");
static_assert(sizeof(RHStoreSection_HasUnseenItems) == 0x000001, "Wrong size on RHStoreSection_HasUnseenItems");
static_assert(offsetof(RHStoreSection_HasUnseenItems, ReturnValue) == 0x000000, "Member 'RHStoreSection_HasUnseenItems::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreWidget.GetStoreLayout
// 0x0018 (0x0018 - 0x0000)
struct RHStoreWidget_GetStoreLayout final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URHStoreSection*>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreWidget_GetStoreLayout) == 0x000008, "Wrong alignment on RHStoreWidget_GetStoreLayout");
static_assert(sizeof(RHStoreWidget_GetStoreLayout) == 0x000018, "Wrong size on RHStoreWidget_GetStoreLayout");
static_assert(offsetof(RHStoreWidget_GetStoreLayout, ErrorCode) == 0x000000, "Member 'RHStoreWidget_GetStoreLayout::ErrorCode' has a wrong offset!");
static_assert(offsetof(RHStoreWidget_GetStoreLayout, ReturnValue) == 0x000008, "Member 'RHStoreWidget_GetStoreLayout::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHStoreWidget.HasAllRequiredStoreInformation
// 0x0001 (0x0001 - 0x0000)
struct RHStoreWidget_HasAllRequiredStoreInformation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHStoreWidget_HasAllRequiredStoreInformation) == 0x000001, "Wrong alignment on RHStoreWidget_HasAllRequiredStoreInformation");
static_assert(sizeof(RHStoreWidget_HasAllRequiredStoreInformation) == 0x000001, "Wrong size on RHStoreWidget_HasAllRequiredStoreInformation");
static_assert(offsetof(RHStoreWidget_HasAllRequiredStoreInformation, ReturnValue) == 0x000000, "Member 'RHStoreWidget_HasAllRequiredStoreInformation::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHTabScreenWidget.AddPlayerToScoreboard
// 0x0018 (0x0018 - 0x0000)
struct RHTabScreenWidget_AddPlayerToScoreboard final
{
public:
	int32                                         TeamNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHTabScreenWidget_AddPlayerToScoreboard) == 0x000008, "Wrong alignment on RHTabScreenWidget_AddPlayerToScoreboard");
static_assert(sizeof(RHTabScreenWidget_AddPlayerToScoreboard) == 0x000018, "Wrong size on RHTabScreenWidget_AddPlayerToScoreboard");
static_assert(offsetof(RHTabScreenWidget_AddPlayerToScoreboard, TeamNum) == 0x000000, "Member 'RHTabScreenWidget_AddPlayerToScoreboard::TeamNum' has a wrong offset!");
static_assert(offsetof(RHTabScreenWidget_AddPlayerToScoreboard, PlayerName) == 0x000008, "Member 'RHTabScreenWidget_AddPlayerToScoreboard::PlayerName' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.GetFriendSubsystem
// 0x0008 (0x0008 - 0x0000)
struct RHToastNotificationWidgetBase_GetFriendSubsystem final
{
public:
	class URH_FriendSubsystem*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_GetFriendSubsystem) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_GetFriendSubsystem");
static_assert(sizeof(RHToastNotificationWidgetBase_GetFriendSubsystem) == 0x000008, "Wrong size on RHToastNotificationWidgetBase_GetFriendSubsystem");
static_assert(offsetof(RHToastNotificationWidgetBase_GetFriendSubsystem, ReturnValue) == 0x000000, "Member 'RHToastNotificationWidgetBase_GetFriendSubsystem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.GetNext
// 0x0058 (0x0058 - 0x0000)
struct RHToastNotificationWidgetBase_GetNext final
{
public:
	struct FToastData                             NextToastNotification;                             // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHToastNotificationWidgetBase_GetNext) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_GetNext");
static_assert(sizeof(RHToastNotificationWidgetBase_GetNext) == 0x000058, "Wrong size on RHToastNotificationWidgetBase_GetNext");
static_assert(offsetof(RHToastNotificationWidgetBase_GetNext, NextToastNotification) == 0x000000, "Member 'RHToastNotificationWidgetBase_GetNext::NextToastNotification' has a wrong offset!");
static_assert(offsetof(RHToastNotificationWidgetBase_GetNext, ReturnValue) == 0x000050, "Member 'RHToastNotificationWidgetBase_GetNext::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.GetPartyManager
// 0x0008 (0x0008 - 0x0000)
struct RHToastNotificationWidgetBase_GetPartyManager final
{
public:
	class URHPartyManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_GetPartyManager) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_GetPartyManager");
static_assert(sizeof(RHToastNotificationWidgetBase_GetPartyManager) == 0x000008, "Wrong size on RHToastNotificationWidgetBase_GetPartyManager");
static_assert(offsetof(RHToastNotificationWidgetBase_GetPartyManager, ReturnValue) == 0x000000, "Member 'RHToastNotificationWidgetBase_GetPartyManager::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyInviteError
// 0x0018 (0x0018 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyInviteError final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyInviteError) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyInviteError");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyInviteError) == 0x000018, "Wrong size on RHToastNotificationWidgetBase_HandlePartyInviteError");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyInviteError, PlayerName) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyInviteError::PlayerName' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyInviteReceived
// 0x0008 (0x0008 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyInviteReceived final
{
public:
	class URH_PlayerInfo*                         PartyInviter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyInviteReceived) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyInviteReceived");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyInviteReceived) == 0x000008, "Wrong size on RHToastNotificationWidgetBase_HandlePartyInviteReceived");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyInviteReceived, PartyInviter) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyInviteReceived::PartyInviter' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyInviteSent
// 0x0008 (0x0008 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyInviteSent final
{
public:
	class URH_PlayerInfo*                         Invitee;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyInviteSent) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyInviteSent");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyInviteSent) == 0x000008, "Wrong size on RHToastNotificationWidgetBase_HandlePartyInviteSent");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyInviteSent, Invitee) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyInviteSent::Invitee' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyMemberAdded
// 0x0030 (0x0030 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyMemberAdded final
{
public:
	struct FRH_PartyMemberData                    PartyMemberData;                                   // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyMemberAdded) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyMemberAdded");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyMemberAdded) == 0x000030, "Wrong size on RHToastNotificationWidgetBase_HandlePartyMemberAdded");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyMemberAdded, PartyMemberData) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyMemberAdded::PartyMemberData' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyMemberKick
// 0x0010 (0x0010 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyMemberKick final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyMemberKick) == 0x000004, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyMemberKick");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyMemberKick) == 0x000010, "Wrong size on RHToastNotificationWidgetBase_HandlePartyMemberKick");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyMemberKick, PlayerId) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyMemberKick::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyMemberLeft
// 0x0030 (0x0030 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyMemberLeft final
{
public:
	struct FRH_PartyMemberData                    PartyMemberData;                                   // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyMemberLeft) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyMemberLeft");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyMemberLeft) == 0x000030, "Wrong size on RHToastNotificationWidgetBase_HandlePartyMemberLeft");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyMemberLeft, PartyMemberData) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyMemberLeft::PartyMemberData' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.HandlePartyMemberPromoted
// 0x0010 (0x0010 - 0x0000)
struct RHToastNotificationWidgetBase_HandlePartyMemberPromoted final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_HandlePartyMemberPromoted) == 0x000004, "Wrong alignment on RHToastNotificationWidgetBase_HandlePartyMemberPromoted");
static_assert(sizeof(RHToastNotificationWidgetBase_HandlePartyMemberPromoted) == 0x000010, "Wrong size on RHToastNotificationWidgetBase_HandlePartyMemberPromoted");
static_assert(offsetof(RHToastNotificationWidgetBase_HandlePartyMemberPromoted, PlayerId) == 0x000000, "Member 'RHToastNotificationWidgetBase_HandlePartyMemberPromoted::PlayerId' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.OnFriendUpdated
// 0x0008 (0x0008 - 0x0000)
struct RHToastNotificationWidgetBase_OnFriendUpdated final
{
public:
	class URH_RHFriendAndPlatformFriend*          UpdatedFriend;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_OnFriendUpdated) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_OnFriendUpdated");
static_assert(sizeof(RHToastNotificationWidgetBase_OnFriendUpdated) == 0x000008, "Wrong size on RHToastNotificationWidgetBase_OnFriendUpdated");
static_assert(offsetof(RHToastNotificationWidgetBase_OnFriendUpdated, UpdatedFriend) == 0x000000, "Member 'RHToastNotificationWidgetBase_OnFriendUpdated::UpdatedFriend' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.OnToastNotificationReceived
// 0x0050 (0x0050 - 0x0000)
struct RHToastNotificationWidgetBase_OnToastNotificationReceived final
{
public:
	struct FToastData                             ToastData;                                         // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_OnToastNotificationReceived) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_OnToastNotificationReceived");
static_assert(sizeof(RHToastNotificationWidgetBase_OnToastNotificationReceived) == 0x000050, "Wrong size on RHToastNotificationWidgetBase_OnToastNotificationReceived");
static_assert(offsetof(RHToastNotificationWidgetBase_OnToastNotificationReceived, ToastData) == 0x000000, "Member 'RHToastNotificationWidgetBase_OnToastNotificationReceived::ToastData' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.StoreToastQueue
// 0x0050 (0x0050 - 0x0000)
struct RHToastNotificationWidgetBase_StoreToastQueue final
{
public:
	struct FToastData                             ToastNotification;                                 // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_StoreToastQueue) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_StoreToastQueue");
static_assert(sizeof(RHToastNotificationWidgetBase_StoreToastQueue) == 0x000050, "Wrong size on RHToastNotificationWidgetBase_StoreToastQueue");
static_assert(offsetof(RHToastNotificationWidgetBase_StoreToastQueue, ToastNotification) == 0x000000, "Member 'RHToastNotificationWidgetBase_StoreToastQueue::ToastNotification' has a wrong offset!");

// Function RallyHereStart.RHToastNotificationWidgetBase.GetPostMatchToasts
// 0x0010 (0x0010 - 0x0000)
struct RHToastNotificationWidgetBase_GetPostMatchToasts final
{
public:
	TArray<struct FToastData>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHToastNotificationWidgetBase_GetPostMatchToasts) == 0x000008, "Wrong alignment on RHToastNotificationWidgetBase_GetPostMatchToasts");
static_assert(sizeof(RHToastNotificationWidgetBase_GetPostMatchToasts) == 0x000010, "Wrong size on RHToastNotificationWidgetBase_GetPostMatchToasts");
static_assert(offsetof(RHToastNotificationWidgetBase_GetPostMatchToasts, ReturnValue) == 0x000000, "Member 'RHToastNotificationWidgetBase_GetPostMatchToasts::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHTreeView.NavigateSelectItem
// 0x0008 (0x0008 - 0x0000)
struct RHTreeView_NavigateSelectItem final
{
public:
	class UObject*                                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHTreeView_NavigateSelectItem) == 0x000008, "Wrong alignment on RHTreeView_NavigateSelectItem");
static_assert(sizeof(RHTreeView_NavigateSelectItem) == 0x000008, "Wrong size on RHTreeView_NavigateSelectItem");
static_assert(offsetof(RHTreeView_NavigateSelectItem, Item) == 0x000000, "Member 'RHTreeView_NavigateSelectItem::Item' has a wrong offset!");

// Function RallyHereStart.RHTreeView.BP_GetEntryWidgetFromItem
// 0x0018 (0x0018 - 0x0000)
struct RHTreeView_BP_GetEntryWidgetFromItem final
{
public:
	const class UObject*                          Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            OutWidget;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHTreeView_BP_GetEntryWidgetFromItem) == 0x000008, "Wrong alignment on RHTreeView_BP_GetEntryWidgetFromItem");
static_assert(sizeof(RHTreeView_BP_GetEntryWidgetFromItem) == 0x000018, "Wrong size on RHTreeView_BP_GetEntryWidgetFromItem");
static_assert(offsetof(RHTreeView_BP_GetEntryWidgetFromItem, Item) == 0x000000, "Member 'RHTreeView_BP_GetEntryWidgetFromItem::Item' has a wrong offset!");
static_assert(offsetof(RHTreeView_BP_GetEntryWidgetFromItem, OutWidget) == 0x000008, "Member 'RHTreeView_BP_GetEntryWidgetFromItem::OutWidget' has a wrong offset!");
static_assert(offsetof(RHTreeView_BP_GetEntryWidgetFromItem, ReturnValue) == 0x000010, "Member 'RHTreeView_BP_GetEntryWidgetFromItem::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHTreeView.GetNumItemsInLayout
// 0x0004 (0x0004 - 0x0000)
struct RHTreeView_GetNumItemsInLayout final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHTreeView_GetNumItemsInLayout) == 0x000004, "Wrong alignment on RHTreeView_GetNumItemsInLayout");
static_assert(sizeof(RHTreeView_GetNumItemsInLayout) == 0x000004, "Wrong size on RHTreeView_GetNumItemsInLayout");
static_assert(offsetof(RHTreeView_GetNumItemsInLayout, ReturnValue) == 0x000000, "Member 'RHTreeView_GetNumItemsInLayout::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHTreeView.IsItemExpanded
// 0x0010 (0x0010 - 0x0000)
struct RHTreeView_IsItemExpanded final
{
public:
	const class UObject*                          Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHTreeView_IsItemExpanded) == 0x000008, "Wrong alignment on RHTreeView_IsItemExpanded");
static_assert(sizeof(RHTreeView_IsItemExpanded) == 0x000010, "Wrong size on RHTreeView_IsItemExpanded");
static_assert(offsetof(RHTreeView_IsItemExpanded, Item) == 0x000000, "Member 'RHTreeView_IsItemExpanded::Item' has a wrong offset!");
static_assert(offsetof(RHTreeView_IsItemExpanded, ReturnValue) == 0x000008, "Member 'RHTreeView_IsItemExpanded::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.AllowActionsOnOfflinePlayers
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_AllowActionsOnOfflinePlayers::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CanEnterPracticeMode
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CanEnterPracticeMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CanEnterPracticeMode) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CanEnterPracticeMode");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CanEnterPracticeMode) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_CanEnterPracticeMode");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanEnterPracticeMode, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CanEnterPracticeMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanEnterPracticeMode, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_CanEnterPracticeMode::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CanReportPlayer
// 0x0070 (0x0070 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CanReportPlayer final
{
public:
	struct FReportPlayerParams                    Params_0;                                          // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CanReportPlayer) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CanReportPlayer");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CanReportPlayer) == 0x000070, "Wrong size on RHUIBlueprintFunctionLibrary_CanReportPlayer");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanReportPlayer, Params_0) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CanReportPlayer::Params_0' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanReportPlayer, ReturnValue) == 0x000068, "Member 'RHUIBlueprintFunctionLibrary_CanReportPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CanReportServer
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CanReportServer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CanReportServer) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CanReportServer");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CanReportServer) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_CanReportServer");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanReportServer, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CanReportServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanReportServer, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_CanReportServer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CanViewPlatformProfileForPlayerState
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARHPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState, PlayerState) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState, ReturnValue) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_CanViewPlatformProfileForPlayerState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CheckPlayerBlockedAsync
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync final
{
public:
	struct FGuid                                  RHPlayerUuid;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_SessionView*                        pSession;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_FriendSubsystem*              pFriendSubsystem;                                  // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool bIsBlocked)>              Delegate;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync, RHPlayerUuid) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync::RHPlayerUuid' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync, pSession) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync::pSession' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync, pFriendSubsystem) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync::pFriendSubsystem' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync, Delegate) == 0x000020, "Member 'RHUIBlueprintFunctionLibrary_CheckPlayerBlockedAsync::Delegate' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CompareStrings
// 0x0028 (0x0028 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CompareStrings final
{
public:
	class FString                                 LeftString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RightString;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CompareStrings) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CompareStrings");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CompareStrings) == 0x000028, "Wrong size on RHUIBlueprintFunctionLibrary_CompareStrings");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CompareStrings, LeftString) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CompareStrings::LeftString' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CompareStrings, RightString) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_CompareStrings::RightString' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CompareStrings, ReturnValue) == 0x000020, "Member 'RHUIBlueprintFunctionLibrary_CompareStrings::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.ConvertPlatformTypeToDisplayType
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               PlatformType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHPlatformDisplayType                        ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType, PlatformType) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType::PlatformType' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType, ReturnValue) == 0x000009, "Member 'RHUIBlueprintFunctionLibrary_ConvertPlatformTypeToDisplayType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CreateSettingsWidget
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CreateSettingsWidget final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URHSettingsWidget>          SettingsWidgetClass;                               // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHSettingsWidget*                      ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CreateSettingsWidget) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CreateSettingsWidget");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CreateSettingsWidget) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_CreateSettingsWidget");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidget, HUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidget::HUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidget, SettingsWidgetClass) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidget::SettingsWidgetClass' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidget, ReturnValue) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.CreateSettingsWidgetWithConfig
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRHSettingsWidgetConfig                SettingsWidgetConfig;                              // 0x0008(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class URHSettingsWidget*                      ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig, HUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig::HUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig, SettingsWidgetConfig) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig::SettingsWidgetConfig' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_CreateSettingsWidgetWithConfig::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetActiveBattlepass
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetActiveBattlepass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHBattlepass*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetActiveBattlepass) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetActiveBattlepass");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetActiveBattlepass) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetActiveBattlepass");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetActiveBattlepass, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetActiveBattlepass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetActiveBattlepass, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetActiveBattlepass::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetCurrencyItemByItemId
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId final
{
public:
	struct FRH_ItemId                             CurrencyItemId;                                    // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URHCurrency*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId, CurrencyItemId) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId::CurrencyItemId' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetCurrencyItemByItemId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetFriendOnlineStatus
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_RHFriendAndPlatformFriend*    Friend;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_LocalPlayerSubsystem*         LocalPlayerSS;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartyStatus;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFriendRequestStatus;                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHPlayerOnlineStatus                         ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, Friend) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::Friend' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, LocalPlayerSS) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::LocalPlayerSS' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, bAllowPartyStatus) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::bAllowPartyStatus' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, bAllowFriendRequestStatus) == 0x000019, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::bAllowFriendRequestStatus' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus, ReturnValue) == 0x00001A, "Member 'RHUIBlueprintFunctionLibrary_GetFriendOnlineStatus::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetFriendStatusMessage
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetFriendStatusMessage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_RHFriendAndPlatformFriend*    Friend;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_LocalPlayerSubsystem*         LocalPlayerSS;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetFriendStatusMessage");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_GetFriendStatusMessage");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetFriendStatusMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage, Friend) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetFriendStatusMessage::Friend' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage, LocalPlayerSS) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetFriendStatusMessage::LocalPlayerSS' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetFriendStatusMessage, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetFriendStatusMessage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetGamepadCancelButton
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetGamepadCancelButton final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetGamepadCancelButton) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetGamepadCancelButton");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetGamepadCancelButton) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_GetGamepadCancelButton");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetGamepadCancelButton, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetGamepadCancelButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetGamepadConfirmButton
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetGamepadConfirmButton::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetGamepadIconSet
// 0x0001 (0x0001 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetGamepadIconSet final
{
public:
	EGamepadIcons                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetGamepadIconSet) == 0x000001, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetGamepadIconSet");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetGamepadIconSet) == 0x000001, "Wrong size on RHUIBlueprintFunctionLibrary_GetGamepadIconSet");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetGamepadIconSet, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetGamepadIconSet::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetGameState
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARHGameState*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetGameState) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetGameState");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetGameState) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetGameState");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetGameState, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetGameState, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetGameState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetKeyForBinding
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetKeyForBinding final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Binding;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SecondaryKey;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FallbackToDefault;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGamepadDoubleTap;                                // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetKeyForBinding) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetKeyForBinding");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetKeyForBinding) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_GetKeyForBinding");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, PlayerController) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::PlayerController' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, Binding) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::Binding' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, SecondaryKey) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::SecondaryKey' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, FallbackToDefault) == 0x000011, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::FallbackToDefault' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, IsGamepadDoubleTap) == 0x000012, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::IsGamepadDoubleTap' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyForBinding, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetKeyForBinding::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetKeyName
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetKeyName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetKeyName) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetKeyName");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetKeyName) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetKeyName");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyName, Key) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetKeyName::Key' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetKeyName, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetKeyName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetLocalPlayerController
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetLocalPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetLocalPlayerController) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetLocalPlayerController");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetLocalPlayerController) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_GetLocalPlayerController");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerController, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerController, PlayerIndex) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerController::PlayerIndex' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerController, ReturnValue) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetLocalPlayerInfo
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo, HUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo::HUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetLocalPlayerPlatformId
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetLocalPlayerPlatformId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetLoggedInPlatformId
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetLoggedInPlatformId::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPCPlatform
// 0x0002 (0x0002 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPCPlatform final
{
public:
	bool                                          OutIsSteam;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsEpic;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPCPlatform) == 0x000001, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPCPlatform");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPCPlatform) == 0x000002, "Wrong size on RHUIBlueprintFunctionLibrary_GetPCPlatform");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPCPlatform, OutIsSteam) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPCPlatform::OutIsSteam' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPCPlatform, OutIsEpic) == 0x000001, "Member 'RHUIBlueprintFunctionLibrary_GetPCPlatform::OutIsEpic' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlatformDisplayTypeFromFriend
// 0x0018 (0x0018 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_RHFriendAndPlatformFriend*          Friend;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHPlatformDisplayType                        ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend) == 0x000018, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend, Friend) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend::Friend' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend, ReturnValue) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromFriend::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlatformDisplayTypeFromPlayerInfo
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(ERHPlatformDisplayType PlatformType)> Delegate;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo, PlayerInfo) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo, Delegate) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerInfo::Delegate' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlatformDisplayTypeFromPlayerState
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARHPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(ERHPlatformDisplayType PlatformType)> Delegate;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState, PlayerState) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState, Delegate) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformDisplayTypeFromPlayerState::Delegate' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlatformIdByOSSName
// 0x000C (0x000C - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName final
{
public:
	class FName                                   OSSName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName) == 0x000004, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName) == 0x00000C, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName, OSSName) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName::OSSName' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlatformIdByOSSName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlayerCohortGroup
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup final
{
public:
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfGroups;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup, PlayerInfo) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup, NumberOfGroups) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup::NumberOfGroups' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup, ReturnValue) == 0x00000C, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerCohortGroup::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlayerOnlineStatus
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_LocalPlayerSubsystem*         LocalPlayerSS;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartyStatus;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFriendRequestStatus;                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHPlayerOnlineStatus                         ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, PlayerInfo) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, LocalPlayerSS) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::LocalPlayerSS' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, bAllowPartyStatus) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::bAllowPartyStatus' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, bAllowFriendRequestStatus) == 0x000019, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::bAllowFriendRequestStatus' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus, ReturnValue) == 0x00001A, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerOnlineStatus::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetPlayerStatusMessage
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         PlayerInfo;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URH_LocalPlayerSubsystem*         LocalPlayerSS;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage, PlayerInfo) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage::PlayerInfo' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage, LocalPlayerSS) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage::LocalPlayerSS' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetPlayerStatusMessage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetStatusMessage
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetStatusMessage final
{
public:
	ERHPlayerOnlineStatus                         PlayerStatus;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetStatusMessage) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetStatusMessage");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetStatusMessage) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_GetStatusMessage");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetStatusMessage, PlayerStatus) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetStatusMessage::PlayerStatus' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetStatusMessage, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_GetStatusMessage::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetTextByPlatform
// 0x0080 (0x0080 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetTextByPlatform final
{
public:
	class FText                                   DefaultText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class FString, class FText>              PlatformTexts;                                     // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetTextByPlatform) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetTextByPlatform");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetTextByPlatform) == 0x000080, "Wrong size on RHUIBlueprintFunctionLibrary_GetTextByPlatform");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetTextByPlatform, DefaultText) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetTextByPlatform::DefaultText' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetTextByPlatform, PlatformTexts) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_GetTextByPlatform::PlatformTexts' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetTextByPlatform, ReturnValue) == 0x000068, "Member 'RHUIBlueprintFunctionLibrary_GetTextByPlatform::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.GetUMG_DPI_Scaling
// 0x0004 (0x0004 - 0x0000)
struct RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling) == 0x000004, "Wrong alignment on RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling) == 0x000004, "Wrong size on RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_GetUMG_DPI_Scaling::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.HasCinematicToPlay
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_HasCinematicToPlay final
{
public:
	class UDataTable*                             CinematicDataTable;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_HasCinematicToPlay) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_HasCinematicToPlay");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_HasCinematicToPlay) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_HasCinematicToPlay");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_HasCinematicToPlay, CinematicDataTable) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_HasCinematicToPlay::CinematicDataTable' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_HasCinematicToPlay, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_HasCinematicToPlay::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsAnonymousLogin
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsAnonymousLogin final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsAnonymousLogin) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsAnonymousLogin");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsAnonymousLogin) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_IsAnonymousLogin");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsAnonymousLogin, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsAnonymousLogin::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsAnonymousLogin, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_IsAnonymousLogin::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsGameClosing
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsGameClosing final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsGameClosing) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsGameClosing");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsGameClosing) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_IsGameClosing");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsGameClosing, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsGameClosing::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsGameClosing, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_IsGameClosing::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsInMatch
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsInMatch final
{
public:
	const class URH_LocalPlayerSubsystem*         LocalPlayerSS;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsInMatch) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsInMatch");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsInMatch) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_IsInMatch");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsInMatch, LocalPlayerSS) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsInMatch::LocalPlayerSS' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsInMatch, ReturnValue) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_IsInMatch::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsPlatformType
// 0x0004 (0x0004 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsPlatformType final
{
public:
	bool                                          IsConsole;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPC;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMobile;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsPlatformType) == 0x000001, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsPlatformType");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsPlatformType) == 0x000004, "Wrong size on RHUIBlueprintFunctionLibrary_IsPlatformType");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsPlatformType, IsConsole) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsPlatformType::IsConsole' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsPlatformType, IsPC) == 0x000001, "Member 'RHUIBlueprintFunctionLibrary_IsPlatformType::IsPC' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsPlatformType, IsMobile) == 0x000002, "Member 'RHUIBlueprintFunctionLibrary_IsPlatformType::IsMobile' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsPlatformType, ReturnValue) == 0x000003, "Member 'RHUIBlueprintFunctionLibrary_IsPlatformType::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsSteamDeck) == 0x000001, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsSteamDeck");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsSteamDeck) == 0x000001, "Wrong size on RHUIBlueprintFunctionLibrary_IsSteamDeck");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsSteamDeck, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsSteamDeck::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct RHUIBlueprintFunctionLibrary_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_IsWithEditor) == 0x000001, "Wrong alignment on RHUIBlueprintFunctionLibrary_IsWithEditor");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_IsWithEditor) == 0x000001, "Wrong size on RHUIBlueprintFunctionLibrary_IsWithEditor");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_IsWithEditor, ReturnValue) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_IsWithEditor::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.Key_GetShortDisplayName
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName, Key) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName::Key' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_Key_GetShortDisplayName::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.LeaveSession
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_LeaveSession final
{
public:
	const class ARHHUDCommon*                     pHUD;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionType;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_LeaveSession) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_LeaveSession");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_LeaveSession) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_LeaveSession");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSession, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_LeaveSession::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSession, SessionType) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_LeaveSession::SessionType' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSession, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_LeaveSession::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.LeaveSessionById
// 0x0020 (0x0020 - 0x0000)
struct RHUIBlueprintFunctionLibrary_LeaveSessionById final
{
public:
	const class ARHHUDCommon*                     pHUD;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_LeaveSessionById) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_LeaveSessionById");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_LeaveSessionById) == 0x000020, "Wrong size on RHUIBlueprintFunctionLibrary_LeaveSessionById");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSessionById, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_LeaveSessionById::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSessionById, SessionId) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_LeaveSessionById::SessionId' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_LeaveSessionById, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_LeaveSessionById::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.RegisterGridNavigation
// 0x0028 (0x0028 - 0x0000)
struct RHUIBlueprintFunctionLibrary_RegisterGridNavigation final
{
public:
	class URHWidget*                              ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FocusGroup;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        NavWidgets;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         GridWidth;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NavToLastElementOnDown;                            // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_RegisterGridNavigation");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation) == 0x000028, "Wrong size on RHUIBlueprintFunctionLibrary_RegisterGridNavigation");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation, ParentWidget) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_RegisterGridNavigation::ParentWidget' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation, FocusGroup) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_RegisterGridNavigation::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation, NavWidgets) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_RegisterGridNavigation::NavWidgets' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation, GridWidth) == 0x000020, "Member 'RHUIBlueprintFunctionLibrary_RegisterGridNavigation::GridWidth' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterGridNavigation, NavToLastElementOnDown) == 0x000024, "Member 'RHUIBlueprintFunctionLibrary_RegisterGridNavigation::NavToLastElementOnDown' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.RegisterLinearNavigation
// 0x0030 (0x0030 - 0x0000)
struct RHUIBlueprintFunctionLibrary_RegisterLinearNavigation final
{
public:
	class URHWidget*                              ParentWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URHWidget*>                      NavWidgets;                                        // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         FocusGroup;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHorizontal;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URHWidget*                              NavUpLeftWidget;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URHWidget*                              NavDownRightWidget;                                // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_RegisterLinearNavigation");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation) == 0x000030, "Wrong size on RHUIBlueprintFunctionLibrary_RegisterLinearNavigation");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, ParentWidget) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::ParentWidget' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, NavWidgets) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::NavWidgets' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, FocusGroup) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::FocusGroup' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, bHorizontal) == 0x00001C, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::bHorizontal' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, bLooping) == 0x00001D, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::bLooping' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, NavUpLeftWidget) == 0x000020, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::NavUpLeftWidget' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_RegisterLinearNavigation, NavDownRightWidget) == 0x000028, "Member 'RHUIBlueprintFunctionLibrary_RegisterLinearNavigation::NavDownRightWidget' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.SetupReportPlayerFromGameState
// 0x0080 (0x0080 - 0x0000)
struct RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState final
{
public:
	struct FGuid                                  PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARHGameState*                     State;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReportPlayerParams                    ReturnValue;                                       // 0x0018(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState) == 0x000080, "Wrong size on RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState, PlayerId) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState::PlayerId' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState, State) == 0x000010, "Member 'RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState::State' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState, ReturnValue) == 0x000018, "Member 'RHUIBlueprintFunctionLibrary_SetupReportPlayerFromGameState::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.UIX_ReportPlayer
// 0x0078 (0x0078 - 0x0000)
struct RHUIBlueprintFunctionLibrary_UIX_ReportPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReportPlayerParams                    Params_0;                                          // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_UIX_ReportPlayer) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_UIX_ReportPlayer");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_UIX_ReportPlayer) == 0x000078, "Wrong size on RHUIBlueprintFunctionLibrary_UIX_ReportPlayer");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_UIX_ReportPlayer, WorldContextObject) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_UIX_ReportPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_UIX_ReportPlayer, Params_0) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_UIX_ReportPlayer::Params_0' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_UIX_ReportPlayer, ReturnValue) == 0x000070, "Member 'RHUIBlueprintFunctionLibrary_UIX_ReportPlayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHUIBlueprintFunctionLibrary.ViewPlatformProfileForPlayerState
// 0x0010 (0x0010 - 0x0000)
struct RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState final
{
public:
	class ARHHUDCommon*                           pHUD;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARHPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState) == 0x000008, "Wrong alignment on RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState");
static_assert(sizeof(RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState) == 0x000010, "Wrong size on RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState, pHUD) == 0x000000, "Member 'RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState::pHUD' has a wrong offset!");
static_assert(offsetof(RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState, PlayerState) == 0x000008, "Member 'RHUIBlueprintFunctionLibrary_ViewPlatformProfileForPlayerState::PlayerState' has a wrong offset!");

// Function RallyHereStart.RHViewLayer.GoToRoute_HandleHideFinished
// 0x0008 (0x0008 - 0x0000)
struct RHViewLayer_GoToRoute_HandleHideFinished final
{
public:
	class URHWidget*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewLayer_GoToRoute_HandleHideFinished) == 0x000008, "Wrong alignment on RHViewLayer_GoToRoute_HandleHideFinished");
static_assert(sizeof(RHViewLayer_GoToRoute_HandleHideFinished) == 0x000008, "Wrong size on RHViewLayer_GoToRoute_HandleHideFinished");
static_assert(offsetof(RHViewLayer_GoToRoute_HandleHideFinished, Widget) == 0x000000, "Member 'RHViewLayer_GoToRoute_HandleHideFinished::Widget' has a wrong offset!");

// Function RallyHereStart.RHViewLayer.GoToRoute_HandleShowFinished
// 0x0008 (0x0008 - 0x0000)
struct RHViewLayer_GoToRoute_HandleShowFinished final
{
public:
	class URHWidget*                              Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewLayer_GoToRoute_HandleShowFinished) == 0x000008, "Wrong alignment on RHViewLayer_GoToRoute_HandleShowFinished");
static_assert(sizeof(RHViewLayer_GoToRoute_HandleShowFinished) == 0x000008, "Wrong size on RHViewLayer_GoToRoute_HandleShowFinished");
static_assert(offsetof(RHViewLayer_GoToRoute_HandleShowFinished, Widget) == 0x000000, "Member 'RHViewLayer_GoToRoute_HandleShowFinished::Widget' has a wrong offset!");

// Function RallyHereStart.RHViewLayer.IsRouteValid
// 0x000C (0x000C - 0x0000)
struct RHViewLayer_IsRouteValid final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewLayer_IsRouteValid) == 0x000004, "Wrong alignment on RHViewLayer_IsRouteValid");
static_assert(sizeof(RHViewLayer_IsRouteValid) == 0x00000C, "Wrong size on RHViewLayer_IsRouteValid");
static_assert(offsetof(RHViewLayer_IsRouteValid, RouteTag) == 0x000000, "Member 'RHViewLayer_IsRouteValid::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewLayer_IsRouteValid, ReturnValue) == 0x000008, "Member 'RHViewLayer_IsRouteValid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.ContainsRoute
// 0x000C (0x000C - 0x0000)
struct RHViewManager_ContainsRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_ContainsRoute) == 0x000004, "Wrong alignment on RHViewManager_ContainsRoute");
static_assert(sizeof(RHViewManager_ContainsRoute) == 0x00000C, "Wrong size on RHViewManager_ContainsRoute");
static_assert(offsetof(RHViewManager_ContainsRoute, RouteTag) == 0x000000, "Member 'RHViewManager_ContainsRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_ContainsRoute, ReturnValue) == 0x000008, "Member 'RHViewManager_ContainsRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetPendingRouteData
// 0x0018 (0x0018 - 0x0000)
struct RHViewManager_GetPendingRouteData final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_GetPendingRouteData) == 0x000008, "Wrong alignment on RHViewManager_GetPendingRouteData");
static_assert(sizeof(RHViewManager_GetPendingRouteData) == 0x000018, "Wrong size on RHViewManager_GetPendingRouteData");
static_assert(offsetof(RHViewManager_GetPendingRouteData, RouteTag) == 0x000000, "Member 'RHViewManager_GetPendingRouteData::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetPendingRouteData, Data) == 0x000008, "Member 'RHViewManager_GetPendingRouteData::Data' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetPendingRouteData, ReturnValue) == 0x000010, "Member 'RHViewManager_GetPendingRouteData::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetViewRoute
// 0x0058 (0x0058 - 0x0000)
struct RHViewManager_GetViewRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FViewRoute                             ViewRoute;                                         // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_GetViewRoute) == 0x000008, "Wrong alignment on RHViewManager_GetViewRoute");
static_assert(sizeof(RHViewManager_GetViewRoute) == 0x000058, "Wrong size on RHViewManager_GetViewRoute");
static_assert(offsetof(RHViewManager_GetViewRoute, RouteTag) == 0x000000, "Member 'RHViewManager_GetViewRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetViewRoute, ViewRoute) == 0x000008, "Member 'RHViewManager_GetViewRoute::ViewRoute' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetViewRoute, ReturnValue) == 0x000050, "Member 'RHViewManager_GetViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.PopRoute
// 0x0002 (0x0002 - 0x0000)
struct RHViewManager_PopRoute final
{
public:
	bool                                          ForceTransition;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_PopRoute) == 0x000001, "Wrong alignment on RHViewManager_PopRoute");
static_assert(sizeof(RHViewManager_PopRoute) == 0x000002, "Wrong size on RHViewManager_PopRoute");
static_assert(offsetof(RHViewManager_PopRoute, ForceTransition) == 0x000000, "Member 'RHViewManager_PopRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHViewManager_PopRoute, ReturnValue) == 0x000001, "Member 'RHViewManager_PopRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.PushRoute
// 0x0020 (0x0020 - 0x0000)
struct RHViewManager_PushRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Data;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_PushRoute) == 0x000008, "Wrong alignment on RHViewManager_PushRoute");
static_assert(sizeof(RHViewManager_PushRoute) == 0x000020, "Wrong size on RHViewManager_PushRoute");
static_assert(offsetof(RHViewManager_PushRoute, RouteTag) == 0x000000, "Member 'RHViewManager_PushRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_PushRoute, ForceTransition) == 0x000008, "Member 'RHViewManager_PushRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHViewManager_PushRoute, Data) == 0x000010, "Member 'RHViewManager_PushRoute::Data' has a wrong offset!");
static_assert(offsetof(RHViewManager_PushRoute, ReturnValue) == 0x000018, "Member 'RHViewManager_PushRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.RemoveRoute
// 0x000C (0x000C - 0x0000)
struct RHViewManager_RemoveRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_RemoveRoute) == 0x000004, "Wrong alignment on RHViewManager_RemoveRoute");
static_assert(sizeof(RHViewManager_RemoveRoute) == 0x00000C, "Wrong size on RHViewManager_RemoveRoute");
static_assert(offsetof(RHViewManager_RemoveRoute, RouteTag) == 0x000000, "Member 'RHViewManager_RemoveRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_RemoveRoute, ForceTransition) == 0x000008, "Member 'RHViewManager_RemoveRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHViewManager_RemoveRoute, ReturnValue) == 0x000009, "Member 'RHViewManager_RemoveRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.ReplaceRoute
// 0x0020 (0x0020 - 0x0000)
struct RHViewManager_ReplaceRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Data;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_ReplaceRoute) == 0x000008, "Wrong alignment on RHViewManager_ReplaceRoute");
static_assert(sizeof(RHViewManager_ReplaceRoute) == 0x000020, "Wrong size on RHViewManager_ReplaceRoute");
static_assert(offsetof(RHViewManager_ReplaceRoute, RouteTag) == 0x000000, "Member 'RHViewManager_ReplaceRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_ReplaceRoute, ForceTransition) == 0x000008, "Member 'RHViewManager_ReplaceRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHViewManager_ReplaceRoute, Data) == 0x000010, "Member 'RHViewManager_ReplaceRoute::Data' has a wrong offset!");
static_assert(offsetof(RHViewManager_ReplaceRoute, ReturnValue) == 0x000018, "Member 'RHViewManager_ReplaceRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.SetCursorEnabled
// 0x0008 (0x0008 - 0x0000)
struct RHViewManager_SetCursorEnabled final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_SetCursorEnabled) == 0x000004, "Wrong alignment on RHViewManager_SetCursorEnabled");
static_assert(sizeof(RHViewManager_SetCursorEnabled) == 0x000008, "Wrong size on RHViewManager_SetCursorEnabled");
static_assert(offsetof(RHViewManager_SetCursorEnabled, RouteTag) == 0x000000, "Member 'RHViewManager_SetCursorEnabled::RouteTag' has a wrong offset!");

// Function RallyHereStart.RHViewManager.SetPendingRouteData
// 0x0010 (0x0010 - 0x0000)
struct RHViewManager_SetPendingRouteData final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Data;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_SetPendingRouteData) == 0x000008, "Wrong alignment on RHViewManager_SetPendingRouteData");
static_assert(sizeof(RHViewManager_SetPendingRouteData) == 0x000010, "Wrong size on RHViewManager_SetPendingRouteData");
static_assert(offsetof(RHViewManager_SetPendingRouteData, RouteTag) == 0x000000, "Member 'RHViewManager_SetPendingRouteData::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_SetPendingRouteData, Data) == 0x000008, "Member 'RHViewManager_SetPendingRouteData::Data' has a wrong offset!");

// Function RallyHereStart.RHViewManager.SwapRoute
// 0x0014 (0x0014 - 0x0000)
struct RHViewManager_SwapRoute final
{
public:
	struct FGameplayTag                           RouteTag;                                          // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SwapTargetRouteTag;                                // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTransition;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewManager_SwapRoute) == 0x000004, "Wrong alignment on RHViewManager_SwapRoute");
static_assert(sizeof(RHViewManager_SwapRoute) == 0x000014, "Wrong size on RHViewManager_SwapRoute");
static_assert(offsetof(RHViewManager_SwapRoute, RouteTag) == 0x000000, "Member 'RHViewManager_SwapRoute::RouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_SwapRoute, SwapTargetRouteTag) == 0x000008, "Member 'RHViewManager_SwapRoute::SwapTargetRouteTag' has a wrong offset!");
static_assert(offsetof(RHViewManager_SwapRoute, ForceTransition) == 0x000010, "Member 'RHViewManager_SwapRoute::ForceTransition' has a wrong offset!");
static_assert(offsetof(RHViewManager_SwapRoute, ReturnValue) == 0x000011, "Member 'RHViewManager_SwapRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetCurrentRoute
// 0x000C (0x000C - 0x0000)
struct RHViewManager_GetCurrentRoute final
{
public:
	EViewManagerLayer                             Layer;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetCurrentRoute) == 0x000004, "Wrong alignment on RHViewManager_GetCurrentRoute");
static_assert(sizeof(RHViewManager_GetCurrentRoute) == 0x00000C, "Wrong size on RHViewManager_GetCurrentRoute");
static_assert(offsetof(RHViewManager_GetCurrentRoute, Layer) == 0x000000, "Member 'RHViewManager_GetCurrentRoute::Layer' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetCurrentRoute, ReturnValue) == 0x000004, "Member 'RHViewManager_GetCurrentRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetCurrentTransitionRoute
// 0x000C (0x000C - 0x0000)
struct RHViewManager_GetCurrentTransitionRoute final
{
public:
	EViewManagerLayer                             Layer;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetCurrentTransitionRoute) == 0x000004, "Wrong alignment on RHViewManager_GetCurrentTransitionRoute");
static_assert(sizeof(RHViewManager_GetCurrentTransitionRoute) == 0x00000C, "Wrong size on RHViewManager_GetCurrentTransitionRoute");
static_assert(offsetof(RHViewManager_GetCurrentTransitionRoute, Layer) == 0x000000, "Member 'RHViewManager_GetCurrentTransitionRoute::Layer' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetCurrentTransitionRoute, ReturnValue) == 0x000004, "Member 'RHViewManager_GetCurrentTransitionRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetDefaultRouteForLayer
// 0x000C (0x000C - 0x0000)
struct RHViewManager_GetDefaultRouteForLayer final
{
public:
	EViewManagerLayer                             LayerType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetDefaultRouteForLayer) == 0x000004, "Wrong alignment on RHViewManager_GetDefaultRouteForLayer");
static_assert(sizeof(RHViewManager_GetDefaultRouteForLayer) == 0x00000C, "Wrong size on RHViewManager_GetDefaultRouteForLayer");
static_assert(offsetof(RHViewManager_GetDefaultRouteForLayer, LayerType) == 0x000000, "Member 'RHViewManager_GetDefaultRouteForLayer::LayerType' has a wrong offset!");
static_assert(offsetof(RHViewManager_GetDefaultRouteForLayer, ReturnValue) == 0x000004, "Member 'RHViewManager_GetDefaultRouteForLayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetTopLayer
// 0x0001 (0x0001 - 0x0000)
struct RHViewManager_GetTopLayer final
{
public:
	EViewManagerLayer                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetTopLayer) == 0x000001, "Wrong alignment on RHViewManager_GetTopLayer");
static_assert(sizeof(RHViewManager_GetTopLayer) == 0x000001, "Wrong size on RHViewManager_GetTopLayer");
static_assert(offsetof(RHViewManager_GetTopLayer, ReturnValue) == 0x000000, "Member 'RHViewManager_GetTopLayer::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetTopViewRoute
// 0x0008 (0x0008 - 0x0000)
struct RHViewManager_GetTopViewRoute final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetTopViewRoute) == 0x000004, "Wrong alignment on RHViewManager_GetTopViewRoute");
static_assert(sizeof(RHViewManager_GetTopViewRoute) == 0x000008, "Wrong size on RHViewManager_GetTopViewRoute");
static_assert(offsetof(RHViewManager_GetTopViewRoute, ReturnValue) == 0x000000, "Member 'RHViewManager_GetTopViewRoute::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetTopViewRouteWidget
// 0x0008 (0x0008 - 0x0000)
struct RHViewManager_GetTopViewRouteWidget final
{
public:
	class URHWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetTopViewRouteWidget) == 0x000008, "Wrong alignment on RHViewManager_GetTopViewRouteWidget");
static_assert(sizeof(RHViewManager_GetTopViewRouteWidget) == 0x000008, "Wrong size on RHViewManager_GetTopViewRouteWidget");
static_assert(offsetof(RHViewManager_GetTopViewRouteWidget, ReturnValue) == 0x000000, "Member 'RHViewManager_GetTopViewRouteWidget::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.GetViewRouteCount
// 0x0004 (0x0004 - 0x0000)
struct RHViewManager_GetViewRouteCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_GetViewRouteCount) == 0x000004, "Wrong alignment on RHViewManager_GetViewRouteCount");
static_assert(sizeof(RHViewManager_GetViewRouteCount) == 0x000004, "Wrong size on RHViewManager_GetViewRouteCount");
static_assert(offsetof(RHViewManager_GetViewRouteCount, ReturnValue) == 0x000000, "Member 'RHViewManager_GetViewRouteCount::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.HasCompletedRedirectFlow
// 0x0002 (0x0002 - 0x0000)
struct RHViewManager_HasCompletedRedirectFlow final
{
public:
	EViewRouteRedirectionPhase                    RedirectPhase;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_HasCompletedRedirectFlow) == 0x000001, "Wrong alignment on RHViewManager_HasCompletedRedirectFlow");
static_assert(sizeof(RHViewManager_HasCompletedRedirectFlow) == 0x000002, "Wrong size on RHViewManager_HasCompletedRedirectFlow");
static_assert(offsetof(RHViewManager_HasCompletedRedirectFlow, RedirectPhase) == 0x000000, "Member 'RHViewManager_HasCompletedRedirectFlow::RedirectPhase' has a wrong offset!");
static_assert(offsetof(RHViewManager_HasCompletedRedirectFlow, ReturnValue) == 0x000001, "Member 'RHViewManager_HasCompletedRedirectFlow::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.IsBlockingOrders
// 0x0001 (0x0001 - 0x0000)
struct RHViewManager_IsBlockingOrders final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_IsBlockingOrders) == 0x000001, "Wrong alignment on RHViewManager_IsBlockingOrders");
static_assert(sizeof(RHViewManager_IsBlockingOrders) == 0x000001, "Wrong size on RHViewManager_IsBlockingOrders");
static_assert(offsetof(RHViewManager_IsBlockingOrders, ReturnValue) == 0x000000, "Member 'RHViewManager_IsBlockingOrders::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.IsEveryLayerIdle
// 0x0001 (0x0001 - 0x0000)
struct RHViewManager_IsEveryLayerIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_IsEveryLayerIdle) == 0x000001, "Wrong alignment on RHViewManager_IsEveryLayerIdle");
static_assert(sizeof(RHViewManager_IsEveryLayerIdle) == 0x000001, "Wrong size on RHViewManager_IsEveryLayerIdle");
static_assert(offsetof(RHViewManager_IsEveryLayerIdle, ReturnValue) == 0x000000, "Member 'RHViewManager_IsEveryLayerIdle::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewManager.IsLayerIdle
// 0x0002 (0x0002 - 0x0000)
struct RHViewManager_IsLayerIdle final
{
public:
	EViewManagerLayer                             LayerType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHViewManager_IsLayerIdle) == 0x000001, "Wrong alignment on RHViewManager_IsLayerIdle");
static_assert(sizeof(RHViewManager_IsLayerIdle) == 0x000002, "Wrong size on RHViewManager_IsLayerIdle");
static_assert(offsetof(RHViewManager_IsLayerIdle, LayerType) == 0x000000, "Member 'RHViewManager_IsLayerIdle::LayerType' has a wrong offset!");
static_assert(offsetof(RHViewManager_IsLayerIdle, ReturnValue) == 0x000001, "Member 'RHViewManager_IsLayerIdle::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHViewRedirector_LocalSetting.DoesLocalSettingApply
// 0x0010 (0x0010 - 0x0000)
struct RHViewRedirector_LocalSetting_DoesLocalSettingApply final
{
public:
	class ARHHUDCommon*                           HUD;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHViewRedirector_LocalSetting_DoesLocalSettingApply) == 0x000008, "Wrong alignment on RHViewRedirector_LocalSetting_DoesLocalSettingApply");
static_assert(sizeof(RHViewRedirector_LocalSetting_DoesLocalSettingApply) == 0x000010, "Wrong size on RHViewRedirector_LocalSetting_DoesLocalSettingApply");
static_assert(offsetof(RHViewRedirector_LocalSetting_DoesLocalSettingApply, HUD) == 0x000000, "Member 'RHViewRedirector_LocalSetting_DoesLocalSettingApply::HUD' has a wrong offset!");
static_assert(offsetof(RHViewRedirector_LocalSetting_DoesLocalSettingApply, ReturnValue) == 0x000008, "Member 'RHViewRedirector_LocalSetting_DoesLocalSettingApply::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHVoiceActivityWidget.OnVoiceChatStateChanged
// 0x0014 (0x0014 - 0x0000)
struct RHVoiceActivityWidget_OnVoiceChatStateChanged final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVoiceChannel;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTalking;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RHVoiceActivityWidget_OnVoiceChatStateChanged) == 0x000004, "Wrong alignment on RHVoiceActivityWidget_OnVoiceChatStateChanged");
static_assert(sizeof(RHVoiceActivityWidget_OnVoiceChatStateChanged) == 0x000014, "Wrong size on RHVoiceActivityWidget_OnVoiceChatStateChanged");
static_assert(offsetof(RHVoiceActivityWidget_OnVoiceChatStateChanged, PlayerUuid) == 0x000000, "Member 'RHVoiceActivityWidget_OnVoiceChatStateChanged::PlayerUuid' has a wrong offset!");
static_assert(offsetof(RHVoiceActivityWidget_OnVoiceChatStateChanged, bInVoiceChannel) == 0x000010, "Member 'RHVoiceActivityWidget_OnVoiceChatStateChanged::bInVoiceChannel' has a wrong offset!");
static_assert(offsetof(RHVoiceActivityWidget_OnVoiceChatStateChanged, bIsTalking) == 0x000011, "Member 'RHVoiceActivityWidget_OnVoiceChatStateChanged::bIsTalking' has a wrong offset!");
static_assert(offsetof(RHVoiceActivityWidget_OnVoiceChatStateChanged, bIsMuted) == 0x000012, "Member 'RHVoiceActivityWidget_OnVoiceChatStateChanged::bIsMuted' has a wrong offset!");

// Function RallyHereStart.RHVoiceActivityWidget.GetPlayerInfoByUuid
// 0x0018 (0x0018 - 0x0000)
struct RHVoiceActivityWidget_GetPlayerInfoByUuid final
{
public:
	struct FGuid                                  VoiceId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PlayerInfo*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHVoiceActivityWidget_GetPlayerInfoByUuid) == 0x000008, "Wrong alignment on RHVoiceActivityWidget_GetPlayerInfoByUuid");
static_assert(sizeof(RHVoiceActivityWidget_GetPlayerInfoByUuid) == 0x000018, "Wrong size on RHVoiceActivityWidget_GetPlayerInfoByUuid");
static_assert(offsetof(RHVoiceActivityWidget_GetPlayerInfoByUuid, VoiceId) == 0x000000, "Member 'RHVoiceActivityWidget_GetPlayerInfoByUuid::VoiceId' has a wrong offset!");
static_assert(offsetof(RHVoiceActivityWidget_GetPlayerInfoByUuid, ReturnValue) == 0x000010, "Member 'RHVoiceActivityWidget_GetPlayerInfoByUuid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHVoiceActivityWidget.GetPlayerStateByUuid
// 0x0018 (0x0018 - 0x0000)
struct RHVoiceActivityWidget_GetPlayerStateByUuid final
{
public:
	struct FGuid                                  VoiceId;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARHPlayerState*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHVoiceActivityWidget_GetPlayerStateByUuid) == 0x000008, "Wrong alignment on RHVoiceActivityWidget_GetPlayerStateByUuid");
static_assert(sizeof(RHVoiceActivityWidget_GetPlayerStateByUuid) == 0x000018, "Wrong size on RHVoiceActivityWidget_GetPlayerStateByUuid");
static_assert(offsetof(RHVoiceActivityWidget_GetPlayerStateByUuid, VoiceId) == 0x000000, "Member 'RHVoiceActivityWidget_GetPlayerStateByUuid::VoiceId' has a wrong offset!");
static_assert(offsetof(RHVoiceActivityWidget_GetPlayerStateByUuid, ReturnValue) == 0x000010, "Member 'RHVoiceActivityWidget_GetPlayerStateByUuid::ReturnValue' has a wrong offset!");

// Function RallyHereStart.RHVoucherOrder.GetVoucherOrders
// 0x0010 (0x0010 - 0x0000)
struct RHVoucherOrder_GetVoucherOrders final
{
public:
	TDelegate<void(const TArray<class URHStoreItem*>& PurchaseItems, const TArray<TSoftObjectPtr<class UPlatformInventoryItem>>& CurrencyItems)> Delegate; // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHVoucherOrder_GetVoucherOrders) == 0x000004, "Wrong alignment on RHVoucherOrder_GetVoucherOrders");
static_assert(sizeof(RHVoucherOrder_GetVoucherOrders) == 0x000010, "Wrong size on RHVoucherOrder_GetVoucherOrders");
static_assert(offsetof(RHVoucherOrder_GetVoucherOrders, Delegate) == 0x000000, "Member 'RHVoucherOrder_GetVoucherOrders::Delegate' has a wrong offset!");

// Function RallyHereStart.RHVoucherOrder.RedeemVouchers
// 0x0020 (0x0020 - 0x0000)
struct RHVoucherOrder_RedeemVouchers final
{
public:
	TArray<class URHStoreItem*>                   VoucherItems;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(bool bSuccess)>                Delegate;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RHVoucherOrder_RedeemVouchers) == 0x000008, "Wrong alignment on RHVoucherOrder_RedeemVouchers");
static_assert(sizeof(RHVoucherOrder_RedeemVouchers) == 0x000020, "Wrong size on RHVoucherOrder_RedeemVouchers");
static_assert(offsetof(RHVoucherOrder_RedeemVouchers, VoucherItems) == 0x000000, "Member 'RHVoucherOrder_RedeemVouchers::VoucherItems' has a wrong offset!");
static_assert(offsetof(RHVoucherOrder_RedeemVouchers, Delegate) == 0x000010, "Member 'RHVoucherOrder_RedeemVouchers::Delegate' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.AddAnimation
// 0x002C (0x002C - 0x0000)
struct TickAnimationManager_AddAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float ElapsedTime, float ElapsedAlpha)> UpdateEvent;                              // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             FinishedEvent;                                     // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_AddAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_AddAnimation");
static_assert(sizeof(TickAnimationManager_AddAnimation) == 0x00002C, "Wrong size on TickAnimationManager_AddAnimation");
static_assert(offsetof(TickAnimationManager_AddAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_AddAnimation::AnimName' has a wrong offset!");
static_assert(offsetof(TickAnimationManager_AddAnimation, Duration) == 0x000008, "Member 'TickAnimationManager_AddAnimation::Duration' has a wrong offset!");
static_assert(offsetof(TickAnimationManager_AddAnimation, UpdateEvent) == 0x00000C, "Member 'TickAnimationManager_AddAnimation::UpdateEvent' has a wrong offset!");
static_assert(offsetof(TickAnimationManager_AddAnimation, FinishedEvent) == 0x00001C, "Member 'TickAnimationManager_AddAnimation::FinishedEvent' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.ApplyTick
// 0x0004 (0x0004 - 0x0000)
struct TickAnimationManager_ApplyTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_ApplyTick) == 0x000004, "Wrong alignment on TickAnimationManager_ApplyTick");
static_assert(sizeof(TickAnimationManager_ApplyTick) == 0x000004, "Wrong size on TickAnimationManager_ApplyTick");
static_assert(offsetof(TickAnimationManager_ApplyTick, DeltaTime) == 0x000000, "Member 'TickAnimationManager_ApplyTick::DeltaTime' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.GetAnimationInfo
// 0x0038 (0x0038 - 0x0000)
struct TickAnimationManager_GetAnimationInfo final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTickAnimationParams                   OutAnimParams;                                     // 0x0008(0x002C)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TickAnimationManager_GetAnimationInfo) == 0x000004, "Wrong alignment on TickAnimationManager_GetAnimationInfo");
static_assert(sizeof(TickAnimationManager_GetAnimationInfo) == 0x000038, "Wrong size on TickAnimationManager_GetAnimationInfo");
static_assert(offsetof(TickAnimationManager_GetAnimationInfo, AnimName) == 0x000000, "Member 'TickAnimationManager_GetAnimationInfo::AnimName' has a wrong offset!");
static_assert(offsetof(TickAnimationManager_GetAnimationInfo, OutAnimParams) == 0x000008, "Member 'TickAnimationManager_GetAnimationInfo::OutAnimParams' has a wrong offset!");
static_assert(offsetof(TickAnimationManager_GetAnimationInfo, ReturnValue) == 0x000034, "Member 'TickAnimationManager_GetAnimationInfo::ReturnValue' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.PauseAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_PauseAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_PauseAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_PauseAnimation");
static_assert(sizeof(TickAnimationManager_PauseAnimation) == 0x000008, "Wrong size on TickAnimationManager_PauseAnimation");
static_assert(offsetof(TickAnimationManager_PauseAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_PauseAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.PlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_PlayAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_PlayAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_PlayAnimation");
static_assert(sizeof(TickAnimationManager_PlayAnimation) == 0x000008, "Wrong size on TickAnimationManager_PlayAnimation");
static_assert(offsetof(TickAnimationManager_PlayAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_PlayAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.RemoveAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_RemoveAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_RemoveAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_RemoveAnimation");
static_assert(sizeof(TickAnimationManager_RemoveAnimation) == 0x000008, "Wrong size on TickAnimationManager_RemoveAnimation");
static_assert(offsetof(TickAnimationManager_RemoveAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_RemoveAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.ResumeAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_ResumeAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_ResumeAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_ResumeAnimation");
static_assert(sizeof(TickAnimationManager_ResumeAnimation) == 0x000008, "Wrong size on TickAnimationManager_ResumeAnimation");
static_assert(offsetof(TickAnimationManager_ResumeAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_ResumeAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.SkipToEndAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_SkipToEndAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_SkipToEndAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_SkipToEndAnimation");
static_assert(sizeof(TickAnimationManager_SkipToEndAnimation) == 0x000008, "Wrong size on TickAnimationManager_SkipToEndAnimation");
static_assert(offsetof(TickAnimationManager_SkipToEndAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_SkipToEndAnimation::AnimName' has a wrong offset!");

// Function RallyHereStart.TickAnimationManager.StopAnimation
// 0x0008 (0x0008 - 0x0000)
struct TickAnimationManager_StopAnimation final
{
public:
	class FName                                   AnimName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TickAnimationManager_StopAnimation) == 0x000004, "Wrong alignment on TickAnimationManager_StopAnimation");
static_assert(sizeof(TickAnimationManager_StopAnimation) == 0x000008, "Wrong size on TickAnimationManager_StopAnimation");
static_assert(offsetof(TickAnimationManager_StopAnimation, AnimName) == 0x000000, "Member 'TickAnimationManager_StopAnimation::AnimName' has a wrong offset!");

}

