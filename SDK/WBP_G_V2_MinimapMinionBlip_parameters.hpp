#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_G_V2_MinimapMinionBlip

#include "Basic.hpp"

#include "HemingwayUI_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function WBP_G_V2_MinimapMinionBlip.WBP_G_V2_MinimapMinionBlip_C.SetMinionBlipType
// 0x0040 (0x0040 - 0x0000)
struct WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType final
{
public:
	EHWMinionBlipType                             MinionType;                                        // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHWMinionBlipType                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EHWMinionBlipType                             Temp_byte_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType) == 0x000008, "Wrong alignment on WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType");
static_assert(sizeof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType) == 0x000040, "Wrong size on WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, MinionType) == 0x000000, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::MinionType' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_byte_Variable) == 0x000001, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_object_Variable) == 0x000008, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_object_Variable_1) == 0x000010, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_object_Variable_2) == 0x000018, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_byte_Variable_1) == 0x000020, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_real_Variable) == 0x000024, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_real_Variable_1) == 0x000028, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, Temp_real_Variable_2) == 0x00002C, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, K2Node_Select_Default) == 0x000030, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType, K2Node_Select_Default_1) == 0x000038, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetMinionBlipType::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_G_V2_MinimapMinionBlip.WBP_G_V2_MinimapMinionBlip_C.SetTeamColoration
// 0x001C (0x001C - 0x0000)
struct WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration final
{
public:
	bool                                          bFriendly;                                         // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable_1;                            // 0x000C(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           K2Node_Select_Default;                             // 0x0014(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration) == 0x000004, "Wrong alignment on WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration");
static_assert(sizeof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration) == 0x00001C, "Wrong size on WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration, bFriendly) == 0x000000, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration::bFriendly' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration, Temp_struct_Variable) == 0x000004, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration, Temp_struct_Variable_1) == 0x00000C, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration, K2Node_Select_Default) == 0x000014, "Member 'WBP_G_V2_MinimapMinionBlip_C_SetTeamColoration::K2Node_Select_Default' has a wrong offset!");

// Function WBP_G_V2_MinimapMinionBlip.WBP_G_V2_MinimapMinionBlip_C.ToggleFireStateDisplay
// 0x0020 (0x0020 - 0x0000)
struct WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay final
{
public:
	bool                                          bInIsFireMinion;                                   // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay) == 0x000008, "Wrong alignment on WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay");
static_assert(sizeof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay) == 0x000020, "Wrong size on WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, bInIsFireMinion) == 0x000000, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::bInIsFireMinion' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, Temp_bool_Variable) == 0x000001, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, Temp_real_Variable) == 0x000004, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, Temp_real_Variable_1) == 0x000008, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay, K2Node_Select_Default) == 0x000018, "Member 'WBP_G_V2_MinimapMinionBlip_C_ToggleFireStateDisplay::K2Node_Select_Default' has a wrong offset!");

}

