#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RallyHereIntegration

#include "Basic.hpp"

#include "RallyHereAPI_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RallyHereIntegration.ERH_ServerBootstrapFlowStep
// NumValues: 0x000A
enum class ERH_ServerBootstrapFlowStep : uint8
{
	Unstarted                                = 0,
	Failed                                   = 1,
	LoggingIn                                = 2,
	Recycling                                = 3,
	Registration                             = 4,
	WaitingForSession                        = 5,
	SyncingToSession                         = 6,
	Complete                                 = 7,
	Cleanup                                  = 8,
	ERH_MAX                                  = 9,
};

// Enum RallyHereIntegration.ERHAPI_LocalPlayerLoginOSS
// NumValues: 0x0004
enum class ERHAPI_LocalPlayerLoginOSS : uint8
{
	None                                     = 0,
	Login                                    = 1,
	Nickname                                 = 2,
	ERHAPI_MAX                               = 3,
};

// Enum RallyHereIntegration.ERHAPI_LoginResult
// NumValues: 0x0018
enum class ERHAPI_LoginResult : uint8
{
	Success                                  = 0,
	Fail_PartialInstall                      = 1,
	Fail_LoginAlreadyPending                 = 2,
	Fail_OSSMissing                          = 3,
	Fail_OSSNotSupported                     = 4,
	Fail_OSSLoginUINotShown                  = 5,
	Fail_OSSLoginUINoUserSelected            = 6,
	Fail_OSSLogin                            = 7,
	Fail_OSSLogout                           = 8,
	Fail_OSSNeedsProfile                     = 9,
	Fail_OSSAccountTypeNotSufficient         = 10,
	Fail_OSSUserNotFound                     = 11,
	Fail_OSSAgeRestriction                   = 12,
	Fail_OSSOnlinePlayRestriction            = 13,
	Fail_OSSPrivilegeCheck                   = 14,
	Fail_OSSAuthToken                        = 15,
	Fail_MustAcceptAgreements                = 16,
	Fail_RHDenied                            = 17,
	Fail_LocalPlayerMissing                  = 18,
	Fail_ReloginWithoutSavedCredentials      = 19,
	Fail_InvalidAuthContext                  = 20,
	Fail_InvalidOSSUniqueNetId               = 21,
	Fail_RHUnknown                           = 22,
	ERHAPI_MAX                               = 23,
};

// Enum RallyHereIntegration.ESyncActionState
// NumValues: 0x000C
enum class ESyncActionState : uint8
{
	Uninitialized                            = 0,
	Unsynchronized                           = 1,
	CreatePlatformSession                    = 2,
	JoinPlatformSession                      = 3,
	LeavePlatformSession                     = 4,
	UpdateRHSession                          = 5,
	Synchronized                             = 6,
	WaitingForScout                          = 7,
	Error                                    = 8,
	Cleanup                                  = 9,
	CleanupComplete                          = 10,
	ESyncActionState_MAX                     = 11,
};

// Enum RallyHereIntegration.ERH_ServerBootstrapMode
// NumValues: 0x0005
enum class ERH_ServerBootstrapMode : uint8
{
	Disabled                                 = 0,
	LoginOnly                                = 1,
	Allocated                                = 2,
	Reserved                                 = 3,
	ERH_MAX                                  = 4,
};

// Enum RallyHereIntegration.EGamesightEvent
// NumValues: 0x0009
enum class EGamesightEvent : uint8
{
	ESE_None                                 = 0,
	ESE_Custom                               = 1,
	ESE_Login                                = 2,
	ESE_FirstLogin                           = 3,
	ESE_RealMoneyPurchase                    = 4,
	ESE_InGameCurrencyPurchase               = 5,
	ESE_LevelChange                          = 6,
	ESE_MatchPlayed                          = 7,
	ESE_MAX                                  = 8,
};

// Enum RallyHereIntegration.ERH_HostMapLoadMethod
// NumValues: 0x0004
enum class ERH_HostMapLoadMethod : uint8
{
	ServerTravelAlways                       = 0,
	SeamlessTravelAlways                     = 1,
	ServerTravelOnlyIfNeeded                 = 2,
	ERH_MAX                                  = 3,
};

// Enum RallyHereIntegration.ERH_PEXValueType
// NumValues: 0x0006
enum class ERH_PEXValueType : uint8
{
	Current                                  = 0,
	Min                                      = 1,
	Max                                      = 2,
	Avg                                      = 3,
	Sum                                      = 4,
	Count                                    = 5,
};

// Enum RallyHereIntegration.FRH_NotificationPollingTypes
// NumValues: 0x0002
enum class EFRH_NotificationPollingTypes : uint8
{
	LongPoll                                 = 0,
	FRH_MAX                                  = 1,
};

// ScriptStruct RallyHereIntegration.RH_ErrorInfo
// 0x00A8 (0x00A8 - 0x0000)
struct FRH_ErrorInfo final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResponseContent;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRHCommonError;                                  // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_HzApiErrorModel                 RHCommonError;                                     // 0x0038(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsRHValidationError;                              // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_ValidationError                 RHValidationError;                                 // 0x0070(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_ErrorInfo) == 0x000008, "Wrong alignment on FRH_ErrorInfo");
static_assert(sizeof(FRH_ErrorInfo) == 0x0000A8, "Wrong size on FRH_ErrorInfo");
static_assert(offsetof(FRH_ErrorInfo, ResponseCode) == 0x000018, "Member 'FRH_ErrorInfo::ResponseCode' has a wrong offset!");
static_assert(offsetof(FRH_ErrorInfo, ResponseContent) == 0x000020, "Member 'FRH_ErrorInfo::ResponseContent' has a wrong offset!");
static_assert(offsetof(FRH_ErrorInfo, bIsRHCommonError) == 0x000030, "Member 'FRH_ErrorInfo::bIsRHCommonError' has a wrong offset!");
static_assert(offsetof(FRH_ErrorInfo, RHCommonError) == 0x000038, "Member 'FRH_ErrorInfo::RHCommonError' has a wrong offset!");
static_assert(offsetof(FRH_ErrorInfo, bIsRHValidationError) == 0x000068, "Member 'FRH_ErrorInfo::bIsRHValidationError' has a wrong offset!");
static_assert(offsetof(FRH_ErrorInfo, RHValidationError) == 0x000070, "Member 'FRH_ErrorInfo::RHValidationError' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_CustomEndpointResponseWrapper
// 0x00D0 (0x00D0 - 0x0000)
struct FRH_CustomEndpointResponseWrapper final
{
public:
	int32                                         HttpResponseCode;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         HttpHeaders;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FRHAPI_JsonValue                       HttpBody;                                          // 0x0018(0x0010)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
	struct FRH_ErrorInfo                          RHErrorInfo;                                       // 0x0028(0x00A8)(Edit, DisableEditOnTemplate, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_CustomEndpointResponseWrapper) == 0x000008, "Wrong alignment on FRH_CustomEndpointResponseWrapper");
static_assert(sizeof(FRH_CustomEndpointResponseWrapper) == 0x0000D0, "Wrong size on FRH_CustomEndpointResponseWrapper");
static_assert(offsetof(FRH_CustomEndpointResponseWrapper, HttpResponseCode) == 0x000000, "Member 'FRH_CustomEndpointResponseWrapper::HttpResponseCode' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointResponseWrapper, HttpHeaders) == 0x000008, "Member 'FRH_CustomEndpointResponseWrapper::HttpHeaders' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointResponseWrapper, HttpBody) == 0x000018, "Member 'FRH_CustomEndpointResponseWrapper::HttpBody' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointResponseWrapper, RHErrorInfo) == 0x000028, "Member 'FRH_CustomEndpointResponseWrapper::RHErrorInfo' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_MatchSearchParams
// 0x0080 (0x0080 - 0x0000)
struct FRH_MatchSearchParams final
{
public:
	int32                                         PageSize;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InstanceId;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AllocationId;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostPlayerUuid;                                    // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerUuid;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSegments;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludePlayers;                                   // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Cursor;                                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_MatchSearchParams) == 0x000008, "Wrong alignment on FRH_MatchSearchParams");
static_assert(sizeof(FRH_MatchSearchParams) == 0x000080, "Wrong size on FRH_MatchSearchParams");
static_assert(offsetof(FRH_MatchSearchParams, PageSize) == 0x000000, "Member 'FRH_MatchSearchParams::PageSize' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, InstanceId) == 0x000008, "Member 'FRH_MatchSearchParams::InstanceId' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, AllocationId) == 0x000018, "Member 'FRH_MatchSearchParams::AllocationId' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, SessionId) == 0x000028, "Member 'FRH_MatchSearchParams::SessionId' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, HostPlayerUuid) == 0x000038, "Member 'FRH_MatchSearchParams::HostPlayerUuid' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, RegionId) == 0x000048, "Member 'FRH_MatchSearchParams::RegionId' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, PlayerUuid) == 0x000058, "Member 'FRH_MatchSearchParams::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, bIncludeSegments) == 0x000068, "Member 'FRH_MatchSearchParams::bIncludeSegments' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, bIncludePlayers) == 0x000069, "Member 'FRH_MatchSearchParams::bIncludePlayers' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchParams, Cursor) == 0x000070, "Member 'FRH_MatchSearchParams::Cursor' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_MatchSearchResult
// 0x00A0 (0x00A0 - 0x0000)
struct FRH_MatchSearchResult final
{
public:
	struct FRH_MatchSearchParams                  SearchParams;                                      // 0x0000(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_MatchWithPlayers>        Matches;                                           // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 NextPageCursor;                                    // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_MatchSearchResult) == 0x000008, "Wrong alignment on FRH_MatchSearchResult");
static_assert(sizeof(FRH_MatchSearchResult) == 0x0000A0, "Wrong size on FRH_MatchSearchResult");
static_assert(offsetof(FRH_MatchSearchResult, SearchParams) == 0x000000, "Member 'FRH_MatchSearchResult::SearchParams' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchResult, Matches) == 0x000080, "Member 'FRH_MatchSearchResult::Matches' has a wrong offset!");
static_assert(offsetof(FRH_MatchSearchResult, NextPageCursor) == 0x000090, "Member 'FRH_MatchSearchResult::NextPageCursor' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_LoginResult
// 0x0060 (0x0060 - 0x0000)
struct FRH_LoginResult final
{
public:
	ERHAPI_LoginResult                            Result;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_LocalPlayerLoginOSS                    OSSType;                                           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OSSErrorMessage;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RallyHereErrorCode;                                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PrivilegeResults;                                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustAcceptEULA;                                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustAcceptTOS;                                    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMustAcceptPP;                                     // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRHAPI_Restriction>             Restrictions;                                      // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_LoginResult) == 0x000008, "Wrong alignment on FRH_LoginResult");
static_assert(sizeof(FRH_LoginResult) == 0x000060, "Wrong size on FRH_LoginResult");
static_assert(offsetof(FRH_LoginResult, Result) == 0x000000, "Member 'FRH_LoginResult::Result' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, OSSType) == 0x000001, "Member 'FRH_LoginResult::OSSType' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, OSSErrorMessage) == 0x000008, "Member 'FRH_LoginResult::OSSErrorMessage' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, RallyHereErrorCode) == 0x000018, "Member 'FRH_LoginResult::RallyHereErrorCode' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, PrivilegeResults) == 0x000048, "Member 'FRH_LoginResult::PrivilegeResults' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, bMustAcceptEULA) == 0x00004C, "Member 'FRH_LoginResult::bMustAcceptEULA' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, bMustAcceptTOS) == 0x00004D, "Member 'FRH_LoginResult::bMustAcceptTOS' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, bMustAcceptPP) == 0x00004E, "Member 'FRH_LoginResult::bMustAcceptPP' has a wrong offset!");
static_assert(offsetof(FRH_LoginResult, Restrictions) == 0x000050, "Member 'FRH_LoginResult::Restrictions' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_EnvironmentConfiguration
// 0x0040 (0x0040 - 0x0000)
struct FRH_EnvironmentConfiguration final
{
public:
	class FString                                 EnvironmentId;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BaseUrl;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSecret;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_EnvironmentConfiguration) == 0x000008, "Wrong alignment on FRH_EnvironmentConfiguration");
static_assert(sizeof(FRH_EnvironmentConfiguration) == 0x000040, "Wrong size on FRH_EnvironmentConfiguration");
static_assert(offsetof(FRH_EnvironmentConfiguration, EnvironmentId) == 0x000000, "Member 'FRH_EnvironmentConfiguration::EnvironmentId' has a wrong offset!");
static_assert(offsetof(FRH_EnvironmentConfiguration, BaseUrl) == 0x000010, "Member 'FRH_EnvironmentConfiguration::BaseUrl' has a wrong offset!");
static_assert(offsetof(FRH_EnvironmentConfiguration, ClientId) == 0x000020, "Member 'FRH_EnvironmentConfiguration::ClientId' has a wrong offset!");
static_assert(offsetof(FRH_EnvironmentConfiguration, ClientSecret) == 0x000030, "Member 'FRH_EnvironmentConfiguration::ClientSecret' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_QueueSearchParams
// 0x0008 (0x0008 - 0x0000)
struct FRH_QueueSearchParams final
{
public:
	int32                                         Cursor;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_QueueSearchParams) == 0x000004, "Wrong alignment on FRH_QueueSearchParams");
static_assert(sizeof(FRH_QueueSearchParams) == 0x000008, "Wrong size on FRH_QueueSearchParams");
static_assert(offsetof(FRH_QueueSearchParams, Cursor) == 0x000000, "Member 'FRH_QueueSearchParams::Cursor' has a wrong offset!");
static_assert(offsetof(FRH_QueueSearchParams, PageSize) == 0x000004, "Member 'FRH_QueueSearchParams::PageSize' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_QueueSearchResult
// 0x0018 (0x0018 - 0x0000)
struct FRH_QueueSearchResult final
{
public:
	struct FRH_QueueSearchParams                  SearchParams;                                      // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class URH_MatchmakingQueueInfo>> Queues;                                   // 0x0008(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_QueueSearchResult) == 0x000008, "Wrong alignment on FRH_QueueSearchResult");
static_assert(sizeof(FRH_QueueSearchResult) == 0x000018, "Wrong size on FRH_QueueSearchResult");
static_assert(offsetof(FRH_QueueSearchResult, SearchParams) == 0x000000, "Member 'FRH_QueueSearchResult::SearchParams' has a wrong offset!");
static_assert(offsetof(FRH_QueueSearchResult, Queues) == 0x000008, "Member 'FRH_QueueSearchResult::Queues' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_SessionMemberStatusState
// 0x0018 (0x0018 - 0x0000)
struct FRH_SessionMemberStatusState final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_SessionPlayerStatus                    Status;                                            // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamId;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_SessionMemberStatusState) == 0x000004, "Wrong alignment on FRH_SessionMemberStatusState");
static_assert(sizeof(FRH_SessionMemberStatusState) == 0x000018, "Wrong size on FRH_SessionMemberStatusState");
static_assert(offsetof(FRH_SessionMemberStatusState, PlayerUuid) == 0x000000, "Member 'FRH_SessionMemberStatusState::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRH_SessionMemberStatusState, bIsValid) == 0x000010, "Member 'FRH_SessionMemberStatusState::bIsValid' has a wrong offset!");
static_assert(offsetof(FRH_SessionMemberStatusState, Status) == 0x000011, "Member 'FRH_SessionMemberStatusState::Status' has a wrong offset!");
static_assert(offsetof(FRH_SessionMemberStatusState, TeamId) == 0x000014, "Member 'FRH_SessionMemberStatusState::TeamId' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_SessionBrowserSearchParams
// 0x0040 (0x0040 - 0x0000)
struct FRH_SessionBrowserSearchParams final
{
public:
	class FString                                 SessionType;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RegionId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SessionIds;                                        // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Cursor;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheSessionDetails;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_SessionBrowserSearchParams) == 0x000008, "Wrong alignment on FRH_SessionBrowserSearchParams");
static_assert(sizeof(FRH_SessionBrowserSearchParams) == 0x000040, "Wrong size on FRH_SessionBrowserSearchParams");
static_assert(offsetof(FRH_SessionBrowserSearchParams, SessionType) == 0x000000, "Member 'FRH_SessionBrowserSearchParams::SessionType' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchParams, RegionId) == 0x000010, "Member 'FRH_SessionBrowserSearchParams::RegionId' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchParams, SessionIds) == 0x000020, "Member 'FRH_SessionBrowserSearchParams::SessionIds' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchParams, Cursor) == 0x000030, "Member 'FRH_SessionBrowserSearchParams::Cursor' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchParams, PageSize) == 0x000034, "Member 'FRH_SessionBrowserSearchParams::PageSize' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchParams, bCacheSessionDetails) == 0x000038, "Member 'FRH_SessionBrowserSearchParams::bCacheSessionDetails' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_SessionBrowserSearchResult
// 0x0068 (0x0068 - 0x0000)
struct FRH_SessionBrowserSearchResult final
{
public:
	struct FRH_SessionBrowserSearchParams         SearchParams;                                      // 0x0000(0x0040)(NativeAccessSpecifierPublic)
	TArray<struct FRHAPI_BrowserSessionInfo>      SessionInfos;                                      // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class URH_SessionView>> Sessions;                                          // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         NextPageCursor;                                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_SessionBrowserSearchResult) == 0x000008, "Wrong alignment on FRH_SessionBrowserSearchResult");
static_assert(sizeof(FRH_SessionBrowserSearchResult) == 0x000068, "Wrong size on FRH_SessionBrowserSearchResult");
static_assert(offsetof(FRH_SessionBrowserSearchResult, SearchParams) == 0x000000, "Member 'FRH_SessionBrowserSearchResult::SearchParams' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchResult, SessionInfos) == 0x000040, "Member 'FRH_SessionBrowserSearchResult::SessionInfos' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchResult, Sessions) == 0x000050, "Member 'FRH_SessionBrowserSearchResult::Sessions' has a wrong offset!");
static_assert(offsetof(FRH_SessionBrowserSearchResult, NextPageCursor) == 0x000060, "Member 'FRH_SessionBrowserSearchResult::NextPageCursor' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_PlayerSettingsDataWrapper
// 0x0060 (0x0060 - 0x0000)
struct FRH_PlayerSettingsDataWrapper final
{
public:
	TMap<class FString, struct FRHAPI_SettingData> Content;                                          // 0x0000(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FDateTime                              LastMultiFetchTime;                                // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastMultiFetchETag;                                // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_PlayerSettingsDataWrapper) == 0x000008, "Wrong alignment on FRH_PlayerSettingsDataWrapper");
static_assert(sizeof(FRH_PlayerSettingsDataWrapper) == 0x000060, "Wrong size on FRH_PlayerSettingsDataWrapper");
static_assert(offsetof(FRH_PlayerSettingsDataWrapper, Content) == 0x000000, "Member 'FRH_PlayerSettingsDataWrapper::Content' has a wrong offset!");
static_assert(offsetof(FRH_PlayerSettingsDataWrapper, LastMultiFetchTime) == 0x000050, "Member 'FRH_PlayerSettingsDataWrapper::LastMultiFetchTime' has a wrong offset!");
static_assert(offsetof(FRH_PlayerSettingsDataWrapper, LastMultiFetchETag) == 0x000058, "Member 'FRH_PlayerSettingsDataWrapper::LastMultiFetchETag' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_GuideSearchRequest
// 0x0278 (0x0278 - 0x0000)
struct FRH_GuideSearchRequest final
{
public:
	TArray<ERHAPI_SearchGuideSort>                SortBy;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ERHAPI_SortDirection>                  Sort;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoOwnerSearch;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_GuideEntityType                        OwnerEntityType;                                   // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OwnerEntityId;                                     // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GuideType;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref1;                                              // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref2;                                              // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref3;                                              // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref4;                                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref5;                                              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref6;                                              // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref7;                                              // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref8;                                              // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref9;                                              // 0x00F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref10;                                             // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref11;                                             // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref12;                                             // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref13;                                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref14;                                             // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref15;                                             // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref16;                                             // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref17;                                             // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref18;                                             // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref19;                                             // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref20;                                             // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref21;                                             // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref22;                                             // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref23;                                             // 0x01D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref24;                                             // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref25;                                             // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref26;                                             // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref27;                                             // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref28;                                             // 0x0228(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref29;                                             // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref30;                                             // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref31;                                             // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ref32;                                             // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_GuideSearchRequest) == 0x000008, "Wrong alignment on FRH_GuideSearchRequest");
static_assert(sizeof(FRH_GuideSearchRequest) == 0x000278, "Wrong size on FRH_GuideSearchRequest");
static_assert(offsetof(FRH_GuideSearchRequest, SortBy) == 0x000000, "Member 'FRH_GuideSearchRequest::SortBy' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Sort) == 0x000010, "Member 'FRH_GuideSearchRequest::Sort' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, PageSize) == 0x000020, "Member 'FRH_GuideSearchRequest::PageSize' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, bDoOwnerSearch) == 0x000024, "Member 'FRH_GuideSearchRequest::bDoOwnerSearch' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, OwnerEntityType) == 0x000025, "Member 'FRH_GuideSearchRequest::OwnerEntityType' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, OwnerEntityId) == 0x000028, "Member 'FRH_GuideSearchRequest::OwnerEntityId' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Language) == 0x000038, "Member 'FRH_GuideSearchRequest::Language' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, GuideType) == 0x000048, "Member 'FRH_GuideSearchRequest::GuideType' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, GameVersion) == 0x000058, "Member 'FRH_GuideSearchRequest::GameVersion' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Name) == 0x000068, "Member 'FRH_GuideSearchRequest::Name' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref1) == 0x000078, "Member 'FRH_GuideSearchRequest::Ref1' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref2) == 0x000088, "Member 'FRH_GuideSearchRequest::Ref2' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref3) == 0x000098, "Member 'FRH_GuideSearchRequest::Ref3' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref4) == 0x0000A8, "Member 'FRH_GuideSearchRequest::Ref4' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref5) == 0x0000B8, "Member 'FRH_GuideSearchRequest::Ref5' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref6) == 0x0000C8, "Member 'FRH_GuideSearchRequest::Ref6' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref7) == 0x0000D8, "Member 'FRH_GuideSearchRequest::Ref7' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref8) == 0x0000E8, "Member 'FRH_GuideSearchRequest::Ref8' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref9) == 0x0000F8, "Member 'FRH_GuideSearchRequest::Ref9' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref10) == 0x000108, "Member 'FRH_GuideSearchRequest::Ref10' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref11) == 0x000118, "Member 'FRH_GuideSearchRequest::Ref11' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref12) == 0x000128, "Member 'FRH_GuideSearchRequest::Ref12' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref13) == 0x000138, "Member 'FRH_GuideSearchRequest::Ref13' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref14) == 0x000148, "Member 'FRH_GuideSearchRequest::Ref14' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref15) == 0x000158, "Member 'FRH_GuideSearchRequest::Ref15' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref16) == 0x000168, "Member 'FRH_GuideSearchRequest::Ref16' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref17) == 0x000178, "Member 'FRH_GuideSearchRequest::Ref17' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref18) == 0x000188, "Member 'FRH_GuideSearchRequest::Ref18' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref19) == 0x000198, "Member 'FRH_GuideSearchRequest::Ref19' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref20) == 0x0001A8, "Member 'FRH_GuideSearchRequest::Ref20' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref21) == 0x0001B8, "Member 'FRH_GuideSearchRequest::Ref21' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref22) == 0x0001C8, "Member 'FRH_GuideSearchRequest::Ref22' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref23) == 0x0001D8, "Member 'FRH_GuideSearchRequest::Ref23' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref24) == 0x0001E8, "Member 'FRH_GuideSearchRequest::Ref24' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref25) == 0x0001F8, "Member 'FRH_GuideSearchRequest::Ref25' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref26) == 0x000208, "Member 'FRH_GuideSearchRequest::Ref26' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref27) == 0x000218, "Member 'FRH_GuideSearchRequest::Ref27' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref28) == 0x000228, "Member 'FRH_GuideSearchRequest::Ref28' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref29) == 0x000238, "Member 'FRH_GuideSearchRequest::Ref29' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref30) == 0x000248, "Member 'FRH_GuideSearchRequest::Ref30' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref31) == 0x000258, "Member 'FRH_GuideSearchRequest::Ref31' has a wrong offset!");
static_assert(offsetof(FRH_GuideSearchRequest, Ref32) == 0x000268, "Member 'FRH_GuideSearchRequest::Ref32' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_LegacyIdToGuid
// 0x0014 (0x0014 - 0x0000)
struct FRH_LegacyIdToGuid
{
public:
	struct FGuid                                  ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LegacyId;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRH_LegacyIdToGuid) == 0x000004, "Wrong alignment on FRH_LegacyIdToGuid");
static_assert(sizeof(FRH_LegacyIdToGuid) == 0x000014, "Wrong size on FRH_LegacyIdToGuid");
static_assert(offsetof(FRH_LegacyIdToGuid, ID) == 0x000000, "Member 'FRH_LegacyIdToGuid::ID' has a wrong offset!");
static_assert(offsetof(FRH_LegacyIdToGuid, LegacyId) == 0x000010, "Member 'FRH_LegacyIdToGuid::LegacyId' has a wrong offset!");

// ScriptStruct RallyHereIntegration.GamesightEventParameters
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x08) FGamesightEventParameters final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGamesightEventParameters) == 0x000008, "Wrong alignment on FGamesightEventParameters");
static_assert(sizeof(FGamesightEventParameters) == 0x0000C8, "Wrong size on FGamesightEventParameters");

// ScriptStruct RallyHereIntegration.RH_ItemId
// 0x0000 (0x0014 - 0x0014)
struct FRH_ItemId final : public FRH_LegacyIdToGuid
{
};
static_assert(alignof(FRH_ItemId) == 0x000004, "Wrong alignment on FRH_ItemId");
static_assert(sizeof(FRH_ItemId) == 0x000014, "Wrong size on FRH_ItemId");

// ScriptStruct RallyHereIntegration.RH_CustomEndpointRequestWrapper
// 0x0038 (0x0038 - 0x0000)
struct FRH_CustomEndpointRequestWrapper final
{
public:
	class FString                                 EndpointId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonValue                       Body;                                              // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_CustomEndpointRequestWrapper) == 0x000008, "Wrong alignment on FRH_CustomEndpointRequestWrapper");
static_assert(sizeof(FRH_CustomEndpointRequestWrapper) == 0x000038, "Wrong size on FRH_CustomEndpointRequestWrapper");
static_assert(offsetof(FRH_CustomEndpointRequestWrapper, EndpointId) == 0x000000, "Member 'FRH_CustomEndpointRequestWrapper::EndpointId' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointRequestWrapper, Priority) == 0x000010, "Member 'FRH_CustomEndpointRequestWrapper::Priority' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointRequestWrapper, Body) == 0x000018, "Member 'FRH_CustomEndpointRequestWrapper::Body' has a wrong offset!");
static_assert(offsetof(FRH_CustomEndpointRequestWrapper, ContentType) == 0x000028, "Member 'FRH_CustomEndpointRequestWrapper::ContentType' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_ObjectVersionCheck
// 0x0040 (0x0040 - 0x0000)
struct FRH_ObjectVersionCheck final
{
public:
	class FString                                 IfMatch;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IfNoneMatch;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IfModifiedSince;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IfNotModifiedSince;                                // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_ObjectVersionCheck) == 0x000008, "Wrong alignment on FRH_ObjectVersionCheck");
static_assert(sizeof(FRH_ObjectVersionCheck) == 0x000040, "Wrong size on FRH_ObjectVersionCheck");
static_assert(offsetof(FRH_ObjectVersionCheck, IfMatch) == 0x000000, "Member 'FRH_ObjectVersionCheck::IfMatch' has a wrong offset!");
static_assert(offsetof(FRH_ObjectVersionCheck, IfNoneMatch) == 0x000010, "Member 'FRH_ObjectVersionCheck::IfNoneMatch' has a wrong offset!");
static_assert(offsetof(FRH_ObjectVersionCheck, IfModifiedSince) == 0x000020, "Member 'FRH_ObjectVersionCheck::IfModifiedSince' has a wrong offset!");
static_assert(offsetof(FRH_ObjectVersionCheck, IfNotModifiedSince) == 0x000030, "Member 'FRH_ObjectVersionCheck::IfNotModifiedSince' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RHVendorGetRequest
// 0x0038 (0x0038 - 0x0000)
struct FRHVendorGetRequest final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 VendorIds;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          bRecurseSubvendors;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipCachedVendors;                                // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRHVendorGetRequest) == 0x000008, "Wrong alignment on FRHVendorGetRequest");
static_assert(sizeof(FRHVendorGetRequest) == 0x000038, "Wrong size on FRHVendorGetRequest");
static_assert(offsetof(FRHVendorGetRequest, VendorIds) == 0x000020, "Member 'FRHVendorGetRequest::VendorIds' has a wrong offset!");
static_assert(offsetof(FRHVendorGetRequest, bRecurseSubvendors) == 0x000030, "Member 'FRHVendorGetRequest::bRecurseSubvendors' has a wrong offset!");
static_assert(offsetof(FRHVendorGetRequest, bSkipCachedVendors) == 0x000031, "Member 'FRHVendorGetRequest::bSkipCachedVendors' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_VendorRequestState
// 0x0050 (0x0050 - 0x0000)
struct FRH_VendorRequestState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHVendorGetRequest                    Request;                                           // 0x0008(0x0038)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_VendorRequestState) == 0x000008, "Wrong alignment on FRH_VendorRequestState");
static_assert(sizeof(FRH_VendorRequestState) == 0x000050, "Wrong size on FRH_VendorRequestState");
static_assert(offsetof(FRH_VendorRequestState, Request) == 0x000008, "Member 'FRH_VendorRequestState::Request' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_PlayerPlatformId
// 0x0018 (0x0018 - 0x0000)
struct FRH_PlayerPlatformId final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_Platform                               PlatformType;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_PlayerPlatformId) == 0x000008, "Wrong alignment on FRH_PlayerPlatformId");
static_assert(sizeof(FRH_PlayerPlatformId) == 0x000018, "Wrong size on FRH_PlayerPlatformId");
static_assert(offsetof(FRH_PlayerPlatformId, UserId) == 0x000000, "Member 'FRH_PlayerPlatformId::UserId' has a wrong offset!");
static_assert(offsetof(FRH_PlayerPlatformId, PlatformType) == 0x000010, "Member 'FRH_PlayerPlatformId::PlatformType' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_RemoteFileApiDirectory
// 0x0018 (0x0018 - 0x0000)
struct FRH_RemoteFileApiDirectory final
{
public:
	ERHAPI_FileType                               FileType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_EntityType                             EntityType;                                        // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EntityID;                                          // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_RemoteFileApiDirectory) == 0x000008, "Wrong alignment on FRH_RemoteFileApiDirectory");
static_assert(sizeof(FRH_RemoteFileApiDirectory) == 0x000018, "Wrong size on FRH_RemoteFileApiDirectory");
static_assert(offsetof(FRH_RemoteFileApiDirectory, FileType) == 0x000000, "Member 'FRH_RemoteFileApiDirectory::FileType' has a wrong offset!");
static_assert(offsetof(FRH_RemoteFileApiDirectory, EntityType) == 0x000001, "Member 'FRH_RemoteFileApiDirectory::EntityType' has a wrong offset!");
static_assert(offsetof(FRH_RemoteFileApiDirectory, EntityID) == 0x000008, "Member 'FRH_RemoteFileApiDirectory::EntityID' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_ServerTimeCache
// 0x0010 (0x0010 - 0x0000)
struct FRH_ServerTimeCache final
{
public:
	struct FDateTime                              LastReceivedServerDateTime;                        // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LastReceivedServerAtTime;                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_ServerTimeCache) == 0x000008, "Wrong alignment on FRH_ServerTimeCache");
static_assert(sizeof(FRH_ServerTimeCache) == 0x000010, "Wrong size on FRH_ServerTimeCache");
static_assert(offsetof(FRH_ServerTimeCache, LastReceivedServerDateTime) == 0x000000, "Member 'FRH_ServerTimeCache::LastReceivedServerDateTime' has a wrong offset!");
static_assert(offsetof(FRH_ServerTimeCache, LastReceivedServerAtTime) == 0x000008, "Member 'FRH_ServerTimeCache::LastReceivedServerAtTime' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_DiagnosticReportOptions
// 0x0060 (0x0060 - 0x0000)
struct FRH_DiagnosticReportOptions final
{
public:
	bool                                          bIncludeMetadata;                                  // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_JsonObject                      CustomMetadata;                                    // 0x0008(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIncludeWebRequests;                               // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDeviceData;                                // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeErrors;                                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteToFile;                                      // 0x001B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutputFilename;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteToCloud;                                     // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  World;                                             // 0x0034(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x24];                                      // 0x003C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_DiagnosticReportOptions) == 0x000008, "Wrong alignment on FRH_DiagnosticReportOptions");
static_assert(sizeof(FRH_DiagnosticReportOptions) == 0x000060, "Wrong size on FRH_DiagnosticReportOptions");
static_assert(offsetof(FRH_DiagnosticReportOptions, bIncludeMetadata) == 0x000000, "Member 'FRH_DiagnosticReportOptions::bIncludeMetadata' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, CustomMetadata) == 0x000008, "Member 'FRH_DiagnosticReportOptions::CustomMetadata' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, bIncludeWebRequests) == 0x000018, "Member 'FRH_DiagnosticReportOptions::bIncludeWebRequests' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, bIncludeDeviceData) == 0x000019, "Member 'FRH_DiagnosticReportOptions::bIncludeDeviceData' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, bIncludeErrors) == 0x00001A, "Member 'FRH_DiagnosticReportOptions::bIncludeErrors' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, bWriteToFile) == 0x00001B, "Member 'FRH_DiagnosticReportOptions::bWriteToFile' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, OutputFilename) == 0x000020, "Member 'FRH_DiagnosticReportOptions::OutputFilename' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, bWriteToCloud) == 0x000030, "Member 'FRH_DiagnosticReportOptions::bWriteToCloud' has a wrong offset!");
static_assert(offsetof(FRH_DiagnosticReportOptions, World) == 0x000034, "Member 'FRH_DiagnosticReportOptions::World' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_ActiveSessionStatePlayerContext
// 0x0030 (0x0030 - 0x0000)
struct FRH_ActiveSessionStatePlayerContext final
{
public:
	struct FGuid                                  RHPlayerId;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             Controller;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              JoinedTime;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LeaveTime;                                         // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationSeconds;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_ActiveSessionStatePlayerContext) == 0x000008, "Wrong alignment on FRH_ActiveSessionStatePlayerContext");
static_assert(sizeof(FRH_ActiveSessionStatePlayerContext) == 0x000030, "Wrong size on FRH_ActiveSessionStatePlayerContext");
static_assert(offsetof(FRH_ActiveSessionStatePlayerContext, RHPlayerId) == 0x000000, "Member 'FRH_ActiveSessionStatePlayerContext::RHPlayerId' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionStatePlayerContext, Controller) == 0x000010, "Member 'FRH_ActiveSessionStatePlayerContext::Controller' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionStatePlayerContext, JoinedTime) == 0x000018, "Member 'FRH_ActiveSessionStatePlayerContext::JoinedTime' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionStatePlayerContext, LeaveTime) == 0x000020, "Member 'FRH_ActiveSessionStatePlayerContext::LeaveTime' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionStatePlayerContext, DurationSeconds) == 0x000028, "Member 'FRH_ActiveSessionStatePlayerContext::DurationSeconds' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_ActiveSessionState
// 0x07A8 (0x07A8 - 0x0000)
struct FRH_ActiveSessionState final
{
public:
	class URH_JoinedSession*                      Session;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsBackfillTerminated;                             // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRH_ActiveSessionStatePlayerContext> PlayerContexts;                               // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URH_PEXCollector*                       PlayerExperienceCollector;                         // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ActivationTime;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHost;                                           // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRHAPI_Session                         ActivationSessionInfo;                             // 0x0060(0x0748)(Edit, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_ActiveSessionState) == 0x000008, "Wrong alignment on FRH_ActiveSessionState");
static_assert(sizeof(FRH_ActiveSessionState) == 0x0007A8, "Wrong size on FRH_ActiveSessionState");
static_assert(offsetof(FRH_ActiveSessionState, Session) == 0x000000, "Member 'FRH_ActiveSessionState::Session' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, bIsBackfillTerminated) == 0x000020, "Member 'FRH_ActiveSessionState::bIsBackfillTerminated' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, PlayerContexts) == 0x000028, "Member 'FRH_ActiveSessionState::PlayerContexts' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, MatchID) == 0x000038, "Member 'FRH_ActiveSessionState::MatchID' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, PlayerExperienceCollector) == 0x000048, "Member 'FRH_ActiveSessionState::PlayerExperienceCollector' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, ActivationTime) == 0x000050, "Member 'FRH_ActiveSessionState::ActivationTime' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, bIsHost) == 0x000058, "Member 'FRH_ActiveSessionState::bIsHost' has a wrong offset!");
static_assert(offsetof(FRH_ActiveSessionState, ActivationSessionInfo) == 0x000060, "Member 'FRH_ActiveSessionState::ActivationSessionInfo' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_LeaderboardResults
// 0x0088 (0x0088 - 0x0000)
struct FRH_LeaderboardResults final
{
public:
	TArray<struct FRHAPI_LeaderboardPage>         Pages;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x78];                                      // 0x0010(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_LeaderboardResults) == 0x000008, "Wrong alignment on FRH_LeaderboardResults");
static_assert(sizeof(FRH_LeaderboardResults) == 0x000088, "Wrong size on FRH_LeaderboardResults");
static_assert(offsetof(FRH_LeaderboardResults, Pages) == 0x000000, "Member 'FRH_LeaderboardResults::Pages' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_PEXStatState
// 0x0020 (0x0020 - 0x0000)
struct FRH_PEXStatState final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Avg;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sum;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SumOfSquares;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Variance;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_PEXStatState) == 0x000004, "Wrong alignment on FRH_PEXStatState");
static_assert(sizeof(FRH_PEXStatState) == 0x000020, "Wrong size on FRH_PEXStatState");
static_assert(offsetof(FRH_PEXStatState, Current) == 0x000000, "Member 'FRH_PEXStatState::Current' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Min) == 0x000004, "Member 'FRH_PEXStatState::Min' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Max) == 0x000008, "Member 'FRH_PEXStatState::Max' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Avg) == 0x00000C, "Member 'FRH_PEXStatState::Avg' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Sum) == 0x000010, "Member 'FRH_PEXStatState::Sum' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, SumOfSquares) == 0x000014, "Member 'FRH_PEXStatState::SumOfSquares' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Variance) == 0x000018, "Member 'FRH_PEXStatState::Variance' has a wrong offset!");
static_assert(offsetof(FRH_PEXStatState, Count) == 0x00001C, "Member 'FRH_PEXStatState::Count' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_StatAccumulator
// 0x004C (0x004C - 0x0000)
struct FRH_StatAccumulator final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERH_PEXValueType                              TimelineValueType;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRH_PEXStatState                       CaptureState;                                      // 0x000C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FRH_PEXStatState                       SummaryState;                                      // 0x002C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_StatAccumulator) == 0x000004, "Wrong alignment on FRH_StatAccumulator");
static_assert(sizeof(FRH_StatAccumulator) == 0x00004C, "Wrong size on FRH_StatAccumulator");
static_assert(offsetof(FRH_StatAccumulator, Name) == 0x000000, "Member 'FRH_StatAccumulator::Name' has a wrong offset!");
static_assert(offsetof(FRH_StatAccumulator, TimelineValueType) == 0x000008, "Member 'FRH_StatAccumulator::TimelineValueType' has a wrong offset!");
static_assert(offsetof(FRH_StatAccumulator, CaptureState) == 0x00000C, "Member 'FRH_StatAccumulator::CaptureState' has a wrong offset!");
static_assert(offsetof(FRH_StatAccumulator, SummaryState) == 0x00002C, "Member 'FRH_StatAccumulator::SummaryState' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_StatCounter
// 0x002C (0x002C - 0x0000)
struct FRH_StatCounter final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Current;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_PEXStatState                       SummaryState;                                      // 0x000C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_StatCounter) == 0x000004, "Wrong alignment on FRH_StatCounter");
static_assert(sizeof(FRH_StatCounter) == 0x00002C, "Wrong size on FRH_StatCounter");
static_assert(offsetof(FRH_StatCounter, Name) == 0x000000, "Member 'FRH_StatCounter::Name' has a wrong offset!");
static_assert(offsetof(FRH_StatCounter, Current) == 0x000008, "Member 'FRH_StatCounter::Current' has a wrong offset!");
static_assert(offsetof(FRH_StatCounter, SummaryState) == 0x00000C, "Member 'FRH_StatCounter::SummaryState' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_PlayerSettingKeySetWrapper
// 0x0050 (0x0050 - 0x0000)
struct FRH_PlayerSettingKeySetWrapper final
{
public:
	TSet<class FString>                           SettingKeySet;                                     // 0x0000(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_PlayerSettingKeySetWrapper) == 0x000008, "Wrong alignment on FRH_PlayerSettingKeySetWrapper");
static_assert(sizeof(FRH_PlayerSettingKeySetWrapper) == 0x000050, "Wrong size on FRH_PlayerSettingKeySetWrapper");
static_assert(offsetof(FRH_PlayerSettingKeySetWrapper, SettingKeySet) == 0x000000, "Member 'FRH_PlayerSettingKeySetWrapper::SettingKeySet' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_PlayerAndPlatformInfo
// 0x0028 (0x0028 - 0x0000)
struct FRH_PlayerAndPlatformInfo final
{
public:
	struct FGuid                                  PlayerUuid;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRH_PlayerPlatformId                   PlayerPlatformId;                                  // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_PlayerAndPlatformInfo) == 0x000008, "Wrong alignment on FRH_PlayerAndPlatformInfo");
static_assert(sizeof(FRH_PlayerAndPlatformInfo) == 0x000028, "Wrong size on FRH_PlayerAndPlatformInfo");
static_assert(offsetof(FRH_PlayerAndPlatformInfo, PlayerUuid) == 0x000000, "Member 'FRH_PlayerAndPlatformInfo::PlayerUuid' has a wrong offset!");
static_assert(offsetof(FRH_PlayerAndPlatformInfo, PlayerPlatformId) == 0x000010, "Member 'FRH_PlayerAndPlatformInfo::PlayerPlatformId' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_InventorySession
// 0x0038 (0x0038 - 0x0000)
struct FRH_InventorySession final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryPlatform                      SessionPlatform;                                   // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OrderId;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AppliedDurableLoot;                                // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_InventorySession) == 0x000008, "Wrong alignment on FRH_InventorySession");
static_assert(sizeof(FRH_InventorySession) == 0x000038, "Wrong size on FRH_InventorySession");
static_assert(offsetof(FRH_InventorySession, SessionId) == 0x000000, "Member 'FRH_InventorySession::SessionId' has a wrong offset!");
static_assert(offsetof(FRH_InventorySession, SessionPlatform) == 0x000010, "Member 'FRH_InventorySession::SessionPlatform' has a wrong offset!");
static_assert(offsetof(FRH_InventorySession, OrderId) == 0x000018, "Member 'FRH_InventorySession::OrderId' has a wrong offset!");
static_assert(offsetof(FRH_InventorySession, AppliedDurableLoot) == 0x000028, "Member 'FRH_InventorySession::AppliedDurableLoot' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_ItemInventory
// 0x0090 (0x0090 - 0x0000)
struct FRH_ItemInventory final
{
public:
	struct FGuid                                  InventoryId;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERHAPI_InventoryType                          InventoryType;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x14];                                      // 0x001C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Acquired;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData;                                        // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        Bucket;                                            // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_ItemInventory) == 0x000008, "Wrong alignment on FRH_ItemInventory");
static_assert(sizeof(FRH_ItemInventory) == 0x000090, "Wrong size on FRH_ItemInventory");
static_assert(offsetof(FRH_ItemInventory, InventoryId) == 0x000000, "Member 'FRH_ItemInventory::InventoryId' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, InventoryType) == 0x000010, "Member 'FRH_ItemInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, ItemId) == 0x000014, "Member 'FRH_ItemInventory::ItemId' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, Count) == 0x000018, "Member 'FRH_ItemInventory::Count' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, Acquired) == 0x000030, "Member 'FRH_ItemInventory::Acquired' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, CustomData) == 0x000038, "Member 'FRH_ItemInventory::CustomData' has a wrong offset!");
static_assert(offsetof(FRH_ItemInventory, Bucket) == 0x000088, "Member 'FRH_ItemInventory::Bucket' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_BaseInventoryOperation
// 0x0078 (0x0078 - 0x0000)
struct FRH_BaseInventoryOperation
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemId;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomData;                                        // 0x0008(0x0050)(Edit, Transient, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ERHAPI_InventoryBucket                        Bucket;                                            // 0x0058(0x0001)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x17];                                      // 0x0059(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InventoryShouldExpire;                             // 0x0070(0x0001)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_BaseInventoryOperation) == 0x000008, "Wrong alignment on FRH_BaseInventoryOperation");
static_assert(sizeof(FRH_BaseInventoryOperation) == 0x000078, "Wrong size on FRH_BaseInventoryOperation");
static_assert(offsetof(FRH_BaseInventoryOperation, Count) == 0x000000, "Member 'FRH_BaseInventoryOperation::Count' has a wrong offset!");
static_assert(offsetof(FRH_BaseInventoryOperation, ItemId) == 0x000004, "Member 'FRH_BaseInventoryOperation::ItemId' has a wrong offset!");
static_assert(offsetof(FRH_BaseInventoryOperation, CustomData) == 0x000008, "Member 'FRH_BaseInventoryOperation::CustomData' has a wrong offset!");
static_assert(offsetof(FRH_BaseInventoryOperation, Bucket) == 0x000058, "Member 'FRH_BaseInventoryOperation::Bucket' has a wrong offset!");
static_assert(offsetof(FRH_BaseInventoryOperation, InventoryShouldExpire) == 0x000070, "Member 'FRH_BaseInventoryOperation::InventoryShouldExpire' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_CreateInventory
// 0x0008 (0x0080 - 0x0078)
struct FRH_CreateInventory final : public FRH_BaseInventoryOperation
{
public:
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_CreateInventory) == 0x000008, "Wrong alignment on FRH_CreateInventory");
static_assert(sizeof(FRH_CreateInventory) == 0x000080, "Wrong size on FRH_CreateInventory");

// ScriptStruct RallyHereIntegration.RH_UpdateInventory
// 0x0018 (0x0090 - 0x0078)
struct FRH_UpdateInventory final : public FRH_BaseInventoryOperation
{
public:
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRH_UpdateInventory) == 0x000008, "Wrong alignment on FRH_UpdateInventory");
static_assert(sizeof(FRH_UpdateInventory) == 0x000090, "Wrong size on FRH_UpdateInventory");

// ScriptStruct RallyHereIntegration.RH_PollTimerSetting
// 0x0018 (0x0018 - 0x0000)
struct FRH_PollTimerSetting final
{
public:
	class FName                                   TimerName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterPct;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterPctInitial;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRH_PollTimerSetting) == 0x000004, "Wrong alignment on FRH_PollTimerSetting");
static_assert(sizeof(FRH_PollTimerSetting) == 0x000018, "Wrong size on FRH_PollTimerSetting");
static_assert(offsetof(FRH_PollTimerSetting, TimerName) == 0x000000, "Member 'FRH_PollTimerSetting::TimerName' has a wrong offset!");
static_assert(offsetof(FRH_PollTimerSetting, bDisabled) == 0x000008, "Member 'FRH_PollTimerSetting::bDisabled' has a wrong offset!");
static_assert(offsetof(FRH_PollTimerSetting, Interval) == 0x00000C, "Member 'FRH_PollTimerSetting::Interval' has a wrong offset!");
static_assert(offsetof(FRH_PollTimerSetting, JitterPct) == 0x000010, "Member 'FRH_PollTimerSetting::JitterPct' has a wrong offset!");
static_assert(offsetof(FRH_PollTimerSetting, JitterPctInitial) == 0x000014, "Member 'FRH_PollTimerSetting::JitterPctInitial' has a wrong offset!");

// ScriptStruct RallyHereIntegration.RH_LootId
// 0x0000 (0x0014 - 0x0014)
struct FRH_LootId final : public FRH_LegacyIdToGuid
{
};
static_assert(alignof(FRH_LootId) == 0x000004, "Wrong alignment on FRH_LootId");
static_assert(sizeof(FRH_LootId) == 0x000014, "Wrong size on FRH_LootId");

}

