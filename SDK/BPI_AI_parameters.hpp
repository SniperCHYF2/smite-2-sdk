#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AI

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_AI.BPI_AI_C.GetLeashCapsule
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_GetLeashCapsule final
{
public:
	class UPrimitiveComponent*                    LeashComponent;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetLeashCapsule) == 0x000008, "Wrong alignment on BPI_AI_C_GetLeashCapsule");
static_assert(sizeof(BPI_AI_C_GetLeashCapsule) == 0x000008, "Wrong size on BPI_AI_C_GetLeashCapsule");
static_assert(offsetof(BPI_AI_C_GetLeashCapsule, LeashComponent) == 0x000000, "Member 'BPI_AI_C_GetLeashCapsule::LeashComponent' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetLeashRadius
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_GetLeashRadius final
{
public:
	double                                        LeashRadius;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetLeashRadius) == 0x000008, "Wrong alignment on BPI_AI_C_GetLeashRadius");
static_assert(sizeof(BPI_AI_C_GetLeashRadius) == 0x000008, "Wrong size on BPI_AI_C_GetLeashRadius");
static_assert(offsetof(BPI_AI_C_GetLeashRadius, LeashRadius) == 0x000000, "Member 'BPI_AI_C_GetLeashRadius::LeashRadius' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetLeashVolume
// 0x0028 (0x0028 - 0x0000)
struct BPI_AI_C_GetLeashVolume final
{
public:
	TSoftObjectPtr<class ATriggerVolume>          LeashVolume;                                       // 0x0000(0x0028)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetLeashVolume) == 0x000008, "Wrong alignment on BPI_AI_C_GetLeashVolume");
static_assert(sizeof(BPI_AI_C_GetLeashVolume) == 0x000028, "Wrong size on BPI_AI_C_GetLeashVolume");
static_assert(offsetof(BPI_AI_C_GetLeashVolume, LeashVolume) == 0x000000, "Member 'BPI_AI_C_GetLeashVolume::LeashVolume' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetNearbyMinionCount
// 0x0004 (0x0004 - 0x0000)
struct BPI_AI_C_GetNearbyMinionCount final
{
public:
	int32                                         MinionCount;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_GetNearbyMinionCount) == 0x000004, "Wrong alignment on BPI_AI_C_GetNearbyMinionCount");
static_assert(sizeof(BPI_AI_C_GetNearbyMinionCount) == 0x000004, "Wrong size on BPI_AI_C_GetNearbyMinionCount");
static_assert(offsetof(BPI_AI_C_GetNearbyMinionCount, MinionCount) == 0x000000, "Member 'BPI_AI_C_GetNearbyMinionCount::MinionCount' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.GetStartingWaypoints
// 0x0010 (0x0010 - 0x0000)
struct BPI_AI_C_GetStartingWaypoints final
{
public:
	TArray<TSoftObjectPtr<class AWaypoint_C>>     Waypoints;                                         // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_AI_C_GetStartingWaypoints) == 0x000008, "Wrong alignment on BPI_AI_C_GetStartingWaypoints");
static_assert(sizeof(BPI_AI_C_GetStartingWaypoints) == 0x000010, "Wrong size on BPI_AI_C_GetStartingWaypoints");
static_assert(offsetof(BPI_AI_C_GetStartingWaypoints, Waypoints) == 0x000000, "Member 'BPI_AI_C_GetStartingWaypoints::Waypoints' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.RetrieveTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_RetrieveTargetActor final
{
public:
	class AActor*                                 CurrentTargetActor;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_RetrieveTargetActor) == 0x000008, "Wrong alignment on BPI_AI_C_RetrieveTargetActor");
static_assert(sizeof(BPI_AI_C_RetrieveTargetActor) == 0x000008, "Wrong size on BPI_AI_C_RetrieveTargetActor");
static_assert(offsetof(BPI_AI_C_RetrieveTargetActor, CurrentTargetActor) == 0x000000, "Member 'BPI_AI_C_RetrieveTargetActor::CurrentTargetActor' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.UpdateNearbyMinionCount
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_UpdateNearbyMinionCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewMinionCount;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_UpdateNearbyMinionCount) == 0x000004, "Wrong alignment on BPI_AI_C_UpdateNearbyMinionCount");
static_assert(sizeof(BPI_AI_C_UpdateNearbyMinionCount) == 0x000008, "Wrong size on BPI_AI_C_UpdateNearbyMinionCount");
static_assert(offsetof(BPI_AI_C_UpdateNearbyMinionCount, NewCount) == 0x000000, "Member 'BPI_AI_C_UpdateNearbyMinionCount::NewCount' has a wrong offset!");
static_assert(offsetof(BPI_AI_C_UpdateNearbyMinionCount, NewMinionCount) == 0x000004, "Member 'BPI_AI_C_UpdateNearbyMinionCount::NewMinionCount' has a wrong offset!");

// Function BPI_AI.BPI_AI_C.UpdateTargetActor
// 0x0008 (0x0008 - 0x0000)
struct BPI_AI_C_UpdateTargetActor final
{
public:
	class AActor*                                 NewTargetActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AI_C_UpdateTargetActor) == 0x000008, "Wrong alignment on BPI_AI_C_UpdateTargetActor");
static_assert(sizeof(BPI_AI_C_UpdateTargetActor) == 0x000008, "Wrong size on BPI_AI_C_UpdateTargetActor");
static_assert(offsetof(BPI_AI_C_UpdateTargetActor, NewTargetActor) == 0x000000, "Member 'BPI_AI_C_UpdateTargetActor::NewTargetActor' has a wrong offset!");

}

