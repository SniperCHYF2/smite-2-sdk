#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConquestGameState_Tutorial

#include "Basic.hpp"

#include "BP_ConquestGameState_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Hemingway_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ConquestGameState_Tutorial.BP_ConquestGameState_Tutorial_C
// 0x0048 (0x0958 - 0x0910)
class ABP_ConquestGameState_Tutorial_C final : public ABP_ConquestGameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ConquestGameState_Tutorial_C;    // 0x0910(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_NPE_GuideComponent_C*               BP_NPE_GuideComponent;                             // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_NPE_Stage_C*>                NPEStages;                                         // 0x0920(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_NPE_Guide_C*                        NPEGuide;                                          // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  AIDirectives;                                      // 0x0938(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_ConquestGameState_Tutorial(int32 EntryPoint);
	void GetActiveNPEStage(struct FGameplayTag* ActiveStageTag);
	void GetAssociatedRoles(TArray<ECharacterRole>* Roles);
	void GetNPEAIDirectives(struct FGameplayTagContainer* AIDirectives_0);
	void GetNPEGuide(class ABP_NPE_Guide_C** GuideActor);
	void GetNPEStages(TArray<class ABP_NPE_Stage_C*>* Stages);
	void GetObjectiveTimeRemaining(double* TimeRemaining);
	void NPEGuideStageActivation();
	void ReceiveBeginPlay();
	void SetActiveNPEStage(const struct FGameplayTag& ActiveStage);
	void SetNPEAIDirectives(const struct FGameplayTag& NewAIDirective, bool ClearPreviousDirectives);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ConquestGameState_Tutorial_C">();
	}
	static class ABP_ConquestGameState_Tutorial_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ConquestGameState_Tutorial_C>();
	}
};
static_assert(alignof(ABP_ConquestGameState_Tutorial_C) == 0x000008, "Wrong alignment on ABP_ConquestGameState_Tutorial_C");
static_assert(sizeof(ABP_ConquestGameState_Tutorial_C) == 0x000958, "Wrong size on ABP_ConquestGameState_Tutorial_C");
static_assert(offsetof(ABP_ConquestGameState_Tutorial_C, UberGraphFrame_BP_ConquestGameState_Tutorial_C) == 0x000910, "Member 'ABP_ConquestGameState_Tutorial_C::UberGraphFrame_BP_ConquestGameState_Tutorial_C' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_Tutorial_C, BP_NPE_GuideComponent) == 0x000918, "Member 'ABP_ConquestGameState_Tutorial_C::BP_NPE_GuideComponent' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_Tutorial_C, NPEStages) == 0x000920, "Member 'ABP_ConquestGameState_Tutorial_C::NPEStages' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_Tutorial_C, NPEGuide) == 0x000930, "Member 'ABP_ConquestGameState_Tutorial_C::NPEGuide' has a wrong offset!");
static_assert(offsetof(ABP_ConquestGameState_Tutorial_C, AIDirectives) == 0x000938, "Member 'ABP_ConquestGameState_Tutorial_C::AIDirectives' has a wrong offset!");

}

