#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_RandomStrafe

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_RandomStrafe.BTT_RandomStrafe_C
// 0x0020 (0x00C8 - 0x00A8)
class UBTT_RandomStrafe_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        StrafeChance;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceMin;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceMax;                                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftRightOnly;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_RandomStrafe(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_RandomStrafe_C">();
	}
	static class UBTT_RandomStrafe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_RandomStrafe_C>();
	}
};
static_assert(alignof(UBTT_RandomStrafe_C) == 0x000008, "Wrong alignment on UBTT_RandomStrafe_C");
static_assert(sizeof(UBTT_RandomStrafe_C) == 0x0000C8, "Wrong size on UBTT_RandomStrafe_C");
static_assert(offsetof(UBTT_RandomStrafe_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_RandomStrafe_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_RandomStrafe_C, StrafeChance) == 0x0000B0, "Member 'UBTT_RandomStrafe_C::StrafeChance' has a wrong offset!");
static_assert(offsetof(UBTT_RandomStrafe_C, DistanceMin) == 0x0000B8, "Member 'UBTT_RandomStrafe_C::DistanceMin' has a wrong offset!");
static_assert(offsetof(UBTT_RandomStrafe_C, DistanceMax) == 0x0000BC, "Member 'UBTT_RandomStrafe_C::DistanceMax' has a wrong offset!");
static_assert(offsetof(UBTT_RandomStrafe_C, LeftRightOnly) == 0x0000C0, "Member 'UBTT_RandomStrafe_C::LeftRightOnly' has a wrong offset!");

}

